import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as n,b as s,d as t,e}from"./app-CxgS3Mrc.js";const l={},r=n("h1",{id:"architecture-设计原则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#architecture-设计原则"},[n("span",null,"architecture_设计原则")])],-1),u={href:"https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="markdown-it-设计原则" tabindex="-1"><a class="header-anchor" href="#markdown-it-设计原则"><span>Markdown-it 设计原则</span></a></h2><h3 id="数据流-data-flow" tabindex="-1"><a class="header-anchor" href="#数据流-data-flow"><span>数据流 (Data flow)</span></a></h3><p>入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - <code>core</code> 、 <code>block</code> 和 <code>inline</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>core
    core<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>normalize<span class="token punctuation">)</span>
    <span class="token operator">...</span>
    core<span class="token punctuation">.</span>ruleX

    block
        block<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>blockquote<span class="token punctuation">)</span>
        <span class="token operator">...</span>
        block<span class="token punctuation">.</span>ruleX

    core<span class="token punctuation">.</span><span class="token function">ruleX1</span> <span class="token punctuation">(</span>intermediate rule that applies on block tokens<span class="token punctuation">,</span> nothing yet<span class="token punctuation">)</span>
    <span class="token operator">...</span>
    core<span class="token punctuation">.</span>ruleXX

    <span class="token function">inline</span> <span class="token punctuation">(</span>applied to each block token <span class="token keyword">with</span> <span class="token string">&quot;inline&quot;</span> type<span class="token punctuation">)</span>
        inline<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span>
        <span class="token operator">...</span>
        inline<span class="token punctuation">.</span>ruleX

    core<span class="token punctuation">.</span><span class="token function">ruleYY</span> <span class="token punctuation">(</span>applies to all tokens<span class="token punctuation">)</span>
    <span class="token operator">...</span> <span class="token punctuation">(</span>abbreviation<span class="token punctuation">,</span> footnote<span class="token punctuation">,</span> typographer<span class="token punctuation">,</span> linkifier<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析的结果是一个 <code>list tokens</code>，它将被传递给 <code>renderer</code> 来生成 html 内容。</p><p>这些 tokens 能被自身解析来生成更多的 tokens。（例如：一个 <code>list token</code> 能被拆分为多个 <code>inline tokens</code>）。</p><p>一个 <code>env</code> 沙盒能被用来与 tokens 来给你的解析器和渲染器注入额外的变量。</p><p>当解析数据时，每个链（core / block / inline）会使用一个独立的 <code>state</code> 对象，所以每个解析中的操作都是独立的，并且能在运行时被禁用。</p><h3 id="令牌流-token-stream" tabindex="-1"><a class="header-anchor" href="#令牌流-token-stream"><span>令牌流 (Token stream)</span></a></h3><p>不像传统的 <code>AST</code>，我们使用更加底层的数据代表 <code>tokens</code> 两者区别：</p><ul><li>Tokens 是一个简单的序列（数组）。</li><li>打开的和关闭的标签是隔离的、分开的。</li><li>有特殊的 token 对象，比如“内联容器(inline container)”，它有嵌套的 tokens。</li><li>一系列内联的标签（粗体，斜体，文本等等）</li></ul>`,11),d={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/token.js",target:"_blank",rel:"noopener noreferrer"},m=e("<p>总之，一个 token 流是：</p><ul><li>在顶层 - 是成对或单个“块” tokens 的数组： <ul><li>打开的/关闭的标题，列表，块引用，段落，...</li><li>代码，围栏块，水平规则，html 块，内联容器</li></ul></li><li>每个内联 token 都有一个 <code>.children</code> 属性，带有嵌套 token 流，用于内联内容： <ul><li>打开的/关闭的 strong 强调，em 强调，链接，代码，...</li><li>文字，换行符</li></ul></li></ul><p>更多关于 tokens 的细节：</p>",3),v={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/token.js",target:"_blank",rel:"noopener noreferrer"},h={href:"https://markdown-it.github.io/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"debug",-1),g=e('<h3 id="规则-rules" tabindex="-1"><a class="header-anchor" href="#规则-rules"><span>规则（Rules）</span></a></h3><p>Rules 是用解析器的 <code>state</code> 对象做 “有魔力的事情” 的函数。一个唯一的规则会与一个或多个<strong>链</strong>相关联。 例如，<code>blockquote</code> 标记与 <code>blockquote</code>，<code>paragraph</code>，<code>heading</code> 和 <code>list</code> 链相关联。</p>',2),f={href:"https://markdown-it.docschina.org/api/Ruler.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://markdown-it.docschina.org/MarkdownIt.html",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"enabled",-1),x=n("code",null,"disabled",-1),y=n("p",null,[s("你可以注意到，某些规则具有 "),n("code",null,"validation mode"),s(" - 在此模式下规则不能修改 token 流，只能查看 token 的结尾。这是一个重要的设计原则 - token 流在块和内联解析阶段是“只写的”。")],-1),j=n("p",null,"解析器旨在使规则彼此独立。你可以安全地启用/禁用它们，或者添加新的。 关于如何创建新规则则没有通用的方法 —— 设计具有良好数据隔离的分布式状态机是一项棘手的业务。但是你可以调查现有规则和插件，以查看可能的方法。",-1),A=n("p",null,"此外，在复杂的情况下，你可以尝试在跟踪器 (tracker) 中寻求帮助。这种情况是很简单的 - 从你的 ticket 上可以清楚地看到，你研究过文档，源码，并尝试自己做一些事情。我们绝不会拒绝真正的开发人员。",-1),B=n("h3",{id:"渲染器-renderer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#渲染器-renderer"},[n("span",null,"渲染器（Renderer）")])],-1),R={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},M=e(`<p>渲染器规则位于 <code>md.renderer.rules [name]</code> ，是简单的具有相同特征的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> renderer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">return</span> htmlResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在许多情况下，即使在没有解析器侵入的情况下，也可以轻松地进行输出更改。 例如，让我们将img和video的链接 替换为 播放器的iframe</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> defaultRender <span class="token operator">=</span> md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>image<span class="token punctuation">;</span>
<span class="token keyword">var</span> vimeoRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">image</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// image标签的渲染器</span>
  <span class="token keyword">var</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>
      aIndex <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>vimeoRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匹配img和video的链接</span>
    <span class="token keyword">var</span> id <span class="token operator">=</span> token<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>vimeoRE<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;\\n&#39;</span> <span class="token operator">+</span> <span class="token comment">// 并替换为播放器的iframe</span>
           <span class="token string">&#39;  &lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;//player.vimeo.com/video/&#39;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&#39;&quot;&gt;&lt;/iframe&gt;\\n&#39;</span> <span class="token operator">+</span>
           <span class="token string">&#39;&lt;/div&gt;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 传递 token 给默认的渲染器。</span>
  <span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是另一个示例，如何添加 <code>target=&quot;_blank&quot;</code> 到所有链接：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 如果覆盖，或者是对默认渲染器的代理，则记住老的渲染器。</span>
<span class="token keyword">var</span> defaultRender <span class="token operator">=</span> md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>link_open <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">renderToken</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">link_open</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果你确认其他的插件不能添加 \`target\` - 放弃以下检查：</span>
  <span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加新属性</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// 替换已经存在的属性值</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 传递 token 到默认的渲染器。</span>
  <span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果你需要添加属性，你可以不需要覆盖渲染器来做这些事。</p><p>例如，你能够在 <code>core</code> 链中更新 tokens。这比直接覆盖渲染器慢，但这更简单。</p>`,8),q={href:"https://github.com/markdown-it/markdown-it-for-inline",target:"_blank",rel:"noopener noreferrer"},I=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-for-inline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用插件</span>

<span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token string">&#39;url_new_win&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;link_open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

              <span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也能够<strong>编写你自己的渲染器</strong>来生成其他除了 HTML 的格式，像 JSON/XML... 你甚至能够使用它来生成 AST。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3>`,3),D={href:"https://markdown-it.docschina.org/architecture.html#%E6%95%B0%E6%8D%AE%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},T=n("ol",null,[n("li",null,"解析块，并使用块 token 填充顶层 token 流"),n("li",null,[s("解析内联容器上的内容，填充 "),n("code",null,".children"),s(" 属性")]),n("li",null,"进行渲染")],-1),P={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_core.js",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_inline.js",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"};function C(S,V){const a=p("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[s("参考："),n("a",u,[s("解析器架构和设计原则"),t(a)])]),k,n("p",null,[s("参考 "),n("a",d,[s("token class"),t(a)]),s(" 以获得关于每个 token 内容的细节。")]),m,n("ul",null,[n("li",null,[n("a",v,[s("Renderer 源码"),t(a)])]),n("li",null,[n("a",b,[s("Token 源码"),t(a)])]),n("li",null,[n("a",h,[s("在线示例"),t(a)]),s(" - 输入你的文本然后点击 "),_,s(" tab。")])]),g,n("p",null,[s("Rules 通过 "),n("a",f,[s("Ruler"),t(a)]),s(" 实例按名称管理，并且可以被 "),n("a",w,[s("MarkdownIt"),t(a)]),s(" 方法 "),E,s(" / "),x,s("。")]),y,j,A,B,n("p",null,[s("生成 token 流后，将其传递给 "),n("a",R,[s("renderer"),t(a)]),s("。 然后它会遍历所有 token，将每个token 传递给与 token 的 type 属性同名的规则。")]),M,n("p",null,[s("让我们使用 "),n("a",q,[s("markdown-for-inline"),t(a)]),s(" 插件来做同样的事情，就像之前的例子一样：")]),I,n("p",null,[s("这在 "),n("a",D,[s("数据流"),t(a)]),s(" 中提到过，但让我们再重复序列一次：")]),T,n("p",null,[s("介于两者之间你可以应用额外的转换。全部内容 可见于每个链的顶部 "),n("a",P,[s("parser_core.js"),t(a)]),s("，"),n("a",N,[s("parser_block.js"),t(a)]),n("a",L,[t(a)]),s(" 和 "),n("a",X,[s("parser_inline.js"),t(a)]),s("文件。")]),n("p",null,[s("你也可以直接在 "),n("a",F,[s("renderer"),t(a)]),s(" 中更改输出，以解决许多简单的情况。")])])}const J=o(l,[["render",C],["__file","architecture_设计原则.html.vue"]]),O=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8Amarkdown-it%20%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E3%80%8B/architecture_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"architecture_设计原则","lang":"zh-CN","frontmatter":{"description":"architecture_设计原则 参考：解析器架构和设计原则 Markdown-it 设计原则 数据流 (Data flow) 入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - core 、 block 和 inline ： 解析的结果是一个 list tokens，它将被传递给 renderer 来生成 html 内容。 这些 tokens 能...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8Amarkdown-it%20%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E3%80%8B/architecture_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"architecture_设计原则"}],["meta",{"property":"og:description","content":"architecture_设计原则 参考：解析器架构和设计原则 Markdown-it 设计原则 数据流 (Data flow) 入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - core 、 block 和 inline ： 解析的结果是一个 list tokens，它将被传递给 renderer 来生成 html 内容。 这些 tokens 能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"architecture_设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"architecture_设计原则","slug":"architecture-设计原则","link":"#architecture-设计原则","children":[{"level":2,"title":"Markdown-it 设计原则","slug":"markdown-it-设计原则","link":"#markdown-it-设计原则","children":[{"level":3,"title":"数据流 (Data flow)","slug":"数据流-data-flow","link":"#数据流-data-flow","children":[]},{"level":3,"title":"令牌流 (Token stream)","slug":"令牌流-token-stream","link":"#令牌流-token-stream","children":[]},{"level":3,"title":"规则（Rules）","slug":"规则-rules","link":"#规则-rules","children":[]},{"level":3,"title":"渲染器（Renderer）","slug":"渲染器-renderer","link":"#渲染器-renderer","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.03,"words":1509},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《markdown-it 官方文档》/architecture_设计原则.md","excerpt":"\\n<p>参考：<a href=\\"https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">解析器架构和设计原则</a></p>\\n<h2>Markdown-it 设计原则</h2>\\n<h3>数据流 (Data flow)</h3>\\n<p>入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - <code>core</code> 、 <code>block</code> 和 <code>inline</code> ：</p>","autoDesc":true}');export{J as comp,O as data};
