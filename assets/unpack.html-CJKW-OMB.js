import{_ as e,c as o,b as s,a,d as p,e as c,o as i,r as l}from"./app-DWLYIH0A.js";const u={},k={href:"https://github.com/ithewei/libhv/tree/master/examples/jsonrpc",target:"_blank",rel:"noopener noreferrer"};function r(d,n){const t=l("ExternalLinkIcon");return i(),o("div",null,[n[2]||(n[2]=s(`<h3 id="支持三种拆包方式" tabindex="-1"><a class="header-anchor" href="#支持三种拆包方式"><span>支持三种拆包方式</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">hio_unpack</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自动选择三种方式的其中一种拆包  </span>
<span class="token keyword">int</span> <span class="token function">hio_unpack_by_fixed_length</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 固定长度拆包  </span>
<span class="token keyword">int</span> <span class="token function">hio_unpack_by_delimiter</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定界符拆包  </span>
<span class="token keyword">int</span> <span class="token function">hio_unpack_by_length_field</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按长度字段拆包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="先来看最简单的一种-按长度拆包。其他两个大同小异" tabindex="-1"><a class="header-anchor" href="#先来看最简单的一种-按长度拆包。其他两个大同小异"><span>先来看最简单的一种：按长度拆包。其他两个大同小异</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="再来看使用demo-——-200行实现一个纯c版jsonrpc框架" tabindex="-1"><a class="header-anchor" href="#再来看使用demo-——-200行实现一个纯c版jsonrpc框架"><span>再来看使用demo —— 200行实现一个纯C版jsonrpc框架</span></a></h3><p>使用libhv可以在200行内实现一个完整的jsonrpc框架，这得益于libhv新提供的一个接口 <code>hio_set_unpack</code> 设置拆包规则，支持 <code>固定包长、分隔符、头部长度字段</code> 三种常见的拆包方式，调用该接口设置拆包规则后，内部会根据拆包规则处理粘包与分包，保证回调上来的是完整的一包数据，大大节省了上层处理粘包与分包的成本，该接口具体定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    UNPACK_BY_FIXED_LENGTH  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment">// 根据固定长度拆包</span>
    UNPACK_BY_DELIMITER     <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>	<span class="token comment">// 根据分隔符拆包，如常见的“\\r\\n”</span>
    UNPACK_BY_LENGTH_FIELD  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token comment">// 根据头部长度字段拆包</span>
<span class="token punctuation">}</span> unpack_mode_e<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_PACKAGE_MAX_LENGTH</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span>   </span><span class="token comment">// 2M</span></span>

<span class="token comment">// UNPACK_BY_DELIMITER</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PACKAGE_MAX_DELIMITER_BYTES</span> <span class="token expression"><span class="token number">8</span></span></span>

<span class="token comment">// UNPACK_BY_LENGTH_FIELD</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    ENCODE_BY_VARINT        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>				<span class="token comment">// varint编码</span>
    ENCODE_BY_LITTEL_ENDIAN <span class="token operator">=</span> LITTLE_ENDIAN<span class="token punctuation">,</span>    <span class="token comment">// 小端编码</span>
    ENCODE_BY_BIG_ENDIAN    <span class="token operator">=</span> BIG_ENDIAN<span class="token punctuation">,</span>       <span class="token comment">// 大端编码</span>
<span class="token punctuation">}</span> unpack_coding_e<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">unpack_setting_s</span> <span class="token punctuation">{</span>
    unpack_mode_e   mode<span class="token punctuation">;</span> <span class="token comment">// 拆包模式</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    package_max_length<span class="token punctuation">;</span> <span class="token comment">// 最大包长度限制</span>
    <span class="token comment">// UNPACK_BY_FIXED_LENGTH</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    fixed_length<span class="token punctuation">;</span> <span class="token comment">// 固定包长度</span>
    <span class="token comment">// UNPACK_BY_DELIMITER</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   delimiter<span class="token punctuation">[</span>PACKAGE_MAX_DELIMITER_BYTES<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分隔符</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  delimiter_bytes<span class="token punctuation">;</span> <span class="token comment">// 分隔符长度</span>
    <span class="token comment">// UNPACK_BY_LENGTH_FIELD</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  body_offset<span class="token punctuation">;</span> <span class="token comment">// body偏移量（即头部长度）real_body_offset = body_offset + varint_bytes - length_field_bytes</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  length_field_offset<span class="token punctuation">;</span> <span class="token comment">// 头部长度字段偏移量</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span>  length_field_bytes<span class="token punctuation">;</span> <span class="token comment">// 头部长度字段所占字节数</span>
    unpack_coding_e length_field_coding<span class="token punctuation">;</span> <span class="token comment">// 头部长度字段编码方式，支持varint、大小端三种编码方式，通常使用大端字节序（即网络字节序）</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
    <span class="token function">unpack_setting_s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Recommended setting:</span>
        <span class="token comment">// head = flags:1byte + length:4bytes = 5bytes</span>
        mode <span class="token operator">=</span> UNPACK_BY_LENGTH_FIELD<span class="token punctuation">;</span>
        package_max_length <span class="token operator">=</span> DEFAULT_PACKAGE_MAX_LENGTH<span class="token punctuation">;</span>
        fixed_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        delimiter_bytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        body_offset <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        length_field_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        length_field_bytes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        length_field_coding <span class="token operator">=</span> ENCODE_BY_BIG_ENDIAN<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span> unpack_setting_t<span class="token punctuation">;</span>

HV_EXPORT <span class="token keyword">void</span> <span class="token function">hio_set_unpack</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> unpack_setting_t<span class="token operator">*</span> setting<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码</p>`,8)),a("p",null,[n[1]||(n[1]=p("见 ")),a("a",k,[n[0]||(n[0]=p("examples/jsonrpc")),c(t)])]),n[3]||(n[3]=s(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hloop.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hbase.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hsocket.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;jsonrpc.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cJSON.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;router.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;handler.h&quot;</span></span>

<span class="token comment">// hloop_create_tcp_server -&gt; on_accept -&gt; hio_read -&gt; on_recv -&gt; hio_write</span>

<span class="token keyword">static</span> unpack_setting_t jsonrpc_unpack_setting<span class="token punctuation">;</span>

jsonrpc_router router<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> do_add<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;sub&quot;</span><span class="token punctuation">,</span> do_sub<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;mul&quot;</span><span class="token punctuation">,</span> do_mul<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> do_div<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JSONRPC_ROUTER_NUM</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>router<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_close</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;on_close fd=%d error=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">hio_fd</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">hio_error</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_recv</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> readbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> readbytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// unpack -&gt; cJSON_Parse -&gt; router -&gt; cJSON_Print -&gt; pack -&gt; hio_write</span>
    <span class="token comment">// unpack</span>
    jsonrpc_message msg<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> packlen <span class="token operator">=</span> <span class="token function">jsonrpc_unpack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> readbuf<span class="token punctuation">,</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>packlen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;jsonrpc_unpack failed!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>packlen <span class="token operator">==</span> readbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// cJSON_Parse</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&gt; %.*s\\n&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>head<span class="token punctuation">.</span>length<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cJSON<span class="token operator">*</span> jreq <span class="token operator">=</span> <span class="token function">cJSON_ParseWithLength</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>body<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>head<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cJSON<span class="token operator">*</span> jres <span class="token operator">=</span> <span class="token function">cJSON_CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cJSON<span class="token operator">*</span> jmethod <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jreq<span class="token punctuation">,</span> <span class="token string">&quot;method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jmethod <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">cJSON_IsString</span><span class="token punctuation">(</span>jmethod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bad_request</span><span class="token punctuation">(</span>jreq<span class="token punctuation">,</span> jres<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// router</span>
        <span class="token keyword">char</span><span class="token operator">*</span> method <span class="token operator">=</span> <span class="token function">cJSON_GetStringValue</span><span class="token punctuation">(</span>jmethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> JSONRPC_ROUTER_NUM<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> router<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                router<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>jreq<span class="token punctuation">,</span> jres<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">not_found</span><span class="token punctuation">(</span>jreq<span class="token punctuation">,</span> jres<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// cJSON_Print</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">cJSON_PrintUnformatted</span><span class="token punctuation">(</span>jres<span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg<span class="token punctuation">.</span>head<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt; %.*s\\n&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>head<span class="token punctuation">.</span>length<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// pack</span>
    packlen <span class="token operator">=</span> <span class="token function">jsonrpc_package_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> writebuf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">HV_ALLOC</span><span class="token punctuation">(</span>writebuf<span class="token punctuation">,</span> packlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    packlen <span class="token operator">=</span> <span class="token function">jsonrpc_pack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> writebuf<span class="token punctuation">,</span> packlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>packlen <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">hio_write</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> writebuf<span class="token punctuation">,</span> packlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>jreq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>jres<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cJSON_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">HV_FREE</span><span class="token punctuation">(</span>writebuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">on_accept</span><span class="token punctuation">(</span>hio_t<span class="token operator">*</span> io<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;on_accept connfd=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">hio_fd</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">hio_setcb_close</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> on_close<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hio_setcb_read</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> on_recv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hio_set_unpack</span><span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token operator">&amp;</span>jsonrpc_unpack_setting<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hio_read</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: %s port\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init jsonrpc_unpack_setting</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>jsonrpc_unpack_setting<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>unpack_setting_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>mode <span class="token operator">=</span> UNPACK_BY_LENGTH_FIELD<span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>package_max_length <span class="token operator">=</span> DEFAULT_PACKAGE_MAX_LENGTH<span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>body_offset <span class="token operator">=</span> JSONRPC_HEAD_LENGTH<span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>length_field_offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>length_field_bytes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    jsonrpc_unpack_setting<span class="token punctuation">.</span>length_field_coding <span class="token operator">=</span> ENCODE_BY_BIG_ENDIAN<span class="token punctuation">;</span>

    hloop_t<span class="token operator">*</span> loop <span class="token operator">=</span> <span class="token function">hloop_new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hio_t<span class="token operator">*</span> listenio <span class="token operator">=</span> <span class="token function">hloop_create_tcp_server</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> port<span class="token punctuation">,</span> on_accept<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listenio <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;listenfd=%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">hio_fd</span><span class="token punctuation">(</span>listenio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hloop_run</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hloop_free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const m=e(u,[["render",r],["__file","unpack.html.vue"]]),b=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libhv/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/unpack.html","title":"","lang":"zh-CN","frontmatter":{"description":"支持三种拆包方式 先来看最简单的一种：按长度拆包。其他两个大同小异 再来看使用demo —— 200行实现一个纯C版jsonrpc框架 使用libhv可以在200行内实现一个完整的jsonrpc框架，这得益于libhv新提供的一个接口 hio_set_unpack 设置拆包规则，支持 固定包长、分隔符、头部长度字段 三种常见的拆包方式，调用该接口设置拆...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libhv/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/unpack.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"支持三种拆包方式 先来看最简单的一种：按长度拆包。其他两个大同小异 再来看使用demo —— 200行实现一个纯C版jsonrpc框架 使用libhv可以在200行内实现一个完整的jsonrpc框架，这得益于libhv新提供的一个接口 hio_set_unpack 设置拆包规则，支持 固定包长、分隔符、头部长度字段 三种常见的拆包方式，调用该接口设置拆..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":3,"title":"支持三种拆包方式","slug":"支持三种拆包方式","link":"#支持三种拆包方式","children":[]},{"level":3,"title":"先来看最简单的一种：按长度拆包。其他两个大同小异","slug":"先来看最简单的一种-按长度拆包。其他两个大同小异","link":"#先来看最简单的一种-按长度拆包。其他两个大同小异","children":[]},{"level":3,"title":"再来看使用demo —— 200行实现一个纯C版jsonrpc框架","slug":"再来看使用demo-——-200行实现一个纯c版jsonrpc框架","link":"#再来看使用demo-——-200行实现一个纯c版jsonrpc框架","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.75,"words":825},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libhv/源码分析/unpack.md","excerpt":"<h3>支持三种拆包方式</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">hio_unpack</span><span class=\\"token punctuation\\">(</span>hio_t<span class=\\"token operator\\">*</span> io<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> buf<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> readbytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 自动选择三种方式的其中一种拆包  </span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">hio_unpack_by_fixed_length</span><span class=\\"token punctuation\\">(</span>hio_t<span class=\\"token operator\\">*</span> io<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> buf<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> readbytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 固定长度拆包  </span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">hio_unpack_by_delimiter</span><span class=\\"token punctuation\\">(</span>hio_t<span class=\\"token operator\\">*</span> io<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> buf<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> readbytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 定界符拆包  </span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">hio_unpack_by_length_field</span><span class=\\"token punctuation\\">(</span>hio_t<span class=\\"token operator\\">*</span> io<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span><span class=\\"token operator\\">*</span> buf<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> readbytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 按长度字段拆包</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,b as data};
