import{_ as l,c as n,e as o,o as i}from"./app-Dwsnbiv5.js";const t={};function r(a,e){return i(),n("div",null,e[0]||(e[0]=[o('<h1 id="_07-编程语言-发展和趋势" tabindex="-1"><a class="header-anchor" href="#_07-编程语言-发展和趋势"><span>07. 编程语言 - 发展和趋势</span></a></h1><blockquote><h4 id="编程语言的逻辑优化" tabindex="-1"><a class="header-anchor" href="#编程语言的逻辑优化"><span>编程语言的逻辑优化</span></a></h4></blockquote><ul><li><p>结构化编程（C语言具备）</p><ul><li><strong>问题</strong>：随着程序规模扩大遇到组织方面的问题，如：经常使用分支语句，根据某结果执行一组或另一组指令（逻辑混乱，意大利面条式编程）</li><li><strong>理念</strong>：有序管理分支，将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构</li><li><strong>应用</strong>：如：for循环、while循环、do while循环、if else语句</li></ul></li><li><p>自顶向下（top-down）设计（C语言具备）</p><ul><li><strong>理念</strong>：将大型程序分解成小程序</li></ul></li><li><p>面向对象编程（C无，C++才有）</p><ul><li><strong>问题</strong>：结构化编程在编写大型程序时仍然不足。与强调算法的过程性编程不同，OOP强调的是数据</li><li><strong>理念</strong>：设计与问题本质特性相对应的数据格式</li></ul></li><li><p>泛型编程（C无，C++才有）</p></li></ul><blockquote><h4 id="面向对象编程oop-object-oriented-programming" tabindex="-1"><a class="header-anchor" href="#面向对象编程oop-object-oriented-programming"><span>面向对象编程OOP（<em>Object-oriented programming</em>）</span></a></h4></blockquote><ul><li><strong>类和对象</strong>：C++中，类是一种规范，描述了这种新型数据格式，对象是根据这种规范构造的特定数据结构</li><li><strong>OOP程序设计方法</strong>：首先设计类，它们准确地表示了程序要处理的东西</li><li><strong>与函数封装区别</strong>：程序=数据+算法，函数仅仅是算法，OOP编程将数据和方法合并为类定义 <ul><li>OOP比起函数更注重对数据的使用，并且有一些多态、重载等的扩展</li><li>函数式更注重对功能模块的应用</li></ul></li><li><strong>优点</strong>：可重用代码、信息隐藏、多态等</li></ul><blockquote><h4 id="泛型编程-generic-programming" tabindex="-1"><a class="header-anchor" href="#泛型编程-generic-programming"><span>泛型编程（<em>Generic programming</em>）</span></a></h4></blockquote><ul><li><strong>目标</strong>：与OOP目标相同：重用代码和抽象通用概念</li><li><strong>泛型</strong>：术语泛型（<em>Generic</em>）指的是创建独立于类型的代码</li><li><strong>与OOP区别</strong><ul><li>OOP强调数据，泛型编程强调独立于<code>特定数据类型</code></li><li>OOP是一个管理大型项目的工具，泛型编程提供了执行常见任务的工具（如对数据排序或合并链表）</li></ul></li></ul>',7)]))}const g=l(t,[["render",r],["__file","07. 编程语言 - 发展和趋势.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/01.%20ALL/07.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%20-%20%E5%8F%91%E5%B1%95%E5%92%8C%E8%B6%8B%E5%8A%BF.html","title":"07. 编程语言 - 发展和趋势","lang":"zh-CN","frontmatter":{"description":"07. 编程语言 - 发展和趋势 编程语言的逻辑优化 结构化编程（C语言具备） 问题：随着程序规模扩大遇到组织方面的问题，如：经常使用分支语句，根据某结果执行一组或另一组指令（逻辑混乱，意大利面条式编程） 理念：有序管理分支，将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构 应用：如：for循环、while循环、do while循环、if ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93/01.%20ALL/07.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%20-%20%E5%8F%91%E5%B1%95%E5%92%8C%E8%B6%8B%E5%8A%BF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"07. 编程语言 - 发展和趋势"}],["meta",{"property":"og:description","content":"07. 编程语言 - 发展和趋势 编程语言的逻辑优化 结构化编程（C语言具备） 问题：随着程序规模扩大遇到组织方面的问题，如：经常使用分支语句，根据某结果执行一组或另一组指令（逻辑混乱，意大利面条式编程） 理念：有序管理分支，将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构 应用：如：for循环、while循环、do while循环、if ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07. 编程语言 - 发展和趋势\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"07. 编程语言 - 发展和趋势","slug":"_07-编程语言-发展和趋势","link":"#_07-编程语言-发展和趋势","children":[]}],"git":{},"readingTime":{"minutes":1.73,"words":519},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/归纳总结/01. ALL/07. 编程语言 - 发展和趋势.md","excerpt":"\\n<blockquote>\\n<h4>编程语言的逻辑优化</h4>\\n</blockquote>\\n<ul>\\n<li>\\n<p>结构化编程（C语言具备）</p>\\n<ul>\\n<li><strong>问题</strong>：随着程序规模扩大遇到组织方面的问题，如：经常使用分支语句，根据某结果执行一组或另一组指令（逻辑混乱，意大利面条式编程）</li>\\n<li><strong>理念</strong>：有序管理分支，将分支（决定接下来应执行哪个指令）限制为一小组行为良好的结构</li>\\n<li><strong>应用</strong>：如：for循环、while循环、do while循环、if else语句</li>\\n</ul>\\n</li>\\n<li>\\n<p>自顶向下（top-down）设计（C语言具备）</p>\\n<ul>\\n<li><strong>理念</strong>：将大型程序分解成小程序</li>\\n</ul>\\n</li>\\n<li>\\n<p>面向对象编程（C无，C++才有）</p>\\n<ul>\\n<li><strong>问题</strong>：结构化编程在编写大型程序时仍然不足。与强调算法的过程性编程不同，OOP强调的是数据</li>\\n<li><strong>理念</strong>：设计与问题本质特性相对应的数据格式</li>\\n</ul>\\n</li>\\n<li>\\n<p>泛型编程（C无，C++才有）</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/归纳总结/01. ALL/07. 编程语言 - 发展和趋势.md","value":{"title":"07. 编程语言 - 发展和趋势","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/归纳总结/01. ALL/07. 编程语言 - 发展和趋势.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{g as comp,p as data};
