import{_ as s,e as a,g as t,o as l}from"./app-CuJixpuN.js";const e={};function n(h,i){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="国际化" tabindex="-1"><a class="header-anchor" href="#国际化"><span>国际化</span></a></h1><p>参考：</p><ul><li>《Qt5开发及实例（第四版）》</li><li><a href="https://www.w3cschool.cn/learnroadqt/fwkx1j4j.html" target="_blank" rel="noopener noreferrer">【W3Cschool】Qt 国际化</a></li><li><a href="https://wizardforcel.gitbooks.io/qt-beginning/content/51.html" target="_blank" rel="noopener noreferrer">【gitbooks】国际化</a></li></ul><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><ul><li><h4 id="编码" tabindex="-1"><a class="header-anchor" href="#编码"><span>编码</span></a></h4><ul><li>Qt使用Unicode作为内部编码，可以同时支持多种编码</li><li>为Qt添加一种编码的支持也比较方便，只要添加该编码和Unicode的转换编码即可</li></ul></li><li><h4 id="qt自己定义的locale机制" tabindex="-1"><a class="header-anchor" href="#qt自己定义的locale机制"><span>Qt自己定义的Locale机制</span></a></h4><ul><li>在编码支持和信息文件（<em>Message File</em>）的翻译上弥补了目前UNIX上所普遍采用的Local和gettext的不足之处</li><li>可以使Qt的同一组件上同时显示不同编码的文本</li></ul></li><li><h4 id="国际化方案" tabindex="-1"><a class="header-anchor" href="#国际化方案"><span>国际化方案</span></a></h4><ul><li>不是采用INI配置文件的方式，而措施GNU gettext类似</li><li>提供了<code>tr()</code>与<code>gettext()</code>函数对应，而翻译后的资源文件则以<code>.qm</code>命名</li></ul></li></ul><h3 id="国际化支持的实现" tabindex="-1"><a class="header-anchor" href="#国际化支持的实现"><span>国际化支持的实现</span></a></h3><ul><li><h4 id="使用qstring对象表示所有用户可见的文本" tabindex="-1"><a class="header-anchor" href="#使用qstring对象表示所有用户可见的文本"><span>使用<code>QString对象</code>表示所有用户可见的文本</span></a></h4><ul><li>原因：QString内部使用Unicdoe编码</li><li>对于仅程序员可见的文本也可以使用QCString或原始的char *</li></ul></li><li><h4 id="使用tr-函数获取所有需要翻译的文本" tabindex="-1"><a class="header-anchor" href="#使用tr-函数获取所有需要翻译的文本"><span>使用<code>tr()</code>函数获取所有需要翻译的文本</span></a></h4><ul><li>在某些时候，如果无法使用<code>QObject::tr()</code>函数，则可以直接调用<code>QCoreApplication::translate()</code>取得翻译后的字符串</li></ul></li><li><h4 id="使用qstring-arg-方法组织动态文本" tabindex="-1"><a class="header-anchor" href="#使用qstring-arg-方法组织动态文本"><span>使用<code>QString::arg()</code>方法组织动态文本</span></a></h4><ul><li>如<code>QString m = tr(&quot;Mission status: %1 of %2 are completed&quot;).arg(x).arg(y);</code>而不要使用字符串连接的方法</li><li>这样，翻译者可以将整个字符串进行翻译，并将参数%1和%2放到正确的位置</li></ul></li><li><h4 id="使用qtranslator-load-和qcoreapplication-installtranslator-函数读取翻译后的-qm资源文件" tabindex="-1"><a class="header-anchor" href="#使用qtranslator-load-和qcoreapplication-installtranslator-函数读取翻译后的-qm资源文件"><span>使用<code>QTranslator::load()</code>和<code>QCoreApplication::installTranslator()</code>函数读取翻译后的.qm资源文件</span></a></h4><ul><li>程序猿需要定义<code>QTranslator</code>对象并使用<code>load()</code>函数读取响应的<code>.qm</code>文件</li><li>利用<code>QCoreApplication::installTranslator()</code>函数安装QTranslator对象</li></ul></li></ul><h3 id="翻译工作-qm文件的生成" tabindex="-1"><a class="header-anchor" href="#翻译工作-qm文件的生成"><span>翻译工作：<code>.qm</code>文件的生成</span></a></h3><p>对于翻译工作者，主要利用Qt提供的lupdate、linguist和lrelease协助翻译并生成最后需要的.qm文件</p><ul><li><h4 id="lupdate-工具" tabindex="-1"><a class="header-anchor" href="#lupdate-工具"><span>lupdate 工具</span></a></h4><ul><li>从源代码中扫描并提取需要翻译的字符串，生成<code>.ts</code>文件</li><li>需要在<code>.pro</code>文件中定义好变量<code>TRANSLATIONS</code></li></ul></li><li><h4 id="linguist-工具" tabindex="-1"><a class="header-anchor" href="#linguist-工具"><span>linguist 工具</span></a></h4><ul><li>打开<code>.ts</code>文件，对其中字符串逐条进行翻译并保存</li><li><code>.ts</code>文件采用XML格式，所以也可以使用其他编辑器来打开.ts文件翻译</li></ul></li><li><h4 id="lrelease-工具" tabindex="-1"><a class="header-anchor" href="#lrelease-工具"><span>lrelease 工具</span></a></h4><ul><li>处理翻译好的<code>.ts</code>文件，生成格式更紧凑的<code>.qm</code>文件</li><li>它所占空间比.ts文件小，但基本不具有可读性（二进制），只有<code>QTranslator</code>能正确识别它</li></ul></li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="基本流程" tabindex="-1"><a class="header-anchor" href="#基本流程"><span>基本流程</span></a></h3><ol><li><p>修改.pro文件</p></li><li><p>编译。若不先编译就进行下面步骤则生成，则生成的.ts文件只是一个仅有标题栏的框架（如下）</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;!</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DOCTYPE</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">TS</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2.1&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> language</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;TextEditor_zh_CN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">TS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编译完成后打开Qt命令行窗口，进入工程目录，执行<code>lupdate TestHello.pro</code>，生成.ts文件（lupdate –verbose yourproject.pro）<br> 如果没有编译则提示 ” Found 1 source text “<br> 若已完成编译则提示 “ Found $n source text(s) ”</p></li><li><p>运行Linguist并打开,ts文件，选择源语言和目标语言。选择要翻译的字符串并翻译后，保存退出</p></li><li><p>发布，或者在Qt命令行输入<code>lrelease TestHello.pro</code>生成.qm文件</p></li><li><p>修改源代码，使用<code>#include &lt;QTranslator&gt;</code>来翻译，注释部分为需要添加的代码</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;QTranslator&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">							// 头文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QApplication </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(argc, argv);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QTranslator </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">translator </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> QTranslaotr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 实例化QTranslator类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	translaotr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:/.../TestHello.qm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 加载.qm翻译文件【注意为绝对路径】</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">installTranslator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(translator);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 翻译</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    MainWindow w;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    w</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="选择语言" tabindex="-1"><a class="header-anchor" href="#选择语言"><span>选择语言</span></a></h3><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="tr-函数" tabindex="-1"><a class="header-anchor" href="#tr-函数"><span><code>tr()</code>函数</span></a></h2><p>参考：https://blog.csdn.net/mfc11/article/details/6591134</p><p>在论坛中漂，经常遇到有人遇到tr相关的问题。用tr的有两类人：</p><ul><li>因为发现中文老出问题，然后搜索，发现很多人用tr，于是他也开始用tr</li><li>另一类人，确实是出于国际化的需要，将需要在界面上显示的文件都用tr包起来，这又分两种： <ul><li>用tr包住英文（最最推荐的用法，源码英文，然后提供英文到其他语言的翻译包）</li><li>用tr包住中文（源码用中文，然后提供中文到其他语言的翻译包）</li></ul></li></ul><p><strong>注意哦，如果你正在用tr包裹中文字符，却不属于(2b)，那么，这是个信号：</strong></p><ul><li>你在误用tr</li><li>你需要的是QString，而不是tr</li></ul><h2 id="tr-的三个参数" tabindex="-1"><a class="header-anchor" href="#tr-的三个参数"><span>tr()的三个参数</span></a></h2><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QString</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">sourceText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">comment</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>虽然我们只传了一个参数，但是实际上 tr()函数是接受3个参数的。第一个参数是我们需要翻译的文字，如果使用 qm 文件有对应的字符串，则使用对应的字符串进行替换，否则将显示 sourceText 参数指定的字符串。第二个参数是一个注释，用于解释前面的 sourceText 的含义，比如 table 一词既可以当做桌子翻译，又可以当成表格翻译，这时你就需要提供这个注释。或许你会问，使用翻译工具的时候不是有源代码吗？问题是，有可能人家不使用这个翻译工具，而使用别的工具，这样就不能保证会有这个源代码的预览；并且，你的程序不一定必须要发布源代码的；<strong>翻译人员往往只得到我们导出的 ts 文件，如果你加上注释，就可以方便翻译人员进行翻译</strong>。最后一个参数 n 用于指定字符串是否为复数。我们知道，很多语言，比如英语，很多名词的单复数形式是不相同的，为了解决这个问题，Qt 在 tr()函数中提供了一个参数 n。请看如下代码：</p><p>翻译人员往往只得到我们导出的 ts 文件</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> messages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> message(s) saved&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, n));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 n 的值的不同，Qt 会翻译成不同的文字，例如：</p><table><thead><tr><th style="text-align:left;">n</th><th style="text-align:left;">翻译结果</th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">0 message saved</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">1 message saved</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">2 messages saved</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">5 messages saved</td></tr></tbody></table>`,31)]))}const p=s(e,[["render",n],["__file","05. .ts.qm 翻译文件 _ 国际化.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/05.%20.ts.qm%20%E7%BF%BB%E8%AF%91%E6%96%87%E4%BB%B6%20_%20%E5%9B%BD%E9%99%85%E5%8C%96.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 国际化 参考： 《Qt5开发及实例（第四版）》 【W3Cschool】Qt 国际化 【gitbooks】国际化 基本概念 简概 编码 Qt使用Unicode作为内部编码，可以同时支持多种编码 为Qt添加一种编码的支持也比较方便，只要添加该编码和Unicode的转换编码即可 Qt自己定义的Locale机制 在编码支持和信息文件（Message...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/05.%20.ts.qm%20%E7%BF%BB%E8%AF%91%E6%96%87%E4%BB%B6%20_%20%E5%9B%BD%E9%99%85%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 国际化 参考： 《Qt5开发及实例（第四版）》 【W3Cschool】Qt 国际化 【gitbooks】国际化 基本概念 简概 编码 Qt使用Unicode作为内部编码，可以同时支持多种编码 为Qt添加一种编码的支持也比较方便，只要添加该编码和Unicode的转换编码即可 Qt自己定义的Locale机制 在编码支持和信息文件（Message..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/05. .ts.qm 翻译文件 & 国际化.md","excerpt":"\\n<h1>目录</h1>\\n<h1>国际化</h1>\\n<p>参考：</p>\\n<ul>\\n<li>《Qt5开发及实例（第四版）》</li>\\n<li><a href=\\"https://www.w3cschool.cn/learnroadqt/fwkx1j4j.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【W3Cschool】Qt 国际化</a></li>\\n<li><a href=\\"https://wizardforcel.gitbooks.io/qt-beginning/content/51.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【gitbooks】国际化</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/05. .ts.qm 翻译文件 & 国际化.md","value":{"title":"05. .ts.qm 翻译文件 & 国际化","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/05. .ts.qm 翻译文件 & 国际化.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
