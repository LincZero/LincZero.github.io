import{_ as o,e as i,f as e,h as l,r,o as E}from"./app-BapqMaOt.js";const a={};function p(B,t){const n=r("Mermaid");return E(),i("div",null,[t[0]||(t[0]=e("h2",{id:"libevent的封装层次与原理浅析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#libevent的封装层次与原理浅析"},[e("span",null,"libevent的封装层次与原理浅析")])],-1)),t[1]||(t[1]=e("h2",{id:"libevent的封装层次",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#libevent的封装层次"},[e("span",null,"libevent的封装层次")])],-1)),l(n,{id:"mermaid-6",code:"eJxLL0osyFDwCeLierKr+8nubc8WNzzb2q2gq2unABF4vm7h8wltT2euAIs9m9fydPeup+t3vti40Cq1LDWvJD4psTg1Pi+1HGoA0erjyzNLMuKT8/PSMtOx6n05peHZ+kZMvWlFqalYNUDEnu5b9bxvPbKGnPz8AoIaXjY0PG3fZQUWR9ObVJSamA01gKDi1IrMElxhiRQkUNOQPQcMEyQDi1NLuIhUCrYbpB7JFkjgYdGKFHoQ52xe8bStByIAVZKYkoLLKKiKlNQcZBVP9q97NmUnqhnFxZnpeVwAbjo/1Q=="}),t[2]||(t[2]=e("p",null,"如果你不想自己管理I/O，希望由libevent库完成读写I/O的处理后自己仅需从缓冲区中读数据来完成事件的逻辑处理，那么可以从较高的封装层次上来使用libevent。它提供了关于网络I/O的连接事件、读写事件等等的事件操作接口，调用者需要做的仅仅是注册这些事件并且在事件处理函数被回调时从相应的buffer中读写业务数据。除了I/O事件，libevent还提供对定时事件和信号处理事件的管理，十分方便。",-1))])}const v=o(a,[["render",p],["__file","09. 理解封装层次.html.vue"]]),A=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/09.%20%E7%90%86%E8%A7%A3%E5%B0%81%E8%A3%85%E5%B1%82%E6%AC%A1.html","title":"09. 理解封装层次","lang":"zh-CN","frontmatter":{"description":"libevent的封装层次与原理浅析 libevent的封装层次 如果你不想自己管理I/O，希望由libevent库完成读写I/O的处理后自己仅需从缓冲区中读数据来完成事件的逻辑处理，那么可以从较高的封装层次上来使用libevent。它提供了关于网络I/O的连接事件、读写事件等等的事件操作接口，调用者需要做的仅仅是注册这些事件并且在事件处理函数被回调时...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/09.%20%E7%90%86%E8%A7%A3%E5%B0%81%E8%A3%85%E5%B1%82%E6%AC%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"libevent的封装层次与原理浅析 libevent的封装层次 如果你不想自己管理I/O，希望由libevent库完成读写I/O的处理后自己仅需从缓冲区中读数据来完成事件的逻辑处理，那么可以从较高的封装层次上来使用libevent。它提供了关于网络I/O的连接事件、读写事件等等的事件操作接口，调用者需要做的仅仅是注册这些事件并且在事件处理函数被回调时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.82,"words":247},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libevent/09. 理解封装层次.md","excerpt":"<h2>libevent的封装层次与原理浅析</h2>\\n<h2>libevent的封装层次</h2>\\n<p>如果你不想自己管理I/O，希望由libevent库完成读写I/O的处理后自己仅需从缓冲区中读数据来完成事件的逻辑处理，那么可以从较高的封装层次上来使用libevent。它提供了关于网络I/O的连接事件、读写事件等等的事件操作接口，调用者需要做的仅仅是注册这些事件并且在事件处理函数被回调时从相应的buffer中读写业务数据。除了I/O事件，libevent还提供对定时事件和信号处理事件的管理，十分方便。</p>\\n","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libevent/09. 理解封装层次.md","value":{"title":"09. 理解封装层次","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libevent/09. 理解封装层次.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{v as comp,A as data};
