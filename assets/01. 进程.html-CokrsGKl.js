import{_ as e,c as i,e as n,o as t}from"./app-CZqDObZ4.js";const p="/assets/4-%E8%BF%9B%E7%A8%8B%E4%BA%A4%E6%9B%BF%E8%BF%90%E8%A1%8C-DkeOfFBW.jpg",a="/assets/5-%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C-DdjfkUjz.jpg",s="/assets/6-%E5%81%9A%E8%8F%9C%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B%E5%85%B3%E7%B3%BB-CnBwLnjZ.jpg",o="/assets/7-%E8%BF%9B%E7%A8%8B%E4%B8%89%E4%B8%AA%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81-BTg0P4QX.jpg",r="/assets/8-%E8%BF%9B%E7%A8%8B%E4%BA%94%E4%B8%AA%E7%8A%B6%E6%80%81-BJx6gCWD.jpg",c="/assets/9-%E6%8D%A2%E5%85%A5%E6%8D%A2%E5%87%BA-DrZPle_J.jpg",h="/assets/10-%E8%BF%9B%E7%A8%8B%E4%B8%83%E4%B8%AD%E7%8A%B6%E6%80%81-O6Ndb8EP.jpg",d="/assets/12-PCB%E7%8A%B6%E6%80%81%E9%93%BE%E8%A1%A8%E7%BB%84%E7%BB%87-2UGWAZ2A.jpg",g="/assets/13-%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2-BXzQMmQi.jpg",B={};function E(u,l){return t(),i("div",null,l[0]||(l[0]=[n('<h1 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h1><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程"><span>进程</span></a></h2><h3 id="阻塞-运行-阻塞-、中断-阻塞-就续-中断" tabindex="-1"><a class="header-anchor" href="#阻塞-运行-阻塞-、中断-阻塞-就续-中断"><span>阻塞 (运行-&gt;阻塞)、中断 (阻塞-&gt;就续-&gt;中断)</span></a></h3><p>我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个<strong>运行中的程序，就被称为「进程」（Process）</strong>。</p><p>现在我们考虑有一个会读取硬盘文件数据的程序被执行了，那么当运行到读取文件的指令时，就会去从硬盘读取数据，但是硬盘的读写速度是非常慢的，那么在这个时候，如果 CPU 傻傻的等硬盘返回数据的话，那 CPU 的利用率是非常低的。</p><p>所以，当进程要从硬盘读取数据时，CPU 不需要阻塞等待数据的返回，而是去执行另外的进程。当硬盘数据返回时，CPU 会收到个<strong>中断</strong>，于是 CPU 再继续运行这个进程。</p><p><img src="'+p+'" alt="进程 1 与进程 2 切换" loading="lazy"></p><p>做个类比，你去煮开水时，你会傻傻的等水壶烧开吗？很明显，小孩也不会傻等。我们可以在水壶烧开之前去做其他事情。当水壶烧开了，我们自然就会听到“嘀嘀嘀”的声音，于是再把烧开的水倒入到水杯里就好了。</p><h3 id="并行、并发" tabindex="-1"><a class="header-anchor" href="#并行、并发"><span>并行、并发</span></a></h3><p>这种<strong>多个程序、交替执行</strong>的思想，就有 CPU 管理多个进程的初步想法。</p><p>对于一个支持多进程的系统，CPU 会从一个进程快速切换至另一个进程，其间每个进程各运行几十或几百个毫秒。</p><p>虽然单核的 CPU 在某一个瞬间，只能运行一个进程。但在 1 秒钟期间，它可能会运行多个进程，这样就产生<strong>并行的错觉</strong>，实际上这是<strong>并发</strong>。</p><p><img src="'+a+'" alt="并发与并行" loading="lazy"></p><h3 id="切换前记录运行状态" tabindex="-1"><a class="header-anchor" href="#切换前记录运行状态"><span>切换前记录运行状态</span></a></h3><p>到了晚饭时间，一对小情侣肚子都咕咕叫了，于是男生见机行事，就想给女生做晚饭，所以他就在网上找了辣子鸡的菜谱，接着买了一些鸡肉、辣椒、香料等材料，然后边看边学边做这道菜。</p><p><img src="'+s+'" alt="img" loading="lazy"></p><p>突然，女生说她想喝可乐，那么男生只好把做菜的事情暂停一下，并在手机菜谱标记做到哪一个步骤，把状态信息记录了下来。</p><p>然后男生听从女生的指令，跑去下楼买了一瓶冰可乐后，又回到厨房继续做菜。</p><p><strong>这体现了，CPU 可以从一个进程（做菜）切换到另外一个进程（买可乐），在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行。</strong></p><p>所以，可以发现进程有着「<strong>运行 - 暂停 - 运行</strong>」的活动规律。</p><p>实际当中，保存和恢复的内容是寄存器状态等（线程切换则是栈信息等）</p><h3 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h3><h4 id="三个状态-运行、阻塞、就绪" tabindex="-1"><a class="header-anchor" href="#三个状态-运行、阻塞、就绪"><span>三个状态 (运行、阻塞、就绪)</span></a></h4><p>在上面，我们知道了进程有着「运行 - 暂停 - 运行」的活动规律。一般说来，一个进程并不是自始至终连续不停地运行的，它与并发执行中的其他进程的执行是相互制约的。</p><p>它有时处于运行状态，有时又由于某种原因而暂停运行处于等待状态，当使它暂停的原因消失后，它又进入准备运行状态。</p><p>所以，<strong>在一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态。</strong></p><p><img src="'+o+'" alt="进程的三种基本状态" loading="lazy"></p><p>上图中各个状态的意义：</p><ul><li>运行状态（<em>Running</em>）：该时刻进程占用 CPU；</li><li>就绪状态（<em>Ready</em>）：可运行，由于其他进程处于运行状态而暂时停止运行；</li><li>阻塞状态（<em>Blocked</em>）：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；</li></ul><h4 id="五种状态-创建、结束" tabindex="-1"><a class="header-anchor" href="#五种状态-创建、结束"><span>五种状态 (+创建、结束)</span></a></h4><p>当然，进程还有另外两个基本状态：</p><ul><li>创建状态（<em>new</em>）：进程正在被创建时的状态；</li><li>结束状态（<em>Exit</em>）：进程正在从系统中消失时的状态；</li></ul><p>于是，一个完整的进程状态的变迁如下图：</p><p><img src="'+r+'" alt="进程五种状态的变迁" loading="lazy"></p><p>再来详细说明一下进程的状态变迁：</p><ul><li><em>NULL -&gt; 创建状态</em>：一个新进程被创建时的第一个状态；</li><li><em>创建状态 -&gt; 就绪状态</em>：当进程被创建完成并初始化后，一切就绪准备运行时，变为就绪状态，这个过程是很快的；</li><li><em>就绪态 -&gt; 运行状态</em>：处于就绪状态的进程被操作系统的进程调度器选中后，就分配给 CPU 正式运行该进程；</li><li><em>运行状态 -&gt; 结束状态</em>：当进程已经运行完成或出错时，会被操作系统作结束状态处理；</li><li><em>运行状态 -&gt; 就绪状态</em>：处于运行状态的进程在运行过程中，由于分配给它的运行时间片用完，操作系统会把该进程变为就绪态，接着从就绪态选中另外一个进程运行；</li><li><em>运行状态 -&gt; 阻塞状态</em>：当进程请求某个事件且必须等待时，例如请求 I/O 事件；</li><li><em>阻塞状态 -&gt; 就绪状态</em>：当进程要等待的事件完成时，它从阻塞状态变到就绪状态；</li></ul><h4 id="七种状态-阻塞挂起、就续挂起-、虚拟内存的换入换出" tabindex="-1"><a class="header-anchor" href="#七种状态-阻塞挂起、就续挂起-、虚拟内存的换入换出"><span>七种状态 (+阻塞挂起、就续挂起)、虚拟内存的换入换出</span></a></h4><p>如果有大量处于阻塞状态的进程，进程可能会占用着物理内存空间，显然不是我们所希望的，毕竟物理内存空间是有限的，被阻塞状态的进程占用着物理内存就一种浪费物理内存的行为。</p><p>所以，在虚拟内存管理的操作系统中，通常会把<strong>阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存</strong>。</p><p><img src="'+c+'" alt="虚拟内存管理-换入换出" loading="lazy"></p><p>那么，就需要一个新的状态，来<strong>描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态</strong>。这跟阻塞状态是不一样，阻塞状态是等待某个事件的返回。</p><p>另外，挂起状态可以分为两种：</p><ul><li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li><li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</li></ul><p>这两种挂起状态加上前面的五种状态，就变成了七种状态变迁（留给我的颜色不多了），见如下图：</p><p><img src="'+h+'" alt="七种状态变迁" loading="lazy"></p><p>（图片多了最下面的两个状态）</p><p>导致进程挂起的原因不只是因为进程所使用的内存空间不在物理内存，还包括如下情况：</p><ul><li>通过 sleep 让进程间歇性挂起，其工作原理是设置一个定时器，到期后唤醒进程。</li><li>用户希望挂起一个程序的执行，比如在 Linux 中用 <code>Ctrl+Z</code> 挂起进程；</li></ul><h2 id="进程控制结构-进程控制块-pcb" tabindex="-1"><a class="header-anchor" href="#进程控制结构-进程控制块-pcb"><span>进程控制结构 (进程控制块，PCB)</span></a></h2><h3 id="pcb-概念" tabindex="-1"><a class="header-anchor" href="#pcb-概念"><span>PCB 概念</span></a></h3><p>在操作系统中，是用<strong>进程控制块</strong>（<em>process control block，PCB</em>）数据结构来描述进程的。</p><p><strong>PCB 是进程存在的唯一标识</strong>，这意味着一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。</p><h3 id="pcb-包含了什么" tabindex="-1"><a class="header-anchor" href="#pcb-包含了什么"><span>PCB 包含了什么？</span></a></h3><p><strong>进程描述信息：</strong></p><ul><li>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；</li><li>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；</li></ul><p><strong>进程控制和管理信息：</strong></p><ul><li>进程当前状态，如 new、ready、running、waiting 或 blocked 等；</li><li>进程优先级：进程抢占 CPU 时的优先级；</li></ul><p><strong>资源分配清单：</strong></p><ul><li>有关内存地址空间或虚拟地址空间的信息，所打开文件的列表和所使用的 I/O 设备信息。</li></ul><p><strong>CPU 相关信息：</strong></p><ul><li>CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</li></ul><p>可见，PCB 包含信息还是比较多的。</p><h3 id="就绪队列、阻塞队列-可以无-运行队列" tabindex="-1"><a class="header-anchor" href="#就绪队列、阻塞队列-可以无-运行队列"><span>就绪队列、阻塞队列（可以无 运行队列）</span></a></h3><p>每个 PCB 是如何组织的呢？</p><h4 id="链表方式" tabindex="-1"><a class="header-anchor" href="#链表方式"><span>链表方式</span></a></h4><p>通常是通过<strong>链表方式</strong>进行组织，把具有相同状态的进程链在一起，组成各种队列。比如：</p><ul><li>将所有处于就绪状态的进程链在一起，称为<strong>就绪队列</strong>；</li><li>把所有因等待某事件而处于等待状态的进程链在一起就组成各种<strong>阻塞队列</strong>；</li><li>另外，注意可以<strong>没有运行队列</strong>，对于运行队列在单核 CPU 系统中则只有一个运行指针了，因为单核 CPU 在某个时间，只能运行一个程序。</li></ul><p>那么，就绪队列和阻塞队列链表的组织形式如下图：</p><p><img src="'+d+'" alt="就绪队列和阻塞队列" loading="lazy"></p><h4 id="索引方式" tabindex="-1"><a class="header-anchor" href="#索引方式"><span>索引方式</span></a></h4><p>除了链接的组织方式，还有<strong>索引方式</strong>，它的工作原理：将同一状态的进程组织在一个索引表中，索引表项指向相应的 PCB，不同状态对应不同的索引表。</p><h4 id="选用" tabindex="-1"><a class="header-anchor" href="#选用"><span>选用</span></a></h4><p>选用：一般会选择链表，因为可能面临进程创建，销毁等调度导致进程状态发生变化，所以链表能够更加灵活的插入和删除。</p><h2 id="进程的控制" tabindex="-1"><a class="header-anchor" href="#进程的控制"><span>进程的控制</span></a></h2><p>我们熟知了进程的状态变迁和进程的数据结构 PCB 后，再来看看进程的 <strong>创建、终止、阻塞、唤醒</strong> 的过程 (增删启停)，这些过程也就是进程的控制。</p><p>补充：阻塞与唤醒关系：进程的阻塞和唤醒是一对功能相反的语句，如果某个进程调用了阻塞语句，则必有一个与之对应的唤醒语句。</p><h3 id="_1-创建进程" tabindex="-1"><a class="header-anchor" href="#_1-创建进程"><span>(1) 创建进程</span></a></h3><p>操作系统允许一个进程创建另一个进程，而且允许<strong>子进程继承父进程</strong>所拥有的资源。</p><p>创建进程过程如下：</p><blockquote><ol><li>创建：申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；</li><li>初始化：为该进程分配运行时所必需的资源，比如内存资源；</li><li>放入容器管理：将 PCB 插入到<strong>就绪队列</strong>，等待被调度运行；</li></ol><p>（类比写代码中正常容器元素的创建，放就续队列容器里）</p></blockquote><h3 id="_2-终止进程" tabindex="-1"><a class="header-anchor" href="#_2-终止进程"><span>(2) 终止进程</span></a></h3><p>进程有 3 种终止方式：</p><blockquote><ul><li>正常结束</li><li>异常结束</li><li>外界干预（信号 <code>kill</code> 掉）</li></ul></blockquote><p>父子进程终止问题：</p><blockquote><ul><li>当子进程被终止时，其在父进程处继承的资源应当<strong>还给父进程</strong>。</li><li>当父进程被终止时，该父进程的子进程就变为<strong>孤儿进程</strong>，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。</li></ul></blockquote><p>终止进程的过程如下：</p><blockquote><ol><li>查找：查找需要终止的进程的 PCB；</li><li>(停止)：如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程；</li><li>(递归)：如果其还有子进程，则应将该进程的子进程交给 1 号进程接管；</li><li>删除：将该进程所拥有的全部资源都归还给操作系统；</li><li>容器中去除：将其从 PCB <strong>所在队列</strong>中删除；</li></ol><p>（类比写代码中正常容器元素的删除，不过多了个停止和子进程处理的操作）</p></blockquote><h3 id="_3-阻塞进程" tabindex="-1"><a class="header-anchor" href="#_3-阻塞进程"><span>(3) 阻塞进程</span></a></h3><p>当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。</p><p>阻塞进程的过程如下：</p><blockquote><ol><li>查找：找到将要被阻塞进程标识号对应的 PCB；</li><li>修改状态：如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行；</li><li>转移容器：将该 PCB 插入到<strong>阻塞队列</strong>中去；</li></ol><p>（类比写代码中修改状态，并将容器A元素转移到容器B元素中。不过可无运行队列，这里无容器A）</p></blockquote><h3 id="_4-唤醒进程" tabindex="-1"><a class="header-anchor" href="#_4-唤醒进程"><span>(4) 唤醒进程</span></a></h3><p>进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成。</p><p>被谁唤醒：</p><blockquote><p>处于阻塞状态的进程是绝对不可能叫醒自己的，它只能由另一个进程唤醒。</p><p>如果某进程正在等待 I/O 事件，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。</p></blockquote><p>唤醒进程的过程如下：</p><blockquote><ol><li>查找：在该事件的阻塞队列中找到相应进程的 PCB；</li><li>修改状态：将其从<strong>阻塞队列</strong>中移出，并置其状态为就绪状态；</li><li>转移容器：把该 PCB 插入到<strong>就绪队列</strong>中，等待调度程序调度；</li></ol><p>（同上，类比写代码中修改状态，并将容器A元素转移到容器B元素中。这里是阻塞队列移到就续队列中）</p></blockquote><h2 id="进程的上下文切换" tabindex="-1"><a class="header-anchor" href="#进程的上下文切换"><span>进程的上下文切换</span></a></h2><p>定义：</p><p>各个进程之间是共享 CPU 资源的，在不同的时候进程之间需要切换，让不同的进程可以在 CPU 执行。 那么这个<strong>一个进程切换到另一个进程运行，称为进程的上下文切换</strong>。</p><h3 id="cpu-上下文切换" tabindex="-1"><a class="header-anchor" href="#cpu-上下文切换"><span>CPU 上下文切换</span></a></h3><p>在详细说 <code>进程上下文切换前</code>，我们先来看看 <code>CPU 上下文切换</code></p><h4 id="cpu-上下文环境" tabindex="-1"><a class="header-anchor" href="#cpu-上下文环境"><span>CPU 上下文环境</span></a></h4><p>大多数操作系统都是多任务，通常支持大于 CPU 数量的任务同时运行。实际上，这些任务并不是同时运行的，只是因为系统在很短的时间内，让各个任务分别在 CPU 运行，于是就造成同时运行的错觉。</p><p>任务是交给 CPU 运行的，那么在每个任务运行前，CPU 需要知道任务从哪里加载，又从哪里开始运行。</p><p>所以，操作系统需要事先帮 CPU 设置好 CPU 寄存器和程序计数器。他们是 CPU 在运行任何任务前，所必须依赖的环境，这些环境就叫做 <strong>CPU 上下文</strong>。</p><p>总结，CPU上下文 包括：</p><blockquote><ul><li>CPU 寄存器： 是 CPU 内部一个容量小，但是速度极快的内存（缓存）。我举个例子，寄存器像是你的口袋，内存像你的书包，硬盘则是你家里的柜子，如果你的东西存放到口袋，那肯定是比你从书包或家里柜子取出来要快的多。</li><li>程序计数器： 则是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</li></ul></blockquote><h4 id="cpu-上下文切换-1" tabindex="-1"><a class="header-anchor" href="#cpu-上下文切换-1"><span>CPU 上下文切换</span></a></h4><p>既然知道了什么是 CPU 上下文，那理解 CPU 上下文切换就不难了。</p><p>CPU 上下文切换就是先把前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。</p><p>系统内核会存储保持下来的上下文信息，当此任务再次被分配给 CPU 运行时，CPU 会重新加载这些上下文，这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。</p><p>分类</p><blockquote><p>上面说到所谓的「任务」，主要包含进程、线程和中断。所以，可以根据任务的不同，把 CPU 上下文切换分成：</p><ul><li>进程 上下文切换</li><li>线程 上下文切换</li><li>中断 上下文切换</li></ul></blockquote><h3 id="进程-上下文切换" tabindex="-1"><a class="header-anchor" href="#进程-上下文切换"><span>进程 上下文切换</span></a></h3><h4 id="进程-上下文环境" tabindex="-1"><a class="header-anchor" href="#进程-上下文环境"><span>进程 上下文环境</span></a></h4><p>进程是由内核管理和调度的，所以<strong>进程的切换只能发生在内核态</strong>。所以，进程上下文不仅包括用户空间资源，还包括寄存器资源。</p><p>进程上下文包括：</p><blockquote><ul><li>用户空间的资源 <ul><li>虚拟内存</li><li>栈</li><li>全局变量</li><li>等</li></ul></li><li>内核空间的资源 <ul><li>内核堆栈</li><li>寄存器</li><li>等</li></ul></li></ul></blockquote><h4 id="进程-上下文切换的操作" tabindex="-1"><a class="header-anchor" href="#进程-上下文切换的操作"><span>进程 上下文切换的操作</span></a></h4><p>通常，会把交换的信息保存在进程的 PCB，当要从进程A运行另外一个进程B的时候：</p><ol><li>我们需要从这个进程A的 PCB 取出上下文</li><li>然后将进程B上下文恢复到 CPU 中，这使得这个进程可以继续执行</li></ol><p>如下图所示：</p><p><img src="'+g+'" alt="进程上下文切换" loading="lazy"></p><h4 id="进程-上下文切换的开销" tabindex="-1"><a class="header-anchor" href="#进程-上下文切换的开销"><span>进程 上下文切换的开销</span></a></h4><p>大家需要注意，进程的上下文开销是很关键的，我们希望它的<strong>开销越小越好</strong>，这样可以使得进程可以把更多时间花费在执行程序上，而不是耗费在上下文切换。</p><h3 id="进程上下文切换的发生场景" tabindex="-1"><a class="header-anchor" href="#进程上下文切换的发生场景"><span>进程上下文切换的发生场景</span></a></h3><ul><li>时间片场景： 为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li><li>等待资源充足： 进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li><li>自主阻塞： 当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；</li><li>优先级退让： 当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li><li>硬件中断： 发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；</li></ul><p>以上，就是发生进程上下文切换的常见场景了。</p>',129)]))}const P=e(B,[["render",E],["__file","01. 进程.html.vue"]]),A=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/01.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01.%20%E8%BF%9B%E7%A8%8B.html","title":"线程","lang":"zh-CN","frontmatter":{"description":"线程 进程 阻塞 (运行->阻塞)、中断 (阻塞->就续->中断) 我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个运行中的程序，就被称为「进程」（Process）。 现在我们考虑有一个会读取硬盘文件数据的程序被执行了，那么当...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/01.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/01.%20%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程 进程 阻塞 (运行->阻塞)、中断 (阻塞->就续->中断) 我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个运行中的程序，就被称为「进程」（Process）。 现在我们考虑有一个会读取硬盘文件数据的程序被执行了，那么当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"线程","slug":"线程","link":"#线程","children":[{"level":2,"title":"进程","slug":"进程","link":"#进程","children":[{"level":3,"title":"阻塞 (运行->阻塞)、中断 (阻塞->就续->中断)","slug":"阻塞-运行-阻塞-、中断-阻塞-就续-中断","link":"#阻塞-运行-阻塞-、中断-阻塞-就续-中断","children":[]},{"level":3,"title":"并行、并发","slug":"并行、并发","link":"#并行、并发","children":[]},{"level":3,"title":"切换前记录运行状态","slug":"切换前记录运行状态","link":"#切换前记录运行状态","children":[]},{"level":3,"title":"状态","slug":"状态","link":"#状态","children":[{"level":4,"title":"三个状态 (运行、阻塞、就绪)","slug":"三个状态-运行、阻塞、就绪","link":"#三个状态-运行、阻塞、就绪","children":[]},{"level":4,"title":"五种状态 (+创建、结束)","slug":"五种状态-创建、结束","link":"#五种状态-创建、结束","children":[]},{"level":4,"title":"七种状态 (+阻塞挂起、就续挂起)、虚拟内存的换入换出","slug":"七种状态-阻塞挂起、就续挂起-、虚拟内存的换入换出","link":"#七种状态-阻塞挂起、就续挂起-、虚拟内存的换入换出","children":[]}]}]},{"level":2,"title":"进程控制结构 (进程控制块，PCB)","slug":"进程控制结构-进程控制块-pcb","link":"#进程控制结构-进程控制块-pcb","children":[{"level":3,"title":"PCB 概念","slug":"pcb-概念","link":"#pcb-概念","children":[]},{"level":3,"title":"PCB 包含了什么？","slug":"pcb-包含了什么","link":"#pcb-包含了什么","children":[]},{"level":3,"title":"就绪队列、阻塞队列（可以无 运行队列）","slug":"就绪队列、阻塞队列-可以无-运行队列","link":"#就绪队列、阻塞队列-可以无-运行队列","children":[{"level":4,"title":"链表方式","slug":"链表方式","link":"#链表方式","children":[]},{"level":4,"title":"索引方式","slug":"索引方式","link":"#索引方式","children":[]},{"level":4,"title":"选用","slug":"选用","link":"#选用","children":[]}]}]},{"level":2,"title":"进程的控制","slug":"进程的控制","link":"#进程的控制","children":[{"level":3,"title":"(1) 创建进程","slug":"_1-创建进程","link":"#_1-创建进程","children":[]},{"level":3,"title":"(2) 终止进程","slug":"_2-终止进程","link":"#_2-终止进程","children":[]},{"level":3,"title":"(3) 阻塞进程","slug":"_3-阻塞进程","link":"#_3-阻塞进程","children":[]},{"level":3,"title":"(4) 唤醒进程","slug":"_4-唤醒进程","link":"#_4-唤醒进程","children":[]}]},{"level":2,"title":"进程的上下文切换","slug":"进程的上下文切换","link":"#进程的上下文切换","children":[{"level":3,"title":"CPU 上下文切换","slug":"cpu-上下文切换","link":"#cpu-上下文切换","children":[{"level":4,"title":"CPU 上下文环境","slug":"cpu-上下文环境","link":"#cpu-上下文环境","children":[]},{"level":4,"title":"CPU 上下文切换","slug":"cpu-上下文切换-1","link":"#cpu-上下文切换-1","children":[]}]},{"level":3,"title":"进程 上下文切换","slug":"进程-上下文切换","link":"#进程-上下文切换","children":[{"level":4,"title":"进程 上下文环境","slug":"进程-上下文环境","link":"#进程-上下文环境","children":[]},{"level":4,"title":"进程 上下文切换的操作","slug":"进程-上下文切换的操作","link":"#进程-上下文切换的操作","children":[]},{"level":4,"title":"进程 上下文切换的开销","slug":"进程-上下文切换的开销","link":"#进程-上下文切换的开销","children":[]}]},{"level":3,"title":"进程上下文切换的发生场景","slug":"进程上下文切换的发生场景","link":"#进程上下文切换的发生场景","children":[]}]}]}],"git":{},"readingTime":{"minutes":15.96,"words":4789},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/01. 进程.md","excerpt":"\\n<h2>进程</h2>\\n<h3>阻塞 (运行-&gt;阻塞)、中断 (阻塞-&gt;就续-&gt;中断)</h3>\\n<p>我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它会被装载到内存中，接着 CPU 会执行程序中的每一条指令，那么这个<strong>运行中的程序，就被称为「进程」（Process）</strong>。</p>\\n<p>现在我们考虑有一个会读取硬盘文件数据的程序被执行了，那么当运行到读取文件的指令时，就会去从硬盘读取数据，但是硬盘的读写速度是非常慢的，那么在这个时候，如果 CPU 傻傻的等硬盘返回数据的话，那 CPU 的利用率是非常低的。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/01. 进程.md","value":{"title":"01. 进程","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/01. 进程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{P as comp,A as data};
