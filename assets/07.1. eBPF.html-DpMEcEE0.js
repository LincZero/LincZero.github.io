import{_ as l,c as d,a as i,b as o,d as t,e as r,o as B,r as c}from"./app-CKRdBycm.js";const p={},s={href:"https://www.kernel.org/doc/Documentation/networking/filter.txt",target:"_blank",rel:"noopener noreferrer"},a={href:"https://tonydeng.github.io/sdn-handbook/linux/bpf/bcc.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/cloudflare/bpftools",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.kernel.org/doc/Documentation/networking/filter.txt",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"},E={href:"http://step.polymtl.ca/~suchakra/PWL-Jun28-MTL.pdf",target:"_blank",rel:"noopener noreferrer"},f={href:"https://jvns.ca/blog/2017/06/28/notes-on-bpf---ebpf/",target:"_blank",rel:"noopener noreferrer"};function A(T,e){const n=c("ExternalLinkIcon");return B(),d("div",null,[e[18]||(e[18]=i('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><p><code>eBPF</code>（<code>extended Berkeley Packet Filter</code>）起源于<code>BPF</code>，它提供了内核的数据包过滤机制。</p><p>BPF的基本思想是对用户提供两种<code>SOCKET</code>选项：<code>SO_ATTACH_FILTER</code>和<code>SO_ATTACH_BPF</code>，允许用户在<code>sokcet</code>上添加自定义的<code>filter</code>，只有满足该<code>filter</code>指定条件的数据包才会上发到用户空间。<code>SO_ATTACH_FILTER</code>插入的是<code>cBPF</code>代码，<code>SO_ATTACH_BPF</code>插入的是<code>eBPF</code>代码。<code>eBPF</code>是对<code>cBPF</code>的增强，目前用户端的<code>tcpdump</code>等程序还是用的<code>cBPF</code>版本，其加载到内核中后会被内核自动的转变为<code>eBPF</code>。</p><p>Linux 3.15 开始引入 <code>eBPF</code>。其扩充了 <code>BPF</code> 的功能，丰富了指令集。它在内核提供了一个虚拟机，用户态将过滤规则以虚拟机指令的形式传递到内核，由内核根据这些指令来过滤网络数据包。</p><p>![EBPF](07.1. eBPF.assets/ebpf.png)</p>',5)),o("p",null,[e[1]||(e[1]=o("code",null,"BPF",-1)),e[2]||(e[2]=t("和")),e[3]||(e[3]=o("code",null,"eBPF",-1)),e[4]||(e[4]=t("的内核文档见")),o("a",s,[e[0]||(e[0]=t("Documentation/networking/filter.txt")),r(n)]),e[5]||(e[5]=t("。"))]),e[19]||(e[19]=o("h2",{id:"使用场景",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#使用场景"},[o("span",null,"使用场景")])],-1)),e[20]||(e[20]=o("p",null,[o("code",null,"eBPF"),t("使用场景包括")],-1)),o("ul",null,[e[8]||(e[8]=o("li",null,[o("code",null,"XDP")],-1)),e[9]||(e[9]=o("li",null,"流量控制",-1)),e[10]||(e[10]=o("li",null,"防火墙",-1)),e[11]||(e[11]=o("li",null,"网络包跟踪",-1)),e[12]||(e[12]=o("li",null,"内核探针",-1)),e[13]||(e[13]=o("li",null,[o("code",null,"cgroups")],-1)),o("li",null,[o("a",a,[e[6]||(e[6]=t("bcc")),r(n)])]),o("li",null,[o("a",u,[e[7]||(e[7]=t("bpftools")),r(n)])])]),e[21]||(e[21]=o("h2",{id:"参考",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#参考"},[o("span",null,"参考")])],-1)),o("ul",null,[o("li",null,[o("a",F,[e[14]||(e[14]=t("Linux Kernel BPF documentation")),r(n)])]),o("li",null,[o("a",P,[e[15]||(e[15]=t("bcc")),r(n)])]),o("li",null,[o("a",E,[e[16]||(e[16]=t("The BSD Packet Filter: A New Architecture for User-level Packet Capture")),r(n)])]),o("li",null,[o("a",f,[e[17]||(e[17]=t("Notes on BPF & eBPF")),r(n)])])])])}const g=l(p,[["render",A],["__file","07.1. eBPF.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.1.%20eBPF.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF eBPF（extended Berkeley Packet Filter）起源于BPF，它提供了内核的数据包过滤机制。 BPF的基本思想是对用户提供两种SOCKET选项：SO_ATTACH_FILTER和SO_ATTACH_BPF，允许用户在sokcet上添加自定义的filter，只有满足该filter指定条件的数据包才会上发到用户空间。SO...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.1.%20eBPF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF eBPF（extended Berkeley Packet Filter）起源于BPF，它提供了内核的数据包过滤机制。 BPF的基本思想是对用户提供两种SOCKET选项：SO_ATTACH_FILTER和SO_ATTACH_BPF，允许用户在sokcet上添加自定义的filter，只有满足该filter指定条件的数据包才会上发到用户空间。SO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/07.1. eBPF.md","excerpt":"\\n<p><code>eBPF</code>（<code>extended Berkeley Packet Filter</code>）起源于<code>BPF</code>，它提供了内核的数据包过滤机制。</p>\\n<p>BPF的基本思想是对用户提供两种<code>SOCKET</code>选项：<code>SO_ATTACH_FILTER</code>和<code>SO_ATTACH_BPF</code>，允许用户在<code>sokcet</code>上添加自定义的<code>filter</code>，只有满足该<code>filter</code>指定条件的数据包才会上发到用户空间。<code>SO_ATTACH_FILTER</code>插入的是<code>cBPF</code>代码，<code>SO_ATTACH_BPF</code>插入的是<code>eBPF</code>代码。<code>eBPF</code>是对<code>cBPF</code>的增强，目前用户端的<code>tcpdump</code>等程序还是用的<code>cBPF</code>版本，其加载到内核中后会被内核自动的转变为<code>eBPF</code>。</p>","autoDesc":true}');export{g as comp,k as data};
