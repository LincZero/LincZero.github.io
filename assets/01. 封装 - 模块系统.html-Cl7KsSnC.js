import{_ as s,e as a,g as e,o as l}from"./app-DPU1xou8.js";const n={};function h(t,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模块系统-封装" tabindex="-1"><a class="header-anchor" href="#模块系统-封装"><span>模块系统（封装）</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><ul><li>简概 <ul><li>模块是包括 Python 定义和声明的文件</li><li><strong>文件名</strong>就是<strong>模块名</strong>加上 <code>.py</code> 后缀</li></ul></li><li>模块的类别 <ul><li>可以是函数库、常量库、也可以是类库，导入方法都是一样的</li></ul></li></ul><h3 id="交互式测试重新加载问题" tabindex="-1"><a class="header-anchor" href="#交互式测试重新加载问题"><span>交互式测试重新加载问题</span></a></h3><p>出于性能考虑，每个模块在每个解释器会话中只导入一遍</p><ul><li>因此，如果你修改了你的模块，需要重启解释器；</li><li>或者，如果你就是想交互式的测试这么一个模块，可以用 <a href="https://docs.python.org/3/library/imp.html#imp.reload" target="_blank" rel="noopener noreferrer">imp.reload()</a> 重新加载 <ul><li>例如 <code>import imp; imp.reload(modulename)</code></li></ul></li></ul><h2 id="自定义模块" tabindex="-1"><a class="header-anchor" href="#自定义模块"><span>自定义模块</span></a></h2><h3 id="基本流程、设计与使用" tabindex="-1"><a class="header-anchor" href="#基本流程、设计与使用"><span>基本流程、设计与使用</span></a></h3><ul><li>基本流程 <ul><li>保存文件<code>a.py</code></li><li>同目录下<code>import fibo</code></li></ul></li><li>设计 <ul><li>可以注明<code>文档字符串</code>和<code>函数注解</code>，以方便他人使用该模块</li><li>具体设置方法详见 “编写习惯” 一章</li></ul></li><li>使用 <ul><li><code>dir()</code>：用于按模块名搜索模块定义，返回<strong>字符串列表</strong><ul><li>无参数调用时，返回当前定义的命名</li><li><a href="https://docs.python.org/3/library/functions.html#dir" target="_blank" rel="noopener noreferrer">dir()</a> 不会列出内置函数和变量名。如果你想列出这些内容，它们在标准模块 <a href="https://docs.python.org/3/library/builtins.html#module-builtins" target="_blank" rel="noopener noreferrer">builtins</a> 中定义</li></ul></li><li><code>help()</code></li></ul></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>模块文件可以包括方法、变量、类</p><ul><li>导入模块的三种方式（以导入类为例） <ul><li>方式一（导入模块中指定的类或函数） <ul><li>导入：<code>from car import Car, ElectricCar</code></li><li>调用：<code>my_car = Car(...)</code></li><li>好处：只要查看文件开头的import语句，就能清楚知道程序使用了哪些类</li></ul></li><li>方式二（导入模块的所有类和函数） <ul><li>导入：<code>from car import *</code></li><li>调用：<code>my_car = Car(...)</code>（不推荐）</li><li>缺点：可能会引发类名重复</li></ul></li><li>方式三（导入模块） <ul><li>导入：<code>import car</code></li><li>调用：<code>my_car = car.Car(...)</code></li><li>扩展：如果打算频繁使用一个函数，可以将它赋予一个本地变量，如<code>fn = a_module.fn; fn(...)</code></li></ul></li></ul></li></ul><h3 id="私有变量" tabindex="-1"><a class="header-anchor" href="#私有变量"><span><code>_</code>私有变量</span></a></h3><p>以下划线（<code>_</code>）开头命名的方法或函数为模块私有的</p><p>一般<code>*</code>会导入所有除了以下划线开头的命名</p><h3 id="模块的搜索路径" tabindex="-1"><a class="header-anchor" href="#模块的搜索路径"><span>模块的搜索路径</span></a></h3><ul><li><p>导入一个叫 <code>spam</code> 的模块时，解释器先在当前目录中搜索名为 <code>spam.py</code> 的文件</p></li><li><p>如果没有找到的话，接着会到 <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noopener noreferrer">sys.path</a> 变量中给出的目录列表中查找。 <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noopener noreferrer">sys.path</a> 变量的初始值来自如下：</p><ul><li><p>输入脚本的目录（当前目录）</p></li><li><p>环境变量 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener noreferrer">PYTHONPATH</a> 表示的目录列表中搜索</p><p>（这和 shell 变量 <code>PATH</code> 具有一样的语法，即一系列目录名的列表）</p></li><li><p>Python 默认安装路径中搜索</p></li></ul></li></ul><h2 id="自定义包" tabindex="-1"><a class="header-anchor" href="#自定义包"><span>自定义包</span></a></h2><h3 id="简概-2" tabindex="-1"><a class="header-anchor" href="#简概-2"><span>简概</span></a></h3><p>包也叫模块集（与java的包的概念类似）</p><ul><li>作用：封装化结构化，以及避免全局变量之间的相互冲突</li><li>使用简概：包通常是使用用<code>圆点模块名</code>的结构化模块命名空间 <ul><li>例如，名为 <code>A.B</code> 的模块表示了名为 <code>A</code> 的<strong>包</strong>中名为 <code>B</code> 的<strong>子模块</strong></li></ul></li></ul><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><ul><li><p>导入包/模块的方式</p><ul><li><p>方式一（用户可以每次只导入包里的特定模块）</p><ul><li>导入：<code>import sound.effects.echo</code></li><li>使用：<code>sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式二（加载子模块）</p><ul><li>导入：<code>from sound.effects import echo</code></li><li>使用：<code>echo.echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式三（直接导入函数或变量）</p><ul><li>导入：<code>from sound.effects.echo import echofilter</code></li><li>使用：<code>echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式四（从*导入）</p><ul><li><p>导入：<code>from sound.effects import *</code>（导入包的所有子模块或根据<code>__init__.py</code>中定义的列表进行导入）</p></li><li><p><code>__init__</code>：代码举例：<code>__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</code></p></li><li><p>由于init机制，有时会混着使用，如下：</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.surround</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul></li></ul><h3 id="包内引用" tabindex="-1"><a class="header-anchor" href="#包内引用"><span>包内引用</span></a></h3><ul><li><p>作用：可以按绝对位置从相邻的包中引入子模块</p></li><li><p>方法</p><ul><li><p>例如：如果 <code>sound.filters.vocoder</code> 包需要使用 <code>sound.effects</code> 包中的 <code>echo</code> 模块</p><p>它可以 <code>from sound.Effects import echo</code></p><p>也可以 <code>from ..filters import equalizer</code>（类似这种写法）</p></li></ul></li></ul><h3 id="多重目录中的包-不懂" tabindex="-1"><a class="header-anchor" href="#多重目录中的包-不懂"><span>多重目录中的包（<mark>不懂</mark>）</span></a></h3><p>包支持一个更为特殊的特性， <a href="https://docs.python.org/3/reference/import.html#__path__" target="_blank" rel="noopener noreferrer"><code>__path__</code></a></p><p>在包的 <code>__init__.py</code> 文件代码执行之前，该变量初始化一个目录名列表。该变量可以修改，它作用于包中的子包和模块的搜索功能</p><p>这个功能可以用于扩展包中的模块集，不过它不常用</p><h2 id="模块补充、与main文件" tabindex="-1"><a class="header-anchor" href="#模块补充、与main文件"><span>模块补充、与main文件</span></a></h2><h3 id="name-的使用" tabindex="-1"><a class="header-anchor" href="#name-的使用"><span><code>__name__</code>的使用</span></a></h3><ul><li>简概 <ul><li>模块的模块名（做为一个字符串）可以由全局变量 <code>__name__</code> 得到</li></ul></li><li>使用 <ul><li>如<code>import fibo</code>、<code>fibo.__name__</code>的值为<code>&#39;fibo&#39;</code></li></ul></li></ul><h3 id="main-文件与模块" tabindex="-1"><a class="header-anchor" href="#main-文件与模块"><span>“main”文件与模块</span></a></h3><ul><li>当当前文件以主函数开始运行时，<code>__name__</code>会被设置为<code>__main__</code></li><li>可以用<code>if __name__==&#39;__main__&#39;:</code>判断当前模块是否主运行文件</li><li>此代码只有在模块作为 “main” 文件执行时才被调用</li></ul><h3 id="模块使用相对路径" tabindex="-1"><a class="header-anchor" href="#模块使用相对路径"><span>模块使用相对路径</span></a></h3><p>模块使用相对路径时，是根据main文件的路径去找的相对路径。即若模块与main文件不在同一目录时，以main文件的为准</p><p>这可能会引发一些问题：如果想要找模块的相对路径，则需要先把模块路径转为绝对路径，再取找相对路径</p><h3 id="模块的-编译" tabindex="-1"><a class="header-anchor" href="#模块的-编译"><span>模块的 “编译”</span></a></h3><ul><li><p>简概</p></li><li><p>为了加快加载模块的速度，Python 会在 <code>__pycache__</code> 目录下以 <code>module.*version*.pyc</code> 名字<strong>缓存</strong>每个模块编译后的版本</p></li><li><p>版本号补充</p><ul><li>这里的版本编制了编译后文件的格式。它通常会包含 Python 的版本号</li><li>例如，在 CPython 3.3 版中，spam.py 编译后的版本将缓存为 <code>__pycache__/spam.cpython-33.pyc</code></li><li>这种命名约定允许由不同发布和不同版本的 Python 编译的模块同时存在</li></ul></li><li><p>部分高级技巧（<mark>不太懂</mark>）</p><ul><li><p>为了减少一个编译模块的大小，你可以在 Python 命令行中使用 <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-O" target="_blank" rel="noopener noreferrer">-O</a> 或者 <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-OO" target="_blank" rel="noopener noreferrer">-OO</a>。<a href="https://docs.python.org/3/using/cmdline.html#cmdoption-O" target="_blank" rel="noopener noreferrer">-O</a> 参数删除了断言语句，<a href="https://docs.python.org/3/using/cmdline.html#cmdoption-OO" target="_blank" rel="noopener noreferrer">-OO</a> 参数删除了断言语句和 <strong>doc</strong> 字符串。</p><p>因为某些程序依赖于这些变量的可用性，你应该只在确定无误的场合使用这一选项。“优化的” 模块有一个 .pyo 后缀而不是 .pyc 后缀。未来的版本可能会改变优化的效果。</p></li><li><p>来自 <code>.pyc</code> 文件或 <code>.pyo</code> 文件中的程序不会比来自 <code>.py</code> 文件的运行更快；<code>.pyc</code> 或 <code>.pyo</code> 文件只是在它们加载的时候更快一些。</p></li><li><p><a href="https://docs.python.org/3/library/compileall.html#module-compileall" target="_blank" rel="noopener noreferrer">compileall</a> 模块可以为指定目录中的所有模块创建 <code>.pyc</code> 文件（或者使用 <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-O" target="_blank" rel="noopener noreferrer">-O</a> 参数创建 <code>.pyo</code> 文件）。</p></li><li><p>在 PEP 3147 中有很多关这一部分内容的细节，并且包含了一个决策流程。</p></li></ul></li></ul><h2 id="常用模块-常用库" tabindex="-1"><a class="header-anchor" href="#常用模块-常用库"><span>常用模块（常用库）</span></a></h2><p>Python的模块系统由三大部分组成</p><h3 id="内置模块-标准库模块-不用下载-不用显式导入" tabindex="-1"><a class="header-anchor" href="#内置模块-标准库模块-不用下载-不用显式导入"><span>内置模块 / 标准库模块（不用下载，不用显式导入）</span></a></h3><h4 id="string模块" tabindex="-1"><a class="header-anchor" href="#string模块"><span>string模块</span></a></h4><h4 id="文件输入-输出" tabindex="-1"><a class="header-anchor" href="#文件输入-输出"><span>文件输入/输出</span></a></h4><ul><li>demo</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vuln_banners.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readlines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> line.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">strip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准模块-标准模块库-不用下载-要显式导入" tabindex="-1"><a class="header-anchor" href="#标准模块-标准模块库-不用下载-要显式导入"><span>标准模块 / 标准模块库（不用下载，要显式导入）</span></a></h3><h4 id="sys模块" tabindex="-1"><a class="header-anchor" href="#sys模块"><span>sys模块</span></a></h4><ul><li><p>作用：能访问到由Python解释器使用或维护的对象，其中包括：</p><ul><li>标志、版本、整型数最大尺寸、可用的模块、hook路径、标准错误/输入/输出的位置、调用解释器的命令行参数</li></ul></li><li><p>模块文档：http://docs.python.org/library/sys</p></li><li><p>具体用法</p><ul><li><p><code>sys.ps1</code>：在交互模式下，<code>sys.ps1</code>和<code>sys.ps2</code>分别定义了主提示符<code>&#39;&gt;&gt;&gt; &#39;</code>和辅助提示符<code>&#39;... &#39;</code></p></li><li><p><code>sys.path</code>：是解释器搜索模块路径的<strong>字符串列表</strong></p><ul><li>它由环境变量 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener noreferrer">PYTHONPATH</a> 初始化</li><li>如果没有设定 <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener noreferrer">PYTHONPATH</a> ，就由内置的默认值初始化</li><li>你可以用标准的字符串操作修改它：例如<code>sys.path.append(&#39;/ufs/guido/lib/python&#39;)</code></li></ul></li><li><p><code>sys.argv</code>：<code>$ python vuln-scanner.py vuln-banners.txt</code>调用python时：</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.argv)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># python启动的参数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  	filename </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys.argv[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 第二个启动的参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h4 id="os模块" tabindex="-1"><a class="header-anchor" href="#os模块"><span>os模块</span></a></h4><ul><li>作用：提供了丰富的适用于各种操作系统的函数，可以交互的对象： <ul><li>操作系统环境、文件系统、用户数据、权限</li></ul></li><li>demo</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">isfile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(filename):  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 没有该文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">access</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(filename, os.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">R_OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 没有权限访问该文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="socket模块-网络模块" tabindex="-1"><a class="header-anchor" href="#socket模块-网络模块"><span>socket模块（网络模块）</span></a></h4><ul><li>demo</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">setdefaulttimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置超时</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> socket.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;192.168.95.148&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 连接指定ip和端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ans </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">recv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 读取接下来1KB数据</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ans </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ordereddict类-有序字典" tabindex="-1"><a class="header-anchor" href="#ordereddict类-有序字典"><span>OrderedDict类（有序字典）</span></a></h4><ul><li>载入：<code>from collections import OrderedDict</code></li></ul><h4 id="lib2to3-python2-x转3-x模块" tabindex="-1"><a class="header-anchor" href="#lib2to3-python2-x转3-x模块"><span>lib2to3（Python2.x转3.x模块）</span></a></h4><h3 id="第三方模块-要下载-并显式导入" tabindex="-1"><a class="header-anchor" href="#第三方模块-要下载-并显式导入"><span>第三方模块（要下载，并显式导入）</span></a></h3><h2 id="专题模块" tabindex="-1"><a class="header-anchor" href="#专题模块"><span>专题模块</span></a></h2><h3 id="【专题模块】黑客类" tabindex="-1"><a class="header-anchor" href="#【专题模块】黑客类"><span>【专题模块】黑客类</span></a></h3><h4 id="crypy-unix加密" tabindex="-1"><a class="header-anchor" href="#crypy-unix加密"><span>crypy（UNIX加密）</span></a></h4><h4 id="hashlib-sha-512函数等hash算法" tabindex="-1"><a class="header-anchor" href="#hashlib-sha-512函数等hash算法"><span>hashlib（SHA-512函数等hash算法）</span></a></h4>`,66)]))}const r=s(n,[["render",h],["__file","01. 封装 - 模块系统.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E5%B0%81%E8%A3%85%20-%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 模块系统（封装） 简概 简概 简概 模块是包括 Python 定义和声明的文件 文件名就是模块名加上 .py 后缀 模块的类别 可以是函数库、常量库、也可以是类库，导入方法都是一样的 交互式测试重新加载问题 出于性能考虑，每个模块在每个解释器会话中只导入一遍 因此，如果你修改了你的模块，需要重启解释器； 或者，如果你就是想交互式的测...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E5%B0%81%E8%A3%85%20-%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 模块系统（封装） 简概 简概 简概 模块是包括 Python 定义和声明的文件 文件名就是模块名加上 .py 后缀 模块的类别 可以是函数库、常量库、也可以是类库，导入方法都是一样的 交互式测试重新加载问题 出于性能考虑，每个模块在每个解释器会话中只导入一遍 因此，如果你修改了你的模块，需要重启解释器； 或者，如果你就是想交互式的测..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.16,"words":2147},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/01. 封装 - 模块系统.md","excerpt":"\\n<h1>目录</h1>\\n<h1>模块系统（封装）</h1>\\n<h2>简概</h2>\\n<h3>简概</h3>\\n<ul>\\n<li>简概\\n<ul>\\n<li>模块是包括 Python 定义和声明的文件</li>\\n<li><strong>文件名</strong>就是<strong>模块名</strong>加上 <code>.py</code> 后缀</li>\\n</ul>\\n</li>\\n<li>模块的类别\\n<ul>\\n<li>可以是函数库、常量库、也可以是类库，导入方法都是一样的</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>交互式测试重新加载问题</h3>\\n<p>出于性能考虑，每个模块在每个解释器会话中只导入一遍</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/01. 封装 - 模块系统.md","value":{"title":"01. 封装 - 模块系统","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/01. 封装 - 模块系统.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,o as data};
