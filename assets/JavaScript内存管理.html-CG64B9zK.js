import{_ as p,c as o,e as l,a as n,d as e,b as t,o as c,r as i}from"./app-DUNc33_O.js";const r="/assets/16b637393a752456tplv-t2oaga2asx-jj-mark3024000q75-BSqiadvX.png",u="/assets/16b6373703dd6747tplv-t2oaga2asx-jj-mark3024000q75-DZupw54W.png",d={},k={href:"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FMemory_Management",target:"_blank",rel:"noopener noreferrer"},v={href:"https://link.juejin.cn?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F10546125%2F",target:"_blank",rel:"noopener noreferrer"},m={href:"https://link.juejin.cn?target=https%3A%2F%2Fbook.douban.com%2Fsubject%2F10549733%2F",target:"_blank",rel:"noopener noreferrer"},b={href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2017%2F04%2Fmemory-leak.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://link.juejin.cn?target=https%3A%2F%2Fblog.meteor.com%2Fan-interesting-kind-of-javascript-memory-leak-8b47d2e7f156",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844903890278694919",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6844903882208837645",target:"_blank",rel:"noopener noreferrer"},j={href:"https://juejin.cn/post/6844903873992196110",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6844903863812620296",target:"_blank",rel:"noopener noreferrer"};function w(x,s){const a=i("ExternalLinkIcon");return c(),o("div",null,[s[9]||(s[9]=l(`<h1 id="javascript内存管理" tabindex="-1"><a class="header-anchor" href="#javascript内存管理"><span>JavaScript内存管理</span></a></h1><p>参考：https://juejin.cn/post/6844903869525262349</p><h2 id="内存生命周期" tabindex="-1"><a class="header-anchor" href="#内存生命周期"><span>内存生命周期</span></a></h2><p>像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()用于分配内存和释放内存。</p><p>而对于JavaScript来说，会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放内存，这个自动释放内存的过程称为垃圾回收。</p><p>因为自动垃圾回收机制的存在，让大多Javascript开发者感觉他们可以不关心内存管理，所以会在一些情况下导致内存泄漏。</p><p>JS 环境中分配的内存有如下声明周期：</p><ol><li>内存分配：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存</li><li>内存使用：即读写内存，也就是使用变量、函数等</li><li>内存回收：使用完毕，由垃圾回收机制自动回收不再使用的内存</li></ol><h3 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配"><span>内存分配</span></a></h3><p>为了不让程序员费心分配内存，JavaScript 在定义变量时就完成了内存分配。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 基本变量分配</span>
<span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>		<span class="token comment">// 给数值变量分配内存</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;azerty&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 给字符串分配内存</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>					<span class="token comment">// 给对象及其包含的值分配内存</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;abra&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 给数组及其包含的值分配内存（就像对象一样）</span>

<span class="token comment">// 函数 (可调用的对象) 内存</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>		<span class="token comment">// 给函数（可调用的对象）分配内存</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
someElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  someElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 函数表达式也能分配一个对象</span>

<span class="token comment">// 有些函数调用结果是分配对象内存、新变量、或者新对象</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配一个 Date 对象</span>
<span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配一个 DOM 元素</span>

<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;azerty&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// s2 是一个新的字符串</span>
                            <span class="token comment">// 因为字符串是不变量，</span>
                            <span class="token comment">// JavaScript 可能决定不分配内存，</span>
                            <span class="token comment">// 只是存储了 [0-3] 的范围。</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;ouais ouais&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nan nan&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;generation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nan nan&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">// 新数组有四个元素，是 a 连接 a2 的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存使用" tabindex="-1"><a class="header-anchor" href="#内存使用"><span>内存使用</span></a></h3><p>使用值的过程实际上是对分配内存进行读取与写入的操作。 读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>		<span class="token comment">// 分配内存</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对内存的使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存回收" tabindex="-1"><a class="header-anchor" href="#内存回收"><span>内存回收</span></a></h3><p>JS 有自动垃圾回收机制，那么这个自动垃圾回收机制的原理是什么呢？ 其实很简单，就是<strong>找出那些不再继续使用的值</strong>，然后释放其占用的内存。</p><p>大多数内存管理的问题都在这个阶段。 在这里最艰难的任务是找到不再需要使用的变量。</p><p>不再需要使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在， 当函数运行结束，没有其他引用 (闭包)，那么该变量会被标记回收。</p><p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说全局变量不会被当成垃圾回收。</p><p>因为自动垃圾回收机制的存在，开发人员可以不关心也不注意内存释放的有关问题，但对无用内存的释放这件事是客观存在的。 不幸的是，即使不考虑垃圾回收对性能的影响，目前最新的垃圾回收算法，也无法智能回收所有的极端情况。</p><p>接下来我们来探究一下 JS 垃圾回收的机制。</p><h2 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收"><span>垃圾回收</span></a></h2><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h3><p>垃圾回收算法主要依赖于引用的概念。</p><p>在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。</p><p>例如，一个Javascript对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）。</p><p>在这里，“对象”的概念不仅特指 JavaScript 对象，还包括函数作用域（或者全局词法作用域）。</p><h3 id="算法1-引用计数垃圾收集" tabindex="-1"><a class="header-anchor" href="#算法1-引用计数垃圾收集"><span>算法1: 引用计数垃圾收集</span></a></h3><p>这是最初级的垃圾回收算法。</p><p>引用计数算法定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。 如果没有其他对象指向它了，说明该对象已经不再需了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 对象obj1</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对象obj2</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token comment">// 计数：obj1:1(o), obj2:1(obj1)，一个作为另一个的属性被引用，另一个被分配给变量o</span>

<span class="token keyword">var</span> o2 <span class="token operator">=</span> o<span class="token punctuation">;</span>
<span class="token comment">// 计数：obj1:2(o,o2), obj2:1(obj1)</span>

o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 计数: obj1:1(o2), obj2:1(obj1)</span>

<span class="token keyword">var</span> oa <span class="token operator">=</span> o2<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 引用“这个对象”的a属性。现在，“这个对象”有两个引用了，一个是o2，一个是oa</span>
<span class="token comment">// 计数：obj1:1(o2), obj2:2(obj1,oa)</span>

o2 <span class="token operator">=</span> <span class="token string">&quot;yo&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 计数：obj1:0, obj2:1(oa)。此时obj1被垃圾回收</span>

oa <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 计数: obj1:0, obj2:0.此时obj2也被垃圾回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面可以看出，引用计数算法是个简单有效的算法。但它却存在一个致命的问题：<strong>循环引用</strong>。</p><p>如果两个对象相互引用，尽管他们已不再使用，垃圾回收不会进行回收，导致内存泄露。</p><p>循环引用的例子1：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment">// o 引用 o2</span>
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// o2 引用 o</span>
  <span class="token keyword">return</span> <span class="token string">&quot;azerty&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们申明了一个函数 f ，其中包含两个相互引用的对象。 在调用函数结束后，对象 o1 和 o2 实际上已离开函数范围，因此不再需要了。 但根据引用计数的原则，他们之间的相互引用依然存在，因此这部分内存不会被回收，内存泄露不可避免了。</p><p>循环引用的例子2：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种 JS 写法再普通不过了，创建一个DOM元素并绑定一个点击事件。 <strong>此时变量 div 有事件处理函数的引用，同时事件处理函数也有div的引用</strong>！（div变量可在函数内被访问）。 一个循序引用出现了，按上面所讲的算法，该部分内存无可避免的泄露了。</p><p>为了解决循环引用造成的问题，现代浏览器通过使用<strong>标记清除算法</strong>来实现垃圾回收。</p><h3 id="算法2-标记清除算法" tabindex="-1"><a class="header-anchor" href="#算法2-标记清除算法"><span>算法2: 标记清除算法</span></a></h3><p>标记清除算法将 <strong>“不再使用的对象”</strong> 定义为 <strong>“无法达到的对象”</strong>。 简单来说，就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象，都是还需要使用的。 那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p><p>从这个概念可以看出，无法触及的对象包含了没有引用的对象这个概念（没有任何引用的对象也是无法触及的对象）。 但反之未必成立。</p><p>工作流程：</p><ol><li>垃圾收集器会在运行的时候会给存储在内存中的所有变量都加上标记。</li><li>从根部出发将能触及到的对象的标记清除。</li><li>那些还存在标记的变量被视为准备删除的变量。</li><li>最后垃圾收集器会执行最后一步内存清除的工作，销毁那些带标记的值并回收它们所占用的内存空间。</li></ol><p><img src="`+r+`" alt="img" loading="lazy"></p><p>循环引用不再是问题了</p><p>再看之前循环引用的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment">// o 引用 o2</span>
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// o2 引用 o</span>

  <span class="token keyword">return</span> <span class="token string">&quot;azerty&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数调用返回之后，两个循环引用的对象在垃圾收集时从全局对象出发无法再获取他们的引用。 因此，他们将会被垃圾回收器回收。</p><h2 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏"><span>内存泄漏</span></a></h2><h3 id="什么是内存泄漏" tabindex="-1"><a class="header-anchor" href="#什么是内存泄漏"><span>什么是内存泄漏</span></a></h3><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。</p><p>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。 否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p><p>本质上讲,内存泄漏就是由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。</p><h3 id="内存泄漏的识别方法" tabindex="-1"><a class="header-anchor" href="#内存泄漏的识别方法"><span>内存泄漏的识别方法</span></a></h3><p>经验法则是，如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。 这就要求实时查看内存的占用情况。</p><h4 id="chrome-浏览器的方法" tabindex="-1"><a class="header-anchor" href="#chrome-浏览器的方法"><span>Chrome 浏览器的方法</span></a></h4><p>我们可以这样查看内存占用情况</p><ol><li>打开开发者工具，选择 Performance 面板</li><li>在顶部勾选 Memory</li><li>点击左上角的 record 按钮</li><li>在页面上进行各种操作，模拟用户的使用情况</li><li>一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况</li></ol><p>来看一张效果图：</p><p><img src="`+u+`" alt="img" loading="lazy"></p><p>我们有两种方式来判定当前是否有内存泄漏：</p><ol><li>多次快照后，比较每次快照中内存的占用情况，如果呈上升趋势，那么可以认为存在内存泄漏</li><li>某次快照后，看当前内存占用的趋势图，如果走势不平稳，呈上升趋势，那么可以认为存在内存泄漏</li></ol><h4 id="node-服务器环境的方法" tabindex="-1"><a class="header-anchor" href="#node-服务器环境的方法"><span>Node 服务器环境的方法</span></a></h4><p>使用 Node 提供的 process.memoryUsage 方法查看内存情况</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">memoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { </span>
<span class="token comment">//     rss: 27709440,</span>
<span class="token comment">//     heapTotal: 5685248,</span>
<span class="token comment">//     heapUsed: 3449392,</span>
<span class="token comment">//     external: 8772 </span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。</p><p>该对象包含四个字段，单位是字节，含义如下:</p><ul><li>rss（resident set size）：所有内存占用，包括指令区和堆栈。</li><li>heapTotal：&quot;堆&quot;占用的内存，包括用到的和没用到的。</li><li>heapUsed：用到的堆的部分。</li><li>external： V8 引擎内部的 C++ 对象占用的内存。</li></ul><p>判断内存泄漏，以heapUsed字段为准。</p><h3 id="常见的内存泄露案例" tabindex="-1"><a class="header-anchor" href="#常见的内存泄露案例"><span>常见的内存泄露案例</span></a></h3><h4 id="意外的全局变量" tabindex="-1"><a class="header-anchor" href="#意外的全局变量"><span>意外的全局变量</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bar1 <span class="token operator">=</span> <span class="token string">&#39;some text&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 没有声明变量 实际上是全局变量 =&gt; window.bar1</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bar2 <span class="token operator">=</span> <span class="token string">&#39;some text&#39;</span> <span class="token comment">// 全局变量 =&gt; window.bar2</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，意外的创建了两个全局变量 bar1 和 bar2</p><h4 id="被遗忘的定时器和回调函数" tabindex="-1"><a class="header-anchor" href="#被遗忘的定时器和回调函数"><span>被遗忘的定时器和回调函数</span></a></h4><p>在很多库中, 如果使用了观察者模式, 都会提供回调方法, 来调用一些回调函数。 要记得回收这些回调函数。举一个 setInterval的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> serverData <span class="token operator">=</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> renderer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;renderer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        renderer<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>serverData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每 5 秒调用一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果后续 renderer 元素被移除，整个定时器实际上没有任何作用。 但如果你没有回收定时器，整个定时器依然有效, 不但定时器无法被内存回收， 定时器函数中的依赖也无法回收。在这个案例中的 serverData 也无法被回收。</p><h4 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h4><p>在 JS 开发中，我们会经常用到闭包，一个内部函数，有权访问包含其的外部函数中的变量。 下面这种情况下，闭包也会造成内存泄露:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> theThing <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token function-variable function">replaceThing</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> originalThing <span class="token operator">=</span> theThing<span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">unused</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>originalThing<span class="token punctuation">)</span> <span class="token comment">// 对于 &#39;originalThing&#39;的引用</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  theThing <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">longStr</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">someMethod</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span>replaceThing<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码，每次调用 replaceThing 时，theThing 获得了包含一个巨大的数组和一个对于新闭包 someMethod 的对象。 同时 unused 是一个引用了 originalThing 的闭包。</p><p>这个范例的关键在于，闭包之间是共享作用域的，尽管 unused 可能一直没有被调用，但是 someMethod 可能会被调用，就会导致无法对其内存进行回收。 当这段代码被反复执行时，内存会持续增长。</p><h4 id="dom-引用" tabindex="-1"><a class="header-anchor" href="#dom-引用"><span>DOM 引用</span></a></h4><p>很多时候, 我们对 Dom 的操作, 会把 Dom 的引用保存在一个数组或者 Map 中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">image</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elements<span class="token punctuation">.</span>image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://example.com/image_name.png&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">removeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;image&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这个时候我们对于 #image 仍然有一个引用, Image 元素, 仍然无法被内存回收.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述案例中，即使我们对于 image 元素进行了移除，但是仍然有对 image 元素的引用，依然无法对齐进行内存回收。</p><p>另外需要注意的一个点是，对于一个 Dom 树的叶子节点的引用。 举个例子: 如果我们引用了一个表格中的td元素，一旦在 Dom 中删除了整个表格，我们直观的觉得内存回收应该回收除了被引用的 td 外的其他元素。 但是事实上，这个 td 元素是整个表格的一个子元素，并保留对于其父元素的引用。 这就会导致对于整个表格，都无法进行内存回收。所以我们要小心处理对于 Dom 元素的引用。</p><h3 id="如何避免内存泄漏" tabindex="-1"><a class="header-anchor" href="#如何避免内存泄漏"><span>如何避免内存泄漏</span></a></h3><p>记住一个原则：不用的东西，及时归还。</p><ol><li>减少不必要的全局变量，使用严格模式避免意外创建全局变量。</li><li>在你使用完数据后，及时解除引用（闭包中的变量，dom引用，定时器清除）。</li><li>组织好你的逻辑，避免死循环等造成浏览器卡顿，崩溃的问题。</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,93)),n("ul",null,[n("li",null,[n("a",k,[s[0]||(s[0]=e("MDN-内存管理")),t(a)])]),n("li",null,[n("a",v,[s[1]||(s[1]=e("JavaScript高级程序设计")),t(a)])]),n("li",null,[n("a",m,[s[2]||(s[2]=e("JavaScript权威指南")),t(a)])]),n("li",null,[n("a",b,[s[3]||(s[3]=e("JavaScript 内存泄漏教程")),t(a)])]),n("li",null,[n("a",h,[s[4]||(s[4]=e("一种有趣的JavaScript内存泄漏")),t(a)])])]),s[10]||(s[10]=n("h2",{id:"系列文章推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系列文章推荐"},[n("span",null,"系列文章推荐")])],-1)),n("ul",null,[n("li",null,[n("a",g,[s[5]||(s[5]=e("「前端进阶」单页路由解析与实现")),t(a)])]),n("li",null,[n("a",f,[s[6]||(s[6]=e("「前端进阶」彻底弄懂函数柯里化")),t(a)])]),n("li",null,[n("a",j,[s[7]||(s[7]=e("「前端进阶」JS中的栈内存堆内存")),t(a)])]),n("li",null,[n("a",y,[s[8]||(s[8]=e("「前端进阶」数组乱序")),t(a)])])])])}const S=p(d,[["render",w],["__file","JavaScript内存管理.html.vue"]]),J=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/JavaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","title":"JavaScript内存管理","lang":"zh-CN","frontmatter":{"description":"JavaScript内存管理 参考：https://juejin.cn/post/6844903869525262349 内存生命周期 像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()用于分配内存和释放内存。 而对于JavaScript来说，会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/JavaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"JavaScript内存管理"}],["meta",{"property":"og:description","content":"JavaScript内存管理 参考：https://juejin.cn/post/6844903869525262349 内存生命周期 像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()用于分配内存和释放内存。 而对于JavaScript来说，会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript内存管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"JavaScript内存管理","slug":"javascript内存管理","link":"#javascript内存管理","children":[{"level":2,"title":"内存生命周期","slug":"内存生命周期","link":"#内存生命周期","children":[{"level":3,"title":"内存分配","slug":"内存分配","link":"#内存分配","children":[]},{"level":3,"title":"内存使用","slug":"内存使用","link":"#内存使用","children":[]},{"level":3,"title":"内存回收","slug":"内存回收","link":"#内存回收","children":[]}]},{"level":2,"title":"垃圾回收","slug":"垃圾回收","link":"#垃圾回收","children":[{"level":3,"title":"引用","slug":"引用","link":"#引用","children":[]},{"level":3,"title":"算法1: 引用计数垃圾收集","slug":"算法1-引用计数垃圾收集","link":"#算法1-引用计数垃圾收集","children":[]},{"level":3,"title":"算法2: 标记清除算法","slug":"算法2-标记清除算法","link":"#算法2-标记清除算法","children":[]}]},{"level":2,"title":"内存泄漏","slug":"内存泄漏","link":"#内存泄漏","children":[{"level":3,"title":"什么是内存泄漏","slug":"什么是内存泄漏","link":"#什么是内存泄漏","children":[]},{"level":3,"title":"内存泄漏的识别方法","slug":"内存泄漏的识别方法","link":"#内存泄漏的识别方法","children":[{"level":4,"title":"Chrome 浏览器的方法","slug":"chrome-浏览器的方法","link":"#chrome-浏览器的方法","children":[]},{"level":4,"title":"Node 服务器环境的方法","slug":"node-服务器环境的方法","link":"#node-服务器环境的方法","children":[]}]},{"level":3,"title":"常见的内存泄露案例","slug":"常见的内存泄露案例","link":"#常见的内存泄露案例","children":[{"level":4,"title":"意外的全局变量","slug":"意外的全局变量","link":"#意外的全局变量","children":[]},{"level":4,"title":"被遗忘的定时器和回调函数","slug":"被遗忘的定时器和回调函数","link":"#被遗忘的定时器和回调函数","children":[]},{"level":4,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":4,"title":"DOM 引用","slug":"dom-引用","link":"#dom-引用","children":[]}]},{"level":3,"title":"如何避免内存泄漏","slug":"如何避免内存泄漏","link":"#如何避免内存泄漏","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]},{"level":2,"title":"系列文章推荐","slug":"系列文章推荐","link":"#系列文章推荐","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.04,"words":3611},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/JavaScript内存管理.md","excerpt":"\\n<p>参考：https://juejin.cn/post/6844903869525262349</p>\\n<h2>内存生命周期</h2>\\n<p>像C语言这样的底层语言一般都有底层的内存管理接口，比如 malloc()和free()用于分配内存和释放内存。</p>\\n<p>而对于JavaScript来说，会在创建变量（对象，字符串等）时分配内存，并且在不再使用它们时“自动”释放内存，这个自动释放内存的过程称为垃圾回收。</p>\\n<p>因为自动垃圾回收机制的存在，让大多Javascript开发者感觉他们可以不关心内存管理，所以会在一些情况下导致内存泄漏。</p>\\n<p>JS 环境中分配的内存有如下声明周期：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/JavaScript内存管理.md","value":{"title":"JavaScript内存管理","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/JavaScript内存管理.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{S as comp,J as data};
