import{_ as e,e as t,g as n,f as s,o as l}from"./app-OgO1lqgf.js";const p={};function r(i,a){return l(),t("div",null,a[0]||(a[0]=[n('<h1 id="readme" tabindex="-1"><a class="header-anchor" href="#readme"><span>README</span></a></h1><p>关于<strong>数据库原理类</strong>的部分不在这个位置，可以去看《小林coding_图解系列》的读书笔记，那里有MySQL和Redis两个图解系列，都比较详细</p><h2 id="调研相关" tabindex="-1"><a class="header-anchor" href="#调研相关"><span>调研相关</span></a></h2><h3 id="时间序列型" tabindex="-1"><a class="header-anchor" href="#时间序列型"><span>时间序列型</span></a></h3><p>见 TimeSeries Datebase 笔记</p><h3 id="关系型" tabindex="-1"><a class="header-anchor" href="#关系型"><span>关系型</span></a></h3><p>Kimi GPT：</p><p>关系型数据库（RDBMS）是数据存储和检索的一种方式，它们以表格的形式组织数据，每个表格由行和列组成。常用的关系型数据库有以下几款：</p><ol><li><strong>MySQL</strong>：一种开源的SQL数据库，由瑞典的MySQL AB公司开发，后被甲骨文公司收购。MySQL支持多线程、多用户，并且非常快速，适合中小型网站使用。</li><li><strong>SQLite</strong>：一个轻量级的、文件系统基础的数据库，通常用于移动应用和小型项目。</li><li><strong>PostgreSQL</strong>：一个高度可扩展的开源数据库系统，以其先进的SQL特性和对并发控制的支持而闻名。</li><li><strong>Oracle Database</strong>：由甲骨文公司开发，是一个功能强大的商业数据库系统，广泛应用于大型企业和复杂的应用场景。</li><li><strong>SQL Server</strong>：由微软公司开发，是一个全面的数据库解决方案，提供广泛的数据管理功能，适用于各种规模的应用程序。</li><li><strong>DB2</strong>：由IBM公司开发，是一个企业级的数据库系统，特别适用于大型企业和复杂的数据仓库应用。</li><li><strong>Access</strong>：由微软公司开发，是一个桌面级的数据库系统，适用于小型企业和个人用户。</li><li><strong>OceanBase</strong>：由阿里巴巴开发，是一个高性能的分布式关系型数据库，适用于大规模数据存储和处理。</li><li><strong>GaussDB</strong>：由华为开发，是一个企业级的数据库解决方案，提供高性能、高可用性和高安全性。</li><li><strong>TDSQL</strong>：由腾讯开发，是一个云原生的数据库服务，提供高可用性和弹性伸缩能力。</li></ol><p>这些数据库系统各有其特点和优势，选择哪个数据库系统通常取决于具体的应用需求、性能要求、预算以及对特定技术的熟悉程度。例如，MySQL和PostgreSQL因其开源特性和灵活性在许多Web应用中非常流行，而Oracle和SQL Server则因其强大的功能和企业级特性在大型企业中得到广泛应用。SQLite因其轻量级和易于嵌入特性，在移动应用开发中非常受欢迎。</p><h3 id="非关系型" tabindex="-1"><a class="header-anchor" href="#非关系型"><span>非关系型</span></a></h3><p>Kimi GPT：</p><p>非关系型数据库（NoSQL）是相对于传统的关系型数据库（RDBMS）而言的，它们不使用传统的SQL作为查询语言，并且不保证关系数据的ACID特性。非关系型数据库通常用于处理大规模数据集，提供高可用性和可扩展性，以及支持灵活的数据模型。以下是一些常用的非关系型数据库：</p><ol><li><strong>MongoDB</strong>：一个基于文档的数据库，以其高性能和易用性而闻名。MongoDB支持丰富的查询语言，允许嵌套的文档结构，非常适合处理复杂的数据结构。</li><li><strong>Redis</strong>：一个高性能的键值存储系统，常用作数据库、缓存和消息中间件。Redis支持多种类型的数据结构，如字符串、散列、列表、集合、有序集合等。</li><li><strong>Cassandra</strong>：一个分布式的键值存储系统，设计用于处理大量数据跨多个数据中心和服务器。Cassandra提供高可用性和可扩展性，适合需要高写入和读取速度的应用。</li><li><strong>Couchbase</strong>：提供高性能和易扩展的文档数据库解决方案，支持JSON文档存储，并且具有强大的查询引擎。</li><li><strong>Riak</strong>：一个分布式的键值存储数据库，以其高可用性和容错能力而著称。Riak设计用于分布式系统，提供快速的数据访问和良好的扩展性。</li><li><strong>Neo4j</strong>：一个图形数据库，专门用于存储和查询包含复杂关系的数据。Neo4j使用图数据模型，非常适合社交网络分析、推荐系统等应用。</li><li><strong>Amazon DynamoDB</strong>：一个完全托管的NoSQL数据库服务，提供快速和灵活的键值存储以及在任何规模的数据上进行的无缝索引入。</li><li><strong>Apache HBase</strong>：是一个开源的非关系型分布式数据库（NoSQL），它运行在Hadoop的HDFS之上，用于存储和访问大规模的稀疏数据集。</li><li><strong>CouchDB</strong>：一个使用JSON来存储数据的面向文档的数据库，使用HTTP和JavaScript（通过MapReduce）进行数据的复制和处理。</li><li><strong>Elasticsearch</strong>：一个基于Lucene的搜索引擎，提供全文搜索的功能，并且可以用于分析复杂的数据集。</li></ol><p>非关系型数据库的选择通常取决于具体的应用场景，例如数据的结构、读写需求、可扩展性、一致性要求等。每种数据库都有其特定的优势和适用场景，例如MongoDB适合处理文档数据，Cassandra适合需要高吞吐量写入的应用，而Redis适合用作缓存或消息队列。</p><ul><li>MongoDB（文档型）</li><li>Cassandra（列族型）</li><li>Redis（键值对型）</li><li>Neo4j（图形数据库）</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="acid" tabindex="-1"><a class="header-anchor" href="#acid"><span>ACID</span></a></h3><p>ACID，是指数据库管理系统（DBMS）在写入或更新资料的过程中，为保证事务（transaction）是正确可靠的，所必须具备的四个特性：</p><ul><li>原子性（<strong>A</strong>tomicity，或称不可分割性）</li><li>一致性（<strong>C</strong>onsistency）</li><li>隔离性（<strong>I</strong>solation，又称独立性）</li><li>持久性（<strong>D</strong>urability）</li></ul><h2 id="先引-性能指标" tabindex="-1"><a class="header-anchor" href="#先引-性能指标"><span>先引：性能指标</span></a></h2><p>在比较性能之前，肯定先要说下性能指标。</p><p>参考：</p><ul><li>主要参考、转载：<a href="https://blog.itpub.net/69942496/viewspace-2665766/" target="_blank" rel="noopener noreferrer">一文搞懂高并发性能指标：QPS、TPS、RT、吞吐量</a></li><li>参考2：<a href="https://mikechen.cc/15729.html" target="_blank" rel="noopener noreferrer">QPS、TPS、RT、吞吐量等高性能指标(一文秒懂)</a></li></ul><h3 id="qps-queries-per-second-每秒查询" tabindex="-1"><a class="header-anchor" href="#qps-queries-per-second-每秒查询"><span>QPS (Queries Per Second，每秒查询)</span></a></h3><p>QPS：Queries Per Second 的缩写，意为 每秒查询率</p><p>是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p><p>互联网中，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。</p><h3 id="tps-transactions-per-second-每秒事务" tabindex="-1"><a class="header-anchor" href="#tps-transactions-per-second-每秒事务"><span>TPS (Transactions Per Second，每秒事务)</span></a></h3><p>TPS：Transactions Per Second 的缩写，意为 每秒事务，单位 事务数/秒</p><p>它是软件测试结果的测量单位。</p><h4 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h4><p>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><h4 id="qps-vs-tps" tabindex="-1"><a class="header-anchor" href="#qps-vs-tps"><span>QPS vs TPS</span></a></h4><p>QPS 基本类似于 TPS，但是不同的是，对于一个页面的一次访问，形成一个TPS；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“QPS”之中。</p><p>例如：访问一个页面会请求服务器2次，一次访问，产生一个“T”，产生2个“Q”。</p><h4 id="如何减少事务、事务优化" tabindex="-1"><a class="header-anchor" href="#如何减少事务、事务优化"><span>如何减少事务、事务优化</span></a></h4><p>参考：<a href="https://juejin.cn/s/mysql%20%E5%A4%A7%E4%BA%8B%E5%8A%A1%E4%BC%98%E5%8C%96" target="_blank" rel="noopener noreferrer">mysql 大事务优化</a></p><p>以 mysql 为例：</p><p>MySQL 大事务优化的主要思路是将一个大事务拆分成多个小事务，以减少事务持有锁的时间，避免锁冲突，提高并发能力。以下是具体的优化策略：</p><ol><li>提高事务隔离级别：将隔离级别设置为 READ COMMITTED 或更高级别，可以避免脏读和不可重复读等问题，但会增加锁竞争，需要进行优化。</li><li>减少事务的执行时间：通过减少事务的操作数量和复杂度，减少事务的执行时间。可以使用批量操作、分批次提交等方式来减少单次事务的操作数量。</li><li>分离大事务：将大事务分解成多个小事务，减少单个事务持有锁的时间。例如，可以使用分片技术将数据分散到多个库或表中，将单个大事务分解成多个小事务。</li><li>使用较短的事务：如果单个事务无法分解成多个小事务，可以尽量缩短事务的执行时间。例如，在更新大量数据时，可以使用 limit 子句将数据分成多次更新，每次更新一小部分数据。</li><li>使用批量提交：将多个事务合并成一个事务，并使用批量提交技术来执行，可以减少事务的执行时间，并提高并发能力。</li><li>调整 InnoDB 相关参数：例如，将 innodb_buffer_pool_size 调整到合适的大小，可以减少磁盘 IO 操作，提高性能。</li></ol><p>以上是针对 MySQL 大事务优化的一些常用方法和思路，具体的优化策略需要根据具体业务场景和数据规模进行分析和优化。</p><p>具体的：</p><h3 id="rt-response-time-响应时间" tabindex="-1"><a class="header-anchor" href="#rt-response-time-响应时间"><span>RT (Response-time，响应时间）</span></a></h3><p>RT：Response-time 的缩写，意为 响应时间</p><p>响应时间：执行一个请求从开始到最后收到响应数据所花费的总体时间,即从客户端发起请求到收到服务器响应结果的时间。</p><p>是一个系统最重要的指标之一，它的数值大小直接反应了系统的快慢。</p><h3 id="并发数" tabindex="-1"><a class="header-anchor" href="#并发数"><span>并发数</span></a></h3><p>并发数是指系统同时能处理的请求数量，这个也是反应了系统的负载能力。</p><h3 id="吞吐量" tabindex="-1"><a class="header-anchor" href="#吞吐量"><span>吞吐量</span></a></h3><p>系统的吞吐量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联。单个request 对CPU消耗越高，外部系统接口、IO速度越慢，系统吞吐能力越低，反之越高。</p><p>系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间。</p><ol><li>QPS（TPS）：（Query Per Second）每秒钟request/事务 数量</li><li>并发数： 系统同时处理的request/事务数</li><li>响应时间： 一般取平均响应时间</li></ol><p>理解了上面三个要素的意义之后，就能推算出它们之间的关系：</p>',54),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"Q"),s("mi",null,"P"),s("mi",null,"S"),s("mtext",null," "),s("mo",{stretchy:"false"},"("),s("mi",null,"T"),s("mi",null,"P"),s("mi",null,"S"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mtext",null,"并发数"),s("mi",{mathvariant:"normal"},"/"),s("mtext",null,"平均响应时间"),s("mspace",{linebreak:"newline"}),s("mtext",null,"             并发数"),s("mo",null,"="),s("mi",null,"Q"),s("mi",null,"P"),s("mi",null,"S"),s("mo",null,"×"),s("mtext",null,"平均响应时间")]),s("annotation",{encoding:"application/x-tex"},"QPS~(TPS)= \\text{并发数}/\\text{平均响应时间}\\\\ ~~~~~~~~~~~~~并发数 = QPS\\times\\text{平均响应时间} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"QPS"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"TPS"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"并发数")]),s("span",{class:"mord"},"/"),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"平均响应时间")])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mord cjk_fallback"},"并发数"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"QPS"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord cjk_fallback"},"平均响应时间")])])])])])],-1),n('<h3 id="总结-实际举例" tabindex="-1"><a class="header-anchor" href="#总结-实际举例"><span>总结 - 实际举例</span></a></h3><h4 id="二八定律的峰值问题" tabindex="-1"><a class="header-anchor" href="#二八定律的峰值问题"><span>二八定律的峰值问题</span></a></h4><p>我们通过一个实例来把上面几个概念串起来理解。按二八定律来看，如果每天 80% 的访问集中在 20% 的时间里，这 20% 时间就叫做峰值时间。</p><ul><li>公式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mtext>总</mtext><mi>P</mi><mi>V</mi><mtext>数</mtext><mo>∗</mo><mn>80</mn><mi mathvariant="normal">%</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mtext>每天秒数</mtext><mo>∗</mo><mn>20</mn><mi mathvariant="normal">%</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>峰值时间每秒请求数</mtext><mo stretchy="false">(</mo><mi>Q</mi><mi>P</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( 总PV数 * 80\\% ) / ( 每天秒数 * 20\\% ) = 峰值时间每秒请求数(QPS)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">总</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">80%</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord cjk_fallback">每天秒数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">20%</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">峰值时间每秒请求数</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">QPS</span><span class="mclose">)</span></span></span></span></li><li>机器：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>峰值时间每秒</mtext><mi>Q</mi><mi>P</mi><mi>S</mi><mi mathvariant="normal">/</mi><mtext>单台机器的</mtext><mi>Q</mi><mi>P</mi><mi>S</mi><mo>=</mo><mtext>需要的机器</mtext></mrow><annotation encoding="application/x-tex">峰值时间每秒QPS / 单台机器的QPS = 需要的机器</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">峰值时间每秒</span><span class="mord mathnormal" style="margin-right:0.05764em;">QPS</span><span class="mord">/</span><span class="mord cjk_fallback">单台机器的</span><span class="mord mathnormal" style="margin-right:0.05764em;">QPS</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">需要的机器</span></span></span></span></li></ul><h4 id="题目举例" tabindex="-1"><a class="header-anchor" href="#题目举例"><span>题目举例</span></a></h4><p><strong>1、每天300w PV 的在单台机器上，这台机器需要多少QPS？</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>3000000</mn><mo>∗</mo><mn>0.8</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>86400</mn><mo>∗</mo><mn>0.2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>139</mn><mo stretchy="false">(</mo><mi>Q</mi><mi>P</mi><mi>S</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3000000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.8</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">86400</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">139</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">QPS</span><span class="mclose">)</span></span></span></span></p><p><strong>2、如果一台机器的QPS是58，需要几台机器来支持？</strong></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>139</mn><mi mathvariant="normal">/</mi><mn>58</mn><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">139 / 58 = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">139/58</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></p><h3 id="总结-最佳线程数、qps、rt" tabindex="-1"><a class="header-anchor" href="#总结-最佳线程数、qps、rt"><span>总结 - 最佳线程数、QPS、RT</span></a></h3><h4 id="单线程qps公式-qps-1000ms-rt" tabindex="-1"><a class="header-anchor" href="#单线程qps公式-qps-1000ms-rt"><span>单线程QPS公式：QPS=1000ms/RT</span></a></h4><p>对同一个系统而言，支持的线程数越多，QPS越高。假设一个RT是80ms,则可以很容易的计算出QPS,QPS = 1000/80 = 12.5<br> 多线程场景，如果把服务端的线程数提升到2，那么整个系统的QPS则为 2*（1000/80） = 25, 可见QPS随着线程的增加而线性增长，那QPS上不去就加线程呗，听起来很有道理，公司也说的通，但是往往现实并非如此。</p><h4 id="qps和rt的真实关系" tabindex="-1"><a class="header-anchor" href="#qps和rt的真实关系"><span>QPS和RT的真实关系</span></a></h4><p>我们想象的QPS、RT关系如下，</p><p>图）</p><p>实际的QPS、RT关系如下，</p><p>图）</p><h4 id="最佳线程数量" tabindex="-1"><a class="header-anchor" href="#最佳线程数量"><span>最佳线程数量</span></a></h4><p>刚好消耗完服务器的瓶颈资源的临界线程数，公式如下<br> 最佳线程数量=（（线程等待时间+线程cpu时间）/线程cpu时间）* cpu数量<br> 特性：</p><ul><li>在达到最佳线程数的时候，线程数量继续递增，则QPS不变，而响应时间变长，持续递增线程数量，则QPS开始下降。</li><li>每个系统都有其最佳线程数量，但是不同状态下，最佳线程数量是会变化的。</li><li>瓶颈资源可以是CPU,可以是内存，可以是锁资源，IO资源：超过最佳线程数-导致资源的竞争，超过最佳线程数-响应时间递增。</li></ul>',20)]))}const o=e(p,[["render",r],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"README","lang":"zh-CN","frontmatter":{"description":"README 关于数据库原理类的部分不在这个位置，可以去看《小林coding_图解系列》的读书笔记，那里有MySQL和Redis两个图解系列，都比较详细 调研相关 时间序列型 见 TimeSeries Datebase 笔记 关系型 Kimi GPT： 关系型数据库（RDBMS）是数据存储和检索的一种方式，它们以表格的形式组织数据，每个表格由行和列组成...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"README"}],["meta",{"property":"og:description","content":"README 关于数据库原理类的部分不在这个位置，可以去看《小林coding_图解系列》的读书笔记，那里有MySQL和Redis两个图解系列，都比较详细 调研相关 时间序列型 见 TimeSeries Datebase 笔记 关系型 Kimi GPT： 关系型数据库（RDBMS）是数据存储和检索的一种方式，它们以表格的形式组织数据，每个表格由行和列组成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"README\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":10.5,"words":3149},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/README.md","excerpt":"\\n<p>关于<strong>数据库原理类</strong>的部分不在这个位置，可以去看《小林coding_图解系列》的读书笔记，那里有MySQL和Redis两个图解系列，都比较详细</p>\\n<h2>调研相关</h2>\\n<h3>时间序列型</h3>\\n<p>见 TimeSeries Datebase 笔记</p>\\n<h3>关系型</h3>\\n<p>Kimi GPT：</p>\\n<p>关系型数据库（RDBMS）是数据存储和检索的一种方式，它们以表格的形式组织数据，每个表格由行和列组成。常用的关系型数据库有以下几款：</p>\\n<ol>\\n<li><strong>MySQL</strong>：一种开源的SQL数据库，由瑞典的MySQL AB公司开发，后被甲骨文公司收购。MySQL支持多线程、多用户，并且非常快速，适合中小型网站使用。</li>\\n<li><strong>SQLite</strong>：一个轻量级的、文件系统基础的数据库，通常用于移动应用和小型项目。</li>\\n<li><strong>PostgreSQL</strong>：一个高度可扩展的开源数据库系统，以其先进的SQL特性和对并发控制的支持而闻名。</li>\\n<li><strong>Oracle Database</strong>：由甲骨文公司开发，是一个功能强大的商业数据库系统，广泛应用于大型企业和复杂的应用场景。</li>\\n<li><strong>SQL Server</strong>：由微软公司开发，是一个全面的数据库解决方案，提供广泛的数据管理功能，适用于各种规模的应用程序。</li>\\n<li><strong>DB2</strong>：由IBM公司开发，是一个企业级的数据库系统，特别适用于大型企业和复杂的数据仓库应用。</li>\\n<li><strong>Access</strong>：由微软公司开发，是一个桌面级的数据库系统，适用于小型企业和个人用户。</li>\\n<li><strong>OceanBase</strong>：由阿里巴巴开发，是一个高性能的分布式关系型数据库，适用于大规模数据存储和处理。</li>\\n<li><strong>GaussDB</strong>：由华为开发，是一个企业级的数据库解决方案，提供高性能、高可用性和高安全性。</li>\\n<li><strong>TDSQL</strong>：由腾讯开发，是一个云原生的数据库服务，提供高可用性和弹性伸缩能力。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/README.md","value":{"title":"04. 后端/","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,c as data};
