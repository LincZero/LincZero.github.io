import{_ as i,c as e,e as a,o as n}from"./app-DEUP2Tjk.js";const t={};function s(r,l){return n(),e("div",null,l[0]||(l[0]=[a('<h1 id="库管理" tabindex="-1"><a class="header-anchor" href="#库管理"><span>库管理</span></a></h1><p>模块库</p><p>一个纯C的模块，写：</p><ul><li>源代码 - 纯头文件库</li><li>源代码 - 给cpp一起编译</li><li>静态库</li><li>动态库</li></ul><p>比较这四种选择（参考：GPT4）</p><ol><li>纯头文件库 <ul><li>选用：这种方式比较适合小型项目</li><li>优点：避免链接问题，对于模板类或函数非常有用</li><li>缺点：因为每次编译都会重新编译所有的代码，可能会导致<strong>编译时间</strong>增长</li></ul></li><li>不封装直接给源代码和主函数一起编译 <ul><li>选用：这种方式比较粗糙，一般适合比较小的项目，或者为了方便调试</li><li>优点：可以直接查看和修改源代码</li><li>缺点：如果源代码较多，<strong>编译时间</strong>可能会很长，也不利于代码的模块化管理</li></ul></li><li>静态库 <ul><li>选用：静态库在编译阶段会被连接到目标程序，增加了目标程序的体积。这种方式适合中大型的项目</li><li>优点：<strong>执行速度快</strong>，因为在编译阶段已经确定了所有函数的地址，不需要在运行时动态链接</li><li>缺点：如果库有更新，需要重新编译和链接目标程序</li></ul></li><li>动态库 <ul><li>选用：动态库在运行期间被加载，因此可以被多个程序共享，<strong>节约内存</strong></li><li>优点：支持版本控制，允许函数库在不需要重新连接应用程序的情况下进行升级或改变</li><li>缺点：运行速度相对较慢，因为需要在运行时解析函数地址</li></ul></li></ol><p>这四种选择各有优劣，根据实际项目的规模、需求和团队的开发习惯，可以进行适当的选择。</p><h2 id="常用库" tabindex="-1"><a class="header-anchor" href="#常用库"><span>常用库</span></a></h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/98056565" target="_blank" rel="noopener noreferrer">最全常用 C++ 框架、库和资源汇总</a></p><h3 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库"><span>标准库</span></a></h3><p>C++标准库，包括了STL容器，算法和函数等。</p><ul><li>C++ Standard Library：是一系列类和函数的集合，使用核心语言编写，也是C++ISO自身标准的一部分。</li><li>Standard Template Library：标准模板库</li><li>C POSIX library ： POSIX系统的C标准库规范</li><li>ISO C++ Standards Committee ：C++标准委员会</li></ul><h3 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h3><p>C++通用框架和库</p><ul><li>Apache C++ Standard Library：是一系列算法，容器，迭代器和其他基本组件的集合</li><li>ASL ：Adobe源代码库提供了同行的评审和可移植的C++源代码库。</li><li><strong>Boost</strong> ：大量通用C++库的集合。</li><li>BDE ：来自于彭博资讯实验室的开发环境。</li><li>Cinder：提供专业品质创造性编码的开源开发社区。</li><li>Cxxomfort：轻量级的，只包含头文件的库，将C++ 11的一些新特性移植到C++03中。</li><li>Dlib：使用契约式编程和现代C++科技设计的通用的跨平台的C++库。</li><li>EASTL ：EA-STL公共部分</li><li>ffead-cpp ：企业应用程序开发框架</li><li>Folly：由Facebook开发和使用的开源C++库</li><li>JUCE ：包罗万象的C++类库，用于开发跨平台软件</li><li>libPhenom：用于构建高性能和高度可扩展性系统的事件框架。</li><li>LibSourcey ：用于实时的视频流和高性能网络应用程序的C++11 evented IO</li><li>LibU ： C语言写的多平台工具库</li><li>Loki ：C++库的设计，包括常见的设计模式和习语的实现。</li><li>MiLi ：只含头文件的小型C++库</li><li>openFrameworks ：开发C++工具包，用于创意性编码。</li><li><strong>Qt</strong> ：跨平台的应用程序和用户界面框架</li><li>Reason ：跨平台的框架，使开发者能够更容易地使用Java，.Net和Python，同时也满足了他们对C++性能和优势的需求。</li><li>ROOT ：具备所有功能的一系列面向对象的框架，能够非常高效地处理和分析大量的数据，为欧洲原子能研究机构所用。</li><li>STLport：是STL具有代表性的版本</li><li>STXXL：用于额外的大型数据集的标准模板库。</li><li>Ultimate++ ：C++跨平台快速应用程序开发框架</li><li>Windows Template Library：用于开发Windows应用程序和UI组件的C++库</li><li>Yomm11 ：C++11的开放multi-methods.</li></ul><h3 id="人工智能" tabindex="-1"><a class="header-anchor" href="#人工智能"><span>人工智能</span></a></h3><ul><li>btsk ：游戏行为树启动器工具</li><li>Evolving Objects：基于模板的，ANSI C++演化计算库，能够帮助你非常快速地编写出自己的随机优化算法。</li><li>Neu：C++11框架，编程语言集，用于创建人工智能应用程序的多用途软件系统。</li></ul><h3 id="异步事件循环" tabindex="-1"><a class="header-anchor" href="#异步事件循环"><span>异步事件循环</span></a></h3><ul><li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库。</li><li>libev ：功能齐全，高性能的时间循环，轻微地仿效libevent，但是不再像libevent一样有局限性，也修复了它的一些bug。</li><li>libevent ：事件通知库</li><li>libuv ：跨平台异步I/O。</li></ul><h3 id="音频" tabindex="-1"><a class="header-anchor" href="#音频"><span>音频</span></a></h3><p>音频，声音，音乐，数字化音乐库</p><ul><li>FMOD ：易于使用的跨平台的音频引擎和音频内容的游戏创作工具。</li><li>Maximilian ：C++音频和音乐数字信号处理库</li><li>OpenAL ：开源音频库—跨平台的音频API</li><li>Opus：一个完全开放的，免版税的，高度通用的音频编解码器</li><li>Speex：免费编解码器，为Opus所废弃</li><li>Tonic： C++易用和高效的音频合成</li><li>Vorbis： Ogg Vorbis是一种完全开放的，非专有的，免版税的通用压缩音频格式。</li></ul><h3 id="生态学" tabindex="-1"><a class="header-anchor" href="#生态学"><span>生态学</span></a></h3><p>生物信息，基因组学和生物技术</p><ul><li>libsequence：用于表示和分析群体遗传学数据的C++库。</li><li>SeqAn：专注于生物数据序列分析的算法和数据结构。</li><li>Vcflib ：用于解析和处理VCF文件的C++库</li><li>Wham：直接把联想测试应用到BAM文件的基因结构变异。</li></ul><h3 id="压缩" tabindex="-1"><a class="header-anchor" href="#压缩"><span>压缩</span></a></h3><p>压缩和归档库</p><ul><li>bzip2：一个完全免费，免费专利和高质量的数据压缩</li><li>doboz：能够快速解压缩的压缩库</li><li>PhysicsFS：对各种归档提供抽象访问的库，主要用于视频游戏，设计灵感部分来自于Quake3的文件子系统。</li><li>KArchive：用于创建，读写和操作文件档案（例如zip和 tar）的库，它通过QIODevice的一系列子类，使用gzip格式，提供了透明的压缩和解压缩的数据。</li><li>LZ4 ：非常快速的压缩算法</li><li>LZHAM ：无损压缩数据库，压缩比率跟LZMA接近，但是解压缩速度却要快得多。</li><li>LZMA ：7z格式默认和通用的压缩方法。</li><li>LZMAT ：及其快速的实时无损数据压缩库</li><li>miniz：单一的C源文件，紧缩/膨胀压缩库，使用zlib兼容API，ZIP归档读写，PNG写方式。</li><li>Minizip：Zlib最新bug修复，支持PKWARE磁盘跨越，AES加密和IO缓冲。</li><li>Snappy ：快速压缩和解压缩</li><li>ZLib ：非常紧凑的数据流压缩库</li><li>ZZIPlib：提供ZIP归档的读权限。</li></ul><h3 id="并发性" tabindex="-1"><a class="header-anchor" href="#并发性"><span>并发性</span></a></h3><p>并发执行和多线程</p><ul><li>Boost.Compute ：用于OpenCL的C++GPU计算库</li><li>Bolt ：针对GPU进行优化的C++模板库</li><li>C++React ：用于C++11的反应性编程库</li><li>Intel TBB ：Intel线程构件块</li><li>Libclsph：基于OpenCL的GPU加速SPH流体仿真库</li><li>OpenCL ：并行编程的异构系统的开放标准</li><li>OpenMP：OpenMP API</li><li>Thrust ：类似于C++标准模板库的并行算法库</li><li>HPX ：用于任何规模的并行和分布式应用程序的通用C++运行时系统</li><li>VexCL ：用于OpenCL/CUDA 的C++向量表达式模板库。</li></ul><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h3><ul><li>C++ B-tree ：基于B树数据结构，实现命令内存容器的模板库</li><li>Hashmaps： C++中开放寻址哈希表算法的实现</li></ul><h3 id="密码学" tabindex="-1"><a class="header-anchor" href="#密码学"><span>密码学</span></a></h3><ul><li>Bcrypt ：一个跨平台的文件加密工具，加密文件可以移植到所有可支持的操作系统和处理器中。</li><li>BeeCrypt：</li><li>Botan： C++加密库</li><li>Crypto++：一个有关加密方案的免费的C++库</li><li>GnuPG： OpenPGP标准的完整实现</li><li>GnuTLS ：实现了SSL，TLS和DTLS协议的安全通信库</li><li>Libgcrypt</li><li>libmcrypt</li><li>LibreSSL：免费的SSL/TLS协议，属于2014 OpenSSL的一个分支</li><li>LibTomCrypt：一个非常全面的，模块化的，可移植的加密工具</li><li>libsodium：基于NaCI的加密库，固执己见，容易使用</li><li>Nettle 底层的加密库</li><li>OpenSSL ： 一个强大的，商用的，功能齐全的，开放源代码的加密库。</li><li>Tiny AES128 in C ：用C实现的一个小巧，可移植的实现了AES128ESB的加密算法</li></ul><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><p>数据库，SQL服务器，ODBC驱动程序和工具</p><ul><li>hiberlite ：用于Sqlite3的C++对象关系映射</li><li>Hiredis： 用于Redis数据库的很简单的C客户端库</li><li>LevelDB： 快速键值存储库</li><li>LMDB：符合数据库四大基本元素的嵌入键值存储</li><li>MySQL++：封装了MySql的C API的C++ 包装器</li><li>RocksDB：来自Facebook的嵌入键值的快速存储</li><li>SQLite：一个完全嵌入式的，功能齐全的关系数据库，只有几百KB，可以正确包含到你的项目中。</li></ul><h3 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h3><p>调试库， 内存和资源泄露检测，单元测试</p><ul><li>Boost.Test：Boost测试库</li><li>Catch：一个很时尚的，C++原生的框架，只包含头文件，用于单元测试，测试驱动开发和行为驱动开发。</li><li>CppUnit：由JUnit移植过来的C++测试框架</li><li>CTest：CMake测试驱动程序</li><li>googletest：谷歌C++测试框架</li><li>ig-debugheap：用于跟踪内存错误的多平台调试堆</li><li>libtap：用C语言编写测试</li><li>MemTrack —用于C++跟踪内存分配</li><li>microprofile- 跨平台的网络试图分析器</li><li>minUnit ：使用C写的迷你单元测试框架，只使用了两个宏</li><li>Remotery：用于web视图的单一C文件分析器</li><li>UnitTest++：轻量级的C++单元测试框架</li></ul><h3 id="游戏引擎" tabindex="-1"><a class="header-anchor" href="#游戏引擎"><span>游戏引擎</span></a></h3><ul><li>Cocos2d-x ：一个跨平台框架，用于构建2D游戏，互动图书，演示和其他图形应用程序。</li><li>Grit ：社区项目，用于构建一个免费的游戏引擎，实现开放的世界3D游戏。</li><li>Irrlicht ：C++语言编写的开源高性能的实时#D引擎</li><li>Polycode：C++实现的用于创建游戏的开源框架（与Lua绑定）。</li></ul><h3 id="图形用户界面" tabindex="-1"><a class="header-anchor" href="#图形用户界面"><span>图形用户界面</span></a></h3><ul><li>CEGUI ： 很灵活的跨平台GUI库</li><li>FLTK ：快速，轻量级的跨平台的C++GUI工具包。</li><li>GTK+： 用于创建图形用户界面的跨平台工具包</li><li>gtkmm ：用于受欢迎的GUI库GTK+的官方C++接口。</li><li>imgui：拥有最小依赖关系的立即模式图形用户界面</li><li>libRocket ：libRocket 是一个C++ HTML/CSS 游戏接口中间件</li><li>MyGUI ：快速，灵活，简单的GUI</li><li>Ncurses：终端用户界面</li><li>QCustomPlot ：没有更多依赖关系的Qt绘图控件</li><li>Qwt ：用户与技术应用的Qt 控件</li><li>QwtPlot3D ：功能丰富的基于Qt/OpenGL的C++编程库，本质上提供了一群3D控件</li><li>OtterUI ：OtterUI 是用于嵌入式系统和互动娱乐软件的用户界面开发解决方案</li><li>PDCurses 包含源代码和预编译库的公共图形函数库</li><li>wxWidgets C++库，允许开发人员使用一个代码库可以为widows， Mac OS X，Linux和其他平台创建应用程序</li></ul><h3 id="图形" tabindex="-1"><a class="header-anchor" href="#图形"><span>图形</span></a></h3><ul><li>bgfx：跨平台的渲染库</li><li>Cairo：支持多种输出设备的2D图形库</li><li>Horde3D 一个小型的3D渲染和动画引擎</li><li>magnum C++11和OpenGL 2D/3D 图形引擎</li><li>Ogre 3D 用C++编写的一个面向场景，实时，灵活的3D渲染引擎（并非游戏引擎）</li><li>OpenSceneGraph 具有高性能的开源3D图形工具包</li><li>Panda3D 用于3D渲染和游戏开发的框架，用Python和C++编写。</li><li>Skia 用于绘制文字，图形和图像的完整的2D图形库</li><li>urho3d 跨平台的渲染和游戏引擎。</li></ul><h3 id="图像处理" tabindex="-1"><a class="header-anchor" href="#图像处理"><span>图像处理</span></a></h3><ul><li>Boost.GIL：通用图像库</li><li>CImg ：用于图像处理的小型开源C++工具包</li><li>CxImage ：用于加载，保存，显示和转换的图像处理和转换库，可以处理的图片格式包括 BMP, JPEG, GIF, PNG, TIFF, MNG, ICO, PCX, TGA, WMF, WBMP, JBG, J2K。</li><li>FreeImage ：开源库，支持现在多媒体应用所需的通用图片格式和其他格式。</li><li>GDCM：Grassroots DICOM 库</li><li>ITK：跨平台的开源图像分析系统</li><li>Magick++：ImageMagick程序的C++接口</li><li>MagickWnd：ImageMagick程序的C++接口</li><li>OpenCV ： 开源计算机视觉类库</li><li>tesseract-ocr：OCR引擎</li><li>VIGRA ：用于图像分析通用C++计算机视觉库</li><li>VTK ：用于3D计算机图形学，图像处理和可视化的开源免费软件系统。</li></ul><h3 id="国际化" tabindex="-1"><a class="header-anchor" href="#国际化"><span>国际化</span></a></h3><ul><li>gettext ：GNU `gettext’</li><li>IBM ICU：提供Unicode 和全球化支持的C、C++ 和Java库</li><li>libiconv ：用于不同字符编码之间的编码转换库</li></ul><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>Json</span></a></h3><ul><li>frozen ： C/C++的Jason解析生成器</li><li>Jansson ：进行编解码和处理Jason数据的C语言库</li><li>jbson ：C++14中构建和迭代BSON data,和Json 文档的库</li><li>JeayeSON：非常健全的C++ JSON库，只包含头文件</li><li>JSON++ ： C++ JSON 解析器</li><li>json-parser：用可移植的ANSI C编写的JSON解析器，占用内存非常少</li><li>json11 ：一个迷你的C++11 JSON库</li><li>jute ：非常简单的C++ JSON解析器</li><li>ibjson：C语言中的JSON解析和打印库，很容易和任何模型集成。</li><li>libjson：轻量级的JSON库</li><li>PicoJSON：C++中JSON解析序列化，只包含头文件</li><li>qt-json ：用于JSON数据和 QVariant层次间的相互解析的简单类</li><li>QJson：将JSON数据映射到QVariant对象的基于Qt的库</li><li>RapidJSON： 用于C++的快速JSON 解析生成器，包含SAX和DOM两种风格的API</li><li>YAJL ：C语言中快速流JSON解析库</li></ul><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><ul><li>Boost.Log ：设计非常模块化，并且具有扩展性</li><li>easyloggingpp：C++日志库，只包含单一的头文件。</li><li>Log4cpp ：一系列C++类库，灵活添加日志到文件，系统日志，IDSA和其他地方。</li><li>templog：轻量级C++库，可以添加日志到你的C++应用程序中</li></ul><h3 id="机器学习" tabindex="-1"><a class="header-anchor" href="#机器学习"><span>机器学习</span></a></h3><ul><li>Caffe ：快速的神经网络框架</li><li>CCV ：以C语言为核心的现代计算机视觉库</li><li>mlpack ：可扩展的C++机器学习库</li><li>OpenCV：开源计算机视觉库</li><li>Recommender：使用协同过滤进行产品推荐/建议的C语言库。</li><li>SHOGUN：Shogun 机器学习工具</li><li>sofia-ml ：用于机器学习的快速增量算法套件</li></ul><h3 id="数学" tabindex="-1"><a class="header-anchor" href="#数学"><span>数学</span></a></h3><ul><li>Armadillo ：高质量的C++线性代数库，速度和易用性做到了很好的平衡。语法和MatlAB很相似</li><li>blaze：高性能的C++数学库，用于密集和稀疏算法。</li><li>ceres-solver ：来自谷歌的C++库，用于建模和解决大型复杂非线性最小平方问题。</li><li>CGal： 高效，可靠的集合算法集合</li><li>cml ：用于游戏和图形的免费C++数学库</li><li>Eigen ：高级C++模板头文件库，包括线性代数，矩阵，向量操作，数值解决和其他相关的算法。</li><li>GMTL：数学图形模板库是一组广泛实现基本图形的工具。</li><li>GMP：用于个高精度计算的C/C++库，处理有符号整数，有理数和浮点数。</li></ul><h3 id="多媒体" tabindex="-1"><a class="header-anchor" href="#多媒体"><span>多媒体</span></a></h3><ul><li>GStreamer ：构建媒体处理组件图形的库</li><li>LIVE555 Streaming Media ：使用开放标准协议(RTP/RTCP, RTSP, SIP) 的多媒体流库</li><li>libVLC ：libVLC (VLC SDK)媒体框架</li><li>QtAv：基于Qt和FFmpeg的多媒体播放框架，能够帮助你轻而易举地编写出一个播放器</li><li>SDL ：简单直控媒体层</li><li>SFML ：快速，简单的多媒体库</li></ul><h3 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h3><ul><li>ACE：C++面向对象网络变成工具包</li><li>Boost.Asio：用于网络和底层I/O编程的跨平台的C++库</li><li>Casablanca：C++ REST SDK</li><li>cpp-netlib：高级网络编程的开源库集合</li><li>Dyad.c：C语言的异步网络</li><li>libcurl :多协议文件传输库</li><li>Mongoose：非常轻量级的网络服务器</li><li>Muduo ：用于Linux多线程服务器的C++非阻塞网络库</li><li>net_skeleton ：C/C++的TCP 客户端/服务器库</li><li>nope.c ：基于C语言的超轻型软件平台，用于可扩展的服务器端和网络应用。 对于C编程人员，可以考虑node.js</li><li>Onion :C语言HTTP服务器库，其设计为轻量级，易使用。</li><li>POCO：用于构建网络和基于互联网应用程序的C++类库，可以运行在桌面，服务器，移动和嵌入式系统。</li><li>RakNet：为游戏开发人员提供的跨平台的开源C++网络引擎。</li><li>Tuf o ：用于Qt之上的C++构建的异步Web框架。</li><li>WebSocket++ ：基于C++/Boost Aiso的websocket 客户端/服务器库</li><li>ZeroMQ ：高速，模块化的异步通信库</li></ul><h3 id="物理学" tabindex="-1"><a class="header-anchor" href="#物理学"><span>物理学</span></a></h3><p>动力学仿真引擎</p><ul><li>Box2D：2D的游戏物理引擎。</li><li>Bullet ：3D的游戏物理引擎。</li><li>Chipmunk ：快速，轻量级的2D游戏物理库</li><li>LiquidFun：2D的游戏物理引擎</li><li>ODE ：开放动力学引擎-开源，高性能库，模拟刚体动力学。</li><li>ofxBox2d：Box2D开源框架包装器。</li><li>Simbody ：高性能C++多体动力学/物理库，模拟关节生物力学和机械系统，像车辆，机器人和人体骨骼。</li></ul><h3 id="机器人学" tabindex="-1"><a class="header-anchor" href="#机器人学"><span>机器人学</span></a></h3><ul><li>MOOS-IvP ：一组开源C++模块，提供机器人平台的自主权，尤其是自主的海洋车辆。</li><li>MRPT：移动机器人编程工具包</li><li>PCL ：点云库是一个独立的，大规模的开放项目，用于2D/3D图像和点云处理。</li><li>Robotics Library (RL)： 一个独立的C++库，包括机器人动力学，运动规划和控制。</li><li>RobWork：一组C++库的集合，用于机器人系统的仿真和控制。</li><li>ROS ：机器人操作系统，提供了一些库和工具帮助软件开发人员创建机器人应用程序。</li></ul><h3 id="科学计算" tabindex="-1"><a class="header-anchor" href="#科学计算"><span>科学计算</span></a></h3><ul><li>FFTW :用一维或者多维计算DFT的C语言库。</li><li>GSL：GNU科学库。</li></ul><h3 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本"><span>脚本</span></a></h3><ul><li>ChaiScript ：用于C++的易于使用的嵌入式脚本语言。</li><li>Lua ：用于配置文件和基本应用程序脚本的小型快速脚本引擎。</li><li>luacxx：用于创建Lua绑定的C++ 11 API</li><li>SWIG ：一个可以让你的C++代码链接到JavaScript，Perl，PHP，Python，Tcl和Ruby的包装器/接口生成器</li><li>V7：嵌入式的JavaScript 引擎。</li><li>V8 ：谷歌的快速JavaScript引擎，可以被嵌入到任何C++应用程序中。</li></ul><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h3><ul><li>Cap’n Proto ：快速数据交换格式和RPC系统。</li><li>cereal ：C++11 序列化库</li><li>FlatBuffers ：内存高效的序列化库</li><li>MessagePack ：C/C++的高效二进制序列化库，例如 JSON</li><li>protobuf ：协议缓冲，谷歌的数据交换格式。</li><li>protobuf-c ：C语言的协议缓冲实现</li><li>SimpleBinaryEncoding：用于低延迟应用程序的对二进制格式的应用程序信息的编码和解码。</li><li>Thrift ：高效的跨语言IPC/RPC，用于C++，Java，Python，PHP，C#和其它多种语言中，最初由Twitter开发。</li></ul><h3 id="视频" tabindex="-1"><a class="header-anchor" href="#视频"><span>视频</span></a></h3><ul><li>libvpx ：VP8/VP9编码解码SDK</li><li>FFmpeg ：一个完整的，跨平台的解决方案，用于记录，转换视频和音频流。</li><li>libde265 ：开放的h.265视频编解码器的实现。</li><li>OpenH264：开源H.364 编解码器。</li><li>Theora ：免费开源的视频压缩格式。</li></ul><h3 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机"><span>虚拟机</span></a></h3><ul><li>CarpVM：C中有趣的VM，让我们一起来看看这个。</li><li>MicroPython ：旨在实现单片机上Python3.x的实现</li><li>TinyVM：用纯粹的ANSI C编写的小型，快速，轻量级的虚拟机。</li></ul><h3 id="web应用框架" tabindex="-1"><a class="header-anchor" href="#web应用框架"><span>Web应用框架</span></a></h3><ul><li>Civetweb ：提供易于使用，强大的，C/C++嵌入式Web服务器，带有可选的CGI，SSL和Lua支持。</li><li>CppCMS ：免费高性能的Web开发框架（不是 CMS）.</li><li>Crow ：一个C++微型web框架（灵感来自于Python Flask）</li><li>Kore :使用C语言开发的用于web应用程序的超快速和灵活的web服务器/框架。</li><li>libOnion：轻量级的库，帮助你使用C编程语言创建web服务器。</li><li>QDjango：使用C++编写的，基于Qt库的web框架，试图效仿Django API，因此得此名。</li><li>Wt ：开发Web应用的C++库。</li></ul><h3 id="xml" tabindex="-1"><a class="header-anchor" href="#xml"><span>XML</span></a></h3><p>XML就是个垃圾，xml的解析很烦人，对于计算机它也是个灾难。这种糟糕的东西完全没有存在的理由了。-Linus Torvalds</p><ul><li>Expat ：用C语言编写的xml解析库</li><li>Libxml2 ：Gnome的xml C解析器和工具包</li><li>libxml++ ：C++的xml解析器</li><li>PugiXML ：用于C++的，支持XPath的轻量级，简单快速的XML解析器。</li><li>RapidXml ：试图创建最快速的XML解析器，同时保持易用性，可移植性和合理的W3C兼容性。</li><li>TinyXML ：简单小型的C++XML解析器，可以很容易地集成到其它项目中。</li><li>TinyXML2：简单快速的C++CML解析器，可以很容易集成到其它项目中。</li><li>TinyXML++：TinyXML的一个全新的接口，使用了C++的许多许多优势，模板，异常和更好的异常处理。</li><li>Xerces-C++ ：用可移植的C++的子集编写的XML验证解析器。</li></ul><h3 id="多项混杂" tabindex="-1"><a class="header-anchor" href="#多项混杂"><span>多项混杂</span></a></h3><p>一些有用的库或者工具，但是不适合上面的分类，或者还没有分类。</p><ul><li>C++ Format ：C++的小型，安全和快速格式化库</li><li>casacore ：从aips++ 派生的一系列C++核心库</li><li>cxx-prettyprint：用于C++容器的打印库</li><li>DynaPDF ：易于使用的PDF生成库</li><li>gcc-poison ：帮助开发人员禁止应用程序中的不安全的C/C++函数的简单的头文件。</li><li>googlemock：编写和使用C++模拟类的库</li><li>HTTP Parser ：C的http请求/响应解析器</li><li>libcpuid ：用于x86 CPU检测盒特征提取的小型C库</li><li>libevil ：许可证管理器</li><li>libusb：允许移动访问USB设备的通用USB库</li><li>PCRE：正则表达式C库，灵感来自于Perl中正则表达式的功能。</li><li>Remote Call Framework ：C++的进程间通信框架。</li><li>Scintilla ：开源的代码编辑控件</li><li>Serial Communication Library ：C++语言编写的跨平台，串口库。</li><li>SDS：C的简单动态字符串库</li><li>SLDR ：超轻的DNS解析器</li><li>SLRE： 超轻的正则表达式库</li><li>Stage ：移动机器人模拟器</li><li>VarTypes：C++/Qt4功能丰富，面向对象的管理变量的框架。</li><li>ZBar：‘条形码扫描器’库，可以扫描照片，图片和视频流中的条形码，并返回结果。</li><li>CppVerbalExpressions ：易于使用的C++正则表达式</li><li>QtVerbalExpressions：基于C++ VerbalExpressions 库的Qt库</li><li>PHP-CPP：使用C++来构建PHP扩展的库</li><li>Better String ：C的另一个字符串库，功能更丰富，但是没有缓冲溢出问题，还包含了一个C++包装器。</li></ul><h3 id="软件" tabindex="-1"><a class="header-anchor" href="#软件"><span>软件</span></a></h3><p>用于创建开发环境的软件</p><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器"><span>编译器</span></a></h3><p>C/C++编译器列表</p><ul><li>Clang :由苹果公司开发的</li><li>GCC：GNU编译器集合</li><li>Intel C++ Compiler ：由英特尔公司开发</li><li>LLVM ：模块化和可重用编译器和工具链技术的集合</li><li>Microsoft Visual C++ ：MSVC，由微软公司开发</li><li>Open WatCom ：Watcom，C，C++和Fortran交叉编译器和工具</li><li>TCC ：轻量级的C语言编译器</li></ul><h3 id="在线编译器" tabindex="-1"><a class="header-anchor" href="#在线编译器"><span>在线编译器</span></a></h3><p>在线C/C++编译器列表</p><ul><li>codepad ：在线编译器/解释器，一个简单的协作工具</li><li>CodeTwist：一个简单的在线编译器/解释器，你可以粘贴的C,C++或者Java代码，在线执行并查看结果</li><li>coliru ：在线编译器/shell， 支持各种C++编译器</li><li>Compiler Explorer：交互式编译器，可以进行汇编输出</li><li>CompileOnline：Linux上在线编译和执行C++程序</li><li>Ideone ：一个在线编译器和调试工具，允许你在线编译源代码并执行，支持60多种编程语言。</li></ul><h3 id="调试器" tabindex="-1"><a class="header-anchor" href="#调试器"><span>调试器</span></a></h3><p>C/C++调试器列表</p><ul><li>Comparison of debuggers ：来自维基百科的调试器列表</li><li>GDB ：GNU调试器</li><li>Valgrind：内存调试，内存泄露检测，性能分析工具。</li></ul><h3 id="集成开发环境-ide" tabindex="-1"><a class="header-anchor" href="#集成开发环境-ide"><span>集成开发环境（IDE）</span></a></h3><p>C/C++集成开发环境列表</p><ul><li>AppCode ：构建与JetBrains’ IntelliJ IDEA 平台上的用于Objective-C，C,C++，Java和Java开发的集成开发环境</li><li>CLion：来自JetBrains的跨平台的C/C++的集成开发环境</li><li>Code::Blocks ：免费C，C++和Fortran的集成开发环境</li><li>CodeLite ：另一个跨平台的免费的C/C++集成开发环境</li><li>Dev-C++：可移植的C/C++/C++11集成开发环境</li><li>Eclipse CDT：基于Eclipse平台的功能齐全的C和C++集成开发环境</li><li>Geany ：轻量级的快速，跨平台的集成开发环境。</li><li>IBM VisualAge ：来自IBM的家庭计算机集成开发环境。</li><li>Irony-mode：由libclang驱动的用于Emacs的C/C++微模式</li><li>KDevelop：免费开源集成开发环境</li><li>Microsoft Visual Studio ：来自微软的集成开发环境</li><li>NetBeans ：主要用于Java开发的的集成开发环境，也支持其他语言，尤其是PHP，C/C++和HTML5。</li><li>Qt Creator：跨平台的C++，Javascript和QML集成开发环境，也是Qt SDK的一部分。</li><li>rtags：C/C++的客户端服务器索引，用于 跟基于clang的emacs的集成</li><li>Xcode ：由苹果公司开发</li><li>YouCompleteMe：一个用于Vim的根据你敲的代码快速模糊搜索并进行代码补全的引擎。</li></ul><h3 id="构建系统" tabindex="-1"><a class="header-anchor" href="#构建系统"><span>构建系统</span></a></h3><ul><li>Bear ：用于为clang工具生成编译数据库的工具</li><li>Biicode：基于文件的简单依赖管理器。</li><li>CMake ：跨平台的免费开源软件用于管理软件使用独立编译的方法进行构建的过程。</li><li>CPM：基于CMake和Git的C++包管理器</li><li>FASTBuild：高性能，开源的构建系统，支持高度可扩展性的编译，缓冲和网络分布。</li><li>Ninja ：专注于速度的小型构建系统</li><li>Scons ：使用Python scipt 配置的软件构建工具</li><li>tundra ：高性能的代码构建系统，甚至对于非常大型的软件项目，也能提供最好的增量构建次数。</li><li>tup：基于文件的构建系统，用于后台监控变化的文件。</li></ul><h3 id="静态代码分析" tabindex="-1"><a class="header-anchor" href="#静态代码分析"><span>静态代码分析</span></a></h3><p>提高质量，减少瑕疵的代码分析工具列表</p><ul><li>Cppcheck ：静态C/C++代码分析工具</li><li>include-what-you-use ：使用clang进行代码分析的工具，可以#include在C和C++文件中。</li><li>OCLint ：用于C，C++和Objective-C的静态源代码分析工具，用于提高质量，减少瑕疵。</li><li>Clang Static Analyzer：查找C，C++和Objective-C程序bug的源代码分析工具</li><li>List of tools for static code analysis ：来自维基百科的静态代码分析工具列表</li></ul>',105)]))}const C=i(t,[["render",s],["__file","C库管理.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/BackEnd/C%E5%BA%93%E7%AE%A1%E7%90%86.html","title":"库管理","lang":"zh-CN","frontmatter":{"description":"库管理 模块库 一个纯C的模块，写： 源代码 - 纯头文件库 源代码 - 给cpp一起编译 静态库 动态库 比较这四种选择（参考：GPT4） 纯头文件库 选用：这种方式比较适合小型项目 优点：避免链接问题，对于模板类或函数非常有用 缺点：因为每次编译都会重新编译所有的代码，可能会导致编译时间增长 不封装直接给源代码和主函数一起编译 选用：这种方式比较粗...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/BackEnd/C%E5%BA%93%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"库管理"}],["meta",{"property":"og:description","content":"库管理 模块库 一个纯C的模块，写： 源代码 - 纯头文件库 源代码 - 给cpp一起编译 静态库 动态库 比较这四种选择（参考：GPT4） 纯头文件库 选用：这种方式比较适合小型项目 优点：避免链接问题，对于模板类或函数非常有用 缺点：因为每次编译都会重新编译所有的代码，可能会导致编译时间增长 不封装直接给源代码和主函数一起编译 选用：这种方式比较粗..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"库管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"库管理","slug":"库管理","link":"#库管理","children":[{"level":2,"title":"常用库","slug":"常用库","link":"#常用库","children":[{"level":3,"title":"标准库","slug":"标准库","link":"#标准库","children":[]},{"level":3,"title":"框架","slug":"框架","link":"#框架","children":[]},{"level":3,"title":"人工智能","slug":"人工智能","link":"#人工智能","children":[]},{"level":3,"title":"异步事件循环","slug":"异步事件循环","link":"#异步事件循环","children":[]},{"level":3,"title":"音频","slug":"音频","link":"#音频","children":[]},{"level":3,"title":"生态学","slug":"生态学","link":"#生态学","children":[]},{"level":3,"title":"压缩","slug":"压缩","link":"#压缩","children":[]},{"level":3,"title":"并发性","slug":"并发性","link":"#并发性","children":[]},{"level":3,"title":"容器","slug":"容器","link":"#容器","children":[]},{"level":3,"title":"密码学","slug":"密码学","link":"#密码学","children":[]},{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[]},{"level":3,"title":"调试","slug":"调试","link":"#调试","children":[]},{"level":3,"title":"游戏引擎","slug":"游戏引擎","link":"#游戏引擎","children":[]},{"level":3,"title":"图形用户界面","slug":"图形用户界面","link":"#图形用户界面","children":[]},{"level":3,"title":"图形","slug":"图形","link":"#图形","children":[]},{"level":3,"title":"图像处理","slug":"图像处理","link":"#图像处理","children":[]},{"level":3,"title":"国际化","slug":"国际化","link":"#国际化","children":[]},{"level":3,"title":"Json","slug":"json","link":"#json","children":[]},{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":3,"title":"机器学习","slug":"机器学习","link":"#机器学习","children":[]},{"level":3,"title":"数学","slug":"数学","link":"#数学","children":[]},{"level":3,"title":"多媒体","slug":"多媒体","link":"#多媒体","children":[]},{"level":3,"title":"网络","slug":"网络","link":"#网络","children":[]},{"level":3,"title":"物理学","slug":"物理学","link":"#物理学","children":[]},{"level":3,"title":"机器人学","slug":"机器人学","link":"#机器人学","children":[]},{"level":3,"title":"科学计算","slug":"科学计算","link":"#科学计算","children":[]},{"level":3,"title":"脚本","slug":"脚本","link":"#脚本","children":[]},{"level":3,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":3,"title":"视频","slug":"视频","link":"#视频","children":[]},{"level":3,"title":"虚拟机","slug":"虚拟机","link":"#虚拟机","children":[]},{"level":3,"title":"Web应用框架","slug":"web应用框架","link":"#web应用框架","children":[]},{"level":3,"title":"XML","slug":"xml","link":"#xml","children":[]},{"level":3,"title":"多项混杂","slug":"多项混杂","link":"#多项混杂","children":[]},{"level":3,"title":"软件","slug":"软件","link":"#软件","children":[]},{"level":3,"title":"编译器","slug":"编译器","link":"#编译器","children":[]},{"level":3,"title":"在线编译器","slug":"在线编译器","link":"#在线编译器","children":[]},{"level":3,"title":"调试器","slug":"调试器","link":"#调试器","children":[]},{"level":3,"title":"集成开发环境（IDE）","slug":"集成开发环境-ide","link":"#集成开发环境-ide","children":[]},{"level":3,"title":"构建系统","slug":"构建系统","link":"#构建系统","children":[]},{"level":3,"title":"静态代码分析","slug":"静态代码分析","link":"#静态代码分析","children":[]}]}]}],"git":{},"readingTime":{"minutes":21.59,"words":6478},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/C库管理.md","excerpt":"\\n<p>模块库</p>\\n<p>一个纯C的模块，写：</p>\\n<ul>\\n<li>源代码 - 纯头文件库</li>\\n<li>源代码 - 给cpp一起编译</li>\\n<li>静态库</li>\\n<li>动态库</li>\\n</ul>\\n<p>比较这四种选择（参考：GPT4）</p>\\n<ol>\\n<li>纯头文件库\\n<ul>\\n<li>选用：这种方式比较适合小型项目</li>\\n<li>优点：避免链接问题，对于模板类或函数非常有用</li>\\n<li>缺点：因为每次编译都会重新编译所有的代码，可能会导致<strong>编译时间</strong>增长</li>\\n</ul>\\n</li>\\n<li>不封装直接给源代码和主函数一起编译\\n<ul>\\n<li>选用：这种方式比较粗糙，一般适合比较小的项目，或者为了方便调试</li>\\n<li>优点：可以直接查看和修改源代码</li>\\n<li>缺点：如果源代码较多，<strong>编译时间</strong>可能会很长，也不利于代码的模块化管理</li>\\n</ul>\\n</li>\\n<li>静态库\\n<ul>\\n<li>选用：静态库在编译阶段会被连接到目标程序，增加了目标程序的体积。这种方式适合中大型的项目</li>\\n<li>优点：<strong>执行速度快</strong>，因为在编译阶段已经确定了所有函数的地址，不需要在运行时动态链接</li>\\n<li>缺点：如果库有更新，需要重新编译和链接目标程序</li>\\n</ul>\\n</li>\\n<li>动态库\\n<ul>\\n<li>选用：动态库在运行期间被加载，因此可以被多个程序共享，<strong>节约内存</strong></li>\\n<li>优点：支持版本控制，允许函数库在不需要重新连接应用程序的情况下进行升级或改变</li>\\n<li>缺点：运行速度相对较慢，因为需要在运行时解析函数地址</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/C库管理.md","value":{"title":"C库管理","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/C库管理.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{C as comp,h as data};
