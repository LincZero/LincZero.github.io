import{_ as s,c as a,e as t,o as p}from"./app-DOwvp1dV.js";const o={};function e(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="mermaid" tabindex="-1"><a class="header-anchor" href="#mermaid"><span>Mermaid</span></a></h1><p>资料：</p><ul><li>官网，https://mermaid.js.org/ <ul><li>文档，https://mermaid.js.org/intro/</li></ul></li></ul><h2 id="代码使用实例-anyblockconvert" tabindex="-1"><a class="header-anchor" href="#代码使用实例-anyblockconvert"><span>代码使用实例 - AnyBlockConvert</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ABConvert_IOEnum<span class="token punctuation">,</span> ABConvert<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">ABConvert_SpecSimp</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ABConvert&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ABConvertManager<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../ABConvertManager&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ListProcess<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">List_ListItem</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./abc_list&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>ABReg<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../ABReg&quot;</span>

<span class="token doc-comment comment">/**
 * 生成一个随机id
 * 
 * <span class="token keyword">@detail</span> 因为mermaid渲染块时需要一个id，不然多个mermaid块会发生冲突
 */</span>
<span class="token keyword">function</span> <span class="token function">getID</span><span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// mermaid相关</span>
<span class="token keyword">import</span> mermaid <span class="token keyword">from</span> <span class="token string">&quot;mermaid&quot;</span>
<span class="token keyword">import</span> mindmap <span class="token keyword">from</span> <span class="token string">&#39;@mermaid-js/mermaid-mindmap&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> initialize <span class="token operator">=</span> mermaid<span class="token punctuation">.</span><span class="token function">registerExternalDiagrams</span><span class="token punctuation">(</span><span class="token punctuation">[</span>mindmap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">mermaid_init</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> initialize<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 纯组合，后续用别名模块替代</span>
<span class="token keyword">const</span> abc_title2mindmap <span class="token operator">=</span> ABConvert<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&quot;title2mindmap&quot;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;标题到脑图&quot;</span><span class="token punctuation">,</span>
  process_param<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  process_return<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>el<span class="token punctuation">,</span>
  <span class="token function-variable function">process</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> header<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    content <span class="token operator">=</span> ListProcess<span class="token punctuation">.</span><span class="token function">title2list</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
    <span class="token function">list2mindmap</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
    <span class="token keyword">return</span> el
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> abc_list2mermaid <span class="token operator">=</span> ABConvert<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&quot;list2mermaid&quot;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;列表转mermaid流程图&quot;</span><span class="token punctuation">,</span>
  process_param<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  process_return<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>el<span class="token punctuation">,</span>
  <span class="token function-variable function">process</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> header<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">list2mermaid</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
    <span class="token keyword">return</span> el
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> abc_list2mindmap <span class="token operator">=</span> ABConvert<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&quot;list2mindmap&quot;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;列表转mermaid思维导图&quot;</span><span class="token punctuation">,</span>
  process_param<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  process_return<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>el<span class="token punctuation">,</span>
  <span class="token function-variable function">process</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> header<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">list2mindmap</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
    <span class="token keyword">return</span> el
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> abc_mermaid <span class="token operator">=</span> ABConvert<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">&quot;mermaid&quot;</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;新mermaid&quot;</span><span class="token punctuation">,</span>
  match<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^mermaid(\\((.*)\\))?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&quot;mermaid(graph TB)&quot;</span><span class="token punctuation">,</span>
  detail<span class="token operator">:</span> <span class="token string">&quot;由于需要兼容脑图，这里会使用插件内置的最新版mermaid&quot;</span><span class="token punctuation">,</span>
  process_param<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>text<span class="token punctuation">,</span>
  process_return<span class="token operator">:</span> ABConvert_IOEnum<span class="token punctuation">.</span>el<span class="token punctuation">,</span>
  <span class="token function-variable function">process</span><span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> header<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> matchs <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^mermaid(\\((.*)\\))?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchs<span class="token punctuation">)</span> <span class="token keyword">return</span> el
    <span class="token keyword">if</span> <span class="token punctuation">(</span>matchs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> content <span class="token operator">=</span> matchs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;\\n&quot;</span><span class="token operator">+</span>content

    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>el<span class="token operator">:</span>HTMLDivElement<span class="token punctuation">,</span> header<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> content<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token comment">//await mermaid_init()</span>
      <span class="token comment">//await mermaid.mermaidAPI.renderAsync(&quot;ab-mermaid-&quot;+getID(), content, (svgCode: string)=&gt;{</span>
      <span class="token comment">//  el.innerHTML = svgCode</span>
      <span class="token comment">//});</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> svg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> mermaid<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;ab-mermaid-&quot;</span><span class="token operator">+</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
      el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> svg
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> header<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    <span class="token keyword">return</span> el
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// ----------- list and mermaid ------------</span>

<span class="token doc-comment comment">/** 列表转mermaid流程图 */</span>
<span class="token keyword">function</span> <span class="token function">list2mermaid</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> div<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> list_itemInfo <span class="token operator">=</span> ListProcess<span class="token punctuation">.</span><span class="token function">list2data</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">data2mermaid</span><span class="token punctuation">(</span>list_itemInfo<span class="token punctuation">,</span> div<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 列表转mermaid思维导图 */</span>
<span class="token keyword">function</span> <span class="token function">list2mindmap</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> div<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> list_itemInfo <span class="token operator">=</span> ListProcess<span class="token punctuation">.</span><span class="token function">list2data</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">data2mindmap</span><span class="token punctuation">(</span>list_itemInfo<span class="token punctuation">,</span> div<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 列表数据转mermaid流程图
 * ~~@bug 旧版bug（未内置mermaid）会闪一下~~ 
 * 然后注意一下mermaid的(项)不能有空格，或非法字符。空格我处理掉了，字符我先不管。算了，还是不处理空格吧
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">data2mermaid</span><span class="token punctuation">(</span>
  list_itemInfo<span class="token operator">:</span> List_ListItem<span class="token punctuation">,</span> 
  div<span class="token operator">:</span> HTMLDivElement
<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> html_mode <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// @todo 暂时没有设置来切换这个开关</span>

  <span class="token keyword">let</span> list_line_content<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;graph LR&quot;</span><span class="token punctuation">]</span>
  <span class="token comment">// let list_line_content:string[] = html_mode?[&#39;&lt;pre class=&quot;mermaid&quot;&gt;&#39;, &quot;graph LR&quot;]:[&quot;\`\`\`mermaid&quot;, &quot;graph LR&quot;]</span>
  <span class="token keyword">let</span> prev_line_content <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
  <span class="token keyword">let</span> prev_level <span class="token operator">=</span> <span class="token number">999</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list_itemInfo<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list_itemInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token operator">&gt;</span>prev_level<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 向右正常加箭头</span>
      prev_line_content <span class="token operator">=</span> prev_line_content<span class="token operator">+</span><span class="token string">&quot; --&gt; &quot;</span><span class="token operator">+</span>list_itemInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token comment">//.replace(/ /g, &quot;_&quot;)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token comment">// 换行，并……</span>
      list_line_content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev_line_content<span class="token punctuation">)</span>
      prev_line_content <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment">// 回退到上一个比自己大的</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>list_itemInfo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token operator">&lt;</span>list_itemInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          prev_line_content <span class="token operator">=</span> list_itemInfo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token comment">//.replace(/ /g, &quot;_&quot;)</span>
          <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>prev_line_content<span class="token punctuation">)</span> prev_line_content<span class="token operator">=</span>prev_line_content<span class="token operator">+</span><span class="token string">&quot; --&gt; &quot;</span>  <span class="token comment">// 如果有比自己大的</span>
      prev_line_content<span class="token operator">=</span>prev_line_content<span class="token operator">+</span>list_itemInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token comment">//.replace(/ /g, &quot;_&quot;)</span>
    <span class="token punctuation">}</span>
    prev_level <span class="token operator">=</span> list_itemInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level
  <span class="token punctuation">}</span>
  list_line_content<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prev_line_content<span class="token punctuation">)</span>
  <span class="token comment">// list_line_content.push(html_mode?&quot;&lt;/pre&gt;&quot;:&quot;\`\`\`&quot;)</span>

  <span class="token keyword">let</span> text <span class="token operator">=</span> list_line_content<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

  <span class="token comment">//const child = new MarkdownRenderChild(div);</span>
  <span class="token comment">// div.addClass(&quot;markdown-rendered&quot;)</span>
  <span class="token comment">//MarkdownRenderer.renderMarkdown(text, div, &quot;&quot;, child);</span>
  
  <span class="token comment">//mermaid.mermaidAPI.renderAsync(&quot;ab-mermaid-&quot;+getID(), text, (svgCode:string)=&gt;{</span>
  <span class="token comment">//  div.innerHTML = svgCode</span>
  <span class="token comment">//})</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> svg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> mermaid<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;ab-mermaid-&quot;</span><span class="token operator">+</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>
  div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> svg
  <span class="token keyword">return</span> div
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 列表数据转mermaid思维导图 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">data2mindmap</span><span class="token punctuation">(</span>
  list_itemInfo<span class="token operator">:</span> List_ListItem<span class="token punctuation">,</span> 
  div<span class="token operator">:</span> HTMLDivElement
<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> list_newcontent<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> list_itemInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 等级转缩进，以及&quot;\\n&quot; 转化 &lt;br/&gt;</span>
    <span class="token keyword">let</span> str_indent <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> str_indent<span class="token operator">+=</span> <span class="token string">&quot; &quot;</span>
    list_newcontent<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str_indent<span class="token operator">+</span>item<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&lt;br/&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> newcontent <span class="token operator">=</span> <span class="token string">&quot;mindmap\\n&quot;</span><span class="token operator">+</span>list_newcontent<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">//mermaid.mermaidAPI.renderAsync(&quot;ab-mermaid-&quot;+getID(), newcontent, (svgCode:string)=&gt;{</span>
  <span class="token comment">//  div.innerHTML = svgCode</span>
  <span class="token comment">//})</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> svg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> mermaid<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&quot;ab-mermaid-&quot;</span><span class="token operator">+</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newcontent<span class="token punctuation">)</span>
  div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> svg
  <span class="token keyword">return</span> div
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const i=s(o,[["render",e],["__file","Mermaid.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/Mermaid.html","title":"Mermaid","lang":"zh-CN","frontmatter":{"description":"Mermaid 资料： 官网，https://mermaid.js.org/ 文档，https://mermaid.js.org/intro/ 代码使用实例 - AnyBlockConvert","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/Mermaid.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Mermaid"}],["meta",{"property":"og:description","content":"Mermaid 资料： 官网，https://mermaid.js.org/ 文档，https://mermaid.js.org/intro/ 代码使用实例 - AnyBlockConvert"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mermaid\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Mermaid","slug":"mermaid","link":"#mermaid","children":[{"level":2,"title":"代码使用实例 - AnyBlockConvert","slug":"代码使用实例-anyblockconvert","link":"#代码使用实例-anyblockconvert","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.32,"words":696},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/文字描述图表/Mermaid.md","excerpt":"\\n<p>资料：</p>\\n<ul>\\n<li>官网，https://mermaid.js.org/\\n<ul>\\n<li>文档，https://mermaid.js.org/intro/</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>代码使用实例 - AnyBlockConvert</h2>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>ABConvert_IOEnum<span class=\\"token punctuation\\">,</span> ABConvert<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">ABConvert_SpecSimp</span><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"./ABConvert\\"</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>ABConvertManager<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"../ABConvertManager\\"</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>ListProcess<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">List_ListItem</span><span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"./abc_list\\"</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>ABReg<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"../ABReg\\"</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * 生成一个随机id\\n * \\n * <span class=\\"token keyword\\">@detail</span> 因为mermaid渲染块时需要一个id，不然多个mermaid块会发生冲突\\n */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getID</span><span class=\\"token punctuation\\">(</span>length<span class=\\"token operator\\">=</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span>Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">random</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">substr</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span>length<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> Date<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">now</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">36</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// mermaid相关</span>\\n<span class=\\"token keyword\\">import</span> mermaid <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"mermaid\\"</span>\\n<span class=\\"token keyword\\">import</span> mindmap <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\'@mermaid-js/mermaid-mindmap\'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> initialize <span class=\\"token operator\\">=</span> mermaid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">registerExternalDiagrams</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>mindmap<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">mermaid_init</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">await</span> initialize<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 纯组合，后续用别名模块替代</span>\\n<span class=\\"token keyword\\">const</span> abc_title2mindmap <span class=\\"token operator\\">=</span> ABConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">factory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  id<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"title2mindmap\\"</span><span class=\\"token punctuation\\">,</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"标题到脑图\\"</span><span class=\\"token punctuation\\">,</span>\\n  process_param<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">,</span>\\n  process_return<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>el<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">process</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> header<span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    content <span class=\\"token operator\\">=</span> ListProcess<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">title2list</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token function\\">list2mindmap</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> el\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> abc_list2mermaid <span class=\\"token operator\\">=</span> ABConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">factory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  id<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"list2mermaid\\"</span><span class=\\"token punctuation\\">,</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"列表转mermaid流程图\\"</span><span class=\\"token punctuation\\">,</span>\\n  process_param<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">,</span>\\n  process_return<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>el<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">process</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> header<span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">list2mermaid</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> el\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> abc_list2mindmap <span class=\\"token operator\\">=</span> ABConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">factory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  id<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"list2mindmap\\"</span><span class=\\"token punctuation\\">,</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"列表转mermaid思维导图\\"</span><span class=\\"token punctuation\\">,</span>\\n  process_param<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">,</span>\\n  process_return<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>el<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">process</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> header<span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">list2mindmap</span><span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">,</span> el<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> el\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">const</span> abc_mermaid <span class=\\"token operator\\">=</span> ABConvert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">factory</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  id<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"mermaid\\"</span><span class=\\"token punctuation\\">,</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"新mermaid\\"</span><span class=\\"token punctuation\\">,</span>\\n  match<span class=\\"token operator\\">:</span> <span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^mermaid(\\\\((.*)\\\\))?$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">default</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"mermaid(graph TB)\\"</span><span class=\\"token punctuation\\">,</span>\\n  detail<span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"由于需要兼容脑图，这里会使用插件内置的最新版mermaid\\"</span><span class=\\"token punctuation\\">,</span>\\n  process_param<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>text<span class=\\"token punctuation\\">,</span>\\n  process_return<span class=\\"token operator\\">:</span> ABConvert_IOEnum<span class=\\"token punctuation\\">.</span>el<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token function-variable function\\">process</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> header<span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> matchs <span class=\\"token operator\\">=</span> content<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">match</span><span class=\\"token punctuation\\">(</span><span class=\\"token regex\\"><span class=\\"token regex-delimiter\\">/</span><span class=\\"token regex-source language-regex\\">^mermaid(\\\\((.*)\\\\))?$</span><span class=\\"token regex-delimiter\\">/</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>matchs<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> el\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>matchs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> content <span class=\\"token operator\\">=</span> matchs<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">+</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token operator\\">+</span>content\\n\\n    <span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span>el<span class=\\"token operator\\">:</span>HTMLDivElement<span class=\\"token punctuation\\">,</span> header<span class=\\"token operator\\">:</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> content<span class=\\"token operator\\">:</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">//await mermaid_init()</span>\\n      <span class=\\"token comment\\">//await mermaid.mermaidAPI.renderAsync(\\"ab-mermaid-\\"+getID(), content, (svgCode: string)=&gt;{</span>\\n      <span class=\\"token comment\\">//  el.innerHTML = svgCode</span>\\n      <span class=\\"token comment\\">//});</span>\\n      <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> svg <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> mermaid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ab-mermaid-\\"</span><span class=\\"token operator\\">+</span><span class=\\"token function\\">getID</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span>\\n      el<span class=\\"token punctuation\\">.</span>innerHTML <span class=\\"token operator\\">=</span> svg\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">,</span> header<span class=\\"token punctuation\\">,</span> content<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> el\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">// ----------- list and mermaid ------------</span>\\n\\n<span class=\\"token doc-comment comment\\">/** 列表转mermaid流程图 */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">list2mermaid</span><span class=\\"token punctuation\\">(</span>text<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> div<span class=\\"token operator\\">:</span> HTMLDivElement<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> list_itemInfo <span class=\\"token operator\\">=</span> ListProcess<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">list2data</span><span class=\\"token punctuation\\">(</span>text<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">data2mermaid</span><span class=\\"token punctuation\\">(</span>list_itemInfo<span class=\\"token punctuation\\">,</span> div<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/** 列表转mermaid思维导图 */</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">list2mindmap</span><span class=\\"token punctuation\\">(</span>text<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> div<span class=\\"token operator\\">:</span> HTMLDivElement<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> list_itemInfo <span class=\\"token operator\\">=</span> ListProcess<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">list2data</span><span class=\\"token punctuation\\">(</span>text<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">data2mindmap</span><span class=\\"token punctuation\\">(</span>list_itemInfo<span class=\\"token punctuation\\">,</span> div<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/** 列表数据转mermaid流程图\\n * ~~@bug 旧版bug（未内置mermaid）会闪一下~~ \\n * 然后注意一下mermaid的(项)不能有空格，或非法字符。空格我处理掉了，字符我先不管。算了，还是不处理空格吧\\n */</span>\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">data2mermaid</span><span class=\\"token punctuation\\">(</span>\\n  list_itemInfo<span class=\\"token operator\\">:</span> List_ListItem<span class=\\"token punctuation\\">,</span> \\n  div<span class=\\"token operator\\">:</span> HTMLDivElement\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> html_mode <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span>    <span class=\\"token comment\\">// @todo 暂时没有设置来切换这个开关</span>\\n\\n  <span class=\\"token keyword\\">let</span> list_line_content<span class=\\"token operator\\">:</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"graph LR\\"</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token comment\\">// let list_line_content:string[] = html_mode?[\'&lt;pre class=\\"mermaid\\"&gt;\', \\"graph LR\\"]:[\\"```mermaid\\", \\"graph LR\\"]</span>\\n  <span class=\\"token keyword\\">let</span> prev_line_content <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span>\\n  <span class=\\"token keyword\\">let</span> prev_level <span class=\\"token operator\\">=</span> <span class=\\"token number\\">999</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span>list_itemInfo<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>list_itemInfo<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>level<span class=\\"token operator\\">&gt;</span>prev_level<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 向右正常加箭头</span>\\n      prev_line_content <span class=\\"token operator\\">=</span> prev_line_content<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\" --&gt; \\"</span><span class=\\"token operator\\">+</span>list_itemInfo<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>content<span class=\\"token comment\\">//.replace(/ /g, \\"_\\")</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>                                <span class=\\"token comment\\">// 换行，并……</span>\\n      list_line_content<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>prev_line_content<span class=\\"token punctuation\\">)</span>\\n      prev_line_content <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span>\\n\\n      <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> j<span class=\\"token operator\\">=</span>i<span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">&gt;=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>             <span class=\\"token comment\\">// 回退到上一个比自己大的</span>\\n        <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>list_itemInfo<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>level<span class=\\"token operator\\">&lt;</span>list_itemInfo<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>level<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n          prev_line_content <span class=\\"token operator\\">=</span> list_itemInfo<span class=\\"token punctuation\\">[</span>j<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>content<span class=\\"token comment\\">//.replace(/ /g, \\"_\\")</span>\\n          <span class=\\"token keyword\\">break</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token punctuation\\">}</span>\\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>prev_line_content<span class=\\"token punctuation\\">)</span> prev_line_content<span class=\\"token operator\\">=</span>prev_line_content<span class=\\"token operator\\">+</span><span class=\\"token string\\">\\" --&gt; \\"</span>  <span class=\\"token comment\\">// 如果有比自己大的</span>\\n      prev_line_content<span class=\\"token operator\\">=</span>prev_line_content<span class=\\"token operator\\">+</span>list_itemInfo<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>content<span class=\\"token comment\\">//.replace(/ /g, \\"_\\")</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    prev_level <span class=\\"token operator\\">=</span> list_itemInfo<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>level\\n  <span class=\\"token punctuation\\">}</span>\\n  list_line_content<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>prev_line_content<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">// list_line_content.push(html_mode?\\"&lt;/pre&gt;\\":\\"```\\")</span>\\n\\n  <span class=\\"token keyword\\">let</span> text <span class=\\"token operator\\">=</span> list_line_content<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token comment\\">//const child = new MarkdownRenderChild(div);</span>\\n  <span class=\\"token comment\\">// div.addClass(\\"markdown-rendered\\")</span>\\n  <span class=\\"token comment\\">//MarkdownRenderer.renderMarkdown(text, div, \\"\\", child);</span>\\n  \\n  <span class=\\"token comment\\">//mermaid.mermaidAPI.renderAsync(\\"ab-mermaid-\\"+getID(), text, (svgCode:string)=&gt;{</span>\\n  <span class=\\"token comment\\">//  div.innerHTML = svgCode</span>\\n  <span class=\\"token comment\\">//})</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> svg <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> mermaid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ab-mermaid-\\"</span><span class=\\"token operator\\">+</span><span class=\\"token function\\">getID</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> text<span class=\\"token punctuation\\">)</span>\\n  div<span class=\\"token punctuation\\">.</span>innerHTML <span class=\\"token operator\\">=</span> svg\\n  <span class=\\"token keyword\\">return</span> div\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token doc-comment comment\\">/** 列表数据转mermaid思维导图 */</span>\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">data2mindmap</span><span class=\\"token punctuation\\">(</span>\\n  list_itemInfo<span class=\\"token operator\\">:</span> List_ListItem<span class=\\"token punctuation\\">,</span> \\n  div<span class=\\"token operator\\">:</span> HTMLDivElement\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">let</span> list_newcontent<span class=\\"token operator\\">:</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> item <span class=\\"token keyword\\">of</span> list_itemInfo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 等级转缩进，以及\\"\\\\n\\" 转化 &lt;br/&gt;</span>\\n    <span class=\\"token keyword\\">let</span> str_indent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span>item<span class=\\"token punctuation\\">.</span>level<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> str_indent<span class=\\"token operator\\">+=</span> <span class=\\"token string\\">\\" \\"</span>\\n    list_newcontent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>str_indent<span class=\\"token operator\\">+</span>item<span class=\\"token punctuation\\">.</span>content<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"&lt;br/&gt;\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">const</span> newcontent <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"mindmap\\\\n\\"</span><span class=\\"token operator\\">+</span>list_newcontent<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token comment\\">//mermaid.mermaidAPI.renderAsync(\\"ab-mermaid-\\"+getID(), newcontent, (svgCode:string)=&gt;{</span>\\n  <span class=\\"token comment\\">//  div.innerHTML = svgCode</span>\\n  <span class=\\"token comment\\">//})</span>\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> svg <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> mermaid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">render</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"ab-mermaid-\\"</span><span class=\\"token operator\\">+</span><span class=\\"token function\\">getID</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> newcontent<span class=\\"token punctuation\\">)</span>\\n  div<span class=\\"token punctuation\\">.</span>innerHTML <span class=\\"token operator\\">=</span> svg\\n  <span class=\\"token keyword\\">return</span> div\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/文字描述图表/Mermaid.md","value":{"title":"Mermaid","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/文字描述图表/Mermaid.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,u as data};
