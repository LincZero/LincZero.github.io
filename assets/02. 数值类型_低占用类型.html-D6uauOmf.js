import{_ as s,e as a,g as t,o as n}from"./app-OgO1lqgf.js";const l={};function h(e,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="数值类型-低内存类型-java-lang包" tabindex="-1"><a class="header-anchor" href="#数值类型-低内存类型-java-lang包"><span>数值类型+低内存类型（java.lang包）</span></a></h1><h2 id="泛操作" tabindex="-1"><a class="header-anchor" href="#泛操作"><span>泛操作</span></a></h2><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><h4 id="加减乘除余" tabindex="-1"><a class="header-anchor" href="#加减乘除余"><span>+-*/%，加减乘除余</span></a></h4><p>与Python区别</p><ul><li>Java/C/C++：当参与/运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法</li><li>Python：<code>/</code>必然是浮点除法，<code>//</code>是整除法</li></ul><p>扩展小知识</p><blockquote><p>strictfp关键字严格计算，禁止对中间计算结果采用扩展的精度，能使浮点运算在所有计算机上运行的结果都完全一样</p></blockquote><h4 id="骚操作" tabindex="-1"><a class="header-anchor" href="#骚操作"><span>骚操作</span></a></h4><p>二元运算符改一元运算符</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运算类" tabindex="-1"><a class="header-anchor" href="#运算类"><span>运算类</span></a></h3><h4 id="math类" tabindex="-1"><a class="header-anchor" href="#math类"><span>Math类</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.Math.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 加了的话就不用再加前缀 “Math.”</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    </span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">double</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> y = Math.sqrt(x)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 开方</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, a);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 幂</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">floorMod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, a);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 向下取余（n%2求余有个bug是计算负数时会求得0/-1，不方便判断奇偶）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">round</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 圆整</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">常用的其他方法 {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sin</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cos</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">tan</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">atan</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">atan2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exp</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">log</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">log10</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PI</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">E</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展</p><blockquote><p>println方法和sqrt方法存在微小的差异。println方法处理System.out对象。但是，Math类中的sqrt方法处理的不是对象，这样的方法被称为静态方法。</p></blockquote><h4 id="strictmath类" tabindex="-1"><a class="header-anchor" href="#strictmath类"><span>StrictMath类</span></a></h4><p>在Math类中，为了达到最快的性能，所有的方法都使用计算机浮点单元中的例程。如果得到一个完全可预测的结果比运行速度更重要的话，那么就应该使用StrictMath类。</p><p>它使用“自由发布的Math库”（fdlibm）实现算法，以确保在所有平台上得到相同的结果。</p><h2 id="整型" tabindex="-1"><a class="header-anchor" href="#整型"><span>整型</span></a></h2><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4 字节</td><td>-21亿 ~ 21亿</td></tr><tr><td>short</td><td>2 字节</td><td>-32768 ~ 32768</td></tr><tr><td>long</td><td>8 字节</td><td>-920亿亿 ~ 920亿亿</td></tr><tr><td>byte</td><td>1 字节</td><td>-128 ~ 127</td></tr></tbody></table><p>表示进制数：</p><ul><li>十六进制：有一个前缀0x或0X（如0xCAFE）</li><li>八进制：有一个前缀0，例如，010对应八进制中的8。很显然，八进制表示法比较容易混淆，所以建议最好不要使用八进制常数</li><li>二进制：加上前缀0b或0B就可以写二进制数。例如，0b1001就是9（从Java 7开始）</li></ul><p>补充</p><ul><li><mark>与C/C++不同</mark><ul><li>C/C++：分有符号数和无符号数</li><li>Java：没有任何无符号（unsigned）</li><li>Python3：数字的类型更少（四种：int、float、bool、complex（复数））<br> 其中int为变长类型，理论可以无限大。甚至没有long这种类型（python2依然有long类型）</li></ul></li><li>字面两下划线<br> 从Java 7开始，还可以为数字字面量加下划线。这些下划线只是为了让人更易读。Java编译器会去除这些下划线。<br> 如用1_000_000（或0b1111_0100_0010_0100_0000）表示一百万。</li></ul><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h2><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>大约 +-3.40282347E+38F（有效位数6~7位）</td></tr><tr><td>double</td><td>8 字节</td><td>大约 +-1.79769313486231570E+308（有效位数为15位）</td></tr></tbody></table><p>float类型的数值有一个后缀F或f（例如，3.14F）。没有后缀F的浮点数值（如3.14）默认为double类型。当然，也可以在浮点数值后面添加后缀D或d（例如，3.14D）。</p><p>浮点数值不适用于无法接受舍入误差的金融计算中。如果在数值计算中不允许有任何舍入误差，就应该使用<code>BigDecimal类</code></p><h2 id="char类型" tabindex="-1"><a class="header-anchor" href="#char类型"><span>char类型</span></a></h2><p>存储大小为一字节</p><p>char类型原本用于表示单个字符。不过，现在情况已经有所变化。<br> 如今，有些Unicode字符可以用一个char值描述，另外一些Unicode字符则需要两个char值</p><p>用单引号括起来。例如：&#39;A&#39;是编码值为65所对应的字符常量。</p><p>转义字符表</p><table><thead><tr><th>转义序列</th><th>名称</th><th>Unicode值</th></tr></thead><tbody><tr><td>\\b</td><td>退格</td><td>\\u0008</td></tr><tr><td>\\t</td><td>制表</td><td>\\u0009</td></tr><tr><td>\\n</td><td>换行</td><td>\\u000a</td></tr><tr><td>\\r</td><td>回车</td><td>\\u000d</td></tr><tr><td>&quot;</td><td>双引号</td><td>\\u0022</td></tr><tr><td>&#39;</td><td>单引号</td><td>\\u0027</td></tr><tr><td>\\</td><td>反斜杠</td><td>\\u005c</td></tr></tbody></table><p>注意</p><blockquote><p>Unicode转义序列会在解析代码之前得到处理。<br> 例如，&quot;\\u0022+\\u0022&quot;并不是一个由引号（U+0022）包围加号构成的字符串。<br> 实际上，\\u0022会在解析之前转换为&quot;，这会得到&quot;&quot;+&quot;&quot;，也就是一个空串</p></blockquote><h2 id="boolean类型" tabindex="-1"><a class="header-anchor" href="#boolean类型"><span>boolean类型</span></a></h2><p>有两个值：false和true，用来判定逻辑条件。整型值和布尔值之间不能进行相互转换。</p><p>在C++中，数值甚至指针可以代替boolean值。值0相当于布尔值false，非0值相当于布尔值true。在Java中则不是这样。</p><p>因此，Java程序员不会遇到下述麻烦：<code>if(x=0)</code></p><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符"><span>布尔运算符</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &gt;=</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">三元运算符 condition </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> exp1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> exp2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// and</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// or</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// not</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// xor 异或</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 右移，用符号位填充高位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;&lt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 左移</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 右移，用0填充高位，这与&gt;&gt;不同，它会用符号位填充高位</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>与C/C++不同</mark></p><blockquote><ul><li>C/C++：不能保证&gt;&gt;是完成算术移位（扩展符号位）还是逻辑移位（填充0）</li><li>Java：消除了这种不确定性，这与java中没有无符号类型有关。<code>&gt;&gt;</code>用符号位填充高位，<code>&gt;&gt;&gt;</code>用0填充高位</li></ul></blockquote><h3 id="括号与运算符级别" tabindex="-1"><a class="header-anchor" href="#括号与运算符级别"><span>括号与运算符级别</span></a></h3><p>[省略]</p><p><mark>与C/C++不同</mark>：Java不使用逗号运算符。不过，可以在for语句的第1和第3部分中使用逗号分隔表达式列表</p><h1 id="数值类型-低内存类型-其他包" tabindex="-1"><a class="header-anchor" href="#数值类型-低内存类型-其他包"><span>数值类型+低内存类型（其他包）</span></a></h1><h2 id="biginteger-bigdecimal" tabindex="-1"><a class="header-anchor" href="#biginteger-bigdecimal"><span>BigInteger+BigDecimal</span></a></h2><p>API: <code>java.math.BigInteger 1.1</code>、<code>java.math.BigDecimal</code></p><ul><li>BigInteger类实现了任意精度的整数运算</li><li>BigDecimal实现了任意精度的浮点数运算</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> BigInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						// 类型转换</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">									// c = a+b，不能用运算符+了</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> d </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">multiply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">BigInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// d = c*(b+2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>与C/C++不同</mark>：运算符重载</p><ul><li>Java没有提供运算符重载功能。程序员无法重定义+和*运算符，使其应用于BigInteger类的add和multiply运算</li></ul>`,59)]))}const p=s(l,[["render",h],["__file","02. 数值类型_低占用类型.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 数值类型+低内存类型（java.lang包） 泛操作 运算符 +-*/%，加减乘除余 与Python区别 Java/C/C++：当参与/运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法 Python：/必然是浮点除法，//是整除法 扩展小知识 strictfp关键字严格计算，禁止对中间计算结果采用扩展的精度，能使浮点运算在所...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 数值类型+低内存类型（java.lang包） 泛操作 运算符 +-*/%，加减乘除余 与Python区别 Java/C/C++：当参与/运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法 Python：/必然是浮点除法，//是整除法 扩展小知识 strictfp关键字严格计算，禁止对中间计算结果采用扩展的精度，能使浮点运算在所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02. 数值类型+低占用类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>数值类型+低内存类型（java.lang包）</h1>\\n<h2>泛操作</h2>\\n<h3>运算符</h3>\\n<h4>+-*/%，加减乘除余</h4>\\n<p>与Python区别</p>\\n<ul>\\n<li>Java/C/C++：当参与/运算的两个操作数都是整数时，表示整数除法；否则，表示浮点除法</li>\\n<li>Python：<code>/</code>必然是浮点除法，<code>//</code>是整除法</li>\\n</ul>\\n<p>扩展小知识</p>\\n<blockquote>\\n<p>strictfp关键字严格计算，禁止对中间计算结果采用扩展的精度，能使浮点运算在所有计算机上运行的结果都完全一样</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02. 数值类型+低占用类型.md","value":{"title":"02. 数值类型+低占用类型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02. 数值类型+低占用类型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
