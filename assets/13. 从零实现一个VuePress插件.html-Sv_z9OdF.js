import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as s,b as n,d as t,e}from"./app-0C_mIF8a.js";const l="/assets/7c4b9903d0324ed40f2373d3b5edacd2-W3XmLDn9.gif",u="/assets/image-20240921193458681-Cao5lWo-.png",r="/assets/a2e2342eb052f8b7a09af0827d95c13b-BZn9uu3R.gif",d={},k=e('<h1 id="从零实现一个vuepress插件" tabindex="-1"><a class="header-anchor" href="#从零实现一个vuepress插件"><span>从零实现一个VuePress插件</span></a></h1><p>参考：https://github.com/mqyqingfeng/Blog/issues/250</p><p>在搭建 VuePress 博客的过程中，也并不是所有的插件都能满足需求，所以本篇我们以实现一个代码复制插件为例，教大家如何从零实现一个 VuePress 插件。</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><h3 id="本地插件、社区插件" tabindex="-1"><a class="header-anchor" href="#本地插件、社区插件"><span>本地插件、社区插件</span></a></h3><p>（这里应当<strong>先读</strong>：https://v2.vuepress.vuejs.org/zh/guide/plugin.html#%E5%AE%98%E6%96%B9%E6%8F%92%E4%BB%B6）</p>',6),v={href:"https://vuepress.vuejs.org/zh/plugin/writing-a-plugin.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://v2.vuepress.vuejs.org/zh/guide/plugin.html#%E6%9C%AC%E5%9C%B0%E6%8F%92%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},b=e(`<blockquote><p>推荐你直接将 配置文件 作为插件使用，因为几乎所有的插件 API 都可以在配置文件中使用，这在绝大多数场景下都更为方便。</p></blockquote><blockquote><p>但是如果你在配置文件中要做的事情太多了，最好还是将它们提取到单独的插件中，然后通过设置绝对路径或者通过 require 来使用它们：</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./path/to/your-plugin.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./another-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那就让我们开始吧！</p><h3 id="插件设计" tabindex="-1"><a class="header-anchor" href="#插件设计"><span>插件设计</span></a></h3><p>现在我们可以设想下我们的代码复制插件的效果了，我想要实现的效果是：</p><p>在代码块的右下角有一个 Copy 文字按钮，点击后文字变为 Copied！然后一秒后文字重新变为 Copy，而代码块里的代码则在点击的时候复制到剪切板中，期望的表现效果如下：</p><figure><img src="`+l+`" alt="7c4b9903d0324ed40f2373d3b5edacd2" tabindex="0" loading="lazy"><figcaption>7c4b9903d0324ed40f2373d3b5edacd2</figcaption></figure><h2 id="开始开发" tabindex="-1"><a class="header-anchor" href="#开始开发"><span>开始开发</span></a></h2><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h3><p>我们在 <code>.vuepress</code> 文件夹下新建一个 <code>vuepress-plugin-code-copy</code> 的文件夹，用于存放插件相关的代码，然后命令行进入到该文件夹，执行 <code>npm init</code>，创建 <code>package.json</code>，此时文件的目录为：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span>vuepress
├─ vuepress<span class="token operator">-</span>plugin<span class="token operator">-</span>code<span class="token operator">-</span>copy 
│  └─ <span class="token keyword">package</span><span class="token punctuation">.</span>json
└─ config<span class="token punctuation">.</span>js        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),g=s("code",null,"vuepress-plugin-code-copy",-1),h=s("code",null,"index.js",-1),y={href:"https://vuepress.vuejs.org/zh/plugin/writing-a-plugin.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x={href:"https://vuepress.vuejs.org/zh/plugin/option-api.html#name",target:"_blank",rel:"noopener noreferrer"},_={href:"https://vuepress.vuejs.org/zh/plugin/life-cycle.html#ready",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-code-copy&#39;</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们运行下 <code>yarn run docs:dev</code>，可以在运行过程中看到我们的插件名字和打印结果：</p><figure><img src="`+u+'" alt="image-20240921193458681" tabindex="0" loading="lazy"><figcaption>image-20240921193458681</figcaption></figure><h3 id="检测代码块" tabindex="-1"><a class="header-anchor" href="#检测代码块"><span>检测代码块</span></a></h3><p>如果是在 Vue 组件中，我们很容易实现这个效果，在根组件 <code>mounted</code> 或者 <code>updated</code>的时候，使用 <code>document.querySelector</code> 获取所有的代码块，插入一个按钮元素，再在按钮元素上绑定点击事件，当触发点击事件的时候，代码复制到剪切板，然后修改文字，1s 后再修改下文字。</p>',5),w={href:"https://vuepress.vuejs.org/zh/plugin/option-api.html#clientrootmixin",target:"_blank",rel:"noopener noreferrer"},B=e(`<blockquote><p>指向 mixin 文件的路径，它让你可以控制根组件的生命周期</p></blockquote><p>看下示例代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 插件的入口</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  clientRootMixin<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;mixin.js&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// mixin.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这不就是我们需要的吗？那我们动手吧，修改 <code>index.js</code>的内容为：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-code-copy&#39;</span><span class="token punctuation">,</span>
        clientRootMixin<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;clientRootMixin.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>vuepress-plugin-code-copy</code>下新建一个 <code>clientRootMixin.js</code>文件，代码写入：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div[class*=&quot;language-&quot;] pre&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
								<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;one code block&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新下浏览器里的页面，然后查看打印：</p><blockquote><p>打印结果：(26) one code block</p></blockquote><h3 id="增加按钮元素" tabindex="-1"><a class="header-anchor" href="#增加按钮元素"><span>增加按钮元素</span></a></h3><p>接下来就要思考如何写入按钮元素了。</p><p>当然我们可以使用原生 JavaScript 一点点的创建元素，然后插入其中，但我们其实是在一个支持 Vue 语法的项目里，其实我们完全可以创建一个 Vue 组件，然后将组件的实例挂载到元素上。那用什么方法挂载呢？</p>`,13),C={href:"https://github.com/mqyqingfeng/Blog/issues/vuepress.vuejs.org",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"Vue.extend",-1),A=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 要挂载的元素</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;mount-point&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 创建构造器</span>
<span class="token keyword">var</span> Profile <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  template<span class="token operator">:</span> <span class="token string">&#39;&lt;p&gt;{{firstName}} {{lastName}} aka {{alias}}&lt;/p&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      firstName<span class="token operator">:</span> <span class="token string">&#39;Walter&#39;</span><span class="token punctuation">,</span>
      lastName<span class="token operator">:</span> <span class="token string">&#39;White&#39;</span><span class="token punctuation">,</span>
      alias<span class="token operator">:</span> <span class="token string">&#39;Heisenberg&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 创建 Profile 实例，并挂载到一个元素上。</span>
<span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#mount-point&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>// 结果为:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Walter White aka Heisenberg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="封装vue组件" tabindex="-1"><a class="header-anchor" href="#封装vue组件"><span>封装Vue组件</span></a></h3><p>那接下来，我们就创建一个 Vue 组件，然后通过 <code>Vue.extend</code> 方法，挂载到每个代码块元素中。</p><p>在 <code>vuepress-plugin-code-copy</code>下新建一个 <code>CodeCopy.vue</code> 文件，写入代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;code-copy-btn&quot;</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">click</span></span><span class="token operator">=</span><span class="token string">&quot;copyToClipboard&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> buttonText <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            buttonText<span class="token operator">:</span> <span class="token string">&#39;Copy&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">copyToClipboard</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setClipboard</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">setClipboard</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                    cb<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> copyelement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>copyelement<span class="token punctuation">)</span>
                copyelement<span class="token punctuation">.</span>value <span class="token operator">=</span> code
                copyelement<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;Copy&#39;</span><span class="token punctuation">)</span>
                copyelement<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>buttonText <span class="token operator">=</span> <span class="token string">&#39;Copied!&#39;</span>

            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>buttonText <span class="token operator">=</span> <span class="token string">&#39;Copy&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span>
<span class="token punctuation">.</span>code<span class="token operator">-</span>copy<span class="token operator">-</span>btn <span class="token punctuation">{</span>
    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>
    bottom<span class="token operator">:</span> 10px<span class="token punctuation">;</span>
    right<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">.</span>5px<span class="token punctuation">;</span>
    opacity<span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">;</span>
    cursor<span class="token operator">:</span> pointer<span class="token punctuation">;</span>
    font<span class="token operator">-</span>size<span class="token operator">:</span> 14px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">.</span>code<span class="token operator">-</span>copy<span class="token operator">-</span>btn<span class="token operator">:</span>hover <span class="token punctuation">{</span>
    opacity<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该组件实现了按钮的样式和点击时将代码写入剪切版的效果，整体代码比较简单，就不多叙述了。</p><p>我们修改一下 <code>clientRootMixin.js</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> CodeCopy <span class="token keyword">from</span> <span class="token string">&#39;./CodeCopy.vue&#39;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 防止阻塞</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;div[class*=&quot;language-&quot;] pre&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>el <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              	<span class="token comment">// 防止重复写入</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;code-copy-added&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
                <span class="token keyword">let</span> ComponentClass <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>CodeCopy<span class="token punctuation">)</span>
                <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                instance<span class="token punctuation">.</span>code <span class="token operator">=</span> el<span class="token punctuation">.</span>innerText
                instance<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;code-copy-added&#39;</span><span class="token punctuation">)</span>
                el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里注意两点，第一是我们通过 <code>el.innerText</code> 获取要复制的代码内容，然后写入到实例的 <code>code</code> 属性，在组件中，我们是通过 <code>this.code</code>获取的。</p>`,12),V=s("code",null,"$mount(element)",-1),q=s("code",null,"$mount()",-1),j=s("code",null,"instance.$mount()",-1),T=s("code",null,"instance.$el",-1),M=s("code",null,"appendChild",-1),z=s("code",null,"$el",-1),D={href:"https://cn.vuejs.org/v2/api/index.html#el",target:"_blank",rel:"noopener noreferrer"},R=e(`<p>此时，我们的文件目录如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">.</span>vuepress
├─ vuepress<span class="token operator">-</span>plugin<span class="token operator">-</span>code<span class="token operator">-</span>copy 
│  ├─ CodeCopy<span class="token punctuation">.</span>vue
│  ├─ clientRootMixin<span class="token punctuation">.</span>js
│  ├─ index<span class="token punctuation">.</span>js
│  └─ <span class="token keyword">package</span><span class="token punctuation">.</span>json
└─ config<span class="token punctuation">.</span>js   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，其实我们就已经实现了代码复制的功能。</p><h2 id="扩展-插件选项" tabindex="-1"><a class="header-anchor" href="#扩展-插件选项"><span>扩展 - 插件选项</span></a></h2><p>有的时候，为了增加插件的可拓展性，会允许配置可选项，就比如我们不希望按钮的文字是 Copy，而是中文的「复制」，复制完后，文字变为 「已复制！」，该如何实现呢？</p><p>前面讲到，我们的 <code>index.js</code>导出的函数，第一个参数就是 options 参数：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-code-copy&#39;</span><span class="token punctuation">,</span>
        clientRootMixin<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;clientRootMixin.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <code>config.js</code>先写入需要用到的选项：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./vuepress-plugin-code-copy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;copybuttonText&#39;</span><span class="token operator">:</span> <span class="token string">&#39;复制&#39;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&#39;copiedButtonText&#39;</span><span class="token operator">:</span> <span class="token string">&#39;已复制！&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们 <code>index.js</code>中通过 <code>options</code>参数可以接收到我们在 <code>config.js</code> 写入的选项，但我们怎么把这些参数传入 <code>CodeCopy.vue</code> 文件呢？</p>`,10),N={href:"https://vuepress.vuejs.org/zh/plugin/option-api.html#define",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"index.js",-1),I=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;vuepress-plugin-code-copy&#39;</span><span class="token punctuation">,</span>
        define<span class="token operator">:</span> <span class="token punctuation">{</span>
            copybuttonText<span class="token operator">:</span> options<span class="token punctuation">.</span>copybuttonText <span class="token operator">||</span> <span class="token string">&#39;copy&#39;</span><span class="token punctuation">,</span>
            copiedButtonText<span class="token operator">:</span> options<span class="token punctuation">.</span>copiedButtonText <span class="token operator">||</span> <span class="token string">&quot;copied!&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        clientRootMixin<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;clientRootMixin.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经写入了两个全局变量，组件里怎么使用呢？答案是直接使用！</p><p>我们修改下 <code>CodeCopy.vue</code> 的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ...</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            buttonText<span class="token operator">:</span> copybuttonText
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">copyToClipboard</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setClipboard</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">setClipboard</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
                    cb<span class="token punctuation">,</span>
                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> copyelement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>copyelement<span class="token punctuation">)</span>
                copyelement<span class="token punctuation">.</span>value <span class="token operator">=</span> code
                copyelement<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;Copy&#39;</span><span class="token punctuation">)</span>
                copyelement<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>buttonText <span class="token operator">=</span> copiedButtonText

            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>buttonText <span class="token operator">=</span> copybuttonText
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的效果如下：</p><figure><img src="`+r+'" alt="a2e2342eb052f8b7a09af0827d95c13b" tabindex="0" loading="lazy"><figcaption>a2e2342eb052f8b7a09af0827d95c13b</figcaption></figure><h2 id="代码参考" tabindex="-1"><a class="header-anchor" href="#代码参考"><span>代码参考</span></a></h2><p>完整的代码查看：https://github.com/mqyqingfeng/Blog/tree/master/demos/VuePress/vuepress-plugin-code-copy</p>',8),L=s("code",null,"Vuepress Code Copy Plugin",-1),$={href:"https://github.com/znicholasbrown/vuepress-plugin-code-copy",target:"_blank",rel:"noopener noreferrer"};function W(S,O){const a=o("ExternalLinkIcon");return c(),i("div",null,[k,s("p",null,[n("开发插件第一个要解决的问题就是如何本地开发，我们查看 VuePress 1.0 官方文档的「"),s("a",v,[n("开发插件"),t(a)]),n("」章节，并没有找到解决方案，但在 VuePress 2.0 官方文档的「"),s("a",m,[n("本地插件"),t(a)]),n("」里，却有写道：")]),b,s("p",null,[n("我们在 "),g,n("下新建一个 "),h,n(" 文件，参照"),s("a",y,[n("官方文档插件示例"),t(a)]),n("中的写法，我们使用返回对象的函数形式，这个函数接受插件的配置选项作为第一个参数、包含编译期上下文的 ctx 对象作为第二个参数：")]),f,s("p",null,[n("再参照官方文档 Option API 中的 "),s("a",x,[n("name"),t(a)]),n("，以及生命周期函数中的 "),s("a",_,[n("ready 钩子"),t(a)]),n("，我们写一个初始的测试代码：")]),E,s("p",null,[n("那 VuePress 插件有方法可以控制根组件的生命周期吗？我们查阅下 VuePress 官方文档的 "),s("a",w,[n("Option API"),t(a)]),n("，可以发现 VuePress 提供了一个 clientRootMixin 方法：")]),B,s("p",null,[n("我们可以在 Vue 的"),s("a",C,[n("全局 API "),t(a)]),n("里，找到 "),P,n("API，看一下使用示例：")]),A,s("p",null,[n("第二是我们没有使用 "),V,n("，直接传入一个要挂载的节点元素，这是因为 "),q,n(" 的挂载会清空目标元素，但是这里我们需要添加到元素中，所以我们在执行 "),j,n("后，通过 "),T,n("获取了实例元素，然后再将其 "),M,n(" 到每个代码块中。关于 "),z,n("的使用可以参考官方文档的 "),s("a",D,[n("el 章节"),t(a)]),n(" 。")]),R,s("p",null,[n("我们再翻下 VuePress 提供的 Option API，可以发现有一个 "),s("a",N,[n("define API"),t(a)]),n("，其实这个 define 属性就是定义我们插件内部使用的全局变量。我们修改下 "),F,n("：")]),I,s("p",null,[n("其实本篇代码是参考了 "),L,n("这个插件的代码，点击"),s("a",$,[n("查看源码地址"),t(a)]),n("。")])])}const J=p(d,[["render",W],["__file","13. 从零实现一个VuePress插件.html.vue"]]),X=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/13.%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVuePress%E6%8F%92%E4%BB%B6.html","title":"从零实现一个VuePress插件","lang":"zh-CN","frontmatter":{"description":"从零实现一个VuePress插件 参考：https://github.com/mqyqingfeng/Blog/issues/250 在搭建 VuePress 博客的过程中，也并不是所有的插件都能满足需求，所以本篇我们以实现一个代码复制插件为例，教大家如何从零实现一个 VuePress 插件。 准备 本地插件、社区插件 （这里应当先读：https://...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/13.%20%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAVuePress%E6%8F%92%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"从零实现一个VuePress插件"}],["meta",{"property":"og:description","content":"从零实现一个VuePress插件 参考：https://github.com/mqyqingfeng/Blog/issues/250 在搭建 VuePress 博客的过程中，也并不是所有的插件都能满足需求，所以本篇我们以实现一个代码复制插件为例，教大家如何从零实现一个 VuePress 插件。 准备 本地插件、社区插件 （这里应当先读：https://..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从零实现一个VuePress插件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"从零实现一个VuePress插件","slug":"从零实现一个vuepress插件","link":"#从零实现一个vuepress插件","children":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"本地插件、社区插件","slug":"本地插件、社区插件","link":"#本地插件、社区插件","children":[]},{"level":3,"title":"插件设计","slug":"插件设计","link":"#插件设计","children":[]}]},{"level":2,"title":"开始开发","slug":"开始开发","link":"#开始开发","children":[{"level":3,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]},{"level":3,"title":"检测代码块","slug":"检测代码块","link":"#检测代码块","children":[]},{"level":3,"title":"增加按钮元素","slug":"增加按钮元素","link":"#增加按钮元素","children":[]},{"level":3,"title":"封装Vue组件","slug":"封装vue组件","link":"#封装vue组件","children":[]}]},{"level":2,"title":"扩展 - 插件选项","slug":"扩展-插件选项","link":"#扩展-插件选项","children":[]},{"level":2,"title":"代码参考","slug":"代码参考","link":"#代码参考","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.71,"words":2013},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/13. 从零实现一个VuePress插件.md","excerpt":"\\n<p>参考：https://github.com/mqyqingfeng/Blog/issues/250</p>\\n<p>在搭建 VuePress 博客的过程中，也并不是所有的插件都能满足需求，所以本篇我们以实现一个代码复制插件为例，教大家如何从零实现一个 VuePress 插件。</p>\\n<h2>准备</h2>\\n<h3>本地插件、社区插件</h3>\\n<p>（这里应当<strong>先读</strong>：https://v2.vuepress.vuejs.org/zh/guide/plugin.html#%E5%AE%98%E6%96%B9%E6%8F%92%E4%BB%B6）</p>\\n<p>开发插件第一个要解决的问题就是如何本地开发，我们查看 VuePress 1.0 官方文档的「<a href=\\"https://vuepress.vuejs.org/zh/plugin/writing-a-plugin.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">开发插件</a>」章节，并没有找到解决方案，但在 VuePress 2.0 官方文档的「<a href=\\"https://v2.vuepress.vuejs.org/zh/guide/plugin.html#%E6%9C%AC%E5%9C%B0%E6%8F%92%E4%BB%B6\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">本地插件</a>」里，却有写道：</p>","autoDesc":true}');export{J as comp,X as data};
