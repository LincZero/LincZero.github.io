import{_ as l,c as e,e as n,o as t}from"./app-CAfWfcmi.js";const s="/assets/v2-26ecd67688afd8859cba1d619905c476_720w-BsnezOI2.webp",a="/assets/bg2016112202-bpyz-YjY.jpg",p="/assets/bg2016112201-lphDrI5Y.gif",o={};function h(r,i){return t(),e("div",null,i[0]||(i[0]=[n('<h1 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h1><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语"><span>术语</span></a></h2><h3 id="高地址、低地址" tabindex="-1"><a class="header-anchor" href="#高地址、低地址"><span>高地址、低地址</span></a></h3><ul><li>基本概念不解释。数组指针 (new出来的内存，在堆上) 自增就是从低地址到高地址。</li></ul><h3 id="高位、低位" tabindex="-1"><a class="header-anchor" href="#高位、低位"><span>高位、低位</span></a></h3><ul><li>和10进制的高低位没什么区别。例如数字 1024，左边的例如1就是高位，右边的4就是最低位</li></ul><h3 id="先读" tabindex="-1"><a class="header-anchor" href="#先读"><span>先读</span></a></h3><ul><li>地址的先读：计算机先读小地址再读大地址。处理字节序的时候，他并不知道什么是高位字节，什么是低位字节。它只知道按顺序读取字节</li><li>位的先读：对于大端字节序，先读到的就是高位字节，后读到的就是低位字节，小端字节序正好相反 <ul><li>对于计算，先读到低位字节是更好的。这便是小端，也是计算时cpu的读法 (人类的计算是从左到右看一个数字，然后跳到这个数的最右边再进行运算。对计算机来说，也不是不能采取一样的策略，但这就慢了)</li><li>对于符号判断，先读到高位字节是更好的，这便是大端，也是读字时人类的读法</li></ul></li></ul><h3 id="大端、小端" tabindex="-1"><a class="header-anchor" href="#大端、小端"><span>大端、小端</span></a></h3><ul><li><strong>Big-Endian（大端模式）</strong><ul><li>特点：高位字节排放在内存的低地址端，这是人类读写数值的方法</li><li>优点 <ul><li>符号位在所表示的数据的内容的第一个字节中，便于快速判断数据的正负和大小</li><li>人类可读</li></ul></li><li>应用：网络传输、文件储存</li></ul></li><li><strong>Little-Endian（小端模式）</strong><ul><li>特点：低位字节排放在内存的低地址端，即以<code>0x1122</code>形式储存</li><li>优点 <ul><li>计算更快</li><li>强制转换时。不需要调整字节的内容</li></ul></li><li>应用：计算机内部处理 (计算)</li></ul></li></ul><h3 id="大端视图、小端视图" tabindex="-1"><a class="header-anchor" href="#大端视图、小端视图"><span>大端视图、小端视图</span></a></h3><p>这两种视图与大小端无关，无论是人还是机器都是从低地址向高地址读</p><ul><li><p>正序视图：左上小地址，右下大地址。</p><ul><li>应用 <ul><li>查看使用大端存储的东西时，都会使用这一视图。优点是配合大端存储，可读性好，可以直接看出ascii字符串</li><li>Windows使用Hex软件模式打开文本</li><li>RFC网络协议图</li><li>使用Wireshark打开Pcap</li><li>CLion/VS调试器中的&quot;内存窗口&quot;</li></ul></li></ul></li><li><p>倒序视图：上大地址，下小地址</p><ul><li>应用 <ul><li>画虚拟内存图</li><li>(小端存储机器上) 0x123456 / 0b0011001100110011 这种字面量写法</li></ul></li></ul></li><li><p>我觉得倒序视图的画法一般是为了兼容教材，感觉没什么用，两种视图的频繁切换会给学习带更多困惑，感觉全部采用正序视图来画会更好。</p><p>不然你存储的内容倒过来了，我视图也一起倒过来了。看上去内容就不变了，太混乱了</p><p>而且你堆指针++是往右往下，在CLion/VS的内存查看器中查看堆时，不也是正序视图么，怎么图就给画成倒序视图了</p></li></ul><h2 id="虚拟内存" tabindex="-1"><a class="header-anchor" href="#虚拟内存"><span>虚拟内存</span></a></h2><p>先来复习一下虚拟内存</p><p><img src="'+s+'" alt="img" loading="lazy"></p><p>Q：虚拟内存图中，为什么内核空间在高地址而非低地址呢？虚拟内存的数量不应该有很多吗，为什么还会有内核空间？</p><p>A：首先，要明白虚拟内存的概念。虚拟内存是一种内存管理技术，它使得每个进程都觉得自己独占了全部的物理内存，进程所见的内存地址并不是实际的物理地址，而是虚拟地址，通过内存管理单元（MMU）进行转换，映射到实际的物理内存中。</p><p>内核空间在高地址是因为操作系统需要保护内核代码和数据不被用户进程访问，所以将其放在高地址处。在虚拟内存中，地址空间被划分为<strong>用户空间</strong>和<strong>内核空间</strong>，用户空间供用户程序使用，内核空间供操作系统内核使用。</p><p>虽然虚拟内存的容量很大（例如32位系统中为4GB），但是这并不代表这些全部都可以被用户程序使用。因为操作系统内核也需要一部分空间来存放内核代码和数据，所以会有内核空间的存在。</p><p>在一般的操作系统中，虚拟内存空间的布局通常是用户空间在低地址，内核空间在高地址。这样做有几个好处：</p><ol><li>能够保护内核代码和数据不被用户程序直接访问，提高系统的安全性。</li><li>用户程序的地址空间可以动态增长（例如堆和栈的动态扩展），而内核空间的大小则是固定的。</li><li>有助于提高内存的使用效率，因为用户程序通常只会使用到部分地址空间，剩余的空间可以由内核使用。</li></ol><h2 id="字节序-大小端" tabindex="-1"><a class="header-anchor" href="#字节序-大小端"><span>字节序 (大小端)</span></a></h2><p>参考：</p><ul><li><a href="https://www.zhihu.com/question/25311159" target="_blank" rel="noopener noreferrer">大小端字节序存在的意义，为什么不用一个标准呢？</a></li><li>https://www.cnblogs.com/ysl99999/p/17348916.html</li><li>https://www.cnblogs.com/kendoziyu/p/14686194.html</li><li>http://www.ruanyifeng.com/blog/2016/11/byte-order.html</li><li>有部分笔记在《深度理解计算机系统》里</li></ul><p><img src="'+a+'" alt="img" loading="lazy"></p><p><img src="'+p+`" alt="img" loading="lazy"></p><p>补充</p><ul><li>全局变量：先定义的全局变量位于低地址，后定义的位于高地址。</li><li>栈中变量：由于栈是往低地址生长的，所以先声明的变量位于高地址</li><li>堆中变量：由于堆是往高地址生长的，所以先声明的变量位于低地址。</li></ul><h1 id="临时对象的生命周期" tabindex="-1"><a class="header-anchor" href="#临时对象的生命周期"><span>临时对象的生命周期</span></a></h1><p>参考：B站up，mq白cpp</p><p>cpp的临时对象存在于整个表达式中</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;string1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 行1，等同于 foo(std::string(&quot;string1&quot;))，生成了一个临时的字符串对象，调用了构造函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			 		// 行2，到了这一行，上面的字符串对象会被析构。在此之前，也就是在foo函数内部返回后，t拿到值时，该字符串对象还是存在的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 zh.cppreference.com/w/cpp/language/reference_initialization 中的解释是这样的：</p><blockquote><p>在函数调用中绑定到函数形参的临时量，存在到<strong>含这次函数调用的全表达试结尾</strong>为止：如果函数返回一个生命长于表达式的引用，那么它会称为悬垂引用。</p></blockquote>`,35)]))}const d=l(o,[["render",h],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/","title":"内存管理","lang":"zh-CN","frontmatter":{"description":"内存管理 术语 高地址、低地址 基本概念不解释。数组指针 (new出来的内存，在堆上) 自增就是从低地址到高地址。 高位、低位 和10进制的高低位没什么区别。例如数字 1024，左边的例如1就是高位，右边的4就是最低位 先读 地址的先读：计算机先读小地址再读大地址。处理字节序的时候，他并不知道什么是高位字节，什么是低位字节。它只知道按顺序读取字节 位的...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"内存管理"}],["meta",{"property":"og:description","content":"内存管理 术语 高地址、低地址 基本概念不解释。数组指针 (new出来的内存，在堆上) 自增就是从低地址到高地址。 高位、低位 和10进制的高低位没什么区别。例如数字 1024，左边的例如1就是高位，右边的4就是最低位 先读 地址的先读：计算机先读小地址再读大地址。处理字节序的时候，他并不知道什么是高位字节，什么是低位字节。它只知道按顺序读取字节 位的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"内存管理","slug":"内存管理","link":"#内存管理","children":[{"level":2,"title":"术语","slug":"术语","link":"#术语","children":[{"level":3,"title":"高地址、低地址","slug":"高地址、低地址","link":"#高地址、低地址","children":[]},{"level":3,"title":"高位、低位","slug":"高位、低位","link":"#高位、低位","children":[]},{"level":3,"title":"先读","slug":"先读","link":"#先读","children":[]},{"level":3,"title":"大端、小端","slug":"大端、小端","link":"#大端、小端","children":[]},{"level":3,"title":"大端视图、小端视图","slug":"大端视图、小端视图","link":"#大端视图、小端视图","children":[]}]},{"level":2,"title":"虚拟内存","slug":"虚拟内存","link":"#虚拟内存","children":[]},{"level":2,"title":"字节序 (大小端)","slug":"字节序-大小端","link":"#字节序-大小端","children":[]}]},{"level":1,"title":"临时对象的生命周期","slug":"临时对象的生命周期","link":"#临时对象的生命周期","children":[]}],"git":{},"readingTime":{"minutes":5.25,"words":1576},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/内存管理/README.md","excerpt":"\\n<h2>术语</h2>\\n<h3>高地址、低地址</h3>\\n<ul>\\n<li>基本概念不解释。数组指针 (new出来的内存，在堆上) 自增就是从低地址到高地址。</li>\\n</ul>\\n<h3>高位、低位</h3>\\n<ul>\\n<li>和10进制的高低位没什么区别。例如数字 1024，左边的例如1就是高位，右边的4就是最低位</li>\\n</ul>\\n<h3>先读</h3>\\n<ul>\\n<li>地址的先读：计算机先读小地址再读大地址。处理字节序的时候，他并不知道什么是高位字节，什么是低位字节。它只知道按顺序读取字节</li>\\n<li>位的先读：对于大端字节序，先读到的就是高位字节，后读到的就是低位字节，小端字节序正好相反\\n<ul>\\n<li>对于计算，先读到低位字节是更好的。这便是小端，也是计算时cpu的读法\\n(人类的计算是从左到右看一个数字，然后跳到这个数的最右边再进行运算。对计算机来说，也不是不能采取一样的策略，但这就慢了)</li>\\n<li>对于符号判断，先读到高位字节是更好的，这便是大端，也是读字时人类的读法</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/内存管理/README.md","value":{"title":"04. 优化层/","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/内存管理/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,u as data};
