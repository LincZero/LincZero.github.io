import{_ as i,e as l,g as a,o as n}from"./app-OgO1lqgf.js";const t="/assets/20210317204557780-BG_9zmlY.png",o={};function d(r,e){return n(),l("div",null,e[0]||(e[0]=[a('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h1><p>STL中的容器大体分为</p><ul><li>序列容器（Sequence Containers） <ul><li>连续容器（数组实现） <ul><li><code>Array</code>，数组（定长，常用容器中唯一一个定长的）</li><li><code>Vector</code>，计算机向量（不定长，每次扩充为原来的两倍）</li><li><code>Deque</code>，双端队列（不定长，每次扩充一个buffer） <ul><li><code>Stack</code>和<code>Queue</code>（Deque实现）</li></ul></li></ul></li><li>非连续容器（链表实现） <ul><li><code>List</code>，(双向)链表（环状链表实现）</li><li><code>Forward-List</code>，单向链表</li><li><s><code>qlist</code>，（旧版的 forward-list）</s></li><li><s><code>priority_queue</code>，优先队列</s></li></ul></li></ul></li><li>关联容器（Associative Containers）（树实现，且一般是红黑树，红黑树是高度平衡二叉树） <ul><li>有序关联容器 <ul><li><code>Set / Multiset</code>，计算机集合，Multi指元素内容可以重复</li><li><code>Map / Multimap</code>，计算机地图表，Multi指元素内容可以重复</li></ul></li><li>无序关联容器（Unordered Containers）（哈希表HashTable实现，且一般是拉链法。拉链法：元素重复时放同一链表，太长时再动态调整） <ul><li><code>unordered_set / unordered_multiset</code></li><li><code>unordered_map / unordered_multimap</code></li><li><s><code>hash_set / hash_multiset</code>，（旧版的）</s></li><li><s><code>hash_map / hash_multimap</code>，（旧版的）</s></li></ul></li></ul></li></ul><p><img src="'+t+'" alt="在这里插入图片描述" loading="lazy"></p><h2 id="array-序列连续容器" tabindex="-1"><a class="header-anchor" href="#array-序列连续容器"><span>array（序列连续容器）</span></a></h2><h2 id="vector-序列连续容器" tabindex="-1"><a class="header-anchor" href="#vector-序列连续容器"><span>vector（序列连续容器）</span></a></h2><h2 id="list-序列非连续容器" tabindex="-1"><a class="header-anchor" href="#list-序列非连续容器"><span>list（序列非连续容器）</span></a></h2><h2 id="forward-list-序列非连续容器" tabindex="-1"><a class="header-anchor" href="#forward-list-序列非连续容器"><span>forward_list（序列非连续容器）</span></a></h2><h2 id="deque-序列连续容器" tabindex="-1"><a class="header-anchor" href="#deque-序列连续容器"><span>deque（序列连续容器）</span></a></h2><h2 id="stack-和-queue-deque适配器类容器" tabindex="-1"><a class="header-anchor" href="#stack-和-queue-deque适配器类容器"><span>stack 和 queue（deque适配器类容器）</span></a></h2><h2 id="multiset-和-multimap-有序关联容器" tabindex="-1"><a class="header-anchor" href="#multiset-和-multimap-有序关联容器"><span>multiset 和 multimap（有序关联容器）</span></a></h2><h2 id="unordered-multiset-和-unordered-multimap-无序关联容器" tabindex="-1"><a class="header-anchor" href="#unordered-multiset-和-unordered-multimap-无序关联容器"><span>unordered_multiset 和 unordered_multimap（无序关联容器）</span></a></h2>',14)]))}const c=i(o,[["render",d],["__file","02. 容器.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/STL/02.%20%E5%AE%B9%E5%99%A8.html","title":"C++","lang":"zh-CN","frontmatter":{"description":"C++ 目录 容器 STL中的容器大体分为 序列容器（Sequence Containers） 连续容器（数组实现） Array，数组（定长，常用容器中唯一一个定长的） Vector，计算机向量（不定长，每次扩充为原来的两倍） Deque，双端队列（不定长，每次扩充一个buffer） Stack和Queue（Deque实现） 非连续容器（链表实现） L...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/STL/02.%20%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ 目录 容器 STL中的容器大体分为 序列容器（Sequence Containers） 连续容器（数组实现） Array，数组（定长，常用容器中唯一一个定长的） Vector，计算机向量（不定长，每次扩充为原来的两倍） Deque，双端队列（不定长，每次扩充一个buffer） Stack和Queue（Deque实现） 非连续容器（链表实现） L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.1,"words":331},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/STL/02. 容器.md","excerpt":"\\n<h1>目录</h1>\\n<h1>容器</h1>\\n<p>STL中的容器大体分为</p>\\n<ul>\\n<li>序列容器（Sequence Containers）\\n<ul>\\n<li>连续容器（数组实现）\\n<ul>\\n<li><code>Array</code>，数组（定长，常用容器中唯一一个定长的）</li>\\n<li><code>Vector</code>，计算机向量（不定长，每次扩充为原来的两倍）</li>\\n<li><code>Deque</code>，双端队列（不定长，每次扩充一个buffer）\\n<ul>\\n<li><code>Stack</code>和<code>Queue</code>（Deque实现）</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>非连续容器（链表实现）\\n<ul>\\n<li><code>List</code>，(双向)链表（环状链表实现）</li>\\n<li><code>Forward-List</code>，单向链表</li>\\n<li><s><code>qlist</code>，（旧版的 forward-list）</s></li>\\n<li><s><code>priority_queue</code>，优先队列</s></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>关联容器（Associative Containers）（树实现，且一般是红黑树，红黑树是高度平衡二叉树）\\n<ul>\\n<li>有序关联容器\\n<ul>\\n<li><code>Set / Multiset</code>，计算机集合，Multi指元素内容可以重复</li>\\n<li><code>Map / Multimap</code>，计算机地图表，Multi指元素内容可以重复</li>\\n</ul>\\n</li>\\n<li>无序关联容器（Unordered Containers）（哈希表HashTable实现，且一般是拉链法。拉链法：元素重复时放同一链表，太长时再动态调整）\\n<ul>\\n<li><code>unordered_set / unordered_multiset</code></li>\\n<li><code>unordered_map / unordered_multimap</code></li>\\n<li><s><code>hash_set / hash_multiset</code>，（旧版的）</s></li>\\n<li><s><code>hash_map / hash_multimap</code>，（旧版的）</s></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/STL/02. 容器.md","value":{"title":"02. 容器","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/STL/02. 容器.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,u as data};
