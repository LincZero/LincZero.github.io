import{_ as t,e,g as o,o as a}from"./app-CbGUE4hV.js";const r="/assets/format_png-fPX9Us9b.png",h={};function p(s,n){return a(),e("div",null,n[0]||(n[0]=[o('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="解释器详解" tabindex="-1"><a class="header-anchor" href="#解释器详解"><span>解释器详解</span></a></h1><p>参考：<a href="https://blog.csdn.net/helloxiaozhe/article/details/78104975" target="_blank" rel="noopener noreferrer">【CSDN】python编译过程和执行原理</a></p><h2 id="python执行原理" tabindex="-1"><a class="header-anchor" href="#python执行原理"><span>python执行原理</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><p>这里的解释执行是相对于编译执行而言的。我们都知道，使用C/C++之类的编译性语言编写的程序，是需要从源文件转换成计算机使用的机器语言，经过链接器链接之后形成了<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">二进制</a>的可执行文件。运行该程序的时候，就可以把二进制程序从硬盘载入到内存中并运行。</p><p>​ 但是对于Python而言，python源码不需要编译成二进制代码，它可以直接从源代码运行程序。当我们运行python文件程序的时候，python解释器将源代码转换为字节码，然后再由python解释器来执行这些字节码。这样，python就不用担心程序的编译,库的链接加载等问题了。</p><h3 id="解释语言3个特性" tabindex="-1"><a class="header-anchor" href="#解释语言3个特性"><span>解释语言3个特性</span></a></h3><p>对于python解释语言，有以下3方面的特性：</p><ol><li><strong>每次运行都要进行转换成字节码，然后再有虚拟机把字节码转换成机器语言</strong>，最后才能在硬件上运行。<br> 与编译性语言相比，<strong>每次多出了编译和链接的过程</strong>，性能肯定会受到影响；<br> 而python并不是每次都需要转换字节码，解释器在转换之前会判断代码文件的修改时间是否与上一次转换后的字节码<strong>pyc文件</strong>的修改时间一致，若不一致才会重新转换。</li><li>由于不用关心程序的编译和库的链接等问题，开发的工作也就更加<strong>轻松</strong>啦。</li><li>python代码与机器底层更远了，python程序更加<strong>易于移植</strong>，基本上无需改动就能在多平台上运行。</li></ol><h3 id="编译型语言和解释型语言" tabindex="-1"><a class="header-anchor" href="#编译型语言和解释型语言"><span>编译型语言和解释型语言</span></a></h3><p>​ 在具体计算机上实现一种语言，首先要确定的是表示该语言语义解释的虚拟计算机，一个关键的问题是程序执行时的基本表示是实际计算机上的机器语言还是虚拟机的机器语言。这个问题决定了语言的实现。根据这个问题的回答，可以将程序设计语言划分为两大类：编译型语言和解释型语言。</p><ol><li>编译实现的语言，<br> 如：C、C++、Fortran、Pascal、Ada。由编译型语言编写的源程序需要经过编译,汇编和链接才能输出目标代码，然后由机器执行目标代码。<br> 目标代码是有机器指令组成，不能独立运行，因为源程序中可能使用了一些汇编程序不能解释引用的库函数，而库函数又不在源程序中，此时还需要链接程序完成外部引用和目标模板调用的链接任务，最后才能输出可执行代码。</li><li>解释型语言，<br> 解释器不产生目标机器代码，而是产生中间代码，这种中间代码与机器代码不同，中间代码的解释是由软件支持的，不能直接使用在硬件上。该软件解释器通常会导致执行效率较低，用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的。和编译的程序不同的是, 解释程序的任务是逐一将源代码的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。对于解释型语言，需要一个专门的解释器来执行该程序，每条语句只有在执行是才能被翻译，这种解释型语言每执行一次就翻译一次，因而效率低下。</li><li>Java解释器，<br> java很特殊，java是需要编译的，但是没有直接编译成机器语言，而是<strong>编译成字节码</strong>，然后在Java虚拟机上用解释的方式执行字节码。<br> Python也使用了类似的方式，先将python编译成python字节码，然后由一个专门的python字节码解释器负责解释执行字节码。</li><li>python是一门<strong>解释语言，但</strong>是出于效率的考虑，<strong>提供了一种编译的方法</strong>。编译之后就得到pyc文件，<strong>存储了字节码</strong>。<br> python这点和java很类似，但是<strong>java与python不同的是</strong>，python是一个解释型的语言，所以编译字节码不是一个强制的操作，事实上，编译是一个自动的过程，一般不会在意它的存在。编译成字节码可以节省加载模块的时间，提高效率。</li><li>除了效率之外，字节码的形式也增加了反向工程的难度，可以保护源代码。这个只是一定程度上的保护，反编译还是可以的。</li></ol><h2 id="python内部执行过程" tabindex="-1"><a class="header-anchor" href="#python内部执行过程"><span><a href="http://www.cnblogs.com/stefan-liu/p/5172424.html" target="_blank" rel="noopener noreferrer">Python内部执行过程</a></span></a></h2><h3 id="编译过程概述" tabindex="-1"><a class="header-anchor" href="#编译过程概述"><span>编译过程概述</span></a></h3><p>当我们执行Python代码的时候，在Python解释器用四个过程“拆解”我们的代码，最终被CPU执行返回给用户。</p><ol><li>词法分析<br> 首先当用户键入代码交给Python处理的时候会先进行词法分析，例如用户键入关键字或者当输入关键字有误时，都会被词法分析所触发，不正确的代码将不会被执行。</li><li>语法分析<br> 下一步Python会进行语法分析，例如当&quot;for i in test:&quot;中，test后面的冒号如果被写为其他符号，代码依旧不会被执行。</li><li>编译 - 生成字节码<br> 下面进入最关键的过程，在执行Python前，Python会生成.pyc文件，这个文件就是字节码，如果我们不小心修改了字节码，Python下次重新编译该程序时会和其上次生成的字节码文件进行比较，如果不匹配则会将被修改过的字节码文件进行覆盖，以确保每次编译后字节码的准确性。<br> 那么什么是字节码？字节码<strong>在Python虚拟机程序里对应的是PyCodeObject对象</strong>。<br><strong>.pyc文件是字节码在磁盘上的表现形式</strong>。简单来说就是在编译代码的过程中，首先会将代码中的函数、类等对象分类处理，然后生成字节码文件。</li><li>执行<br> 有了字节码文件，CPU可以直接识别字节码文件进行处理，接着Python就可执行了。</li></ol><h3 id="过程图解" tabindex="-1"><a class="header-anchor" href="#过程图解"><span>过程图解</span></a></h3><p><img src="'+r+'" alt="img" loading="lazy"></p><h3 id="编译字节码" tabindex="-1"><a class="header-anchor" href="#编译字节码"><span>编译字节码</span></a></h3><p>略</p><h3 id="codeobject对象的属性" tabindex="-1"><a class="header-anchor" href="#codeobject对象的属性"><span>codeobject对象的属性</span></a></h3><p>略</p>',24)]))}const i=t(h,[["render",p],["__file","02. 解释器详解.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/11.%20%E7%BC%96%E5%86%99%E4%B9%8B%E5%A4%96/02.%20%E8%A7%A3%E9%87%8A%E5%99%A8%E8%AF%A6%E8%A7%A3.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 解释器详解 参考：【CSDN】python编译过程和执行原理 python执行原理 简概 这里的解释执行是相对于编译执行而言的。我们都知道，使用C/C++之类的编译性语言编写的程序，是需要从源文件转换成计算机使用的机器语言，经过链接器链接之后形成了二进制的可执行文件。运行该程序的时候，就可以把二进制程序从硬盘载入到内存中并运行。 ​...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/11.%20%E7%BC%96%E5%86%99%E4%B9%8B%E5%A4%96/02.%20%E8%A7%A3%E9%87%8A%E5%99%A8%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 解释器详解 参考：【CSDN】python编译过程和执行原理 python执行原理 简概 这里的解释执行是相对于编译执行而言的。我们都知道，使用C/C++之类的编译性语言编写的程序，是需要从源文件转换成计算机使用的机器语言，经过链接器链接之后形成了二进制的可执行文件。运行该程序的时候，就可以把二进制程序从硬盘载入到内存中并运行。 ​..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/11. 编写之外/02. 解释器详解.md","excerpt":"\\n<h1>目录</h1>\\n<h1>解释器详解</h1>\\n<p>参考：<a href=\\"https://blog.csdn.net/helloxiaozhe/article/details/78104975\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【CSDN】python编译过程和执行原理</a></p>\\n<h2>python执行原理</h2>\\n<h3>简概</h3>\\n<p>这里的解释执行是相对于编译执行而言的。我们都知道，使用C/C++之类的编译性语言编写的程序，是需要从源文件转换成计算机使用的机器语言，经过链接器链接之后形成了<a href=\\"https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">二进制</a>的可执行文件。运行该程序的时候，就可以把二进制程序从硬盘载入到内存中并运行。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/11. 编写之外/02. 解释器详解.md","value":{"title":"02. 解释器详解","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/11. 编写之外/02. 解释器详解.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,c as data};
