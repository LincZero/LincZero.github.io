import{_ as s,e as a,g as n,o as t}from"./app-BapqMaOt.js";const e="/assets/1000d4ad9d5d97caadffc0f372fa43dc-BgW4hs8R.png",l={};function h(p,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="邪教代码" tabindex="-1"><a class="header-anchor" href="#邪教代码"><span>邪教代码</span></a></h1><h2 id="通用类" tabindex="-1"><a class="header-anchor" href="#通用类"><span>通用类</span></a></h2><h3 id="记时器排序" tabindex="-1"><a class="header-anchor" href="#记时器排序"><span>记时器排序</span></a></h3><p>这个应该都知道，就不详细说了。就是数字几就sleep多久，最后会按顺序打印出来</p><h2 id="位运算类" tabindex="-1"><a class="header-anchor" href="#位运算类"><span>位运算类</span></a></h2><h3 id="异或版-数据交换" tabindex="-1"><a class="header-anchor" href="#异或版-数据交换"><span>异或版 数据交换</span></a></h3><ul><li><p>有个好玩的点，可以用异或来交换（弹幕好像说，CSAPP里说现在这种写法性能没什么优势了）</p></li><li><p>异或，也是<strong>无进位相加</strong>（可以用这个来理解：为什么异或满足<strong>交换率和结合率</strong>），加法器也是异或实现，除了与或非外，这个最重要最好用了应该。</p></li><li><p>这三行跑完就交换了：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原，b=b原</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原，b = a原^b原^b原 = a原^0 = a原，这里使用了交换率或结合率</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原^a原 = b原，b = a原</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意有个致命缺点，这里有个前提，a和b的值可以相当，但不能是同一个内存，否则自己和自己异或会变成0</p></li></ul><h3 id="有符号负数-的取反加一" tabindex="-1"><a class="header-anchor" href="#有符号负数-的取反加一"><span>有符号负数，的取反加一</span></a></h3><p>负数补码为反码加一</p><p>a-b = a+(-b的补数) = a+(mod-b)，（补码看作是无符号整形且&gt;半模，即最高位为1）</p><p>取补码算法：0x1100 0110 为例</p><ul><li>加减法：u0x1 0000 0000 - u0x0100 0110 = u0x1011 1010</li><li>按位运算法：人工取补码则是将b反码再加一，或者说最高位固定为1，其余取反并+1。如0x1100 0110 -&gt; 0x_011 1001 -&gt; u0x1011 1010</li></ul><h3 id="提取最右侧的一" tabindex="-1"><a class="header-anchor" href="#提取最右侧的一"><span>提取最右侧的一</span></a></h3><p>有点类似于补码转化那种想法，但完全不同，这里首先就没有负数的概念，是另外一种。</p><p>代码实现里的一个细节技巧：<code>int rightOne = eor &amp; (~eor+1);</code> 位运算，提取最右侧的一。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 		0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1010111100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 	0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0101000011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">	0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0101000100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0000000100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h2><h3 id="无视私有变量" tabindex="-1"><a class="header-anchor" href="#无视私有变量"><span>无视私有变量</span></a></h3><p>作者：C++与Qt技术交流群里的 @山东-卖女孩的小火柴 ，模板实例化的时候可以无视访问权限限定符拿私有变量的操作</p><p><img src="`+e+'" alt="img" loading="lazy"></p>',20)]))}const r=s(l,[["render",h],["__file","邪教代码.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E4%B8%93%E9%A2%98/%E9%82%AA%E6%95%99%E4%BB%A3%E7%A0%81/%E9%82%AA%E6%95%99%E4%BB%A3%E7%A0%81.html","title":"邪教代码","lang":"zh-CN","frontmatter":{"description":"邪教代码 通用类 记时器排序 这个应该都知道，就不详细说了。就是数字几就sleep多久，最后会按顺序打印出来 位运算类 异或版 数据交换 有个好玩的点，可以用异或来交换（弹幕好像说，CSAPP里说现在这种写法性能没什么优势了） 异或，也是无进位相加（可以用这个来理解：为什么异或满足交换率和结合率），加法器也是异或实现，除了与或非外，这个最重要最好用了应...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E4%B8%93%E9%A2%98/%E9%82%AA%E6%95%99%E4%BB%A3%E7%A0%81/%E9%82%AA%E6%95%99%E4%BB%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"邪教代码"}],["meta",{"property":"og:description","content":"邪教代码 通用类 记时器排序 这个应该都知道，就不详细说了。就是数字几就sleep多久，最后会按顺序打印出来 位运算类 异或版 数据交换 有个好玩的点，可以用异或来交换（弹幕好像说，CSAPP里说现在这种写法性能没什么优势了） 异或，也是无进位相加（可以用这个来理解：为什么异或满足交换率和结合率），加法器也是异或实现，除了与或非外，这个最重要最好用了应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"邪教代码\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 专题/邪教代码/邪教代码.md","excerpt":"\\n<h2>通用类</h2>\\n<h3>记时器排序</h3>\\n<p>这个应该都知道，就不详细说了。就是数字几就sleep多久，最后会按顺序打印出来</p>\\n<h2>位运算类</h2>\\n<h3>异或版 数据交换</h3>\\n<ul>\\n<li>\\n<p>有个好玩的点，可以用异或来交换（弹幕好像说，CSAPP里说现在这种写法性能没什么优势了）</p>\\n</li>\\n<li>\\n<p>异或，也是<strong>无进位相加</strong>（可以用这个来理解：为什么异或满足<strong>交换率和结合率</strong>），加法器也是异或实现，除了与或非外，这个最重要最好用了应该。</p>\\n</li>\\n<li>\\n<p>这三行跑完就交换了：</p>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" data-title=\\"c\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">a </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> a</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">^</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">b;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t// a = a原^b原，b=b原</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">b </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> a</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">^</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">b;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t// a = a原^b原，b = a原^b原^b原 = a原^0 = a原，这里使用了交换率或结合率</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">a </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> a</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">^</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">b;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t// a = a原^b原^a原 = b原，b = a原</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>注意有个致命缺点，这里有个前提，a和b的值可以相当，但不能是同一个内存，否则自己和自己异或会变成0</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/10. 专题/邪教代码/邪教代码.md","value":{"title":"邪教代码","path":"MdNote_Public/01. DesignAndDevelop/Develop/10. 专题/邪教代码/邪教代码.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,d as data};
