import{_ as a,e as n,g as i,h as l,r as e,o as d}from"./app-EuS-Ookm.js";const h={};function p(r,s){const t=e("Mermaid");return d(),n("div",null,[s[0]||(s[0]=i(`<h1 id="《深入了解计算机系统》" tabindex="-1"><a class="header-anchor" href="#《深入了解计算机系统》"><span>《深入了解计算机系统》</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>[toc]</p><h1 id="程序的机器级表示" tabindex="-1"><a class="header-anchor" href="#程序的机器级表示"><span>程序的机器级表示</span></a></h1><p>详见汇编笔记</p><table><thead><tr><th>机器位数（字长、PC的大小）</th><th>可以指向多少个内存地址</th><th>可以使用多大的随机访问存储器</th><th>补充</th></tr></thead><tbody><tr><td>16位（2B）微处理器</td><td>2<sup>16</sup></td><td>64KB（2<sup>16</sup>B）</td><td></td></tr><tr><td>32位（4B）</td><td>2<sup>32</sup></td><td>4GB（2<sup>32</sup>B）</td><td></td></tr><tr><td>64位（8B）</td><td>2<sup>64</sup></td><td>16EB（2<sup>64</sup>B）（2000亿亿B）</td><td>比TB后面还有个PB拍字节，才到EB艾字节</td></tr><tr><td>现代的64位（6B）</td><td>2<sup>48</sup></td><td>256TB（2<sup>48</sup>B）</td><td>现在的64位：被限制前16位为0，只能用后48位</td></tr></tbody></table><p>用十进制可能容易理解点：4位数能表示1万个数，8位数能表示1亿，16位数能表示1万亿个数，64位数能表示10<sup>64</sup>个数</p><blockquote><p>旁注：IA32，为x86-64的32位前身</p></blockquote><h2 id="历史观点" tabindex="-1"><a class="header-anchor" href="#历史观点"><span>历史观点</span></a></h2><p>Intel处理器的历史发展（影响机器级编程的特性）</p><table><thead><tr><th>处理器版本</th><th>年份</th><th style="text-align:right;">晶体管数量</th><th>补充</th></tr></thead><tbody><tr><td>8086</td><td>1978</td><td style="text-align:right;">29 K</td><td>第一代单芯片、16位微处理器之一</td></tr><tr><td>80286</td><td>1982</td><td style="text-align:right;">134 K</td><td></td></tr><tr><td>i386</td><td>1985</td><td style="text-align:right;">275 K</td><td>将体系结构扩展到32位</td></tr><tr><td>i486</td><td>1989</td><td style="text-align:right;">1.2 M</td><td></td></tr><tr><td>Pentium</td><td>1993</td><td style="text-align:right;">3.1 M</td><td></td></tr><tr><td>PentiumPro</td><td>1995</td><td style="text-align:right;">5.5 M</td><td>P6微体系结构，指令集增加一类“条件传送”指令</td></tr><tr><td>Peitium/MMX</td><td>1997</td><td style="text-align:right;">4.5 M</td><td></td></tr><tr><td>Pentium II</td><td>1997</td><td style="text-align:right;">7 M</td><td>P6微体系结构的延伸</td></tr><tr><td>Pertium III</td><td>1999</td><td style="text-align:right;">8.2 M</td><td></td></tr><tr><td>Pertium 4</td><td>2000</td><td style="text-align:right;">42 M</td><td></td></tr><tr><td>Pertium 4E</td><td>2004</td><td style="text-align:right;">125 M</td><td>增加超线程，且增加64位扩展（x86-64）</td></tr><tr><td>Core 2</td><td>2006</td><td style="text-align:right;">291 M</td><td>第一个多核微处理器，但不支持超线程</td></tr><tr><td>Core i7，Nehalem</td><td>2008</td><td style="text-align:right;">781 M</td><td>既支持超线程，也有多核</td></tr><tr><td>Core i7，Sandy Bridge</td><td>2011</td><td style="text-align:right;">1.17 G</td><td></td></tr><tr><td>Core i7，Haswell</td><td>2013</td><td style="text-align:right;">1.4 G</td><td></td></tr></tbody></table><ul><li>机器语言有很多特性只有从历史的观点来看才有意义（当时技术有限做了很多妥协）</li><li>且每个后继处理器设计都提供了向后兼容的特性</li></ul><p>所以指令集有很多奇怪的东西</p><blockquote><p>摩尔定律：18个月一翻</p></blockquote><h2 id="程序编码" tabindex="-1"><a class="header-anchor" href="#程序编码"><span>程序编码</span></a></h2><p>Unix命令行编译C程序中的两个文件（p1.c和p2.c）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">linux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Og</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p1.c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p2.c</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ggc：GCC C编译器，是Linux上默认的编译器</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># -Og：使用生成符合原始C代码整体结构的机器代码优化等级，而不适用较高级别的优化，以便学习</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再重复一下第一大章的内容：</p>`,18)),l(t,{id:"mermaid-365",code:"eJx90EFOwkAUBuD9nMILDEcwsRW9gLsJC1KMbdLYhnKEpqMRbA1IIjURDUYW2mo0RKYCl5k3U25hRxvjorCcee97+d87aTddc+dIQ3tEsEhOL4CFWAypuH3G5rFtOzWjgfH6wYeJL6MAbqbYcF2Md5FG+CoRgzlngRz5G7BVYPk1zNOrH2nYSupEvNHitwp4BfitKtD0VP8+gTBd0x4kI77oyTgRY1pazrr5KoazWckdFba/FJePitstxeuKi/On/L67zTYQOiD6X1gRRnwZq83GFGigA+vzz5fiDXQhrl8hnQMbFNF5Nvs3yW1bp52qFHV0SOR7JrM7mHyUrFzc67Qsp2ZWn1lD35hd6VU="}),s[1]||(s[1]=i(`<h3 id="机器级代码" tabindex="-1"><a class="header-anchor" href="#机器级代码"><span>机器级代码</span></a></h3><p>机器级编程（像计算机系统那样）使用了多种抽象，其中两种尤为重要</p><ol><li><p>由<code>指令集体系结构或指令集架构（Instruction Set Architecture，ISA）</code>来定义机器级程序的格式和行为</p><p>如：将程序行为描述成好像每条指令都是按顺序执行的</p></li><li><p>机器级程序使用的内存地址是虚拟地址</p></li></ol><p>区别</p><blockquote><ul><li>汇编与二进制相比：拥有可读性更好的文本格式表示</li><li>机器代码和C相比： <ul><li>一些通常对C语言程序猿隐藏的处理器状态都是可见的，如： <ul><li>程序计数器（PC，x86-64中用<code>%rip</code>表示）给出将要执行的下条指令在内存中的地址</li><li>整数寄存器文件</li><li>条件码寄存器</li><li>向量寄存器</li></ul></li><li>C语言提供声明的数据类型，机器语言不区分各种数，甚至不区分指针和整数</li></ul></li></ul></blockquote><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><blockquote><h4 id="linux编译器和反汇编器的使用" tabindex="-1"><a class="header-anchor" href="#linux编译器和反汇编器的使用"><span>Linux编译器和反汇编器的使用</span></a></h4></blockquote><p>gcc和g++都可以编译C/C++，但教程上一般是gcc对C，gcc汇编，g++对C++，具体的这里不再深入</p><p>两者的用法几乎完全一致</p><table><thead><tr><th>linux指令（<code>gcc</code>与<code>objdump</code>）</th><th>操作</th><th>生成文件</th><th>文件补充</th></tr></thead><tbody><tr><td><code>gcc -Og -S main.c</code></td><td>仅编译</td><td>汇编文件<code>main.s</code></td><td>可以文本方式打开阅读汇编代码</td></tr><tr><td><code>gcc -Og -S -masm=intel main.c</code></td><td>仅编译</td><td>汇编文件<code>main.s</code></td><td>还可以生成Intel格式的代码（没区别？）</td></tr><tr><td><code>gcc -Og -c main.c</code></td><td>编译+汇编</td><td>二进制文件<code>main.o</code></td><td><code>sudo ./main.o</code>可运行该文件</td></tr><tr><td><code>gcc -Og -o prog main.c hello.c</code></td><td>编译+汇编+链接</td><td>二进制文件<code>prog</code></td><td><code>sudo ./prog</code>可运行该文件</td></tr><tr><td><code>gcc main.c</code></td><td>编译+汇编+链接</td><td>二进制文件<code>a.out</code></td><td><code>sudo ./a.out</code>可运行该文件</td></tr><tr><td>——————</td><td>——————</td><td>——————</td><td>——————</td></tr><tr><td><code>g++ -S main.cpp</code></td><td>仅编译</td><td>汇编文件<code>main.s</code></td><td>可以文本方式打开阅读汇编代码</td></tr><tr><td><code>g++ -c main.cpp</code></td><td>编译+汇编</td><td>二进制文件<code>main.o</code></td><td><code>sudo ./main.o</code>可运行该文件</td></tr><tr><td><code>g++ -o [world] main.cpp</code></td><td>编译+汇编+链接</td><td>二进制文件<code>main</code> (或<code>world</code>)</td><td><code>sudo ./prog</code>可运行该文件</td></tr><tr><td><code>g++ main.cpp</code></td><td>编译+汇编+链接</td><td>二进制文件<code>a.out</code></td><td><code>sudo ./a.out</code>可运行该文件</td></tr><tr><td>——————</td><td>——————</td><td>——————</td><td>——————</td></tr><tr><td><code>objdump -d mstore.o</code></td><td>反汇编二进制代码</td><td>不生成，在终端显示结果</td><td></td></tr><tr><td><code>objdump -d prog</code></td><td>反汇编二进制代码</td><td>不生成，在终端显示结果</td><td></td></tr></tbody></table><p><strong>表格补充：如进行链接，则必须要有一个main函数</strong></p><p>反编译器（disassembler）补充：反汇编特性：</p><ul><li><p>指令长度：x86-64的从1-15个字节不等，常用指令和操作数较少的指令所需的字节数少（反之）</p></li><li><p>设计指令格式的方式：从某个给定位置开始可以唯一性解码（如：只有pushq %rbx是以字节值53开头的）</p></li><li><p>指令名：反汇编使用的指令命名规则和GCC生成的有细微差别（如：末尾的q）</p></li></ul><blockquote><h4 id="实验代码" tabindex="-1"><a class="header-anchor" href="#实验代码"><span>实验代码</span></a></h4></blockquote><p>C语言代码<code>main.c</code></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> multstore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    multstore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2*3 --&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%ld</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, d);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mult2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C语言代码<code>mstore.c</code></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mult2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 返回两数相乘的值，来自main.c文件的函数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> multstore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 把前两参相乘的值给第三参，提供给main.c文件用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mult2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x, y);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="汇编代码结果" tabindex="-1"><a class="header-anchor" href="#汇编代码结果"><span>汇编代码结果</span></a></h4></blockquote><p><code>mstore.c</code>编译的汇编代码<code>mstore.s</code>（忽略以.开头的伪指令）</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" data-title="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># void multstore(long x, long y, long *dest)</span></span>
<span class="line"><span># x in %rdi, y in %rsi, dest in %rdx</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>multstore:</span></span>
<span class="line"><span>	pushq	%rbx			# Save %rbx</span></span>
<span class="line"><span>	movq	%rdx, %rbx		# Copy dest to %rbx</span></span>
<span class="line"><span>	call	mult2			# Call mult2(x, y)</span></span>
<span class="line"><span>	movq	%rax, (%rbx)	# Store result at *dest</span></span>
<span class="line"><span>	popq	%rbx			# Restore %rbx</span></span>
<span class="line"><span>	ret						# Return (默认返回%rax，这里没有操作%rax，即返回0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 每个缩进行对应一条机器指令，一条机器指令只能执行一个非常基础的操作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mstore.c</code>编译并汇编的机器代码<code>mstore.o</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 14字节序列的16进制显示：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">53</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 48</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> d3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> e8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 48</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 03</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 5b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mstore.o</code>反汇编生成的类汇编代码<code>mstore.s</code>，略有不同应该是因为之前汇编器改进了一些程序，反编译应该原编译程序更精准</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" data-title="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 右侧部分为注解</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0000000000000000 &lt;multstore&gt;:</span></span>
<span class="line"><span>    0:	53						push	%rbx</span></span>
<span class="line"><span>    1:	48 89 d3				mov		%rdx,%rbx</span></span>
<span class="line"><span>    4:	e8 00 00 00 00			callq	9 &lt;multstore+0x9&gt;</span></span>
<span class="line"><span>    9:	48 89 03				mov		%rax,(%rbx)</span></span>
<span class="line"><span>    c:	5b						pop		%rbx</span></span>
<span class="line"><span>    d:	c3						retq</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个C语言程序<code>main.c</code></p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;studio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> multstore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 把前两参相乘的值给第三参，来自mstore.c文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 格式化输出2,3相乘的结果</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    multstore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2 * 3 --&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%1d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, d);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mult2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 返回两数相乘的值，提供给mstore.c文件用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main.c</code>和<code>mstore.c</code>生成可执行文件<code>prop</code>再反汇编为类汇编代码<code>prop.s</code>（和<code>mstore.c</code>反汇编的代码几乎一样）</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" data-title="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0000000000400540 &lt;multstore&gt;:</span></span>
<span class="line"><span>	400540:		53					push	%rbx</span></span>
<span class="line"><span>	400541:		48 89 d3			mov		%rdx,%rbx</span></span>
<span class="line"><span>	400544:		e8 42 00 00 00		callq	40058b &lt;mult2&gt;</span></span>
<span class="line"><span>    400549:		48 89 03			mov		%rax,(%rbx)</span></span>
<span class="line"><span>	40054c:		5b					pop		%rbx</span></span>
<span class="line"><span>	40054d:		c3					retq</span></span>
<span class="line"><span>	40054e:		90					nop</span></span>
<span class="line"><span>	40054f:		90					nop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于格式的注解" tabindex="-1"><a class="header-anchor" href="#关于格式的注解"><span>关于格式的注解</span></a></h3><p>解释汇编代码：见前</p><p>旁注：可以在C程序中插入汇编代码，有两种方法：</p><ul><li>编写完整函数到独立的汇编代码文件，再用汇编器和链接器合并起来</li><li>GCC的内联汇编特性，在C中包含简短的汇编代码</li></ul>`,33))])}const c=a(h,[["render",p],["__file","03. 程序的机器级表示.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/01.%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C/03.%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA.html","title":"《深入了解计算机系统》","lang":"zh-CN","frontmatter":{"description":"《深入了解计算机系统》 目录 [toc] 程序的机器级表示 详见汇编笔记 用十进制可能容易理解点：4位数能表示1万个数，8位数能表示1亿，16位数能表示1万亿个数，64位数能表示1064个数 旁注：IA32，为x86-64的32位前身 历史观点 Intel处理器的历史发展（影响机器级编程的特性） 机器语言有很多特性只有从历史的观点来看才有意义（当时技术...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/01.%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C/03.%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《深入了解计算机系统》"}],["meta",{"property":"og:description","content":"《深入了解计算机系统》 目录 [toc] 程序的机器级表示 详见汇编笔记 用十进制可能容易理解点：4位数能表示1万个数，8位数能表示1亿，16位数能表示1万亿个数，64位数能表示1064个数 旁注：IA32，为x86-64的32位前身 历史观点 Intel处理器的历史发展（影响机器级编程的特性） 机器语言有很多特性只有从历史的观点来看才有意义（当时技术..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《深入了解计算机系统》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.77,"words":2031},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/03. 程序的机器级表示.md","excerpt":"\\n<h1>目录</h1>\\n<p>[toc]</p>\\n<h1>程序的机器级表示</h1>\\n<p>详见汇编笔记</p>\\n<table>\\n<thead>\\n<tr>\\n<th>机器位数（字长、PC的大小）</th>\\n<th>可以指向多少个内存地址</th>\\n<th>可以使用多大的随机访问存储器</th>\\n<th>补充</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>16位（2B）微处理器</td>\\n<td>2<sup>16</sup></td>\\n<td>64KB（2<sup>16</sup>B）</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>32位（4B）</td>\\n<td>2<sup>32</sup></td>\\n<td>4GB（2<sup>32</sup>B）</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>64位（8B）</td>\\n<td>2<sup>64</sup></td>\\n<td>16EB（2<sup>64</sup>B）（2000亿亿B）</td>\\n<td>比TB后面还有个PB拍字节，才到EB艾字节</td>\\n</tr>\\n<tr>\\n<td>现代的64位（6B）</td>\\n<td>2<sup>48</sup></td>\\n<td>256TB（2<sup>48</sup>B）</td>\\n<td>现在的64位：被限制前16位为0，只能用后48位</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/03. 程序的机器级表示.md","value":{"title":"03. 程序的机器级表示","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/03. 程序的机器级表示.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,o as data};
