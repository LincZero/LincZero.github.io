import{_ as t,e as a,g as r,o as p}from"./app-DeGPQmv-.js";const n={};function o(s,e){return p(),a("div",null,e[0]||(e[0]=[r('<h1 id="gc-垃圾回收" tabindex="-1"><a class="header-anchor" href="#gc-垃圾回收"><span>GC 垃圾回收</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="c-的各种智能指针" tabindex="-1"><a class="header-anchor" href="#c-的各种智能指针"><span>C++的各种智能指针</span></a></h1><h2 id="shared-ptr和weak-ptr深入解析" tabindex="-1"><a class="header-anchor" href="#shared-ptr和weak-ptr深入解析"><span>shared_ptr和weak_ptr深入解析</span></a></h2><p>参考：<a href="https://www.cnblogs.com/litandy2016/p/11382721.html" target="_blank" rel="noopener noreferrer">【博客园】shared_ptr和weak_ptr深入解析</a></p><h3 id="shared-ptr" tabindex="-1"><a class="header-anchor" href="#shared-ptr"><span>shared_ptr</span></a></h3><p>就叫它共享指针，它存在的意义是根据客户对象的强引用计数管理客户对象生存期，强引用计数为0了就删除客户对象</p><h3 id="weak-ptr" tabindex="-1"><a class="header-anchor" href="#weak-ptr"><span>weak_ptr</span></a></h3><p>弱指针存在的意义在于，在使用客户对象的时候，如果客户对象已经销毁了依然可以引用客户对象而不至于崩溃。弱引用指针在使用客户对象时需要转成shared_ptr,如果客户对象删除了，会提示失败<br> 弱引用计数可以理解为_Ref_count这些计数对象的强引用，弱引用计数为0，就删除计数对象<br> 析构的时候只减少弱引用计数，如果弱引用计数为0，就是删除计数对象。</p><p>弱引用拷贝构造和赋值，只对新客户对象的弱引用计数加1，并对旧客户对象的弱引用计数减1，最后做析构判断处理。</p><h3 id="互相引用问题" tabindex="-1"><a class="header-anchor" href="#互相引用问题"><span>互相引用问题</span></a></h3><p>弱智针就是辅助共享指针相互引用的</p><p>要用智能指针就要保证客户对象不再被普通指针操作，不然会引起混乱。</p><p>上面这些东西都是原理，原理都是相通的，boost里的也是这样，QT里的也是这样，Android里的也是这样。</p>',14)]))}const d=t(n,[["render",o],["__file","C__的各种智能指针.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/C__%E7%9A%84%E5%90%84%E7%A7%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html","title":"GC 垃圾回收","lang":"zh-CN","frontmatter":{"description":"GC 垃圾回收 目录 C++的各种智能指针 shared_ptr和weak_ptr深入解析 参考：【博客园】shared_ptr和weak_ptr深入解析 shared_ptr 就叫它共享指针，它存在的意义是根据客户对象的强引用计数管理客户对象生存期，强引用计数为0了就删除客户对象 weak_ptr 弱指针存在的意义在于，在使用客户对象的时候，如果客户...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/04.%20%E4%BC%98%E5%8C%96%E5%B1%82/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/C__%E7%9A%84%E5%90%84%E7%A7%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"GC 垃圾回收"}],["meta",{"property":"og:description","content":"GC 垃圾回收 目录 C++的各种智能指针 shared_ptr和weak_ptr深入解析 参考：【博客园】shared_ptr和weak_ptr深入解析 shared_ptr 就叫它共享指针，它存在的意义是根据客户对象的强引用计数管理客户对象生存期，强引用计数为0了就删除客户对象 weak_ptr 弱指针存在的意义在于，在使用客户对象的时候，如果客户..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GC 垃圾回收\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/C++的各种智能指针.md","excerpt":"\\n<h1>目录</h1>\\n<h1>C++的各种智能指针</h1>\\n<h2>shared_ptr和weak_ptr深入解析</h2>\\n<p>参考：<a href=\\"https://www.cnblogs.com/litandy2016/p/11382721.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【博客园】shared_ptr和weak_ptr深入解析</a></p>\\n<h3>shared_ptr</h3>\\n<p>就叫它共享指针，它存在的意义是根据客户对象的强引用计数管理客户对象生存期，强引用计数为0了就删除客户对象</p>\\n<h3>weak_ptr</h3>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/C++的各种智能指针.md","value":{"title":"C++的各种智能指针","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/04. 优化层/GC 垃圾回收/C++的各种智能指针.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,l as data};
