import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as d,b as e,d as s,e as a,a as t}from"./app-DUaYLZrg.js";const r="/assets/vscode-hint-dark-c5d6cf83-DsUhnUqB.png",p="/assets/vscode-error-dark-4177ebab-DxhgXwfA.png",c="/assets/vscode-autocomplete-dark-ff24938c-Mk8pqpb5.png",u={},h=t('<h1 id="vuepress-hope主题" tabindex="-1"><a class="header-anchor" href="#vuepress-hope主题"><span>VuePress Hope主题</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="小白教程" tabindex="-1"><a class="header-anchor" href="#小白教程"><span>小白教程</span></a></h1><h2 id="准备教程" tabindex="-1"><a class="header-anchor" href="#准备教程"><span>准备教程</span></a></h2><h3 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境"><span>运行环境</span></a></h3>',5),m={href:"https://nodejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},b=t('<p>你需要下载并在你的电脑上安装最新的长期维护版。</p><h3 id="下载node-js" tabindex="-1"><a class="header-anchor" href="#下载node-js"><span>下载Node.js</span></a></h3><p>略</p><h3 id="安装node-js" tabindex="-1"><a class="header-anchor" href="#安装node-js"><span>安装Node.js</span></a></h3><p>略</p><h3 id="安装编辑器" tabindex="-1"><a class="header-anchor" href="#安装编辑器"><span>安装编辑器</span></a></h3><p>略</p><h3 id="pnmp" tabindex="-1"><a class="header-anchor" href="#pnmp"><span>Pnmp</span></a></h3>',8),k={href:"https://pnpm.io",target:"_blank",rel:"noopener noreferrer"},g=t(`<blockquote><p>我们推荐你使用 pnpm 作为项目管理器，因为 VuePress 和 VuePress Theme Hope 都是通过 pnpm 来管理依赖的。</p><p>pnpm 的一些功能可以保证你拥有正确的依赖，并且它能加速安装。</p></blockquote><p>在终端中输入下列命令安装 pnpm:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>corepack <span class="token builtin class-name">enable</span>
corepack prepare pnpm@latest <span class="token parameter variable">--activate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目"><span>创建项目</span></a></h2><p>此教程将指引你创建一个 VuePress Theme Hope 项目。</p><h3 id="选择合适的项目位置" tabindex="-1"><a class="header-anchor" href="#选择合适的项目位置"><span>选择合适的项目位置</span></a></h3><p>为了避免偶然间触发一些奇怪的问题，而你自己不会解决，请尽量避免使用包含中文文字、表情符号或空格的文件路径 (如: <code>C:\\Users\\小张\\Desktop\\VuePress 项目\\Hope 主题❤️\\</code>)。</p><p>建议使用纯英文路径 (如: <code>D:\\projects\\vuepress-theme-hope\\</code>)。</p><h3 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h3><p>在选定的位置所在文件夹中打开终端。</p><blockquote><p>请使用文件管理器打开对应文件夹，之后在上方的地址栏中输入 <code>cmd</code> 之后按下回车。</p></blockquote><p>在终端中执行下列命令之一:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># pnpm</span>
<span class="token function">pnpm</span> create vuepress-theme-hope my-docs

<span class="token comment"># yarn</span>
<span class="token function">yarn</span> create vuepress-theme-hope my-docs

<span class="token comment"># npm</span>
<span class="token function">npm</span> init vuepress-theme-hope my-docs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>文件夹参数</p><p>这里的 <code>my-docs</code> 是一个参数，代表 VuePress Theme Hope 项目的文件夹名称，在本教程中，我们将项目生成至当前目录下的 <code>my-docs</code> 文件夹。</p><p>如果你有需求，你可以更改此参数来使用一个新文件夹名称。</p></blockquote><blockquote><p>中文显示</p><p>如果你的英语很不好，请在第一次选择中通过键盘 <code>↓</code> 选择 <code>简体中文</code> 并回车来在后续流程中使用中文进行显示。</p></blockquote><blockquote><p>开发服务器</p><p>如果你在模板初始化成功后选择立即启动开发服务器，稍等片刻，你就可以在浏览器地址栏输入 <code>localhost:8080/</code> 访问开发服务器了。</p></blockquote><h2 id="项目指令" tabindex="-1"><a class="header-anchor" href="#项目指令"><span>项目指令</span></a></h2><p>本教程介绍 VuePress 项目命令</p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><ul><li><code>vuepress dev [dir]</code> 会启动一个开发服务器，以便让你在本地开发你的 VuePress 站点。</li><li><code>vuepress build [dir]</code> 会将你的 VuePress 站点构建成静态文件，以便你进行后续部署。</li></ul><blockquote><p>[!info] 使用模板</p><p>如果你在使用 VuePress Theme Hope 模板，你可以在 <code>package.json</code> 中发现下列三个命令:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;docs:build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build src&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;docs:clean-dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev src --clean-cache&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev src&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着你可以使用:</p><ul><li><code>pnpm docs:dev</code> 启动开发服务器</li><li><code>pnpm docs:build</code> 构建项目并输出</li><li><code>pnpm docs:clean-dev</code> 清除缓存并启动开发服务器</li></ul></blockquote><blockquote><p>终止开发服务器</p><p>如果你需要终止开发服务器，请点击终端，并连续两次按下 <code>Ctrl + C</code>。</p></blockquote><h3 id="升级版本" tabindex="-1"><a class="header-anchor" href="#升级版本"><span>升级版本</span></a></h3><p>如果你需要升级主题和 VuePress 版本，请执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># pnpm</span>
<span class="token function">pnpm</span> dlx vp-update

<span class="token comment"># yarn</span>
<span class="token function">yarn</span> dlx vp-update

<span class="token comment"># npm</span>
npx vp-update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[warning] 注意</p><p>任何以 <code>@vuepress/</code> 开头的官方包应该和 VuePress 保持相同版本。</p><p>比如，如果你正在使用 <code>@vuepress/plugin-search</code> 和 <code>@vuepress/utils</code>，你应该确保他们和 <code>vuepress</code> 版本相同</p><p>另外，如果你使用了其他第三方插件，请确保它兼容你要升级到的 VuePress 版本。</p></blockquote><h2 id="项目内容" tabindex="-1"><a class="header-anchor" href="#项目内容"><span>项目内容</span></a></h2><p>本教程指引你如何在 VuePress 项目中控制内容生成。</p><h3 id="页面的生成" tabindex="-1"><a class="header-anchor" href="#页面的生成"><span>页面的生成</span></a></h3><p>VuePress 是以 Markdown 为中心的。你项目中的每一个 Markdown 文件都是一个单独的页面。</p><p>默认情况下，页面的路由路径是根据你的 Markdown 文件的相对路径决定的。</p><p>由于你的项目是通过创建助手生成的，那么你会得到以下文件结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>└─ src
   ├─ guide
   │  ├─ ...
   │  └─ page.md
   │  └─ markdown.md
   │  └─ README.md
   ├─ ...
   ├─ slide.md
   └─ README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你的 Markdown 文件对应的路由路径为:</p><table><thead><tr><th>相对路径</th><th>路由路径</th></tr></thead><tbody><tr><td><code>/README.md</code></td><td><code>/</code></td></tr><tr><td><code>/slide.md</code></td><td><code>/slide.html</code></td></tr><tr><td><code>/guide/README.md</code></td><td><code>/guide/</code></td></tr><tr><td><code>/guide/slide.md</code></td><td><code>/guide/slide.html</code></td></tr><tr><td><code>/guide/page.md</code></td><td><code>/guide/page.html</code></td></tr></tbody></table><blockquote><p>README.md</p><p><code>README.md</code> 是特例，在 Markdown 中，按照约定俗成，它会作为所在文件夹的主页。所以在渲染为网页时，它的对应路径为网页中的主页路径 <code>index.html</code>。</p><p>这应该很好理解。</p></blockquote><h3 id="frontmatter" tabindex="-1"><a class="header-anchor" href="#frontmatter"><span>Frontmatter</span></a></h3>`,37),_={href:"https://yaml.org/",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"YAML",-1),E={href:"https://mister-hope.com/code/language/yaml/",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>Frontmatter 必须在 Markdown 文件的顶部，并且被包裹在一对三短划线中间。下面是一个基本的示例：</p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">lang</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN
<span class="token key atrule">title</span><span class="token punctuation">:</span> 页面的标题
<span class="token key atrule">description</span><span class="token punctuation">:</span> 页面的描述</span>
<span class="token punctuation">---</span></span>

<span class="token comment">&lt;!-- 这里是 Markdown 内容 --&gt;</span>

...

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你肯定注意到 Frontmatter 中的字段和 VuePress 配置文件十分类似。你可以通过 Frontmatter 来覆盖当前页面的 <code>lang</code>, <code>title</code>, <code>description</code> 等属性。因此，你可以把 Frontmatter 当作页面级作用域的配置，它通常具有最高优先级，所作配置仅对当前页面生效。</p><h3 id="markdown" tabindex="-1"><a class="header-anchor" href="#markdown"><span>Markdown</span></a></h3><p>每一个 Markdown 文件都会被 VuePress Theme Hope 处理，将文件内容渲染为网页内容。</p><p>都会被 VuePress Theme Hope 处理，将文件内容渲染为网页内容。</p>`,6),x=e("p",null,"Markdown 语法",-1),V={href:"https://theme-hope.vuejs.press/zh/cookbook/markdown/",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"大概十五分钟，你就可以学会如何书写 Markdown，看完之后记得回来！",-1),q=e("p",null,"你可以尝试自己编辑 Markdown 文件来修改模板的内容。如果你已启动开发服务器，那么修改后的结果会被实时同步到开发服务器上。",-1),j=e("p",null,"Markdown 语法扩展",-1),w={href:"https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"vuepress-plugin-md-enhance",-1),M={href:"https://theme-hope.vuejs.press/zh/guide/get-started/markdown.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<h2 id="配置项目" tabindex="-1"><a class="header-anchor" href="#配置项目"><span>配置项目</span></a></h2><h3 id="配置-vuepress" tabindex="-1"><a class="header-anchor" href="#配置-vuepress"><span>配置 VuePress</span></a></h3><p>如果没有配置文件，一个 VuePress 项目只能按照预设实现有限的功能，所以为了更好的自定义你的网站，VuePress 提供了配置文件。</p><p>VuePress 使用文档文件夹中的 <code>.vuepress</code> 文件夹存放配置，所有 VuePress 相关的文件都将会被放在这里。</p><p>对于 VuePress 站点来说，<code>.vuepress/config.ts</code> (或 <code>.vuepress/config.js</code>) 是必要的配置文件。</p><blockquote><p>使用 TS 配置文件</p><p>我们建议你使用 TypeScript 配置文件，以得到更好的类型提示、自动补全与错误检查。</p><p>如果你不熟悉 TypeScript，使用 JavaScript 配置文件也是可以的，但你最好使用诸如 VSCode 这种全面支持 TS/JS 语法的编辑器，以避免丢失下方提及的类型检查、自动补全与选项提示等功能。</p></blockquote><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h3><p>你需要在配置文件<code>.vuepress/config.ts</code> (或 <code>.vuepress/config.js</code>) 中，设置一个配置对象并将其导出。</p><p>为了能够得到正确的提示，我们建议从 <code>vuepress</code> 导入 <code>defineUserConfig</code> 并包裹配置对象：</p><p>（js版本略）</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// .vuepress/config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 此处放置配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模板中，为了避免配置文件过长，我们使用 JavaScript 原生提供的 ESM 特性，将主题配置、导航栏和侧边栏配置拆分到了单独的文件夹中。</p><p>模板将主题函数抽离到了 <code>.vuepress/theme.js</code>，并通过 <code>export default</code> 导出。</p><p><code>.vuepress/theme.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> hopeTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-theme-hope&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 我们默认导出了主题对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">hopeTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 主题配置</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后在配置文件中直接引入:</p><p><code>.vuepress/config.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ...</span>
<span class="token comment">// 我们在这里引入了主题</span>
<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">&quot;./theme.js&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// 这和 \`theme: hopeTheme({/* 你的配置 */})\` 是等价的</span>
  theme<span class="token punctuation">,</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也能更清晰的帮助你理解配置中的站点配置和主题配置</p><h3 id="配置作用域" tabindex="-1"><a class="header-anchor" href="#配置作用域"><span>配置作用域</span></a></h3><blockquote><h4 id="站点配置" tabindex="-1"><a class="header-anchor" href="#站点配置"><span>站点配置</span></a></h4></blockquote><p>站点配置中的配置项被 VuePress 直接读取，和主题无关且在所有主题均可生效。</p><p>我们知道，每一个站点都应该有它的 <code>lang</code>, <code>title</code> 和 <code>description</code> 等属性，因此 VuePress 内置支持了这些属性的配置。</p>`,23),N=e("p",null,"站点配置",-1),H={href:"https://vuejs.press/zh/reference/config.html",target:"_blank",rel:"noopener noreferrer"},S=e("blockquote",null,[e("h4",{id:"主题配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主题配置"},[e("span",null,"主题配置")])])],-1),T=e("p",null,[s("主题配置是你传递给 "),e("code",null,"hopeTheme"),s(" 函数的对象，它将由 VuePress Theme Hope 处理。")],-1),D={href:"https://theme-hope.vuejs.press/zh/config/",target:"_blank",rel:"noopener noreferrer"},C=t('<blockquote><p>提示与检查</p><p>如果你在使用支持 TS/JS 语言特性的编辑器 (如 VSCode)，你可以很方便的得到选项提示与检查。</p><ul><li>你可以将鼠标悬停在某个选项以获得提示: <img src="'+r+'" alt="选项提示" loading="lazy"></li><li>如果你输入了错误的选项名称或非法的值，你会得到错误提示: <img src="'+p+'" alt="错误提示" loading="lazy"></li><li>你可以在输入时得到自动补全: <img src="'+c+'" alt="自动补全" loading="lazy"></li></ul></blockquote><blockquote><h4 id="更多" tabindex="-1"><a class="header-anchor" href="#更多"><span>更多</span></a></h4></blockquote>',2),R=e("p",null,"插件配置",-1),z=e("code",null,"plugins.插件名称",-1),F={href:"https://theme-hope.vuejs.press/zh/config/plugins/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://theme-hope.vuejs.press/zh/cookbook/vuepress/plugin.html",target:"_blank",rel:"noopener noreferrer"},G=t("<p>样式配置</p><p>VuePress Theme Hope 主题按照约定俗称，使用 <code>.vuepress/styles</code> 文件夹存放样式配置。</p><p>你可以在此文件夹中:</p><ul><li>创建 <code>index.scss</code> 来注入额外的 CSS 样式</li><li>创建 <code>config.scss</code> 来进行样式配置</li><li>创建 <code>palette.scss</code> 来配置颜色与布局</li></ul>",4),L={href:"https://theme-hope.vuejs.press/zh/config/style.html",target:"_blank",rel:"noopener noreferrer"},J=e("p",null,"页面配置",-1),Y={href:"https://theme-hope.vuejs.press/zh/cookbook/tutorial/content.html#frontmatter",target:"_blank",rel:"noopener noreferrer"},O=t(`<h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h2><h3 id="vuepress-项目结构" tabindex="-1"><a class="header-anchor" href="#vuepress-项目结构"><span>VuePress 项目结构</span></a></h3><p>VuePress 只控制 VuePress 项目文件夹中的文件，也就是默认模板生成的 <code>src</code> 文件夹，项目下的其他文件不受 VuePress 控制。</p><p>一个基本的项目结构如下:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.
├── .github (可选的) → GitHub 配置文件存放路径
│    └── workflow → GitHub 工作流配置
│         └── docs-deploy.yml → 自动部署文档的工作流
│
├── src → 文档文件夹
│    │
│    ├── .vuepress (可选的) → VuePress 配置文件夹
│    │    │
│    │    ├── dist (默认的) → 构建输出目录
│    │    │
│    │    ├── public (可选的) → 静态资源目录
│    │    │
│    │    ├── styles (可选的) → 用于存放样式相关的文件
│    │    │
│    │    ├── config.{js,ts} (可选的) → 配置文件的入口文件
│    │    │
│    │    └── client.{js,ts} (可选的) → 客户端文件
│    │
│    ├── ... → 其他项目文档
│    │
│    └── README.md → 项目主页
│
└── package.json → Nodejs 配置文件

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目"><span>部署项目</span></a></h2><h3 id="构建项目" tabindex="-1"><a class="header-anchor" href="#构建项目"><span>构建项目</span></a></h3><p>当你在本地完成项目的初步开发后，你就可以使用 <code>pnpm docs:build</code> 命令构建网站。</p><p>如果你在使用模板，网站内容将会输出到 VuePress 项目的 <code>.vuepress/dist</code> 文件夹下。这些文件就是 VuePress 的最终输出结果。</p><p>你可以将此文件夹的内容部署到你网站的服务器上。最简单的做法是上传到 GitHub 并开启 GitHub Pages。</p><h3 id="部署到-github-pages" tabindex="-1"><a class="header-anchor" href="#部署到-github-pages"><span>部署到 GitHub Pages</span></a></h3>`,11),Z={href:"https://vuejs.press/zh/reference/config.html#base",target:"_blank",rel:"noopener noreferrer"},I=t("<ul><li>如果你准备发布到 <code>https://&lt;USERNAME&gt;.github.io/</code>，你必须将整个项目上传至 <code>https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io</code> 仓库。在这种情况下你无需进行任何更改，因为 base 默认就是 <code>&quot;/&quot;</code>。</li><li>如果你的仓库地址是一个普通的形如 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> 的格式，网站将会被发布到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code> ，也就是说，你需要将 base 设置为 <code>&quot;/&lt;REPO&gt;/&quot;</code>。</li></ul>",1),X=e("p",null,"Github 教程",-1),K={href:"https://mister-hope.com/code/github/",target:"_blank",rel:"noopener noreferrer"},Q=e("h3",{id:"其他部署方式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#其他部署方式"},[e("span",null,"其他部署方式")])],-1),W={href:"https://vuejs.press/zh/guide/deployment.html",target:"_blank",rel:"noopener noreferrer"},$=e("blockquote",null,[e("p",null,"Gitee"),e("p",null,[s("如果你在使用码云，你需要注意码云的特殊仓库是 "),e("code",null,"https://gitee.com/<USERNAME>/<USERNAME>"),s("。如果你推送到这个仓库，你的文档将会发布在 "),e("code",null,"https://<USERNAME>.gitee.io"),s(" 上。")])],-1);function ee(se,ne){const n=l("ExternalLinkIcon");return i(),d("div",null,[h,e("p",null,[e("a",m,[s("Node.js®"),a(n)]),s(" 是一个基于 "),e("a",v,[s("Chrome V8 引擎"),a(n)]),s(" 的 JavaScript 运行时环境。")]),b,e("p",null,[s("在你安装 Node.js 之后，请安装 "),e("a",k,[s("pnpm"),a(n)]),s("。")]),g,e("p",null,[s("Frontmatter 是 VuePress 中很重要的一个概念，它用于承载 Markdown 文件的配置。Markdown 文件可以包含一个 "),e("a",_,[s("YAML"),a(n)]),s(" Frontmatter。")]),e("blockquote",null,[f,e("p",null,[s("如果你对 YAML 也不熟悉，你可以查看 "),e("a",E,[s("YAML 教程"),a(n)]),s("。")])]),P,e("blockquote",null,[x,e("p",null,[s("如果你尚不了解 Markdown，请查看 "),e("a",V,[s("Markdown 教程"),a(n)]),s("。")]),y]),q,e("blockquote",null,[j,e("ul",null,[e("li",null,[s("VuePress 自身对 Markdown 语法进行了一些扩展，关于这些扩展的语法，详见 "),e("a",w,[s("VuePress → Markdown"),a(n)]),s("。")]),e("li",null,[s("主题通过 "),A,s(" 额外启用了一些语法扩展，详见 "),e("a",M,[s("指南 → Markdown"),a(n)]),s("。")])])]),B,e("blockquote",null,[N,e("p",null,[s("你可以前往 "),e("a",H,[s("VuePress2 → 参考 → 配置"),a(n)]),s(" 查看所有 VuePress 配置。")])]),S,T,e("p",null,[s("你可以在 "),e("a",D,[s("配置 → 主题配置"),a(n)]),s(" 中找到全部的主题配置。")]),C,e("blockquote",null,[R,e("p",null,[s("VuePress Theme Hope 主题捆绑了一些插件，你可以在主题选项中通过 "),z,s(" 来传递插件选项，详见 "),e("a",F,[s("配置 → 主题插件配置"),a(n)]),s("。")]),e("p",null,[s("如果你想要额外使用插件，请自行调用插件并传递插件选项，详见 "),e("a",U,[s("VuePress → 插件"),a(n)]),s("。")])]),e("blockquote",null,[G,e("p",null,[s("更多详情，详见 "),e("a",L,[s("配置 → 样式配置"),a(n)]),s("。")])]),e("blockquote",null,[J,e("p",null,[s("VuePress 支持在页面范围内通过 Markdown 文件中的 YAML Frontmatter 进行特定页面的配置，详见之前章节中的 "),e("a",Y,[s("项目内容 → Frontmatter"),a(n)]),s("。")])]),O,e("p",null,[s("如果你在使用模板，且在创建过程中选择了创建自动部署文档的 GitHub 工作流，那么你唯一要做的就是设置正确的 "),e("a",Z,[s("base 选项"),a(n)]),s("。")]),I,e("blockquote",null,[X,e("p",null,[s("关于 GitHub 的相关教程，你可以参考 "),e("a",K,[s("GitHub 简介"),a(n)]),s("。")])]),Q,e("p",null,[s("关于其他部署方式，请参阅 "),e("a",W,[s("VuePress → 部署"),a(n)]),s("。")]),$])}const oe=o(u,[["render",ee],["__file","01. 小白教程.html.vue"]]),le=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20VuePress2%20(Vue3)/03.%20%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/Hope%E4%B8%BB%E9%A2%98/01.%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/01.%20%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B.html","title":"VuePress Hope主题","lang":"zh-CN","frontmatter":{"description":"VuePress Hope主题 目录 小白教程 准备教程 运行环境 Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境。 你需要下载并在你的电脑上安装最新的长期维护版。 下载Node.js 略 安装Node.js 略 安装编辑器 略 Pnmp 在你安装 Node.js 之后，请安装 pnpm。 我们推荐你使用 ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20VuePress2%20(Vue3)/03.%20%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/Hope%E4%B8%BB%E9%A2%98/01.%20%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/01.%20%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"VuePress Hope主题"}],["meta",{"property":"og:description","content":"VuePress Hope主题 目录 小白教程 准备教程 运行环境 Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境。 你需要下载并在你的电脑上安装最新的长期维护版。 下载Node.js 略 安装Node.js 略 安装编辑器 略 Pnmp 在你安装 Node.js 之后，请安装 pnpm。 我们推荐你使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VuePress Hope主题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"VuePress Hope主题","slug":"vuepress-hope主题","link":"#vuepress-hope主题","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"小白教程","slug":"小白教程","link":"#小白教程","children":[{"level":2,"title":"准备教程","slug":"准备教程","link":"#准备教程","children":[{"level":3,"title":"运行环境","slug":"运行环境","link":"#运行环境","children":[]},{"level":3,"title":"下载Node.js","slug":"下载node-js","link":"#下载node-js","children":[]},{"level":3,"title":"安装Node.js","slug":"安装node-js","link":"#安装node-js","children":[]},{"level":3,"title":"安装编辑器","slug":"安装编辑器","link":"#安装编辑器","children":[]},{"level":3,"title":"Pnmp","slug":"pnmp","link":"#pnmp","children":[]}]},{"level":2,"title":"创建项目","slug":"创建项目","link":"#创建项目","children":[{"level":3,"title":"选择合适的项目位置","slug":"选择合适的项目位置","link":"#选择合适的项目位置","children":[]},{"level":3,"title":"初始化项目","slug":"初始化项目","link":"#初始化项目","children":[]}]},{"level":2,"title":"项目指令","slug":"项目指令","link":"#项目指令","children":[{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"升级版本","slug":"升级版本","link":"#升级版本","children":[]}]},{"level":2,"title":"项目内容","slug":"项目内容","link":"#项目内容","children":[{"level":3,"title":"页面的生成","slug":"页面的生成","link":"#页面的生成","children":[]},{"level":3,"title":"Frontmatter","slug":"frontmatter","link":"#frontmatter","children":[]},{"level":3,"title":"Markdown","slug":"markdown","link":"#markdown","children":[]}]},{"level":2,"title":"配置项目","slug":"配置项目","link":"#配置项目","children":[{"level":3,"title":"配置 VuePress","slug":"配置-vuepress","link":"#配置-vuepress","children":[]},{"level":3,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":3,"title":"配置作用域","slug":"配置作用域","link":"#配置作用域","children":[]}]},{"level":2,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[{"level":3,"title":"VuePress 项目结构","slug":"vuepress-项目结构","link":"#vuepress-项目结构","children":[]}]},{"level":2,"title":"部署项目","slug":"部署项目","link":"#部署项目","children":[{"level":3,"title":"构建项目","slug":"构建项目","link":"#构建项目","children":[]},{"level":3,"title":"部署到 GitHub Pages","slug":"部署到-github-pages","link":"#部署到-github-pages","children":[]},{"level":3,"title":"其他部署方式","slug":"其他部署方式","link":"#其他部署方式","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.06,"words":3019},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/01. VuePress2 (Vue3)/03. 主题扩展/Hope主题/01. 基础教程/01. 小白教程.md","autoDesc":true}');export{oe as comp,le as data};
