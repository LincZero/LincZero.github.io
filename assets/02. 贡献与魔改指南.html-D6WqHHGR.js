import{_ as s,c as e,e as a,o as l}from"./app-CZqDObZ4.js";const n={};function t(h,i){return l(),e("div",null,i[0]||(i[0]=[a(`<h1 id="贡献与魔改指南" tabindex="-1"><a class="header-anchor" href="#贡献与魔改指南"><span>贡献与魔改指南</span></a></h1><p>自定义方式应该是有三种：</p><ul><li>源码修改、贡献 <ul><li>修改后贡献</li><li>修改后发布到自己的npm</li><li>修改后直接使用</li></ul></li><li>替换主题组件</li><li>主题继承</li></ul><h2 id="源码修改、贡献" tabindex="-1"><a class="header-anchor" href="#源码修改、贡献"><span>源码修改、贡献</span></a></h2><p>这里我分了三种源码使用流程：</p><h3 id="仅git修改全流程" tabindex="-1"><a class="header-anchor" href="#仅git修改全流程"><span>仅git修改全流程</span></a></h3><p>这一点和其他git项目一致，没啥好说的。</p><p>细节上可以参考：https://theme-hope.vuejs.press/zh/contribution.html#%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># github上pull</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/LincZero/vuepress-theme-hope.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vuepress-theme-hope</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> submodule</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # demo和docs，可以不更新。更多项目主题没有用git submodule，属于是monorepe风格的管理</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pnpm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改项目，开发期间可以用 pnpm dev、pnpm docs:vite-build 来调试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># github上pr</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包到自己的新npm的流程" tabindex="-1"><a class="header-anchor" href="#打包到自己的新npm的流程"><span>打包到自己的新npm的流程</span></a></h3><h3 id="不打包到npm直接使用于项目的流程" tabindex="-1"><a class="header-anchor" href="#不打包到npm直接使用于项目的流程"><span>不打包到npm直接使用于项目的流程</span></a></h3><h2 id="别名" tabindex="-1"><a class="header-anchor" href="#别名"><span>别名</span></a></h2><p>这个功能从根本是webpack或vite提供的。</p><p>而vuepress和主题也对此有良好支持，例如够支持替换主题里的组件。 主题中可替换的组件：https://theme-hope.vuejs.press/zh/guide/advanced/replace.html#%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%88%AB%E5%90%8D%E6%9B%BF%E6%8D%A2%E7%BB%84%E4%BB%B6</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><ol><li><p>准备好替换组件。这里复制旧组件到新位置，除了需要修改的位置外，还有另一些路径<strong>需要改动</strong>（如果不是重新造轮子就无需这一步）</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v 这种在components路径下的一般无需修改，@theme-hope对应的tsconfig.json设置的路径映射：&quot;@theme-hope/*&quot;: [&quot;./src/client/*.js&quot;]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> SidebarChild</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@theme-hope/modules/sidebar/components/SidebarChild&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import &quot;../styles/sidebar.scss&quot;; 需要修改成：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/sidebar/styles/sidebar.scss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import { resolveSidebarItems } from &quot;./resolveConfig.js&quot;; 需要修改成：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resolveSidebarItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/lib/client/modules/sidebar/composables/resolveConfig&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>config.ts。Vue别名替换</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">getDirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@vuepress/utils&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // vuepress别名系统，需要：pnpm install -D @vuepress/utils</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> __dirname</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getDirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineUserConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    alias</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;@theme-hope/modules/sidebar/components/Sidebar&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;../../module/sidebar/components/Sidebar.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>theme.ts。主题允许可被替换</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hopeTheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">custom</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="别名替换的路径问题" tabindex="-1"><a class="header-anchor" href="#别名替换的路径问题"><span>别名替换的路径问题</span></a></h3><p>这点挺坑的，如果替换的新组件不再import旧组件相对路径的其他东西，那倒不需要担心这个。但如果想复用一些东西，就会非常难受。</p><p>下面说一些，<strong>仅微改旧组件进行拷贝复用时，路径的修改方法</strong>：</p><h4 id="复制法" tabindex="-1"><a class="header-anchor" href="#复制法"><span>复制法</span></a></h4><p>一、复制一份到新路径。不适合递归import这样做，要复制一堆东西，scss倒是可以这样做</p><h4 id="node-modules法" tabindex="-1"><a class="header-anchor" href="#node-modules法"><span>node_modules法</span></a></h4><p>二、使用vuepress-theme-hope (编译后，在node_modules) 内的文件。由于是编译过的，会缺失一些文件，但像scss和个别js，可以使用这种方法</p><p>另外需要注意，这里的 <code>vueperss-theme-hope/……</code> 的起点是：<code>/node_modules/vuepress-theme-hope/lib/(client/module/)……</code></p><p>（注意1：不能加lib，加了不飘红但编译错，不加飘红但编译对） （注意2：而且个路径索引还有一定的弹性，有些智能，居然还能让你少写几个路径段）</p><div class="language-tsx line-numbers-mode" data-highlighter="shiki" data-ext="tsx" data-title="tsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 例如：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import &quot;../styles/sidebar.scss&quot;; 需要修改成：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/sidebar/styles/sidebar.scss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import { resolveSidebarItems } from &quot;./resolveConfig.js&quot;; // 原写法，错误</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import { resolveSidebarItems } from &quot;vuepress-theme-hope/lib/client/modules/sidebar/composables/resolveConfig&quot;; // 不飘红但编译错</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resolveSidebarItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/sidebar/composables/resolveConfig.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 飘红但编译对</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resolveSidebarItems</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/module/sidebar/composables/resolveConfig.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这两个都行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// import CommonWrapper from &quot;vuepress-theme-hope/lib/client/components/CommonWrapper&quot; // 不飘红但编译错</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CommonWrapper</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/components/CommonWrapper.js&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 飘红但编译对</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CommonWrapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// v import { ArticleInfoType } from &quot;../../shared/index.js&quot;;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ArticleInfoType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuepress-theme-hope/client/../shared/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这个就有点神奇了，必须写client再往前退才行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编辑器代码会有飘红</strong></p><h4 id="相对路径问题" tabindex="-1"><a class="header-anchor" href="#相对路径问题"><span>相对路径问题</span></a></h4><p>三、普通相对路径问题</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果是相对路径，是基于新组件文件的路径的。但需要特别注意tsc相对路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="tsc路径问题" tabindex="-1"><a class="header-anchor" href="#tsc路径问题"><span>tsc路径问题</span></a></h4><p>四、tsc相对路径问题 (tsconfig.json简称tsc)</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// @theme-hope对应的tsconfig.json设置的路径映射：&quot;@theme-hope/*&quot;: [&quot;./src/client/*.js&quot;]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> SidebarChild</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@theme-hope/modules/sidebar/components/SidebarChild&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里别名替换后案例应该看起来是相对路径，但其实不是</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里不类似C的宏，不是简单的字符串替换，而是会将@theme-hop这个符号的位置强行定位到一个固定的位置</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 得益于此，通常将旧组件拷贝为新组件后，这种路径是不需要再去进行修改的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当然不去改动其实是一种取巧而不正规的方法，不改的一个缺点是：编辑器代码会有飘红</strong></p><p>想要不飘红，就抄一下tsconfig.ts</p><h4 id="import-type-form-路径" tabindex="-1"><a class="header-anchor" href="#import-type-form-路径"><span>import type form 路径</span></a></h4><p>这种情况下，这个import type一般是可选的，用来规范静态类型。如果没空去修改，直接注释掉这行就行了</p><p><strong>当然不去改动其实是一种取巧而不正规的方法，不改的一个缺点是：编辑器代码会有飘红</strong></p><h3 id="一些原理-gpt4" tabindex="-1"><a class="header-anchor" href="#一些原理-gpt4"><span>一些原理 (GPT4)</span></a></h3><h4 id="dist与lib目录-node-modules下" tabindex="-1"><a class="header-anchor" href="#dist与lib目录-node-modules下"><span>dist与lib目录 (node_modules下)</span></a></h4><p>有的库在node_modules路径下的子路径是dist（例如：@vuepress/utils/dist），而有的则是lib（例如：@vuepress/helper/lib），这两种方式有什么区别吗</p><p><code>dist</code>和<code>lib</code>这两个目录通常都是用来存储编译后的代码，但是它们之间的确存在一些差异。</p><p><code>dist</code>（distribution）目录通常用于存储经过编译和打包后的代码，这些代码可以直接在生产环境中使用。这个目录中的代码通常会被编译为更低版本的JavaScript，以确保在各种环境中的兼容性。另外，这个目录中的文件可能会被压缩和优化，以减少文件大小和提高运行效率。</p><p><code>lib</code>（library）目录通常用于存储编译后但未打包的代码，这些代码通常是模块化的，可以被其他代码导入使用。这个目录中的代码可能会被编译为更高级的JavaScript，以利用新的语言特性，但通常不会进行压缩和优化。</p><p>这两个目录的具体用途可能会根据不同的项目和团队的约定而有所不同，所以如果你在一个项目中看到这两个目录，最好查阅该项目的文档，以了解它们的具体用途。</p><h4 id="lib目录的包含问题" tabindex="-1"><a class="header-anchor" href="#lib目录的包含问题"><span>lib目录的包含问题</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 其中该路径存在：/node_modules/@vuepress/helper/lib/client</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@vuepress/helper/client&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 该写法飘红但编译正确</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@vuepress/lib/helper/client&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 该写法不飘红但运行期会存在错误：[vite] Internal server error: Missing &quot;./lib/client&quot; specifier in &quot;@vuepress/helper&quot; package</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题可能是由于你的IDE（例如VS Code）或者其他的类型检查工具（例如TypeScript）对模块路径的解析方式和实际的打包工具（例如Vite，Webpack等）不一致导致的。</p><p>在你的例子中，看起来你的IDE或者类型检查工具可能会默认把 <code>@vuepress/helper</code> 解析为 <code>@vuepress/helper/index</code> 或者 <code>@vuepress/helper/main</code>，然后再从这个文件中导入 <code>client</code>。但是在实际的打包过程中，Vite可能会直接把 <code>@vuepress/helper/client</code> 解析为 <code>/node_modules/@vuepress/helper/lib/client</code>。</p><p>所以，当你使用 <code>import {...} from &quot;@vuepress/helper/client&quot;;</code> 时，虽然IDE或者类型检查工具会提示错误（飘红），但是实际的打包过程中，Vite能够正确地找到对应的文件，所以编译是正确的。</p><p>而当你使用 <code>import {...} from &quot;@vuepress/lib/helper/client&quot;;</code> 时，IDE或者类型检查工具可能不会提示错误（不飘红），但是在实际的打包过程中，Vite无法找到对应的文件，所以会报错。</p><p>为了解决这个问题，你可以尝试以下方法：</p><ol><li>确认你的IDE或者类型检查工具的配置，确保它们的模块路径解析方式和Vite一致。</li><li>检查 <code>@vuepress/helper</code> 包的 <code>package.json</code> 文件，看看是否有 <code>main</code> 或者 <code>module</code> 字段指向了错误的入口文件。</li><li>如果可能，你也可以尝试更新你的IDE、类型检查工具或者打包工具到最新版本，看看是否能解决这个问题。</li></ol><p>补充：</p><blockquote><p>@USH2A 群友说的飘红的原因：</p><p>类型检查是类型检查，编译是编译，你要怪就怪不是 esm only 吧，cjs 和 esm，再加个 ts，复杂度指数上升，因为根本没有标准做法，只有规范做法，这就导致你抄别人的你自己不能运行的运行，因为每个人的配置不一样</p></blockquote><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2>`,56)]))}const r=s(n,[["render",t],["__file","02. 贡献与魔改指南.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/03.%20%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/Hope%E4%B8%BB%E9%A2%98/09.%20%E6%BA%90%E7%A0%81/02.%20%E8%B4%A1%E7%8C%AE%E4%B8%8E%E9%AD%94%E6%94%B9%E6%8C%87%E5%8D%97.html","title":"贡献与魔改指南","lang":"zh-CN","frontmatter":{"tags":["源码"],"description":"贡献与魔改指南 自定义方式应该是有三种： 源码修改、贡献 修改后贡献 修改后发布到自己的npm 修改后直接使用 替换主题组件 主题继承 源码修改、贡献 这里我分了三种源码使用流程： 仅git修改全流程 这一点和其他git项目一致，没啥好说的。 细节上可以参考：https://theme-hope.vuejs.press/zh/contribution....","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/03.%20%E4%B8%BB%E9%A2%98%E6%89%A9%E5%B1%95/Hope%E4%B8%BB%E9%A2%98/09.%20%E6%BA%90%E7%A0%81/02.%20%E8%B4%A1%E7%8C%AE%E4%B8%8E%E9%AD%94%E6%94%B9%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"贡献与魔改指南"}],["meta",{"property":"og:description","content":"贡献与魔改指南 自定义方式应该是有三种： 源码修改、贡献 修改后贡献 修改后发布到自己的npm 修改后直接使用 替换主题组件 主题继承 源码修改、贡献 这里我分了三种源码使用流程： 仅git修改全流程 这一点和其他git项目一致，没啥好说的。 细节上可以参考：https://theme-hope.vuejs.press/zh/contribution...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"源码"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贡献与魔改指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"贡献与魔改指南","slug":"贡献与魔改指南","link":"#贡献与魔改指南","children":[{"level":2,"title":"源码修改、贡献","slug":"源码修改、贡献","link":"#源码修改、贡献","children":[{"level":3,"title":"仅git修改全流程","slug":"仅git修改全流程","link":"#仅git修改全流程","children":[]},{"level":3,"title":"打包到自己的新npm的流程","slug":"打包到自己的新npm的流程","link":"#打包到自己的新npm的流程","children":[]},{"level":3,"title":"不打包到npm直接使用于项目的流程","slug":"不打包到npm直接使用于项目的流程","link":"#不打包到npm直接使用于项目的流程","children":[]}]},{"level":2,"title":"别名","slug":"别名","link":"#别名","children":[{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":3,"title":"别名替换的路径问题","slug":"别名替换的路径问题","link":"#别名替换的路径问题","children":[{"level":4,"title":"复制法","slug":"复制法","link":"#复制法","children":[]},{"level":4,"title":"node_modules法","slug":"node-modules法","link":"#node-modules法","children":[]},{"level":4,"title":"相对路径问题","slug":"相对路径问题","link":"#相对路径问题","children":[]},{"level":4,"title":"tsc路径问题","slug":"tsc路径问题","link":"#tsc路径问题","children":[]},{"level":4,"title":"import type form 路径","slug":"import-type-form-路径","link":"#import-type-form-路径","children":[]}]},{"level":3,"title":"一些原理 (GPT4)","slug":"一些原理-gpt4","link":"#一些原理-gpt4","children":[{"level":4,"title":"dist与lib目录 (node_modules下)","slug":"dist与lib目录-node-modules下","link":"#dist与lib目录-node-modules下","children":[]},{"level":4,"title":"lib目录的包含问题","slug":"lib目录的包含问题","link":"#lib目录的包含问题","children":[]}]}]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]}]}],"git":{},"readingTime":{"minutes":6.88,"words":2064},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/VuePress2 (Vue3)/03. 主题扩展/Hope主题/09. 源码/02. 贡献与魔改指南.md","excerpt":"\\n<p>自定义方式应该是有三种：</p>\\n<ul>\\n<li>源码修改、贡献\\n<ul>\\n<li>修改后贡献</li>\\n<li>修改后发布到自己的npm</li>\\n<li>修改后直接使用</li>\\n</ul>\\n</li>\\n<li>替换主题组件</li>\\n<li>主题继承</li>\\n</ul>\\n<h2>源码修改、贡献</h2>\\n<p>这里我分了三种源码使用流程：</p>\\n<h3>仅git修改全流程</h3>\\n<p>这一点和其他git项目一致，没啥好说的。</p>\\n<p>细节上可以参考：https://theme-hope.vuejs.press/zh/contribution.html#%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/VuePress2 (Vue3)/03. 主题扩展/Hope主题/09. 源码/02. 贡献与魔改指南.md","value":{"title":"02. 贡献与魔改指南","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/VuePress2 (Vue3)/03. 主题扩展/Hope主题/09. 源码/02. 贡献与魔改指南.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,d as data};
