import{_ as l,c as i,a as n,b as o,d as s,e as a,o as r,r as p}from"./app-BosG0j7X.js";const d={},u={href:"https://www.boost.org/doc/libs/1_83_0/more/getting_started/windows.html",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.boost.org/doc/libs/1_83_0/more/getting_started/unix-variants.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.bilibili.com/video/BV1hG411i7XR",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.bilibili.com/video/BV1C5411a74F",target:"_blank",rel:"noopener noreferrer"};function m(k,t){const e=p("ExternalLinkIcon");return r(),i("div",null,[t[14]||(t[14]=n("h1",{id:"boost",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#boost"},[n("span",null,"Boost")])],-1)),t[15]||(t[15]=n("p",null,"参考：",-1)),n("ul",null,[n("li",null,[t[9]||(t[9]=n("p",null,"官网资料",-1)),n("ul",null,[t[6]||(t[6]=n("li",null,[n("p",null,"官网：https://www.boost.org/")],-1)),n("li",null,[t[5]||(t[5]=n("p",null,"官网文档：(以1_83_0 为例)",-1)),n("ul",null,[n("li",null,[t[2]||(t[2]=o("GettingStarted：https://www.boost.org/doc/libs/release/more/getting_started/index.html 没有大纲、排版也很糟糕，搞得我还以为没内容，原来内容在右下的一下行超链接： Next: ")),n("a",u,[t[0]||(t[0]=o("Getting Started on Microsoft Windows")),s(e)]),t[3]||(t[3]=o(" or ")),n("a",c,[t[1]||(t[1]=o("Getting Started on Unix variants (e.g. Linux, MacOS)")),s(e)])]),t[4]||(t[4]=n("li",null,"Reference：https://www.boost.org/doc/libs/1_83_0",-1))])]),t[7]||(t[7]=n("li",null,[n("p",null,"官网下载：https://boostorg.jfrog.io/artifactory/main/release/")],-1)),t[8]||(t[8]=n("li",null,[n("p",null,"编译说明文档：https://boostorg.github.io/build/manual/master/index.html")],-1))])]),t[13]||(t[13]=n("li",null,[n("p",null,"新文档（官网文档太丑辣）"),n("ul",null,[n("li",null,"http://zh.highscore.de/cpp/boost/（还不错，虽然还是有点丑，但大纲整齐，相比原文档好很多了）"),n("li",null,"https://groups.google.com/g/boost_doc_translation/c/iZdiPl8T-78?pli=1")])],-1)),n("li",null,[t[12]||(t[12]=n("p",null,"视频：好像没什么比较好的",-1)),n("ul",null,[n("li",null,[n("a",b,[t[10]||(t[10]=o("【C++】C++组件库Boost")),s(e)])]),n("li",null,[n("a",g,[t[11]||(t[11]=o("Boost深入剖析之使用技巧")),s(e)])])])])]),t[16]||(t[16]=a(`<h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><p>首先说明：</p><ol><li>Boost项目的<strong>Git子模块</strong>非常多，或者说里面的子库几乎都是子模块，可以根据子模块对目录进行进一步拆解</li><li>从官网直接下载的压缩包，和Github上的源码路径有略微不同</li></ol><p>个人整理：</p><p>boost_1_83_0</p><ul><li>(bin.v2/)，运行b2.exe后生成，文件夹非常大</li><li>boost/，<strong>按子库再细分</strong>。所有Boost头文件，即里面的各种子库。<strong>在源代码里是没有这一项的，直接下载则是有的</strong><ul><li>any</li><li>any.hpp</li><li>……</li></ul></li><li>(lib/)，编译后才有，预编译的二进制库文件</li><li>libs/，<strong>按子库再细分</strong>。包括：测试程序、cpp源码、文档等</li><li>status/，<s>运行b2.exe后生成</s>，“Boost-wide test suite”</li><li>tools/，一些公用的东西，例如：Boost.Build, quickbook, bcp <ul><li>build/src/engine/b2.exe，这两个exe文件是一样的，但和根的那个b2.exe不同</li><li>build/src/engine/bjam.exe，这两个exe文件是一样的，但和根的那个b2.exe不同</li></ul></li><li>(b2.exe)，运行booststrap之后才会出现这个文件，默认安装再点击这个Build Boost C++ Libraries.</li><li>boost-build.jam</li><li>boostcpp.jam</li><li>bootstrap.bat，Windows运行这个编译 bjam</li><li>(boot)</li><li>strap.sh，Linux运行这个 bjam</li><li>INSTALL</li><li>Jamroot</li><li>(project-config.jam)，运行b2.exe后生成</li><li>(文档类) <ul><li>doc/，所有Boost库文档的子集</li><li>more/，一些额外的Policy文档等。这是Git子模块来的</li><li>boost.css</li><li>boost.png</li><li>index.htm，www.boost.org 的拷贝</li><li>index.html，www.boost.org 的拷贝</li><li>LICENSE_1_0.txt</li><li>README.md</li><li>rst.css</li></ul></li></ul><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>官方说法是：</p><blockquote><p>许多人想知道的第一件事是，“我该如何构建 Boost？好消息是，通常没有什么可构建的。</p><p>没什么可建的？</p><p>大多数 Boost 库都是仅标头的：它们完全由包含模板和内联函数的头文件组成，在链接时不需要单独编译库二进制文件或特殊处理。</p></blockquote><h2 id="初始项目" tabindex="-1"><a class="header-anchor" href="#初始项目"><span>初始项目</span></a></h2><p>这种库的使用只有两个要点</p><ol><li>找到头文件。在 <code>boost源码/boost/</code> 里</li><li>能链接</li></ol><p>只要能达到这两点，方法非常多（见GPT小节）</p><h3 id="git子模块-编译方式" tabindex="-1"><a class="header-anchor" href="#git子模块-编译方式"><span>Git子模块 + 编译方式</span></a></h3><p>Git方式</p><ol><li><p>终端</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/boostorg/boost.git ./3rdparty/boost

<span class="token comment"># 首次递归拉取。boost子项目很多，这一步耗时比较久，但编译却意外地不怎么耗时间</span>
<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>

<span class="token comment"># 后续更新</span>
<span class="token function">git</span> submodule status
<span class="token function">git</span> submodule update <span class="token parameter variable">--recursive</span> <span class="token parameter variable">--remote</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>CMakeList.txt增加</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>3rdparty/boost<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/3rdparty/boost<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后按理说正常使用就行了。父项目能正常使用头文件，也能正常编译了</p></li></ol><p>遇到的问题：</p><ul><li>子项目依赖的拉取、项目庞大</li><li>源码没有boost文件夹，无法直接 include 源文件</li></ul><h3 id="使用标头的库" tabindex="-1"><a class="header-anchor" href="#使用标头的库"><span>使用标头的库</span></a></h3><p>即只使用纯 .hpp 的部分，只有个别库需要单独构建</p><p>参考：https://www.boost.org/doc/libs/1_84_0/more/getting_started/windows.html</p><h3 id="windows-bat安装方式" tabindex="-1"><a class="header-anchor" href="#windows-bat安装方式"><span>windows - bat安装方式</span></a></h3><ol><li>不要直接双击bootstrap.bat，要在MSVC命令行中调用bat文件。 VS：开始菜单 &gt; Visual Studio 2019 &gt; 找到**Developer Command Prompt...<strong>打开 QT：找到</strong>Qt 6.0.3 (MSVC 2019 64-bit)**打开 命令行中cd到boost解压路径并执行 <code>bootstrap.bat</code> （我个人放在了 D:\\Soft\\Dev\\Language\\C++\\boost_1_78_0）</li><li>然后依然是在MSVC命令行中调用<code>bjam.exe</code></li></ol><h3 id="gpt" tabindex="-1"><a class="header-anchor" href="#gpt"><span>（GPT）</span></a></h3><p>如何在工程中优雅地使用boost？</p><ol><li>直接在官网下载后安装，然后使用里面/boost下的头文件</li><li>通过github的submodule方式引入（但具体不知道怎么做，源码没有/boost路径，头文件分散在各个子库中），并且通过CMakeList.txt形成依赖，编译时自动install boost</li><li>其他你认为优雅的方案</li></ol><hr><p>Boost库是一个C++的扩展库，它为C++提供了许多强大的功能，包括智能指针、泛型编程、并行计算等。在工程中使用Boost库，可以极大地提高编程效率和程序的性能。下面是一些在工程中优雅地使用Boost的方法：</p><ol><li><p><strong>直接下载并安装</strong>：这是最直接的方法。你可以从Boost官网下载最新的源码包，然后按照官方的安装指南进行安装。安装完毕后，你就可以在你的程序中直接包含Boost的头文件，并使用Boost提供的各种功能了。</p></li><li><p><strong>通过包管理器安装</strong>：如果你的系统有包管理器（如Ubuntu的apt，CentOS的yum，或者macOS的brew），你也可以通过包管理器来安装Boost。这样做的好处是，包管理器会自动处理Boost的依赖关系，并且可以自动更新Boost到最新版本。</p></li><li><p><strong>使用CMake和git submodule</strong>：如果你的项目使用了git作为版本控制系统，并且使用CMake作为构建系统，你可以把Boost作为一个git submodule添加到你的项目中。然后你可以在CMakeLists.txt文件中添加一些命令，让CMake在构建你的项目时自动构建Boost。这样做的好处是，你可以确保你的项目总是使用相同版本的Boost，而不需要担心系统中的Boost版本与你的项目不兼容。</p><p>具体操作如下：</p><ul><li><p>在你的项目根目录下，执行<code>git submodule add https://github.com/boostorg/boost.git</code>，添加Boost作为你的项目的一个子模块。</p></li><li><p>在你的CMakeLists.txt文件中，添加以下命令：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>boost<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span>/boost<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后你就可以在你的代码中直接包含Boost的头文件了。</p></li></ul></li><li><p><strong>使用vcpkg</strong>：vcpkg是一个跨平台的C++包管理器，它支持大量的C++库，包括Boost。使用vcpkg安装Boost非常简单，只需要执行<code>vcpkg install boost</code>就可以了。然后你可以在你的CMakeLists.txt文件中添加以下命令，让CMake自动找到vcpkg安装的Boost：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">find_package</span><span class="token punctuation">(</span>Boost REQUIRED<span class="token punctuation">)</span>
<span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>Boost_INCLUDE_DIRS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用conan</strong>：conan也是一个跨平台的C++包管理器，它的使用方法与vcpkg类似。你可以执行<code>conan install boost</code>来安装Boost，然后在你的CMakeLists.txt文件中添加以下命令，让CMake自动找到conan安装的Boost：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_BINARY_DIR</span><span class="token punctuation">}</span>/conanbuildinfo.cmake<span class="token punctuation">)</span>
<span class="token function">conan_basic_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>以上就是一些在工程中优雅地使用Boost的方法，你可以根据你的实际需求和环境选择最适合你的方法。</p>`,30))])}const v=l(d,[["render",m],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/","title":"Boost","lang":"zh-CN","frontmatter":{"description":"Boost 参考： 官网资料 官网：https://www.boost.org/ 官网文档：(以1_83_0 为例) GettingStarted：https://www.boost.org/doc/libs/release/more/getting_started/index.html 没有大纲、排版也很糟糕，搞得我还以为没内容，原来内容在右下的一下...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Boost"}],["meta",{"property":"og:description","content":"Boost 参考： 官网资料 官网：https://www.boost.org/ 官网文档：(以1_83_0 为例) GettingStarted：https://www.boost.org/doc/libs/release/more/getting_started/index.html 没有大纲、排版也很糟糕，搞得我还以为没内容，原来内容在右下的一下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Boost\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Boost","slug":"boost","link":"#boost","children":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":2,"title":"初始项目","slug":"初始项目","link":"#初始项目","children":[{"level":3,"title":"Git子模块 + 编译方式","slug":"git子模块-编译方式","link":"#git子模块-编译方式","children":[]},{"level":3,"title":"使用标头的库","slug":"使用标头的库","link":"#使用标头的库","children":[]},{"level":3,"title":"windows - bat安装方式","slug":"windows-bat安装方式","link":"#windows-bat安装方式","children":[]},{"level":3,"title":"（GPT）","slug":"gpt","link":"#gpt","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.58,"words":1673},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/README.md","excerpt":"\\n<p>参考：</p>\\n<ul>\\n<li>\\n<p>官网资料</p>\\n<ul>\\n<li>\\n<p>官网：https://www.boost.org/</p>\\n</li>\\n<li>\\n<p>官网文档：(以1_83_0 为例)</p>\\n<ul>\\n<li>GettingStarted：https://www.boost.org/doc/libs/release/more/getting_started/index.html\\n没有大纲、排版也很糟糕，搞得我还以为没内容，原来内容在右下的一下行超链接：\\nNext: <a href=\\"https://www.boost.org/doc/libs/1_83_0/more/getting_started/windows.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Getting Started on Microsoft Windows</a> or <a href=\\"https://www.boost.org/doc/libs/1_83_0/more/getting_started/unix-variants.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Getting Started on Unix variants (e.g. Linux, MacOS)</a></li>\\n<li>Reference：https://www.boost.org/doc/libs/1_83_0</li>\\n</ul>\\n</li>\\n<li>\\n<p>官网下载：https://boostorg.jfrog.io/artifactory/main/release/</p>\\n</li>\\n<li>\\n<p>编译说明文档：https://boostorg.github.io/build/manual/master/index.html</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>新文档（官网文档太丑辣）</p>\\n<ul>\\n<li>http://zh.highscore.de/cpp/boost/（还不错，虽然还是有点丑，但大纲整齐，相比原文档好很多了）</li>\\n<li>https://groups.google.com/g/boost_doc_translation/c/iZdiPl8T-78?pli=1</li>\\n</ul>\\n</li>\\n<li>\\n<p>视频：好像没什么比较好的</p>\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV1hG411i7XR\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【C++】C++组件库Boost</a></li>\\n<li><a href=\\"https://www.bilibili.com/video/BV1C5411a74F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Boost深入剖析之使用技巧</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{v as comp,w as data};
