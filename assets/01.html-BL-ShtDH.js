import{_ as t,c as e,a as s,e as p,o as l,r as c}from"./app-CdytOEkI.js";const o={};function i(d,n){const a=c("Mermaid");return l(),e("div",null,[n[0]||(n[0]=s(`<h1 id="《现代c-语言核心特性解析》" tabindex="-1"><a class="header-anchor" href="#《现代c-语言核心特性解析》"><span>《现代C++语言核心特性解析》</span></a></h1><h2 id="新基础类型" tabindex="-1"><a class="header-anchor" href="#新基础类型"><span>新基础类型</span></a></h2><h2 id="内联和嵌套命名空间" tabindex="-1"><a class="header-anchor" href="#内联和嵌套命名空间"><span>内联和嵌套命名空间</span></a></h2><h2 id="auto占位符" tabindex="-1"><a class="header-anchor" href="#auto占位符"><span>auto占位符</span></a></h2><h2 id="decltype说明符" tabindex="-1"><a class="header-anchor" href="#decltype说明符"><span>decltype说明符</span></a></h2><h2 id="函数返回类型后置" tabindex="-1"><a class="header-anchor" href="#函数返回类型后置"><span>函数返回类型后置</span></a></h2><h2 id="右值引用-c-11-c-17-c-20" tabindex="-1"><a class="header-anchor" href="#右值引用-c-11-c-17-c-20"><span>右值引用（C++11 C++17 C++20）</span></a></h2><h3 id="左值、右值" tabindex="-1"><a class="header-anchor" href="#左值、右值"><span>左值、右值</span></a></h3><p>C++98就出现了</p><p>定义与区分：</p><table><thead><tr><th></th><th>左值</th><th>右值</th></tr></thead><tbody><tr><td>指向内存</td><td>指向特定内存的具有名称的值 (具名对象)<br>有一个相对稳定的内存地址</td><td>不指向稳定内存地址的匿名值 (不具名对象)</td></tr><tr><td>生命周期</td><td>较长的生命周期</td><td>很短，通常是暂时性的</td></tr><tr><td>判断：<strong>不要</strong>用等号左右判断</td><td>int b = a; // b左值, a左值</td><td>int b = a; // b左值, a左值</td></tr><tr><td>判断：可用<strong>取地址符</strong>&amp;来判断</td><td>能取到内存地址</td><td>否则报错：Ivalue required as unary &#39;&amp;&#39;operand</td></tr></tbody></table><p>反直觉案例</p><ul><li><p>反直觉案例1:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>	<span class="token comment">// 右值，无法取地址。因为这里涉及(没有内存地址的)【复制】出来的临时对象。本质上是 tmp = x;</span>
    <span class="token operator">++</span>x<span class="token punctuation">;</span>	<span class="token comment">// 左值，可以取地址</span>
    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>

<span class="token comment">// x++ 拆解后是这样的：</span>
tmp <span class="token operator">=</span> x<span class="token punctuation">;</span> 	<span class="token comment">// tmp:1</span>
x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">// x:2</span>
<span class="token keyword">return</span> tmp<span class="token punctuation">;</span>	<span class="token comment">// tmp:1 (tmp是临时的，无法取地址，也是将亡值)</span>

<span class="token comment">// ++x 拆解后是这样的</span>
x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>		<span class="token comment">// x:3</span>
<span class="token keyword">return</span> x<span class="token punctuation">;</span>	<span class="token comment">// x:3 (x是指向内存的，可以取地址)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反直觉案例2</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> x<span class="token punctuation">;</span> 	<span class="token comment">// 返回后会变成右值，因为返回的是x的【复制】。当然也有可能会有RVO（返回值优化）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反直觉案例3</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">set_val</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	x <span class="token operator">=</span> val<span class="token punctuation">;</span>	<span class="token comment">// 6是右值，但val是左值，以为val是6的【复制】</span>
<span class="token punctuation">}</span>
<span class="token function">set_val</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反直觉案例4</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 通常字面量都是右值，但字符串字面量除外</span>

<span class="token comment">// 为什么要这样做？从动机上理解：</span>
<span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>				<span class="token comment">// 这里右值的2并不会独立开辟一个空间，然后a又一个空间，完全没必要</span>
<span class="token keyword">auto</span> s <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 这里右边可以开辟一个空间，然后s只要保存这个空间的地址就行了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="值类别-左值、将亡值、纯右值" tabindex="-1"><a class="header-anchor" href="#值类别-左值、将亡值、纯右值"><span>值类别 (左值、将亡值、纯右值)</span></a></h3><ul><li>C++98：前面的概念是：传统左值、传统右值。C++98就有概念，但不重要，没相关的语言特性</li><li>C++11：引入将亡值。变得更复杂。但描述很不清晰，例如：左值的概念只有一句话：指定一个函数或一个对象</li><li>C++17：这些才有更清晰的定义</li></ul><p>而C++11中则将<strong>表达式</strong>分成三类：左值、将亡值、纯右值 （虽然我们一般的叫法是 “XX值”，但注意这里的定义是 “表达式” 而不是 “值”，即 i++、++i 这种也算的）</p>`,16)),p(a,{id:"mermaid-143",code:"eJxLL0osyFAIceJKrSgoSi0uzszPi3+xcMWLffue7unX1bVLzwlLzClNjX+2efbT7cueNuzBpbAIou5p/2aQIi4MfUAlUCGoOdhUVEBVbGh7smshSBGKqbp6BFXo2hVABZ7vWg91CwDVeHPy"}),n[1]||(n[1]=s(`<ul><li>泛左值：所谓泛左值是指一个通过评估能够确定对象、位域或函数的标识的表达式。简单来说，它确定了对象或者函数的标识 (具名对象)</li><li>纯右值：是指一个通过评估能够用于初始化对象和位域，或者能够计算运算符操作数的值的表达式。</li><li>将亡值：属于泛左值的一种，它表示资源可以被重用的对象和位域，通常这是因为它们<strong>接近其生命周期的末尾</strong>，另外也可能是经过<strong>右值引用的转换</strong>产生的</li><li>左值：非将亡值的泛左值。有地址</li><li>右值：包括将亡值和纯右值。无地址</li></ul><p>有点晕，但这里的难点是将亡值。只要搞清将亡值如何产生就行了（两种方式）：</p><ol><li><p>使用类型转换将泛左值转换为该类型的右值引用</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>BigMemoryPoll<span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>my_pool<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>C++17中引入，“<strong>临时量实质化</strong>”，指的是纯右值转换到临时对象的过程</p><p>每当纯右值出现在一个需要泛左值的地方，“临时量实质化” 都会发生</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span> 	<span class="token comment">// X()是纯右值，但访问a需要一个泛左值，那么会发生 “临时量实质化”，将x()转换为将亡值</span>
    				<span class="token comment">// 需要额外注意的是，C++17之前，临时变量是纯右值，只有转换为右值引用才是将亡值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="优化项" tabindex="-1"><a class="header-anchor" href="#优化项"><span>优化项</span></a></h4><p>为什么要有将亡值这个概念？方便编译器做优化。</p><p>可以用godbolt的complier explorer来分析汇编，比较<code>C++14 -fno-elide-constructors</code>和<code>C++17 -fno-elide-constructors</code>的汇编代码就知道为什么了，后者减少了一些复制，提高了性能</p><h4 id="将左值转换为右值" tabindex="-1"><a class="header-anchor" href="#将左值转换为右值"><span>将左值转换为右值</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span>						<span class="token comment">// 编译失败</span>

<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>k <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 编译成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="左值引用" tabindex="-1"><a class="header-anchor" href="#左值引用"><span>左值引用</span></a></h3><ul><li>作用 / 动机：可以免去创建临时对象的操作，引用比指针安全（指针）</li></ul><h4 id="非常量左值引用" tabindex="-1"><a class="header-anchor" href="#非常量左值引用"><span>非常量左值引用</span></a></h4><p>限制：非常量左值引用的对象必须是左值</p><p>作用 / 场景：减少拷贝，和指针差不多，但更好看和防呆一些</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>class X {
public:
    x() {};
    X(const X&amp;) {}								// 复制构造函数 (左值引用减少一次拷贝，指针也可以做到但不优雅)
    X&amp; operator = (const X&amp;) { return *this; }	// 赋值构造函数 (左值引用减少一次拷贝，指针也可以做到但不优雅)
}

int main() {
    X x1;
    X x2(x1);
    X x3(make_x());	// make_x()出来的是临时变量，不应该是右值引用吗？
    x3 = make_x();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常量左值引用-常量左右值引用" tabindex="-1"><a class="header-anchor" href="#常量左值引用-常量左右值引用"><span>常量左值引用 (常量左右值引用)</span></a></h4><p>限制：常量左值引用的对象还你是右值，如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token operator">&amp;</span>x1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>		<span class="token comment">// 编译错误</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>	<span class="token comment">// 编译成功</span>

<span class="token comment">// 其中：</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>	<span class="token comment">// 1</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>	<span class="token comment">// 2</span>
<span class="token comment">// 两种写法结果一样，但前者在语句结束后生命周期被延长</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用 / 场景：万能引用？</p><h3 id="右值引用" tabindex="-1"><a class="header-anchor" href="#右值引用"><span>右值引用</span></a></h3><p>限制：引用右值且只能引用右值的方法</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span>		<span class="token comment">// 左值引用</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>k <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> 	<span class="token comment">// 右值引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用 / 场景：延长临时对象生命周期，以减少对象复制，提升程序性能</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;X ctor&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;X copy ctor&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">]</span>
    <span class="token operator">~</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;X dtor&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;show x&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
X <span class="token function">make_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	X xl<span class="token punctuation">;</span>	<span class="token comment">// 生命周期被延长，以减少对象复制</span>
	<span class="token keyword">return</span> xl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	X <span class="token operator">&amp;&amp;</span>x2 <span class="token operator">=</span> <span class="token function">make_x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 右值引用 (事实上这里会有编译器的RVO返回值优化。我们假设关闭了优化，不考虑优化)</span>
    					<span class="token comment">// 没有优化原来是三次构造，make_x内部一次，返回后一次复制构造给右值，再一次赋值构造给左值 (这里减少了这一次)</span>
    					<span class="token comment">// 其实用移动语义也可以做到这个效果</span>
	x2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gcc关闭优化：-fno-elide-constructors</p><h4 id="移动构造-右值的性能优化空间" tabindex="-1"><a class="header-anchor" href="#移动构造-右值的性能优化空间"><span>移动构造 (右值的性能优化空间)</span></a></h4><p>我们知道了很多情况下右值都存储在临时对象中，当右值被使用之后程序会马上销毁对象并释放内存。这个过程可能会引发一个性能问题</p><p>解决：实现<strong>移动构造器</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 定义</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">A</span><span class="token punctuation">(</span>A<span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用</span>
<span class="token number">1.</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">2.</span> 函数返回一个对象
<span class="token number">3.</span> 容器操作等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，编译器会为你生成一个默认的移动构造函数。 对于大多数情况而言，默认生成的移动构造函数是足够使用的。 除非你的类涉及到资源管理或者需要特殊的移动语义，你可能需要显式定义自己的移动构造函数。或者研究语言特性时加一个追踪打印</p><p>异常问题：风险：如果一个对象移动到另一个对象途中发生异常，导致两个对象都不完整，则后果语法预测。 可以使用noexcept说明符限定函数，抛出异常时程序就会终止</p><h4 id="移动构造-vs-拷贝构造" tabindex="-1"><a class="header-anchor" href="#移动构造-vs-拷贝构造"><span>移动构造 vs 拷贝构造</span></a></h4><p>只是简单的指针替换，没有内存复制</p><p>特定情况下，移动构造代替拷贝构造，速度大大提升</p><h4 id="移动语义-std-move" tabindex="-1"><a class="header-anchor" href="#移动语义-std-move"><span>移动语义 (std::move)</span></a></h4><p>略</p><h3 id="万能引用" tabindex="-1"><a class="header-anchor" href="#万能引用"><span>万能引用</span></a></h3><h4 id="语法-类型推导" tabindex="-1"><a class="header-anchor" href="#语法-类型推导"><span>语法：类型推导+&amp;&amp;</span></a></h4><p>复习一下：</p><ul><li><p>左值引用</p><ul><li>非常量：只能左值</li><li>常量：可左值可右值（但有限制：常量性）</li></ul></li><li><p>右值引用：只能右值</p></li><li><p>万能引用：可左值可右值 （功能上，像左值常量，能即左又右，但这个更强，也没常量性限制） （语法上，像右值引用，像是右值+类型推导，但完全不同，只是规定写法，内部是靠引用折叠来确定的） （本质上，就是加了类型堆导，形式必须是 T&amp;&amp; 或 auto&amp;&amp;，<strong>原理</strong>是这个类型推导能够自动推导并<strong>变成左值引用或右值引用</strong>）</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 形式必须是 T&amp;&amp; 或 auto&amp;&amp;</span>

<span class="token comment">// 1</span>
<span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>	<span class="token comment">// i为右值引用</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span>T <span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>		<span class="token comment">// t为万能引用</span>

<span class="token comment">// 2</span>
<span class="token keyword">int</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>x <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// x为右值引用</span>
<span class="token keyword">auto</span> <span class="token operator">&amp;&amp;</span>y <span class="token operator">=</span> <span class="token function">get_val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// y为万能引用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="规则-引用折叠" tabindex="-1"><a class="header-anchor" href="#规则-引用折叠"><span>规则：引用折叠</span></a></h4><p>万能引用能如此灵活地引用对象，实际上是因为在C++11中添加了一套引用叠加推导的规则一-引用折叠。在这套规则中规定了在不同的引用类型互相作用的情况下应该如何推导出最终类型：</p><table><thead><tr><th>类型模板</th><th>T实际类型</th><th>最终类型</th></tr></thead><tbody><tr><td>T&amp;</td><td>R</td><td>R&amp;</td></tr><tr><td>T&amp;</td><td>R&amp;</td><td>R&amp;</td></tr><tr><td>T&amp;</td><td>R&amp;&amp;</td><td>R&amp;</td></tr><tr><td>T&amp;&amp;</td><td>R</td><td>R&amp;&amp;</td></tr><tr><td>T&amp;&amp;</td><td>R&amp;</td><td>R&amp;</td></tr><tr><td>T&amp;&amp;</td><td>R&amp;&amp;</td><td>R&amp;&amp;</td></tr></tbody></table><h4 id="用途-完美转发" tabindex="-1"><a class="header-anchor" href="#用途-完美转发"><span>用途：完美转发</span></a></h4><p>万能引用最典型的用途被称为完美转发</p><p>效率低的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">show_type</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">:</span><span class="token punctuation">;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">normal_forwarding</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// normal_forwarding按值转发，std::string会额外发生一次临时对象复制</span>
	<span class="token function">show_type</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
	<span class="token function">normal_forwarding</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 左值传入</span>
  	<span class="token function">normal_forwarding</span><span class="token punctuation">(</span><span class="token string">&quot;66&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 右值传入</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法1：左值引用</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">normal_forwarding</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 能减少对象复制，但无法应对右值传入</span>
    <span class="token comment">// ……</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法2：常量左值引用</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">normal_forwarding</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 能减少对象复制，也能应对右值传入，但后面不能修改字符串</span>
    <span class="token comment">// ……</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法3：用万能引用来完美转发</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">normal_forwarding</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">show_type</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>T <span class="token operator">&amp;&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="std-forward、std-move" tabindex="-1"><a class="header-anchor" href="#std-forward、std-move"><span>std::forward、std::move</span></a></h4><p>显式使用static_cast类型转换进行转发并不优雅，C++使用提供了：</p><ul><li>std::forward，强转成万能引用（内部使用static_cast进行类型转换）</li><li>std::move，强转成右值引用</li><li>区别：std::move不需要指定模板实参，模板实参靠函数调用推导。std::forward根据左值和右值情况进行转发</li></ul><h3 id="隐式移动操作-编译器做了什么-针对局部变量和右值引用" tabindex="-1"><a class="header-anchor" href="#隐式移动操作-编译器做了什么-针对局部变量和右值引用"><span>隐式移动操作（编译器做了什么，针对局部变量和右值引用）</span></a></h3><p>在对旧程序代码升级新编译环境之后，我们可能会发现程序运行的效率提高了，这里的原因一定少不了新标准的编译器在某些情况下将隐式复制修改为隐式移动。虽然这些是编译器“偷偷”完成的，但是我们不能因为运行效率提高就忽略其中的缘由，所以接下来我们要弄清楚这些隐式移动是怎么发生的：</p><p>C++14 带优化</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>
    <span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 	<span class="token comment">// 拷贝构造，参数为常量左值引用</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;copy ctor&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">X</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 		<span class="token comment">// 移动构造，右值引用</span>
	    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;move ctor&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
X <span class="token function">f</span><span class="token punctuation">(</span>X x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    X r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不优化是三次拷贝，自动优化后是三次移动</span>
<span class="token comment">// 1. 传入f()，一次拷贝 -&gt; 一次移动，左值的将亡值 -&gt; 左值</span>
<span class="token comment">// 2. f()返回，一次拷贝 -&gt; 一次移动，左值的将亡值 -&gt; 右值</span>
<span class="token comment">// 3. 右值复制给左值，一次拷贝 -&gt; 一次移动，右值的将亡值 -&gt; 左值</span>

X <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    X x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    X r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这样就是两次移动，少了一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++17（将值类别进行更详细的分类）</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>X <span class="token function">f</span><span class="token punctuation">(</span>X x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    X r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>X<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 只有一次移动！(以前是三次移动)</span>
<span class="token comment">// 只有在发生“临时量实质化”时才移动</span>

X <span class="token function">f</span><span class="token punctuation">(</span>X<span class="token operator">&amp;&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 右值引用</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>	<span class="token comment">// 这里改成 return std::move(x); 才会是一次移动</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    X r <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>X<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这里是一次拷贝构造，到到C++20 (gcc11+) 才能把他优化成一次移动构造</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>右值引用是C++11标准提出的一个非常重要的概念，它的出现不仅 完善了C++的语法，改善了C++在数据转移时的执行效率，同时还增强了C++模板的能力。</p><p>如果要在C++11提出的所有特性中选择一个对C++影响最深远的特性我会毫不犹豫地选择<strong>右值引用</strong>。</p><h2 id="lambda表达式语法-c-11-20" tabindex="-1"><a class="header-anchor" href="#lambda表达式语法-c-11-20"><span>Lambda表达式语法 (C++11~20)</span></a></h2><h3 id="lambda表达式语法" tabindex="-1"><a class="header-anchor" href="#lambda表达式语法"><span>Lambda表达式语法</span></a></h3><h3 id="捕获列表" tabindex="-1"><a class="header-anchor" href="#捕获列表"><span>捕获列表</span></a></h3><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h3><h3 id="无状态的lambda表达式" tabindex="-1"><a class="header-anchor" href="#无状态的lambda表达式"><span>无状态的Lambda表达式</span></a></h3><h3 id="在-stl-当中使用-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#在-stl-当中使用-lambda-表达式"><span>在 STL 当中使用 Lambda 表达式</span></a></h3><h3 id="广义捕获" tabindex="-1"><a class="header-anchor" href="#广义捕获"><span>广义捕获</span></a></h3><h3 id="泛型lambda表达式" tabindex="-1"><a class="header-anchor" href="#泛型lambda表达式"><span>泛型Lambda表达式</span></a></h3><h3 id="常量lambda表达式" tabindex="-1"><a class="header-anchor" href="#常量lambda表达式"><span>常量Lambda表达式</span></a></h3><h3 id="捕获-this" tabindex="-1"><a class="header-anchor" href="#捕获-this"><span>捕获*this</span></a></h3><h3 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h3><h3 id="可构造、可赋值" tabindex="-1"><a class="header-anchor" href="#可构造、可赋值"><span>可构造、可赋值</span></a></h3><h2 id="c-做了什么让成员的初始化变简单了" tabindex="-1"><a class="header-anchor" href="#c-做了什么让成员的初始化变简单了"><span>C++做了什么让成员的初始化变简单了？</span></a></h2><h2 id="初始化相关" tabindex="-1"><a class="header-anchor" href="#初始化相关"><span>初始化相关</span></a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>-</span></a></h3><h2 id="特殊成员函数" tabindex="-1"><a class="header-anchor" href="#特殊成员函数"><span>特殊成员函数</span></a></h2><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>-</span></a></h3><h2 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h2><h3 id="为什么联合类型背叛了c-的设计理念" tabindex="-1"><a class="header-anchor" href="#为什么联合类型背叛了c-的设计理念"><span>为什么联合类型背叛了C++的设计理念</span></a></h3><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><h3 id="c-的构造函数为什么会出现冗余的情况" tabindex="-1"><a class="header-anchor" href="#c-的构造函数为什么会出现冗余的情况"><span>C++的构造函数为什么会出现冗余的情况</span></a></h3>`,85))])}const r=t(o,[["render",i],["__file","01.html.vue"]]),k=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/08.%20%E6%96%B0%E7%89%B9%E6%80%A7/%E3%80%8A%E7%8E%B0%E4%BB%A3C__%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E3%80%8B/01.html","title":"《现代C++语言核心特性解析》","lang":"zh-CN","frontmatter":{"description":"《现代C++语言核心特性解析》 新基础类型 内联和嵌套命名空间 auto占位符 decltype说明符 函数返回类型后置 右值引用（C++11 C++17 C++20） 左值、右值 C++98就出现了 定义与区分： 反直觉案例 反直觉案例1: 反直觉案例2 反直觉案例3 反直觉案例4 值类别 (左值、将亡值、纯右值) C++98：前面的概念是：传统左值...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/08.%20%E6%96%B0%E7%89%B9%E6%80%A7/%E3%80%8A%E7%8E%B0%E4%BB%A3C__%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7%E8%A7%A3%E6%9E%90%E3%80%8B/01.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《现代C++语言核心特性解析》"}],["meta",{"property":"og:description","content":"《现代C++语言核心特性解析》 新基础类型 内联和嵌套命名空间 auto占位符 decltype说明符 函数返回类型后置 右值引用（C++11 C++17 C++20） 左值、右值 C++98就出现了 定义与区分： 反直觉案例 反直觉案例1: 反直觉案例2 反直觉案例3 反直觉案例4 值类别 (左值、将亡值、纯右值) C++98：前面的概念是：传统左值..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《现代C++语言核心特性解析》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《现代C++语言核心特性解析》","slug":"《现代c-语言核心特性解析》","link":"#《现代c-语言核心特性解析》","children":[{"level":2,"title":"新基础类型","slug":"新基础类型","link":"#新基础类型","children":[]},{"level":2,"title":"内联和嵌套命名空间","slug":"内联和嵌套命名空间","link":"#内联和嵌套命名空间","children":[]},{"level":2,"title":"auto占位符","slug":"auto占位符","link":"#auto占位符","children":[]},{"level":2,"title":"decltype说明符","slug":"decltype说明符","link":"#decltype说明符","children":[]},{"level":2,"title":"函数返回类型后置","slug":"函数返回类型后置","link":"#函数返回类型后置","children":[]},{"level":2,"title":"右值引用（C++11 C++17 C++20）","slug":"右值引用-c-11-c-17-c-20","link":"#右值引用-c-11-c-17-c-20","children":[{"level":3,"title":"左值、右值","slug":"左值、右值","link":"#左值、右值","children":[]},{"level":3,"title":"值类别 (左值、将亡值、纯右值)","slug":"值类别-左值、将亡值、纯右值","link":"#值类别-左值、将亡值、纯右值","children":[{"level":4,"title":"优化项","slug":"优化项","link":"#优化项","children":[]},{"level":4,"title":"将左值转换为右值","slug":"将左值转换为右值","link":"#将左值转换为右值","children":[]}]},{"level":3,"title":"左值引用","slug":"左值引用","link":"#左值引用","children":[{"level":4,"title":"非常量左值引用","slug":"非常量左值引用","link":"#非常量左值引用","children":[]},{"level":4,"title":"常量左值引用 (常量左右值引用)","slug":"常量左值引用-常量左右值引用","link":"#常量左值引用-常量左右值引用","children":[]}]},{"level":3,"title":"右值引用","slug":"右值引用","link":"#右值引用","children":[{"level":4,"title":"移动构造 (右值的性能优化空间)","slug":"移动构造-右值的性能优化空间","link":"#移动构造-右值的性能优化空间","children":[]},{"level":4,"title":"移动构造 vs 拷贝构造","slug":"移动构造-vs-拷贝构造","link":"#移动构造-vs-拷贝构造","children":[]},{"level":4,"title":"移动语义 (std::move)","slug":"移动语义-std-move","link":"#移动语义-std-move","children":[]}]},{"level":3,"title":"万能引用","slug":"万能引用","link":"#万能引用","children":[{"level":4,"title":"语法：类型推导+&&","slug":"语法-类型推导","link":"#语法-类型推导","children":[]},{"level":4,"title":"规则：引用折叠","slug":"规则-引用折叠","link":"#规则-引用折叠","children":[]},{"level":4,"title":"用途：完美转发","slug":"用途-完美转发","link":"#用途-完美转发","children":[]},{"level":4,"title":"std::forward、std::move","slug":"std-forward、std-move","link":"#std-forward、std-move","children":[]}]},{"level":3,"title":"隐式移动操作（编译器做了什么，针对局部变量和右值引用）","slug":"隐式移动操作-编译器做了什么-针对局部变量和右值引用","link":"#隐式移动操作-编译器做了什么-针对局部变量和右值引用","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"Lambda表达式语法 (C++11~20)","slug":"lambda表达式语法-c-11-20","link":"#lambda表达式语法-c-11-20","children":[{"level":3,"title":"Lambda表达式语法","slug":"lambda表达式语法","link":"#lambda表达式语法","children":[]},{"level":3,"title":"捕获列表","slug":"捕获列表","link":"#捕获列表","children":[]},{"level":3,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[]},{"level":3,"title":"无状态的Lambda表达式","slug":"无状态的lambda表达式","link":"#无状态的lambda表达式","children":[]},{"level":3,"title":"在 STL 当中使用 Lambda 表达式","slug":"在-stl-当中使用-lambda-表达式","link":"#在-stl-当中使用-lambda-表达式","children":[]},{"level":3,"title":"广义捕获","slug":"广义捕获","link":"#广义捕获","children":[]},{"level":3,"title":"泛型Lambda表达式","slug":"泛型lambda表达式","link":"#泛型lambda表达式","children":[]},{"level":3,"title":"常量Lambda表达式","slug":"常量lambda表达式","link":"#常量lambda表达式","children":[]},{"level":3,"title":"捕获*this","slug":"捕获-this","link":"#捕获-this","children":[]},{"level":3,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[]},{"level":3,"title":"可构造、可赋值","slug":"可构造、可赋值","link":"#可构造、可赋值","children":[]}]},{"level":2,"title":"C++做了什么让成员的初始化变简单了？","slug":"c-做了什么让成员的初始化变简单了","link":"#c-做了什么让成员的初始化变简单了","children":[]},{"level":2,"title":"初始化相关","slug":"初始化相关","link":"#初始化相关","children":[{"level":3,"title":"-","slug":"","link":"#","children":[]}]},{"level":2,"title":"特殊成员函数","slug":"特殊成员函数","link":"#特殊成员函数","children":[{"level":3,"title":"-","slug":"-1","link":"#-1","children":[]}]},{"level":2,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[{"level":3,"title":"为什么联合类型背叛了C++的设计理念","slug":"为什么联合类型背叛了c-的设计理念","link":"#为什么联合类型背叛了c-的设计理念","children":[]}]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"C++的构造函数为什么会出现冗余的情况","slug":"c-的构造函数为什么会出现冗余的情况","link":"#c-的构造函数为什么会出现冗余的情况","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":11.33,"words":3398},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/08. 新特性/《现代C++语言核心特性解析》/01.md","excerpt":"\\n<h2>新基础类型</h2>\\n<h2>内联和嵌套命名空间</h2>\\n<h2>auto占位符</h2>\\n<h2>decltype说明符</h2>\\n<h2>函数返回类型后置</h2>\\n<h2>右值引用（C++11 C++17 C++20）</h2>\\n<h3>左值、右值</h3>\\n<p>C++98就出现了</p>\\n<p>定义与区分：</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>左值</th>\\n<th>右值</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>指向内存</td>\\n<td>指向特定内存的具有名称的值 (具名对象)<br>有一个相对稳定的内存地址</td>\\n<td>不指向稳定内存地址的匿名值 (不具名对象)</td>\\n</tr>\\n<tr>\\n<td>生命周期</td>\\n<td>较长的生命周期</td>\\n<td>很短，通常是暂时性的</td>\\n</tr>\\n<tr>\\n<td>判断：<strong>不要</strong>用等号左右判断</td>\\n<td>int b = a;\\t// b左值, a左值</td>\\n<td>int b = a;\\t// b左值, a左值</td>\\n</tr>\\n<tr>\\n<td>判断：可用<strong>取地址符</strong>&amp;来判断</td>\\n<td>能取到内存地址</td>\\n<td>否则报错：Ivalue required as unary '&amp;'operand</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{r as comp,k as data};
