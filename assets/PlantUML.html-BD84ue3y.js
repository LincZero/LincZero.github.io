import{_ as p,c as e,e as s,a,d as o,b as l,o as c,r as i}from"./app-aaiu3veL.js";const u="/assets/image-20240806010027253-Cy4ZByV-.png",r="/assets/image-20240806005748191-C_2e91v4.png",k={},d={href:"http://blog.lujun9972.win/blog/2020/04/22/plantuml-tips%E4%B9%8B%E8%AE%BE%E7%BD%AE%E8%BF%9E%E6%8E%A5%E7%BA%BF%E9%A3%8E%E6%A0%BC/index.html",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const t=i("ExternalLinkIcon");return c(),e("div",null,[n[1]||(n[1]=s(`<h1 id="plantuml" tabindex="-1"><a class="header-anchor" href="#plantuml"><span>PlantUML</span></a></h1><h2 id="在线使用" tabindex="-1"><a class="header-anchor" href="#在线使用"><span>在线使用</span></a></h2><p>我见过有两种，一种需要编码，另一种不需要编码</p><h3 id="不需要编码-——-gravizo" tabindex="-1"><a class="header-anchor" href="#不需要编码-——-gravizo"><span>不需要编码 —— Gravizo</span></a></h3><p>关于在线渲染的使用见：“plantUML by Gravizo” 笔记</p><p>就是这样的：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>https://g.gravizo.com/svg?
@startuml;
(*) --&gt; if &quot;Some Test&quot; then;
  --&gt;[true] &quot;activity 1&quot;;
  if &quot;&quot; then;
    -&gt; &quot;activity 3&quot; as a3;
  else;
    if &quot;Other test&quot; then;
      -left-&gt; &quot;activity 5&quot;;
    else;
      --&gt; &quot;activity 6&quot;;
    endif;
  endif;
else;
  -&gt;[false] &quot;activity 2&quot;;
endif;
a3 --&gt; if &quot;last test&quot; then;
  --&gt; &quot;activity 7&quot;;
else;
  -&gt; &quot;activity 8&quot;;
endif;
@enduml
<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然说不需要编码，但其中肯定会涉及到一些不能用在url上的字符。所以使用这种方案的话，某些字符还是需要进行编码再使用的</p><h3 id="需要编码-——-plantuml-com" tabindex="-1"><a class="header-anchor" href="#需要编码-——-plantuml-com"><span>需要编码 —— plantuml.com</span></a></h3><p>这种需要使用 <code>encode = require(&#39;plantuml-encoder&#39;).encode(&quot;...&quot;)</code> 获取编码后的内容，再进行请求</p><h2 id="图表优化" tabindex="-1"><a class="header-anchor" href="#图表优化"><span>图表优化</span></a></h2><h3 id="常用样式" tabindex="-1"><a class="header-anchor" href="#常用样式"><span>常用样式</span></a></h3>`,12)),a("p",null,[a("a",d,[n[0]||(n[0]=o("连接线风格")),l(t)])]),n[2]||(n[2]=s(`<ul><li>skinparam linetype ortho</li><li>skinparam linetype polyline</li></ul><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例</span></a></h3><p>一个四节点互连图 (应该用样式修改来替代a填充)</p><div class="language-plantuml line-numbers-mode" data-ext="plantuml" data-title="plantuml"><pre class="language-plantuml"><code><span class="token delimiter punctuation">@startuml</span>
<span class="token keyword">skinparam</span> linetype ortho
left to right direction

<span class="token keyword">package</span> <span class="token string">&quot;nn&quot;</span> <span class="token punctuation">{</span>

a<span class="token arrow operator">--&gt;x</span><span class="token punctuation">:</span> looooooooooong
a<span class="token arrow operator">--&gt;</span>b<span class="token punctuation">:</span> looooooooooong
a<span class="token arrow operator">--&gt;</span>c<span class="token punctuation">:</span> looooooooooong

<span class="token arrow operator">x------&gt;</span>a<span class="token punctuation">:</span> looooooooooong
<span class="token arrow operator">x------&gt;</span>b<span class="token punctuation">:</span> looooooooooong
<span class="token arrow operator">x------&gt;</span>c<span class="token punctuation">:</span> looooooooooong

b<span class="token arrow operator">--&gt;</span>a<span class="token punctuation">:</span> looooooooooong
b<span class="token arrow operator">--&gt;x</span><span class="token punctuation">:</span> looooooooooong
b<span class="token arrow operator">--right--&gt;</span>c<span class="token punctuation">:</span> looooooooooong

c<span class="token arrow operator">--&gt;</span>a<span class="token punctuation">:</span> looooooooooong
c<span class="token arrow operator">--&gt;x</span><span class="token punctuation">:</span> looooooooooong
c<span class="token arrow operator">--&gt;</span>b<span class="token punctuation">:</span> looooooooooong


<span class="token keyword">class</span> c<span class="token punctuation">{</span>
  a
  a
  a
  a
  a
  a
  a
<span class="token punctuation">}</span>

<span class="token keyword">class</span> b<span class="token punctuation">{</span>
  a
  a
  a
  a
  a
  a
  a
<span class="token punctuation">}</span>

<span class="token keyword">class</span> x<span class="token punctuation">{</span>
  a
  a
  a
  a
  a
  a
  a
  a
  a
  a
  a
<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token delimiter punctuation">@enduml</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="程序类型" tabindex="-1"><a class="header-anchor" href="#程序类型"><span>程序类型</span></a></h2><h3 id="前端渲染-or-服务器渲染" tabindex="-1"><a class="header-anchor" href="#前端渲染-or-服务器渲染"><span>前端渲染 or 服务器渲染</span></a></h3><p>在 Mdit-Plugins 的实现中 (VuePress-Hope-Theme 主题)</p><p>通过查看网络数据，发现：mdEnhance 配置里的六类图表中，<s>仅一个提前渲染，五个都是Browser渲染</s>，六个都没有在服务端提前渲染（图标的标注是错的，plantuml是通过img标签由第三方服务器进行渲染的，差点被误导了）</p><p>（按理说也都能提前渲染的，但就是比较麻烦，我也折腾过。例如需要设置服务器的虚拟document环境，例如 jsdom 等。然后mermaid又可能遇到报错：）</p><p><img src="`+u+`" alt="image-20240806010027253" loading="lazy"></p><h3 id="svg-or-img-or-ascii" tabindex="-1"><a class="header-anchor" href="#svg-or-img-or-ascii"><span>SVG or IMG or ASCII</span></a></h3><p>支持性</p><ul><li><p>其中，Plantuml 三种都支持，如 Obisidian-Plantuml 中，就支持这三种，图片后缀.png。而 VuePress-Hope-Theme 中使用图片，图片后缀.svg。</p><ul><li><p>Obsidian-PlantUML默认：第三方服务器：Web .png Img</p></li><li><p>VuePress-Hope-Theme：第三方服务器：Web .svg Img</p></li></ul></li></ul><p>渲染增量</p><ul><li><p>Mermaid：一般渲染为 svg_html</p><ul><li>渲染增量：一个demo中，原始字符 (上百字符) -&gt; svg_html (十五万字符)</li></ul></li><li><p>Markmap：一般渲染为 svg_html</p><ul><li>渲染增量：一个demo中，原始语法 (近千个字符) -&gt; svg_html (十五万字符)</li></ul></li><li><p>Plantuml - Img</p><ul><li><p>渲染增量：以 https://www.plantuml.com 服务器结构为例，原始语法 (数百字符) -&gt; url (编码为url可用字符，五百字符) -&gt; 图片 (几十KB)</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> plantumlEncoder <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;plantuml-encoder&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> encoded <span class="token operator">=</span> plantumlEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&#39;A -&gt; B: Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// var plain = plantumlEncoder.decode(&#39;SrJGjLDmibBmICt9oGS0&#39;)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token comment">// SrJGjLDmibBmICt9oGS0</span>

<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://www.plantuml.com/plantuml/img/&#39;</span> <span class="token operator">+</span> encoded
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Plantuml - ASCII</p></li><li><p>Plantuml - Svg</p></li></ul><h3 id="jar-or-服务器-or-纯js" tabindex="-1"><a class="header-anchor" href="#jar-or-服务器-or-纯js"><span>Jar or 服务器 or 纯Js</span></a></h3><h4 id="mdit-plugins-服务器" tabindex="-1"><a class="header-anchor" href="#mdit-plugins-服务器"><span>Mdit-Plugins (服务器)</span></a></h4><p>代码：https://github.com/mdit-plugins/mdit-plugins/blob/6d7e069e4f8283f069ac8db00f545c90a654bcff/packages/plantuml/src/options.ts</p><p>还是以 Mdit-Plugins 为例：</p><p>从他的配置里可以看出，他这里用的是服务器的方式</p><p><img src="`+r+`" alt="image-20240806005748191" loading="lazy"></p><h4 id="obsidian-plantuml-服务器-jar" tabindex="-1"><a class="header-anchor" href="#obsidian-plantuml-服务器-jar"><span>Obsidian-PlantUML (服务器+Jar)</span></a></h4><p>代码：https://github.com/joethei/obsidian-plantuml/blob/master/src/main.ts</p><p>另一个例子是 Obsidian-PlantUML，支持本地 Jar 以及设置Plantuml两种模式</p><h4 id="官方-js-demo-纯js" tabindex="-1"><a class="header-anchor" href="#官方-js-demo-纯js"><span>官方 js demo (纯js)</span></a></h4><p>代码：https://github.com/plantuml/plantuml.js/blob/main/examples/01-basic/index.html</p><p>（这里需要本地 <code>npm i</code> 安装，话说这玩意总感觉首次加载比用服务器还慢）</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>PlantUML.js Basic Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Require cheerpj dependency --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cjrtnc.leaningtech.com/2.3/loader.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Require PlantUML.js --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node_modules/@sakirtemel/plantuml.js/plantuml.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>plantuml-diagram<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        plantuml<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token string">&#39;/app/node_modules/@sakirtemel/plantuml.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;plantuml-diagram&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> pumlContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                @startuml
                Bob -&gt; Alice: Hello!
                @enduml
            </span><span class="token template-punctuation string">\`</span></span>
            <span class="token keyword">const</span> url <span class="token operator">=</span> plantuml<span class="token punctuation">.</span><span class="token function">renderPng</span><span class="token punctuation">(</span>pumlContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                element<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后正常的控制台输出流程</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>CheerpJ runtime ready
Run main <span class="token keyword">for</span> com/plantuml/wasm/v1/RunInit loader.js:2442:12
PlantUML Version: <span class="token number">1.2023</span>.2beta4 cheerpOS.js:1772:11
Init ok. cheerpjPath is /app/node_modules/@sakirtemel/plantuml.js/ cheerpOS.js:1772:11
<span class="token punctuation">(</span><span class="token number">0</span> ms<span class="token punctuation">)</span> Starting processing
<span class="token punctuation">(</span><span class="token number">2012</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>.text loaded<span class="token punctuation">..</span>. cheerpOS.js:1772:11			<span class="token comment"># 文本加载</span>
<span class="token punctuation">(</span><span class="token number">2024</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>compiling diagram<span class="token punctuation">..</span>. cheerpOS.js:1772:11	<span class="token comment"># </span>
<span class="token punctuation">(</span><span class="token number">2182</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>.parsing ok<span class="token punctuation">..</span>. cheerpOS.js:1772:11			<span class="token comment"># 解析</span>
<span class="token punctuation">(</span><span class="token number">2183</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>.processing<span class="token punctuation">..</span>. cheerpOS.js:1772:11
<span class="token punctuation">(</span><span class="token number">2183</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>.loading data<span class="token punctuation">..</span>. cheerpOS.js:1772:11
<span class="token punctuation">(</span><span class="token number">4333</span> ms<span class="token punctuation">)</span> <span class="token punctuation">..</span>.image drawing<span class="token punctuation">..</span>. cheerpOS.js:1772:11		<span class="token comment"># 绘图</span>
<span class="token punctuation">(</span><span class="token number">4790</span> ms<span class="token punctuation">)</span> Done<span class="token operator">!</span> cheerpOS.js:1772:11
Rendering finished <span class="token keyword">in</span> <span class="token number">4800</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p>#源码</p><p>这是模块源码，node_modules/@sakirtemel/plantuml.js/plantuml.js：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> plantuml <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> initialize <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>cheerpjPath <span class="token operator">=</span> <span class="token string">&quot;/app/plantuml-wasm&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token function">cheerpjInit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> preloadResources<span class="token operator">:</span> <span class="token function">_runtimeResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">_preloadPlantumlFiles</span><span class="token punctuation">(</span>cheerpjPath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment">// to make cjcall work, first we load the java package like this</span>
        <span class="token keyword">await</span> <span class="token function">cheerpjRunMain</span><span class="token punctuation">(</span><span class="token string">&quot;com.plantuml.wasm.v1.RunInit&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cheerpjPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/plantuml-core.jar</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cheerpjPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>        
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">renderPng</span> <span class="token operator">=</span> <span class="token punctuation">(</span>pumlContent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> renderingStartedAt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> resultFileSuffix <span class="token operator">=</span> renderingStartedAt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">cjCall</span><span class="token punctuation">(</span><span class="token string">&quot;com.plantuml.wasm.v1.Png&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;convert&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;light&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/files/result-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resultFileSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> pumlContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token function">cjFileBlob</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">result-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resultFileSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token function">cheerpjGetFSMountForPath</span><span class="token punctuation">(</span><span class="token string">&#39;/files/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dbConnection<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">&#39;files&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;readwrite&#39;</span><span class="token punctuation">)</span>
                        transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">&#39;files&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/result-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>resultFileSuffix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

                        transaction<span class="token punctuation">.</span><span class="token function-variable function">oncomplete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Rendering finished in&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> renderingStartedAt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">resolve</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
					<span class="token punctuation">}</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">_runtimeResources</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&quot;/lt/runti......urity.provider.js&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> <span class="token function-variable function">_preloadPlantumlFiles</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>urlBasePathForFiles<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// just do explicit fetch here for further cache hits</span>
        <span class="token comment">// this code may evolve into bundling all resource files and pass it to cheerpj</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>urlBasePathForFiles<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/plantuml-core.jar.js</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>urlBasePathForFiles<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/plantuml-core.jar</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> initialize<span class="token punctuation">,</span> renderPng <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是模块的官方使用示例：index.html（需要本地 <code>npm i</code> 安装，并运行服务器）</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>PlantUML.js Basic Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Require cheerpj dependency --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cjrtnc.leaningtech.com/2.3/loader.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- Require PlantUML.js --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>node_modules/@sakirtemel/plantuml.js/plantuml.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loading.png<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>plantuml-diagram<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        plantuml<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token string">&#39;/app/node_modules/@sakirtemel/plantuml.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;plantuml-diagram&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> pumlContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                @startuml
                Bob -&gt; Alice: Hello!
                @enduml
            </span><span class="token template-punctuation string">\`</span></span>
            <span class="token keyword">const</span> url <span class="token operator">=</span> plantuml<span class="token punctuation">.</span><span class="token function">renderPng</span><span class="token punctuation">(</span>pumlContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                element<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在需要在ts中使用这个模块。需要注意ts的类型检查问题、以及该模块实际上是以 IIFE 的立即执行函数表达式的形式导出。</p><p>创建 plantuml.d.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// plantuml.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;@sakirtemel/plantuml.js/plantuml&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">PlantUML</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">initialize</span><span class="token operator">:</span> <span class="token punctuation">(</span>cheerpjPath<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    <span class="token function-variable function">renderPng</span><span class="token operator">:</span> <span class="token punctuation">(</span>pumlContent<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Blob<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> plantuml<span class="token operator">:</span> PlantUML<span class="token punctuation">;</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> plantuml<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建/修改 tsconfig.json</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;es2020&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dom&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;typeRoots&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules/@types&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;types&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node_modules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/*.spec.ts&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> plantuml <span class="token keyword">from</span> <span class="token string">&#39;@sakirtemel/plantuml.js/plantuml&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">initAndRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> plantuml<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 PlantUML</span>
    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> plantuml<span class="token punctuation">.</span><span class="token function">renderPng</span><span class="token punctuation">(</span><span class="token string">&#39;@startuml\\nAlice -&gt; Bob: Hello\\n@enduml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 渲染 PlantUML 内容</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Blob created:&#39;</span><span class="token punctuation">,</span> blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error during initialization or rendering:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">initAndRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>主要是用的人好少……https://github.com/search?q=sakirtemel%2Fplantuml.js&amp;type=code，github搜代码，也就只看到四个用法，其中两个是Plantuml的示例，其中有三个都是在html中使用，只有一个是在js中使用</p>`,45))])}const b=p(k,[["render",m],["__file","PlantUML.html.vue"]]),h=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/PlantUML/PlantUML.html","title":"PlantUML","lang":"zh-CN","frontmatter":{"description":"PlantUML 在线使用 我见过有两种，一种需要编码，另一种不需要编码 不需要编码 —— Gravizo 关于在线渲染的使用见：“plantUML by Gravizo” 笔记 就是这样的： 虽然说不需要编码，但其中肯定会涉及到一些不能用在url上的字符。所以使用这种方案的话，某些字符还是需要进行编码再使用的 需要编码 —— plantuml.com...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/PlantUML/PlantUML.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"PlantUML"}],["meta",{"property":"og:description","content":"PlantUML 在线使用 我见过有两种，一种需要编码，另一种不需要编码 不需要编码 —— Gravizo 关于在线渲染的使用见：“plantUML by Gravizo” 笔记 就是这样的： 虽然说不需要编码，但其中肯定会涉及到一些不能用在url上的字符。所以使用这种方案的话，某些字符还是需要进行编码再使用的 需要编码 —— plantuml.com..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PlantUML\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"PlantUML","slug":"plantuml","link":"#plantuml","children":[{"level":2,"title":"在线使用","slug":"在线使用","link":"#在线使用","children":[{"level":3,"title":"不需要编码 —— Gravizo","slug":"不需要编码-——-gravizo","link":"#不需要编码-——-gravizo","children":[]},{"level":3,"title":"需要编码 —— plantuml.com","slug":"需要编码-——-plantuml-com","link":"#需要编码-——-plantuml-com","children":[]}]},{"level":2,"title":"图表优化","slug":"图表优化","link":"#图表优化","children":[{"level":3,"title":"常用样式","slug":"常用样式","link":"#常用样式","children":[]},{"level":3,"title":"案例","slug":"案例","link":"#案例","children":[]}]},{"level":2,"title":"程序类型","slug":"程序类型","link":"#程序类型","children":[{"level":3,"title":"前端渲染 or 服务器渲染","slug":"前端渲染-or-服务器渲染","link":"#前端渲染-or-服务器渲染","children":[]},{"level":3,"title":"SVG or IMG or ASCII","slug":"svg-or-img-or-ascii","link":"#svg-or-img-or-ascii","children":[]},{"level":3,"title":"Jar or 服务器 or 纯Js","slug":"jar-or-服务器-or-纯js","link":"#jar-or-服务器-or-纯js","children":[{"level":4,"title":"Mdit-Plugins (服务器)","slug":"mdit-plugins-服务器","link":"#mdit-plugins-服务器","children":[]},{"level":4,"title":"Obsidian-PlantUML (服务器+Jar)","slug":"obsidian-plantuml-服务器-jar","link":"#obsidian-plantuml-服务器-jar","children":[]},{"level":4,"title":"官方 js demo (纯js)","slug":"官方-js-demo-纯js","link":"#官方-js-demo-纯js","children":[]}]}]},{"level":2,"title":"源码","slug":"源码","link":"#源码","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.95,"words":1485},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/文字描述图表/PlantUML/PlantUML.md","excerpt":"\\n<h2>在线使用</h2>\\n<p>我见过有两种，一种需要编码，另一种不需要编码</p>\\n<h3>不需要编码 —— Gravizo</h3>\\n<p>关于在线渲染的使用见：“plantUML by Gravizo” 笔记</p>\\n<p>就是这样的：</p>\\n<div class=\\"language-html\\" data-ext=\\"html\\" data-title=\\"html\\"><pre class=\\"language-html\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>img</span> <span class=\\"token attr-name\\">src</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span>https://g.gravizo.com/svg?\\n@startuml;\\n(*) --&gt; if \\"Some Test\\" then;\\n  --&gt;[true] \\"activity 1\\";\\n  if \\"\\" then;\\n    -&gt; \\"activity 3\\" as a3;\\n  else;\\n    if \\"Other test\\" then;\\n      -left-&gt; \\"activity 5\\";\\n    else;\\n      --&gt; \\"activity 6\\";\\n    endif;\\n  endif;\\nelse;\\n  -&gt;[false] \\"activity 2\\";\\nendif;\\na3 --&gt; if \\"last test\\" then;\\n  --&gt; \\"activity 7\\";\\nelse;\\n  -&gt; \\"activity 8\\";\\nendif;\\n@enduml\\n<span class=\\"token punctuation\\">'</span></span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,h as data};
