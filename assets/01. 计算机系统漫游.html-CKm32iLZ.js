import{_ as a,c as n,e as l,b as t,o as p,r as s}from"./app-CZqDObZ4.js";const d={};function r(h,e){const i=s("Mermaid");return p(),n("div",null,[e[0]||(e[0]=l('<h1 id="《深入了解计算机系统》" tabindex="-1"><a class="header-anchor" href="#《深入了解计算机系统》"><span>《深入了解计算机系统》</span></a></h1><p>这书也叫 <code>CSAPP</code></p><p>计算机科学丛书，机械工业出版社华章教育</p><ul><li><p>第一部分——程序结构和执行</p><p>2-6章</p></li><li><p>第二部分——在系统上运行程序</p><p>7-9章</p></li><li><p>第三部分——程序间的交互和通信</p><p>10-12章</p></li></ul><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>[toc]</p><h1 id="计算机系统漫游" tabindex="-1"><a class="header-anchor" href="#计算机系统漫游"><span>计算机系统漫游</span></a></h1><h2 id="信息-位-上下文" tabindex="-1"><a class="header-anchor" href="#信息-位-上下文"><span>信息 = 位 + 上下文</span></a></h2><p><mark>位</mark>：源程序实际上就是一个由值0和1组成的位（又称比特）序列</p><p><mark>上下文</mark>：在不同的上下文中，一个同样的字节序列可能表示一个整数、浮点数、字符串或者机器指令</p><h2 id="程序被其他程序翻译成不同的格式" tabindex="-1"><a class="header-anchor" href="#程序被其他程序翻译成不同的格式"><span>程序被其他程序翻译成不同的格式</span></a></h2><p>这个翻译过程可分为四个阶段完成</p><p>执行者四个阶段的程序（预编译器、编译器、汇编器和链接器）一起构成了<code>编译系统（compilation system）</code></p>',13)),t(i,{id:"mermaid-62",code:"eJx90EFKw0AUBuD9nMILTI8gmFi9gLuhi5KKCQQTmnqDkFFsTaS1YCNYpWIXmihKsRPbXmbeTHoLMxrERexy5r3v8b931G665taBhnaIYJGcngMLsRhScfOEzUPbdmpGA+P1vQ8TX0YBXE+x4boYbyON8FUiBnPOAjny/8FWgeXnME8vv6VhK6kT8UqL3yrgFeCnqkDTU/27BMJ0TXuQjPiiJ+NEjGlpOevmqxhOZyV3VNj+Ulw8KG63FK8rLs4e87vuJttAaI/ov2FFGPFlrDYbU6CBDqzPP56LN9CFuHqBdA5sUETn2ezPJLdtHXeqUtTRPpFvmcxuYfJesnJxr3PSspyaWX1nDX0Bglvpyg=="}),e[1]||(e[1]=l('<h2 id="了解汇编系统益处" tabindex="-1"><a class="header-anchor" href="#了解汇编系统益处"><span>了解汇编系统益处</span></a></h2><ul><li><p>优化程序性能。如：</p><ul><li><p>switch语句是否总比一系列的if-else语句高效得多？</p></li><li><p>一个函数调用的开销有多大？</p></li><li><p>while循环比for循环更有效吗？</p></li><li><p>指针引用比数组索引更有效吗？</p></li><li><p>为什么将循环求和的结果放到一个本地变量会比放到一个通过引用传递过来的参数运行起来要快得多？</p></li><li><p>为什么简单重新排列算术表达式中的括号就能让函数运行得更快？</p></li></ul></li><li><p>理解链接时出现的错误。如：</p><ul><li>链接器报告说它无法解析一个引用，是什么意思？</li><li>静态变量和全局变量区别？</li><li>在不同C文件定义了名字相同的两个全局变量会发生什么？</li><li>静态库和动态库的区别？</li><li>命令行上排列库的顺序有什么影响？</li><li>更重要的：为什么有些链接错误直到运行时才会出现？</li></ul></li><li><p>避免安全漏洞</p><ul><li>多年以来，缓冲区溢出是漏洞主要原因</li></ul></li></ul><h2 id="处理器读并解释储存在内存中的指令" tabindex="-1"><a class="header-anchor" href="#处理器读并解释储存在内存中的指令"><span>处理器读并解释储存在内存中的指令</span></a></h2><p>要理解运行hello程序时发生了什么，需要先了解一个典型系统的硬件组织</p><h3 id="系统的硬件组成" tabindex="-1"><a class="header-anchor" href="#系统的硬件组成"><span>系统的硬件组成</span></a></h3><p>Inter系统产品族的模型为例：</p><blockquote><ol><li><p>总线</p><p>通常被设计成传送定长的<code>字节块</code>，也就是<code>字（word）</code></p><p>字中的字节数（即字长）是一个基本的系统参数，各个系统不同，现多为4字节（32位）和8字节（64位）</p></li><li><p>I/O设备</p><p>每个I/O设备都通过一个控制器或适配器与I/O总线相连</p><p>控制器和适配器的区别主要在于封装方式</p></li><li><p>主存</p><p>由一组动态随机存取存储器（DRAM）芯片组成</p></li><li><p>处理器</p><p>核心是一个大小为<code>一个字</code>的存储设备（或寄存器），称为<code>程序计数器（PC）</code></p><p>任何时刻，PC都指向内存中某条机器语言指令（即含有该指令的地址）</p><p>CPU操作：</p><ul><li>加载：从<code>主存</code>复制一个字节或一个字到<code>寄存器</code>并覆盖</li><li>存储：从<code>寄存器</code>复制一个字节或一个字到<code>主存</code>的某个位置并覆盖</li><li>操作：把两个寄存器内容复制到<code>ALU</code>运算，结果存放到一个寄存器中并覆盖</li><li>调整：从指令中抽取一个字复制到<code>PC</code>中并覆盖</li></ul></li></ol></blockquote>',7)),t(i,{id:"mermaid-236",code:"eJxLL0osyFDwCeIqLk2CsJ0DQrk4A5y5OB19QnV1dZ+ub3m6dsbTmSueTWt/snsbUORZw+7nu/Y/61v6tH8xV2peChcXsoiu7vPNu5/vng8RAyr31Pd/tnAp15Mdu0HmNK0AGqUL4QANb2sF0uhKIRSEC5N62rrtye5pQJEX6/Y9XdLOhXAvQowzNNjpWd/ypx3bQHbo6r6csu757BmYwnsWPFsAVP109r6nexe9bGh62doLkXk2Y9/zJbuAbC7O54sbgXqRtUFEgDJ7Jz7fPQdZG0SEi/NZ58qnG6c+W74XEipoTgYqRHYIFmk0B2FRgeYqbCpQXYdFBcKVAFrpGlw="}),e[2]||(e[2]=l(`<blockquote><p>补充：</p><ul><li>CPU：中央处理单元</li><li>ALU：算术/逻辑单元</li><li>PC：程序计数器</li><li>USB：通用串行总线</li></ul></blockquote><h3 id="运行hello程序" tabindex="-1"><a class="header-anchor" href="#运行hello程序"><span>运行hello程序</span></a></h3><p>要理解运行hello程序时发生了什么，需要先了解硬件组织。了解完再回过头看hello程序的运行：（配合图理解）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">linux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./hello</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> world</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">linux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>当输入“./hello”</p><p>输入的字符串由USB控制器经总线到达寄存器文件，然后再存储到主存中</p></li><li><p>当回车</p><p>硬盘中的hello可执行文件经总线到达主存储器（存储数据和程序）</p></li><li><p>主存储器读取到以后</p><p>可执行文件代码经总线到达寄存器文件，处理后再经总线到达显示器，显示”hello，world“</p></li></ol><h2 id="高速缓存至关重要" tabindex="-1"><a class="header-anchor" href="#高速缓存至关重要"><span>高速缓存至关重要</span></a></h2><p>原因</p><p>高速缓存存储器：</p>`,8)),t(i,{id:"mermaid-306",code:"eJxLL0osyFDwCeIqLk2CsJ0DQrk4HX1CdXV1n65vebp2xtOZK55Na3+yextQ5FnD7ue79j/rW/q0fzEXJ6b8y9UzXjbMf75nMkgciJpWAGXR9aXmpXABADfFQYM="}),e[3]||(e[3]=l('<h2 id="存储设备形成层次结构" tabindex="-1"><a class="header-anchor" href="#存储设备形成层次结构"><span>存储设备形成层次结构</span></a></h2><h2 id="操作系统管理硬件" tabindex="-1"><a class="header-anchor" href="#操作系统管理硬件"><span>操作系统管理硬件</span></a></h2><p>操作系统作用：</p><ul><li>防止硬件被失控的程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备</li></ul><p>其通过几个抽象概念（进程、虚拟内存、文件）来实现这两个功能</p><ul><li>文件：对I/O设备的抽象表示</li><li>虚拟内存：对主存、磁盘I/O的抽象表示</li><li>进程：对处理器、主存、I/O设备的抽象表示</li></ul><h3 id="进程" tabindex="-1"><a class="header-anchor" href="#进程"><span>进程</span></a></h3><p>是操作系统对一个正在运行程序的抽象</p><blockquote><p>Windows下查看进程</p><ul><li>任务管理器开启PID显示后，显示有PID（process id）的就是进程，一个应用可以有多个进程</li><li>cmd使用pslist或tasklist可以查看进程</li></ul></blockquote><h3 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h3><p>一个进程由多个进程组成，再由多个指令组成。进程 &gt; 线程 &gt; 指令 &gt; 操作</p><p>线程是很重要的编程模型，多线程比多进程之间更容易共享数据</p><blockquote><p>Windows下查看进程</p><ul><li>pslist -dmx pid号可以查看某一进程下的所有线程</li></ul></blockquote><h3 id="虚拟内存" tabindex="-1"><a class="header-anchor" href="#虚拟内存"><span>虚拟内存</span></a></h3><p>为每个进程提供一个假象：每个进程都在独占使用主存</p><p>每个进程看到的内存都是一致的，称为<code>虚拟地址空间</code></p><blockquote><p>笔者：</p><blockquote><p>我以前所以为的：用磁盘空间来增加内存大小的手段，只不过是其的其中一个作用。而并非其本质</p></blockquote><p>百度百科：</p><blockquote><p>虚拟内存是计算机系统内存管理的一种技术。</p><p>它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换</p></blockquote><p>其必要性：简书：https://blog.csdn.net/lvyibin890/article/details/82217193</p><blockquote><p>操作系统有虚拟内存与物理内存的概念。在很久以前，还没有虚拟内存概念的时候，程序寻址用的都是物理地址。程序能寻址的范围是有限的，这取决于CPU的地址线条数。比如在32位平台下，寻址的范围是2^32也就是4G。并且这是固定的，如果没有虚拟内存，且每次开启一个进程都给4G的物理内存，就可能会出现很多问题：</p><ul><li>因为我的物理内存时有限的，当有多个进程要执行的时候，都要给4G内存，很显然你内存小一点，这很快就分配完了，于是没有得到分配资源的进程就只能等待。当一个进程执行完了以后，再将等待的进程装入内存。这种频繁的装入内存的操作是很没效率的</li><li>由于指令都是直接访问物理内存的，那么我这个进程就可以修改其他进程的数据，甚至会修改内核地址空间的数据，这是我们不想看到的</li><li>因为内存时随机分配的，所以程序运行的地址也是不正确的。</li></ul><p>于是针对上面会出现的各种问题，虚拟内存就出来了。</p></blockquote></blockquote><p>Linux进程的虚拟地址空间设计：（地址从下往上增大）</p><table><thead><tr><th style="text-align:center;">虚拟地址空间</th><th>补充说明</th></tr></thead><tbody><tr><td style="text-align:center;">内核虚拟内存</td><td>【顶部区域】不允许应用程序读写和调用，必须通过调用内核来执行这些操作</td></tr><tr><td style="text-align:center;">用户栈<br>（往下增长）</td><td>运行时创建<br>【动态大小】每次调用函数栈增长，函数返回时栈会收缩</td></tr><tr><td style="text-align:center;">↕</td><td></td></tr><tr><td style="text-align:center;">共享库的内存映射区域<br>（往上增长）</td><td>【动态大小】存放像C标准库和数学库这样共享库代码和数据的地方</td></tr><tr><td style="text-align:center;">↑</td><td></td></tr><tr><td style="text-align:center;">运行时堆<br>（往上增长）</td><td>运行时由malloc创建<br>【动态大小】调用malloc和free这样的C标准库函数时可动态扩展和收缩</td></tr><tr><td style="text-align:center;">读/写数据</td><td>从hello可执行文件加载进来的程序代码和数据</td></tr><tr><td style="text-align:center;">只读的代码和数据</td><td>【开始区域】从hello可执行文件加载进来的程序代码和数据</td></tr></tbody></table><h3 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h3><p>文件就是字节序列</p><p>每个I/O设备都可以看成是文件：系统中所有输入输出都是通过使用一小组称为Unix I/O的系统函数调用读写文件来实现的。</p><h2 id="系统之间利用网络通信" tabindex="-1"><a class="header-anchor" href="#系统之间利用网络通信"><span>系统之间利用网络通信</span></a></h2><h2 id="重要主题" tabindex="-1"><a class="header-anchor" href="#重要主题"><span>重要主题</span></a></h2><h3 id="amdahl定律" tabindex="-1"><a class="header-anchor" href="#amdahl定律"><span>Amdahl定律</span></a></h3><h3 id="并发和并行" tabindex="-1"><a class="header-anchor" href="#并发和并行"><span>并发和并行</span></a></h3><ul><li>线程级并发（同时多个程序（进程）执行）</li><li>指令级并发（同时多个指令执行）</li><li>单指令、多数据并发（SIMD并行）（同一指令，多个操作并行执行） （特殊硬件允许一条指令产生多个可以并行执行的操作）</li></ul><h3 id="计算机系统中抽象的重要性" tabindex="-1"><a class="header-anchor" href="#计算机系统中抽象的重要性"><span>计算机系统中抽象的重要性</span></a></h3><p>例如：为一组函数规定一个简单的应用程序接口（API）就是一个很好的编程习惯</p>',29))])}const c=a(d,[["render",r],["__file","01. 计算机系统漫游.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/01.%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C/01.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html","title":"《深入了解计算机系统》","lang":"zh-CN","frontmatter":{"description":"《深入了解计算机系统》 这书也叫 CSAPP 计算机科学丛书，机械工业出版社华章教育 第一部分——程序结构和执行 2-6章 第二部分——在系统上运行程序 7-9章 第三部分——程序间的交互和通信 10-12章 目录 [toc] 计算机系统漫游 信息 = 位 + 上下文 位：源程序实际上就是一个由值0和1组成的位（又称比特）序列 上下文：在不同的上下文中...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/01.%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C/01.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《深入了解计算机系统》"}],["meta",{"property":"og:description","content":"《深入了解计算机系统》 这书也叫 CSAPP 计算机科学丛书，机械工业出版社华章教育 第一部分——程序结构和执行 2-6章 第二部分——在系统上运行程序 7-9章 第三部分——程序间的交互和通信 10-12章 目录 [toc] 计算机系统漫游 信息 = 位 + 上下文 位：源程序实际上就是一个由值0和1组成的位（又称比特）序列 上下文：在不同的上下文中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《深入了解计算机系统》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《深入了解计算机系统》","slug":"《深入了解计算机系统》","link":"#《深入了解计算机系统》","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"计算机系统漫游","slug":"计算机系统漫游","link":"#计算机系统漫游","children":[{"level":2,"title":"信息 = 位 + 上下文","slug":"信息-位-上下文","link":"#信息-位-上下文","children":[]},{"level":2,"title":"程序被其他程序翻译成不同的格式","slug":"程序被其他程序翻译成不同的格式","link":"#程序被其他程序翻译成不同的格式","children":[]},{"level":2,"title":"了解汇编系统益处","slug":"了解汇编系统益处","link":"#了解汇编系统益处","children":[]},{"level":2,"title":"处理器读并解释储存在内存中的指令","slug":"处理器读并解释储存在内存中的指令","link":"#处理器读并解释储存在内存中的指令","children":[{"level":3,"title":"系统的硬件组成","slug":"系统的硬件组成","link":"#系统的硬件组成","children":[]},{"level":3,"title":"运行hello程序","slug":"运行hello程序","link":"#运行hello程序","children":[]}]},{"level":2,"title":"高速缓存至关重要","slug":"高速缓存至关重要","link":"#高速缓存至关重要","children":[]},{"level":2,"title":"存储设备形成层次结构","slug":"存储设备形成层次结构","link":"#存储设备形成层次结构","children":[]},{"level":2,"title":"操作系统管理硬件","slug":"操作系统管理硬件","link":"#操作系统管理硬件","children":[{"level":3,"title":"进程","slug":"进程","link":"#进程","children":[]},{"level":3,"title":"线程","slug":"线程","link":"#线程","children":[]},{"level":3,"title":"虚拟内存","slug":"虚拟内存","link":"#虚拟内存","children":[]},{"level":3,"title":"文件","slug":"文件","link":"#文件","children":[]}]},{"level":2,"title":"系统之间利用网络通信","slug":"系统之间利用网络通信","link":"#系统之间利用网络通信","children":[]},{"level":2,"title":"重要主题","slug":"重要主题","link":"#重要主题","children":[{"level":3,"title":"Amdahl定律","slug":"amdahl定律","link":"#amdahl定律","children":[]},{"level":3,"title":"并发和并行","slug":"并发和并行","link":"#并发和并行","children":[]},{"level":3,"title":"计算机系统中抽象的重要性","slug":"计算机系统中抽象的重要性","link":"#计算机系统中抽象的重要性","children":[]}]}]}],"git":{},"readingTime":{"minutes":8.74,"words":2623},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/01. 计算机系统漫游.md","excerpt":"\\n<p>这书也叫 <code>CSAPP</code></p>\\n<p>计算机科学丛书，机械工业出版社华章教育</p>\\n<ul>\\n<li>\\n<p>第一部分——程序结构和执行</p>\\n<p>2-6章</p>\\n</li>\\n<li>\\n<p>第二部分——在系统上运行程序</p>\\n<p>7-9章</p>\\n</li>\\n<li>\\n<p>第三部分——程序间的交互和通信</p>\\n<p>10-12章</p>\\n</li>\\n</ul>\\n<h1>目录</h1>\\n<p>[toc]</p>\\n<h1>计算机系统漫游</h1>\\n<h2>信息 = 位 + 上下文</h2>\\n<p><mark>位</mark>：源程序实际上就是一个由值0和1组成的位（又称比特）序列</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/01. 计算机系统漫游.md","value":{"title":"01. 计算机系统漫游","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/01. 程序结构和执行/01. 计算机系统漫游.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,u as data};
