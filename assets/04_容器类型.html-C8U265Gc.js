import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-C817UQ99.js";const p={},e=t(`<h1 id="容器类型" tabindex="-1"><a class="header-anchor" href="#容器类型"><span>容器类型</span></a></h1><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h3 id="声明定义、初始化、赋值、使用" tabindex="-1"><a class="header-anchor" href="#声明定义、初始化、赋值、使用"><span>声明定义、初始化、赋值、使用</span></a></h3><p><strong>与其他语言不同</strong>：吐槽，Go这个 <code>[]</code> 前置的语法丑得想吐，而且糖多得想吐</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 方式1: 声明定义，并赋值</span>
    <span class="token keyword">var</span> scores <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>	<span class="token comment">// 自动初始化对应类型的零值，这里全0</span>
    scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span>
    scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">91</span>
    scores<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">39</span>
    scores<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">60</span>
    scores<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21</span>
    
    <span class="token comment">// 方式2: 上面也可以改写成初始化的形式</span>
    <span class="token keyword">var</span> arr1 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>		<span class="token comment">// 方式2.1</span>
    <span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>				<span class="token comment">// 方式2.2</span>
    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>			<span class="token comment">// 方式2.3</span>
    <span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">}</span>	<span class="token comment">// 方式2.4</span>
    
    <span class="token comment">// 求和</span>
    sum <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 平均数</span>
    avg <span class="token operator">:=</span> sum <span class="token operator">/</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> scores <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>	<span class="token comment">// 自动初始化对应类型的零值，这里全0</span>
    
    <span class="token comment">// 存入成绩</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;录入第%d个学生的成绩&quot;</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 打印 - for 遍历版</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个学生的成绩: %d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 打印 - for range 遍历版</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> scores <span class="token punctuation">{</span>	<span class="token comment">// key和value的名字可以换，如果不需要key可以替换成\`_\`</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个学生的成绩: %d\\n&quot;</span><span class="token punctuation">,</span> key<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p><strong>与其他语言不同</strong>：</p><h4 id="内存分析" tabindex="-1"><a class="header-anchor" href="#内存分析"><span>内存分析</span></a></h4><p>和其他语言一样，略</p><h4 id="注意事项-go数组的长度是类型的一部分" tabindex="-1"><a class="header-anchor" href="#注意事项-go数组的长度是类型的一部分"><span>注意事项 - Go数组的长度是类型的一部分</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;数组类型为: %T&quot;</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span>	<span class="token comment">// 打印：[3]int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项-go数组属于值类型-默认值传递" tabindex="-1"><a class="header-anchor" href="#注意事项-go数组属于值类型-默认值传递"><span>注意事项 - Go数组属于值类型，默认值传递</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	
    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>
    <span class="token function">test1</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>	<span class="token comment">// [3,6,9]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如有需要使用指针传递</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	
    <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>
    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr3<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>	<span class="token comment">// [7,6,9]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">test1</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-二维数组" tabindex="-1"><a class="header-anchor" href="#扩展-二维数组"><span>扩展 - 二维数组</span></a></h3><p>和其他语言基本相同，略</p><h2 id="切片-slice" tabindex="-1"><a class="header-anchor" href="#切片-slice"><span>切片 (Slice)</span></a></h2><p><strong>与其他语言不同</strong>：</p><ul><li>在其他语言C/C++/Java等中并不常见</li><li>在Python也有但似乎不是一个独立的类型，最常用的还是是列表</li><li>在Go中是非常常用的，主要使用的容器类型就是切片而非数组。</li></ul><h3 id="声明定义、初始化、赋值、使用-1" tabindex="-1"><a class="header-anchor" href="#声明定义、初始化、赋值、使用-1"><span>声明定义、初始化、赋值、使用</span></a></h3><p>创建方式非常多样灵活</p><h4 id="直接创建空切片-注意-无存值空间" tabindex="-1"><a class="header-anchor" href="#直接创建空切片-注意-无存值空间"><span>直接创建空切片 (注意：无存值空间)</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 若不初始化，则相当于内部的内容指针为nil</span>
slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>			<span class="token comment">// 这里会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切片不可声明后直接使用 (内容指针nil)。需要让切片引用一个内存 (方式很多)：初始化、make创建、数组或切片转切片、切片修改方法等</p><p>原因：数组默认初始化的结果是值均0，切片默认初始化的结果是内容指针值为nil</p><h4 id="初始化写法" tabindex="-1"><a class="header-anchor" href="#初始化写法"><span>初始化写法</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 区分：\`[]\`类型表示的是切片，可变长。而\`[...]\`会自动填数字，有数字的表示的是数组，定长</span>
slice <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>	<span class="token comment">// 其实这种方式本质上也相当于引用了一个数组</span>
list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用make创建切片" tabindex="-1"><a class="header-anchor" href="#用make创建切片"><span>用make创建切片</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>					<span class="token comment">// 类型[]int，长度4，容量20</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 打印：值[0,0,0,0], 长度4, 容量20</span>
    
    slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>
    slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从数组创建切片" tabindex="-1"><a class="header-anchor" href="#从数组创建切片"><span>从数组创建切片</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数组</span>
    <span class="token keyword">var</span> intArr <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;值: %v&quot;</span><span class="token punctuation">,</span> intArr<span class="token punctuation">)</span>					<span class="token comment">// 值: [3, 6, 9, 1, 4, 7]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;6值对应的地址: %p&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment">// 0xc308</span>
    
    <span class="token comment">// 切片</span>
    <span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;值: %v, 个数: %v, 容量: %v&quot;</span><span class="token punctuation">,</span>	<span class="token comment">// 值 [6, 9], 个数 2, 容量 5; 容量的值比较接近个数的两倍</span>
                slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;6值对应的地址: %p&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>	<span class="token comment">// 0xc308 (同数组下标1的值)</span>
    
    <span class="token comment">// 语法糖</span>
    <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>b<span class="token punctuation">]</span>			等同 <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>b<span class="token punctuation">]</span>
    <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>		等同 <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>		等同 <span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从切片创建切片" tabindex="-1"><a class="header-anchor" href="#从切片创建切片"><span>从切片创建切片</span></a></h4><p>例如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>slice2 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1"><span>方法</span></a></h3><h4 id="遍历-1" tabindex="-1"><a class="header-anchor" href="#遍历-1"><span>遍历</span></a></h4><p>都差不多</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>slice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>

<span class="token comment">// 方式1: 普通for</span>
<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;slice[%v] == %v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> slice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方式2: for range</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> slice <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;slice[%v] == %v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 改</span>

<span class="token comment">// 切片 -&gt; 切片</span>
slice2 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>		<span class="token comment">// 追加。底层会创建一个新数组+新切片。也可以赋值回给自己，但此时该切片不再能修改原数组</span>
slice3 <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> slice2<span class="token operator">...</span><span class="token punctuation">)</span>	<span class="token comment">//     ^ 这里三个点类似TypeScript的用法，必须写</span>
slice2 <span class="token operator">:=</span> slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>				<span class="token comment">// 减少</span>
<span class="token function">copy</span><span class="token punctuation">(</span>slice2<span class="token punctuation">,</span> slice1<span class="token punctuation">)</span>				<span class="token comment">// 拷贝。将slice1数组复制到slice2的数组</span>

<span class="token comment">// 其他 -&gt; 切片</span>
<span class="token keyword">var</span> slice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> intArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>		<span class="token comment">// 数组转切片</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h3><p>（详见 ”数组 vs 切片 vs 其他容器“，本质是一个结构体实现的信息头，共用存值地址，可以用切片修改原数组的值）</p><h2 id="数组-vs-切片-vs-其他非键值容器" tabindex="-1"><a class="header-anchor" href="#数组-vs-切片-vs-其他非键值容器"><span><strong>数组 vs 切片 vs 其他非键值容器</strong></span></a></h2><p>对比 Go 中各种容器：</p><h3 id="malloc空间" tabindex="-1"><a class="header-anchor" href="#malloc空间"><span>Malloc空间</span></a></h3><ul><li>Go：不太确定，写到这里的时候还没学到，new 函数是类似的作用？但感觉 Go 一般不这样做，用得不多</li><li>本质 <ul><li>长度不可变</li><li>内存：无额外内存占用</li><li>实现：依赖系统接口，操作虚拟内存。需要注意不是真的无额外内存占用，而是语言层面上无 (获取不到，系统自动处理)。虚拟内存分配空闲段时头部是有长度等元信息的。以便仅需头指针即可释放内存</li></ul></li></ul><h3 id="数组-1" tabindex="-1"><a class="header-anchor" href="#数组-1"><span>数组</span></a></h3><ul><li>Go：没切片那么常用，类型例如：<code>[n]int</code> 或 <code>[...]int</code></li><li>本质 <ul><li>长度不可变</li><li>内存：无额外内存占用</li><li>实现：非常普通的连续内存，最简单且占用最小的容器</li></ul></li><li><strong>与其他语言不同</strong>： <ul><li>注意Go数组有几个与其他语言不同的特殊点： <ul><li>基本类型</li><li>值传递</li><li>不同长度数组是不同的类型</li></ul></li><li>遍历 / len() 的本质： <ul><li>C 数组：传递时往往要传递头指针+长度</li><li>C++ 容器：可以直接范围循环 (容器头存储了len信息)</li><li>Go数组：由于我们能用 <code>len()</code> 获取数组长度，自然也能直接遍历。而 <code>len()</code> 的本质类似C++的常量表达式，反正是编译时获取的 (毕竟定长，和获取int/byte等其他基本类似的长度没什么区别。所以说 Go 的数组为什么是基本类型)</li></ul></li></ul></li></ul><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片"><span>切片</span></a></h3><ul><li><p>Go：非常更常用，类型例如：<code>[]int</code>，使用例如：可变数量参数的本质就是切片、<code>r := []rune(str)</code> 遍历经常先转再遍历切片</p></li><li><p>本质</p><ul><li><p>仅元信息/信息头。是在数组类型上的抽象，对数组一个连续片段的引用 (整个数组/子集)，提供了一个数组相关的动态窗口</p></li><li><p><strong>内存</strong>：仅信息头，切片类型自身不包含存值内存。</p><p>特别的：切片不可声明后直接使用 (内容指针nil)。需要让切片引用一个内存 (方式很多)：初始化、make创建、数组或切片转切片、切片修改方法等</p></li><li><p><strong>实现</strong>：除存值内存外，还有信息头，信息头是包含这些内容的结构体：</p><ul><li>长度（切片长度，等于结束下标减头下标，包括头下标而不包括结束下标对应的值）</li><li>容量（可以动态改变）</li><li>内容头指针（直接创建则为nil，需要由数组创建以与原数组共用存值的内存，或用make创建对应内存）</li></ul></li></ul></li></ul><h3 id="再高级的其他容器" tabindex="-1"><a class="header-anchor" href="#再高级的其他容器"><span>再高级的其他容器</span></a></h3><ul><li>Go： 还没学到</li><li>本质 <ul><li>往往都有额外占用来存储数据，且地址与值内存分离 (若要支持扩容这一点是必须的)</li><li>一般即有元信息/信息头，又有存值内存的所有权</li></ul></li></ul><h2 id="映射-map-键值对" tabindex="-1"><a class="header-anchor" href="#映射-map-键值对"><span>映射 Map (键值对)</span></a></h2><p>key、value 可以是：bool、数字、string、指针、channel、前面对应的接口、结构体、数组。不过key通常为int、string（slice、map、function 不可以）</p><p><strong>与其他语言不同</strong>：</p><p>不同语言的键值对类型：</p><ul><li>C++：std::unordered_map (无序)、std::map (有序)</li><li>Java：HashMap (无序)、TreeMap (有序)</li><li>Python &lt;= 3.6：dict (无序)、collections.OrderedDict (有序)</li><li>Python &gt;= 3.7：无 (无序)、dict (有序)</li><li>Go：<strong>map</strong> (无序)、第三方库或自定义结构 (有序)</li></ul><p>底层实现：</p><ul><li>有序键值对 <ul><li>平衡二叉树 (AVL树)</li><li>平衡二叉树 (红黑树)，(Java、C++ 用)</li><li>排序数组 (不常见，增删慢，查找二分快)</li><li>不常用 <ul><li>B/B+树</li><li>前缀树 (Trie)</li></ul></li></ul></li><li>无序键值对 <ul><li>哈希表</li><li>链表</li><li>开发寻址表 (Open Addressing Table)</li></ul></li><li>通用 <ul><li>布隆过滤器 (Bloom Filter)</li></ul></li></ul><h3 id="声明定义、初始化、赋值、使用-2" tabindex="-1"><a class="header-anchor" href="#声明定义、初始化、赋值、使用-2"><span>声明定义、初始化、赋值、使用</span></a></h3><p>和slice一样，直接声明是没分配空间的。</p><p>创建方式也是非常多的</p><h4 id="直接创建空map-注意-无存值空间" tabindex="-1"><a class="header-anchor" href="#直接创建空map-注意-无存值空间"><span>直接创建空map (注意：无存值空间)</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> 变量名 <span class="token keyword">map</span><span class="token punctuation">[</span>keyType<span class="token punctuation">]</span>valueType

<span class="token comment">// 声明定义</span>
<span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="初始化写法-1" tabindex="-1"><a class="header-anchor" href="#初始化写法-1"><span>初始化写法</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>c <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token number">2021</span><span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
    <span class="token number">2023</span><span class="token punctuation">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
	<span class="token number">2024</span><span class="token punctuation">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用make创建map" tabindex="-1"><a class="header-anchor" href="#用make创建map"><span>用make创建map</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span>
    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>	<span class="token comment">// 可以存10个键值对</span>
    a<span class="token punctuation">[</span><span class="token number">2012</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
    a<span class="token punctuation">[</span><span class="token number">2013</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>
    a<span class="token punctuation">[</span><span class="token number">2014</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>					<span class="token comment">// 打印：map[2013:b 2012:a 2014:c]</span>
    
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>		<span class="token comment">// 参数二可以不写自动分配</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法-2" tabindex="-1"><a class="header-anchor" href="#方法-2"><span>方法</span></a></h3><h4 id="遍历-2" tabindex="-1"><a class="header-anchor" href="#遍历-2"><span>遍历</span></a></h4><p>用 for range 遍历</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> myMap <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;key:%v, value:%v \\t&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增删改查-1" tabindex="-1"><a class="header-anchor" href="#增删改查-1"><span>增删改查</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 查</span>
value<span class="token punctuation">,</span> <span class="token builtin">bool</span> <span class="token operator">=</span> myMap<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span>			<span class="token comment">// 查找。value为值, bool为是否返回</span>
mapLen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span>				<span class="token comment">// 获取长度。键值对的个数</span>

<span class="token comment">// 增/改</span>
myMap<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;66&quot;</span>					<span class="token comment">// 增改。很简单，如果没有对应的数据就会自动新增</span>

<span class="token comment">// 删</span>
<span class="token function">delete</span><span class="token punctuation">(</span>myMap<span class="token punctuation">,</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span>				<span class="token comment">// 删除。不存在不报错</span>
myMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> 					<span class="token comment">// 清空。一种方式是遍历删除，另一种方式是make一个新的，让原来的成为垃圾被GC回收</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展-嵌套map" tabindex="-1"><a class="header-anchor" href="#扩展-嵌套map"><span>扩展 - 嵌套map</span></a></h3><p>value是map类型 (嵌套key) 的遍历：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>	<span class="token comment">// 所以说Go不加小括号有时挺难看的</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级1&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;21&quot;</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级1&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;20&quot;</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级2&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;19&quot;</span>
a<span class="token punctuation">[</span><span class="token string">&quot;班级2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;老六&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span>

<span class="token keyword">for</span> k1<span class="token punctuation">,</span>v1 <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span>
    <span class="token keyword">for</span> k2<span class="token punctuation">,</span>v2 <span class="token operator">:=</span> <span class="token keyword">range</span> v1 <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;班级 %v, 名字 %v, 年龄 %v\\t&quot;</span><span class="token punctuation">,</span> k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管道-channel" tabindex="-1"><a class="header-anchor" href="#管道-channel"><span>管道 (Channel)</span></a></h2><p>（详见 “协程” 一章）</p>`,83),o=[e];function l(c,i){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","04_容器类型.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04_%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html","title":"容器类型","lang":"zh-CN","frontmatter":{"description":"容器类型 数组 声明定义、初始化、赋值、使用 与其他语言不同：吐槽，Go这个 [] 前置的语法丑得想吐，而且糖多得想吐 方法 遍历 原理 与其他语言不同： 内存分析 和其他语言一样，略 注意事项 - Go数组的长度是类型的一部分 注意事项 - Go数组属于值类型，默认值传递 如有需要使用指针传递 扩展 - 二维数组 和其他语言基本相同，略 切片 (Sl...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04_%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"容器类型"}],["meta",{"property":"og:description","content":"容器类型 数组 声明定义、初始化、赋值、使用 与其他语言不同：吐槽，Go这个 [] 前置的语法丑得想吐，而且糖多得想吐 方法 遍历 原理 与其他语言不同： 内存分析 和其他语言一样，略 注意事项 - Go数组的长度是类型的一部分 注意事项 - Go数组属于值类型，默认值传递 如有需要使用指针传递 扩展 - 二维数组 和其他语言基本相同，略 切片 (Sl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"容器类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"容器类型","slug":"容器类型","link":"#容器类型","children":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"声明定义、初始化、赋值、使用","slug":"声明定义、初始化、赋值、使用","link":"#声明定义、初始化、赋值、使用","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[{"level":4,"title":"遍历","slug":"遍历","link":"#遍历","children":[]}]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[{"level":4,"title":"内存分析","slug":"内存分析","link":"#内存分析","children":[]},{"level":4,"title":"注意事项 - Go数组的长度是类型的一部分","slug":"注意事项-go数组的长度是类型的一部分","link":"#注意事项-go数组的长度是类型的一部分","children":[]},{"level":4,"title":"注意事项 - Go数组属于值类型，默认值传递","slug":"注意事项-go数组属于值类型-默认值传递","link":"#注意事项-go数组属于值类型-默认值传递","children":[]}]},{"level":3,"title":"扩展 - 二维数组","slug":"扩展-二维数组","link":"#扩展-二维数组","children":[]}]},{"level":2,"title":"切片 (Slice)","slug":"切片-slice","link":"#切片-slice","children":[{"level":3,"title":"声明定义、初始化、赋值、使用","slug":"声明定义、初始化、赋值、使用-1","link":"#声明定义、初始化、赋值、使用-1","children":[{"level":4,"title":"直接创建空切片 (注意：无存值空间)","slug":"直接创建空切片-注意-无存值空间","link":"#直接创建空切片-注意-无存值空间","children":[]},{"level":4,"title":"初始化写法","slug":"初始化写法","link":"#初始化写法","children":[]},{"level":4,"title":"用make创建切片","slug":"用make创建切片","link":"#用make创建切片","children":[]},{"level":4,"title":"从数组创建切片","slug":"从数组创建切片","link":"#从数组创建切片","children":[]},{"level":4,"title":"从切片创建切片","slug":"从切片创建切片","link":"#从切片创建切片","children":[]}]},{"level":3,"title":"方法","slug":"方法-1","link":"#方法-1","children":[{"level":4,"title":"遍历","slug":"遍历-1","link":"#遍历-1","children":[]},{"level":4,"title":"增删改查","slug":"增删改查","link":"#增删改查","children":[]}]},{"level":3,"title":"原理","slug":"原理-1","link":"#原理-1","children":[]}]},{"level":2,"title":"数组 vs 切片 vs 其他非键值容器","slug":"数组-vs-切片-vs-其他非键值容器","link":"#数组-vs-切片-vs-其他非键值容器","children":[{"level":3,"title":"Malloc空间","slug":"malloc空间","link":"#malloc空间","children":[]},{"level":3,"title":"数组","slug":"数组-1","link":"#数组-1","children":[]},{"level":3,"title":"切片","slug":"切片","link":"#切片","children":[]},{"level":3,"title":"再高级的其他容器","slug":"再高级的其他容器","link":"#再高级的其他容器","children":[]}]},{"level":2,"title":"映射 Map (键值对)","slug":"映射-map-键值对","link":"#映射-map-键值对","children":[{"level":3,"title":"声明定义、初始化、赋值、使用","slug":"声明定义、初始化、赋值、使用-2","link":"#声明定义、初始化、赋值、使用-2","children":[{"level":4,"title":"直接创建空map (注意：无存值空间)","slug":"直接创建空map-注意-无存值空间","link":"#直接创建空map-注意-无存值空间","children":[]},{"level":4,"title":"初始化写法","slug":"初始化写法-1","link":"#初始化写法-1","children":[]},{"level":4,"title":"用make创建map","slug":"用make创建map","link":"#用make创建map","children":[]}]},{"level":3,"title":"方法","slug":"方法-2","link":"#方法-2","children":[{"level":4,"title":"遍历","slug":"遍历-2","link":"#遍历-2","children":[]},{"level":4,"title":"增删改查","slug":"增删改查-1","link":"#增删改查-1","children":[]}]},{"level":3,"title":"扩展 - 嵌套map","slug":"扩展-嵌套map","link":"#扩展-嵌套map","children":[]}]},{"level":2,"title":"管道 (Channel)","slug":"管道-channel","link":"#管道-channel","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.54,"words":2563},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Go/02_数据+算法/04_容器类型.md","autoDesc":true}');export{k as comp,d as data};
