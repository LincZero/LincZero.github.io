import{_ as i,c as n,e as t,o}from"./app-DnpufS1x.js";const d={};function l(a,e){return o(),n("div",null,e[0]||(e[0]=[t('<h1 id="pyqt-node-editor" tabindex="-1"><a class="header-anchor" href="#pyqt-node-editor"><span>PyQt_Node_Editor</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="涉及的设计模式整理" tabindex="-1"><a class="header-anchor" href="#涉及的设计模式整理"><span>涉及的设计模式整理</span></a></h1><h2 id="编程标准" tabindex="-1"><a class="header-anchor" href="#编程标准"><span>编程标准</span></a></h2><h3 id="coding-standards" tabindex="-1"><a class="header-anchor" href="#coding-standards"><span>Coding Standards</span></a></h3><p>在整个 nodeeditor 包中使用以下规则和指南：</p><h3 id="file-naming-guidelines-文件命名指南" tabindex="-1"><a class="header-anchor" href="#file-naming-guidelines-文件命名指南"><span>File naming guidelines（文件命名指南）</span></a></h3><ul><li>nodeeditor 包中的文件以 node_ 开头 包含图形表示（PyQt5 覆盖类）的文件以 node_graphics_ 开头 窗口/小部件的文件以 node_editor_ 开头</li></ul><p>一些个人领会</p><blockquote><p>设计模式要求隔离，<strong>但也不是所有文件之间都要隔离</strong></p><p>​ 不然会很类</p><p>​ 设计模式是封装变化点与不变化点的，而不是要求让所有东西都变成不变化点</p><p>可以用文件前缀来区分一堆文件和另一堆文件</p><p>文件堆与文件堆之间隔离，文件堆内的文件不要求隔离</p></blockquote><h3 id="coding-guidelines-编码指南" tabindex="-1"><a class="header-anchor" href="#coding-guidelines-编码指南"><span>Coding guidelines（编码指南）</span></a></h3><ul><li>方法使用驼峰命名法</li><li>变量/属性使用 Snake 大小写命名</li><li>构造函数__init__始终包含整个类的所有类变量。这对新用户很有帮助，因此他们只需查看构造函数并在一个地方阅读该类正在使用的所有属性。没有人希望以后代码中隐藏任何惊喜</li><li>nodeeditor 使用自定义回调和侦听器。添加回调函数的方法通常命名为 addXYListener</li><li>自定义事件通常被命名 onXY</li><li>命名的方法doXY通常执行某些任务，并负责低级操作</li><li>类总是按以下顺序包含方法： -： init python魔术方法（即__str__），setter和getter initXY 功能 侦听器功能 节点编辑器事件函数 节点编辑器doXY和getXY帮助功能 Qt5 事件函数 其他功能 可选覆盖 Qtpaint方法 serialize和deserialize方法在最后</li></ul>',12)]))}const s=i(d,[["render",l],["__file","91. 涉及的设计模式整理.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/05.%20%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E7%B1%BB/Node_Editor/91.%20%E6%B6%89%E5%8F%8A%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%95%B4%E7%90%86.html","title":"PyQt_Node_Editor","lang":"zh-CN","frontmatter":{"description":"PyQt_Node_Editor 目录 涉及的设计模式整理 编程标准 Coding Standards 在整个 nodeeditor 包中使用以下规则和指南： File naming guidelines（文件命名指南） nodeeditor 包中的文件以 node_ 开头 包含图形表示（PyQt5 覆盖类）的文件以 node_graphics_ 开头...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/05.%20%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E7%B1%BB/Node_Editor/91.%20%E6%B6%89%E5%8F%8A%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%95%B4%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"PyQt_Node_Editor"}],["meta",{"property":"og:description","content":"PyQt_Node_Editor 目录 涉及的设计模式整理 编程标准 Coding Standards 在整个 nodeeditor 包中使用以下规则和指南： File naming guidelines（文件命名指南） nodeeditor 包中的文件以 node_ 开头 包含图形表示（PyQt5 覆盖类）的文件以 node_graphics_ 开头..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PyQt_Node_Editor\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"PyQt_Node_Editor","slug":"pyqt-node-editor","link":"#pyqt-node-editor","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"涉及的设计模式整理","slug":"涉及的设计模式整理","link":"#涉及的设计模式整理","children":[{"level":2,"title":"编程标准","slug":"编程标准","link":"#编程标准","children":[{"level":3,"title":"Coding Standards","slug":"coding-standards","link":"#coding-standards","children":[]},{"level":3,"title":"File naming guidelines（文件命名指南）","slug":"file-naming-guidelines-文件命名指南","link":"#file-naming-guidelines-文件命名指南","children":[]},{"level":3,"title":"Coding guidelines（编码指南）","slug":"coding-guidelines-编码指南","link":"#coding-guidelines-编码指南","children":[]}]}]}],"git":{},"readingTime":{"minutes":1.43,"words":428},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/05. 功能实现类/Node_Editor/91. 涉及的设计模式整理.md","excerpt":"\\n<h1>目录</h1>\\n<h1>涉及的设计模式整理</h1>\\n<h2>编程标准</h2>\\n<h3>Coding Standards</h3>\\n<p>在整个 nodeeditor 包中使用以下规则和指南：</p>\\n<h3>File naming guidelines（文件命名指南）</h3>\\n<ul>\\n<li>nodeeditor 包中的文件以 node_ 开头\\n包含图形表示（PyQt5 覆盖类）的文件以 node_graphics_ 开头\\n窗口/小部件的文件以 node_editor_ 开头</li>\\n</ul>\\n<p>一些个人领会</p>\\n<blockquote>\\n<p>设计模式要求隔离，<strong>但也不是所有文件之间都要隔离</strong></p>\\n<p>​\\t\\t不然会很类</p>\\n<p>​\\t\\t设计模式是封装变化点与不变化点的，而不是要求让所有东西都变成不变化点</p>\\n<p>可以用文件前缀来区分一堆文件和另一堆文件</p>\\n<p>文件堆与文件堆之间隔离，文件堆内的文件不要求隔离</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/05. 功能实现类/Node_Editor/91. 涉及的设计模式整理.md","value":{"title":"91. 涉及的设计模式整理","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/05. 功能实现类/Node_Editor/91. 涉及的设计模式整理.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,p as data};
