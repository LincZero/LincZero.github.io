import{_ as e,c as l,e as d,o as a}from"./app-DEUP2Tjk.js";const i="/assets/%E9%94%81%E5%AD%98%E5%99%A8-C0GlfYx9.png",h="/assets/image-20211107162709704-DK9ieeOi.png",r="/assets/CPU%E5%8E%9F%E7%90%86-DlJOsTdn.png",n="/assets/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%BB%E6%9D%BF-CsbkZrWO.png",s={};function p(o,t){return a(),l("div",null,t[0]||(t[0]=[d('<h1 id="computersystems" tabindex="-1"><a class="header-anchor" href="#computersystems"><span>ComputerSystems</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="元件封装" tabindex="-1"><a class="header-anchor" href="#元件封装"><span>元件封装</span></a></h1><h2 id="【元件】alu" tabindex="-1"><a class="header-anchor" href="#【元件】alu"><span>【元件】ALU</span></a></h2><h3 id="【元件】半加器、全加器、加法器" tabindex="-1"><a class="header-anchor" href="#【元件】半加器、全加器、加法器"><span>【元件】半加器、全加器、加法器</span></a></h3><p>思路：先把加法值和进位值两个真值表列举出来，然后判断出分别是异或门和与门</p><table><thead><tr><th>封装元件</th><th>元件接口 (输入)</th><th>元件接口 (输出)</th><th>实现方法</th></tr></thead><tbody><tr><td>半加器</td><td>两个一位加数<br>(x, y)</td><td>和与进位<br>(sum, carry)</td><td>x⊕y=加法值，x*y=进位值，封装得到半加器</td></tr><tr><td>全加器</td><td>三个一位加数<br>(x, y, 进位值)</td><td>和与进位<br>(sum, carry)</td><td>通过两个半加器和一个或门得到全加器<br>全加器的输入接口多了一位是为了处理仅为</td></tr><tr><td>加法器</td><td>两个n位加数<br>(X, Y)</td><td>和 (可能溢出)<br>(SUM)</td><td>多个全加器串联封装得到加法器（第一个加法器的第一个全加器进位值为0）</td></tr><tr><td>现代方案</td><td>——</td><td>——</td><td>以上是脉冲进位的加法器，位数越多越慢！<br>现在的计算机使用的是前置进位，速度更快 现代也不使用续电器，使用的是晶体管</td></tr></tbody></table><h4 id="减法" tabindex="-1"><a class="header-anchor" href="#减法"><span>减法</span></a></h4><p>也是使用加法器来补充，补码运算</p><p>略</p><h4 id="加法器的一些附加电路" tabindex="-1"><a class="header-anchor" href="#加法器的一些附加电路"><span>加法器的一些附加电路</span></a></h4><p>加法器除了计算和，还需要判断一些东西，有一些额外的附加电路</p><ul><li>溢出：进位/carry是否为1</li><li>判零电路：记录记过是否为0，实现：用或门两两判断</li><li>负值：记录结果是否为负值</li><li>奇偶：看结果最后一位是否为0</li><li>进位：记录计算过程中的借位/进位</li></ul><h3 id="【元件】连续加法器" tabindex="-1"><a class="header-anchor" href="#【元件】连续加法器"><span>【元件】连续加法器</span></a></h3><p>需要使用寄存器</p><h3 id="【元件】alu-算术逻辑单元-arithmatic-logic-unit" tabindex="-1"><a class="header-anchor" href="#【元件】alu-算术逻辑单元-arithmatic-logic-unit"><span>【元件】ALU / 算术逻辑单元（Arithmatic Logic Unit）</span></a></h3><ul><li>实现：ALU 算术逻辑单元 = 计算单元 + 逻辑单元</li><li>功能：既能做逻辑判断，也能做加减乘除</li><li>符号表示：<code>V</code></li><li><strong>元件接口</strong><ul><li>输入 <ul><li>两个八位的输入，(X, Y)</li><li>一个四位的操作码 (运算符 / Operation / 计算机指令)，例如1000代表加，(O)</li></ul></li><li>输出 <ul><li>一个八位的输出，(Z)</li><li>(状态 / Status)，例如输出结果是否或负值等逻辑状态，(S)</li></ul></li></ul></li><li>历史扩展 <ul><li>世界上第一个封装到单芯片的ALU，是Intel 74181芯片，使用了70个晶体管，是一个4位的ALU</li></ul></li></ul><h2 id="【元件】寄存器" tabindex="-1"><a class="header-anchor" href="#【元件】寄存器"><span>【元件】寄存器</span></a></h2><ul><li>核心思路：将输出接到输入</li></ul><h3 id="简单锁存器" tabindex="-1"><a class="header-anchor" href="#简单锁存器"><span>简单锁存器</span></a></h3><p>或门的输出接到输入二，当输入一通电再断电时，或门的输出却依然为1</p><h3 id="按需锁存器" tabindex="-1"><a class="header-anchor" href="#按需锁存器"><span>按需锁存器</span></a></h3><p>按需保存，当Reset接通后就不能保存且会清空保存的数据</p><p>缺点：一次只能存一位，存储量高时耗费资源大。如果要存储8位，则<strong>输入接口需要有18根线控制</strong></p><p><img src="'+i+'" alt="image-20211107162138325" loading="lazy"></p><h3 id="【元件】sram-静态随机访问存储-寄存器" tabindex="-1"><a class="header-anchor" href="#【元件】sram-静态随机访问存储-寄存器"><span>【元件】SRAM，静态随机访问存储（寄存器）</span></a></h3><p>左上是一把锁，当锁入时则不同写入。左下是使能</p><ul><li>存储器：静态随机访问存储 SRAM（Static Random Access Memory）</li><li>改进点：当要保存8个位时，可以让这8个电路共用同一把锁，<strong>输入接口仅有9根线</strong></li><li>优点：执行速度快（纯逻辑门）</li><li>缺点：怕断电</li><li>成本：存储1位需要6个逻辑门、10个晶体管、占用面积大</li><li>场景：寄存器，若用于内存则成本非常高，内存一般使用的是DRAM</li><li>数量级：KB级别</li></ul><p><img src="'+h+'" alt="image-20211107162709704" loading="lazy"></p><h3 id="【元件】dram-动态随机访问存储-内存" tabindex="-1"><a class="header-anchor" href="#【元件】dram-动态随机访问存储-内存"><span>【元件】DRAM，动态随机访问存储（内存）</span></a></h3><p>原理上电容存储数据，但电容会漏电，需要定时进行充电才能保证数据不丢失，定期充电称之为<code>刷新</code>。这也是名字上<code>动态</code>的来源</p><ul><li>存储器：动态随机访问存储 DRAM（Dynamic Random Access Memory）</li></ul><h3 id="【元件】寻址器" tabindex="-1"><a class="header-anchor" href="#【元件】寻址器"><span>【元件】寻址器</span></a></h3><p>地址线：寻址</p><p>略</p><h2 id="【元件】cpu" tabindex="-1"><a class="header-anchor" href="#【元件】cpu"><span>【元件】CPU</span></a></h2><h3 id="cpu构成" tabindex="-1"><a class="header-anchor" href="#cpu构成"><span>CPU构成</span></a></h3><ul><li>ALU</li><li>4个通用8位寄存器ABCD（计算过程使用）</li><li>CU 控制单元（Control Unit） <ul><li>IP 专用寄存器（用于存储指令地址）</li><li>IC 专用寄存器（用于计数）</li><li>解码器（接受四位指令）</li></ul></li></ul><h3 id="制定一些简单指令" tabindex="-1"><a class="header-anchor" href="#制定一些简单指令"><span>制定一些简单指令</span></a></h3><table><thead><tr><th>指令</th><th>代码</th><th>功能</th></tr></thead><tbody><tr><td>LOAD_A</td><td>0000</td><td>将指定内存地址数据加载至寄存器A</td></tr><tr><td>LOAD_B</td><td>0001</td><td>将指定内存地址数据加载至寄存器B</td></tr><tr><td>ADD</td><td>0100</td><td>将指定两个寄存器数据相加</td></tr><tr><td>STORE_A</td><td>1000</td><td>将寄存器数据存储至制定内存地址</td></tr></tbody></table><h3 id="解码电路" tabindex="-1"><a class="header-anchor" href="#解码电路"><span>解码电路</span></a></h3><p>功能：判断指令是否为制定指令（例如0001），是则输出1</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>冯诺依曼架构计算机（存储程序计算机）</p><p>以CU为核心来看：CU与ALU通信，CU即可以选择直接或通过寄存器间接地与内存通信</p><p><img src="'+r+'" alt="image-20211107165926897" loading="lazy"></p><p>IO流</p><p>&lt;img src=&#39;https://g.gravizo.com/svg?</p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuIfAJIv9p4lFILNmJStDBwgqHX9npiyhAShF2StBB44MTlG9hRRcKb104abEBiqjpKaioI-ovgf5LkkPLr2Aejc_j0Gi0h5DLzSEnH8a3b0AvYAuMg3Drbn00aaEMGT27jLKi2E0iiYkHEBesi4SvP2Qbm8C5000" alt=";"><p>&#39;&gt;</p><h3 id="cpu接口" tabindex="-1"><a class="header-anchor" href="#cpu接口"><span>CPU接口</span></a></h3><p>CPU背后很多金属触点（引脚）：供电来源、地址线、数据线等</p><h2 id="【元件】计算机" tabindex="-1"><a class="header-anchor" href="#【元件】计算机"><span>【元件】计算机</span></a></h2><h3 id="【元件】主板" tabindex="-1"><a class="header-anchor" href="#【元件】主板"><span>【元件】主板</span></a></h3><p>将CPU、内存、硬盘、屏幕、鼠标键盘等连接在一起</p><p>电脑和手机都有主板</p><h3 id="整体连接" tabindex="-1"><a class="header-anchor" href="#整体连接"><span>整体连接</span></a></h3><p>补充：其中IC表示时钟，当供电后就算还没开始时IC也在工作（这里的IC和CPU里面的IC好像不同）</p><p>补充：CPU和内存之间还有高速缓存，此图略</p><p><img src="'+n+'" alt="image-20211107191333848" loading="lazy"></p><h3 id="开机过程" tabindex="-1"><a class="header-anchor" href="#开机过程"><span>开机过程</span></a></h3><ul><li>通电部分：通电 -&gt; IC时钟 -&gt; 开机 -&gt; 电源通入主板并检查有没有短路漏电等判断是否要切断电源输出 (电源的自动保护) -&gt; 电源发出一个PowerGood信号</li><li>主办和CPU部分：时钟芯片的RST (RESET) 端收到这个信号 -&gt; 向主板发出各种信号 -&gt; CPU时钟电路打拍子 -&gt; CPU进行复位工作 (比如初始化IC和IP等)</li></ul><h3 id="【元件】rom" tabindex="-1"><a class="header-anchor" href="#【元件】rom"><span>【元件】ROM</span></a></h3><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h4><ul><li>刚开机的时候内存是空的，那CPU拿执行什么指令？ 预先内置在计算机中ROM (保存指令且断电不消失) 芯片的程序 CPU以访问内存的方式来访问ROM，并不需要Load指令，初始化后的IP会强制地指向ROM假装内存的位置</li><li>当不插内存时 虽然没内存也能读取ROM的指令，但当CPU执行ROM的第一条指令后会开始一个<code>开机自检 (POST, power on self test)</code> 的工作 检测到内存这种关键部件不存在时会自检失败</li></ul><h4 id="rom程序、boot、引导程序" tabindex="-1"><a class="header-anchor" href="#rom程序、boot、引导程序"><span>ROM程序、BOOT、引导程序</span></a></h4><ul><li>ROM指令集 指令有很多，<code>BIOS (基本输出输出程序)</code> 里的程序就是ROM的指令合集 后来升级了一次，叫<code>UEFI</code>，升级为UEFI是为了统一接口</li><li>BOOT (开机启动程序) 名字来源：鞋带bootstrap，指这个程序像鞋带将计算机拉起来一样拉起计算机系统 是BIOS里的一个菜单或一个功能 (bootmenu)，是开机启动程序 ROM最重要的指令之一是提供了在硬盘中寻找程序的方法，可以将它找到的程序送到内存中执行，此时计算机才算真正运行起来了</li><li>引导程序 严格意义上说，在硬盘中寻找程序是在找一个叫<code>BootLoader 引导程序</code>的程序，并加载到内存中的特定位置<code>0x7c 00</code></li></ul><h2 id="旧-真空管版本" tabindex="-1"><a class="header-anchor" href="#旧-真空管版本"><span>（旧）真空管版本</span></a></h2><h3 id="反馈和振荡器" tabindex="-1"><a class="header-anchor" href="#反馈和振荡器"><span>反馈和振荡器</span></a></h3><p>用续电器控制“控制自己的开关”，则得到循环脉冲。输出影响输入的过程，称为反馈</p><p>这种电路称为振荡器，振荡脉冲也被称为时钟信号/时钟脉冲。</p><p>蜂鸣器，电铃原理</p><p>参数：频率（Hz=脉冲/s），周期（1/Hz）</p><h3 id="d型触发器" tabindex="-1"><a class="header-anchor" href="#d型触发器"><span>D型触发器</span></a></h3><blockquote><p>基础电路1原理：</p><p>​ 或非门（有1则0，电路抽象为月加圆型），反馈</p><p>基础电路1真值表：</p><p>​ 10得1，01得0，00看上一次结果</p><p>​ 11理论得0但不讨论，用这个触发器时不会出现11</p><p>基础电路1特点：</p><p>​ 或非1可存储上一次计算结构，有“记忆”的特点</p></blockquote><p>基础记忆电路1，构造如下</p><blockquote><p><strong>算了，MarkDown画不出来</strong></p></blockquote><table><thead><tr><th>上次输出</th><th>或非1</th><th></th><th></th></tr></thead><tbody><tr><td>x</td><td>或非2</td><td>输出</td><td></td></tr><tr><td>y</td><td>——</td><td></td><td></td></tr></tbody></table><p>上面电路改造封装后为D型触发器</p><blockquote><p>D型触发器，又名D型锁存器，1位存储器 封装后，输入为数据端和触发端，输出为存储端 真值表 （输入1和！输入1：10得1，01得0） 输入2为触发端，决定更改or保留数据端输入1 即：if y then x</p></blockquote><p>D型触发器构造</p><table><thead><tr><th>输入1（原y）</th><th>与</th><th></th><th>上次输出</th><th>或非1</th><th></th><th></th></tr></thead><tbody><tr><td>输入2(1时结果不变)(0时结果为上次)</td><td>输入1（原x）</td><td>——</td><td>或非2</td><td>输出</td><td></td><td></td></tr><tr><td>与</td><td>输入2（原y）</td><td>——</td><td>——</td><td></td><td></td><td></td></tr><tr><td>！输入1（原y）</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="边沿触发" tabindex="-1"><a class="header-anchor" href="#边沿触发"><span>边沿触发</span></a></h3><blockquote><p>D型触发器会【一直触发】（触发端为1时） 边缘触发器在D型触发器的基础上搭建出来的，分上升沿和下降沿触发器 边沿触发器特点 两个D型触发器串联，但同一时间只能有一个D型触发器被触发 即：上升沿边缘触发器只有在触发端从0变成1的时候（右侧D被激活，左侧关闭）存储数据【不会一直触发】</p></blockquote><p>边沿触发器结构（上升沿）（下降沿则吧非门往下移一个位置）</p><table><thead><tr><th>数据端</th><th>——</th><th>D型触发器1</th><th></th><th></th></tr></thead><tbody><tr><td>触发端</td><td>非</td><td>D型触发器2</td><td>输出</td><td></td></tr><tr><td>——</td><td>——</td><td></td><td></td><td></td></tr></tbody></table><h3 id="ram存储器" tabindex="-1"><a class="header-anchor" href="#ram存储器"><span>RAM存储器</span></a></h3><p>RAM存储器的三个基本规则</p><ul><li>【写入和读取】使用的存储数据的容器口【只有一个】且【不能同时】进行</li><li>写入和读取也统称为访问，这个结构编程术语称为栈</li></ul><p>用D型触发器改造成RAM存储器</p><ul><li>原D型存储器的输入和输出是两个口，且无法控制读写</li><li>改造1：把D型的数据端和输出端合并为一个口：数据端</li><li>改造2：从原来的一个控制端”写“，再增一个控制端”读“并控制电路 【即：1输入端1输出端1控制端&gt;&gt;&gt;1访问端2控制端】</li></ul><p>RAM存储器真值表</p><ul><li>R0W0时，存储器和续电器均断开，均不工作</li><li>R0W1时，存储器工作：写入操作；续电器断开：不读数据</li><li>R1W0时，存储器乱开：不做工作；续电器联通：把存储数据通向外部</li></ul><p>用D型触发器改RAM存储器</p><table><thead><tr><th>D(读写数据)</th><th>1位存储器</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>W（写）</td><td>（存储数据输出）</td><td>续电器（R控制）</td><td>D（读写数据）</td><td></td></tr><tr><td>R（读）</td><td>——</td><td>——</td><td></td><td></td></tr></tbody></table><blockquote><p>多位存储器</p><ul><li>8个1位存储器的并联，W端和R端分别接在一起，同时读取，就是一个8位存储器 4个8位存储器排列一起，就是一个32位RAM存储器。但同一时间只能对一层存储器进行操作</li><li>这里的一层就是一个存储单元，第几层就是一个地址。目前【最小的存储单元】是8位（1字节） 用地址码拓展多位存储器</li><li>用地址码通过地址译码器的输出结果来控制对存储器的哪一地址的存储单元进行读写 32位地址码（4字节）则可表达43亿个地址，控制43亿个存储单元。假如每个存储单元1字节 则一共可存储4GB大小容量（2<sup>32）/（2</sup>10^3） 存储器引线 两个控制端（WR）</li><li>地址引线（表示可访问存储单元的数量） 数据引线（表示同一时间可对多少位的数据进行读写访问） （根据后两者可推算出存储容量）</li></ul><p>RAM特点及原理</p><ul><li>速度快：寻址快，读写控制快</li><li>怕断电：RAM由门电路组成的D型触发器组成，而门电路依赖电力驱动</li><li>当断电时，续电器所控制的所有开关瞬间全部回复到初始状态，数据不复存在 译码器（地址译码器为例）</li><li>搭建思路：先确定需求，用真值表反推布尔函数（同一时间仅一行输出为1，反推较容易）</li></ul></blockquote><h3 id="寄存器" tabindex="-1"><a class="header-anchor" href="#寄存器"><span>寄存器</span></a></h3><p><strong>一般寄存器</strong></p><blockquote><p>一般寄存器结构 使用原生的D型触发器，直接进行并联（RAM存储器是用改造的D型触发器并联） 将8个D型触发器的控制端连在一起，封装得到8位寄存器 RAM存储器和一般寄存器结构区别 8为RAM存储器：8访问端2控制端 8位一般寄存器：8输入端8输出端1控制端</p></blockquote><p><strong>循环移动位寄存器</strong>（上升触发器为例）</p><blockquote><p>结构 把8个上升沿触发器的控制端连在一起 但区别为8个触发器的数据端和存储端依次相连，且首尾相接（形成环） 触发器与触发器相连的地方暴露出去，形成8个访问端 特点 每次触发时，8个寄存器进行一次循环移位 这种寄存器不能使用D型触发器，否则移位的速度不可控 用边沿触发器可以控制移位速度 封装后 8位循环移动寄存器：8输出端1控制端，且控制端连接振荡器</p></blockquote><h3 id="连续加法器" tabindex="-1"><a class="header-anchor" href="#连续加法器"><span>连续加法器</span></a></h3><blockquote><p>主要用加法器和触发器搭建而来，搭建思路： 改造步骤1：加法器输入端1和输入端2共享数据信号源，用输入端1加一个边缘触发器进行锁存 改造步骤2：将加法器输出端与数据信号源相接（不行） 自动循环。而且同一条总线不能有多个信号，会产生数据冲突 改造步骤3：数据源后和加法器后加入锁存器，解决数据冲突</p></blockquote><p>连续加法器结构：</p><table><thead><tr><th></th><th>D型触发器GA</th><th>输入端1</th><th>边缘触发器RA</th><th>加法器</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据源</td><td>输入端2</td><td>——</td><td>边缘触发器TR</td><td>D型触发器GB</td><td>（联通1）</td><td></td><td></td></tr><tr><td></td><td>（联通1）</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>连加步骤： 1.加载：激发GA，RA，传入第一个数据 2.相加：激发GA，TR，传入第二个数据，流入加法器得到结果，并被锁存 3.结果加载：激发GB，RA，传入结果数据 然后不断重复步骤2、3进行连加</p></blockquote><h3 id="连续加法器的简化" tabindex="-1"><a class="header-anchor" href="#连续加法器的简化"><span>连续加法器的简化</span></a></h3><p><strong>译码器真值表：</strong></p><table><thead><tr><th>操作</th><th>输入</th><th>输出</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>K加载</td><td>K相加</td><td>K0</td><td>K1</td><td>GA</td><td>RA</td><td>TR</td><td>GB</td><td></td></tr><tr><td>加载</td><td>1先</td><td>0</td><td>1后</td><td>0</td><td>1先</td><td>1后</td><td>0</td><td>0</td></tr><tr><td>相加</td><td>0</td><td>1先</td><td>1后</td><td>0</td><td>1先</td><td>0</td><td>1后</td><td>0</td></tr><tr><td>结果加载</td><td>0</td><td>1先</td><td>0</td><td>1后</td><td>0</td><td>1后</td><td>0</td><td>1先</td></tr></tbody></table><blockquote><p>加入一个连续加法器的译码器，结构如上，主要简化第3步后的操作 根据译码表需求，用反推公式得到布尔函数，根据布尔函数搭建译码器</p></blockquote><h3 id="先后问题" tabindex="-1"><a class="header-anchor" href="#先后问题"><span>先后问题</span></a></h3><blockquote><p>K0和K1的输入在10和01之间不断循环，所以可以在前面加一个循环移位寄存器RR，来自动处理 循环移位寄存器前置一个按钮K，用来替换原按钮K1和K2 K往后接，与RA和TR分别连一个与门运算，从而让RA和TR的输出产生延迟，从而解决先后问题</p></blockquote><h3 id="先存储再计算" tabindex="-1"><a class="header-anchor" href="#先存储再计算"><span>先存储再计算</span></a></h3><blockquote><p>题外话 RAM存储器（内存，主存），在冯诺依曼架构中属于硬件中的存储器，而硬盘属于IO设备 这才是本质区别，而非结构上的区别是本质区别</p></blockquote><h3 id="全自动计算" tabindex="-1"><a class="header-anchor" href="#全自动计算"><span>全自动计算</span></a></h3><h3 id="计算机的选择" tabindex="-1"><a class="header-anchor" href="#计算机的选择"><span>计算机的选择</span></a></h3>',116)]))}const u=e(s,[["render",p],["__file","02. 元件封装.html.vue"]]),b=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/01.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/01.%20%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/02.%20%E5%85%83%E4%BB%B6%E5%B0%81%E8%A3%85.html","title":"ComputerSystems","lang":"zh-CN","frontmatter":{"description":"ComputerSystems 目录 元件封装 【元件】ALU 【元件】半加器、全加器、加法器 思路：先把加法值和进位值两个真值表列举出来，然后判断出分别是异或门和与门 减法 也是使用加法器来补充，补码运算 略 加法器的一些附加电路 加法器除了计算和，还需要判断一些东西，有一些额外的附加电路 溢出：进位/carry是否为1 判零电路：记录记过是否为0，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/01.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/01.%20%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/02.%20%E5%85%83%E4%BB%B6%E5%B0%81%E8%A3%85.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"ComputerSystems"}],["meta",{"property":"og:description","content":"ComputerSystems 目录 元件封装 【元件】ALU 【元件】半加器、全加器、加法器 思路：先把加法值和进位值两个真值表列举出来，然后判断出分别是异或门和与门 减法 也是使用加法器来补充，补码运算 略 加法器的一些附加电路 加法器除了计算和，还需要判断一些东西，有一些额外的附加电路 溢出：进位/carry是否为1 判零电路：记录记过是否为0，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ComputerSystems\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"ComputerSystems","slug":"computersystems","link":"#computersystems","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"元件封装","slug":"元件封装","link":"#元件封装","children":[{"level":2,"title":"【元件】ALU","slug":"【元件】alu","link":"#【元件】alu","children":[{"level":3,"title":"【元件】半加器、全加器、加法器","slug":"【元件】半加器、全加器、加法器","link":"#【元件】半加器、全加器、加法器","children":[{"level":4,"title":"减法","slug":"减法","link":"#减法","children":[]},{"level":4,"title":"加法器的一些附加电路","slug":"加法器的一些附加电路","link":"#加法器的一些附加电路","children":[]}]},{"level":3,"title":"【元件】连续加法器","slug":"【元件】连续加法器","link":"#【元件】连续加法器","children":[]},{"level":3,"title":"【元件】ALU / 算术逻辑单元（Arithmatic Logic Unit）","slug":"【元件】alu-算术逻辑单元-arithmatic-logic-unit","link":"#【元件】alu-算术逻辑单元-arithmatic-logic-unit","children":[]}]},{"level":2,"title":"【元件】寄存器","slug":"【元件】寄存器","link":"#【元件】寄存器","children":[{"level":3,"title":"简单锁存器","slug":"简单锁存器","link":"#简单锁存器","children":[]},{"level":3,"title":"按需锁存器","slug":"按需锁存器","link":"#按需锁存器","children":[]},{"level":3,"title":"【元件】SRAM，静态随机访问存储（寄存器）","slug":"【元件】sram-静态随机访问存储-寄存器","link":"#【元件】sram-静态随机访问存储-寄存器","children":[]},{"level":3,"title":"【元件】DRAM，动态随机访问存储（内存）","slug":"【元件】dram-动态随机访问存储-内存","link":"#【元件】dram-动态随机访问存储-内存","children":[]},{"level":3,"title":"【元件】寻址器","slug":"【元件】寻址器","link":"#【元件】寻址器","children":[]}]},{"level":2,"title":"【元件】CPU","slug":"【元件】cpu","link":"#【元件】cpu","children":[{"level":3,"title":"CPU构成","slug":"cpu构成","link":"#cpu构成","children":[]},{"level":3,"title":"制定一些简单指令","slug":"制定一些简单指令","link":"#制定一些简单指令","children":[]},{"level":3,"title":"解码电路","slug":"解码电路","link":"#解码电路","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":3,"title":"CPU接口","slug":"cpu接口","link":"#cpu接口","children":[]}]},{"level":2,"title":"【元件】计算机","slug":"【元件】计算机","link":"#【元件】计算机","children":[{"level":3,"title":"【元件】主板","slug":"【元件】主板","link":"#【元件】主板","children":[]},{"level":3,"title":"整体连接","slug":"整体连接","link":"#整体连接","children":[]},{"level":3,"title":"开机过程","slug":"开机过程","link":"#开机过程","children":[]},{"level":3,"title":"【元件】ROM","slug":"【元件】rom","link":"#【元件】rom","children":[{"level":4,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":4,"title":"ROM程序、BOOT、引导程序","slug":"rom程序、boot、引导程序","link":"#rom程序、boot、引导程序","children":[]}]}]},{"level":2,"title":"（旧）真空管版本","slug":"旧-真空管版本","link":"#旧-真空管版本","children":[{"level":3,"title":"反馈和振荡器","slug":"反馈和振荡器","link":"#反馈和振荡器","children":[]},{"level":3,"title":"D型触发器","slug":"d型触发器","link":"#d型触发器","children":[]},{"level":3,"title":"边沿触发","slug":"边沿触发","link":"#边沿触发","children":[]},{"level":3,"title":"RAM存储器","slug":"ram存储器","link":"#ram存储器","children":[]},{"level":3,"title":"寄存器","slug":"寄存器","link":"#寄存器","children":[]},{"level":3,"title":"连续加法器","slug":"连续加法器","link":"#连续加法器","children":[]},{"level":3,"title":"连续加法器的简化","slug":"连续加法器的简化","link":"#连续加法器的简化","children":[]},{"level":3,"title":"先后问题","slug":"先后问题","link":"#先后问题","children":[]},{"level":3,"title":"先存储再计算","slug":"先存储再计算","link":"#先存储再计算","children":[]},{"level":3,"title":"全自动计算","slug":"全自动计算","link":"#全自动计算","children":[]},{"level":3,"title":"计算机的选择","slug":"计算机的选择","link":"#计算机的选择","children":[]}]}]}],"git":{},"readingTime":{"minutes":13.17,"words":3950},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/01. 计算机组成/01. 电路基础/02. 元件封装.md","excerpt":"\\n<h1>目录</h1>\\n<h1>元件封装</h1>\\n<h2>【元件】ALU</h2>\\n<h3>【元件】半加器、全加器、加法器</h3>\\n<p>思路：先把加法值和进位值两个真值表列举出来，然后判断出分别是异或门和与门</p>\\n<table>\\n<thead>\\n<tr>\\n<th>封装元件</th>\\n<th>元件接口 (输入)</th>\\n<th>元件接口 (输出)</th>\\n<th>实现方法</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>半加器</td>\\n<td>两个一位加数<br>(x, y)</td>\\n<td>和与进位<br>(sum, carry)</td>\\n<td>x⊕y=加法值，x*y=进位值，封装得到半加器</td>\\n</tr>\\n<tr>\\n<td>全加器</td>\\n<td>三个一位加数<br>(x, y, 进位值)</td>\\n<td>和与进位<br>(sum, carry)</td>\\n<td>通过两个半加器和一个或门得到全加器<br>全加器的输入接口多了一位是为了处理仅为</td>\\n</tr>\\n<tr>\\n<td>加法器</td>\\n<td>两个n位加数<br>(X, Y)</td>\\n<td>和 (可能溢出)<br>(SUM)</td>\\n<td>多个全加器串联封装得到加法器（第一个加法器的第一个全加器进位值为0）</td>\\n</tr>\\n<tr>\\n<td>现代方案</td>\\n<td>——</td>\\n<td>——</td>\\n<td>以上是脉冲进位的加法器，位数越多越慢！<br>现在的计算机使用的是前置进位，速度更快   现代也不使用续电器，使用的是晶体管</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/01. 计算机组成/01. 电路基础/02. 元件封装.md","value":{"title":"02. 元件封装","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/01. 计算机组成/01. 电路基础/02. 元件封装.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,b as data};
