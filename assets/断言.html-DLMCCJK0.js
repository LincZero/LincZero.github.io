import{_ as a,c as s,a as e,o as l}from"./app-HXGboUmJ.js";const t={};function i(p,n){return l(),s("div",null,n[0]||(n[0]=[e(`<h1 id="断言" tabindex="-1"><a class="header-anchor" href="#断言"><span>断言</span></a></h1><h2 id="断言-1" tabindex="-1"><a class="header-anchor" href="#断言-1"><span>断言</span></a></h2><p>断言（Assertion）是一种验证程序正确性的机制，它允许开发者检查程序中的某些条件是否满足，如果不满足则通常会抛出异常或错误</p><ul><li><p>C++</p><ul><li><p>使用</p><ul><li><p>通过 <code>&lt;cassert&gt;</code> 库提供的 <code>assert</code> 宏实现的。C++的断言主要用于检查程序逻辑错误，而不是输入验证。它们通常在调试模式下启用，在发布模式下禁用。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;cassert&gt;

void checkValue(int value) {
    assert(value &gt;= 0 &amp;&amp; &quot;Value must be non-negative&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>优点</p><ul><li>简单易用，只需一个宏。</li><li>可以在编译时通过定义 <code>NDEBUG</code> 来禁用所有断言。</li><li>断言失败时，可以提供自定义的错误消息。</li></ul></li><li><p>缺点</p><ul><li>性能开销较小，但仍然存在。</li><li>断言不是C++语言的一部分，可能不被所有编译器支持。</li></ul></li></ul></li><li><p>Java</p><ul><li><p>使用</p><ul><li><p>Java中的断言是通过<code>java.lang.Assertions</code>类提供的。Java的断言机制可以通过 <code>-ea</code> 或 <code>-enableassertions</code> JVM选项启用，或者通过 <code>-da</code> 或 <code>-disableassertions</code> 禁用。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Assertions<span class="token punctuation">;</span>

void <span class="token function">checkValue</span><span class="token punctuation">(</span><span class="token builtin">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Assertions<span class="token punctuation">.</span><span class="token function">checkState</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Value must be non-negative&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>优点</p><ul><li>可以在运行时启用或禁用。</li><li>支持条件表达式和错误消息。</li><li>有助于检测潜在的逻辑错误。</li></ul></li><li><p>缺点:</p><ul><li>断言不是Java语言的核心部分，可能被开发者忽视。</li><li>断言可能会影响程序性能。</li></ul></li></ul></li><li><p>Go</p><ul><li><p>使用</p><ul><li><p>Go语言的断言机制是通过 <code>log</code> 包中的 <code>Fatal</code> 或 <code>Fatalf</code> 函数实现的。Go的断言通常用于检查那些预期不会发生的条件，如果条件不满足，则程序会立即终止。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">checkValue</span><span class="token punctuation">(</span>value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">&quot;Value must be non-negative: %d&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>优点</p><ul><li>强制终止程序，有助于发现严重错误。</li><li>简单且易于使用。</li><li>可以在编译时通过 <code>-gcflags</code> 参数来控制断言的行为。</li></ul><p>缺点</p><ul><li>断言失败会导致程序崩溃，可能不适合所有场景。</li><li>没有提供条件表达式或错误消息的直接支持。</li></ul></li></ul></li></ul><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h2><p>Go的类型转化也叫类型断言？这个命名怪怪的</p>`,6)]))}const c=a(t,[["render",i],["__file","断言.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/%E6%96%AD%E8%A8%80/%E6%96%AD%E8%A8%80.html","title":"断言","lang":"zh-CN","frontmatter":{"description":"断言 断言 断言（Assertion）是一种验证程序正确性的机制，它允许开发者检查程序中的某些条件是否满足，如果不满足则通常会抛出异常或错误 C++ 使用 通过 <cassert> 库提供的 assert 宏实现的。C++的断言主要用于检查程序逻辑错误，而不是输入验证。它们通常在调试模式下启用，在发布模式下禁用。 优点 简单易用，只需一个宏。 可以在编...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/%E6%96%AD%E8%A8%80/%E6%96%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"断言"}],["meta",{"property":"og:description","content":"断言 断言 断言（Assertion）是一种验证程序正确性的机制，它允许开发者检查程序中的某些条件是否满足，如果不满足则通常会抛出异常或错误 C++ 使用 通过 <cassert> 库提供的 assert 宏实现的。C++的断言主要用于检查程序逻辑错误，而不是输入验证。它们通常在调试模式下启用，在发布模式下禁用。 优点 简单易用，只需一个宏。 可以在编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"断言\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"断言","slug":"断言","link":"#断言","children":[{"level":2,"title":"断言","slug":"断言-1","link":"#断言-1","children":[]},{"level":2,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/断言/断言.md","excerpt":"\\n<h2>断言</h2>\\n<p>断言（Assertion）是一种验证程序正确性的机制，它允许开发者检查程序中的某些条件是否满足，如果不满足则通常会抛出异常或错误</p>\\n<ul>\\n<li>\\n<p>C++</p>\\n<ul>\\n<li>\\n<p>使用</p>\\n<ul>\\n<li>\\n<p>通过 <code>&lt;cassert&gt;</code> 库提供的 <code>assert</code> 宏实现的。C++的断言主要用于检查程序逻辑错误，而不是输入验证。它们通常在调试模式下启用，在发布模式下禁用。</p>\\n<div class=\\"language-c++\\" data-ext=\\"c++\\" data-title=\\"c++\\"><pre class=\\"language-c++\\"><code>#include &lt;cassert&gt;\\n\\nvoid checkValue(int value) {\\n    assert(value &gt;= 0 &amp;&amp; \\"Value must be non-negative\\");\\n}\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>简单易用，只需一个宏。</li>\\n<li>可以在编译时通过定义 <code>NDEBUG</code> 来禁用所有断言。</li>\\n<li>断言失败时，可以提供自定义的错误消息。</li>\\n</ul>\\n</li>\\n<li>\\n<p>缺点</p>\\n<ul>\\n<li>性能开销较小，但仍然存在。</li>\\n<li>断言不是C++语言的一部分，可能不被所有编译器支持。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>Java</p>\\n<ul>\\n<li>\\n<p>使用</p>\\n<ul>\\n<li>\\n<p>Java中的断言是通过<code>java.lang.Assertions</code>类提供的。Java的断言机制可以通过 <code>-ea</code> 或 <code>-enableassertions</code> JVM选项启用，或者通过 <code>-da</code> 或 <code>-disableassertions</code> 禁用。</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">import</span> java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>Assertions<span class=\\"token punctuation\\">;</span>\\n\\nvoid <span class=\\"token function\\">checkValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">int</span> value<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    Assertions<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">checkState</span><span class=\\"token punctuation\\">(</span>value <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Value must be non-negative\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>可以在运行时启用或禁用。</li>\\n<li>支持条件表达式和错误消息。</li>\\n<li>有助于检测潜在的逻辑错误。</li>\\n</ul>\\n</li>\\n<li>\\n<p>缺点:</p>\\n<ul>\\n<li>断言不是Java语言的核心部分，可能被开发者忽视。</li>\\n<li>断言可能会影响程序性能。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>Go</p>\\n<ul>\\n<li>\\n<p>使用</p>\\n<ul>\\n<li>\\n<p>Go语言的断言机制是通过 <code>log</code> 包中的 <code>Fatal</code> 或 <code>Fatalf</code> 函数实现的。Go的断言通常用于检查那些预期不会发生的条件，如果条件不满足，则程序会立即终止。</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">\\"log\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">checkValue</span><span class=\\"token punctuation\\">(</span>value <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> value <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">{</span>\\n        log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Value must be non-negative: %d\\"</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>强制终止程序，有助于发现严重错误。</li>\\n<li>简单且易于使用。</li>\\n<li>可以在编译时通过 <code>-gcflags</code> 参数来控制断言的行为。</li>\\n</ul>\\n<p>缺点</p>\\n<ul>\\n<li>断言失败会导致程序崩溃，可能不适合所有场景。</li>\\n<li>没有提供条件表达式或错误消息的直接支持。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,u as data};
