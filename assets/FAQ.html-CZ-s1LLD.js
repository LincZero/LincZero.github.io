import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-HRMkW8Cz.js";const t={},p=e(`<p>vue中有没有“继承”的概念，或者有哪些方式看起来像继承</p><hr><p>在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。</p><ol><li>组件组合（Component Composition）</li></ol><p>组件可以通过嵌套成为父子关系。通过将子组件包含在父组件的模板中，可以实现父组件与子组件之间的交互和数据传递。这样的组合可以实现类似继承的功能。</p><ol><li>混入（Mixins）</li></ol><p>混入是Vue的一种功能，允许在不同组件之间共享选项对象和方法。混入对象可以包含任何组件选项，将混入对象传递给Vue.extend()或Vue.mixin()可以使组件继承或扩展混入对象的一些功能。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">displayMsg</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式允许您在Vue组件中使用共享的方法、数据、计算属性、监听等选项，实现类似继承的功能。</p><ol><li>自定义指令</li></ol><p>Vue.js允许开发人员创建自定义指令，并在组件模板中使用。 自定义指令可以实现对DOM对象的更细致操作，如事件监听、属性绑定等。 这有助于在Vue组件中实现共享功能。</p><ol><li>作用域CSS</li></ol><p>在Vue中，您可以使用scoped关键字来限制CSS仅在组件中生效。 这为在父组件和子组件之间共享样式提供了一种机制，实现类似继承的功能。</p><p>总结，Vue.js可能没有明确的继承概念，但通过组件组合、混入(mixins)、自定义指令、作用域CSS等方式，可以有效地实现类似继承的功能。 我们可以通过这些技术组合，调整组件复用和扩展需求。</p>`,15),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","FAQ.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/FAQ.html","title":"","lang":"zh-CN","frontmatter":{"description":"vue中有没有“继承”的概念，或者有哪些方式看起来像继承 在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。 组件组合（Component Composition） 组件可以通过嵌套成为父子关系。通过将子组件包含在父组件...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/FAQ.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"vue中有没有“继承”的概念，或者有哪些方式看起来像继承 在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。 组件组合（Component Composition） 组件可以通过嵌套成为父子关系。通过将子组件包含在父组件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/FAQ.md","autoDesc":true}');export{d as comp,m as data};
