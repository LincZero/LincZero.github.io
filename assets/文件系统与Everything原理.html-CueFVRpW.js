import{_ as r,c as n,e as i,o as t}from"./app-BgHc8lP1.js";const a={};function o(l,e){return t(),n("div",null,e[0]||(e[0]=[i('<h1 id="hardware" tabindex="-1"><a class="header-anchor" href="#hardware"><span>Hardware</span></a></h1><p>可能需要数据结构的基础</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="文件系统与everything原理" tabindex="-1"><a class="header-anchor" href="#文件系统与everything原理"><span>文件系统与Everything原理</span></a></h1><h2 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统"><span>文件系统</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><p>文件系统</p><blockquote><p>wikipedia</p><ul><li><p>概念</p><p><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noopener noreferrer">计算机</a>的<strong>文件系统</strong>是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易</p></li><li><p>抽象封装</p><p>文件系统使用<strong>文件</strong>和<strong>树形目录</strong>的抽象<strong>逻辑概念</strong>代替了硬盘和光盘等物理设备使用<strong>数据块</strong>的概念。 用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。 在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中。</p></li><li><p>载体</p><p>文件系统通常使用<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="noopener noreferrer">硬盘</a>和<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E7%9B%98" target="_blank" rel="noopener noreferrer">光盘</a>这样的<a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E5%82%A8%E8%AE%BE%E5%A4%87" target="_blank" rel="noopener noreferrer">存储设备</a>，并维护文件在设备中的<strong>物理位置</strong>。</p></li><li><p>严格定义</p><p>但是，实际上文件系统也可能仅仅是一种访问资料的界面而已，实际的数据是通过网络协议（如<a href="https://zh.wikipedia.org/wiki/NFS" target="_blank" rel="noopener noreferrer">NFS</a>、<a href="https://zh.wikipedia.org/wiki/SMB" target="_blank" rel="noopener noreferrer">SMB</a>、<a href="https://zh.wikipedia.org/wiki/9P" target="_blank" rel="noopener noreferrer">9P</a>等）提供的或者内存上，甚至可能根本没有对应的文件（如<a href="https://zh.wikipedia.org/wiki/Procfs" target="_blank" rel="noopener noreferrer">proc文件系统</a>）。 文件系统是一套实现了<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener noreferrer">数据</a>的存储、分级组织、访问和获取等操作的<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B" target="_blank" rel="noopener noreferrer">抽象数据类型</a>（Abstract data type）。</p></li></ul></blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h2 id="everything" tabindex="-1"><a class="header-anchor" href="#everything"><span>Everything</span></a></h2><h3 id="everything和windows搜索" tabindex="-1"><a class="header-anchor" href="#everything和windows搜索"><span>Everything和Windows搜索</span></a></h3><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><p>Everything和Windows搜索是有区别的，以下列几点：</p><ol><li>Everything只能搜索文件名和文件夹名，Windows搜索可以搜索文件名和文件内容；</li><li>Everything只能搜索NTFS格式的文件系统，Windows搜索可以搜索任意文件系统（例如FAT32，exFAT，NTFS）；</li></ol><p>但有时我们需要的恰好就是快速搜索文件名</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4><p>程序启动时，扫描系统所有NTFS卷（磁盘）的MTF表，将文件名称以一种利于字符串检索的算法形式存储在Everything的index索引数据库中。</p><p>系统运行过程中，Everything还会监控NTFS卷的journal日志文件，如果文件系统中的文件发生改变，Everything会更新它的index索引数据库。</p><p>当用户搜索文件时，Everything利用字符串查找算法，在index索引数据库中查找，可以直接搜索到文件。</p><h4 id="问答qa" tabindex="-1"><a class="header-anchor" href="#问答qa"><span>问答QA</span></a></h4><p>Q：Search Everything 这款软件如何做到如此快速的搜索的？ A：因为Everything在搜索时，根本没有遍历文件系统，它检索的是自己组织好的索引数据库，因此搜索速度飞快；</p><p>Q：Windows搜索时什么原理？ A：Windows搜索用的是普通的文件系统遍历查找。用的应该是标准WIN32 API，例如FindFirstFile/FindNextFile之类。当然，Windows7之后的版本现在已经内置带索引的搜索功能，这项功能非常复杂，不仅可以搜索文件名，还可以搜索文件内容，而且适用任意文件系统。但缺点就是需要一个后台服务爬虫不停的对文件系统进行索引，比较耗资源。</p><p>Q：为何微软不使用这种原理？ A：个人觉得是因为这种方法不具备普适性，无法应用与非NTFS文件系统，所以无法集成到Windows中。</p><p>Q：为何微软不收购这家公司? A：个人感觉还是技术含量不太高，而且微软自家的ActiveDirectory早就在使用MTF快速检索文件了。</p><h2 id="treesize" tabindex="-1"><a class="header-anchor" href="#treesize"><span>TreeSize</span></a></h2><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><p>文件系统参考</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">【维基百科】文件系统</a></li><li>《数据结构与算法分析（C语言描述）》</li><li>《深入理解计算机系统》第10章 - 系统级I/O</li></ul><p>Everything原理参考</p><ul><li>https://bbs.csdn.net/topics/390280495</li><li>https://www.cnblogs.com/xust/articles/3616940.html</li><li>https://www.zhihu.com/question/22862246</li></ul>',30)]))}const p=r(a,[["render",o],["__file","文件系统与Everything原理.html.vue"]]),s=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8EEverything%E5%8E%9F%E7%90%86.html","title":"Hardware","lang":"zh-CN","frontmatter":{"description":"Hardware 可能需要数据结构的基础 目录 文件系统与Everything原理 文件系统 简概 文件系统 wikipedia 概念 计算机的文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易 抽象封装 文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念。 用户使用文件系统来保存数据不必关心数据实际...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8EEverything%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Hardware"}],["meta",{"property":"og:description","content":"Hardware 可能需要数据结构的基础 目录 文件系统与Everything原理 文件系统 简概 文件系统 wikipedia 概念 计算机的文件系统是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易 抽象封装 文件系统使用文件和树形目录的抽象逻辑概念代替了硬盘和光盘等物理设备使用数据块的概念。 用户使用文件系统来保存数据不必关心数据实际..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hardware\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Hardware","slug":"hardware","link":"#hardware","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"文件系统与Everything原理","slug":"文件系统与everything原理","link":"#文件系统与everything原理","children":[{"level":2,"title":"文件系统","slug":"文件系统","link":"#文件系统","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]},{"level":2,"title":"Everything","slug":"everything","link":"#everything","children":[{"level":3,"title":"Everything和Windows搜索","slug":"everything和windows搜索","link":"#everything和windows搜索","children":[{"level":4,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":4,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":4,"title":"问答QA","slug":"问答qa","link":"#问答qa","children":[]}]}]},{"level":2,"title":"TreeSize","slug":"treesize","link":"#treesize","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}]}],"git":{},"readingTime":{"minutes":3.46,"words":1037},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/文件系统与Everything原理.md","excerpt":"\\n<p>可能需要数据结构的基础</p>\\n<h1>目录</h1>\\n<h1>文件系统与Everything原理</h1>\\n<h2>文件系统</h2>\\n<h3>简概</h3>\\n<p>文件系统</p>\\n<blockquote>\\n<p>wikipedia</p>\\n<ul>\\n<li>\\n<p>概念</p>\\n<p><a href=\\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">计算机</a>的<strong>文件系统</strong>是一种存储和组织计算机数据的方法，它使得对其访问和查找变得容易</p>\\n</li>\\n<li>\\n<p>抽象封装</p>\\n<p>文件系统使用<strong>文件</strong>和<strong>树形目录</strong>的抽象<strong>逻辑概念</strong>代替了硬盘和光盘等物理设备使用<strong>数据块</strong>的概念。\\n用户使用文件系统来保存数据不必关心数据实际保存在硬盘（或者光盘）的地址为多少的数据块上，只需要记住这个文件的所属目录和文件名。\\n在写入新数据之前，用户不必关心硬盘上的那个块地址没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中。</p>\\n</li>\\n<li>\\n<p>载体</p>\\n<p>文件系统通常使用<a href=\\"https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">硬盘</a>和<a href=\\"https://zh.wikipedia.org/wiki/%E5%85%89%E7%9B%98\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">光盘</a>这样的<a href=\\"https://zh.wikipedia.org/wiki/%E5%AD%98%E5%82%A8%E8%AE%BE%E5%A4%87\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">存储设备</a>，并维护文件在设备中的<strong>物理位置</strong>。</p>\\n</li>\\n<li>\\n<p>严格定义</p>\\n<p>但是，实际上文件系统也可能仅仅是一种访问资料的界面而已，实际的数据是通过网络协议（如<a href=\\"https://zh.wikipedia.org/wiki/NFS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NFS</a>、<a href=\\"https://zh.wikipedia.org/wiki/SMB\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">SMB</a>、<a href=\\"https://zh.wikipedia.org/wiki/9P\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">9P</a>等）提供的或者内存上，甚至可能根本没有对应的文件（如<a href=\\"https://zh.wikipedia.org/wiki/Procfs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">proc文件系统</a>）。\\n文件系统是一套实现了<a href=\\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据</a>的存储、分级组织、访问和获取等操作的<a href=\\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">抽象数据类型</a>（Abstract data type）。</p>\\n</li>\\n</ul>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/文件系统与Everything原理.md","value":{"title":"文件系统与Everything原理","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/文件系统与Everything原理.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,s as data};
