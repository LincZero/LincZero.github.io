import{_ as e,c as p,e as n,b as l,a as s,f as t,o as h,r}from"./app-7Hf1q1UN.js";const k={};function m(d,a){const i=r("Mermaid");return h(),p("div",null,[a[2]||(a[2]=n('<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h1><h2 id="图-1" tabindex="-1"><a class="header-anchor" href="#图-1"><span>图</span></a></h2><p>图的存储方式</p><ol><li>邻接表</li><li>邻接矩阵</li></ol><p>如何表达图？生成图？</p><p>可以用不同的方式表达图，图是不同的，算法是一样的</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3>',7)),l(i,{id:"mermaid-30",code:"eJxLL0osyFAIceJy1NU119XVdQYxjIEMFy5nXV0jIMMJxDAFiwAA8lMJZQ=="}),a[3]||(a[3]=s("ul",null,[s("li",null,[s("p",null,"存储"),s("ul",null,[s("li",null,[s("p",null,"邻接表：每个节点记录与他直接相邻的节点（还可以加上相邻的距离等参数）"),s("ul",null,[s("li",null,"优点：能直接查出每个节点有多少邻居"),s("li",null,"例如，上图中，表示为：")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mo",null,":"),s("mi",null,"C"),s("mo",{stretchy:"false"},"("),s("mn",null,"7"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mi",null,"D"),s("mo",{stretchy:"false"},"("),s("mn",null,"3"),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mi",null,"B"),s("mo",null,":"),s("mi",null,"C"),s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mo",{stretchy:"false"},")"),s("mtext",null,"           "),s("mspace",{linebreak:"newline"}),s("mi",null,"C"),s("mo",null,":"),s("mi",null,"A"),s("mo",{stretchy:"false"},"("),s("mn",null,"7"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mi",null,"D"),s("mo",{stretchy:"false"},"("),s("mn",null,"3"),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mi",null,"D"),s("mo",null,":"),s("mi",null,"A"),s("mo",{stretchy:"false"},"("),s("mn",null,"3"),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mi",null,"C"),s("mo",{stretchy:"false"},"("),s("mn",null,"5"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"A: C(7),D(3)\\\\ B: C(2)~~~~~~~~~~~\\\\ C: A(7),D(3)\\\\ D: A(3),C(5) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},":"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"7"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"3"),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},":"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"2"),s("span",{class:"mclose"},")"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mspace nobreak"}," ")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},":"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"7"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"3"),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},":"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"3"),s("span",{class:"mclose"},")"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"5"),s("span",{class:"mclose"},")")])])])])])]),s("li",null,[s("p",null,"邻接矩阵"),s("ul",null,[s("li",null,"例如，上图中，表示为：")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"7")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"7")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mo",null,"−"),s("mn",null,"1")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"5")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])])])]),s("mo",{fence:"true"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\begin{bmatrix} 0 & -1 & 7 & 3\\\\ -1 & 0 & 2 & -1\\\\ 7 & 2 & 0 & 5\\\\ 3 & -1 & 5 & 0\\\\ \\end{bmatrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"4.8em","vertical-align":"-2.15em"}}),s("span",{class:"minner"},[s("span",{class:"mopen"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.65em"}},[s("span",{class:"pstrut",style:{height:"6.8em"}}),s("span",{style:{width:"0.667em",height:"4.800em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"4.800em",viewBox:"0 0 667 4800"},[s("path",{d:`M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84
H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])])]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"7")])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"7")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0")])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])]),s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"−"),s("span",{class:"mord"},"1")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"5")])]),s("span",{style:{top:"-1.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])])])]),s("span",{class:"mclose"},[s("span",{class:"delimsizing mult"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.65em"}},[s("span",{style:{top:"-4.65em"}},[s("span",{class:"pstrut",style:{height:"6.8em"}}),s("span",{style:{width:"0.667em",height:"4.800em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"0.667em",height:"4.800em",viewBox:"0 0 667 4800"},[s("path",{d:`M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347z
M347 1759 V0 H263 V1759 v1200 v1759 h84z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.15em"}},[s("span")])])])])])])])])])])])]),s("li",null,[s("p",null,"其他不常见的"),s("ul",null,[s("li",null,"其中二叉树/多叉树是图中的一种"),s("li",null,"此外还有很多特殊的图"),s("li",null,"例如用数组表示图：[5, 2, 2, 4, 2, 1]，每个序号的节点指向的父节点id，最后能形成一个倒序的多叉树")])])])]),s("li",null,[s("p",null,"集合类型"),s("ul",null,[s("li",null,"点集"),s("li",null,"边集")])]),s("li",null,[s("p",null,"是否有向"),s("ul",null,[s("li",null,"有向图（类似于单链表）"),s("li",null,[t("无向图（类似于双链表），对于无向图来说，节点的"),s("strong",null,"入路"),t("和"),s("strong",null,"出路"),t("是一样的")])])]),s("li",null,[s("p",null,"是否有环"),s("ul",null,[s("li",null,"有环图"),s("li",null,"无环图")])])],-1)),a[4]||(a[4]=s("h2",{id:"题",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#题"},[s("span",null,"题")])],-1)),a[5]||(a[5]=s("h3",{id:"技巧",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#技巧"},[s("span",null,"技巧")])],-1)),a[6]||(a[6]=s("p",null,"面试的问题：最近很少会考图，但每三家可能就会有一个。解决：",-1)),a[7]||(a[7]=s("p",null,"那么怎么解决这样一个笔试过程中的痛点呢，推荐一种方式，把图按照你最爱表达的方式实现所有的算法。 然后如果遇到一些自定义的图，只要写一次两种图的转化，就可以不用再实现一遍新图的解决，然后用你自己的图的方法解决",-1)),a[8]||(a[8]=s("p",null,"例如可能会遇到这种图：",-1)),a[9]||(a[9]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{fence:"true"},"["),s("mtable",{rowspacing:"0.16em",columnalign:"center center center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"3")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"0")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"7")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"1")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"2")])])])]),s("mo",{fence:"true"},"]")]),s("annotation",{encoding:"application/x-tex"},"\\begin{bmatrix} 3 & 0 & 2\\\\ 7 & 1 & 2 \\end{bmatrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"[")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"7")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"0")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"]")])])])])])])],-1)),a[10]||(a[10]=n(`<p>第一行表示0和2两城市的距离是3。那么没必要再弄一个这个图的新算法，而是转化成自己常用的邻接矩阵，然后再计算就行了</p><h3 id="常用结构a" tabindex="-1"><a class="header-anchor" href="#常用结构a"><span>常用结构A</span></a></h3><p>话说这个东西的定义好像我之前用 PyQt 实现的那个节点编辑器。那个应该是属于 ”有向有环图 (无回环，无循环依赖)“</p><h4 id="三个结构" tabindex="-1"><a class="header-anchor" href="#三个结构"><span>三个结构</span></a></h4><p>图类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> class06</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 点集 (点编号:实际点)，存储所有创建的节点类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashSet</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Edge</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> edges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				// 边集</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		nodes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		edges </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>节点类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> class06</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">							// 入路数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">							// 出路数</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nexts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 出路的点</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Edge</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> edges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 自己所拥有的边</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		in </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		out </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		nexts </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		edges </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>边类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> class06</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Edge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> weight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Node</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Edge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> weight</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">weight</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> weight;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> from;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">to</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> to;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化：这里是为了兼容所有情况。可以进行优化，如有时可能只是数字，可以将HashMap改成数组</p><h4 id="创建方法" tabindex="-1"><a class="header-anchor" href="#创建方法"><span>创建方法</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Graph</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createGrpht</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[][] matrix) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	……</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="图的宽度遍历" tabindex="-1"><a class="header-anchor" href="#图的宽度遍历"><span>图的宽度遍历</span></a></h3><p>遍历方法和二叉树的遍历差不多：</p><ol><li>利用队列实现</li><li>从源节点开始依次按照宽度进队列，然后弹出</li><li>每弹出一个点，把该节点所有没有进过队列的邻接点放入队列</li><li>直到队列变空</li></ol><p>什么是图的宽度遍历</p>`,17)),l(i,{id:"mermaid-222",code:"eJxLL0osyFAIceJy1NXVdQaTELYrF5cTWAhEuoBJoJAzmOMKJgGBgQue"}),a[11]||(a[11]=s("p",null,"例如上图中的无向图，A为头节点，输出 ACBED、ABCED、AECBD，都属于宽度遍历（CBE都和A直接相连，没权重区分）",-1)),a[12]||(a[12]=s("h3",{id:"图的深度遍历",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#图的深度遍历"},[s("span",null,"图的深度遍历")])],-1)),a[13]||(a[13]=s("p",null,"遍历方法和二叉树的遍历差不多。但要注意多准备一个Set，避免重复遍历某个元素：",-1)),a[14]||(a[14]=s("ol",null,[s("li",null,"利用栈实现"),s("li",null,"从源节点开始把节点按照深度放入栈，然后弹出"),s("li",null,"每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈"),s("li",null,"直到栈变空")],-1)),a[15]||(a[15]=s("p",null,"什么是图的深度遍历",-1)),l(i,{id:"mermaid-257",code:"eJxLL0osyFAIceJy1NXVhZDOYNKVi8sJzOFyBlIuXK5gEgD/pQlv"}),a[16]||(a[16]=s("p",null,"例如上图中的无向图，A为头节点，输出 ABCDE",-1)),a[17]||(a[17]=s("h3",{id:"包依赖问题-拓扑排序",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#包依赖问题-拓扑排序"},[s("span",null,[t("包依赖问题 ("),s("strong",null,"拓扑排序"),t(")")])])],-1)),a[18]||(a[18]=s("p",null,"引入包的依赖问题其实也是一种图 ”有向有环图 (无回环，无循环依赖)“",-1)),a[19]||(a[19]=s("p",null,"然后包依赖时，我们需要存在一个顺序：先编译谁再编译谁？这需要反向进行打印。",-1)),a[20]||(a[20]=s("p",null,"我刚开始以为这类似于后序遍历，但其实这个叫拓扑排序，并且实现简单得多：",-1)),a[21]||(a[21]=s("p",null,"方法：",-1)),l(i,{id:"mermaid-276",code:"eJxLL0osyFAIceJy1NW1cwaTTiAWELtwgVguXAChRAf9"}),a[22]||(a[22]=s("ol",null,[s("li",null,"先找入路为0的点，作为起点。例如上图的A"),s("li",null,"把A及其影响擦掉 (理解成节点和他的线删掉)。此时可以再次找到入路为0的点。循环")],-1)),a[23]||(a[23]=s("h2",{id:"最小生成树-mst",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#最小生成树-mst"},[s("span",null,"最小生成树 (MST)")])],-1)),a[24]||(a[24]=s("h3",{id:"概念",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概念"},[s("span",null,"概念")])],-1)),a[25]||(a[25]=s("p",null,"什么是最小生成树？保证联通性，且保证边是最少的",-1)),l(i,{id:"mermaid-298",code:"eJxLL0osyFAIceJy1NU1NDDQ1dV1BjHNgQwXEMMYyHDi4nLS1TUFyzmDlYEVuoBEjcAMABWIDdA="}),a[26]||(a[26]=s("p",null,"例如将上图修改成下图：",-1)),l(i,{id:"mermaid-302",code:"eJxLL0osyFAIceJy1NU11tXVdeJy0tU1BTKcQQwjIMOFCwCjZwe8"}),a[27]||(a[27]=n(`<p>如何实现？有两个算法：</p><ul><li>K算法 (kruskal算法)</li><li>P算法</li></ul><p>难点：里面有并查集结构（在进阶班将并查集）</p><h3 id="k算法-kruskal算法、并查集" tabindex="-1"><a class="header-anchor" href="#k算法-kruskal算法、并查集"><span>K算法 (kruskal算法、并查集)</span></a></h3><ul><li><p>适用：无向图</p></li><li><p>作用：生成最小生成树</p></li><li><p>特点：以边的角度出发</p></li><li><p>方法：机制很简单。先将边进行升序排序，然后依次加入。每次加入看有无形成环，若有则不加。</p></li><li><p>方法难点 —— 并查集：如何知道加入一条边后，有无形成环。这需要一个集合查询的结构 —— 并查集</p><ul><li><p>并查集就是为每个节点创建一个集合，N个节点就有N个集合。</p><p>如果新增一条边后，如连接AC的边后，看AC的集合是不是同一个，若不是，则说明该边没有形成环，然后将A和C放在同一个集合中</p><p>以此类推，最后的情况是N个节点都在一个集合中</p></li><li><p>这个并查集的概念其实也很好理解，就是存储一共有多少个离散的部分，每个离散部分的内容有什么</p></li><li><p>简单代替并查集：这里只是一个简单代替并查集的实现，但没有并查集快，并查集的复杂度是常数级的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MySets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> setMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 每个节点指向一个集合，多个节点可能指向同一个集合</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> isSameSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> union</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Node</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>实现：略</p></li></ul><h3 id="p算法-prim算法" tabindex="-1"><a class="header-anchor" href="#p算法-prim算法"><span>P算法 (prim算法)</span></a></h3><ul><li>适用：无向图</li><li>作用：生成最小生成树</li><li>特点：以点的角度出发</li><li>方法： <ol><li>边集准备一个：已解锁且未使用边集。刚开始所有边为未解锁状态。任意一个点设为已使用。</li><li>与已使用节点相连的边为解锁状态。 解锁且未被使用的边集中，选最短的一条且两端的点并非均已使用的边，将该边设为已使用。 并加入新边另一端的新节点。</li><li>重复上一步骤</li></ol></li><li>并查集问题：这个题不需要并查集</li></ul><h3 id="dijkstra算法-迪杰斯特拉算法" tabindex="-1"><a class="header-anchor" href="#dijkstra算法-迪杰斯特拉算法"><span>Dijkstra算法 (迪杰斯特拉算法)</span></a></h3><ul><li><p>适用：没有累加和为负数的环（不然一直转下去，到所有点的距离都可以无穷小）</p></li><li><p>思想：先找出某个节点到其他节点的最短距离（对于不可达，则看作是距离无穷大）</p></li><li><p>类型：这不是动态规划DP，是典型的贪心算法（不断加迭代已知条件，在迭代最优解）</p></li><li><p>方法：</p><ul><li><p>例如下面的图中，我们先给一个A到(A~E)的距离矩阵是 [0, -1, -1, -1, -1]</p></li><li><p>然后依次查看节点，看能不能让上面的矩阵的值变得更少</p><p>例如：查看节点A (原点长度为0) 及直接邻居之后，矩阵为 [0, 3, 15, 9, -1]，此后A-A的记录被锁死，后续不再改变和使用。</p><p>接着再看B (原点长度为3，都要加上这个)：那么经B的矩阵是 [6, 3, 5, -1, 203]，因为采取更小值，最后矩阵为 [0, 3, 5, 9, 203]</p><p>以此类推，最后得到：[0, 3, 5, 9, 19]</p></li><li><p>为什么要锁记录？</p></li><li><p>堆改写问题：这里可以用堆，但不能用系统给的堆，否则代价比较大。 因为堆上的某个节点可能会突然变小，并且有些值就后面不会再修改，手动改写堆的话会更快</p></li></ul></li></ul>`,9)),l(i,{id:"mermaid-483",code:"eJxLL0osyFAIceJy1NU11tXVBTMMTYEsZxDLEshw4XLS1TUyMAAyXbmcgbImYJYLkGUGZgEA/1kNqQ=="}),a[28]||(a[28]=n('<h3 id="a-算法" tabindex="-1"><a class="header-anchor" href="#a-算法"><span>A* 算法</span></a></h3><ul><li>游戏和图形会比较常见</li></ul><h3 id="总结比较k、p算法-均贪心算法" tabindex="-1"><a class="header-anchor" href="#总结比较k、p算法-均贪心算法"><span>总结比较K、P算法 (均贪心算法)</span></a></h3><ul><li>K算法：从边出发，依次加入边，直至多个离散的图最终变成一个整体的图 <ul><li>根据特征重命名：离散整体生成图算法</li></ul></li><li>P算法：从点出发，一个整体的图不断扩张，直至连接上所有的点 <ul><li>根据特征重命名：点扩张生成图算法</li></ul></li><li>Dijkstra算法 <ul><li>根据特征重命名：</li></ul></li></ul><p>这三种算法都是贪心</p><h3 id="森林问题" tabindex="-1"><a class="header-anchor" href="#森林问题"><span>森林问题</span></a></h3><p>有可能给你的图，不是一个整个单一联通的，而是多个离散的不相连的图组成的图。这个就是森林问题。</p><p>这种情况需要生成多个最小生成树</p><h2 id="前缀树-trie-tree" tabindex="-1"><a class="header-anchor" href="#前缀树-trie-tree"><span>前缀树 (Trie-tree?)</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><p>何为前缀树？如何生成前缀树？</p><p>（这个名字有点像那个 ”前缀和数组“，但不一样）</p><p>例如 [&quot;abc&quot;, &quot;bck&quot;, &quot;abd&quot;, &quot;ace&quot;] 数组，可以建下面的前缀树出来：</p>',13)),l(i,{id:"mermaid-562",code:"eJwly7kNgDAQRNF8qqCBL2EbG5xSAw2YQyCRIPoP2BXZ0xzn256rW2YFaEBUhNWQlGAzDPLOo6z8R0UFbsMoX+2mSX70sqrCYQi9Pq0jEpM="}),a[29]||(a[29]=n(`<p>这是一个经典的生成，点上没有数据。但一般来说，我们会在点上另存一些数据：（可能方便计算或序列化）</p><ul><li>p：这个节点被使用的次数 (特点：根节点(空串)的p值也同时会标识，你往这个前缀树加入了多少个词)</li><li>e：这个节点作为被结束节点的次数</li></ul><p>用处：</p><ul><li>一篇文章中，可以将每个单词视作一个元素，来进入前缀树。然后可以进行 <ul><li>前缀词频统计</li><li>词频统计</li><li>其他方法：增加单个元素、删除元素一次、删除整个元素</li></ul></li><li>速度超快，查询一个单词时，代价只有一个单词的长度，复杂度 O(k)</li></ul><h3 id="题-1" tabindex="-1"><a class="header-anchor" href="#题-1"><span>题</span></a></h3><p>例题：一个字符串类型的数组arr1，另一个字符串类型的数组arr2。arr2中有哪些字符，是arr1中出现的？</p><p>请打印。arr2中有哪些字符，是作为arr1中某个字符串前缀出现的? 请打印。arr2中有哪些字符，是作为arr1中某个字符串前缀出现的？请打印 arr2中出现次数最大的前缀。</p><h2 id="暴力枚举" tabindex="-1"><a class="header-anchor" href="#暴力枚举"><span>暴力枚举</span></a></h2><h3 id="题-2" tabindex="-1"><a class="header-anchor" href="#题-2"><span>题</span></a></h3><h4 id="n皇后问题-暴力枚举版" tabindex="-1"><a class="header-anchor" href="#n皇后问题-暴力枚举版"><span>N皇后问题 (暴力枚举版)</span></a></h4><p>N皇后问题是指在N*N的棋盘上要摆N个皇后，要求任何两个皇后不同行、不同列，也不在同一条斜线上。</p><p>给定一个整数n，返回n皇后的摆法有多少种</p><p>例如：</p><ul><li>n=1，返回1。</li><li>n=2或3，2皇后和3皇后问题无论怎么摆都不行，返回0。</li><li>n=8，返回92。</li></ul><p>答案：最优解很难，先用贪心，暴力枚举</p><p>先准备一个 list 存储每次防止的皇后位置，然后要有一个算法判断每次新的位置是否与之前的存在共行列斜线的问题。然后暴力枚举递归</p><p>复杂度：O(n^n)，复杂度指标没法优化（有后效性的程序问题），但常数时间可以优化非常多</p><h4 id="n皇后问题-位图版" tabindex="-1"><a class="header-anchor" href="#n皇后问题-位图版"><span>N皇后问题 (位图版)</span></a></h4><p>复杂度：O(n^n)，但常数时间优化非常多。（例如14皇后问题中，该方法229ms，普通方法5055ms。15皇后问题中，这个一秒多，普通方法要一分）</p><p>主要是用二进制位图来进行优化，程序：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> num2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// int要求皇后不超过32</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 取值范围过滤</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> limit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 例如8皇后问题，则前8位是1，其他都是0 (有点类似于掩码)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> process2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(limit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// colLim 列的限制，1的位置不能放皇后，0的位置可以</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// leftDiaLim 左斜线的限制，1的位置不能放皇后，0的位置可以</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// rightDiaLim 右斜线的限制，1的位置不能放皇后，0的位置可以</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> process2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> limit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> colLim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> leftDiaLim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> rightDiaLim</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 位图可以很位运算很快地进行判断：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 例如一个位置位于：列[00001000] 行[00010000] 斜[00000100]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 直接用|和已经放置皇后的与集作运算，就能知道有无冲突了！妙啊！</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><p>在某一个标准下，优先考虑最满足标准的样本，最后考虑最不满足标准的样本，最终得到一个答案的算法，叫作贪心算法。</p><p>也就是说，不从整体最优上加以考虑，所做出的是在某种意义上的局部最优解。</p><p>局部最优 -?-&gt; 整体最优</p><p>特点：最常用、用得最多的算法。但不一定是最优解</p><p>算法举例：</p><ul><li>最小生成树的 K算法、P算法、Dijkstra算法</li></ul><h3 id="题-3" tabindex="-1"><a class="header-anchor" href="#题-3"><span>题</span></a></h3><p>特别难准备，因为每个题的业务和贪心策略都不同。</p><p>面试中经常有，但往往篇幅不大只占一部分。没法考coding，有淘汰度但没有区分度</p><h4 id="会议占用时间分配" tabindex="-1"><a class="header-anchor" href="#会议占用时间分配"><span>会议占用时间分配</span></a></h4><p>一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲。</p><p>给你每一个项目开始的时间和结束的时间(给你一个数组，里面是一个个具体的项目)，你来安排宣讲的日程，要求会议室进行的宣讲的场次最多。</p><p>返回这个最多的宣讲场次。</p><p>（这种应该是需要用动态规划的，不过这里先用贪心算法）</p><p>解题思路：早优先和短优先，都比较容易偏离最优解。早结束优先会好一些</p><h4 id="字典序" tabindex="-1"><a class="header-anchor" href="#字典序"><span>字典序</span></a></h4><p>如果不用对数器，而是用证明的方法，会更麻烦。例如这里的字典序问题</p><h5 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h5><p>（这个概念有点类似于线性代数中的 ”逆序数“）</p><p>将单词从小到大排列，违反这个顺序就字典序加一</p><h5 id="字典序-的-有效-无效比较策略" tabindex="-1"><a class="header-anchor" href="#字典序-的-有效-无效比较策略"><span>字典序 的 有效/无效比较策略</span></a></h5><p>有效要求具有传递性，a&lt;b&lt;c，则a&lt;c</p><p>但有些东西不一定有传递性的，例如下棋吃棋就是</p><h5 id="证明传递性" tabindex="-1"><a class="header-anchor" href="#证明传递性"><span>证明传递性</span></a></h5><p>这里的 a,b,c 等都表示的是一个单词</p><p>如何证明，若 f(a,b) &lt;= f(b,a)，f(b,c) &lt;= f(c,b)，则 f(a,c) &lt;= f(c,a) (f函数表示拼接，如 f(&quot;abc&quot;,&quot;de&quot;) = &quot;abcde&quot;)，</p><p>也可以用进制来理解，将拼接运算变成数学运算。那么 f(a,b) = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>×</mo><msup><mi>k</mi><mrow><mi>b</mi><mtext>长度</mtext></mrow></msup><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\\times k^{b长度}+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord cjk_fallback mtight">长度</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>然后就可以证明了</p><h5 id="证明交换换字典序变大" tabindex="-1"><a class="header-anchor" href="#证明交换换字典序变大"><span>证明交换换字典序变大</span></a></h5><p>（这跟线性代数里 ”逆序数“ 的证明很像）</p><ul><li>紧挨的情况：[…… a b ……] &lt; […… b a ……]</li><li>不挨的情况：[…… a m1 m2 b ……] &lt; […… m1 a m2 b ……] &lt; …… &lt; […… b m1 m2 a ……]</li></ul><h4 id="金条分隔问题" tabindex="-1"><a class="header-anchor" href="#金条分隔问题"><span>金条分隔问题</span></a></h4><p>题：</p><p>一块金条切成两半，是需要花费和长度数值一样的铜板的。比如长度为20的金条，不管切成长度多大的两半，都要花费20个铜板。</p><p>一群人想整分整块金条，怎么分最省铜板？输入一个数组，返回分割的最小代价</p><p>例如：</p><p>给定数组 {10,20,30}，代表一共三个人，整块金条长度为10+20+30=60。金条要分成10,20,30三个部分。</p><ul><li>如果先把长度60的金条分成10和50，花费60；再把长度50的金条分成20和30，花费50；一共花费110铜板。</li><li>但是如果先把长度60的金条分成30和30，花费60；再把长度30金条分成10和20花费30；一共花费90铜板。</li></ul><p>解答：</p>`,61)),s("ul",null,[s("li",null,[a[0]||(a[0]=s("p",null,"答案：哈夫曼编码 / 哈夫曼树，不作证明",-1)),a[1]||(a[1]=s("p",null,"例如 [2,3,4,7,9,2]，先放小根堆。每次弹出两个数并相加组树，相加的数再放入小根堆里。重复这个过程，最后得到：",-1)),l(i,{id:"mermaid-823",code:"eJxLL0osyFAIceIyMtfV1TU05FIAAkNDINsczAQBkIwJnKegYALkG6Hz41GUGyPMMYmHmm0GETMDmQ1RDWXHcwEAFJYWfw=="})])]),a[30]||(a[30]=n(`<h4 id="花费-利润-项目分配" tabindex="-1"><a class="header-anchor" href="#花费-利润-项目分配"><span>(花费,利润) 项目分配</span></a></h4><p>输入:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正数数组costs	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// costs[i]表示i号项目的花费</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正数数组profits	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// profits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正数k			 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 你只能串行最多做k个项目</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">正m			  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始的资金</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 你每做完一个项目，马上获得的收益，可以支持你去做下一个项目</p><p>输出: 你最后获得的最大钱数</p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>贪心策略：最大利润者优先（不证明），不过感觉有点像背包DM</p><p>答案：用堆来做。</p><ul><li>准备小根堆（按花费排），也叫锁堆。再准备大根堆（按利润排），也叫解锁堆</li><li>要次小根堆释放、解锁。然后大根堆再去选利润高的去做</li></ul><h3 id="解题技巧" tabindex="-1"><a class="header-anchor" href="#解题技巧"><span>解题技巧</span></a></h3><p>技巧：准备很多模板，然后就不再需要再去证明贪心最优解问题了</p><p>贪心算法的在笔试时的解题套路</p><ol><li>实现一个不依靠贪心策略的解法X，可以用最暴力的尝试</li><li>脑补出贪心策略A、贪心策略B、贪心策略C..</li><li>用解法X和对数器，去验证每一个贪心策略，用实验的方式得知哪个贪心策略正确</li><li>不要去纠结贪心策略的证明 (很难，每道题的业务不同，证明方法都不同，且很耗时间)</li></ol><p>贪心策略在实现时，经常使用到的技巧:</p><ol><li>根据某标准建立一个比较器来排序</li><li>根据某标准建立一个比较器来组成堆</li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="题-设计一个结构。一个数据流中-随时可以取得中位数" tabindex="-1"><a class="header-anchor" href="#题-设计一个结构。一个数据流中-随时可以取得中位数"><span>题：设计一个结构。一个数据流中，随时可以取得中位数</span></a></h3><p>准备大根堆，小根堆。第一个数字先入大根堆</p><p>后续每次进一个数字，若&lt;大根堆数，则给小根堆，否则入大根堆。 然后比较两个根堆大小，若差大于一，则大弹出一个给更小的那个。</p><p>复杂度LogN</p>`,21))])}const y=e(k,[["render",m],["__file","15. 结构 - 图.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/15.%20%E7%BB%93%E6%9E%84%20-%20%E5%9B%BE.html","title":"图","lang":"zh-CN","frontmatter":{"description":"图 图 图的存储方式 邻接表 邻接矩阵 如何表达图？生成图？ 可以用不同的方式表达图，图是不同的，算法是一样的 分类 存储 邻接表：每个节点记录与他直接相邻的节点（还可以加上相邻的距离等参数） 优点：能直接查出每个节点有多少邻居 例如，上图中，表示为： A:C(7),D(3)B:C(2) C:A(7),D(3)D:A(3),C(5) 邻接矩阵 例如，上...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/15.%20%E7%BB%93%E6%9E%84%20-%20%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"图"}],["meta",{"property":"og:description","content":"图 图 图的存储方式 邻接表 邻接矩阵 如何表达图？生成图？ 可以用不同的方式表达图，图是不同的，算法是一样的 分类 存储 邻接表：每个节点记录与他直接相邻的节点（还可以加上相邻的距离等参数） 优点：能直接查出每个节点有多少邻居 例如，上图中，表示为： A:C(7),D(3)B:C(2) C:A(7),D(3)D:A(3),C(5) 邻接矩阵 例如，上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"图","slug":"图","link":"#图","children":[{"level":2,"title":"图","slug":"图-1","link":"#图-1","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]}]},{"level":2,"title":"题","slug":"题","link":"#题","children":[{"level":3,"title":"技巧","slug":"技巧","link":"#技巧","children":[]},{"level":3,"title":"常用结构A","slug":"常用结构a","link":"#常用结构a","children":[{"level":4,"title":"三个结构","slug":"三个结构","link":"#三个结构","children":[]},{"level":4,"title":"创建方法","slug":"创建方法","link":"#创建方法","children":[]}]},{"level":3,"title":"图的宽度遍历","slug":"图的宽度遍历","link":"#图的宽度遍历","children":[]},{"level":3,"title":"图的深度遍历","slug":"图的深度遍历","link":"#图的深度遍历","children":[]},{"level":3,"title":"包依赖问题 (拓扑排序)","slug":"包依赖问题-拓扑排序","link":"#包依赖问题-拓扑排序","children":[]}]},{"level":2,"title":"最小生成树 (MST)","slug":"最小生成树-mst","link":"#最小生成树-mst","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"K算法 (kruskal算法、并查集)","slug":"k算法-kruskal算法、并查集","link":"#k算法-kruskal算法、并查集","children":[]},{"level":3,"title":"P算法 (prim算法)","slug":"p算法-prim算法","link":"#p算法-prim算法","children":[]},{"level":3,"title":"Dijkstra算法 (迪杰斯特拉算法)","slug":"dijkstra算法-迪杰斯特拉算法","link":"#dijkstra算法-迪杰斯特拉算法","children":[]},{"level":3,"title":"A* 算法","slug":"a-算法","link":"#a-算法","children":[]},{"level":3,"title":"总结比较K、P算法 (均贪心算法)","slug":"总结比较k、p算法-均贪心算法","link":"#总结比较k、p算法-均贪心算法","children":[]},{"level":3,"title":"森林问题","slug":"森林问题","link":"#森林问题","children":[]}]},{"level":2,"title":"前缀树 (Trie-tree?)","slug":"前缀树-trie-tree","link":"#前缀树-trie-tree","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"题","slug":"题-1","link":"#题-1","children":[]}]},{"level":2,"title":"暴力枚举","slug":"暴力枚举","link":"#暴力枚举","children":[{"level":3,"title":"题","slug":"题-2","link":"#题-2","children":[{"level":4,"title":"N皇后问题 (暴力枚举版)","slug":"n皇后问题-暴力枚举版","link":"#n皇后问题-暴力枚举版","children":[]},{"level":4,"title":"N皇后问题 (位图版)","slug":"n皇后问题-位图版","link":"#n皇后问题-位图版","children":[]}]}]},{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[{"level":3,"title":"题","slug":"题-3","link":"#题-3","children":[{"level":4,"title":"会议占用时间分配","slug":"会议占用时间分配","link":"#会议占用时间分配","children":[]},{"level":4,"title":"字典序","slug":"字典序","link":"#字典序","children":[{"level":5,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":5,"title":"字典序 的 有效/无效比较策略","slug":"字典序-的-有效-无效比较策略","link":"#字典序-的-有效-无效比较策略","children":[]},{"level":5,"title":"证明传递性","slug":"证明传递性","link":"#证明传递性","children":[]},{"level":5,"title":"证明交换换字典序变大","slug":"证明交换换字典序变大","link":"#证明交换换字典序变大","children":[]}]},{"level":4,"title":"金条分隔问题","slug":"金条分隔问题","link":"#金条分隔问题","children":[]},{"level":4,"title":"(花费,利润) 项目分配","slug":"花费-利润-项目分配","link":"#花费-利润-项目分配","children":[]}]},{"level":3,"title":"解题技巧","slug":"解题技巧","link":"#解题技巧","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"题：设计一个结构。一个数据流中，随时可以取得中位数","slug":"题-设计一个结构。一个数据流中-随时可以取得中位数","link":"#题-设计一个结构。一个数据流中-随时可以取得中位数","children":[]}]}]}],"git":{},"readingTime":{"minutes":15.66,"words":4698},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/15. 结构 - 图.md","excerpt":"\\n<h2>图</h2>\\n<p>图的存储方式</p>\\n<ol>\\n<li>邻接表</li>\\n<li>邻接矩阵</li>\\n</ol>\\n<p>如何表达图？生成图？</p>\\n<p>可以用不同的方式表达图，图是不同的，算法是一样的</p>\\n<h3>分类</h3>\\n<ul>\\n<li>\\n<p>存储</p>\\n<ul>\\n<li>\\n<p>邻接表：每个节点记录与他直接相邻的节点（还可以加上相邻的距离等参数）</p>\\n<ul>\\n<li>优点：能直接查出每个节点有多少邻居</li>\\n<li>例如，上图中，表示为：</li>\\n</ul>\\n<p v-pre=\\"\\" class=\\"katex-block\\"><span class=\\"katex-display\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\" display=\\"block\\"><semantics><mrow><mi>A</mi><mo>:</mo><mi>C</mi><mo stretchy=\\"false\\">(</mo><mn>7</mn><mo stretchy=\\"false\\">)</mo><mo separator=\\"true\\">,</mo><mi>D</mi><mo stretchy=\\"false\\">(</mo><mn>3</mn><mo stretchy=\\"false\\">)</mo><mspace linebreak=\\"newline\\"></mspace><mi>B</mi><mo>:</mo><mi>C</mi><mo stretchy=\\"false\\">(</mo><mn>2</mn><mo stretchy=\\"false\\">)</mo><mtext>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</mtext><mspace linebreak=\\"newline\\"></mspace><mi>C</mi><mo>:</mo><mi>A</mi><mo stretchy=\\"false\\">(</mo><mn>7</mn><mo stretchy=\\"false\\">)</mo><mo separator=\\"true\\">,</mo><mi>D</mi><mo stretchy=\\"false\\">(</mo><mn>3</mn><mo stretchy=\\"false\\">)</mo><mspace linebreak=\\"newline\\"></mspace><mi>D</mi><mo>:</mo><mi>A</mi><mo stretchy=\\"false\\">(</mo><mn>3</mn><mo stretchy=\\"false\\">)</mo><mo separator=\\"true\\">,</mo><mi>C</mi><mo stretchy=\\"false\\">(</mo><mn>5</mn><mo stretchy=\\"false\\">)</mo></mrow><annotation encoding=\\"application/x-tex\\">A: C(7),D(3)\\\\\\\\\\nB: C(2)~~~~~~~~~~~\\\\\\\\\\nC: A(7),D(3)\\\\\\\\\\nD: A(3),C(5)\\n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\">A</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">:</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.07153em;\\">C</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">7</span><span class=\\"mclose\\">)</span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">D</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">3</span><span class=\\"mclose\\">)</span></span><span class=\\"mspace newline\\"></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.05017em;\\">B</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">:</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.07153em;\\">C</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">2</span><span class=\\"mclose\\">)</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span><span class=\\"mspace nobreak\\">&nbsp;</span></span><span class=\\"mspace newline\\"></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.07153em;\\">C</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">:</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\">A</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">7</span><span class=\\"mclose\\">)</span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">D</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">3</span><span class=\\"mclose\\">)</span></span><span class=\\"mspace newline\\"></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6833em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.02778em;\\">D</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span><span class=\\"mrel\\">:</span><span class=\\"mspace\\" style=\\"margin-right:0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:1em;vertical-align:-0.25em;\\"></span><span class=\\"mord mathnormal\\">A</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">3</span><span class=\\"mclose\\">)</span><span class=\\"mpunct\\">,</span><span class=\\"mspace\\" style=\\"margin-right:0.1667em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right:0.07153em;\\">C</span><span class=\\"mopen\\">(</span><span class=\\"mord\\">5</span><span class=\\"mclose\\">)</span></span></span></span></span></p>\\n</li>\\n<li>\\n<p>邻接矩阵</p>\\n<ul>\\n<li>例如，上图中，表示为：</li>\\n</ul>\\n<p v-pre=\\"\\" class=\\"katex-block\\"><span class=\\"katex-display\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\" display=\\"block\\"><semantics><mrow><mo fence=\\"true\\">[</mo><mtable rowspacing=\\"0.16em\\" columnalign=\\"center center center center\\" columnspacing=\\"1em\\"><mtr><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>5</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\\"0\\" displaystyle=\\"false\\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence=\\"true\\">]</mo></mrow><annotation encoding=\\"application/x-tex\\">\\\\begin{bmatrix}\\n  0 &amp; -1 &amp; 7 &amp; 3\\\\\\\\\\n  -1 &amp; 0 &amp; 2 &amp; -1\\\\\\\\\\n  7 &amp; 2 &amp; 0 &amp; 5\\\\\\\\\\n  3 &amp; -1 &amp; 5 &amp; 0\\\\\\\\\\n\\\\end{bmatrix}\\n</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:4.8em;vertical-align:-2.15em;\\"></span><span class=\\"minner\\"><span class=\\"mopen\\"><span class=\\"delimsizing mult\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.65em;\\"><span class=\\"pstrut\\" style=\\"height:6.8em;\\"></span><span style=\\"width:0.667em;height:4.800em;\\"><svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"0.667em\\" height=\\"4.800em\\" viewBox=\\"0 0 667 4800\\"><path d=\\"M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84\\nH403z M403 1759 V0 H319 V1759 v1200 v1759 h84z\\"></path></svg></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span></span><span class=\\"mord\\"><span class=\\"mtable\\"><span class=\\"col-align-c\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.81em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">0</span></span></span><span style=\\"top:-3.61em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">−</span><span class=\\"mord\\">1</span></span></span><span style=\\"top:-2.41em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">7</span></span></span><span style=\\"top:-1.21em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">3</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"col-align-c\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.81em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">−</span><span class=\\"mord\\">1</span></span></span><span style=\\"top:-3.61em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">0</span></span></span><span style=\\"top:-2.41em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span></span></span><span style=\\"top:-1.21em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">−</span><span class=\\"mord\\">1</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"col-align-c\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.81em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">7</span></span></span><span style=\\"top:-3.61em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">2</span></span></span><span style=\\"top:-2.41em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">0</span></span></span><span style=\\"top:-1.21em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">5</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"arraycolsep\\" style=\\"width:0.5em;\\"></span><span class=\\"col-align-c\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.81em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">3</span></span></span><span style=\\"top:-3.61em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">−</span><span class=\\"mord\\">1</span></span></span><span style=\\"top:-2.41em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">5</span></span></span><span style=\\"top:-1.21em;\\"><span class=\\"pstrut\\" style=\\"height:3em;\\"></span><span class=\\"mord\\"><span class=\\"mord\\">0</span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span></span></span><span class=\\"mclose\\"><span class=\\"delimsizing mult\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.65em;\\"><span style=\\"top:-4.65em;\\"><span class=\\"pstrut\\" style=\\"height:6.8em;\\"></span><span style=\\"width:0.667em;height:4.800em;\\"><svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"0.667em\\" height=\\"4.800em\\" viewBox=\\"0 0 667 4800\\"><path d=\\"M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347z\\nM347 1759 V0 H263 V1759 v1200 v1759 h84z\\"></path></svg></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height:2.15em;\\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\\n</li>\\n<li>\\n<p>其他不常见的</p>\\n<ul>\\n<li>其中二叉树/多叉树是图中的一种</li>\\n<li>此外还有很多特殊的图</li>\\n<li>例如用数组表示图：[5, 2, 2, 4, 2, 1]，每个序号的节点指向的父节点id，最后能形成一个倒序的多叉树</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>集合类型</p>\\n<ul>\\n<li>点集</li>\\n<li>边集</li>\\n</ul>\\n</li>\\n<li>\\n<p>是否有向</p>\\n<ul>\\n<li>有向图（类似于单链表）</li>\\n<li>无向图（类似于双链表），对于无向图来说，节点的<strong>入路</strong>和<strong>出路</strong>是一样的</li>\\n</ul>\\n</li>\\n<li>\\n<p>是否有环</p>\\n<ul>\\n<li>有环图</li>\\n<li>无环图</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/15. 结构 - 图.md","value":{"title":"15. 结构 - 图","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/15. 结构 - 图.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{y as comp,o as data};
