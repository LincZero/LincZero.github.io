import{_ as t,c as h,e,a as s,f as a,b as l,o as p,r as k}from"./app-CcegWvWz.js";const d="/assets/image-20240320233534755-wn-1-zPG.png",r="/assets/image-20240320233601799-DpmdKRSO.png",o={};function A(B,i){const n=k("VPIcon");return p(),h("div",null,[i[23]||(i[23]=e('<h1 id="boost-asio视频" tabindex="-1"><a class="header-anchor" href="#boost-asio视频"><span>Boost.Asio视频</span></a></h1><p>参考：</p><ul><li><a href="https://www.bilibili.com/video/BV12X4y187gd" target="_blank" rel="noopener noreferrer">（C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例</a> (1:38:46)</li></ul><h2 id="调研-跨平台网络库" tabindex="-1"><a class="header-anchor" href="#调研-跨平台网络库"><span>调研 - 跨平台网络库</span></a></h2><h3 id="调研-跨平台网络库-1" tabindex="-1"><a class="header-anchor" href="#调研-跨平台网络库-1"><span>调研 - 跨平台网络库</span></a></h3><ul><li>主要用于linux，事件回调 <ul><li>libevnet (用过)</li><li>libev</li><li>libuv</li><li>libhv (用过)</li></ul></li><li>异步IO <ul><li>boost.asio</li></ul></li></ul><h3 id="同步io与异步io" tabindex="-1"><a class="header-anchor" href="#同步io与异步io"><span>同步io与异步io</span></a></h3><h4 id="接口上差异" tabindex="-1"><a class="header-anchor" href="#接口上差异"><span>接口上差异</span></a></h4><ul><li>同步io <ul><li>阻塞io网络模式：read、accept、connect、write</li></ul></li><li>异步io <ul><li>原生系统IO API：fcntl() 设置socket为非阻塞IO</li><li>libevent库：onWrite、onRead / onMessage、onConnect</li><li>asio库：WSARecv、AcceptEx、ConnectEx、WSASend</li></ul></li></ul><h4 id="系统-io-api" tabindex="-1"><a class="header-anchor" href="#系统-io-api"><span>系统 IO API</span></a></h4><ul><li>select：<strong>跨平台</strong></li><li>poll：<strong>跨平台</strong></li><li>epoll：<strong>Windows不支持</strong></li><li>icop：<strong>Linux不支持</strong></li></ul><h4 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型"><span>网络模型</span></a></h4><ul><li>reactor模型：又称反应器模式，基于事件回调。通常是Linux使用</li><li>iocp (I/O Completion Port，输入/输出完成端口) 网络模型：基于事件回调。通常Windows使用</li><li>Proactor模型</li></ul><h4 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h4><ul><li>asio <ul><li>同步/异步：支持同步和异步IO</li><li>网络模型：支持Reactor模型和Proactor模型</li><li>系统 IO API <ul><li>Unix/Linux，Asio使用epoll，kqueue，/dev/poll，select等系统调用</li><li>Windows，Asio使用IOCP</li></ul></li></ul></li><li>libevent <ul><li>网络模型：Reactor模型</li><li>系统 IO API <ul><li>Unix/Linux/Windows，均为Reactor模型。Linux的epoll, BSD的kqueue，Windows的select</li><li>Windows上，虽然libevent也支持使用IOCP，但并不是作为主要的I/O模型，而是作为一种优化手段，在大量并发连接时会比select等方式效率更高</li></ul></li></ul></li></ul><h4 id="原理上差异" tabindex="-1"><a class="header-anchor" href="#原理上差异"><span>原理上差异</span></a></h4><ul><li>阻塞io：去菜鸟驿站等货物到</li><li>reactor io：注册一次，有货物来了就告诉我（不会送过来），货物到了后自己去取 <ul><li>epoll 检测，非阻塞io操作io，事件循环处理</li></ul></li><li>asio io、异步io：把篮子带过去，如果货物来了就驿站就将货物放篮子里并送货到家。然后需要将篮子再带过去等待下次货物</li></ul><p><img src="'+d+'" alt="image-20240320233534755" loading="lazy"></p><p><img src="'+r+'" alt="image-20240320233601799" loading="lazy"></p><blockquote><h5 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>tips</span></a></h5></blockquote><p>一开始我将 reactor 看成是 react 了，要区分一下这两者</p><ul><li>reactor (/riˈæktər/)：reactor模型、reactor io</li><li>react (/riˈækt/)：前端三大框架之一</li></ul><h3 id="boost-asio-两个命名空间" tabindex="-1"><a class="header-anchor" href="#boost-asio-两个命名空间"><span>boost.asio 两个命名空间</span></a></h3><p>需要知道两个命名空间：</p>',24)),s("ul",null,[i[12]||(i[12]=s("li",null,[s("p",null,[s("code",null,"boost::asio")]),s("ul",null,[s("li",null,"核心类及函数：io_context"),s("li",null,"同步IO函数：posix api (connect、accept、read_some、write_some)"),s("li",null,"异步IO函数：(async_connect、async_accept、async_read_some、async_write_some)")])],-1)),s("li",null,[i[11]||(i[11]=s("p",null,[s("code",null,"boost::assio::ip")],-1)),s("ul",null,[s("li",null,[s("p",null,[i[0]||(i[0]=a("其中，boost")),l(n,{icon:"asio"}),i[1]||(i[1]=a("ip 封装了socket、L4、L3"))]),i[2]||(i[2]=e("<ul><li><p>用户态</p></li><li><p>内核态</p><ul><li>socket</li><li>L4 tcp/udp/icmp</li><li>L3 ip</li><li>L2 mac</li><li>L1 网卡</li></ul></li><li><p>网卡</p></li></ul>",1))]),s("li",null,[i[10]||(i[10]=s("p",null,"接口",-1)),s("ul",null,[i[8]||(i[8]=s("li",null,"ip地址：ip::address",-1)),s("li",null,[i[3]||(i[3]=a("端点：ip")),l(n,{icon:"tcp"}),i[4]||(i[4]=a("endpoint、ip")),l(n,{icon:"udp"}),i[5]||(i[5]=a("endpoint"))]),s("li",null,[i[6]||(i[6]=a("socket：ip")),l(n,{icon:"tcp"}),i[7]||(i[7]=a("socket、ip::udp:socket"))]),i[9]||(i[9]=s("li",null,"套接字控制：set_option、get_option、io_control",-1))])])])])]),i[24]||(i[24]=s("h2",{id:"开始",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#开始"},[s("span",null,"开始")])],-1)),i[25]||(i[25]=s("h3",{id:"异常处理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#异常处理"},[s("span",null,"异常处理")])],-1)),s("ul",null,[s("li",null,[i[16]||(i[16]=s("p",null,"同步io",-1)),s("ul",null,[s("li",null,[i[15]||(i[15]=s("p",null,"boost同步io函数有两种结果接口：抛异常、错误码",-1)),s("p",null,[i[13]||(i[13]=a("例如：connect(socket, boost")),l(n,{icon:"system"}),i[14]||(i[14]=a("error_code err);"))])])])]),s("li",null,[i[22]||(i[22]=s("p",null,"异步io",-1)),s("ul",null,[s("li",null,[i[17]||(i[17]=a("例如：")),i[18]||(i[18]=s("code",null,"async_read_some(buffer(data, length), [](boost::system::error_code err, size_t transferedBytes){});",-1)),i[19]||(i[19]=s("br",null,null,-1)),i[20]||(i[20]=a(" 这里的buffer是一个boost")),l(n,{icon:"asio"}),i[21]||(i[21]=a("buffer对象"))])])])]),i[26]||(i[26]=e(`<h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>Windows默认安装位置：C:/local/boost_1_82_0/</p><ul><li>boost/, 头文件</li><li>doc/</li><li>lib64-msvc-14.2/, (我没有这个文件夹)，用VS时，库文件</li><li>libs/</li><li>more/</li><li>status/</li><li>tools/</li></ul><p>要写根目录到环境变量，且不是Path里，而是BOOST_ROOT里</p><h3 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建"><span>项目创建</span></a></h3><p>VS创建一个CMake项目</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" data-title="cmake" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">cmake_minimum_required</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (VERSION 3.8)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BOOST_ROOT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$ENV{BOOST_ROOT}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 获取环境变量里的路径 (可以去检查下有无设置)，存储在该文件的变量里</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">find_package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Boost 1.82 REQUIRED </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 链接库</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BOSST_LIBRARY_DIR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${BOOT_ROOT}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/lib64-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">msvc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-14.2)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 但我没有这个路径</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">link_directories</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${BOOST_LIBRARY_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">add_executable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(asio </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;asio.cpp&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;asio.h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(asio PUBLIC Boost::</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Boost::regex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 头文件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BOOST_INCLUDE_DIR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${BOOT_ROOT}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">target_include_directiories(asio PUBLIC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\${BOOST_INCLUDE_DIR}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本cpp</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;asio.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;boost/asio.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">asio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::asio::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    io_context io_ctx;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    io_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 阻塞等待，相当于reactor中的事件循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充完善</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;asio.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;boost/asio.hpp&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">asio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> boost::asio::</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Seesion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">enable_shared_form_this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tcp::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> sock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">socket_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sock)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        do_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        boost::system::error_code err;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        socket_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        auto</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shared_form_this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 给自己的引用次数+1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        socket_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">async_read_some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(readBuffer_, max_packet_len), </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">			[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](boost::system::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">error_code</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> transfered</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 希望回调函数调用时，socket依然存在，这里需要用智能指针延长该类的生命周期</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">				if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    do_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                do_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        auto</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shared_from_this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        socket_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">async_write_some</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(readBuffer_, max_packet_len),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            [</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](boost::system::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">error_code</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> transfered</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                    do_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                do_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    tcp::socket socket_;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    enum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">max_packet_len</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[max_packet_len];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">io_context</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">io_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">short</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acceptor_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(io_ctx, tcp::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">endpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">tcp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">v4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), port)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        acceptor_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">async_accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        	[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](boost::system::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">error_code</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, tcp::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">socket_sock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">err) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">					std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(sock)-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    tcp::acceptor acceptor_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    io_context io_ctx;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // tcp::acceptor accept_(io_ctx, 000);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    io_ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 阻塞等待，相当于reactor中的事件循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11))])}const g=t(o,[["render",A],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%912/","title":"Boost.Asio视频","lang":"zh-CN","frontmatter":{"description":"Boost.Asio视频 参考： （C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例 (1:38:46) 调研 - 跨平台网络库 调研 - 跨平台网络库 主要用于linux，事件回调 libevnet (用过) libev libuv libhv (用过) 异步IO boost.asio 同步io与异步io 接口上差异 同步i...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%912/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Boost.Asio视频"}],["meta",{"property":"og:description","content":"Boost.Asio视频 参考： （C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例 (1:38:46) 调研 - 跨平台网络库 调研 - 跨平台网络库 主要用于linux，事件回调 libevnet (用过) libev libuv libhv (用过) 异步IO boost.asio 同步io与异步io 接口上差异 同步i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Boost.Asio视频\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Boost.Asio视频","slug":"boost-asio视频","link":"#boost-asio视频","children":[{"level":2,"title":"调研 - 跨平台网络库","slug":"调研-跨平台网络库","link":"#调研-跨平台网络库","children":[{"level":3,"title":"调研 - 跨平台网络库","slug":"调研-跨平台网络库-1","link":"#调研-跨平台网络库-1","children":[]},{"level":3,"title":"同步io与异步io","slug":"同步io与异步io","link":"#同步io与异步io","children":[{"level":4,"title":"接口上差异","slug":"接口上差异","link":"#接口上差异","children":[]},{"level":4,"title":"系统 IO API","slug":"系统-io-api","link":"#系统-io-api","children":[]},{"level":4,"title":"网络模型","slug":"网络模型","link":"#网络模型","children":[]},{"level":4,"title":"库","slug":"库","link":"#库","children":[]},{"level":4,"title":"原理上差异","slug":"原理上差异","link":"#原理上差异","children":[]}]},{"level":3,"title":"boost.asio 两个命名空间","slug":"boost-asio-两个命名空间","link":"#boost-asio-两个命名空间","children":[]}]},{"level":2,"title":"开始","slug":"开始","link":"#开始","children":[{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"项目创建","slug":"项目创建","link":"#项目创建","children":[]}]}]}],"git":{},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/02. 网络/Boost.Asio 视频2/README.md","excerpt":"\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV12X4y187gd\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">（C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例</a> (1:38:46)</li>\\n</ul>\\n<h2>调研 - 跨平台网络库</h2>\\n<h3>调研 - 跨平台网络库</h3>\\n<ul>\\n<li>主要用于linux，事件回调\\n<ul>\\n<li>libevnet (用过)</li>\\n<li>libev</li>\\n<li>libuv</li>\\n<li>libhv (用过)</li>\\n</ul>\\n</li>\\n<li>异步IO\\n<ul>\\n<li>boost.asio</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/02. 网络/Boost.Asio 视频2/README.md","value":{"title":"02. 网络/","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/02. 网络/Boost.Asio 视频2/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{g as comp,y as data};
