import{_ as s,c as a,b as t,o as e}from"./app-BETEO2EF.js";const p={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="泛操作" tabindex="-1"><a class="header-anchor" href="#泛操作"><span>泛操作</span></a></h1><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>内存中的一个数据存储表示</p><h3 id="声明定义、赋值、使用" tabindex="-1"><a class="header-anchor" href="#声明定义、赋值、使用"><span>声明定义、赋值、使用</span></a></h3><p>由于有 默认初始化，这里不区分 声明与定义</p><p>main.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> age <span class="token builtin">int</span> 				<span class="token comment">// 变量声明</span>
    age <span class="token operator">=</span> <span class="token number">18</span>					<span class="token comment">// 变量赋值</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;age = &quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>	<span class="token comment">// 变量使用</span>
    
    <span class="token keyword">var</span> age2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> 			<span class="token comment">// 变量的声明和赋值可以合在一起</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他语法糖或特性" tabindex="-1"><a class="header-anchor" href="#其他语法糖或特性"><span>其他语法糖或特性</span></a></h3><p>main.go</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> num1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span>	<span class="token comment">// 声明并赋值</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>

<span class="token keyword">var</span> num2 <span class="token builtin">int</span>		<span class="token comment">// 自动初始化</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>

<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span>    	<span class="token comment">// 自动类型推导</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>

str2 <span class="token operator">:=</span> <span class="token string">&quot;hello&quot;</span>		<span class="token comment">// 省略var，注意不能忽略冒号</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>

<span class="token keyword">var</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3 <span class="token builtin">int</span>	<span class="token comment">// 多个变量声明</span>
<span class="token keyword">var</span> n4<span class="token punctuation">,</span> n5<span class="token punctuation">,</span> n6 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token number">7.8</span>
n7<span class="token punctuation">,</span> n8 <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;duck&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局与局部变量</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span><span class="token punctuation">(</span>					<span class="token comment">// 批量声明的语法糖 (引入)</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;unsafe&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>			<span class="token comment">// 全局变量</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>					<span class="token comment">// 批量声明的语法糖 (类型声明)</span>
    n9 <span class="token operator">=</span> <span class="token number">500</span>
    n10 <span class="token operator">=</span> <span class="token string">&quot;netty&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> n2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>		<span class="token comment">// 局部变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>个人吐槽：</p><p>说好的语言特点是只有一种写法，但写法有的是比其他语言少……而有的语法糖反而比其他语言还多了……。少掉的东西中：</p><p>部分是像 编译强制初始化这种是更根本的东西，</p><p>但大部分则是一些换行和空格这种仅编码风格的约束。有种设计者强制所有人共用同一个 <code>.clang-format</code> 或者 <code>eslint</code>，且不符合则不给编译通过，的这种感觉。 符合我平时的写法我会觉得早该这么做了，否则我就感觉设计者闲得蛋疼，加这种约束闲得没事干）</p></blockquote><p>下面是更详细的补充：</p><h4 id="自动初始化" tabindex="-1"><a class="header-anchor" href="#自动初始化"><span>自动初始化</span></a></h4><p>复习下：</p><p><strong>与其他语言不同</strong>：</p><blockquote><ul><li>有默认初始化 <ul><li>Java / Kotlin / Python / Swift / Go <ul><li>基本类型：默认初始化为零值</li><li>对象引用：默认初始化为空 (java为null，kotlin为null，python为None，swift为nil，go为nil)</li></ul></li><li>TypeScript/JavaScript： <ul><li>默认初始化为 undefined</li></ul></li></ul></li><li>强制初始化 <ul><li>Rust <ul><li>强制初始化，否则报错，不存在默认初始化的行为</li></ul></li></ul></li><li>无默认初始化 <ul><li>C/C++（<strong>这一类就只有C/C++了，hhhh</strong>） <ul><li>基本类型：无默认初始化，成员变量也是。使用这些变量是未定义行为，且无物理内存及虚拟内存对应的值是随机的</li><li>全局变量/静态变量：默认初始化为零值</li></ul></li></ul></li></ul></blockquote><p>Go的默认值：</p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>整数类型</td><td>0</td></tr><tr><td>浮点类型</td><td>0.0</td></tr><tr><td>布尔类型</td><td>false</td></tr><tr><td>字符串类型</td><td>&quot;&quot;</td></tr></tbody></table><h4 id="自动类型推导" tabindex="-1"><a class="header-anchor" href="#自动类型推导"><span>自动类型推导</span></a></h4><p><strong>与其他语言不同</strong>：</p><p>更类似于typescript语言，像C++是需要用auto关键字的</p><h4 id="初始化检查" tabindex="-1"><a class="header-anchor" href="#初始化检查"><span>初始化检查</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> n1 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">2.3</span>			<span class="token comment">// 编译错误，类型不符</span>
<span class="token keyword">var</span> n2 <span class="token builtin">int8</span> <span class="token operator">=</span> int12 <span class="token operator">+</span> <span class="token number">128</span>	<span class="token comment">// 编译错误，超出界限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="省略var写法-写法" tabindex="-1"><a class="header-anchor" href="#省略var写法-写法"><span>省略var写法 (:= 写法)</span></a></h4><h4 id="批量声明写法" tabindex="-1"><a class="header-anchor" href="#批量声明写法"><span>批量声明写法</span></a></h4><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>Go只有强制转换，没有隐式转换，哪怕小类型转大类型。</p><p>语法上 T(v) 就可以了，和其他语言类似，也会出现类型缩窄</p><h4 id="数字类型转化" tabindex="-1"><a class="header-anchor" href="#数字类型转化"><span>数字类型转化</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> n2 <span class="token builtin">float32</span> <span class="token operator">=</span> n1				<span class="token comment">// 报错</span>
<span class="token keyword">var</span> n2 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>	<span class="token comment">// 正确</span>

<span class="token keyword">var</span> n5 <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">var</span> n6 <span class="token builtin">int64</span> <span class="token operator">=</span> n5 <span class="token operator">+</span> <span class="token number">30</span>			<span class="token comment">// 报错</span>
<span class="token keyword">var</span> n6 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>n5<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span>	<span class="token comment">// 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数值与string-互相转化" tabindex="-1"><a class="header-anchor" href="#数值与string-互相转化"><span>数值与string 互相转化</span></a></h4><p>（字符串转化相关，详见 “模块库/字符串库”）</p><h4 id="类-接口的互转" tabindex="-1"><a class="header-anchor" href="#类-接口的互转"><span>类/接口的互转</span></a></h4><p>派生类转基类不需要额外转换，里氏替换原则。基类转派生类则需要类型转换。</p><p>同理，类转接口类型不需要额外转换，反过来则需要使用类型断言：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 通用语法</span>
<span class="token comment">// value：变量的值</span>
<span class="token comment">// ok：book类型</span>
<span class="token comment">// element：interface变量</span>
<span class="token comment">// T：断言类型</span>
value<span class="token punctuation">,</span> ok <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>

<span class="token comment">// 举例。将人转中国人</span>
chinese<span class="token punctuation">,</span> flag <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token punctuation">(</span>Chinese<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-占用内存打印" tabindex="-1"><a class="header-anchor" href="#类型-占用内存打印"><span>类型/占用内存打印</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;unsafe&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">28</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3的类型是 %T&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span>   <span class="token comment">// int</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 8 (Byte)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p><strong>与其他语言不同</strong>：</p><ul><li>Go的整除是向零而非向下取整</li><li>极大限制了C/C++/Java的++/--骚操作，只能单独一个表达式使用，且只能放在变量后面 （个人吐槽：对于学生来说好耶，但老程序员感觉这不是很爽）</li></ul><p>几乎和其他语言一样，这里没有三目运算符</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 1. 算数运算符</span>
<span class="token operator">+</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">++</span><span class="token punctuation">,</span> <span class="token operator">--</span>	<span class="token comment">// 相同点：整数除法也是整除，也有逻辑运算符也有短路</span>
<span class="token comment">// 2. 赋值运算符</span>
<span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">+=</span><span class="token punctuation">,</span> <span class="token operator">-=</span><span class="token punctuation">,</span> <span class="token operator">*=</span><span class="token punctuation">,</span> <span class="token operator">/=</span><span class="token punctuation">,</span> <span class="token operator">%=</span>
<span class="token comment">// 3. 关系运算符</span>
<span class="token operator">==</span><span class="token punctuation">,</span> <span class="token operator">!=</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">,</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;=</span><span class="token punctuation">,</span> <span class="token operator">&gt;=</span>
<span class="token comment">// 4. 逻辑运算符</span>
<span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token operator">||</span><span class="token punctuation">,</span> <span class="token operator">!</span>
<span class="token comment">// 5. 位运算符</span>
<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">|</span><span class="token punctuation">,</span> <span class="token operator">^</span>
<span class="token comment">// 6. 其他运算符</span>
<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优先级：（越靠前越优先，反正我也懒得记，不常用不记得的就加括号）</p><table><thead><tr><th>分类</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>后缀运算符 (伪单目)</td><td><code>()、[]、-&gt;</code></td><td>从左到右</td></tr><tr><td><strong>单目运算符</strong></td><td></td><td><strong>从右到左</strong></td></tr><tr><td>算数运算符 (乘除取余 &gt; 加减)</td><td></td><td>从左到右</td></tr><tr><td>位移运算符</td><td></td><td>从左到右</td></tr><tr><td>关系运算符</td><td></td><td>从左到右</td></tr><tr><td>相等/不相等</td><td></td><td>从左到右</td></tr><tr><td>按位运算 (与 &gt; 异或 &gt; 或)</td><td></td><td>从左到右</td></tr><tr><td>逻辑运算符 (与 &gt; 或，非归类到单目)</td><td></td><td>从左到右</td></tr><tr><td>赋值运算符</td><td></td><td><strong>从右到左</strong></td></tr><tr><td>逗号运算符</td><td></td><td>从左到右</td></tr></tbody></table>`,47)]))}const c=s(p,[["render",o],["__file","01_泛操作.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01_%E6%B3%9B%E6%93%8D%E4%BD%9C.html","title":"泛操作","lang":"zh-CN","frontmatter":{"description":"泛操作 变量 内存中的一个数据存储表示 声明定义、赋值、使用 由于有 默认初始化，这里不区分 声明与定义 main.go 其他语法糖或特性 main.go 全局与局部变量 个人吐槽： 说好的语言特点是只有一种写法，但写法有的是比其他语言少……而有的语法糖反而比其他语言还多了……。少掉的东西中： 部分是像 编译强制初始化这种是更根本的东西， 但大部分则是...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01_%E6%B3%9B%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"泛操作"}],["meta",{"property":"og:description","content":"泛操作 变量 内存中的一个数据存储表示 声明定义、赋值、使用 由于有 默认初始化，这里不区分 声明与定义 main.go 其他语法糖或特性 main.go 全局与局部变量 个人吐槽： 说好的语言特点是只有一种写法，但写法有的是比其他语言少……而有的语法糖反而比其他语言还多了……。少掉的东西中： 部分是像 编译强制初始化这种是更根本的东西， 但大部分则是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"泛操作","slug":"泛操作","link":"#泛操作","children":[{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"声明定义、赋值、使用","slug":"声明定义、赋值、使用","link":"#声明定义、赋值、使用","children":[]},{"level":3,"title":"其他语法糖或特性","slug":"其他语法糖或特性","link":"#其他语法糖或特性","children":[{"level":4,"title":"自动初始化","slug":"自动初始化","link":"#自动初始化","children":[]},{"level":4,"title":"自动类型推导","slug":"自动类型推导","link":"#自动类型推导","children":[]},{"level":4,"title":"初始化检查","slug":"初始化检查","link":"#初始化检查","children":[]},{"level":4,"title":"省略var写法 (:= 写法)","slug":"省略var写法-写法","link":"#省略var写法-写法","children":[]},{"level":4,"title":"批量声明写法","slug":"批量声明写法","link":"#批量声明写法","children":[]}]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[{"level":4,"title":"数字类型转化","slug":"数字类型转化","link":"#数字类型转化","children":[]},{"level":4,"title":"数值与string 互相转化","slug":"数值与string-互相转化","link":"#数值与string-互相转化","children":[]},{"level":4,"title":"类/接口的互转","slug":"类-接口的互转","link":"#类-接口的互转","children":[]}]}]},{"level":2,"title":"类型/占用内存打印","slug":"类型-占用内存打印","link":"#类型-占用内存打印","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.3,"words":1291},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/02_数据+算法/01_泛操作.md","excerpt":"\\n<h2>变量</h2>\\n<p>内存中的一个数据存储表示</p>\\n<h3>声明定义、赋值、使用</h3>\\n<p>由于有 默认初始化，这里不区分 声明与定义</p>\\n<p>main.go</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">var</span> age <span class=\\"token builtin\\">int</span> \\t\\t\\t\\t<span class=\\"token comment\\">// 变量声明</span>\\n    age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">18</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 变量赋值</span>\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"age = \\"</span><span class=\\"token punctuation\\">,</span> age<span class=\\"token punctuation\\">)</span>\\t<span class=\\"token comment\\">// 变量使用</span>\\n    \\n    <span class=\\"token keyword\\">var</span> age2 <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">;</span> \\t\\t\\t<span class=\\"token comment\\">// 变量的声明和赋值可以合在一起</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{c as comp,r as data};
