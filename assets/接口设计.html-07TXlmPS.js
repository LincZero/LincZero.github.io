import{_ as n,c as t,e as a,o as l}from"./app-DEUP2Tjk.js";const i={};function h(p,e){return l(),t("div",null,e[0]||(e[0]=[a('<h1 id="接口设计" tabindex="-1"><a class="header-anchor" href="#接口设计"><span>接口设计</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="接口设计-1" tabindex="-1"><a class="header-anchor" href="#接口设计-1"><span>接口设计</span></a></h1><h2 id="接口设计6大原则" tabindex="-1"><a class="header-anchor" href="#接口设计6大原则"><span>接口设计6大原则</span></a></h2><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h3><p>所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。</p><p>而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。</p><p>通俗的说，即一个类只负责一项职责，将一组相关性很高的函数、数据封装到一个类中。</p><h3 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则"><span>开闭原则</span></a></h3><p>对于扩展是开放的，这意味着模块的行为是可以扩展的。当应用的需求改变时，我们可以对模块进行扩展，使其具有满足那些改变的新行为。 对于修改是关闭的，对模块行为进行扩展时，不必改动模块的源代码。</p><p>通俗的说，尽量通过扩展的方式实现系统的升级维护和新功能添加，而不是通过修改已有的源代码。</p><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h3><p>使用“抽象(Abstraction)”和“多态(Polymorphism)”将设计中的静态结构改为动态结构，维持设计的封闭性。任何基类可以出现的地方，子类一定可以出现。</p><p>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立。在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p><h3 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则"><span>依赖倒置原则</span></a></h3><p>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。 程序要依赖于抽象接口，不要依赖于具体实现。</p><p>简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合（各个模块之间相互传递的参数声明为抽象类型，而不是声明为具体的实现类）。</p><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h3><p>一个类对另一个类的依赖应该建立在最小的接口上。其原则是将非常庞大的、臃肿的接口拆分成更小的更具体的接口。</p><h3 id="迪米特原则" tabindex="-1"><a class="header-anchor" href="#迪米特原则"><span>迪米特原则</span></a></h3><p>又叫作最少知识原则，就是说一个对象应当对其他对象有尽可能少的了解。</p><p>通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，不关心被耦合或调用的类的内部实现，只负责调用你提供的方法。</p>',22)]))}const o=n(i,[["render",h],["__file","接口设计.html.vue"]]),s=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/ZOther/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.html","title":"接口设计","lang":"zh-CN","frontmatter":{"description":"接口设计 目录 接口设计 接口设计6大原则 单一职责原则 所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。 而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。 通俗的说，即一个类只负责一项职责，将一组相关性很高的函数、数据封装到一个类中。 开闭原则 对于扩展是开放的，这意味着模块的行为是可以扩展的...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/ZOther/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"接口设计"}],["meta",{"property":"og:description","content":"接口设计 目录 接口设计 接口设计6大原则 单一职责原则 所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。 而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。 通俗的说，即一个类只负责一项职责，将一组相关性很高的函数、数据封装到一个类中。 开闭原则 对于扩展是开放的，这意味着模块的行为是可以扩展的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"接口设计","slug":"接口设计","link":"#接口设计","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"接口设计","slug":"接口设计-1","link":"#接口设计-1","children":[{"level":2,"title":"接口设计6大原则","slug":"接口设计6大原则","link":"#接口设计6大原则","children":[{"level":3,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":3,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":3,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":3,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]},{"level":3,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":3,"title":"迪米特原则","slug":"迪米特原则","link":"#迪米特原则","children":[]}]}]}],"git":{},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/ZOther/接口设计.md","excerpt":"\\n<h1>目录</h1>\\n<h1>接口设计</h1>\\n<h2>接口设计6大原则</h2>\\n<h3>单一职责原则</h3>\\n<p>所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。</p>\\n<p>而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。</p>\\n<p>通俗的说，即一个类只负责一项职责，将一组相关性很高的函数、数据封装到一个类中。</p>\\n<h3>开闭原则</h3>\\n<p>对于扩展是开放的，这意味着模块的行为是可以扩展的。当应用的需求改变时，我们可以对模块进行扩展，使其具有满足那些改变的新行为。 对于修改是关闭的，对模块行为进行扩展时，不必改动模块的源代码。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/ZOther/接口设计.md","value":{"title":"接口设计","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/ZOther/接口设计.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,s as data};
