import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-wsUEcXLu.js";const e={},p=t(`<h1 id="rust字符类型" tabindex="-1"><a class="header-anchor" href="#rust字符类型"><span>Rust字符类型</span></a></h1><h2 id="两种字符串" tabindex="-1"><a class="header-anchor" href="#两种字符串"><span>两种字符串</span></a></h2><p>Rust 语言提供了两种字符串</p><ul><li>Rust 核心内置的数据类型 <code>&amp;str</code>。字符串字面量，底层实现是 切片 。</li><li>Rust 标准库中的一个 公开 <code>pub</code> 结构体。字符串对象 <code>String</code>。</li></ul><h2 id="类型-字符串字面量-内置" tabindex="-1"><a class="header-anchor" href="#类型-字符串字面量-内置"><span>类型 - 字符串字面量 (内置)</span></a></h2><h3 id="字符串字面量-字符串切片" tabindex="-1"><a class="header-anchor" href="#字符串字面量-字符串切片"><span>字符串字面量 (字符串切片)</span></a></h3><p>字符串字面量的核心代码可以在模块 std::str 中找到。Rust 中的字符串字面量被称之为 字符串切片。因为它的底层实现是 切片。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> lesson<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字面量 &amp;str 就是在 编译时 就知道其值的字符串类型，它也是字符的集合，被硬编码赋值给一个变量。</p><p>字符串字面量模式是 <strong>静态</strong> 的，所以，字符串字面量从创建时开始会一直保存到程序结束。</p><h2 id="类型-字符串对象-标准库" tabindex="-1"><a class="header-anchor" href="#类型-字符串对象-标准库"><span>类型 - 字符串对象 (标准库)</span></a></h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><p>字符串对象并不是 Rust 核心内置的数据类型，它只是<strong>标准库</strong>中的一个 公开 pub 的结构体。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符串对象是使用 UTF-8 作为底层数据编码格式，长度可变的集合。</p><p>字符串对象在 <strong>堆</strong> heap 中分配，可以在运行时提供字符串值以及相应的操作方法。</p><h3 id="字符串对象常用方法" tabindex="-1"><a class="header-anchor" href="#字符串对象常用方法"><span>字符串对象常用方法</span></a></h3><h4 id="new-创建" tabindex="-1"><a class="header-anchor" href="#new-创建"><span>new() 创建</span></a></h4><p>创建一个新的字符串对象</p><p>新建字符串对象</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 创建一个新的空字符串,它是静态方法。</span>
<span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token comment">// 从具体的字符串字面量创建字符串对象。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;面向加薪学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;s1:{}, s1-len:{}&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 s1:, s1-len:0</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;s2:{}, s2-len:{}&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 s2:面向加薪学习, s2-len:18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="push-str-追加" tabindex="-1"><a class="header-anchor" href="#push-str-追加"><span>push_str() 追加</span></a></h4><p>在字符串末尾追加字符串</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s3<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 输出 Go语言极简一本通</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="push-追加" tabindex="-1"><a class="header-anchor" href="#push-追加"><span>push() 追加</span></a></h4><p>是在原字符上追加字符，而不是返回一个新的字符串</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;O&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;K&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 OK</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="replace-替换" tabindex="-1"><a class="header-anchor" href="#replace-替换"><span>replace() 替换</span></a></h4><p>指定字符串子串替换成另一个字符串</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;面向加薪学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;面向加薪学习&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;www.go-edu.cn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 www.go-edu.cn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="len-获取长度" tabindex="-1"><a class="header-anchor" href="#len-获取长度"><span>len() 获取长度</span></a></h4><p>返回字符串中的 总字节数。该方法会统计包括 制表符 \\t、空格 \`\`、回车 \\r、换行 \\n 和回车换行 \\r\\n 等等。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s5 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;面向加薪学习 www.go-edu.cn\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;length is {}&quot;</span><span class="token punctuation">,</span> s5<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="to-string-字面量转字符串对象" tabindex="-1"><a class="header-anchor" href="#to-string-字面量转字符串对象"><span>to_string() 字面量转字符串对象</span></a></h4><p>将字符串转换为字符串对象，方便以后可以有更多的操作。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s6 <span class="token operator">=</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 从0到Go语言微服务架构师</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as-str-字符串对象转字面量" tabindex="-1"><a class="header-anchor" href="#as-str-字符串对象转字面量"><span>as_str() 字符串对象转字面量</span></a></h4><p>返回一个字符串对象的 字符串 字面量。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show_name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;充电科目:{}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> s7 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">show_name</span><span class="token punctuation">(</span>s7<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 输出 充电科目:Go语言微服务架构核心22讲</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="trim-去除空白符" tabindex="-1"><a class="header-anchor" href="#trim-去除空白符"><span>trim() 去除空白符</span></a></h4><p>去除字符串头尾的空白符。空白符是指 制表符 \\t、空格 \`\`、回车 \\r、换行 \\n 和回车换行 \\r\\n 等等。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s8 <span class="token operator">=</span> <span class="token string">&quot; \\tGo语言极简一本通\\tGo语言微服务架构核心22讲 \\r\\n从0到Go语言微服务架构师\\r\\n     &quot;</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;length is {}&quot;</span><span class="token punctuation">,</span> s8<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 输出 length is 103</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;length is {}&quot;</span><span class="token punctuation">,</span> s8<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 length is 94</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;s8:{}&quot;</span><span class="token punctuation">,</span>s8<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出</span>
s8<span class="token punctuation">:</span>     <span class="token class-name">Go</span>语言极简一本通        <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="split-分隔" tabindex="-1"><a class="header-anchor" href="#split-分隔"><span>split() 分隔</span></a></h4><p>将字符串根据某些指定的 字符串子串 分割，返回分割后的字符串子串组成的切片上的迭代器。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s9 <span class="token operator">=</span> <span class="token string">&quot;Go语言极简一本通、Go语言微服务架构核心22讲、从0到Go语言微服务架构师&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> s9<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">&#39;、&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;充电科目: {}&quot;</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token comment">// 充电科目: Go语言极简一本通</span>
<span class="token comment">// 充电科目: Go语言微服务架构核心22讲</span>
<span class="token comment">// 充电科目: 从0到Go语言微服务架构师</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chars-转字符数组" tabindex="-1"><a class="header-anchor" href="#chars-转字符数组"><span>chars() 转字符数组</span></a></h4><p>将一个字符串打散为所有字符组成的数组</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s10 <span class="token operator">=</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> s10<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;字符: {}&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
字符<span class="token punctuation">:</span> 从
字符<span class="token punctuation">:</span> <span class="token number">0</span>
字符<span class="token punctuation">:</span> 到
字符<span class="token punctuation">:</span> <span class="token class-name">G</span>
字符<span class="token punctuation">:</span> o
字符<span class="token punctuation">:</span> 语
字符<span class="token punctuation">:</span> 言
字符<span class="token punctuation">:</span> 微
字符<span class="token punctuation">:</span> 服
字符<span class="token punctuation">:</span> 务
字符<span class="token punctuation">:</span> 架
字符<span class="token punctuation">:</span> 构
字符<span class="token punctuation">:</span> 师
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span><code>+</code> 字符串拼接</span></a></h4><p>内部实现是重写了 add() 方法。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span> <span class="token punctuation">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回新的字符串对象。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> s11 <span class="token operator">=</span> <span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s12 <span class="token operator">=</span> <span class="token string">&quot; 欢喜&quot;</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> s11 <span class="token operator">+</span> <span class="token operator">&amp;</span>s12<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 Go语言极简一本通 欢喜</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","03. 字符类型.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html","title":"Rust字符类型","lang":"zh-CN","frontmatter":{"description":"Rust字符类型 两种字符串 Rust 语言提供了两种字符串 Rust 核心内置的数据类型 &str。字符串字面量，底层实现是 切片 。 Rust 标准库中的一个 公开 pub 结构体。字符串对象 String。 类型 - 字符串字面量 (内置) 字符串字面量 (字符串切片) 字符串字面量的核心代码可以在模块 std::str 中找到。Rust 中的字...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust字符类型"}],["meta",{"property":"og:description","content":"Rust字符类型 两种字符串 Rust 语言提供了两种字符串 Rust 核心内置的数据类型 &str。字符串字面量，底层实现是 切片 。 Rust 标准库中的一个 公开 pub 结构体。字符串对象 String。 类型 - 字符串字面量 (内置) 字符串字面量 (字符串切片) 字符串字面量的核心代码可以在模块 std::str 中找到。Rust 中的字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust字符类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust字符类型","slug":"rust字符类型","link":"#rust字符类型","children":[{"level":2,"title":"两种字符串","slug":"两种字符串","link":"#两种字符串","children":[]},{"level":2,"title":"类型 - 字符串字面量 (内置)","slug":"类型-字符串字面量-内置","link":"#类型-字符串字面量-内置","children":[{"level":3,"title":"字符串字面量 (字符串切片)","slug":"字符串字面量-字符串切片","link":"#字符串字面量-字符串切片","children":[]}]},{"level":2,"title":"类型 - 字符串对象 (标准库)","slug":"类型-字符串对象-标准库","link":"#类型-字符串对象-标准库","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"字符串对象常用方法","slug":"字符串对象常用方法","link":"#字符串对象常用方法","children":[{"level":4,"title":"new() 创建","slug":"new-创建","link":"#new-创建","children":[]},{"level":4,"title":"push_str() 追加","slug":"push-str-追加","link":"#push-str-追加","children":[]},{"level":4,"title":"push() 追加","slug":"push-追加","link":"#push-追加","children":[]},{"level":4,"title":"replace() 替换","slug":"replace-替换","link":"#replace-替换","children":[]},{"level":4,"title":"len() 获取长度","slug":"len-获取长度","link":"#len-获取长度","children":[]},{"level":4,"title":"to_string() 字面量转字符串对象","slug":"to-string-字面量转字符串对象","link":"#to-string-字面量转字符串对象","children":[]},{"level":4,"title":"as_str() 字符串对象转字面量","slug":"as-str-字符串对象转字面量","link":"#as-str-字符串对象转字面量","children":[]},{"level":4,"title":"trim() 去除空白符","slug":"trim-去除空白符","link":"#trim-去除空白符","children":[]},{"level":4,"title":"split() 分隔","slug":"split-分隔","link":"#split-分隔","children":[]},{"level":4,"title":"chars() 转字符数组","slug":"chars-转字符数组","link":"#chars-转字符数组","children":[]},{"level":4,"title":"+ 字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.11,"words":1233},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Rust/学习/02. 数据+算法/03. 字符类型.md","excerpt":"\\n<h2>两种字符串</h2>\\n<p>Rust 语言提供了两种字符串</p>\\n<ul>\\n<li>Rust 核心内置的数据类型 <code>&amp;str</code>。字符串字面量，底层实现是 切片 。</li>\\n<li>Rust 标准库中的一个 公开 <code>pub</code> 结构体。字符串对象 <code>String</code>。</li>\\n</ul>\\n<h2>类型 - 字符串字面量 (内置)</h2>\\n<h3>字符串字面量 (字符串切片)</h3>\\n<p>字符串字面量的核心代码可以在模块 std::str 中找到。Rust 中的字符串字面量被称之为 字符串切片。因为它的底层实现是 切片。</p>","autoDesc":true}');export{d as comp,k as data};
