import{_ as i,c as e,e as t,o as a}from"./app-DnpufS1x.js";const n={};function s(r,l){return a(),e("div",null,l[0]||(l[0]=[t(`<h1 id="_01-编程语言" tabindex="-1"><a class="header-anchor" href="#_01-编程语言"><span>01. 编程语言</span></a></h1><p>预备知识</p><h2 id="学习资料、查阅文档" tabindex="-1"><a class="header-anchor" href="#学习资料、查阅文档"><span>学习资料、查阅文档</span></a></h2><h3 id="进度笔记" tabindex="-1"><a class="header-anchor" href="#进度笔记"><span>进度笔记</span></a></h3><ul><li>《C++ Primer Plus 第六版 中文版》 <ul><li>书理解至577页（不包含跳过部分，详见书本剪角）</li><li>笔记更新至518页</li></ul></li><li>《Effective C++》&amp;《深度探索C++对象模型》 <ul><li>还没看</li></ul></li></ul><h3 id="文档资源" tabindex="-1"><a class="header-anchor" href="#文档资源"><span>文档资源</span></a></h3><ul><li><mark>[微软官网文档（中文）](https://docs.microsoft.com/zh-cn/)</mark></li><li><a href="https://www.runoob.com/cplusplus/cpp-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟 - 教程</a></li><li><a href="https://www.runoob.com/try/runcode.php?filename=helloworld&amp;type=cpp" target="_blank" rel="noopener noreferrer">菜鸟 - 在线工具</a></li><li><a href="https://c.runoob.com/compile/11" target="_blank" rel="noopener noreferrer">菜鸟 - 在线工具（多语言）</a></li><li><a href="https://www.w3cschool.cn/cpp/" target="_blank" rel="noopener noreferrer">W3CSchool - 教程</a></li><li>https://devdocs.io/cpp/（全英，有二级大纲）</li><li><a href="http://c.biancheng.net/view/2228.html" target="_blank" rel="noopener noreferrer">C语言中文网的C++</a></li><li>外网 <ul><li>https://en.wikipedia.org/wiki/Standard_Template_Library，Dinkumware为C++标准库提供了完整的参考文档</li><li>http://en.cppreference.com/w/，SGI提供了全面的STL编程指南（该网站有中文版）</li></ul></li></ul><h3 id="学习用书" tabindex="-1"><a class="header-anchor" href="#学习用书"><span>学习用书</span></a></h3><p>（By CodeSheep推荐）</p><table><thead><tr><th>顺序</th><th>书名</th><th>补充</th></tr></thead><tbody><tr><td>第一本</td><td>《Essential C++》</td><td>适合由c过渡到c++</td></tr><tr><td>第二本</td><td>《C++ Primer第四版》</td><td>【圣经级别】内容很全，但不深<br><strong>不是第六版plus，不是同一本书！</strong></td></tr><tr><td>第三本</td><td>《Effeetive C++》</td><td>55个改善程序</td></tr><tr><td>第四本</td><td>《More Effeetive C++》</td><td>35个改善程序</td></tr><tr><td>第五本</td><td>《C++ 标准程序库》</td><td></td></tr><tr><td>第六本</td><td>《深入探索C++对象模型》</td><td>难</td></tr></tbody></table><p>《C++ Primer Plus第六版》书评：</p><ul><li><p>内容挺新的，比教科书新多了，各种新特性</p></li><li><p>大量文字描写类，文字绕口，如p266标注处</p><p>有点类似于文字打乱不影响阅读那种，但前提是你知道他本来的意思，而不是一种新知识</p><p>有时你本来懂的，都被他的文字描述给绕晕了，如p440第二点的第一句，如p455倒数第4段的“无效”和“补救”</p></li></ul><h3 id="深入资料" tabindex="-1"><a class="header-anchor" href="#深入资料"><span>深入资料</span></a></h3><ul><li>《深入探索C++对象模型》，pdf版</li><li><a href="https://www.bilibili.com/video/BV1Rp4y1n7fb" target="_blank" rel="noopener noreferrer">【Bilibili】C++新标准-C++11/14</a>，侯捷老师的课（<strong>侯捷C++系列课程</strong>，多人推荐）（主要参考）（目前看到P15）</li><li><a href="https://www.bilibili.com/video/BV1BX4y1G7bX?p=10" target="_blank" rel="noopener noreferrer">【Bilibili】C++标准库(STL)与泛型编程</a>，侯捷老师的课（目前看到P10）</li><li>《高速上手C++11 14 17》，pdf版</li><li>《C++并发编程实战（中文版）》，pdf版，（英名《C++ Concurrency In Action》）</li><li><a href="https://www.bilibili.com/video/BV1Yb411L7ak" target="_blank" rel="noopener noreferrer">【Bilibili】c++11并发与多线程视频课程</a>（评价：啰嗦、全面但不深，乱糟糟的，最好配合点弹幕，特别是P5）（目前看到P10）</li></ul><h2 id="语言本身" tabindex="-1"><a class="header-anchor" href="#语言本身"><span>语言本身</span></a></h2><h3 id="语言风格、书写风格" tabindex="-1"><a class="header-anchor" href="#语言风格、书写风格"><span>语言风格、书写风格</span></a></h3><p>基本同C</p><p>评价：</p><ul><li><p>工具多而杂</p><ul><li><p>特别是类那一块，非常非常非常多的零散知识和零散语法</p><p>比如：类成员函数、this指针、类作用域、explicit限定等等等等</p></li></ul></li><li><p>有很多“专门解决方案”（“缺陷补救方案”）（“缺陷补丁”）</p><ul><li><p>即为解决一个零碎的小问题而专门引用一种新语法或关键字来解决</p><p>比如：explicit、虚基类</p></li></ul></li><li><p>C++的非默认原则</p><ul><li><p>不需要用的东西不提供给你，不进行默认设置</p><p>这导致了写的时候经常要根据不同情况增加不同的关键字或切换其他语法</p></li><li><p>比如：虚函数不是默认的方式，虚基类不是默认的方式</p></li><li><p>C++的理念是只有在需要的情况下使用动态联编，其他情况一律使用静态联编</p><p>它并不像C语言那样通常使用静态联编，也不像动态类型的脚本语言那样可以随意使用动态联编</p><p>它是时用时不用，而使用的时候又需要使用一套与原来不同的新的写法</p></li></ul></li><li><p>非常多能交叉的东西</p><ul><li><p>比如指针、数组、new、类等都能和其他一堆东西结合，形成一些复合的东西，衍生物非常非常多</p><p>主要是有的东西不是单纯的结合罢了，结合的过程当中还会诞生新的语法</p><p>比如：作用域为类的常量、静态类成员函数</p></li></ul></li><li><p>语言设计的不对称感非常强</p><ul><li><p>不对称，导致不美观，而且很别扭</p></li><li><p>比如：同样是定义<code>A+x</code>的行为，当<code>A+x</code>和<code>x+A</code>是两种不同的写法</p><ul><li><p>前者使用<code>成员函数+operator</code>，后者使用<code>非成员函数+友元函数+operator</code></p><p>（虽然前者也可以写成后面一种形式）</p></li></ul></li><li><p>比如：同样是定义类型转换的行为，<code>A&lt;-x</code>和<code>x&lt;-A</code>是两种不同的写法</p><ul><li>前者使用<code>接受单参数的构造函数</code>，后者使用<code>转换函数</code>（<code>operator typeName</code>）</li></ul></li></ul></li><li><p>非常多重载的关键字（因为不想引入新关键字），让人傻傻捋不清</p><ul><li>auto <ul><li><s>自动变量</s></li><li>自动类型</li></ul></li><li>static <ul><li>静态变量</li><li>在类声明可用来表示静态类成员函数</li><li>在类声明也可以用来表示作用域为类的常量，如<code>static const int Months = 12;</code></li></ul></li><li>class <ul><li>声明类，如<code>class A {...}</code></li><li>模板，如<code>template &lt;class Type&gt;</code></li><li>作用域内枚举（C++11），如<code>enum class egg {...}</code></li></ul></li><li>0 <ul><li>0</li><li>空指针（0、NULL、nullptr）</li></ul></li><li>virtual <ul><li>虚函数、纯虚函数</li><li>虚基类</li></ul></li></ul></li><li><p>或者同一个工具，非常多的用法</p><ul><li>作用域解析符::（或叫类限定符） <ul><li>局部使用被隐藏了的全局版本</li><li>使用对应命名空间版本的函数</li><li>继承时显示选择基类/派生类版本的方法</li><li>多重继承时选择使用哪个基类版本的方法</li></ul></li></ul></li></ul><h2 id="语言简介、特点、简史" tabindex="-1"><a class="header-anchor" href="#语言简介、特点、简史"><span>语言简介、特点、简史</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><ul><li><p>是什么</p><ul><li><p>C++是在C语言基础上开发的一种集</p><ul><li><strong>面向对象</strong>编程（OOP）</li><li><strong>泛型</strong>编程</li><li><strong>过程化</strong>编程</li></ul><p>于一体的编程语言，是C语言的<strong>超集</strong></p></li></ul></li><li><p>新增特性：</p><ul><li><strong>类和对象</strong>（面向对象）</li><li>继承（面向对象）</li><li>多态、虚函数和RTTI（运行阶段类型识别）（面向对象）</li><li>函数重载</li><li>引用变量</li><li><strong>泛型</strong>（独立于类型的）编程，这种技术是由模板和标准模板库（STL）提供的</li><li>处理错误条件的异常机制</li><li>管理函数、类和变量名的名称空间</li></ul></li></ul><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><h3 id="简史" tabindex="-1"><a class="header-anchor" href="#简史"><span>简史</span></a></h3><p>与C一样，是在贝尔实验室诞生的，作者<em>Bjarne Stroustrup</em>，他的权威参考手册《The C++ Programming Language》和《The design and Evolution of C++》，他的个人网站：http://www.research.att.com/-bs/</p><p>C语言的超集，注重实用价值而不是意识形态方法</p><p>在C++获得一定程度的成功后，<em>Stroustrup</em>才添加模板，使得泛型编程称为可能</p><h3 id="史记" tabindex="-1"><a class="header-anchor" href="#史记"><span>史记</span></a></h3><p>1983年8月，第一个C++实现投入使用（所以我喜欢说1983年C++开了天界） 1983年12月，Rick Mascitti建议命名为CPlusPlus，即C++。 1985年2月，第一个C++ Release E发布。 10月，CFront的第一个商业发布，CFront Release 1.0。 10月，Bjarne博士完成了经典巨著The C++ Programming Language第一版 1986年11月，C++第一个商业移植CFront 1.1,Glockenspiel。 1987年2月，CFront Release 1.2发布。 11月，第一个USENIX C++会议在新墨西哥州举行。 1988年10月，第一次USENIX C++实现者工作会议在科罗拉多州举行。 1989年12月，ANSI X3J16在华盛顿组织会议。 1990年3月，第一次ANSI X3J16技术会议在新泽西州召开． 　　　5月，C++的又一个传世经典ARM诞生。 　　　　7月，模板被加入。 　　　　11月，异常被加入。 1991年6月，The C++ Programming Language第二版完成。 　　　　　6月，第一次ISO WG21会议在瑞典召开。 　　　　10月，CFront Release 3.0发布。 1993年3月，运行时类型识别在俄勒冈州被加入。 　 　　　7月，名字空间在德国慕尼黑被加入。 1994年8月，<strong>ANSI/ISO</strong>委员会草案登记。 1997年7月，The C++ Programming Language第三版完成。 　　　　10月，ISO标准通过表决被接受 1998年11月，<strong>ISO</strong>标准被批准。(ISO/IEC 14882-1998)</p><h2 id="语言标准、新增特性、版本变迁" tabindex="-1"><a class="header-anchor" href="#语言标准、新增特性、版本变迁"><span>语言标准、新增特性、版本变迁</span></a></h2><h3 id="语言标准准" tabindex="-1"><a class="header-anchor" href="#语言标准准"><span>语言标准准</span></a></h3><ul><li>C语言：由Dennis M. Ritchie在1973年设计和实现</li><li>K&amp;R C：C语言标准 1978年Ritchie和Bell实验室的另一位程序专家Kernighan合写了著名的《The C Programming Language》，将C语言推向全世界，根据这本书定义的C语言后来被人们称作K&amp;R C</li><li>ANSI C：C语言标准 随着C语言使用得越来越广泛，人们日益强烈地要求对C语言进行标准化。美国国家标准局(ANSI)1988年10月颁布ANSI标准X3.159-1989(即ANSI C标准), 国际标准(ISO)1989年左右采纳 ANSI C标准,定义为ISO/IEC 9899:1990</li><li>C++98：C++标准（1998年）</li><li>C++11：C++标准（2011年）</li></ul><h3 id="新增特性" tabindex="-1"><a class="header-anchor" href="#新增特性"><span>新增特性</span></a></h3><p>此处略</p><h3 id="版本变迁" tabindex="-1"><a class="header-anchor" href="#版本变迁"><span>版本变迁</span></a></h3><p>由C而来，是C的超集</p><h2 id="项目创建、环境安装、开发工具" tabindex="-1"><a class="header-anchor" href="#项目创建、环境安装、开发工具"><span>项目创建、环境安装、开发工具</span></a></h2><p>略</p><h2 id="helloworld、基础知识" tabindex="-1"><a class="header-anchor" href="#helloworld、基础知识"><span>HelloWorld、基础知识</span></a></h2><h3 id="helloworld" tabindex="-1"><a class="header-anchor" href="#helloworld"><span>HelloWorld</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 				// 预处理编译指令</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 							// 函数头（函数 = 返回类型 + 函数名 + 形参列表/参数列表 + 函数体）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">									// 函数体（{}包裹的部分）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	// 【写法1】C++，打印</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // using namespace std;			// 【写法2】using编译指令（使用命名空间）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // cout &lt;&lt; &quot;Hello World!\\n&quot;; 	// 【写法2】C++，打印</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // printf(&quot;Hello World!&quot;); 		// 【写法3】C语言，&lt;stdio.h&gt;中的printf依然能用</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						// 返回值，结束函数（main函数不加也行，其他必须加）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h3><h4 id="main-函数-与c不同" tabindex="-1"><a class="header-anchor" href="#main-函数-与c不同"><span>main()函数（与C不同）</span></a></h4><ol><li>作为接口的函数头</li><li>为什么main()不能使用其他名称</li><li>main的返回类型：C可以省略，而C++不可以</li></ol><h4 id="变量声明-与c不同" tabindex="-1"><a class="header-anchor" href="#变量声明-与c不同"><span>变量声明（与C不同）</span></a></h4><p><strong>声明风格 - 空行</strong>：用空行将声明语句与程序其他部分分开，C++不用</p><p><strong>声明风格 - 位置</strong>：C或Pascal通常在函数或过程开始位置声明，C++没有这种限制，只需在使用前声明</p><p>==（C语言的C99新规范也可以在中间声明了）==以前学校用VC++6.0来教的编译器好像不支持，垃圾学校</p><h4 id="c-注释-与c不同" tabindex="-1"><a class="header-anchor" href="#c-注释-与c不同"><span>C++注释（与C不同）</span></a></h4><ul><li><p>C风格注释<code>/**/</code></p></li><li><p>C++风格注释<code>//</code></p></li><li><p>虽然C/C++都能用两种注释</p></li><li><p>注释补充：<code>//!</code></p><blockquote><p>//后面的确全是注释，但//!的含义和C++语法无关，是程序员约定俗成的：表示这一行语句会引发编译错误。</p><p>在Codeblocks IDE中，被//注释掉的语句会被冲蚀，而//!注释掉的语句则会高亮，以引起程序员的警惕。</p></blockquote></li></ul><h4 id="c-预处理器和iostream文件" tabindex="-1"><a class="header-anchor" href="#c-预处理器和iostream文件"><span>C++预处理器和iostream文件</span></a></h4><p>典型的预处理器操作：在源代码被编译之前，替换或添加文本（这里将iostream文件添加到程序中）</p><p>使用cin和cout进行输入和输出的程序必须包含文件iostream</p><h4 id="头文件名-与c不同" tabindex="-1"><a class="header-anchor" href="#头文件名-与c不同"><span>头文件名（与C不同）</span></a></h4><p><strong>头文件命名约定</strong>：如表。去掉h<strong>不只是形式上的变化，没有h的头文件可以包含名称空间</strong></p><table><thead><tr><th>头文件类型</th><th>约定</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>C++旧式风格</td><td>.h结尾</td><td>iostream.h</td><td>C++可用（话说现在好像也不能用了）</td></tr><tr><td>C旧式风格</td><td>.h结尾</td><td>math.h</td><td>C、C++可用</td></tr><tr><td>C++新式风格</td><td>没有扩展名</td><td>iostream</td><td>C++可用，使用<code>namespace std</code></td></tr><tr><td>C转换为C++</td><td>加上前缀c，没有扩展名</td><td>cmatch</td><td>C++可用，可以使用不是C的特性，如<code>namespace std</code></td></tr></tbody></table><h4 id="名称空间-与c不同" tabindex="-1"><a class="header-anchor" href="#名称空间-与c不同"><span>名称空间（与C不同）</span></a></h4><p><mark>C++新特性，C没有</mark>，优点：让编写大型程序以及将多个现有代码组合起来时更容易，有助于组织程序</p><p>using编译指令，现在接受，等以后（第9章）再理解，以免一头雾水</p><ul><li><p><strong>作用举例</strong>：使用两个已封装好的产品，都包含一个wanda()函数，封装在名称空间中就知道是哪一个wanda()函数</p><p>如：<code>Microflop::wanda(&quot;go dancing?&quot;);</code>，<code>Piscine::wanda(&quot;a fish named Desire&quot;);</code></p></li><li><p><strong>其他语言</strong>：这点很多其他语言的模块导入功能也具备，像C、Js这种原生不支持命名空间就显得很不方便</p><p>如：Python：<code>from moduleA import Cat</code>、<code>from moduleA import *</code>、<code>import moduleA</code></p></li><li><p><strong>std名称空间</strong>：，加了<code>using namespace std</code>后表示默认使用std这个名称空间，就简写成<code>cout</code>了，但这种方法不建议</p></li><li><p><strong>四种用法</strong></p><ul><li>多函数程序访问名称空间，<code>using namespace std</code>放在函数定义前</li><li>函数内可以访问名称空间，<code>using namespace std</code>放在特定的函数定义中</li><li>可以访问指定的元素，<code>using std::cout</code></li><li>完全不适用编译指令using，<code>std::cout &lt;&lt;</code></li></ul></li></ul><h3 id="一些前提知识" tabindex="-1"><a class="header-anchor" href="#一些前提知识"><span>一些前提知识</span></a></h3><p>对象分类</p><ul><li><strong>左值</strong>：可被引用的数据对象（可以通过地址访问的值） <ul><li><strong>等号左边值</strong>：可以在赋值语句左边的值，即可被修改的值</li><li><strong>const变量</strong>（在const出来之前，左值就是等号左边值的意思）</li></ul></li><li><strong>非左值</strong>： <ul><li>字面常量（字符串字面量除外，它由地址表示）</li><li>包含多项的表达式</li></ul></li><li><strong>右值</strong>：不可被引用的数据对象（不能通过地址访问的值）（非引用值）</li></ul>`,63)]))}const p=i(n,[["render",s],["__file","01. 编程语言.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html","title":"01. 编程语言","lang":"zh-CN","frontmatter":{"description":"01. 编程语言 预备知识 学习资料、查阅文档 进度笔记 《C++ Primer Plus 第六版 中文版》 书理解至577页（不包含跳过部分，详见书本剪角） 笔记更新至518页 《Effective C++》&《深度探索C++对象模型》 还没看 文档资源 [微软官网文档（中文）](https://docs.microsoft.com/zh-cn/) ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"01. 编程语言"}],["meta",{"property":"og:description","content":"01. 编程语言 预备知识 学习资料、查阅文档 进度笔记 《C++ Primer Plus 第六版 中文版》 书理解至577页（不包含跳过部分，详见书本剪角） 笔记更新至518页 《Effective C++》&《深度探索C++对象模型》 还没看 文档资源 [微软官网文档（中文）](https://docs.microsoft.com/zh-cn/) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01. 编程语言\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"01. 编程语言","slug":"_01-编程语言","link":"#_01-编程语言","children":[{"level":2,"title":"学习资料、查阅文档","slug":"学习资料、查阅文档","link":"#学习资料、查阅文档","children":[{"level":3,"title":"进度笔记","slug":"进度笔记","link":"#进度笔记","children":[]},{"level":3,"title":"文档资源","slug":"文档资源","link":"#文档资源","children":[]},{"level":3,"title":"学习用书","slug":"学习用书","link":"#学习用书","children":[]},{"level":3,"title":"深入资料","slug":"深入资料","link":"#深入资料","children":[]}]},{"level":2,"title":"语言本身","slug":"语言本身","link":"#语言本身","children":[{"level":3,"title":"语言风格、书写风格","slug":"语言风格、书写风格","link":"#语言风格、书写风格","children":[]}]},{"level":2,"title":"语言简介、特点、简史","slug":"语言简介、特点、简史","link":"#语言简介、特点、简史","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"简史","slug":"简史","link":"#简史","children":[]},{"level":3,"title":"史记","slug":"史记","link":"#史记","children":[]}]},{"level":2,"title":"语言标准、新增特性、版本变迁","slug":"语言标准、新增特性、版本变迁","link":"#语言标准、新增特性、版本变迁","children":[{"level":3,"title":"语言标准准","slug":"语言标准准","link":"#语言标准准","children":[]},{"level":3,"title":"新增特性","slug":"新增特性","link":"#新增特性","children":[]},{"level":3,"title":"版本变迁","slug":"版本变迁","link":"#版本变迁","children":[]}]},{"level":2,"title":"项目创建、环境安装、开发工具","slug":"项目创建、环境安装、开发工具","link":"#项目创建、环境安装、开发工具","children":[]},{"level":2,"title":"HelloWorld、基础知识","slug":"helloworld、基础知识","link":"#helloworld、基础知识","children":[{"level":3,"title":"HelloWorld","slug":"helloworld","link":"#helloworld","children":[]},{"level":3,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":4,"title":"main()函数（与C不同）","slug":"main-函数-与c不同","link":"#main-函数-与c不同","children":[]},{"level":4,"title":"变量声明（与C不同）","slug":"变量声明-与c不同","link":"#变量声明-与c不同","children":[]},{"level":4,"title":"C++注释（与C不同）","slug":"c-注释-与c不同","link":"#c-注释-与c不同","children":[]},{"level":4,"title":"C++预处理器和iostream文件","slug":"c-预处理器和iostream文件","link":"#c-预处理器和iostream文件","children":[]},{"level":4,"title":"头文件名（与C不同）","slug":"头文件名-与c不同","link":"#头文件名-与c不同","children":[]},{"level":4,"title":"名称空间（与C不同）","slug":"名称空间-与c不同","link":"#名称空间-与c不同","children":[]}]},{"level":3,"title":"一些前提知识","slug":"一些前提知识","link":"#一些前提知识","children":[]}]}]}],"git":{},"readingTime":{"minutes":10.54,"words":3162},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/01. 编程语言/01. 编程语言.md","excerpt":"\\n<p>预备知识</p>\\n<h2>学习资料、查阅文档</h2>\\n<h3>进度笔记</h3>\\n<ul>\\n<li>《C++ Primer Plus 第六版 中文版》\\n<ul>\\n<li>书理解至577页（不包含跳过部分，详见书本剪角）</li>\\n<li>笔记更新至518页</li>\\n</ul>\\n</li>\\n<li>《Effective C++》&amp;《深度探索C++对象模型》\\n<ul>\\n<li>还没看</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>文档资源</h3>\\n<ul>\\n<li><mark>[微软官网文档（中文）](https://docs.microsoft.com/zh-cn/)</mark></li>\\n<li><a href=\\"https://www.runoob.com/cplusplus/cpp-tutorial.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">菜鸟 - 教程</a></li>\\n<li><a href=\\"https://www.runoob.com/try/runcode.php?filename=helloworld&amp;type=cpp\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">菜鸟 - 在线工具</a></li>\\n<li><a href=\\"https://c.runoob.com/compile/11\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">菜鸟 - 在线工具（多语言）</a></li>\\n<li><a href=\\"https://www.w3cschool.cn/cpp/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">W3CSchool - 教程</a></li>\\n<li>https://devdocs.io/cpp/（全英，有二级大纲）</li>\\n<li><a href=\\"http://c.biancheng.net/view/2228.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">C语言中文网的C++</a></li>\\n<li>外网\\n<ul>\\n<li>https://en.wikipedia.org/wiki/Standard_Template_Library，Dinkumware为C++标准库提供了完整的参考文档</li>\\n<li>http://en.cppreference.com/w/，SGI提供了全面的STL编程指南（该网站有中文版）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/01. 编程语言/01. 编程语言.md","value":{"title":"01. 编程语言","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/01. 编程语言/01. 编程语言.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
