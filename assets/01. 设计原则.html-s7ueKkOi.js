import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c,b as n,d as s,e as t,a as e}from"./app-DUaYLZrg.js";const i="/assets/webp-CpDXYnOR.webp",r={},u=n("h1",{id:"markdown-it-插件设计原则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown-it-插件设计原则"},[n("span",null,"Markdown-it 插件设计原则")])],-1),k=n("h2",{id:"markdown-it-设计原则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown-it-设计原则"},[n("span",null,"Markdown-it 设计原则")])],-1),d={href:"https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="数据流-data-flow" tabindex="-1"><a class="header-anchor" href="#数据流-data-flow"><span>数据流 (Data flow)</span></a></h3><p>入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - <code>core</code> 、 <code>block</code> 和 <code>inline</code> ：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>core
    core<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>normalize<span class="token punctuation">)</span>
    <span class="token operator">...</span>
    core<span class="token punctuation">.</span>ruleX

    block
        block<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>blockquote<span class="token punctuation">)</span>
        <span class="token operator">...</span>
        block<span class="token punctuation">.</span>ruleX

    core<span class="token punctuation">.</span><span class="token function">ruleX1</span> <span class="token punctuation">(</span>intermediate rule that applies on block tokens<span class="token punctuation">,</span> nothing yet<span class="token punctuation">)</span>
    <span class="token operator">...</span>
    core<span class="token punctuation">.</span>ruleXX

    <span class="token function">inline</span> <span class="token punctuation">(</span>applied to each block token <span class="token keyword">with</span> <span class="token string">&quot;inline&quot;</span> type<span class="token punctuation">)</span>
        inline<span class="token punctuation">.</span><span class="token function">rule1</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span>
        <span class="token operator">...</span>
        inline<span class="token punctuation">.</span>ruleX

    core<span class="token punctuation">.</span><span class="token function">ruleYY</span> <span class="token punctuation">(</span>applies to all tokens<span class="token punctuation">)</span>
    <span class="token operator">...</span> <span class="token punctuation">(</span>abbreviation<span class="token punctuation">,</span> footnote<span class="token punctuation">,</span> typographer<span class="token punctuation">,</span> linkifier<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析的结果是一个 <code>list tokens</code>，它将被传递给 <code>renderer</code> 来生成 html 内容。</p><p>这些 tokens 能被自身解析来生成更多的 tokens。（例如：一个 <code>list token</code> 能被拆分为多个 <code>inline tokens</code>）。</p><p>一个 <code>env</code> 沙盒能被用来与 tokens 来给你的解析器和渲染器注入额外的变量。</p><p>当解析数据时，每个链（core / block / inline）会使用一个独立的 <code>state</code> 对象，所以每个解析中的操作都是独立的，并且能在运行时被禁用。</p><h3 id="令牌流-token-stream" tabindex="-1"><a class="header-anchor" href="#令牌流-token-stream"><span>令牌流 (Token stream)</span></a></h3><p>不像传统的 <code>AST</code>，我们使用更加底层的数据代表 <code>tokens</code> 两者区别：</p><ul><li>Tokens 是一个简单的序列（数组）。</li><li>打开的和关闭的标签是隔离的、分开的。</li><li>有特殊的 token 对象，比如“内联容器(inline container)”，它有嵌套的 tokens。</li><li>一系列内联的标签（粗体，斜体，文本等等）</li></ul>`,10),v={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/token.js",target:"_blank",rel:"noopener noreferrer"},b=e("<p>总之，一个 token 流是：</p><ul><li>在顶层 - 是成对或单个“块” tokens 的数组： <ul><li>打开的/关闭的标题，列表，块引用，段落，...</li><li>代码，围栏块，水平规则，html 块，内联容器</li></ul></li><li>每个内联 token 都有一个 <code>.children</code> 属性，带有嵌套 token 流，用于内联内容： <ul><li>打开的/关闭的 strong 强调，em 强调，链接，代码，...</li><li>文字，换行符</li></ul></li></ul><p>更多关于 tokens 的细节：</p>",3),h={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/token.js",target:"_blank",rel:"noopener noreferrer"},q={href:"https://markdown-it.github.io/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"debug",-1),f=e('<h3 id="规则-rules" tabindex="-1"><a class="header-anchor" href="#规则-rules"><span>规则（Rules）</span></a></h3><p>Rules 是用解析器的 <code>state</code> 对象做 “有魔力的事情” 的函数。一个唯一的规则会与一个或多个<strong>链</strong>相关联。 例如，<code>blockquote</code> 标记与 <code>blockquote</code>，<code>paragraph</code>，<code>heading</code> 和 <code>list</code> 链相关联。</p>',2),w={href:"https://markdown-it.docschina.org/api/Ruler.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://markdown-it.docschina.org/MarkdownIt.html",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"enabled",-1),x=n("code",null,"disabled",-1),j=n("p",null,[s("你可以注意到，某些规则具有 "),n("code",null,"validation mode"),s(" - 在此模式下规则不能修改 token 流，只能查看 token 的结尾。这是一个重要的设计原则 - token 流在块和内联解析阶段是“只写的”。")],-1),A=n("p",null,"解析器旨在使规则彼此独立。你可以安全地启用/禁用它们，或者添加新的。 关于如何创建新规则则没有通用的方法 —— 设计具有良好数据隔离的分布式状态机是一项棘手的业务。但是你可以调查现有规则和插件，以查看可能的方法。",-1),T=n("p",null,"此外，在复杂的情况下，你可以尝试在跟踪器 (tracker) 中寻求帮助。这种情况是很简单的 - 从你的 ticket 上可以清楚地看到，你研究过文档，源码，并尝试自己做一些事情。我们绝不会拒绝真正的开发人员。",-1),M=n("h3",{id:"渲染器-renderer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#渲染器-renderer"},[n("span",null,"渲染器（Renderer）")])],-1),B={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>渲染器规则位于 <code>md.renderer.rules [name]</code> ，是简单的具有相同特征的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> renderer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">return</span> htmlResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在许多情况下，即使在没有解析器侵入的情况下，也可以轻松地进行输出更改。 例如，让我们将img和video的链接 替换为 播放器的iframe</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> defaultRender <span class="token operator">=</span> md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>image<span class="token punctuation">;</span>
<span class="token keyword">var</span> vimeoRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">image</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// image标签的渲染器</span>
  <span class="token keyword">var</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span>
      aIndex <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>vimeoRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 匹配img和video的链接</span>
    <span class="token keyword">var</span> id <span class="token operator">=</span> token<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>vimeoRE<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;\\n&#39;</span> <span class="token operator">+</span> <span class="token comment">// 并替换为播放器的iframe</span>
           <span class="token string">&#39;  &lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;//player.vimeo.com/video/&#39;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&#39;&quot;&gt;&lt;/iframe&gt;\\n&#39;</span> <span class="token operator">+</span>
           <span class="token string">&#39;&lt;/div&gt;\\n&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 传递 token 给默认的渲染器。</span>
  <span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是另一个示例，如何添加 <code>target=&quot;_blank&quot;</code> 到所有链接：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 如果覆盖，或者是对默认渲染器的代理，则记住老的渲染器。</span>
<span class="token keyword">var</span> defaultRender <span class="token operator">=</span> md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>link_open <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">renderToken</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">link_open</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果你确认其他的插件不能添加 \`target\` - 放弃以下检查：</span>
  <span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加新属性</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// 替换已经存在的属性值</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 传递 token 到默认的渲染器。</span>
  <span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果你需要添加属性，你可以不需要覆盖渲染器来做这些事。</p><p>例如，你能够在 <code>core</code> 链中更新 tokens。这比直接覆盖渲染器慢，但这更简单。</p>`,8),I={href:"https://github.com/markdown-it/markdown-it-for-inline",target:"_blank",rel:"noopener noreferrer"},R=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-for-inline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用插件</span>

<span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token string">&#39;url_new_win&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;link_open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tokens<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

              <span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也能够<strong>编写你自己的渲染器</strong>来生成其他除了 HTML 的格式，像 JSON/XML... 你甚至能够使用它来生成 AST。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3>`,3),S={href:"https://markdown-it.docschina.org/architecture.html#%E6%95%B0%E6%8D%AE%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},D=n("ol",null,[n("li",null,"解析块，并使用块 token 填充顶层 token 流"),n("li",null,[s("解析内联容器上的内容，填充 "),n("code",null,".children"),s(" 属性")]),n("li",null,"进行渲染")],-1),P={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_core.js",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_inline.js",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},z=e('<h2 id="解析原理2" tabindex="-1"><a class="header-anchor" href="#解析原理2"><span>解析原理2</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>markdown-it是一个用来解析markdown的库，它能够将<strong>markdown代码编译为html代码</strong></p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><h4 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h4><figure><img src="'+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式"><span>三种模式</span></a></h4><p>markdown-it 提供了三种模式：</p>',8),H={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fcommonmark.org%2F",target:"_blank",rel:"noopener noreferrer"},V=n("ul",null,[n("li",null,"对应：最严格 解析模式")],-1),O={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.github.com%2Fgfm%2F",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,[s("zero "),n("ul",null,[n("li",null,"对应：最宽松 解析模式")])],-1),Z=e(`<h4 id="解析-两种规则" tabindex="-1"><a class="header-anchor" href="#解析-两种规则"><span>解析 - 两种规则</span></a></h4><p>markdown-it 的解析规则 (rules) 可分为两种：</p><ul><li>块(block)： <code>MarkdownIt.block</code> 对应的是解析块规则的 <code>ParserBlock</code></li><li>内联(inline)： <code>MarkdownIt.inline</code> 对应的是解析内联规则的 <code>ParserInline</code></li></ul><h4 id="解析-顺序" tabindex="-1"><a class="header-anchor" href="#解析-顺序"><span>解析 - 顺序</span></a></h4><p>解析的过程是，首先创建一个 <strong>Core Parser</strong>，这个 Core Parser 包含一系列的缺省 <strong>rules</strong>。这些rules 将顺序执行，每个 rules 都在前面的 <strong>Tokens</strong> 的基础上，要么修改原来的 Token，要么添加新的 Token。这个 rules 的链条被称为 <strong>Core Chain</strong>。</p><h3 id="tokens" tabindex="-1"><a class="header-anchor" href="#tokens"><span>Tokens</span></a></h3><p>经过解析后我们得到的结果不是一颗 AST 树，而是一个数组，markdown-it 称之为 <strong>token 流</strong>。为什么呢？</p><p>官方解释是：</p><ul><li>Tokens 是一个简单的数组。（AST 是一个对象）</li><li>打开的标签和关闭的标签可以隔离。</li><li><strong>将 “内联容器(inline container)” 作为一种特殊的 block token 对象</strong>。 <ul><li>它有嵌套的 tokens，如粗体，斜体，文本等等。</li><li>这样做有什么好处呢？这样就可以并行处理 block 和 inline 类型的 token 了。</li></ul></li></ul><p>比如通过markdown-it我们可以把 <code># change!</code> 转化为以下内容：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;heading_open&quot;</span><span class="token punctuation">,</span>			<span class="token comment">// heading_open，#号，#</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token number">1</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>									<span class="token comment">// inline，内容，change!</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;inline&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token number">1</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;change！&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;change！&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;heading_close&quot;</span><span class="token punctuation">,</span>		<span class="token comment">// heading_close</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染器" tabindex="-1"><a class="header-anchor" href="#渲染器"><span>渲染器</span></a></h3><p>它会遍历所有 token，将每个 token 传递给与 token 的 type 属性同名的规则。</p><p>markdown-it 内置了<strong>九种规则</strong>：</p><ol><li>围栏</li><li>行内代码</li><li>代码块</li><li>块 html</li><li>行内 html</li><li>图片</li><li>硬换行</li><li>软换行</li><li>文本</li></ol>`,15),G={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmarkdown-it%2Fmarkdown-it%2Fblob%2F1ad3aec2041cd2defa7e299543cc1e42184b680d%2Flib%2Frenderer.js%23L193",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"MarkdownIt.renderer.render",-1),K=n("code",null,"MarkdownIt.renderer.renderInline",-1),$=n("strong",null,"块规则",-1),Q=n("strong",null,"内联规则",-1),U=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">strong_open</span>  <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;&lt;b&gt;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">strong_close</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;&lt;/b&gt;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">renderInline</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这段代码就更新了渲染 strong_open 和 strong_close 这两种 token 的渲染规则</p><h2 id="token-vs-ast" tabindex="-1"><a class="header-anchor" href="#token-vs-ast"><span>Token vs AST</span></a></h2><p>为什么不是 AST？因为我们的任务不需要它。我们遵循 KISS 原则。 如果你愿意的话 - 你可以在没有渲染器的情况下调用解析器并转换 tokens 流到 AST。</p><p>GPT4：</p><p>makrdown-it 为什么选用更底层的tokens存储数据，与传统的AST相比要什么优点和缺点？</p><hr><p>markdown-it 使用更底层的 tokens 存储数据是为了提供一个更高的性能和更好的可扩展性。相比传统的 AST，tokens 有以下优点和缺点：</p><ul><li><p>优点</p><ol><li>性能： tokens 提供了更高的解析速度，因为它们不需要创建一个复杂的树形结构。这使得 markdown-it 在处理大量文本时更为高效。</li><li>灵活性： 由于 tokens 是线性排列的，它们可以更轻松地进行修改、移动和替换，而这在树形结构中会更为复杂。</li><li>可扩展性： tokens 结构使得 markdown-it 更易于扩展和添加新的功能。开发者可以轻松地为 markdown 添加自定义的规则和渲染器，而不用担心破坏原有的 AST 结构。</li><li>简化解析过程： 与 AST 相比，tokens 提供了一种更简单的方式来解析和生成 HTML，因为它们可以直接映射到 HTML 标签和属性。</li></ol></li><li><p>缺点</p><ol><li>可读性： 由于 tokens 是线性的，它们可能不如 AST 结构那么直观。对于开发者来说，理解和调试 tokens 可能需要更多的时间和精力。</li><li>维护成本： 与 AST 相比，tokens 结构可能在未来需要更多的维护工作。这是因为 tokens 实现了较多的低级细节，可能需要更多的修改来适应未来规范的变化。</li></ol></li></ul><p>总之，markdown-it 选择使用 tokens 进行数据存储，是为了追求更高的性能、灵活性和可扩展性。尽管 tokens 结构在可读性和维护成本方面存在一定的缺点，但在许多场景下，这些优点使得使用 tokens 成为了更好的选择。</p>`,10);function W(nn,sn){const a=p("ExternalLinkIcon");return l(),c("div",null,[u,k,n("p",null,[s("参考："),n("a",d,[s("解析器架构和设计原则"),t(a)])]),m,n("p",null,[s("参考 "),n("a",v,[s("token class"),t(a)]),s(" 以获得关于每个 token 内容的细节。")]),b,n("ul",null,[n("li",null,[n("a",h,[s("Renderer 源码"),t(a)])]),n("li",null,[n("a",g,[s("Token 源码"),t(a)])]),n("li",null,[n("a",q,[s("在线示例"),t(a)]),s(" - 输入你的文本然后点击 "),_,s(" tab。")])]),f,n("p",null,[s("Rules 通过 "),n("a",w,[s("Ruler"),t(a)]),s(" 实例按名称管理，并且可以被 "),n("a",y,[s("MarkdownIt"),t(a)]),s(" 方法 "),E,s(" / "),x,s("。")]),j,A,T,M,n("p",null,[s("生成 token 流后，将其传递给 "),n("a",B,[s("renderer"),t(a)]),s("。 然后它会遍历所有 token，将每个token 传递给与 token 的 type 属性同名的规则。")]),F,n("p",null,[s("让我们使用 "),n("a",I,[s("markdown-for-inline"),t(a)]),s(" 插件来做同样的事情，就像之前的例子一样：")]),R,n("p",null,[s("这在 "),n("a",S,[s("数据流"),t(a)]),s(" 中提到过，但让我们再重复序列一次：")]),D,n("p",null,[s("介于两者之间你可以应用额外的转换。全部内容 可见于每个链的顶部 "),n("a",P,[s("parser_core.js"),t(a)]),s("，"),n("a",C,[s("parser_block.js"),t(a)]),n("a",L,[t(a)]),s(" 和 "),n("a",N,[s("parser_inline.js"),t(a)]),s("文件。")]),n("p",null,[s("你也可以直接在 "),n("a",X,[s("renderer"),t(a)]),s(" 中更改输出，以解决许多简单的情况。")]),z,n("ul",null,[n("li",null,[n("a",H,[s("commonmark"),t(a)]),V]),n("li",null,[s("default "),n("ul",null,[n("li",null,[s("对应："),n("a",O,[s("GFM"),t(a)]),s(" 解析模式")])])]),Y]),Z,n("p",null,[s("type 属性不在内置规则的 token 将会被被传入 "),n("a",G,[s("renderToken"),t(a)]),s(" 中当一个普通 token 处理。 "),J,s(" 和 "),K,s(" 分别对应按照 "),$,s(" 和 "),Q,s(" 生成 HTML 代码。 而在 MarkdownIt.renderer 中有一个特殊的属性：rules，它代表着对于 token 们的渲染规则，可以被使用者更新或扩展：")]),U])}const en=o(r,[["render",W],["__file","01. 设计原则.html.vue"]]),on=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Markdown-it/%E3%80%8AMakrdown-it%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E3%80%8B/03.%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/01.%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"Markdown-it 插件设计原则","lang":"zh-CN","frontmatter":{"description":"Markdown-it 插件设计原则 Markdown-it 设计原则 参考：解析器架构和设计原则 数据流 (Data flow) 入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - core 、 block 和 inline ： 解析的结果是一个 list tokens，它将被传递给 renderer 来生成 html 内容。 这些 tokens ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Markdown-it/%E3%80%8AMakrdown-it%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E3%80%8B/03.%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/01.%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Markdown-it 插件设计原则"}],["meta",{"property":"og:description","content":"Markdown-it 插件设计原则 Markdown-it 设计原则 参考：解析器架构和设计原则 数据流 (Data flow) 入数据通过嵌套的规则链进行解析。有 3 个嵌套链 - core 、 block 和 inline ： 解析的结果是一个 list tokens，它将被传递给 renderer 来生成 html 内容。 这些 tokens ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Markdown-it 插件设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Markdown-it 插件设计原则","slug":"markdown-it-插件设计原则","link":"#markdown-it-插件设计原则","children":[{"level":2,"title":"Markdown-it 设计原则","slug":"markdown-it-设计原则","link":"#markdown-it-设计原则","children":[{"level":3,"title":"数据流 (Data flow)","slug":"数据流-data-flow","link":"#数据流-data-flow","children":[]},{"level":3,"title":"令牌流 (Token stream)","slug":"令牌流-token-stream","link":"#令牌流-token-stream","children":[]},{"level":3,"title":"规则（Rules）","slug":"规则-rules","link":"#规则-rules","children":[]},{"level":3,"title":"渲染器（Renderer）","slug":"渲染器-renderer","link":"#渲染器-renderer","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"解析原理2","slug":"解析原理2","link":"#解析原理2","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[{"level":4,"title":"架构图","slug":"架构图","link":"#架构图","children":[]},{"level":4,"title":"三种模式","slug":"三种模式","link":"#三种模式","children":[]},{"level":4,"title":"解析 - 两种规则","slug":"解析-两种规则","link":"#解析-两种规则","children":[]},{"level":4,"title":"解析 - 顺序","slug":"解析-顺序","link":"#解析-顺序","children":[]}]},{"level":3,"title":"Tokens","slug":"tokens","link":"#tokens","children":[]},{"level":3,"title":"渲染器","slug":"渲染器","link":"#渲染器","children":[]}]},{"level":2,"title":"Token vs AST","slug":"token-vs-ast","link":"#token-vs-ast","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.13,"words":2739},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Markdown-it/《Makrdown-it中文文档》/03. 插件开发/01. 设计原则.md","autoDesc":true}');export{en as comp,on as data};
