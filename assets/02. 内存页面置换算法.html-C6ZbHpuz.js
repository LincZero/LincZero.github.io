import{_ as l,c as n,e as t,o as p}from"./app-BDGujT_T.js";const i="/assets/%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8%E6%B5%81%E7%A8%8B-C54zBvO4.png",o="/assets/%E9%A1%B5%E8%A1%A8%E9%A1%B9%E5%AD%97%E6%AE%B5-D_nww7TW.png",a="/assets/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B-D4cf7Xjc.png",s="/assets/%E6%9C%80%E4%BC%98%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-CXJzcUBJ.png",r="/assets/FIFO%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-Dta-kg79.png",E="/assets/LRU%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-Db7BoXLa.png",c="/assets/%E6%97%B6%E9%92%9F%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-BURia_Py.png",h={};function d(B,e){return p(),n("div",null,e[0]||(e[0]=[t('<h1 id="内存页面置换算法" tabindex="-1"><a class="header-anchor" href="#内存页面置换算法"><span>内存页面置换算法</span></a></h1><h2 id="缺页异常-缺页中断" tabindex="-1"><a class="header-anchor" href="#缺页异常-缺页中断"><span>缺页异常（缺页中断）</span></a></h2><p>在了解内存页面置换算法前，我们得先谈一下 <strong>缺页异常（缺页中断）</strong>。</p><h3 id="缺页中断-发生场景" tabindex="-1"><a class="header-anchor" href="#缺页中断-发生场景"><span>缺页中断 - 发生场景</span></a></h3><p>当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。</p><h3 id="缺页中断-与一般中断的区别" tabindex="-1"><a class="header-anchor" href="#缺页中断-与一般中断的区别"><span>缺页中断 - 与一般中断的区别</span></a></h3><p>它与一般中断的主要区别在于：</p><ul><li><strong>期间or结束后处理</strong>：缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。</li><li><strong>返回该指令or下条指令</strong>：缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回回到该指令的「下一个指令」执行。</li></ul><h3 id="缺页中断-处理流程" tabindex="-1"><a class="header-anchor" href="#缺页中断-处理流程"><span>缺页中断 - 处理流程</span></a></h3><p>我们来看一下缺页中断的处理流程，如下图：</p><p><img src="'+i+'" alt="缺页中断的处理流程" loading="lazy"></p><ol><li>在 CPU 里访问一条 Load M 指令，然后 CPU 会去找 M 所对应的页表项。</li><li>如果该页表项的状态位是「有效的」，那 CPU 就可以直接去访问物理内存了，如果状态位是「无效的」，则 CPU 则会发送缺页中断请求。</li><li>操作系统收到了缺页中断，则会执行缺页中断处理函数，先会查找该页面在磁盘中的页面的位置。</li><li>找到磁盘中对应的页面后，需要把该页面换入到物理内存中，但是在换入前，需要在物理内存中找空闲页，如果找到空闲页，就把页面换入到物理内存中。</li><li>页面从磁盘换入到物理内存完成后，则把页表项中的状态位修改为「有效的」。</li><li>最后，CPU 重新执行导致缺页异常的指令。</li></ol><h3 id="页面置换-发生场景" tabindex="-1"><a class="header-anchor" href="#页面置换-发生场景"><span>页面置换 - 发生场景</span></a></h3><p>上面所说的过程，第 4 步是能在物理内存找到空闲页的情况，那如果找不到呢？</p><p>找不到空闲页的话，就说明此时内存已满了，这时候，就需要「<strong>页面置换算法</strong>」选择一个物理页，如果该物理页有被修改过（脏页），则把它换出到磁盘，然后把该被置换出去的页表项的状态改成「无效的」，最后把正在访问的页面装入到这个物理页中。</p><h3 id="页表" tabindex="-1"><a class="header-anchor" href="#页表"><span>页表</span></a></h3><p>这里提一下，页表项通常有如下图的字段：</p><p><img src="'+o+'" alt="img" loading="lazy"></p><p>那其中：</p><ul><li><em>状态位</em>：用于表示该页是否有效，也就是说是否在物理内存中，供程序访问时参考。</li><li><em>访问字段</em>：用于记录该页在一段时间被访问的次数，供页面置换算法选择出页面时参考。</li><li><em>修改位</em>：表示该页在调入内存后是否有被修改过，由于内存中的每一页都在磁盘上保留一份副本，因此，如果没有修改，在置换该页时就不需要将该页写回到磁盘上，以减少系统的开销；如果已经被修改，则将该页重写到磁盘上，以保证磁盘中所保留的始终是最新的副本。</li><li><em>硬盘地址</em>：用于指出该页在硬盘上的地址，通常是物理块号，供调入该页时使用。</li></ul><h3 id="虚拟内存的管理流程" tabindex="-1"><a class="header-anchor" href="#虚拟内存的管理流程"><span>虚拟内存的管理流程</span></a></h3><p>这里我整理了虚拟内存的管理整个流程，你可以从下面这张图看到：</p><p><img src="'+a+'" alt="虚拟内存的流程" loading="lazy"></p><p>所以，页面置换算法的功能是，<strong>当出现缺页异常，需调入新页面而内存已满时，选择被置换的物理页面</strong>，也就是说选择一个物理页面换出到磁盘，然后把需要访问的页面换入到物理页。</p><h2 id="置换算法" tabindex="-1"><a class="header-anchor" href="#置换算法"><span>置换算法</span></a></h2><p>那其算法目标则是，尽可能 <strong>减少页面的换入换出的次数</strong>，常见的页面置换算法有如下几种：</p><ul><li>最佳页面置换算法（<em>OPT</em>）</li><li>先进先出置换算法（<em>FIFO</em>）</li><li>最近最久未使用的置换算法（<em>LRU</em>）</li><li>时钟页面置换算法（<em>Lock</em>）</li><li>最不常用置换算法（<em>LFU</em>）</li></ul><h3 id="最佳页面置换算法-opt" tabindex="-1"><a class="header-anchor" href="#最佳页面置换算法-opt"><span>最佳页面置换算法 (<em>OPT</em>)</span></a></h3><p>最佳页面置换算法基本思路是，<strong>置换在「未来」最长时间不访问的页面</strong>。</p><p>所以，该算法实现需要计算内存中每个逻辑页面的「下一次」访问时间，然后比较，选择未来最长时间不访问的页面。</p><p>我们举个例子，假设一开始有 3 个空闲的物理页，然后有请求的页面序列，那它的置换过程如下图：</p><p><img src="'+s+'" alt="最佳页面置换算法" loading="lazy"></p><p>在这个请求的页面序列中，缺页共发生了 <code>7</code> 次（空闲页换入 3 次 + 最优页面置换 4 次），页面置换共发生了 <code>4</code> 次。</p><p>这很理想，但是实际系统中无法实现，因为程序访问页面时是动态的，我们是无法预知每个页面在「下一次」访问前的等待时间。</p><p>所以，最佳页面置换算法作用是为了衡量你的算法的效率，你的算法效率越接近该算法的效率，那么说明你的算法是高效的。</p><h3 id="先进先出置换算法-fifo" tabindex="-1"><a class="header-anchor" href="#先进先出置换算法-fifo"><span>先进先出置换算法 (<em>FIFO</em>)</span></a></h3><p>既然我们无法预知页面在下一次访问前所需的等待时间，那我们可以 <strong>选择在内存驻留时间很长的页面进行中置换</strong>，这个就是「先进先出置换」算法的思想。</p><p>还是以前面的请求的页面序列作为例子，假设使用先进先出置换算法，则过程如下图：</p><p><img src="'+r+'" alt="先进先出置换算法" loading="lazy"></p><p>在这个请求的页面序列中，缺页共发生了 <code>10</code> 次，页面置换共发生了 <code>7</code> 次，跟最佳页面置换算法比较起来，性能明显差了很多。</p><h3 id="最近最久未使用的置换算法-lru" tabindex="-1"><a class="header-anchor" href="#最近最久未使用的置换算法-lru"><span>最近最久未使用的置换算法 (<em>LRU</em>)</span></a></h3><p>最近最久未使用（<em>LRU</em>）的置换算法的基本思路是，发生缺页时，<strong>选择最长时间没有被访问的页面进行置换</strong>，也就是说，该算法假设已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用。</p><p>这种算法近似最优置换算法，最优置换算法是通过「未来」的使用情况来推测要淘汰的页面，而 LRU 则是通过「历史」的使用情况来推测要淘汰的页面。</p><p>还是以前面的请求的页面序列作为例子，假设使用最近最久未使用的置换算法，则过程如下图：</p><p><img src="'+E+'" alt="最近最久未使用的置换算法" loading="lazy"></p><p>在这个请求的页面序列中，缺页共发生了 <code>9</code> 次，页面置换共发生了 <code>6</code> 次，跟先进先出置换算法比较起来，性能提高了一些。</p><blockquote><p>缺点：实现麻烦</p><p>虽然 LRU 在理论上是可以实现的，但代价很高。为了完全实现 LRU，需要在内存中维护一个所有页面的链表，最近最多使用的页面在表头，最近最少使用的页面在表尾。</p><p>困难的是，在每次访问内存时都必须要更新「整个链表」。在链表中找到一个页面，删除它，然后把它移动到表头是一个非常费时的操作。</p><p>所以，LRU 虽然看上去不错，但是由于开销比较大，实际应用中比较少使用。</p></blockquote><h3 id="时钟页面置换算法-lock" tabindex="-1"><a class="header-anchor" href="#时钟页面置换算法-lock"><span>时钟页面置换算法 (<em>Lock</em>)</span></a></h3><p>那有没有一种即能优化置换的次数，也能方便实现的算法呢？</p><p>时钟页面置换算法就可以两者兼得，它跟 LRU 近似，又是对 FIFO 的一种改进。</p><p>该算法的思路是，把所有的页面都保存在一个类似钟面的「环形链表」中，一个表针指向最老的页面。</p><p>当发生缺页中断时，算法首先检查表针指向的页面：</p><ul><li>如果它的访问位位是 0 就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置；</li><li>如果访问位是 1 就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0 的页面为止；</li></ul><p>我画了一副时钟页面置换算法的工作流程图，你可以在下方看到：</p><p><img src="'+c+'" alt="时钟页面置换算法" loading="lazy"></p><p>了解了这个算法的工作方式，就明白为什么它被称为时钟（<em>Clock</em>）算法了。</p><p>（但是你这里没说什么时候访问位会由0变成1吧）</p><h3 id="最不常用算法-lfu" tabindex="-1"><a class="header-anchor" href="#最不常用算法-lfu"><span>最不常用算法 (<em>LFU</em>)</span></a></h3><p>最不常用（<em>LFU</em>）算法，这名字听起来很调皮，但是它的意思不是指这个算法不常用，而是<strong>当发生缺页中断时，选择「访问次数」最少的那个页面，并将其淘汰</strong>。</p><p>它的实现方式是，对每个页面设置一个「访问计数器」，每当一个页面被访问时，该页面的访问计数器就累加 1。在发生缺页中断时，淘汰计数器值最小的那个页面。</p><blockquote><p>缺点1：硬件成本高</p><p>看起来很简单，每个页面加一个计数器就可以实现了，但是在操作系统中实现的时候，我们需要考虑效率和硬件成本的。</p><p>要增加一个计数器来实现，这个硬件成本是比较高的，另外如果要对这个计数器查找哪个页面访问次数最小，查找链表本身，如果链表长度很大，是非常耗时的，效率不高。</p></blockquote><blockquote><p>缺点2：不选近期访问次数不多</p><p>但还有个问题，LFU 算法只考虑了频率问题，没考虑时间的问题，比如有些页面在过去时间里访问的频率很高，但是现在已经没有访问了，而当前频繁访问的页面由于没有这些页面访问的次数高，在发生缺页中断时，就会可能会误伤当前刚开始频繁访问，但访问次数还不高的页面。</p><p>那这个问题的解决的办法还是有的，可以定期减少访问的次数，比如当发生时间中断时，把过去时间访问的页面的访问次数除以 2，也就说，随着时间的流失，以前的高访问次数的页面会慢慢减少，相当于加大了被置换的概率。</p></blockquote>',62)]))}const m=l(h,[["render",d],["__file","02. 内存页面置换算法.html.vue"]]),A=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/06.%20%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/02.%20%E5%86%85%E5%AD%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.html","title":"内存页面置换算法","lang":"zh-CN","frontmatter":{"description":"内存页面置换算法 缺页异常（缺页中断） 在了解内存页面置换算法前，我们得先谈一下 缺页异常（缺页中断）。 缺页中断 - 发生场景 当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。 缺页中断 - 与一般中断的区别 它与一般中断的主要区别在于： 期间or结束后处理：缺页中断在指令执行「期间」产生和处理中断信号...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/06.%20%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/02.%20%E5%86%85%E5%AD%98%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"内存页面置换算法"}],["meta",{"property":"og:description","content":"内存页面置换算法 缺页异常（缺页中断） 在了解内存页面置换算法前，我们得先谈一下 缺页异常（缺页中断）。 缺页中断 - 发生场景 当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。 缺页中断 - 与一般中断的区别 它与一般中断的主要区别在于： 期间or结束后处理：缺页中断在指令执行「期间」产生和处理中断信号..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存页面置换算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"内存页面置换算法","slug":"内存页面置换算法","link":"#内存页面置换算法","children":[{"level":2,"title":"缺页异常（缺页中断）","slug":"缺页异常-缺页中断","link":"#缺页异常-缺页中断","children":[{"level":3,"title":"缺页中断 - 发生场景","slug":"缺页中断-发生场景","link":"#缺页中断-发生场景","children":[]},{"level":3,"title":"缺页中断 - 与一般中断的区别","slug":"缺页中断-与一般中断的区别","link":"#缺页中断-与一般中断的区别","children":[]},{"level":3,"title":"缺页中断 - 处理流程","slug":"缺页中断-处理流程","link":"#缺页中断-处理流程","children":[]},{"level":3,"title":"页面置换 - 发生场景","slug":"页面置换-发生场景","link":"#页面置换-发生场景","children":[]},{"level":3,"title":"页表","slug":"页表","link":"#页表","children":[]},{"level":3,"title":"虚拟内存的管理流程","slug":"虚拟内存的管理流程","link":"#虚拟内存的管理流程","children":[]}]},{"level":2,"title":"置换算法","slug":"置换算法","link":"#置换算法","children":[{"level":3,"title":"最佳页面置换算法 (OPT)","slug":"最佳页面置换算法-opt","link":"#最佳页面置换算法-opt","children":[]},{"level":3,"title":"先进先出置换算法 (FIFO)","slug":"先进先出置换算法-fifo","link":"#先进先出置换算法-fifo","children":[]},{"level":3,"title":"最近最久未使用的置换算法 (LRU)","slug":"最近最久未使用的置换算法-lru","link":"#最近最久未使用的置换算法-lru","children":[]},{"level":3,"title":"时钟页面置换算法 (Lock)","slug":"时钟页面置换算法-lock","link":"#时钟页面置换算法-lock","children":[]},{"level":3,"title":"最不常用算法 (LFU)","slug":"最不常用算法-lfu","link":"#最不常用算法-lfu","children":[]}]}]}],"git":{},"readingTime":{"minutes":9.37,"words":2810},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/06. 调度算法/02. 内存页面置换算法.md","excerpt":"\\n<h2>缺页异常（缺页中断）</h2>\\n<p>在了解内存页面置换算法前，我们得先谈一下 <strong>缺页异常（缺页中断）</strong>。</p>\\n<h3>缺页中断 - 发生场景</h3>\\n<p>当 CPU 访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。</p>\\n<h3>缺页中断 - 与一般中断的区别</h3>\\n<p>它与一般中断的主要区别在于：</p>\\n<ul>\\n<li><strong>期间or结束后处理</strong>：缺页中断在指令执行「期间」产生和处理中断信号，而一般中断在一条指令执行「完成」后检查和处理中断信号。</li>\\n<li><strong>返回该指令or下条指令</strong>：缺页中断返回到该指令的开始重新执行「该指令」，而一般中断返回回到该指令的「下一个指令」执行。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/06. 调度算法/02. 内存页面置换算法.md","value":{"title":"02. 内存页面置换算法","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/06. 调度算法/02. 内存页面置换算法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{m as comp,A as data};
