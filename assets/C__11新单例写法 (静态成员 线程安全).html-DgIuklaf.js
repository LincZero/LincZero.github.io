import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-Y52ihg76.js";const t={},o=e(`<h1 id="c-11新单例写法-静态成员-线程安全" tabindex="-1"><a class="header-anchor" href="#c-11新单例写法-静态成员-线程安全"><span>C++11新单例写法 (静态成员 线程安全)</span></a></h1><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">CSingleton</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 获取单例对象的函数</span>
    <span class="token keyword">static</span> CSingleton<span class="token operator">&amp;</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> CSingleton instance<span class="token punctuation">;</span> <span class="token comment">// 局部静态特性</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 删除复制和赋值函数</span>
    <span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> CSingleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> CSingleton<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// 将构造和析构设为私有</span>
    <span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 构造函数的内容</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token comment">// 析构函数的内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在C++11中，静态局部变量的初始化是线程安全的。编译器会确保即使在多线程环境中，静态局部变量也只会被初始化一次。这是由C++标准保证的。</p><p>这就是为什么在<code>getInstance</code>函数中，我们不需要检查单例是否已经存在。当<code>getInstance</code>第一次被调用时，静态局部变量<code>instance</code>会被初始化。如果<code>getInstance</code>在后续被其他线程调用，<code>instance</code>不会再次被初始化。</p><p>因此，这种方法是线程安全的，并且比其他需要使用互斥锁或其他同步机制的方法更高效。</p>`,5),c=[o];function p(i,l){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","C__11新单例写法 (静态成员 线程安全).html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/C__11%E6%96%B0%E5%8D%95%E4%BE%8B%E5%86%99%E6%B3%95%20(%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8).html","title":"C++11新单例写法 (静态成员 线程安全)","lang":"zh-CN","frontmatter":{"description":"C++11新单例写法 (静态成员 线程安全) 在C++11中，静态局部变量的初始化是线程安全的。编译器会确保即使在多线程环境中，静态局部变量也只会被初始化一次。这是由C++标准保证的。 这就是为什么在getInstance函数中，我们不需要检查单例是否已经存在。当getInstance第一次被调用时，静态局部变量instance会被初始化。如果getI...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/C__11%E6%96%B0%E5%8D%95%E4%BE%8B%E5%86%99%E6%B3%95%20(%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8).html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"C++11新单例写法 (静态成员 线程安全)"}],["meta",{"property":"og:description","content":"C++11新单例写法 (静态成员 线程安全) 在C++11中，静态局部变量的初始化是线程安全的。编译器会确保即使在多线程环境中，静态局部变量也只会被初始化一次。这是由C++标准保证的。 这就是为什么在getInstance函数中，我们不需要检查单例是否已经存在。当getInstance第一次被调用时，静态局部变量instance会被初始化。如果getI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++11新单例写法 (静态成员 线程安全)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"C++11新单例写法 (静态成员 线程安全)","slug":"c-11新单例写法-静态成员-线程安全","link":"#c-11新单例写法-静态成员-线程安全","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.86,"words":258},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/01. 多类管理/设计模式/C++11新单例写法 (静态成员 线程安全).md","autoDesc":true}');export{u as comp,E as data};
