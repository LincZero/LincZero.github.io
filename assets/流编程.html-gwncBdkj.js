import{_ as t,c as l,e as i,o as e}from"./app-BgHc8lP1.js";const n={};function a(r,o){return e(),l("div",null,o[0]||(o[0]=[i('<h1 id="流编程" tabindex="-1"><a class="header-anchor" href="#流编程"><span>流编程</span></a></h1><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2><blockquote><blockquote><p>有没有类似设计的类型库，不限于ts语言</p></blockquote></blockquote><blockquote><p>有一些类似设计的库，它们的目标是为了构建可扩展的、模块化的数据处理流程。这些库通常被称为数据流（dataflow）或流程图（flow-based）库。以下是一些在不同编程语言中的实现：</p><ol><li><strong>NoFlo (JavaScript/TypeScript)</strong>: NoFlo 是一个流程图编程框架，用于在 JavaScript 和 TypeScript 中构建可扩展的、模块化的数据处理流程。NoFlo 使用图形图表（graph）表示数据流动，并使用组件（components）对数据进行处理。NoFlo 的组件类似于我们之前讨论的节点。 <ul><li>GitHub: https://github.com/noflo/noflo</li><li>网站: https://noflojs.org/</li></ul></li><li><strong>Luigi (Python)</strong>: Luigi 是一个用于构建复杂数据管道的 Python 库。Luigi 使用任务（Task）表示数据处理流程的每个节点，并定义输入（input）和输出（output）数据类型。Luigi 用于构建有向无环图（DAG）来表示数据处理流程，并确保任务正确地执行。 <ul><li>GitHub: https://github.com/spotify/luigi</li><li>网站: https://luigi.readthedocs.io/en/stable/</li></ul></li><li><strong>Apache NiFi (Java)</strong>: Apache NiFi 是一个用于构建数据流系统的 Java 应用。NiFi 使用处理器（Processor）表示数据处理节点，并提供丰富的处理器库以支持各种数据处理需求。NiFi 允许用户通过拖放方式在 Web UI 中构建数据流，并提供数据处理过程中的实时监控和可视化。 <ul><li>GitHub: https://github.com/apache/nifi</li><li>网站: https://nifi.apache.org/</li></ul></li><li><strong>Cpp-Taskflow (C++)</strong>: Cpp-Taskflow 是一个用于构建并行任务流的 C++ 库。它使用有向无环图 (DAG) 来表示任务之间的依赖关系，并允许用户灵活地定义任务以及任务之间的数据流。Cpp-Taskflow 使用现代 C++（C++17 及以上）编写，具有高性能和易用性。 <ul><li>GitHub: https://github.com/taskflow/taskflow</li><li>网站: https://taskflow.github.io/</li></ul></li><li><strong>C++ Actor Framework (C++ CAF)</strong>: CAF 是一个用于构建并发应用的 C++ 库。它提供了一种基于 Actor 模型的编程方式，允许用户创建多个 Actor，并定义 Actor 之间的消息传递。虽然 CAF 不是专为数据处理流程设计的，但你可以使用 Actor 模型来构建模块化的数据处理流程。 <ul><li>GitHub: https://github.com/actor-framework/actor-framework</li><li>网站: https://actor-framework.org/</li></ul></li></ol><p>这些库和框架都有相似的设计理念，即将数据处理过程分解为多个节点，并通过定义节点的输入和输出类型来构建可扩展的、模块化的数据处理流程。你可以根据自己的需求和使用的编程语言选择合适的库来实现数据处理流程。</p></blockquote><blockquote><blockquote><p>其实还有Flowhub、Node-RED</p><p>这个 “模块化的数据处理流程” 有专门的术语名称吗（中英）</p></blockquote></blockquote><blockquote><p>模块化的数据处理流程在计算机科学中通常被称为 <code>Dataflow Programming</code>（数据流编程）或 <code>Flow-Based Programming</code>（FBP，基于流的编程）。这两个术语有时可以互换使用，它们都强调通过将数据处理过程划分为多个可重用、可连接的组件（或节点）来构建应用程序。</p><p>在中文中，这个概念通常被称为 &quot;数据流编程&quot; 或 &quot;基于流的编程&quot;。这种编程范式强调数据在处理过程中的流动性，以及组件（或节点）之间的连接。这些组件可以灵活地组合和重组，以构建复杂的数据处理流程。</p></blockquote><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><p><a href="https://jpaulm.github.io/fbp/index.html" target="_blank" rel="noopener noreferrer">一本关于基于流编程 (FBP) 的web书</a>（这个十分推荐）</p><p>其实一般来说我的需求 <code>有向无环图</code>（DAG）就能满足，不过上面这本书介绍的好像是可以有环的</p>',9)]))}const s=t(n,[["render",a],["__file","流编程.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%81%E7%BC%96%E7%A8%8B.html","title":"流编程","lang":"zh-CN","frontmatter":{"description":"流编程 FAQ 有没有类似设计的类型库，不限于ts语言 有一些类似设计的库，它们的目标是为了构建可扩展的、模块化的数据处理流程。这些库通常被称为数据流（dataflow）或流程图（flow-based）库。以下是一些在不同编程语言中的实现： NoFlo (JavaScript/TypeScript): NoFlo 是一个流程图编程框架，用于在 Java...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%B5%81%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"流编程"}],["meta",{"property":"og:description","content":"流编程 FAQ 有没有类似设计的类型库，不限于ts语言 有一些类似设计的库，它们的目标是为了构建可扩展的、模块化的数据处理流程。这些库通常被称为数据流（dataflow）或流程图（flow-based）库。以下是一些在不同编程语言中的实现： NoFlo (JavaScript/TypeScript): NoFlo 是一个流程图编程框架，用于在 Java..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"流编程","slug":"流编程","link":"#流编程","children":[{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{},"readingTime":{"minutes":3.1,"words":929},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/流编程.md","excerpt":"\\n<h2>FAQ</h2>\\n<blockquote>\\n<blockquote>\\n<p>有没有类似设计的类型库，不限于ts语言</p>\\n</blockquote>\\n</blockquote>\\n<blockquote>\\n<p>有一些类似设计的库，它们的目标是为了构建可扩展的、模块化的数据处理流程。这些库通常被称为数据流（dataflow）或流程图（flow-based）库。以下是一些在不同编程语言中的实现：</p>\\n<ol>\\n<li><strong>NoFlo (JavaScript/TypeScript)</strong>: NoFlo 是一个流程图编程框架，用于在 JavaScript 和 TypeScript 中构建可扩展的、模块化的数据处理流程。NoFlo 使用图形图表（graph）表示数据流动，并使用组件（components）对数据进行处理。NoFlo 的组件类似于我们之前讨论的节点。\\n<ul>\\n<li>GitHub: https://github.com/noflo/noflo</li>\\n<li>网站: https://noflojs.org/</li>\\n</ul>\\n</li>\\n<li><strong>Luigi (Python)</strong>: Luigi 是一个用于构建复杂数据管道的 Python 库。Luigi 使用任务（Task）表示数据处理流程的每个节点，并定义输入（input）和输出（output）数据类型。Luigi 用于构建有向无环图（DAG）来表示数据处理流程，并确保任务正确地执行。\\n<ul>\\n<li>GitHub: https://github.com/spotify/luigi</li>\\n<li>网站: https://luigi.readthedocs.io/en/stable/</li>\\n</ul>\\n</li>\\n<li><strong>Apache NiFi (Java)</strong>: Apache NiFi 是一个用于构建数据流系统的 Java 应用。NiFi 使用处理器（Processor）表示数据处理节点，并提供丰富的处理器库以支持各种数据处理需求。NiFi 允许用户通过拖放方式在 Web UI 中构建数据流，并提供数据处理过程中的实时监控和可视化。\\n<ul>\\n<li>GitHub: https://github.com/apache/nifi</li>\\n<li>网站: https://nifi.apache.org/</li>\\n</ul>\\n</li>\\n<li><strong>Cpp-Taskflow (C++)</strong>: Cpp-Taskflow 是一个用于构建并行任务流的 C++ 库。它使用有向无环图 (DAG) 来表示任务之间的依赖关系，并允许用户灵活地定义任务以及任务之间的数据流。Cpp-Taskflow 使用现代 C++（C++17 及以上）编写，具有高性能和易用性。\\n<ul>\\n<li>GitHub: https://github.com/taskflow/taskflow</li>\\n<li>网站: https://taskflow.github.io/</li>\\n</ul>\\n</li>\\n<li><strong>C++ Actor Framework (C++ CAF)</strong>: CAF 是一个用于构建并发应用的 C++ 库。它提供了一种基于 Actor 模型的编程方式，允许用户创建多个 Actor，并定义 Actor 之间的消息传递。虽然 CAF 不是专为数据处理流程设计的，但你可以使用 Actor 模型来构建模块化的数据处理流程。\\n<ul>\\n<li>GitHub: https://github.com/actor-framework/actor-framework</li>\\n<li>网站: https://actor-framework.org/</li>\\n</ul>\\n</li>\\n</ol>\\n<p>这些库和框架都有相似的设计理念，即将数据处理过程分解为多个节点，并通过定义节点的输入和输出类型来构建可扩展的、模块化的数据处理流程。你可以根据自己的需求和使用的编程语言选择合适的库来实现数据处理流程。</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/流编程.md","value":{"title":"流编程","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/流编程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,c as data};
