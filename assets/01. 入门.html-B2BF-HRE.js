import{_ as s,e as i,g as e,o as a}from"./app-BapqMaOt.js";const n={};function o(r,t){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="boost" tabindex="-1"><a class="header-anchor" href="#boost"><span>Boost</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h1><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考"><span>学习参考</span></a></h2><p>PDF</p><ul><li>Boost库学习指南.pdf</li><li>Boost库官方完全翻译最详细教程.pdf（但只有三章）</li><li>Boost程序库完全开发指南：深入C++“准”标准库 第4版.pdf（很厚的一本书、深入）</li><li>Learning Boost C++ Libraries.pdf（没有翻译）</li></ul><p>网站</p><ul><li>http://zh.highscore.de/cpp/boost/（主要参考）</li><li>[官方网站](https://www.boost.org/)</li><li>[官网文档](https://www.boost.org/doc/libs/1_78_0/)（推荐从官网主页进入）</li></ul><h2 id="下载和编译-boost" tabindex="-1"><a class="header-anchor" href="#下载和编译-boost"><span>下载和编译 Boost</span></a></h2><h3 id="流程简概" tabindex="-1"><a class="header-anchor" href="#流程简概"><span>流程简概</span></a></h3><p>Boost C++ 库均带有源代码。其中大多数库只包含头文件，<strong>可以直接使用</strong>，但也有一些库需要编译。</p><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><p>去官方网站下载，有Unix版本和Windows版本，下载后解压</p><p>[官方网站](https://www.boost.org/)</p><p>解压</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">boost_1_78_0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (bin.v2)					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行b2.exe后生成，文件夹非常大</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> boost</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 里面有各种库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> any</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  │</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  any.hpp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  └─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doc</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libs</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> more</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (status)					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行b2.exe后生成</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tools</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ├─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build/src/engine/b2.exe</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 这两个exe文件是一样的，但和根的那个b2.exe不同</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  └─</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build/src/engine/bjam.ex</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 这两个exe文件是一样的，但和根的那个b2.exe不同</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (b2.exe)					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行booststrap之后才会出现这个文件，默认安装再点击这个Build Boost C++ Libraries.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  boost.css</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  boost.png</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  boost-build.jam</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  boostcpp.jam</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  bootstrap.bat</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# Windows运行这个编译 bjam</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  bootstrap.sh</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# Linux运行这个 bjam</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  index.htm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  index.html</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  INSTALL</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Jamroot</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  LICENSE_1_0.txt</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (project-config.jam)		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行b2.exe后生成</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  README.md</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">│</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  rst.css</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><h4 id="听不懂" tabindex="-1"><a class="header-anchor" href="#听不懂"><span>（听不懂）</span></a></h4><blockquote><p>为了尽可能容易安装，可以使用 Boost Jam 进行自动安装。无需逐个库进行检查和编译，Boost Jam自动安装整个库集。 它支持许多操作系统和编译器，并且知道如何基于适当的配置文件来编译单个库。</p><p>为了在 Boost Jam 的帮助下自动安装，要使用一个名为 <strong>bjam</strong> 的应用程序，它也带有源代码。 对于某些操作系统，包括 Windows 和 Linux，也有预编译好的 <strong>bjam</strong> 二进制文件。</p><p>为了编译 <strong>bjam</strong> 本身，要执行一个名为 <strong>build</strong> 的简单脚本，它也为不同的操作系统提供了源代码。<br> 对于 Windows，它是批处理文件 <code>build.bat</code>。 对于 Linux，文件名为 <code>build.sh</code>。</p><p>如果执行 <strong>build</strong> 时不带任何命令行选项，则该脚本尝试找到一个合适的编译器来生成 <strong>bjam</strong>。 通过使用命令行开关，称为 toolset，可以选择特定的编译器。 对于 Windows，<strong>build</strong> 支持 toolsets <code>vc7</code>, <code>vc8</code> 和 <code>vc9</code>，可以选择不同版本的 Microsoft C++ 编译器。 要从 Visual Studio 2008 的C++编译器编译 <strong>bjam</strong>，需要指定命令 <strong>build vc9</strong>。对于 Linux，支持 toolsets <code>gcc</code> 和 <code>intel-linux</code>，分别选定 GCC 和 Intel 的C++编译器。</p><p>应用程序 <strong>bjam</strong> 必须复制到本地的 Boost 目录 - 不论它是编译出来的还是下载的预编译二进制文件。 然后就可以不带任何命令行选项地执行 <strong>bjam</strong>，编译并安装 Boost C++ 库。 由于缺省选项 - 在这种情况下所使用的 - 并不一定是最好的选择，所以以下列出最重要的几个选项供参考：</p><ul><li>声明 <code>stage</code> 或 <code>install</code> 可以指定 Boost C++ 库是安装在一个名为 <code>stage</code> 的子目录下，还是在系统范围内安装。 &quot;系统范围&quot;的意义取决于操作系统。 在 Windows 中，目标目录是 <code>C:\\Boost</code>；而在 Linux 中则是 <code>/usr/local</code>。 目标目录也可以用 <code>--prefix</code> 选项明确指出。</li><li>如果不带任何命令行选项执行 <strong>bjam</strong>，则它会自己搜索一个合适的C++编译器。 可以通过 <code>--toolset</code> 选项来指定一个特定的编译器。 要在 Windows 中指定 Visual Studio 2008 的 Microsoft C++ 编译器，<strong>bjam</strong> 执行时要带上 <code>--toolset=msvc-9.0</code> 选项。 要在 Linux 中指定 GCC 编译器，则要给出 <code>--toolset=gcc</code> 选项。</li><li>命令行选项 <code>--build-type</code> 决定了创建何种方式的库。 缺省情况下，该选项设为 <code>minimal</code>，即只创建发布版。 对于那些想用 Visual Studio 或 GCC 构建他们项目的调试版的开发者来说，可能是一个问题。 因为这些编译器会自动尝试链接调试版的 Boost C++ 库，这样就会给出一个错误信息。 在这种情况下，应将 <code>--build-type</code> 选项设为 <code>complete</code>，以同时生成 Boost C++ 库的调试版和发布版，当然，所需时间也会更长一些。</li></ul><p>要用 Visual Studio 2008 的C++编译器同时生成 Boost C++ 库的调试版和发布版，并将它们安装在目录 <code>D:\\Boost</code> 中，应执行的命令是 <strong>bjam --toolset=msvc-9.0 --build-type=complete --prefix=D:\\Boost install</strong>. 要在 Linux 中使用缺省目录创建它们，则要执行的命令是 <strong>bjam --toolset=gcc --build-type=complete install</strong>.</p><p>其它多个命令行选项可用于指定如何编译 Boost C++ 库的一些细节设定。</p><p>我通常在 Windows 下使用以下命令：<strong>bjam --toolset=msvc-9.0 debug release link=static runtime-link=shared install</strong>. <code>debug</code> 和 <code>release</code> 使得调试版和发布版均被生成。 <code>link=static</code> 则只创建静态库。 <code>runtime-link=shared</code> 则是指定 C++ 运行时库是动态链接的，这是在 Visual Studio 2008 中对C++项目的缺省设置。</p></blockquote><h4 id="windows下安装和编译-简化版" tabindex="-1"><a class="header-anchor" href="#windows下安装和编译-简化版"><span>windows下安装和编译（简化版）</span></a></h4><ol><li>不要直接双击bootstrap.bat，要在MSVC命令行中调用bat文件。<br> VS：开始菜单 &gt; Visual Studio 2019 &gt; 找到**Developer Command Prompt...<strong>打开<br> QT：找到</strong>Qt 6.0.3 (MSVC 2019 64-bit)**打开<br> 命令行中cd到boost解压路径并执行 <code>bootstrap.bat</code><br> （我个人放在了 D:\\Soft\\Dev\\Language\\C++\\boost_1_78_0）</li><li>然后依然是在MSVC命令行中调用<code>bjam.exe</code></li></ol><h4 id="bjam参数" tabindex="-1"><a class="header-anchor" href="#bjam参数"><span>Bjam参数</span></a></h4><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bjam</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 					# stage/install：stage只生成库、install还会生成包含头文件的include目录，但编译时间更长。默认stage</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	--toolset</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">msvc-14.0</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 指定编译器，可选的如borland、gcc、msvc-14.0（VS2025）等</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	--without-python</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# --build-type/without/with：complete编译所有boost库，默认complete。without/with选择不编译/编译哪些库	查看boost包含库的命令是bjam --show-libraries</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	--prefix</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;E:\\Learning\\Boost&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># --stagedir/prefix：stage时用stagedir，install时用prefix。表示编译生成文件的路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	link</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">static</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					# 生成动态/静态链接库。参数static仅生成lib文件，参数shared生成lib和dll文件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	runtime-link</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">shared</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 动态/静态链接C/C++运行时库。参数static或shared</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	threading</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">multi</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				# 单/多线程编译。现在基本都是multi方式</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	address-model</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">64</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 64/32位平台，不填就都编译</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	debug</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						# debug/release，不填就都编译</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道为什么，--prefix参数似乎不管用</p><ul><li>install命令生成在<code>C:\\Boost</code>，里面有include和lib文件</li><li>stage命令生成在<code>D:\\Soft\\Dev\\Language\\C++\\boost_1_78_0\\stage</code>，里面只有lib文件</li></ul><h3 id="库的概述" tabindex="-1"><a class="header-anchor" href="#库的概述"><span>库的概述</span></a></h3><p>Boost C++ 库的 1.42.0 版本包含了超过90个库，中文站中只详细讨论了以下各库：</p><blockquote><table><thead><tr><th>Boost C++ 库</th><th>C++ 标准</th><th>简要说明</th></tr></thead><tbody><tr><td><a href="http://zh.highscore.de/cpp/boost/datastructures.html#datastructures_any" target="_blank" rel="noopener noreferrer">Boost.Any</a></td><td></td><td>Boost.Any 提供了一个名为 <code>boost::any</code> 的数据类型，可以存放任意的类型。 例如，一个类型为 <code>boost::any</code> 的变量可以先存放一个 <code>int</code> 类型的值，然后替换为一个 <code>std::string</code> 类型的字符串。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/containers.html#containers_array" target="_blank" rel="noopener noreferrer">Boost.Array</a></td><td>TR1</td><td>Boost.Array 可以把 C++ 数组视同 C++ 标准的容器。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/asio.html" target="_blank" rel="noopener noreferrer">Boost.Asio</a></td><td>TR2</td><td>Boost.Asio 可用于开发异步处理数据的应用，如网络应用。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/containers.html#containers_bimap" target="_blank" rel="noopener noreferrer">Boost.Bimap</a></td><td></td><td>Boost.Bimap 提供了一个名为 <code>boost::bimap</code> 的类，它类似于 <code>std::map</code>. 主要的差别在于 <code>boost::bimap</code> 可以同时从键和值进行搜索。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/functionobjects.html#functionobjects_bind" target="_blank" rel="noopener noreferrer">Boost.Bind</a></td><td>TR1</td><td>Boost.Bind 是一种适配器，可以将函数作为模板参数，即使该函数的签名与模板参数不兼容。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/castoperators.html#castoperators_conversion" target="_blank" rel="noopener noreferrer">Boost.Conversion</a></td><td></td><td>Boost.Conversion 提供了三个转型操作符，分别执行向下转型、交叉转型，以及不同数字类型间的值转换。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/datetime.html" target="_blank" rel="noopener noreferrer">Boost.DateTime</a></td><td></td><td>Boost.DateTime 可用于以灵活的格式处理、读入和写出日期及时间值。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/errorhandling.html#errorhandling_exception" target="_blank" rel="noopener noreferrer">Boost.Exception</a></td><td></td><td>Boost.Exception 可以在抛出的异常中加入额外的数据，以便在 <code>catch</code> 处理中提供更多的信息。 这有助于更容易地调试，以及对异常情况更好地作出反应。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/filesystem.html" target="_blank" rel="noopener noreferrer">Boost.Filesystem</a></td><td>TR2</td><td>Boost.Filesystem 提供了一个类来处理路径信息，还包含了几个访问文件和目录的函数。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/stringhandling.html#stringhandling_format" target="_blank" rel="noopener noreferrer">Boost.Format</a></td><td></td><td>Boost.Format 以一个类型安全且可扩展的 <code>boost::format</code> 类替代了 <code>std::printf()</code> 函数。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/functionobjects.html#functionobjects_function" target="_blank" rel="noopener noreferrer">Boost.Function</a></td><td>TR1</td><td>Boost.Function 简化了函数指针的定义。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/interprocesscommunication.html" target="_blank" rel="noopener noreferrer">Boost.Interprocess</a></td><td></td><td>Boost.Interprocess 允许多个应用通过共享内存以快速、高效的方式进行通信。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/functionobjects.html#functionobjects_lambda" target="_blank" rel="noopener noreferrer">Boost.Lambda</a></td><td></td><td>Boost.Lambda 可以定义匿名的函数。 代码被内联地声明和执行，避免了单独的函数调用。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/containers.html#containers_multiindex" target="_blank" rel="noopener noreferrer">Boost.Multiindex</a></td><td></td><td>Boost.Multiindex 定义了一些新的容器，它们可以同时支持多个接口，如 <code>std::vector</code> 和 <code>std::map</code> 的接口。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/castoperators.html#castoperators_numeric_conversion" target="_blank" rel="noopener noreferrer">Boost.NumericConversion</a></td><td></td><td>Boost.NumericConversion 提供了一个转型操作符，可以安全地在不同的数字类型间进行值转换，不会生成上溢出或下溢出的条件。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/smartpointers.html#smartpointers_pointer_container" target="_blank" rel="noopener noreferrer">Boost.PointerContainer</a></td><td></td><td>Boost.PointerContainer 提供了专门为动态分配对象进行优化的容器。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/functionobjects.html#functionobjects_ref" target="_blank" rel="noopener noreferrer">Boost.Ref</a></td><td>TR1</td><td>Boost.Ref 的适配器可以将不可复制对象的引用传给需要复制的函数。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/stringhandling.html#stringhandling_regex" target="_blank" rel="noopener noreferrer">Boost.Regex</a></td><td>TR1</td><td>Boost.Regex 提供了通过正则表达式进行文本搜索的函数。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/serialization.html" target="_blank" rel="noopener noreferrer">Boost.Serialization</a></td><td></td><td>通过 Boost.Serialization，对象可以被序列化，如保存在文件中，并在以后重新导入。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/eventhandling.html" target="_blank" rel="noopener noreferrer">Boost.Signals</a></td><td></td><td>Boost.Signal 是一个事件处理的框架，基于所谓的 signal/slot 概念。 函数与信号相关联并在信号被触发时自动被调用。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/smartpointers.html" target="_blank" rel="noopener noreferrer">Boost.SmartPoiners</a></td><td>TR1</td><td>Boost.SmartPoiners 提供了多个智能指针，简化了动态分配对象的管理。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/parser.html" target="_blank" rel="noopener noreferrer">Boost.Spirit</a></td><td></td><td>Boost.Spirit 可以用类似于 EBNF (扩展巴科斯范式)的语法生成词法分析器。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/stringhandling.html#stringhandling_stringalgorithms" target="_blank" rel="noopener noreferrer">Boost.StringAlgorithms</a></td><td></td><td>Boost.StringAlgorithms 提供了多个独立的函数，以方便处理字符串。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/errorhandling.html#errorhandling_system" target="_blank" rel="noopener noreferrer">Boost.System</a></td><td>TR2</td><td>Boost.System 提供了一个处理系统相关或应用相关错误代码的框架。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/multithreading.html" target="_blank" rel="noopener noreferrer">Boost.Thread</a></td><td>C++0x</td><td>Boost.Thread 可用于开发多线程应用。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/stringhandling.html#stringhandling_tokenizer" target="_blank" rel="noopener noreferrer">Boost.Tokenizer</a></td><td></td><td>Boost.Tokenizer 可以对一个字符串的各个组件进行迭代。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/datastructures.html#datastructures_tuple" target="_blank" rel="noopener noreferrer">Boost.Tuple</a></td><td>TR1</td><td>Boost.Tuple 提供了泛化版的 <code>std::pair</code>，可以将任意数量的数据组在一起。</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/containers.html#containers_unordered" target="_blank" rel="noopener noreferrer">Boost.Unordered</a></td><td>TR1</td><td>Boost.Unordered 扩展了 C++ 标准的容器，增加了<code>boost::unordered_set</code> 和 <code>boost::unordered_map</code>.</td></tr><tr><td><a href="http://zh.highscore.de/cpp/boost/datastructures.html#datastructures_variant" target="_blank" rel="noopener noreferrer">Boost.Variant</a></td><td></td><td>Boost.Variant 可以定义多个数据类型，类似于 <code>union</code>, 将多个数据类型组在一起。 Boost.Variant 比 <code>union</code> 优胜的地方在于它可以使用类。</td></tr></tbody></table></blockquote>`,28)]))}const d=s(n,[["render",o],["__file","01. 入门.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/01.%20%E9%80%9A%E7%94%A8/01.%20%E5%85%A5%E9%97%A8.html","title":"Boost","lang":"zh-CN","frontmatter":{"description":"Boost 目录 入门 学习参考 PDF Boost库学习指南.pdf Boost库官方完全翻译最详细教程.pdf（但只有三章） Boost程序库完全开发指南：深入C++“准”标准库 第4版.pdf（很厚的一本书、深入） Learning Boost C++ Libraries.pdf（没有翻译） 网站 http://zh.highscore.de/c...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/01.%20%E9%80%9A%E7%94%A8/01.%20%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Boost"}],["meta",{"property":"og:description","content":"Boost 目录 入门 学习参考 PDF Boost库学习指南.pdf Boost库官方完全翻译最详细教程.pdf（但只有三章） Boost程序库完全开发指南：深入C++“准”标准库 第4版.pdf（很厚的一本书、深入） Learning Boost C++ Libraries.pdf（没有翻译） 网站 http://zh.highscore.de/c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Boost\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.67,"words":2600},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/01. 通用/01. 入门.md","excerpt":"\\n<h1>目录</h1>\\n<h1>入门</h1>\\n<h2>学习参考</h2>\\n<p>PDF</p>\\n<ul>\\n<li>Boost库学习指南.pdf</li>\\n<li>Boost库官方完全翻译最详细教程.pdf（但只有三章）</li>\\n<li>Boost程序库完全开发指南：深入C++“准”标准库 第4版.pdf（很厚的一本书、深入）</li>\\n<li>Learning Boost C++ Libraries.pdf（没有翻译）</li>\\n</ul>\\n<p>网站</p>\\n<ul>\\n<li>http://zh.highscore.de/cpp/boost/（主要参考）</li>\\n<li>[官方网站](https://www.boost.org/)</li>\\n<li>[官网文档](https://www.boost.org/doc/libs/1_78_0/)（推荐从官网主页进入）</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/01. 通用/01. 入门.md","value":{"title":"01. 入门","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/01. 通用/01. 入门.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,h as data};
