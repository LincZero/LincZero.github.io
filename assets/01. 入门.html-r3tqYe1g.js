import{_ as t,e as n,g as a,o as i}from"./app-BapqMaOt.js";const o={};function r(l,e){return i(),n("div",null,e[0]||(e[0]=[a('<h1 id="gitlab-cicd" tabindex="-1"><a class="header-anchor" href="#gitlab-cicd"><span>GitLab CICD</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h1><h2 id="资料准备" tabindex="-1"><a class="header-anchor" href="#资料准备"><span>资料准备</span></a></h2><p>参考资料：</p><ul><li><a href="https://docs.gitlab.cn/jh/ci/quick_start/" target="_blank" rel="noopener noreferrer">【官网】官网中文文档</a></li><li><a href="https://about.gitlab.com/solutions/continuous-integration/" target="_blank" rel="noopener noreferrer">【官网】</a></li><li><a href="https://juejin.cn/post/6844904045581172744" target="_blank" rel="noopener noreferrer">【掘金】Gitlab-CI使用教程</a></li></ul><p>关键术语：</p><ul><li><p>CI，Continuous Integration，持续集成</p><p>即在源代码变更后（git push）后自动检测（code lint）、构建和进行单元测试的过程，持续集成的目标是快速确保开发人员新提交的代码是好的（少bug）</p></li><li><p>CD，Continuous Delivery，持续交付</p><p>通常是指整个流程链（管道），它自动监测源代码变更并通过构建、测试、打包和相关操作运行它们以生成可部署的版本（可以是apk打包，也可以是网站部署），基本上没有任何人为干预。它包括持续集成，持续测试（保证代码质量），持续部署（自动发布版本，供用户使用）。</p></li><li><p>相似的工具</p><p>有Jenkins、Travis CI、GoCD等</p><ul><li><p>GitLab的CI/CD</p><p>Gitlab的CI/CD算是比较简单的了，只需要依靠一份&quot;.gitlab-ci.yml&quot;，将该文件随代码上传，Gitlab就会自动执行相应的任务，从而实现CI/CD。</p></li><li><p>GitHub的CI/CD</p><p>.github/workflows/CI.yml</p></li><li><p>选用</p></li></ul></li></ul><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><p>要使用Gitlab的CI/CD功能，一般有以下几种选择：</p><ul><li><p>第一，自己搭一套Gitlab，再加上部署自己的Runner（即实际执行代码的机器），推荐docker部署</p></li><li><p>第二，使用公司/官方的Gitlab，且使用自带的Runner，即shared Runner, 见下图。</p><p>图：https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/11/16f93345728eccb0~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp</p></li></ul><p>link：<br><a href="https://juejin.cn/post/6844903544496062472" target="_blank" rel="noopener noreferrer">juejin.cn/post/684490…</a><br><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.xuxusheng.com%2Fpost%2F%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2GitLab-CI-Runner" target="_blank" rel="noopener noreferrer">www.xuxusheng.com/post/使用Dock…</a><br><a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.gitlab.com%2Frunner%2Finstall%2Fdocker.html" target="_blank" rel="noopener noreferrer">docs.gitlab.com/runner/inst…</a></p><h2 id="gitlab-ci-编写" tabindex="-1"><a class="header-anchor" href="#gitlab-ci-编写"><span>Gitlab-ci 编写</span></a></h2><p><code>.gitlab-ci.yml</code>遵循YAML文件的语法，这份文件记录了你想要执行的各种指令，这些指令可以用来对你的代码进行规范检查（例如PEP8）、自动打包（例如Android自动打包）、自动部署等。</p><p>对于新手，如果不知道自己写的<code>.gitlab-ci.yml</code>是否有错误，可以通过Gitlab自带的<code>CI Lint</code>进行检查。</p><p>本文使用版本：<code>GitLab Community Edition 12.5.6-ee</code></p>',16)]))}const s=t(o,[["render",r],["__file","01. 入门.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/04.%20%E9%83%A8%E7%BD%B2%E7%AE%A1%E7%90%86/CICD/GitLab%20CICD/01.%20%E5%85%A5%E9%97%A8.html","title":"GitLab CICD","lang":"zh-CN","frontmatter":{"description":"GitLab CICD 目录 入门 资料准备 参考资料： 【官网】官网中文文档 【官网】 【掘金】Gitlab-CI使用教程 关键术语： CI，Continuous Integration，持续集成 即在源代码变更后（git push）后自动检测（code lint）、构建和进行单元测试的过程，持续集成的目标是快速确保开发人员新提交的代码是好的（少bu...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/04.%20%E9%83%A8%E7%BD%B2%E7%AE%A1%E7%90%86/CICD/GitLab%20CICD/01.%20%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"GitLab CICD"}],["meta",{"property":"og:description","content":"GitLab CICD 目录 入门 资料准备 参考资料： 【官网】官网中文文档 【官网】 【掘金】Gitlab-CI使用教程 关键术语： CI，Continuous Integration，持续集成 即在源代码变更后（git push）后自动检测（code lint）、构建和进行单元测试的过程，持续集成的目标是快速确保开发人员新提交的代码是好的（少bu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitLab CICD\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.78,"words":535},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/04. 部署管理/CICD/GitLab CICD/01. 入门.md","excerpt":"\\n<h1>目录</h1>\\n<h1>入门</h1>\\n<h2>资料准备</h2>\\n<p>参考资料：</p>\\n<ul>\\n<li><a href=\\"https://docs.gitlab.cn/jh/ci/quick_start/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【官网】官网中文文档</a></li>\\n<li><a href=\\"https://about.gitlab.com/solutions/continuous-integration/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【官网】</a></li>\\n<li><a href=\\"https://juejin.cn/post/6844904045581172744\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【掘金】Gitlab-CI使用教程</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/04. 部署管理/CICD/GitLab CICD/01. 入门.md","value":{"title":"01. 入门","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/04. 部署管理/CICD/GitLab CICD/01. 入门.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,c as data};
