import{_ as p,c as o,e as a,a as e,d as s,b as l,o as c,r as i}from"./app-EY9a-RQV.js";const r={},u={href:"https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const t=i("ExternalLinkIcon");return c(),o("div",null,[n[2]||(n[2]=a('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="反射-reflect" tabindex="-1"><a class="header-anchor" href="#反射-reflect"><span>反射 Reflect</span></a></h1>',3)),e("p",null,[n[1]||(n[1]=s("额外参考：")),e("a",u,[n[0]||(n[0]=s("【博客园】大白话说Java反射：入门、使用、原理")),l(t)])]),n[3]||(n[3]=a(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>什么是反射？</p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h3><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Apple</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接初始化，「正射」</span>
apple<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这样子进行类对象的初始化，我们可以理解为「正」。</p><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。</p><p>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.chenshuyi.reflect.Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;setPrice&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样， 第一段代码在未运行时就已经确定了要运行的类（Apple）， 而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）。</p>`,11))])}const v=p(r,[["render",d],["__file","01. 反射 Reflect.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/05.%20%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/01.%20%E5%8F%8D%E5%B0%84%20Reflect.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 反射 Reflect 额外参考：【博客园】大白话说Java反射：入门、使用、原理 概念 什么是反射？ 反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。 举例 一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。 上面这样子...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/05.%20%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/01.%20%E5%8F%8D%E5%B0%84%20Reflect.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 反射 Reflect 额外参考：【博客园】大白话说Java反射：入门、使用、原理 概念 什么是反射？ 反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。 举例 一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。 上面这样子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"反射 Reflect","slug":"反射-reflect","link":"#反射-reflect","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"举例","slug":"举例","link":"#举例","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/05. 类的动态性/01. 反射 Reflect.md","excerpt":"\\n<h1>目录</h1>\\n<h1>反射 Reflect</h1>\\n<p>额外参考：<a href=\\"https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【博客园】大白话说Java反射：入门、使用、原理</a></p>\\n<h2>概念</h2>\\n<p>什么是反射？</p>\\n<p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p>\\n<h3>举例</h3>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/05. 类的动态性/01. 反射 Reflect.md","value":{"title":"01. 反射 Reflect","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/05. 类的动态性/01. 反射 Reflect.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{v as comp,m as data};
