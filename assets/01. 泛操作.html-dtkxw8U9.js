import{_ as s,c as a,e as t,o as n}from"./app-CcegWvWz.js";const l={};function h(e,i){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="rust类型泛操作" tabindex="-1"><a class="header-anchor" href="#rust类型泛操作"><span>Rust类型泛操作</span></a></h1><h2 id="rust-的数据类型" tabindex="-1"><a class="header-anchor" href="#rust-的数据类型"><span>Rust 的数据类型</span></a></h2><p>类型，我们先说一下现实中的菜系吧，<br> 鲁菜、川菜、粤菜 、苏菜 、闽菜 、浙菜 、徽菜 、湘菜，都有不同的口味，当说到哪一个体系的菜的时候，你会知道它的特点，并且适合哪些人去吃。</p><p>那说回到计算机，数据类型也是一样的，就是存储和运算，并且要检查和保证这个数据在这个类型中是有效的。</p><p>Rust 是一个严格的<strong>静态类型</strong>语言。每个值都有唯一的数据类型，要么是整型，要么是浮点型等等。</p><h3 id="声明变量" tabindex="-1"><a class="header-anchor" href="#声明变量"><span>声明变量</span></a></h3><p>Rust 语言在赋值时并不强制要求指定变量的数据类型，Rust 编译器可以根据分配给它的值<strong>自动推断</strong>变量的数据类型<br> （类似于C++的auto，是类型推断，而非弱类型语言）</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // let 变量名 = 值;						// 通用格式，使用 let 关键字</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> food</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;清蒸螃蟹&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// string 字符串类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 366</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// float 类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> checked</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// boolean 类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;food is:{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">food</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); 			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 food is:清蒸螃蟹</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price is:{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price is:366</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;checked is :{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">checked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 checked is :true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><p>Rust 语言中有四种标量数据类型：</p><ul><li>整型</li><li>浮点型</li><li>布尔类型</li><li>字符类型</li></ul><h2 id="泛类型-定义变量-常量" tabindex="-1"><a class="header-anchor" href="#泛类型-定义变量-常量"><span>泛类型 - 定义变量/常量</span></a></h2><p>在计算机里硬件有内存条，当通电以后，会被加载到操作系统中，我们可以认为这是一个大酒店，但是它内部是要有房间的，每个房间都有自己的位置，有自己的名称，这样管理的好处是方便，直接，所以计算机也采用了这样的模式。</p><h3 id="声明变量-1" tabindex="-1"><a class="header-anchor" href="#声明变量-1"><span>声明变量</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值;           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不指定变量类型 (本质是类型推导，而非弱类型)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名:数据类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定变量类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 就是给 某一块内存地址 起名字。比如: s=内存地址 1、s2=内存地址 2 。</p><p>前面说过 变量是有数据类型的，所以 内存存储的数据也是有数据类型的。</p><h3 id="变量的命名规范" tabindex="-1"><a class="header-anchor" href="#变量的命名规范"><span>变量的命名规范</span></a></h3><p>三个限制：</p><ul><li><p>可以包含 字母、数字 和 下划线 。</p></li><li><p>变量名必须以 字母 或 下划线 开头。不能以 数字 开头。</p></li><li><p>变量名是 区分大小 写的。也就是大写的 Study 和小写的 study 是两个不同的变量。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> Study</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    print!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">study</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 报错如下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">study</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">^^^^^</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> local</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> variable</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> with</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> similar</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">notice</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> capitalization</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">): \`</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">Study</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="let-不可变变量" tabindex="-1"><a class="header-anchor" href="#let-不可变变量"><span>let - 不可变变量</span></a></h3><p>Rust 语言中使用 let 声明的变量，在第一次赋值之后，是不可变更不可重新赋值的，变成了 只读 状态。</p><ul><li>与其他语言不同，Rust在<strong>默认情况下</strong>变量是<strong>不可变</strong>的。对于小白来说，Rust的这种做法能大大提高了不可变类型的使用率</li><li>而其他语言中，往往默认可变，而不可变需要另外标注</li></ul><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 188</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 288</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编译器报错提示：Cannot assign twice to immutable variable [E0384]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mut-可变变量" tabindex="-1"><a class="header-anchor" href="#mut-可变变量"><span>mut - 可变变量</span></a></h3><p>Rust 语言提供了 mut 关键字表示 可变的。 在变量名的前面加上 mut 关键字告诉编译器这个变量是可以重新赋值的。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用格式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名:数据类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 188</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 288</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 288</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其实我觉得不写let直接用mut表示可变变量可能会更好，kotlin的 var、val、const 分别表示变量、运行期常量、编译期常量，感觉该做法比较优雅</p><p>而rust的做法是mut作为修饰关键字，复用使用来声明：let mut、static mut 静态可变变量</p></blockquote><h3 id="变量重复定义-——-变量的隐藏" tabindex="-1"><a class="header-anchor" href="#变量重复定义-——-变量的隐藏"><span>变量重复定义 —— 变量的隐藏</span></a></h3><p>Rust 语言中<strong>允许重复定义</strong>一个相同变量名的变量。规则是 后面定义的变量会隐藏 前面定义的同名变量。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;《Go语言极简一本通》&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;《从0到Go语言微服务架构师》&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二次定义会隐藏第一次定义的变量</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 《从0到Go语言微服务架构师》</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 199</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;299&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; 		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 甚至对于不同类型也可以隐藏并且改变了数据类型</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 299</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Linc：这可能会带来灵活性，但我个人认为这比较危险的操作，不如重新定义一个新名字的变量。我认为这是一个糟糕的设计</p><h2 id="泛类型-常量" tabindex="-1"><a class="header-anchor" href="#泛类型-常量"><span>泛类型 - 常量</span></a></h2><p>常量 就是那些值不能被改变的变量。<strong>定义后</strong>，再也没有任何方法可以改变常量的值。</p><p>有个特例就是 “string” 字面量。它可以不经改动就被赋给一个 static 变量，因为它 的类型标记：&amp;’static str 就包含了所要求的生命周期 ‘static。其他的引用类型都 必须特地声明，使之拥有’static 生命周期。</p><h3 id="const-常量" tabindex="-1"><a class="header-anchor" href="#const-常量"><span>const - 常量</span></a></h3><p>使用 const 关键字定义常量。</p><p>常量名称的命名规则和之前变量的命名规则一样，但常量名称一般都是 <strong>大写字母</strong>。</p><p>常量 可以在任意作用域里定义，包括全局作用域。也就是可以在任何地方定义。</p><p>与一些语言不同，这里的 常量 只是一个符号，会在 <strong>编译时</strong> 替换为具体的值。（编译期常量+要指定类型，所以更类似于C++的constexpr而非const或宏）</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用格式</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 常量名称:数据类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 值;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> PI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.1415926</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">PI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//输出 3.1415926</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量重复定义-——-禁止" tabindex="-1"><a class="header-anchor" href="#常量重复定义-——-禁止"><span>常量重复定义 —— 禁止</span></a></h3><p>Rust 中，常量不能被隐藏，也不能被重复定义。（复习一下：变量的重复定义行为是变量的隐藏，一个操蛋设计）</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DISCOUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> DISCOUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编辑器报错</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> named</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DISCOUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">has</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> already</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> been</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> defined</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> this</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">E0428</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这点与大多数语言一样，也就变量的重复定义比较特殊</p><h2 id="泛类型-static" tabindex="-1"><a class="header-anchor" href="#泛类型-static"><span>泛类型 - static</span></a></h2><p>另一种常量的定义方式，需要注意这里的 <code>static</code> 前面有个 <code>&#39;</code> 符号</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> BOOK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: &amp;&#39;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;《Go语言极简一本通》&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以加mut关键子使之可变</p>`,49)]))}const p=s(l,[["render",h],["__file","01. 泛操作.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html","title":"Rust类型泛操作","lang":"zh-CN","frontmatter":{"description":"Rust类型泛操作 Rust 的数据类型 类型，我们先说一下现实中的菜系吧， 鲁菜、川菜、粤菜 、苏菜 、闽菜 、浙菜 、徽菜 、湘菜，都有不同的口味，当说到哪一个体系的菜的时候，你会知道它的特点，并且适合哪些人去吃。 那说回到计算机，数据类型也是一样的，就是存储和运算，并且要检查和保证这个数据在这个类型中是有效的。 Rust 是一个严格的静态类型语言...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust类型泛操作"}],["meta",{"property":"og:description","content":"Rust类型泛操作 Rust 的数据类型 类型，我们先说一下现实中的菜系吧， 鲁菜、川菜、粤菜 、苏菜 、闽菜 、浙菜 、徽菜 、湘菜，都有不同的口味，当说到哪一个体系的菜的时候，你会知道它的特点，并且适合哪些人去吃。 那说回到计算机，数据类型也是一样的，就是存储和运算，并且要检查和保证这个数据在这个类型中是有效的。 Rust 是一个严格的静态类型语言..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust类型泛操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust类型泛操作","slug":"rust类型泛操作","link":"#rust类型泛操作","children":[{"level":2,"title":"Rust 的数据类型","slug":"rust-的数据类型","link":"#rust-的数据类型","children":[{"level":3,"title":"声明变量","slug":"声明变量","link":"#声明变量","children":[]},{"level":3,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]}]},{"level":2,"title":"泛类型 - 定义变量/常量","slug":"泛类型-定义变量-常量","link":"#泛类型-定义变量-常量","children":[{"level":3,"title":"声明变量","slug":"声明变量-1","link":"#声明变量-1","children":[]},{"level":3,"title":"变量的命名规范","slug":"变量的命名规范","link":"#变量的命名规范","children":[]},{"level":3,"title":"let - 不可变变量","slug":"let-不可变变量","link":"#let-不可变变量","children":[]},{"level":3,"title":"mut - 可变变量","slug":"mut-可变变量","link":"#mut-可变变量","children":[]},{"level":3,"title":"变量重复定义 —— 变量的隐藏","slug":"变量重复定义-——-变量的隐藏","link":"#变量重复定义-——-变量的隐藏","children":[]}]},{"level":2,"title":"泛类型 - 常量","slug":"泛类型-常量","link":"#泛类型-常量","children":[{"level":3,"title":"const - 常量","slug":"const-常量","link":"#const-常量","children":[]},{"level":3,"title":"常量重复定义 —— 禁止","slug":"常量重复定义-——-禁止","link":"#常量重复定义-——-禁止","children":[]}]},{"level":2,"title":"泛类型 - static","slug":"泛类型-static","link":"#泛类型-static","children":[]}]}],"git":{},"readingTime":{"minutes":5.3,"words":1590},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/01. 泛操作.md","excerpt":"\\n<h2>Rust 的数据类型</h2>\\n<p>类型，我们先说一下现实中的菜系吧，<br>\\n鲁菜、川菜、粤菜 、苏菜 、闽菜 、浙菜 、徽菜 、湘菜，都有不同的口味，当说到哪一个体系的菜的时候，你会知道它的特点，并且适合哪些人去吃。</p>\\n<p>那说回到计算机，数据类型也是一样的，就是存储和运算，并且要检查和保证这个数据在这个类型中是有效的。</p>\\n<p>Rust 是一个严格的<strong>静态类型</strong>语言。每个值都有唯一的数据类型，要么是整型，要么是浮点型等等。</p>\\n<h3>声明变量</h3>\\n<p>Rust 语言在赋值时并不强制要求指定变量的数据类型，Rust 编译器可以根据分配给它的值<strong>自动推断</strong>变量的数据类型<br>\\n（类似于C++的auto，是类型推断，而非弱类型语言）</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/01. 泛操作.md","value":{"title":"01. 泛操作","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/01. 泛操作.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,r as data};
