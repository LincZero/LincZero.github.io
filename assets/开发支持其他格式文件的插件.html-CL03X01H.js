import{_ as o,c,a as s,d as a,b as p,e,o as i,r as l}from"./app-T3I-xDym.js";const u={},d={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/TextFileView.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/getting-started/create-your-first-plugin.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/user-interface/html-elements.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/TextFileView.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/user-interface/views.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.papaparse.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/user-interface/html-elements.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://orgmode.org/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.bibtex.org/",target:"_blank",rel:"noopener noreferrer"};function y(h,n){const t=l("ExternalLinkIcon");return i(),c("div",null,[n[24]||(n[24]=s("h1",{id:"开发支持其他格式文件的插件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#开发支持其他格式文件的插件"},[s("span",null,"开发支持其他格式文件的插件")])],-1)),n[25]||(n[25]=s("p",null,"Obsidian 内置对 Markdown 文件以及其他多媒体类型文件，例如图片以及 PDF 的支持。作为一个插件开发者，您可以扩展 Obsidian 以支持其他的文件类型。在本教程中，您将构建一个用于阅读及编辑 CSV 文件的 Obsidian 插件。",-1)),n[26]||(n[26]=s("p",null,"在看完本教程后，您将可以：",-1)),s("ul",null,[s("li",null,[n[1]||(n[1]=a("使用 ")),s("a",d,[n[0]||(n[0]=a("TextFileView")),p(t)]),n[2]||(n[2]=a(" 去展示及编辑基于文本的文件格式。"))])]),n[27]||(n[27]=s("h2",{id:"前置准备",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前置准备"},[s("span",null,"前置准备")])],-1)),s("ul",null,[s("li",null,[s("a",r,[n[3]||(n[3]=a("创建您的第一个插件")),p(t)]),n[4]||(n[4]=a("。"))]),s("li",null,[n[6]||(n[6]=a("理解如何去创建基本的 ")),s("a",k,[n[5]||(n[5]=a("HTML 元素")),p(t)]),n[7]||(n[7]=a("。"))])]),n[28]||(n[28]=s("h2",{id:"第一步-—-注册一个-textfileview",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第一步-—-注册一个-textfileview"},[s("span",null,[a("第一步 — 注册一个 "),s("code",null,"TextFileView")])])],-1)),s("p",null,[s("a",v,[n[8]||(n[8]=a("TextFileView")),p(t)]),n[10]||(n[10]=a(" 是一个用于从插件中读写文本文件的 ")),s("a",b,[n[9]||(n[9]=a("自定义视图")),p(t)]),n[11]||(n[11]=a("。在此步骤中，您将扩展 TextFileView 以及当用户打开一个 CSV 文件时通知 Obsidian 去使用它。"))]),n[29]||(n[29]=e(`<ol><li>创建一个名为 <code>view.ts</code> 的新文件，并写入以下内容：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [!file] view.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TextFileView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">VIEW_TYPE_CSV</span> <span class="token operator">=</span> <span class="token string">&quot;csv-view&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CSVView</span> <span class="token keyword">extends</span> <span class="token class-name">TextFileView</span> <span class="token punctuation">{</span>
  <span class="token function">getViewData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">setViewData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> clear<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getViewType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">VIEW_TYPE_CSV</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 <code>main.ts</code> 文件中，在 <code>onload</code> 方法中注册视图。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [!file] main.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CSVView<span class="token punctuation">,</span> <span class="token constant">VIEW_TYPE_CSV</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./view&quot;</span>
<span class="token operator">...</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerView</span><span class="token punctuation">(</span>
  <span class="token constant">VIEW_TYPE_CSV</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>leaf<span class="token operator">:</span> WorkspaceLeaf<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CSVView</span><span class="token punctuation">(</span>leaf<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>注册您想要视图处理的扩展。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// [!file] main.ts</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerExtensions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;csv&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">VIEW_TYPE_CSV</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>重新构建插件。</li><li>在文件管理器中，点击 CSV 文件以打开视图。</li></ol><p>不幸的是，视图并未展示数据，因为它还不知道如何去展示。要想在视图中渲染 CSV 数据，需要在 <code>setViewData</code> 方法中添加以下代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">setViewData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> clear<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">createDiv</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在您可以在 Obsidian 中加载并显示 CSV 数据了。视图将 CSV 文件的原始内容打印在一个 <code>div</code> 标签内。在稍后的教程中，您将把数据渲染成 HTML 的表格，但在此之前，您首先需要将数据解析成更加合适的数据结构。</p><h2 id="第二步-文本数据的编码及解码" tabindex="-1"><a class="header-anchor" href="#第二步-文本数据的编码及解码"><span>第二步 - 文本数据的编码及解码</span></a></h2><p>TextFileView 提供了一个方便的属性，<code>this.data</code>, 您可以将文本内容作为 <code>string</code> 类型存储其中。虽然它适用于更简单的用例，但与此同时它也将使得访问单个单元格的值变得较为困难。在本步骤中，您将创建表数据的更加有用的内存表示。</p><p>TextFileView 提供了一组有用的方法用于处理文本文件：</p><ul><li><code>getViewData()</code> 返回当前数据状态。Obsidian 使用此方法在写入文件前将视图数据解码成纯文本内容。</li><li><code>setViewData()</code> 在 Obsidian 从文件中读取新数据时更新视图。使用此方法将文本数据编码成更易于使用的格式。</li><li><code>clear()</code> 方法会在 Obsidian 卸载文件时重置视图。</li></ul><p>当表格是一个二维的数据结构时，使用二维的字符串数组，<code>string[][]</code> 将会是个更好的选择。</p><p>要想将 <code>this.data</code> 替换为自定义的内存表示：</p><ol><li>添加 <code>string[][]</code> 类型的 <code>tableData</code> 属性。</li><li>更新 <code>getViewData()</code> 及 <code>setViewData()</code> 方法以将 CSV 数据转换为 <code>tableData</code>。</li><li>更新 <code>clear()</code> 方法以重置视图数据。</li></ol>`,17)),s("p",null,[n[13]||(n[13]=a("以下是解析 CSV 数据的基本实现。在现实使用中，可以考虑使用一个更加有效的解析器，比如 ")),s("a",m,[n[12]||(n[12]=a("Papa Parse")),p(t)])]),n[30]||(n[30]=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CSVView</span> <span class="token keyword">extends</span> <span class="token class-name">TextFileView</span> <span class="token punctuation">{</span>
  tableData<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">getViewData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">setViewData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> clear<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择一个更加合适的数据结构将使数据处理变得更加容易。</p><p>TIP</p><p>无论何时用户打开一个不同的文件，<code>setViewData</code> 中的 <code>clear</code> 参数始终为 <code>true</code>。使用它可以提升您视图的性能。比如，如果您正在缓存特定文件的数据，并且想要在加载新文件时清除缓存。</p><h2 id="第三步-渲染数据" tabindex="-1"><a class="header-anchor" href="#第三步-渲染数据"><span>第三步 - 渲染数据</span></a></h2><p>为一种文件格式创建一个自定义视图的一个益处是您可以通过更加友好的方式将它呈现出来。在本步骤中，您将会把表格数据渲染成 <code>table</code> 标签。</p>`,6)),s("p",null,[n[15]||(n[15]=a("您可以通过把 HTML 标签插入到 TextFileView 中的 ")),n[16]||(n[16]=s("code",null,"contentEl",-1)),n[17]||(n[17]=a(" 属性中的方式将它们插入到视图中。要想获取更多关于如何创建 HTML 标签的信息，请查阅 ")),s("a",g,[n[14]||(n[14]=a("HTML 标签")),p(t)]),n[18]||(n[18]=a(" 这篇文档。"))]),n[31]||(n[31]=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TextFileView 也暴露出 <code>onOpen()</code> 及 <code>onClose()</code> 钩子，使您可以分别设置及移除您的视图。</p><ol><li>添加一个 <code>HTMLElement</code> 类型的 <code>tableEl</code> 属性。</li><li>添加 <code>onOpen()</code> 方法去创建一个 <code>table</code> 标签。</li><li>添加 <code>onClose()</code> 方法以清除任何您已经创建的标签。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CSVView</span> <span class="token keyword">extends</span> <span class="token class-name">TextFileView</span> <span class="token punctuation">{</span>
  tableEl<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>

  <span class="token comment">// ...</span>

  <span class="token keyword">async</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>onOpen()</code> 以及 <code>onClose()</code> 方法只有在用户打开及关闭视图的时候才会执行。要想在潜在的文件发生改变时更新视图，您需要通过 <code>setViewData()</code> 方法更新 HTML 标签。通过保持对 <code>tableEl</code> 的引用，您可以只更新数据发生变化的那一部分视图。</p><p>要想在磁盘中的数据发生变化时更新视图：</p><ol><li>在 <code>CSVView</code> 类中，添加一个辅助方法用于在 <code>tableEl</code> 标签中渲染表格数据。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Remove previous data.</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> bodyEl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rowEl <span class="token operator">=</span> bodyEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    row<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      rowEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> cell <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在 <code>setViewData()</code> 方法中调用 <code>refresh()</code> 辅助方法。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">setViewData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> clear<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您的插件现在可以适当的将 CSV 数据呈现为表格。您难道不会问，能否更加友好些呢？</p><p>TIP</p><p>取决于您当前使用的 Obsidian 主题，您也许想要设置 table 的样式。要想为您的表格添加基础的 CSS 样式，可以将以下内容添加到根目录下的 <code>style.css</code> 文件中。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">table</span> <span class="token punctuation">{</span>
  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">table,
td</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--background-modifier-border<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">td</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 4px 8px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四步-编辑数据" tabindex="-1"><a class="header-anchor" href="#第四步-编辑数据"><span>第四步 - 编辑数据</span></a></h2><p>到目前为止，用户仅仅可以阅读文件的内容。在本步骤中，您将为每一个单元格添加一个 <code>input</code> 标签，以允许用户编辑 CSV 的值及将它们写入磁盘。</p><p>上一步骤中的 <code>refresh()</code> 辅助方法为每个单元格创建了一个 <code>td</code> 标签。现在，它将单元格中的值作为文本添加到 <code>td</code> 标签中。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>row<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  rowEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> cell <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想让用户可以编辑内容，改用 <code>input</code> 标签添加到 <code>td</code> 标签中。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>row<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  rowEl
    <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attr<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> cell <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户现在可以编辑表格中的内容看了，但是 <code>input</code> 实际上没有更新表格的数据，当您关闭再打开视图时，先前改变的内容并不会被保持。</p><p>要想保存改变的内容，添加 <code>oninput</code> 事件处理器以在 <code>input</code> 中的值发生改变时更新 <code>tableData</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>row<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputEl <span class="token operator">=</span> rowEl
    <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attr<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> cell <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>currentTarget <span class="token keyword">instanceof</span> <span class="token class-name">HTMLInputElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ev<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>input 更新的事件处理器更新 table 在内存中的内容，并通过调用 <code>this.requestSave()</code> 方法告知 Obsidian 更新磁盘中的内容。</p><p>TIP</p><p>将 <code>input</code> 标签的 background 及 border 移除看起来会更好。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">input</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步"><span>下一步</span></a></h2>`,28)),s("p",null,[n[21]||(n[21]=a("在本教程中，您已经构建了一个可以让用户在 Obsidian 中展示以及编辑 CSV 文件的插件。您可以通过相同的步骤去支持其他格式的文件，比如 ")),s("a",w,[n[19]||(n[19]=a("Org Mode")),p(t)]),n[22]||(n[22]=a(" 以及 ")),s("a",f,[n[20]||(n[20]=a("BibTex")),p(t)]),n[23]||(n[23]=a("。"))]),n[32]||(n[32]=e(`<h2 id="完整示例" tabindex="-1"><a class="header-anchor" href="#完整示例"><span>完整示例</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> TextFileView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">VIEW_TYPE_CSV</span> <span class="token operator">=</span> <span class="token string">&quot;csv-view&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CSVView</span> <span class="token keyword">extends</span> <span class="token class-name">TextFileView</span> <span class="token punctuation">{</span>
  tableData<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  tableEl<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>

  <span class="token function">getViewData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// If clear is set, then it means we&#39;re opening a completely different file.</span>
  <span class="token function">setViewData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> clear<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> tableBody <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> tableRow <span class="token operator">=</span> tableBody<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      row<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cell<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> input <span class="token operator">=</span> tableRow
          <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> attr<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> cell <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        input<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>currentTarget <span class="token keyword">instanceof</span> <span class="token class-name">HTMLInputElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ev<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requestSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getViewType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">VIEW_TYPE_CSV</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tableEl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>contentEl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">table</span> <span class="token punctuation">{</span>
  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">table,
td</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">var</span><span class="token punctuation">(</span>--background-modifier-border<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">td</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 4px 8px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">input</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3))])}const D=o(u,[["render",y],["__file","开发支持其他格式文件的插件.html.vue"]]),V=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E3%80%8AObsidian%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E3%80%8B/%E5%BC%80%E5%8F%91%E6%94%AF%E6%8C%81%E5%85%B6%E4%BB%96%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%92%E4%BB%B6.html","title":"开发支持其他格式文件的插件","lang":"zh-CN","frontmatter":{"description":"开发支持其他格式文件的插件 Obsidian 内置对 Markdown 文件以及其他多媒体类型文件，例如图片以及 PDF 的支持。作为一个插件开发者，您可以扩展 Obsidian 以支持其他的文件类型。在本教程中，您将构建一个用于阅读及编辑 CSV 文件的 Obsidian 插件。 在看完本教程后，您将可以： 使用 TextFileView 去展示及编...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E3%80%8AObsidian%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E3%80%8B/%E5%BC%80%E5%8F%91%E6%94%AF%E6%8C%81%E5%85%B6%E4%BB%96%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E7%9A%84%E6%8F%92%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"开发支持其他格式文件的插件"}],["meta",{"property":"og:description","content":"开发支持其他格式文件的插件 Obsidian 内置对 Markdown 文件以及其他多媒体类型文件，例如图片以及 PDF 的支持。作为一个插件开发者，您可以扩展 Obsidian 以支持其他的文件类型。在本教程中，您将构建一个用于阅读及编辑 CSV 文件的 Obsidian 插件。 在看完本教程后，您将可以： 使用 TextFileView 去展示及编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"开发支持其他格式文件的插件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"开发支持其他格式文件的插件","slug":"开发支持其他格式文件的插件","link":"#开发支持其他格式文件的插件","children":[{"level":2,"title":"前置准备","slug":"前置准备","link":"#前置准备","children":[]},{"level":2,"title":"第一步 — 注册一个 TextFileView","slug":"第一步-—-注册一个-textfileview","link":"#第一步-—-注册一个-textfileview","children":[]},{"level":2,"title":"第二步 - 文本数据的编码及解码","slug":"第二步-文本数据的编码及解码","link":"#第二步-文本数据的编码及解码","children":[]},{"level":2,"title":"第三步 - 渲染数据","slug":"第三步-渲染数据","link":"#第三步-渲染数据","children":[]},{"level":2,"title":"第四步 - 编辑数据","slug":"第四步-编辑数据","link":"#第四步-编辑数据","children":[]},{"level":2,"title":"下一步","slug":"下一步","link":"#下一步","children":[]},{"level":2,"title":"完整示例","slug":"完整示例","link":"#完整示例","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.67,"words":2002},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/开发支持其他格式文件的插件.md","excerpt":"\\n<p>Obsidian 内置对 Markdown 文件以及其他多媒体类型文件，例如图片以及 PDF 的支持。作为一个插件开发者，您可以扩展 Obsidian 以支持其他的文件类型。在本教程中，您将构建一个用于阅读及编辑 CSV 文件的 Obsidian 插件。</p>\\n<p>在看完本教程后，您将可以：</p>\\n<ul>\\n<li>使用 <a href=\\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/TextFileView.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TextFileView</a> 去展示及编辑基于文本的文件格式。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"README","link":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/README.html"}],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/开发支持其他格式文件的插件.md","value":{"title":"开发支持其他格式文件的插件","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/开发支持其他格式文件的插件.md","outlink":[],"backlink":["MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/README.md"]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/README.md","value":{"title":"README","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/README.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/README.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/开发支持其他格式文件的插件.md"}]}}}');export{D as comp,V as data};
