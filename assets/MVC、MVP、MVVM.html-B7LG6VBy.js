import{_ as r,c as i,b as e,d as t,e as o,o as d,r as s}from"./app-CdytOEkI.js";const p={},a={href:"https://zh.wikipedia.org/wiki/MVC",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.ruanyifeng.com/blog/2007/11/mvc.html",target:"_blank",rel:"noopener noreferrer"},M={href:"http://blog.nodejitsu.com/scaling-isomorphic-javascript-code/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://angularjs.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://emberjs.com/",target:"_blank",rel:"noopener noreferrer"};function u(w,l){const n=s("ExternalLinkIcon");return d(),i("div",null,[l[14]||(l[14]=e("h1",{id:"mvc、mvp、mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvc、mvp、mvvm"},[e("span",null,"MVC、MVP、MVVM")])],-1)),l[15]||(l[15]=e("p",null,"参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",-1)),l[16]||(l[16]=e("p",null,"复杂的软件必须有清晰合理的架构，否则无法开发和维护。",-1)),e("p",null,[e("a",a,[l[0]||(l[0]=t("MVC")),o(n)]),l[2]||(l[2]=t("（Model-View-Controller）")),l[3]||(l[3]=e("strong",null,"是最常见的软件架构之一",-1)),l[4]||(l[4]=t("，业界有着广泛应用。它本身")),e("a",V,[l[1]||(l[1]=t("很容易理解")),o(n)]),l[5]||(l[5]=t("，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。"))]),e("p",null,[l[7]||(l[7]=t("昨天晚上，我读了")),e("a",M,[l[6]||(l[6]=t("《Scaling Isomorphic Javascript Code》")),o(n)]),l[8]||(l[8]=t("，突然意识到，它们的区别非常简单。我用几段话，就可以说清。"))]),l[17]||(l[17]=e("h2",{id:"mvc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvc"},[e("span",null,"MVC")])],-1)),l[18]||(l[18]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVC")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"Model| View| Controller| Model")])])])])],-1)),l[19]||(l[19]=e("ul",null,[e("li",null,"视图（View）：用户界面 View 传送指令到 Controller"),e("li",null,"控制器（Controller）：业务逻辑 Controller 完成业务逻辑后，要求 Model 改变状态"),e("li",null,"模型（Model）：数据保存 Model 将新的数据发送到 View，用户得到反馈")],-1)),l[20]||(l[20]=e("h2",{id:"互动模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#互动模式"},[e("span",null,"互动模式")])],-1)),l[21]||(l[21]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"互动模式1")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"User| View| Controller| Model| View")])])])])],-1)),l[22]||(l[22]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"互动模式2")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"User| Controller| Model| View")])])])])],-1)),l[23]||(l[23]=e("p",null,"MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。",-1)),l[24]||(l[24]=e("p",null,"另一种是直接通过controller接受指令。",-1)),l[25]||(l[25]=e("h2",{id:"实例-backbone",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实例-backbone"},[e("span",null,"实例：Backbone")])],-1)),l[26]||(l[26]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"Backhone")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"User --> View"),e("li",null,"User --> Controller --> View"),e("li",null,"Controller| Model| View| Model")])])])])],-1)),l[27]||(l[27]=e("p",null,"\\1. 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。",-1)),l[28]||(l[28]=e("p",null,"\\2. 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。",-1)),l[29]||(l[29]=e("p",null,"\\3. Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器）",-1)),l[30]||(l[30]=e("h2",{id:"mvp",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvp"},[e("span",null,"MVP")])],-1)),l[31]||(l[31]=e("p",null,"MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向",-1)),l[32]||(l[32]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVP")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"View --> Presenter --> View"),e("li",null,"Model --> Presenter --> Model")])])])])],-1)),l[33]||(l[33]=e("p",null,"\\1. 各部分之间的通信，都是双向的。",-1)),l[34]||(l[34]=e("p",null,"\\2. View 与 Model 不发生联系，都通过 Presenter 传递。",-1)),l[35]||(l[35]=e("p",null,'\\3. View 非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。',-1)),l[36]||(l[36]=e("h2",{id:"mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvvm"},[e("span",null,"MVVM")])],-1)),l[37]||(l[37]=e("p",null,"MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。",-1)),l[38]||(l[38]=e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVVM")]),e("div",{class:"markdown-rendered ab-deco-title-content"},[e("div",null,[e("ul",null,[e("li",null,"ViewModel| View| ViewModel| Model| ViewModel")])])])])],-1)),e("p",null,[l[11]||(l[11]=t("唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。")),e("a",m,[l[9]||(l[9]=t("Angular")),o(n)]),l[12]||(l[12]=t(" 和 ")),e("a",v,[l[10]||(l[10]=t("Ember")),o(n)]),l[13]||(l[13]=t(" 都采用这种模式。"))])])}const g=r(p,[["render",u],["__file","MVC、MVP、MVVM.html.vue"]]),C=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/MVC%E3%80%81MVP%E3%80%81MVVM.html","title":"MVC、MVP、MVVM","lang":"zh-CN","frontmatter":{"description":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/MVC%E3%80%81MVP%E3%80%81MVVM.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MVC、MVP、MVVM"}],["meta",{"property":"og:description","content":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC、MVP、MVVM\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"MVC、MVP、MVVM","slug":"mvc、mvp、mvvm","link":"#mvc、mvp、mvvm","children":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"互动模式","slug":"互动模式","link":"#互动模式","children":[]},{"level":2,"title":"实例：Backbone","slug":"实例-backbone","link":"#实例-backbone","children":[]},{"level":2,"title":"MVP","slug":"mvp","link":"#mvp","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 管理层/01. 多类管理/架构设计/MVC、MVP、MVVM.md","excerpt":"\\n<p>参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</p>\\n<p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p>\\n<p><a href=\\"https://zh.wikipedia.org/wiki/MVC\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MVC</a>（Model-View-Controller）<strong>是最常见的软件架构之一</strong>，业界有着广泛应用。它本身<a href=\\"https://www.ruanyifeng.com/blog/2007/11/mvc.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">很容易理解</a>，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p>","autoDesc":true}');export{g as comp,C as data};
