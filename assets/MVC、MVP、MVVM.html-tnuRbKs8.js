import{_ as n,c as o,e as r,a as e,f as l,o as i}from"./app-DnpufS1x.js";const a={};function d(s,t){return i(),o("div",null,t[0]||(t[0]=[r('<h1 id="mvc、mvp、mvvm" tabindex="-1"><a class="header-anchor" href="#mvc、mvp、mvvm"><span>MVC、MVP、MVVM</span></a></h1><p>参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</p><p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p><p><a href="https://zh.wikipedia.org/wiki/MVC" target="_blank" rel="noopener noreferrer">MVC</a>（Model-View-Controller）<strong>是最常见的软件架构之一</strong>，业界有着广泛应用。它本身<a href="https://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener noreferrer">很容易理解</a>，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p><p>昨天晚上，我读了<a href="http://blog.nodejitsu.com/scaling-isomorphic-javascript-code/" target="_blank" rel="noopener noreferrer">《Scaling Isomorphic Javascript Code》</a>，突然意识到，它们的区别非常简单。我用几段话，就可以说清。</p><h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h2>',6),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVC")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"Model| View| Controller| Model")])])])])])],-1),e("ul",null,[e("li",null,"视图（View）：用户界面 View 传送指令到 Controller"),e("li",null,"控制器（Controller）：业务逻辑 Controller 完成业务逻辑后，要求 Model 改变状态"),e("li",null,"模型（Model）：数据保存 Model 将新的数据发送到 View，用户得到反馈")],-1),e("h2",{id:"互动模式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#互动模式"},[e("span",null,"互动模式")])],-1),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"互动模式1")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"User| View| Controller| Model| View")])])])])])],-1),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"互动模式2")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"User| Controller| Model| View")])])])])])],-1),e("p",null,"MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。",-1),e("p",null,"另一种是直接通过controller接受指令。",-1),e("h2",{id:"实例-backbone",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#实例-backbone"},[e("span",null,"实例：Backbone")])],-1),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"Backhone")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"User --> View"),e("li",null,"User --> Controller --> View"),e("li",null,"Controller| Model| View| Model")])])])])])],-1),e("p",null,"\\1. 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。",-1),e("p",null,"\\2. 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。",-1),e("p",null,"\\3. Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器）",-1),e("h2",{id:"mvp",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvp"},[e("span",null,"MVP")])],-1),e("p",null,"MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向",-1),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVP")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"View --> Presenter --> View"),e("li",null,"Model --> Presenter --> Model")])])])])])],-1),e("p",null,"\\1. 各部分之间的通信，都是双向的。",-1),e("p",null,"\\2. View 与 Model 不发生联系，都通过 Presenter 传递。",-1),e("p",null,'\\3. View 非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。',-1),e("h2",{id:"mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvvm"},[e("span",null,"MVVM")])],-1),e("p",null,"MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。",-1),e("div",{class:"ab-note drop-shadow"},[e("div",{class:"ab-deco-title"},[e("div",{class:"ab-deco-title-title","title-type":"none"},[e("p",null,"MVVM")]),e("div",{class:"ab-deco-title-content"},[e("div",{class:"markdown-rendered"},[e("div",null,[e("ul",null,[e("li",null,"ViewModel| View| ViewModel| Model| ViewModel")])])])])])],-1),e("p",null,[l("唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。"),e("a",{href:"https://angularjs.org/",target:"_blank",rel:"noopener noreferrer"},"Angular"),l(" 和 "),e("a",{href:"http://emberjs.com/",target:"_blank",rel:"noopener noreferrer"},"Ember"),l(" 都采用这种模式。")],-1)]))}const p=n(a,[["render",d],["__file","MVC、MVP、MVVM.html.vue"]]),V=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/MVC%E3%80%81MVP%E3%80%81MVVM.html","title":"MVC、MVP、MVVM","lang":"zh-CN","frontmatter":{"description":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/MVC%E3%80%81MVP%E3%80%81MVVM.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MVC、MVP、MVVM"}],["meta",{"property":"og:description","content":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC、MVP、MVVM\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"MVC、MVP、MVVM","slug":"mvc、mvp、mvvm","link":"#mvc、mvp、mvvm","children":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"互动模式","slug":"互动模式","link":"#互动模式","children":[]},{"level":2,"title":"实例：Backbone","slug":"实例-backbone","link":"#实例-backbone","children":[]},{"level":2,"title":"MVP","slug":"mvp","link":"#mvp","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]}]}],"git":{},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/MVC、MVP、MVVM.md","excerpt":"\\n<p>参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</p>\\n<p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p>\\n<p><a href=\\"https://zh.wikipedia.org/wiki/MVC\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MVC</a>（Model-View-Controller）<strong>是最常见的软件架构之一</strong>，业界有着广泛应用。它本身<a href=\\"https://www.ruanyifeng.com/blog/2007/11/mvc.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">很容易理解</a>，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/MVC、MVP、MVVM.md","value":{"title":"MVC、MVP、MVVM","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/架构设计/MVC、MVP、MVVM.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,V as data};
