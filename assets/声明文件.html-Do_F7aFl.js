import{_ as p,c as l,a as s,b as t,d as a,e as o,o as i,r}from"./app-DvjNtUMi.js";const c={},d={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-var",target:"_blank",rel:"noopener noreferrer"},u={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-function",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-class",target:"_blank",rel:"noopener noreferrer"},m={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-enum",target:"_blank",rel:"noopener noreferrer"},v={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace",target:"_blank",rel:"noopener noreferrer"},b={href:"https://ts.xcatliu.com/basics/declaration-files.html#interface-%E5%92%8C-type",target:"_blank",rel:"noopener noreferrer"},f={href:"https://ts.xcatliu.com/basics/declaration-files.html#export",target:"_blank",rel:"noopener noreferrer"},g={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace",target:"_blank",rel:"noopener noreferrer"},y={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-default",target:"_blank",rel:"noopener noreferrer"},x={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-1",target:"_blank",rel:"noopener noreferrer"},w={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-as-namespace",target:"_blank",rel:"noopener noreferrer"},j={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-global",target:"_blank",rel:"noopener noreferrer"},q={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-module",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://ts.xcatliu.com/basics/declaration-files.html#san-xie-xian-zhi-ling",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/01-jquery",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/02-declare-var",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/03-jquery-d-ts",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jquery/index.d.ts",target:"_blank",rel:"noopener noreferrer"},A={href:"https://microsoft.github.io/TypeSearch/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://ts.xcatliu.com/basics/declaration-files.html#quan-ju-bian-liang",target:"_blank",rel:"noopener noreferrer"},h={href:"https://ts.xcatliu.com/basics/declaration-files.html#npm-bao",target:"_blank",rel:"noopener noreferrer"},R={href:"https://ts.xcatliu.com/basics/declaration-files.html#umd-ku",target:"_blank",rel:"noopener noreferrer"},U={href:"https://ts.xcatliu.com/basics/declaration-files.html#zhi-jie-kuo-zhan-quan-ju-bian-liang",target:"_blank",rel:"noopener noreferrer"},M={href:"https://ts.xcatliu.com/basics/declaration-files.html#zai-npm-bao-huo-umd-ku-zhong-kuo-zhan-quan-ju-bian-liang",target:"_blank",rel:"noopener noreferrer"},C={href:"https://ts.xcatliu.com/basics/declaration-files.html#mo-kuai-cha-jian",target:"_blank",rel:"noopener noreferrer"},O={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-var",target:"_blank",rel:"noopener noreferrer"},z={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-function",target:"_blank",rel:"noopener noreferrer"},L={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-class",target:"_blank",rel:"noopener noreferrer"},N={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-enum",target:"_blank",rel:"noopener noreferrer"},P={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace",target:"_blank",rel:"noopener noreferrer"},J={href:"https://ts.xcatliu.com/basics/declaration-files.html#interface-he-type",target:"_blank",rel:"noopener noreferrer"},H={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/04-declare-const-jquery",target:"_blank",rel:"noopener noreferrer"},F={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/05-declare-jquery-value",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/06-declare-function",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/07-declare-class",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/08-declare-enum",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/09-declare-namespace",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/10-declare-namespace-nesting",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/11-declare-namespace-dot",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/12-interface",target:"_blank",rel:"noopener noreferrer"},X={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/13-avoid-name-conflict",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/14-declaration-merging",target:"_blank",rel:"noopener noreferrer"},_={href:"https://ts.xcatliu.com/advanced/declaration-merging.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace",target:"_blank",rel:"noopener noreferrer"},an={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-default",target:"_blank",rel:"noopener noreferrer"},en={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-1",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/15-export",target:"_blank",rel:"noopener noreferrer"},on={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/16-declare-and-export",target:"_blank",rel:"noopener noreferrer"},pn={id:"export-namespace§",tabindex:"-1"},ln={class:"header-anchor",href:"#export-namespace§"},rn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/17-export-namespace",target:"_blank",rel:"noopener noreferrer"},dn={id:"export-default§",tabindex:"-1"},un={class:"header-anchor",href:"#export-default§"},kn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-default",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/18-export-default",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/19-export-default-enum-error",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/20-export-default-enum",target:"_blank",rel:"noopener noreferrer"},fn={id:"export-§",tabindex:"-1"},gn={class:"header-anchor",href:"#export-§"},yn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/21-export-equal",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require",target:"_blank",rel:"noopener noreferrer"},jn={id:"export-as-namespace§",tabindex:"-1"},qn={class:"header-anchor",href:"#export-as-namespace§"},Qn={href:"https://ts.xcatliu.com/basics/declaration-files.html#export-as-namespace",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/22-export-as-namespace",target:"_blank",rel:"noopener noreferrer"},En={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/23-merge-global-interface",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/24-merge-global-namespace",target:"_blank",rel:"noopener noreferrer"},Tn={id:"declare-global§",tabindex:"-1"},An={class:"header-anchor",href:"#declare-global§"},Bn={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-global",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/25-declare-global",target:"_blank",rel:"noopener noreferrer"},Rn={id:"模块插件§",tabindex:"-1"},Un={class:"header-anchor",href:"#模块插件§"},Mn={href:"https://ts.xcatliu.com/basics/declaration-files.html#%E6%A8%A1%E5%9D%97%E6%8F%92%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Cn={id:"declare-module§",tabindex:"-1"},On={class:"header-anchor",href:"#declare-module§"},zn={href:"https://ts.xcatliu.com/basics/declaration-files.html#declare-module",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/26-declare-module",target:"_blank",rel:"noopener noreferrer"},Nn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/27-multiple-declare-module",target:"_blank",rel:"noopener noreferrer"},Pn={id:"三斜线指令§",tabindex:"-1"},Jn={class:"header-anchor",href:"#三斜线指令§"},Hn={href:"https://ts.xcatliu.com/basics/declaration-files.html#%E4%B8%89%E6%96%9C%E7%BA%BF%E6%8C%87%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/28-triple-slash-directives",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/29-triple-slash-directives-global",target:"_blank",rel:"noopener noreferrer"},Vn={id:"拆分声明文件§",tabindex:"-1"},Zn={class:"header-anchor",href:"#拆分声明文件§"},In={href:"https://ts.xcatliu.com/basics/declaration-files.html#%E6%8B%86%E5%88%86%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6",target:"_blank",rel:"noopener noreferrer"},Kn={id:"其他三斜线指令§",tabindex:"-1"},Gn={class:"header-anchor",href:"#其他三斜线指令§"},Wn={href:"https://ts.xcatliu.com/basics/declaration-files.html#%E5%85%B6%E4%BB%96%E4%B8%89%E6%96%9C%E7%BA%BF%E6%8C%87%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"},Xn={href:"http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/30-auto-d-ts",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},as={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"},es={href:"https://github.com/DefinitelyTyped/DefinitelyTyped#create-a-new-package",target:"_blank",rel:"noopener noreferrer"},ts={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30336/files",target:"_blank",rel:"noopener noreferrer"},os={id:"参考§",tabindex:"-1"},ps={class:"header-anchor",href:"#参考§"},ls={href:"https://ts.xcatliu.com/basics/declaration-files.html#%E5%8F%82%E8%80%83",target:"_blank",rel:"noopener noreferrer"},is={href:"http://www.typescriptlang.org/docs/handbook/writing-declaration-files.html",target:"_blank",rel:"noopener noreferrer"},rs={href:"http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://github.com/Microsoft/TypeScript/issues/22217#issuecomment-369783776",target:"_blank",rel:"noopener noreferrer"},ds={href:"https://github.com/DefinitelyTyped/DefinitelyTyped/",target:"_blank",rel:"noopener noreferrer"};function us(ks,n){const e=r("ExternalLinkIcon");return i(),l("div",null,[n[332]||(n[332]=s("h1",{id:"声明文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#声明文件"},[s("span",null,"声明文件")])],-1)),n[333]||(n[333]=s("p",null,"转：https://ts.xcatliu.com/basics/declaration-files.html",-1)),n[334]||(n[334]=s("p",null,"当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。",-1)),n[335]||(n[335]=s("h2",{id:"新语法索引",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#新语法索引"},[s("span",null,"新语法索引")])],-1)),n[336]||(n[336]=s("p",null,"由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解：",-1)),s("ul",null,[s("li",null,[s("a",d,[n[0]||(n[0]=s("code",null,"declare var",-1)),t(e)]),n[1]||(n[1]=a(" 声明全局变量"))]),s("li",null,[s("a",u,[n[2]||(n[2]=s("code",null,"declare function",-1)),t(e)]),n[3]||(n[3]=a(" 声明全局方法"))]),s("li",null,[s("a",k,[n[4]||(n[4]=s("code",null,"declare class",-1)),t(e)]),n[5]||(n[5]=a(" 声明全局类"))]),s("li",null,[s("a",m,[n[6]||(n[6]=s("code",null,"declare enum",-1)),t(e)]),n[7]||(n[7]=a(" 声明全局枚举类型"))]),s("li",null,[s("a",v,[n[8]||(n[8]=s("code",null,"declare namespace",-1)),t(e)]),n[9]||(n[9]=a(" 声明（含有子属性的）全局对象"))]),s("li",null,[s("a",b,[n[10]||(n[10]=s("code",null,"interface",-1)),n[11]||(n[11]=a(" 和 ")),n[12]||(n[12]=s("code",null,"type",-1)),t(e)]),n[13]||(n[13]=a(" 声明全局类型"))]),s("li",null,[s("a",f,[n[14]||(n[14]=s("code",null,"export",-1)),t(e)]),n[15]||(n[15]=a(" 导出变量"))]),s("li",null,[s("a",g,[n[16]||(n[16]=s("code",null,"export namespace",-1)),t(e)]),n[17]||(n[17]=a(" 导出（含有子属性的）对象"))]),s("li",null,[s("a",y,[n[18]||(n[18]=s("code",null,"export default",-1)),t(e)]),n[19]||(n[19]=a(" ES6 默认导出"))]),s("li",null,[s("a",x,[n[20]||(n[20]=s("code",null,"export =",-1)),t(e)]),n[21]||(n[21]=a(" commonjs 导出模块"))]),s("li",null,[s("a",w,[n[22]||(n[22]=s("code",null,"export as namespace",-1)),t(e)]),n[23]||(n[23]=a(" UMD 库声明全局变量"))]),s("li",null,[s("a",j,[n[24]||(n[24]=s("code",null,"declare global",-1)),t(e)]),n[25]||(n[25]=a(" 扩展全局变量"))]),s("li",null,[s("a",q,[n[26]||(n[26]=s("code",null,"declare module",-1)),t(e)]),n[27]||(n[27]=a(" 扩展模块"))]),s("li",null,[s("a",Q,[n[28]||(n[28]=s("code",null,"/// ",-1)),t(e)]),n[29]||(n[29]=a(" 三斜线指令"))]),n[30]||(n[30]=s("li",null,[s("code",null,"kk"),a(" dfafd")],-1))]),n[337]||(n[337]=o(`<h2 id="为什么要声明" tabindex="-1"><a class="header-anchor" href="#为什么要声明"><span>为什么要声明</span></a></h2><h3 id="什么是声明语句" tabindex="-1"><a class="header-anchor" href="#什么是声明语句"><span>什么是声明语句</span></a></h3><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 jQuery，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p><p>我们通常这样获取一个 <code>id</code> 是 <code>foo</code> 的元素：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[32]||(n[32]=a("但是在 ts 中，编译器并不知道 ")),n[33]||(n[33]=s("code",null,"$",-1)),n[34]||(n[34]=a(" 或 ")),n[35]||(n[35]=s("code",null,"jQuery",-1)),n[36]||(n[36]=a(" 是什么东西")),s("a",D,[n[31]||(n[31]=a("1")),t(e)]),n[37]||(n[37]=a("："))]),n[338]||(n[338]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: Cannot find name &#39;jQuery&#39;.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[39]||(n[39]=a("这时，我们需要使用 ")),n[40]||(n[40]=s("code",null,"declare var",-1)),n[41]||(n[41]=a(" 来定义它的类型")),s("a",E,[n[38]||(n[38]=a("2")),t(e)]),n[42]||(n[42]=a("："))]),n[339]||(n[339]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，<code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 <code>jQuery</code> 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了 <code>declare var</code> 之外，还有其他很多种声明语句，将会在后面详细介绍。</p><h3 id="什么是声明文件" tabindex="-1"><a class="header-anchor" href="#什么是声明文件"><span>什么是声明文件</span></a></h3>`,5)),s("p",null,[n[44]||(n[44]=a("通常我们会把声明语句放到一个单独的文件（")),n[45]||(n[45]=s("code",null,"jQuery.d.ts",-1)),n[46]||(n[46]=a("）中，这就是声明文件")),s("a",S,[n[43]||(n[43]=a("3")),t(e)]),n[47]||(n[47]=a("："))]),n[340]||(n[340]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">var</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明文件必需以 <code>.d.ts</code> 为后缀。</p><p>一般来说，ts 会解析项目中所有的 <code>*.ts</code> 文件，当然也包含以 <code>.d.ts</code> 结尾的文件。所以当我们将 <code>jQuery.d.ts</code> 放到项目中时，其他所有 <code>*.ts</code> 文件就都可以获得 <code>jQuery</code> 的类型定义了。</p><div class="language-autoit line-numbers-mode" data-ext="autoit" data-title="autoit"><pre class="language-autoit"><code><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>project
├── src
|  ├── index<span class="token punctuation">.</span>ts
|  └── jQuery<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
└── tsconfig<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如仍然无法解析，那么可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>jQuery.d.ts</code> 文件。</p><p>这里只演示了全局变量这种模式的声明文件，假如是通过模块导入的方式使用第三方库的话，那么引入声明文件又是另一种方式了，将会在后面详细介绍。</p><h3 id="第三方声明文件" tabindex="-1"><a class="header-anchor" href="#第三方声明文件"><span>第三方声明文件</span></a></h3>`,7)),s("p",null,[n[49]||(n[49]=a("当然，jQuery 的声明文件不需要我们定义了，社区已经帮我们定义好了：")),s("a",T,[n[48]||(n[48]=a("jQuery in DefinitelyTyped")),t(e)]),n[50]||(n[50]=a("。"))]),n[341]||(n[341]=o(`<p>我们可以直接下载下来使用，但是更推荐的是使用 <code>@types</code> 统一管理第三方库的声明文件。</p><p><code>@types</code> 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @types/jquery --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3)),s("p",null,[n[52]||(n[52]=a("可以在")),s("a",A,[n[51]||(n[51]=a("这个页面")),t(e)]),n[53]||(n[53]=a("搜索你需要的声明文件。"))]),n[342]||(n[342]=s("h2",{id:"书写声明文件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#书写声明文件"},[s("span",null,"书写声明文件")])],-1)),n[343]||(n[343]=s("p",null,"当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了。前面只介绍了最简单的声明文件内容，而真正书写一个声明文件并不是一件简单的事，以下会详细介绍如何书写声明文件。",-1)),n[344]||(n[344]=s("p",null,"在不同的场景下，声明文件的内容和使用方式会有所区别。",-1)),n[345]||(n[345]=s("p",null,"库的使用场景主要有以下几种：",-1)),s("ul",null,[s("li",null,[s("a",B,[n[54]||(n[54]=a("全局变量")),t(e)]),n[55]||(n[55]=a("：通过 ")),n[56]||(n[56]=s("code",null,"<script>",-1)),n[57]||(n[57]=a(" 标签引入第三方库，注入全局变量"))]),s("li",null,[s("a",h,[n[58]||(n[58]=a("npm 包")),t(e)]),n[59]||(n[59]=a("：通过 ")),n[60]||(n[60]=s("code",null,"import foo from 'foo'",-1)),n[61]||(n[61]=a(" 导入，符合 ES6 模块规范"))]),s("li",null,[s("a",R,[n[62]||(n[62]=a("UMD 库")),t(e)]),n[63]||(n[63]=a("：既可以通过 ")),n[64]||(n[64]=s("code",null,"<script>",-1)),n[65]||(n[65]=a(" 标签引入，又可以通过 ")),n[66]||(n[66]=s("code",null,"import",-1)),n[67]||(n[67]=a(" 导入"))]),s("li",null,[s("a",U,[n[68]||(n[68]=a("直接扩展全局变量")),t(e)]),n[69]||(n[69]=a("：通过 ")),n[70]||(n[70]=s("code",null,"<script>",-1)),n[71]||(n[71]=a(" 标签引入后，改变一个全局变量的结构"))]),s("li",null,[s("a",M,[n[72]||(n[72]=a("在 npm 包或 UMD 库中扩展全局变量")),t(e)]),n[73]||(n[73]=a("：引用 npm 包或 UMD 库后，改变一个全局变量的结构"))]),s("li",null,[s("a",C,[n[74]||(n[74]=a("模块插件")),t(e)]),n[75]||(n[75]=a("：通过 ")),n[76]||(n[76]=s("code",null,"<script>",-1)),n[77]||(n[77]=a(" 或 ")),n[78]||(n[78]=s("code",null,"import",-1)),n[79]||(n[79]=a(" 导入后，改变另一个模块的结构"))])]),n[346]||(n[346]=o(`<h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h3><p>全局变量是最简单的一种场景，之前举的例子就是通过 <code>&lt;script&gt;</code> 标签引入 jQuery，注入全局变量 <code>$</code> 和 <code>jQuery</code>。</p><p>使用全局变量的声明文件时，如果是以 <code>npm install @types/xxx --save-dev</code> 安装的，则不需要任何配置。如果是将声明文件直接存放于当前项目中，则建议和其他源码一起放到 <code>src</code> 目录下（或者对应的源码目录下）：</p><div class="language-autoit line-numbers-mode" data-ext="autoit" data-title="autoit"><pre class="language-autoit"><code><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>project
├── src
|  ├── index<span class="token punctuation">.</span>ts
|  └── jQuery<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
└── tsconfig<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有生效，可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>jQuery.d.ts</code> 文件。</p><p>全局变量的声明文件主要有以下几种语法：</p>`,6)),s("ul",null,[s("li",null,[s("a",O,[n[80]||(n[80]=s("code",null,"declare var",-1)),t(e)]),n[81]||(n[81]=a(" 声明全局变量"))]),s("li",null,[s("a",z,[n[82]||(n[82]=s("code",null,"declare function",-1)),t(e)]),n[83]||(n[83]=a(" 声明全局方法"))]),s("li",null,[s("a",L,[n[84]||(n[84]=s("code",null,"declare class",-1)),t(e)]),n[85]||(n[85]=a(" 声明全局类"))]),s("li",null,[s("a",N,[n[86]||(n[86]=s("code",null,"declare enum",-1)),t(e)]),n[87]||(n[87]=a(" 声明全局枚举类型"))]),s("li",null,[s("a",P,[n[88]||(n[88]=s("code",null,"declare namespace",-1)),t(e)]),n[89]||(n[89]=a(" 声明（含有子属性的）全局对象"))]),s("li",null,[s("a",J,[n[90]||(n[90]=s("code",null,"interface",-1)),n[91]||(n[91]=a(" 和 ")),n[92]||(n[92]=s("code",null,"type",-1)),t(e)]),n[93]||(n[93]=a(" 声明全局类型"))])]),n[347]||(n[347]=o(`<h4 id="declare-var" tabindex="-1"><a class="header-anchor" href="#declare-var"><span><code>declare var</code></span></a></h4><p>在所有的声明语句中，<code>declare var</code> 是最简单的，如之前所学，它能够用来定义一个全局变量的类型。与其类似的，还有 <code>declare let</code> 和 <code>declare const</code>，使用 <code>let</code> 与使用 <code>var</code> 没有什么区别：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">let</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 declare let 定义的 jQuery 类型，允许修改这个全局变量</span>
<span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[95]||(n[95]=a("而当我们使用 ")),n[96]||(n[96]=s("code",null,"const",-1)),n[97]||(n[97]=a(" 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了")),s("a",H,[n[94]||(n[94]=a("4")),t(e)]),n[98]||(n[98]=a("："))]),n[348]||(n[348]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token function-variable function">jQuery</span><span class="token operator">:</span> <span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 declare const 定义的 jQuery 类型，禁止修改这个全局变量</span>
<span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: Cannot assign to &#39;jQuery&#39; because it is a constant or a read-only property.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 <code>const</code> 而不是 <code>var</code> 或 <code>let</code>。</p>`,2)),s("p",null,[n[100]||(n[100]=a("需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现")),s("a",F,[n[99]||(n[99]=a("5")),t(e)]),n[101]||(n[101]=a("："))]),n[349]||(n[349]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token function-variable function">jQuery</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ERROR: An implementation cannot be declared in ambient contexts.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="declare-function" tabindex="-1"><a class="header-anchor" href="#declare-function"><span><code>declare function</code></span></a></h4><p><code>declare function</code> 用来定义全局函数的类型。jQuery 其实就是一个函数，所以也可以用 <code>function</code> 来定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[103]||(n[103]=a("在函数类型的声明语句中，函数重载也是支持的")),s("a",$,[n[102]||(n[102]=a("6")),t(e)]),n[104]||(n[104]=a("："))]),n[350]||(n[350]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token function-variable function">domReadyCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Dom Ready!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="declare-class" tabindex="-1"><a class="header-anchor" href="#declare-class"><span><code>declare class</code></span></a></h4>`,2)),s("p",null,[n[106]||(n[106]=a("当全局变量是一个类的时候，我们用 ")),n[107]||(n[107]=s("code",null,"declare class",-1)),n[108]||(n[108]=a(" 来定义它的类型")),s("a",V,[n[105]||(n[105]=a("7")),t(e)]),n[109]||(n[109]=a("："))]),n[351]||(n[351]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/Animal.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，<code>declare class</code> 语句也只能用来定义类型，不能用来定义具体的实现，比如定义 <code>sayHi</code> 方法的具体实现则会报错：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/Animal.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ERROR: An implementation cannot be declared in ambient contexts.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="declare-enum" tabindex="-1"><a class="header-anchor" href="#declare-enum"><span><code>declare enum</code></span></a></h4>`,4)),s("p",null,[n[111]||(n[111]=a("使用 ")),n[112]||(n[112]=s("code",null,"declare enum",-1)),n[113]||(n[113]=a(" 定义的枚举类型也称作外部枚举（Ambient Enums），举例如下")),s("a",Z,[n[110]||(n[110]=a("8")),t(e)]),n[114]||(n[114]=a("："))]),n[352]||(n[352]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/Directions.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与其他全局变量的类型声明一致，<code>declare enum</code> 仅用来定义类型，而不是具体的值。</p><p><code>Directions.d.ts</code> 仅仅会用于编译时的检查，声明文件里的内容在编译结果中会被删除。它编译结果是：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>Directions</code> 是由第三方库定义好的全局变量。</p><h4 id="declare-namespace" tabindex="-1"><a class="header-anchor" href="#declare-namespace"><span><code>declare namespace</code></span></a></h4><p><code>namespace</code> 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。</p><p>由于历史遗留原因，在早期还没有 ES6 的时候，ts 提供了一种模块化方案，使用 <code>module</code> 关键字表示内部模块。但由于后来 ES6 也使用了 <code>module</code> 关键字，ts 为了兼容 ES6，使用 <code>namespace</code> 替代了自己的 <code>module</code>，更名为命名空间。</p><p>随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 <code>namespace</code>，而推荐使用 ES6 的模块化方案了，故我们不再需要学习 <code>namespace</code> 的使用了。</p><p><code>namespace</code> 被淘汰了，但是在声明文件中，<code>declare namespace</code> 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</p><p>比如 <code>jQuery</code> 是一个全局变量，它是一个对象，提供了一个 <code>jQuery.ajax</code> 方法可以调用，那么我们就应该使用 <code>declare namespace jQuery</code> 来声明这个拥有多个子属性的全局变量。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/get_something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s("p",null,[n[116]||(n[116]=a("注意，在 ")),n[117]||(n[117]=s("code",null,"declare namespace",-1)),n[118]||(n[118]=a(" 内部，我们直接使用 ")),n[119]||(n[119]=s("code",null,"function ajax",-1)),n[120]||(n[120]=a(" 来声明函数，而不是使用 ")),n[121]||(n[121]=s("code",null,"declare function ajax",-1)),n[122]||(n[122]=a("。类似的，也可以使用 ")),n[123]||(n[123]=s("code",null,"const",-1)),n[124]||(n[124]=a(", ")),n[125]||(n[125]=s("code",null,"class",-1)),n[126]||(n[126]=a(", ")),n[127]||(n[127]=s("code",null,"enum",-1)),n[128]||(n[128]=a(" 等语句")),s("a",I,[n[115]||(n[115]=a("9")),t(e)]),n[129]||(n[129]=a("："))]),n[353]||(n[353]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> version<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>
        <span class="token function">blur</span><span class="token punctuation">(</span>eventType<span class="token operator">:</span> EventType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">enum</span> EventType <span class="token punctuation">{</span>
        CustomClick
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/get_something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jQuery</span><span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
e<span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>CustomClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="嵌套的命名空间" tabindex="-1"><a class="header-anchor" href="#嵌套的命名空间"><span>嵌套的命名空间</span></a></h5>`,2)),s("p",null,[n[131]||(n[131]=a("如果对象拥有深层的层级，则需要用嵌套的 ")),n[132]||(n[132]=s("code",null,"namespace",-1)),n[133]||(n[133]=a(" 来声明深层的属性的类型")),s("a",K,[n[130]||(n[130]=a("10")),t(e)]),n[134]||(n[134]=a("："))]),n[354]||(n[354]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token keyword">namespace</span> fn <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/get_something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">check</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[136]||(n[136]=a("假如 ")),n[137]||(n[137]=s("code",null,"jQuery",-1)),n[138]||(n[138]=a(" 下仅有 ")),n[139]||(n[139]=s("code",null,"fn",-1)),n[140]||(n[140]=a(" 这一个属性（没有 ")),n[141]||(n[141]=s("code",null,"ajax",-1)),n[142]||(n[142]=a(" 等其他属性或方法），则可以不需要嵌套 ")),n[143]||(n[143]=s("code",null,"namespace",-1)),s("a",G,[n[135]||(n[135]=a("11")),t(e)]),n[144]||(n[144]=a("："))]),n[355]||(n[355]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery<span class="token punctuation">.</span>fn <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">check</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="interface-和-type" tabindex="-1"><a class="header-anchor" href="#interface-和-type"><span><code>interface</code> 和 <code>type</code></span></a></h4>`,2)),s("p",null,[n[146]||(n[146]=a("除了全局变量之外，可能有一些类型我们也希望能暴露出来。在类型声明文件中，我们可以直接使用 ")),n[147]||(n[147]=s("code",null,"interface",-1)),n[148]||(n[148]=a(" 或 ")),n[149]||(n[149]=s("code",null,"type",-1)),n[150]||(n[150]=a(" 来声明一个全局的接口或类型")),s("a",W,[n[145]||(n[145]=a("12")),t(e)]),n[151]||(n[151]=a("："))]),n[356]||(n[356]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">interface</span> <span class="token class-name">AjaxSettings</span> <span class="token punctuation">{</span>
    method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;POST&#39;</span>
    data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> AjaxSettings<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，在其他文件中也可以使用这个接口或类型了：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">let</span> settings<span class="token operator">:</span> AjaxSettings <span class="token operator">=</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/post_something&#39;</span><span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>type</code> 与 <code>interface</code> 类似，不再赘述。</p><h5 id="防止命名冲突" tabindex="-1"><a class="header-anchor" href="#防止命名冲突"><span>防止命名冲突</span></a></h5>`,5)),s("p",null,[n[153]||(n[153]=a("暴露在最外层的 ")),n[154]||(n[154]=s("code",null,"interface",-1)),n[155]||(n[155]=a(" 或 ")),n[156]||(n[156]=s("code",null,"type",-1)),n[157]||(n[157]=a(" 会作为全局类型作用于整个项目中，我们应该尽可能的减少全局变量或全局类型的数量。故最好将他们放到 ")),n[158]||(n[158]=s("code",null,"namespace",-1)),n[159]||(n[159]=a(" 下")),s("a",X,[n[152]||(n[152]=a("13")),t(e)]),n[160]||(n[160]=a("："))]),n[357]||(n[357]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">AjaxSettings</span> <span class="token punctuation">{</span>
        method<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;POST&#39;</span>
        data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> AjaxSettings<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在使用这个 <code>interface</code> 的时候，也应该加上 <code>jQuery</code> 前缀：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">let</span> settings<span class="token operator">:</span> jQuery<span class="token punctuation">.</span>AjaxSettings <span class="token operator">=</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/post_something&#39;</span><span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="声明合并" tabindex="-1"><a class="header-anchor" href="#声明合并"><span>声明合并</span></a></h4>`,4)),s("p",null,[n[162]||(n[162]=a("假如 jQuery 既是一个函数，可以直接被调用 ")),n[163]||(n[163]=s("code",null,"jQuery('#foo')",-1)),n[164]||(n[164]=a("，又是一个对象，拥有子属性 ")),n[165]||(n[165]=s("code",null,"jQuery.ajax()",-1)),n[166]||(n[166]=a("（事实确实如此），那么我们可以组合多个声明语句，它们会不冲突的合并起来")),s("a",Y,[n[161]||(n[161]=a("14")),t(e)]),n[167]||(n[167]=a("："))]),n[358]||(n[358]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/jQuery.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> jQuery <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token string">&#39;#foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jQuery<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;/api/get_something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[169]||(n[169]=a("关于声明合并的更多用法，可以查看")),s("a",_,[n[168]||(n[168]=a("声明合并")),t(e)]),n[170]||(n[170]=a("章节。"))]),n[359]||(n[359]=o(`<h3 id="npm-包" tabindex="-1"><a class="header-anchor" href="#npm-包"><span>npm 包</span></a></h3><p>一般我们通过 <code>import foo from &#39;foo&#39;</code> 导入一个 npm 包，这是符合 ES6 模块规范的。</p><p>在我们尝试给一个 npm 包创建声明文件之前，需要先看看它的声明文件是否已经存在。一般来说，npm 包的声明文件可能存在于两个地方：</p><ol><li>与该 npm 包绑定在一起。判断依据是 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 npm 包的时候，最好也将声明文件与 npm 包绑定在一起。</li><li>发布到 <code>@types</code> 里。我们只需要尝试安装一下对应的 <code>@types</code> 包就知道是否存在该声明文件，安装命令是 <code>npm install @types/foo --save-dev</code>。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 <code>@types</code> 里了。</li></ol><p>假如以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了。由于是通过 <code>import</code> 语句导入的模块，所以声明文件存放的位置也有所约束，一般有两种方案：</p><ol><li>创建一个 <code>node_modules/@types/foo/index.d.ts</code> 文件，存放 <code>foo</code> 模块的声明文件。这种方式不需要额外的配置，但是 <code>node_modules</code> 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。</li><li>创建一个 <code>types</code> 目录，专门用来管理自己写的声明文件，将 <code>foo</code> 的声明文件放到 <code>types/foo/index.d.ts</code> 中。这种方式需要配置下 <code>tsconfig.json</code> 中的 <code>paths</code> 和 <code>baseUrl</code> 字段。</li></ol><p>目录结构：</p><div class="language-autoit line-numbers-mode" data-ext="autoit" data-title="autoit"><pre class="language-autoit"><code><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>project
├── src
|  └── index<span class="token punctuation">.</span>ts
├── types
|  └── foo
|     └── index<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
└── tsconfig<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tsconfig.json</code> 内容：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;types/*&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如此配置之后，通过 <code>import</code> 导入 <code>foo</code> 的时候，也会去 <code>types</code> 目录下寻找对应的模块的声明文件了。</p><p>注意 <code>module</code> 配置可以有很多种选项，不同的选项会影响模块的导入导出模式。这里我们使用了 <code>commonjs</code> 这个最常用的选项，后面的教程也都默认使用的这个选项。</p><p>不管采用了以上两种方式中的哪一种，我都<strong>强烈建议</strong>大家将书写好的声明文件（通过给第三方库发 pull request，或者直接提交到 <code>@types</code> 里）发布到开源社区中，享受了这么多社区的优秀的资源，就应该在力所能及的时候给出一些回馈。只有所有人都参与进来，才能让 ts 社区更加繁荣。</p><p>npm 包的声明文件主要有以下几种语法：</p>`,14)),s("ul",null,[s("li",null,[s("a",nn,[n[171]||(n[171]=s("code",null,"export",-1)),t(e)]),n[172]||(n[172]=a(" 导出变量"))]),s("li",null,[s("a",sn,[n[173]||(n[173]=s("code",null,"export namespace",-1)),t(e)]),n[174]||(n[174]=a(" 导出（含有子属性的）对象"))]),s("li",null,[s("a",an,[n[175]||(n[175]=s("code",null,"export default",-1)),t(e)]),n[176]||(n[176]=a(" ES6 默认导出"))]),s("li",null,[s("a",en,[n[177]||(n[177]=s("code",null,"export =",-1)),t(e)]),n[178]||(n[178]=a(" commonjs 导出模块"))])]),n[360]||(n[360]=s("h4",{id:"export",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#export"},[s("span",null,[s("code",null,"export")])])],-1)),n[361]||(n[361]=s("p",null,[a("npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 "),s("code",null,"declare"),a(" 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 "),s("code",null,"export"),a(" 导出，然后在使用方 "),s("code",null,"import"),a(" 导入后，才会应用到这些类型声明。")],-1)),s("p",null,[n[180]||(n[180]=s("code",null,"export",-1)),n[181]||(n[181]=a(" 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现")),s("a",tn,[n[179]||(n[179]=a("15")),t(e)]),n[182]||(n[182]=a("："))]),n[362]||(n[362]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的导入和使用模块应该是这样：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> getName<span class="token punctuation">,</span> Animal<span class="token punctuation">,</span> Directions<span class="token punctuation">,</span> Options <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> options<span class="token operator">:</span> Options <span class="token operator">=</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="混用-declare-和-export" tabindex="-1"><a class="header-anchor" href="#混用-declare-和-export"><span>混用 <code>declare</code> 和 <code>export</code></span></a></h5>`,4)),s("p",null,[n[184]||(n[184]=a("我们也可以使用 ")),n[185]||(n[185]=s("code",null,"declare",-1)),n[186]||(n[186]=a(" 先声明多个变量，最后再用 ")),n[187]||(n[187]=s("code",null,"export",-1)),n[188]||(n[188]=a(" 一次性导出。上例的声明文件可以等价的改写为")),s("a",on,[n[183]||(n[183]=a("16")),t(e)]),n[189]||(n[189]=a("："))]),n[363]||(n[363]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> getName<span class="token punctuation">,</span> Animal<span class="token punctuation">,</span> Directions<span class="token punctuation">,</span> Options <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，与全局变量的声明文件类似，<code>interface</code> 前是不需要 <code>declare</code> 的。</p>`,2)),s("h4",pn,[s("a",ln,[s("span",null,[n[191]||(n[191]=s("code",null,"export namespace",-1)),s("a",rn,[n[190]||(n[190]=a("§")),t(e)])])])]),s("p",null,[n[193]||(n[193]=a("与 ")),n[194]||(n[194]=s("code",null,"declare namespace",-1)),n[195]||(n[195]=a(" 类似，")),n[196]||(n[196]=s("code",null,"export namespace",-1)),n[197]||(n[197]=a(" 用来导出一个拥有子属性的对象")),s("a",cn,[n[192]||(n[192]=a("17")),t(e)]),n[198]||(n[198]=a("："))]),n[364]||(n[364]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token keyword">namespace</span> bar <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("h4",dn,[s("a",un,[s("span",null,[n[200]||(n[200]=s("code",null,"export default",-1)),s("a",kn,[n[199]||(n[199]=a("§")),t(e)])])])]),n[365]||(n[365]=s("p",null,[a("在 ES6 模块系统中，使用 "),s("code",null,"export default"),a(" 可以导出一个默认值，使用方可以用 "),s("code",null,"import foo from 'foo'"),a(" 而不是 "),s("code",null,"import { foo } from 'foo'"),a(" 来导入这个默认值。")],-1)),s("p",null,[n[202]||(n[202]=a("在类型声明文件中，")),n[203]||(n[203]=s("code",null,"export default",-1)),n[204]||(n[204]=a(" 用来导出默认值的类型")),s("a",mn,[n[201]||(n[201]=a("18")),t(e)]),n[205]||(n[205]=a("："))]),n[366]||(n[366]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[207]||(n[207]=a("注意，只有 ")),n[208]||(n[208]=s("code",null,"function",-1)),n[209]||(n[209]=a("、")),n[210]||(n[210]=s("code",null,"class",-1)),n[211]||(n[211]=a(" 和 ")),n[212]||(n[212]=s("code",null,"interface",-1)),n[213]||(n[213]=a(" 可以直接默认导出，其他的变量需要先定义出来，再默认导出")),s("a",vn,[n[206]||(n[206]=a("19")),t(e)]),n[214]||(n[214]=a("："))]),n[367]||(n[367]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
<span class="token comment">// ERROR: Expression expected.</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中 <code>export default enum</code> 是错误的语法，需要使用 <code>declare enum</code> 定义出来，然后使用 <code>export default</code> 导出：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Directions<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[216]||(n[216]=a("针对这种默认导出，我们一般会将导出语句放在整个声明文件的最前面")),s("a",bn,[n[215]||(n[215]=a("20")),t(e)]),n[217]||(n[217]=a("："))]),n[368]||(n[368]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Directions<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("h4",fn,[s("a",gn,[s("span",null,[n[219]||(n[219]=s("code",null,"export =",-1)),s("a",yn,[n[218]||(n[218]=a("§")),t(e)])])])]),n[369]||(n[369]=o(`<p>在 commonjs 规范中，我们用以下方式来导出一个模块：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 整体导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> foo<span class="token punctuation">;</span>
<span class="token comment">// 单个导出</span>
exports<span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 <code>const ... = require</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 整体导入</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方式是 <code>import ... from</code>，注意针对整体导出，需要使用 <code>import * as</code> 来导入：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 整体导入</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三种方式是 <code>import ... require</code>，这也是 ts 官方推荐的方式：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 整体导入</span>
<span class="token keyword">import</span> foo <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 单个导入</span>
<span class="token keyword">import</span> bar <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),s("p",null,[n[221]||(n[221]=a("对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 ")),n[222]||(n[222]=s("code",null,"export =",-1)),n[223]||(n[223]=a(" 这种语法了")),s("a",xn,[n[220]||(n[220]=a("21")),t(e)]),n[224]||(n[224]=a("："))]),n[370]||(n[370]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">{</span>
    <span class="token keyword">const</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，上例中使用了 <code>export =</code> 之后，就不能再单个导出 <code>export { bar }</code> 了。所以我们通过声明合并，使用 <code>declare namespace foo</code> 来将 <code>bar</code> 合并到 <code>foo</code> 里。</p>`,2)),s("p",null,[n[226]||(n[226]=a("准确地讲，")),n[227]||(n[227]=s("code",null,"export =",-1)),n[228]||(n[228]=a(" 不仅可以用在声明文件中，也可以用在普通的 ts 文件中。实际上，")),n[229]||(n[229]=s("code",null,"import ... require",-1)),n[230]||(n[230]=a(" 和 ")),n[231]||(n[231]=s("code",null,"export =",-1)),n[232]||(n[232]=a(" 都是 ts 为了兼容 AMD 规范和 commonjs 规范而创立的新语法，由于并不常用也不推荐使用，所以这里就不详细介绍了，感兴趣的可以看")),s("a",wn,[n[225]||(n[225]=a("官方文档")),t(e)]),n[233]||(n[233]=a("。"))]),n[371]||(n[371]=o('<p>由于很多第三方库是 commonjs 规范的，所以声明文件也就不得不用到 <code>export =</code> 这种语法了。但是还是需要再强调下，相比与 <code>export =</code>，我们更推荐使用 ES6 标准的 <code>export default</code> 和 <code>export</code>。</p><h3 id="umd-库" tabindex="-1"><a class="header-anchor" href="#umd-库"><span>UMD 库</span></a></h3><p>既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入的库，称为 UMD 库。相比于 npm 包的类型声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 <code>export as namespace</code>。</p>',3)),s("h4",jn,[s("a",qn,[s("span",null,[n[235]||(n[235]=s("code",null,"export as namespace",-1)),s("a",Qn,[n[234]||(n[234]=a("§")),t(e)])])])]),s("p",null,[n[237]||(n[237]=a("一般使用 ")),n[238]||(n[238]=s("code",null,"export as namespace",-1)),n[239]||(n[239]=a(" 时，都是先有了 npm 包的声明文件，再基于它添加一条 ")),n[240]||(n[240]=s("code",null,"export as namespace",-1)),n[241]||(n[241]=a(" 语句，即可将声明好的一个变量声明为全局变量，举例如下")),s("a",Dn,[n[236]||(n[236]=a("22")),t(e)]),n[242]||(n[242]=a("："))]),n[372]||(n[372]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> foo<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token operator">=</span> foo<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">{</span>
    <span class="token keyword">const</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然它也可以与 <code>export default</code> 一起使用：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">as</span> <span class="token keyword">namespace</span> foo<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> foo <span class="token punctuation">{</span>
    <span class="token keyword">const</span> bar<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直接扩展全局变量" tabindex="-1"><a class="header-anchor" href="#直接扩展全局变量"><span>直接扩展全局变量</span></a></h3>`,4)),s("p",null,[n[244]||(n[244]=a("有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致 ts 编译错误，此时就需要扩展全局变量的类型。比如扩展 ")),n[245]||(n[245]=s("code",null,"String",-1)),n[246]||(n[246]=a(" 类型")),s("a",En,[n[243]||(n[243]=a("23")),t(e)]),n[247]||(n[247]=a("："))]),n[373]||(n[373]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token function">prependHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token string">&#39;foo&#39;</span><span class="token punctuation">.</span><span class="token function">prependHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过声明合并，使用 <code>interface String</code> 即可给 <code>String</code> 添加属性或方法。</p>`,2)),s("p",null,[n[249]||(n[249]=a("也可以使用 ")),n[250]||(n[250]=s("code",null,"declare namespace",-1)),n[251]||(n[251]=a(" 给已有的命名空间添加类型声明")),s("a",Sn,[n[248]||(n[248]=a("24")),t(e)]),n[252]||(n[252]=a("："))]),n[374]||(n[374]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/jquery-plugin/index.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">namespace</span> JQuery <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">CustomOptions</span> <span class="token punctuation">{</span>
        bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">JQueryStatic</span> <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span>options<span class="token operator">:</span> JQuery<span class="token punctuation">.</span>CustomOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

jQuery<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    bar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在-npm-包或-umd-库中扩展全局变量" tabindex="-1"><a class="header-anchor" href="#在-npm-包或-umd-库中扩展全局变量"><span>在 npm 包或 UMD 库中扩展全局变量</span></a></h3><p>如之前所说，对于一个 npm 包或者 UMD 库的声明文件，只有 <code>export</code> 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库，如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 <code>declare global</code>。</p>`,3)),s("h4",Tn,[s("a",An,[s("span",null,[n[254]||(n[254]=s("code",null,"declare global",-1)),s("a",Bn,[n[253]||(n[253]=a("§")),t(e)])])])]),s("p",null,[n[256]||(n[256]=a("使用 ")),n[257]||(n[257]=s("code",null,"declare global",-1)),n[258]||(n[258]=a(" 可以在 npm 包或者 UMD 库的声明文件中扩展全局变量的类型")),s("a",hn,[n[255]||(n[255]=a("25")),t(e)]),n[259]||(n[259]=a("："))]),n[375]||(n[375]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo/index.d.ts</span>

<span class="token keyword">declare</span> global <span class="token punctuation">{</span>
    <span class="token keyword">interface</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token function">prependHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token string">&#39;bar&#39;</span><span class="token punctuation">.</span><span class="token function">prependHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。</p>`,2)),s("h3",Rn,[s("a",Un,[s("span",null,[n[261]||(n[261]=a("模块插件")),s("a",Mn,[n[260]||(n[260]=a("§")),t(e)])])])]),n[376]||(n[376]=s("p",null,[a("有时通过 "),s("code",null,"import"),a(" 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。ts 提供了一个语法 "),s("code",null,"declare module"),a("，它可以用来扩展原有模块的类型。")],-1)),s("h4",Cn,[s("a",On,[s("span",null,[n[263]||(n[263]=s("code",null,"declare module",-1)),s("a",zn,[n[262]||(n[262]=a("§")),t(e)])])])]),s("p",null,[n[265]||(n[265]=a("如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 ")),n[266]||(n[266]=s("code",null,"declare module",-1)),n[267]||(n[267]=a(" 扩展原有模块")),s("a",Ln,[n[264]||(n[264]=a("26")),t(e)]),n[268]||(n[268]=a("："))]),n[377]||(n[377]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/moment-plugin/index.d.ts</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;moment&#39;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> moment<span class="token punctuation">.</span>CalendarKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;moment-plugin&#39;</span><span class="token punctuation">;</span>

moment<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[270]||(n[270]=s("code",null,"declare module",-1)),n[271]||(n[271]=a(" 也可用于在一个文件中一次性声明多个模块的类型")),s("a",Nn,[n[269]||(n[269]=a("27")),t(e)]),n[272]||(n[272]=a("："))]),n[378]||(n[378]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/foo-bar.d.ts</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
        foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> Foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> f<span class="token operator">:</span> Foo<span class="token punctuation">;</span>
bar<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明文件中的依赖" tabindex="-1"><a class="header-anchor" href="#声明文件中的依赖"><span>声明文件中的依赖</span></a></h3><p>一个声明文件有时会依赖另一个声明文件中的类型，比如在前面的 <code>declare module</code> 的例子中，我们就在声明文件中导入了 <code>moment</code>，并且使用了 <code>moment.CalendarKey</code> 这个类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/moment-plugin/index.d.ts</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moment <span class="token keyword">from</span> <span class="token string">&#39;moment&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;moment&#39;</span> <span class="token punctuation">{</span>
    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> moment<span class="token punctuation">.</span>CalendarKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了可以在声明文件中通过 <code>import</code> 导入另一个声明文件中的类型之外，还有一个语法也可以用来导入另一个声明文件，那就是三斜线指令。</p>`,5)),s("h4",Pn,[s("a",Jn,[s("span",null,[n[274]||(n[274]=a("三斜线指令")),s("a",Hn,[n[273]||(n[273]=a("§")),t(e)])])])]),n[379]||(n[379]=o('<p>与 <code>namespace</code> 类似，三斜线指令也是 ts 在早期版本中为了描述模块之间的依赖关系而创造的语法。随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的三斜线指令来声明模块之间的依赖关系了。</p><p>但是在声明文件中，它还是有一定的用武之地。</p><p>类似于声明文件中的 <code>import</code>，它可以用来导入另一个声明文件。与 <code>import</code> 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 <code>import</code>：</p><ul><li>当我们在<strong>书写</strong>一个全局变量的声明文件时</li><li>当我们需要<strong>依赖</strong>一个全局变量的声明文件时</li></ul><h5 id="书写一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#书写一个全局变量的声明文件"><span><strong>书写</strong>一个全局变量的声明文件</span></a></h5>',5)),s("p",null,[n[276]||(n[276]=a("这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 ")),n[277]||(n[277]=s("code",null,"import",-1)),n[278]||(n[278]=a(", ")),n[279]||(n[279]=s("code",null,"export",-1)),n[280]||(n[280]=a(" 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了")),s("a",Fn,[n[275]||(n[275]=a("28")),t(e)]),n[281]||(n[281]=a("："))]),n[380]||(n[380]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/jquery-plugin/index.d.ts</span>

<span class="token comment">/// &lt;reference types=&quot;jquery&quot; /&gt;</span>

<span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>options<span class="token operator">:</span> JQuery<span class="token punctuation">.</span>AjaxSettings<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三斜线指令的语法如上，<code>///</code> 后面使用 xml 的格式添加了对 <code>jquery</code> 类型的依赖，这样就可以在声明文件中使用 <code>JQuery.AjaxSettings</code> 类型了。</p><p>注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。</p><h5 id="依赖一个全局变量的声明文件" tabindex="-1"><a class="header-anchor" href="#依赖一个全局变量的声明文件"><span><strong>依赖</strong>一个全局变量的声明文件</span></a></h5>`,4)),s("p",null,[n[283]||(n[283]=a("在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 ")),n[284]||(n[284]=s("code",null,"import",-1)),n[285]||(n[285]=a(" 导入，当然也就必须使用三斜线指令来引入了")),s("a",$n,[n[282]||(n[282]=a("29")),t(e)]),n[286]||(n[286]=a("："))]),n[381]||(n[381]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// types/node-plugin/index.d.ts</span>

<span class="token comment">/// &lt;reference types=&quot;node&quot; /&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>p<span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>Process<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token comment">// src/index.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;node-plugin&#39;</span><span class="token punctuation">;</span>

<span class="token function">foo</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们通过三斜线指引入了 <code>node</code> 的类型，然后在声明文件中使用了 <code>NodeJS.Process</code> 这个类型。最后在使用到 <code>foo</code> 的时候，传入了 <code>node</code> 中的全局变量 <code>process</code>。</p><p>由于引入的 <code>node</code> 中的类型都是全局变量的类型，它们是没有办法通过 <code>import</code> 来导入的，所以这种场景下也只能通过三斜线指令来引入了。</p><p>以上两种使用场景下，都是由于需要书写或需要依赖全局变量的声明文件，所以必须使用三斜线指令。在其他的一些不是必要使用三斜线指令的情况下，就都需要使用 <code>import</code> 来导入。</p>`,4)),s("h5",Vn,[s("a",Zn,[s("span",null,[n[288]||(n[288]=a("拆分声明文件")),s("a",In,[n[287]||(n[287]=a("§")),t(e)])])])]),n[382]||(n[382]=o(`<p>当我们的全局变量的声明文件太大时，可以通过拆分为多个文件，然后在一个入口文件中将它们一一引入，来提高代码的可维护性。比如 <code>jQuery</code> 的声明文件就是这样的：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// node_modules/@types/jquery/index.d.ts</span>

<span class="token comment">/// &lt;reference types=&quot;sizzle&quot; /&gt;</span>
<span class="token comment">/// &lt;reference path=&quot;JQueryStatic.d.ts&quot; /&gt;</span>
<span class="token comment">/// &lt;reference path=&quot;JQuery.d.ts&quot; /&gt;</span>
<span class="token comment">/// &lt;reference path=&quot;misc.d.ts&quot; /&gt;</span>
<span class="token comment">/// &lt;reference path=&quot;legacy.d.ts&quot; /&gt;</span>

<span class="token keyword">export</span> <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中用到了 <code>types</code> 和 <code>path</code> 两种不同的指令。它们的区别是：<code>types</code> 用于声明对另一个库的依赖，而 <code>path</code> 用于声明对另一个文件的依赖。</p><p>上例中，<code>sizzle</code> 是与 <code>jquery</code> 平行的另一个库，所以需要使用 <code>types=&quot;sizzle&quot;</code> 来声明对它的依赖。而其他的三斜线指令就是将 <code>jquery</code> 的声明拆分到不同的文件中了，然后在这个入口文件中使用 <code>path=&quot;foo&quot;</code> 将它们一一引入。</p>`,4)),s("h5",Kn,[s("a",Gn,[s("span",null,[n[290]||(n[290]=a("其他三斜线指令")),s("a",Wn,[n[289]||(n[289]=a("§")),t(e)])])])]),s("p",null,[n[292]||(n[292]=a("除了这两种三斜线指令之外，还有其他的三斜线指令，比如 ")),n[293]||(n[293]=s("code",null,'/// <reference no-default-lib="true"/>',-1)),n[294]||(n[294]=a(", ")),n[295]||(n[295]=s("code",null,"/// <amd-module />",-1)),n[296]||(n[296]=a(" 等，但它们都是废弃的语法，故这里就不介绍了，详情可见")),s("a",Xn,[n[291]||(n[291]=a("官网")),t(e)]),n[297]||(n[297]=a("。"))]),n[383]||(n[383]=o(`<h3 id="自动生成声明文件" tabindex="-1"><a class="header-anchor" href="#自动生成声明文件"><span>自动生成声明文件</span></a></h3><p>如果库的源码本身就是由 ts 写的，那么在使用 <code>tsc</code> 脚本将 ts 编译为 js 的时候，添加 <code>declaration</code> 选项，就可以同时也生成 <code>.d.ts</code> 声明文件了。</p><p>我们可以在命令行中添加 <code>--declaration</code>（简写 <code>-d</code>），或者在 <code>tsconfig.json</code> 中添加 <code>declaration</code> 选项。这里以 <code>tsconfig.json</code> 为例：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中我们添加了 <code>outDir</code> 选项，将 ts 文件的编译结果输出到 <code>lib</code> 目录下，然后添加了 <code>declaration</code> 选项，设置为 <code>true</code>，表示将会由 ts 文件自动生成 <code>.d.ts</code> 声明文件，也会输出到 <code>lib</code> 目录下。</p>`,5)),s("p",null,[n[299]||(n[299]=a("运行 ")),n[300]||(n[300]=s("code",null,"tsc",-1)),n[301]||(n[301]=a(" 之后，目录结构如下")),s("a",Yn,[n[298]||(n[298]=a("30")),t(e)]),n[302]||(n[302]=a("："))]),n[384]||(n[384]=o(`<div class="language-autoit line-numbers-mode" data-ext="autoit" data-title="autoit"><pre class="language-autoit"><code><span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>project
├── lib
|  ├── bar
|  |  ├── index<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
|  |  └── index<span class="token punctuation">.</span>js
|  ├── index<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts
|  └── index<span class="token punctuation">.</span>js
├── src
|  ├── bar
|  |  └── index<span class="token punctuation">.</span>ts
|  └── index<span class="token punctuation">.</span>ts
├── package<span class="token punctuation">.</span>json
└── tsconfig<span class="token punctuation">.</span>json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>src</code> 目录下有两个 ts 文件，分别是 <code>src/index.ts</code> 和 <code>src/bar/index.ts</code>，它们被编译到 <code>lib</code> 目录下的同时，也会生成对应的两个声明文件 <code>lib/index.d.ts</code> 和 <code>lib/bar/index.d.ts</code>。它们的内容分别是：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// src/index.ts</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// src/bar/index.ts</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// lib/index.d.ts</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;./bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token comment">// lib/bar/index.d.ts</span>

<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，自动生成的声明文件基本保持了源码的结构，而将具体实现去掉了，生成了对应的类型声明。</p><p>使用 <code>tsc</code> 自动生成声明文件时，每个 ts 文件都会对应一个 <code>.d.ts</code> 声明文件。这样的好处是，使用方不仅可以在使用 <code>import foo from &#39;foo&#39;</code> 导入默认的模块时获得类型提示，还可以在使用 <code>import bar from &#39;foo/lib/bar&#39;</code> 导入一个子模块时，也获得对应的类型提示。</p><p>除了 <code>declaration</code> 选项之外，还有几个选项也与自动生成声明文件有关，这里只简单列举出来，不做详细演示了：</p><ul><li><code>declarationDir</code> 设置生成 <code>.d.ts</code> 文件的目录</li><li><code>declarationMap</code> 对每个 <code>.d.ts</code> 文件，都生成对应的 <code>.d.ts.map</code>（sourcemap）文件</li><li><code>emitDeclarationOnly</code> 仅生成 <code>.d.ts</code> 文件，不生成 <code>.js</code> 文件</li></ul><h2 id="发布声明文件" tabindex="-1"><a class="header-anchor" href="#发布声明文件"><span>发布声明文件</span></a></h2><p>当我们为一个库写好了声明文件之后，下一步就是将它发布出去了。</p><p>此时有两种方案：</p><ol><li>将声明文件和源码放在一起</li><li>将声明文件发布到 <code>@types</code> 下</li></ol><p>这两种方案中优先选择第一种方案。保持声明文件与源码在一起，使用时就不需要额外增加单独的声明文件库的依赖了，而且也能保证声明文件的版本与源码的版本保持一致。</p><p>仅当我们在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request 时，才需要使用第二种方案，将声明文件发布到 <code>@types</code> 下。</p><h3 id="将声明文件和源码放在一起" tabindex="-1"><a class="header-anchor" href="#将声明文件和源码放在一起"><span>将声明文件和源码放在一起</span></a></h3><p>如果声明文件是通过 <code>tsc</code> 自动生成的，那么无需做任何其他配置，只需要把编译好的文件也发布到 npm 上，使用方就可以获取到类型提示了。</p><p>如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别：</p><ul><li>给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址</li><li>在项目根目录下，编写一个 <code>index.d.ts</code> 文件</li><li>针对入口文件（<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件），编写一个同名不同后缀的 <code>.d.ts</code> 文件</li></ul><p>第一种方式是给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址。比如：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.d.ts&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定了 <code>types</code> 为 <code>foo.d.ts</code> 之后，导入此库的时候，就会去找 <code>foo.d.ts</code> 作为此库的类型声明文件了。</p><p><code>typings</code> 与 <code>types</code> 一样，只是另一种写法。</p><p>如果没有指定 <code>types</code> 或 <code>typings</code>，那么就会在根目录下寻找 <code>index.d.ts</code> 文件，将它视为此库的类型声明文件。</p><p>如果没有找到 <code>index.d.ts</code> 文件，那么就会寻找入口文件（<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件）是否存在对应同名不同后缀的 <code>.d.ts</code> 文件。</p><p>比如 <code>package.json</code> 是这样时：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就会先识别 <code>package.json</code> 中是否存在 <code>types</code> 或 <code>typings</code> 字段。发现不存在，那么就会寻找是否存在 <code>index.d.ts</code> 文件。如果还是不存在，那么就会寻找是否存在 <code>lib/index.d.ts</code> 文件。假如说连 <code>lib/index.d.ts</code> 都不存在的话，就会被认为是一个没有提供类型声明文件的库了。</p><p>有的库为了支持导入子模块，比如 <code>import bar from &#39;foo/lib/bar&#39;</code>，就需要额外再编写一个类型声明文件 <code>lib/bar.d.ts</code> 或者 <code>lib/bar/index.d.ts</code>，这与自动生成声明文件类似，一个库中同时包含了多个类型声明文件。</p><h3 id="将声明文件发布到-types-下" tabindex="-1"><a class="header-anchor" href="#将声明文件发布到-types-下"><span>将声明文件发布到 <code>@types</code> 下</span></a></h3><p>如果我们是在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request，那么就需要将声明文件发布到 <code>@types</code> 下。</p>`,29)),s("p",null,[n[305]||(n[305]=a("与普通的 npm 模块不同，")),n[306]||(n[306]=s("code",null,"@types",-1)),n[307]||(n[307]=a(" 是统一由 ")),s("a",_n,[n[303]||(n[303]=a("DefinitelyTyped")),t(e)]),n[308]||(n[308]=a(" 管理的。要将声明文件发布到 ")),n[309]||(n[309]=s("code",null,"@types",-1)),n[310]||(n[310]=a(" 下，就需要给 ")),s("a",ns,[n[304]||(n[304]=a("DefinitelyTyped")),t(e)]),n[311]||(n[311]=a(" 创建一个 pull-request，其中包含了类型声明文件，测试代码，以及 ")),n[312]||(n[312]=s("code",null,"tsconfig.json",-1)),n[313]||(n[313]=a(" 等。"))]),n[385]||(n[385]=s("p",null,[a("pull-request 需要符合它们的规范，并且通过测试，才能被合并，稍后就会被自动发布到 "),s("code",null,"@types"),a(" 下。")],-1)),s("p",null,[n[317]||(n[317]=a("在 ")),s("a",ss,[n[314]||(n[314]=a("DefinitelyTyped")),t(e)]),n[318]||(n[318]=a(" 中创建一个新的类型声明，需要用到一些工具，")),s("a",as,[n[315]||(n[315]=a("DefinitelyTyped")),t(e)]),n[319]||(n[319]=a(" 的文档中已经有了")),s("a",es,[n[316]||(n[316]=a("详细的介绍")),t(e)]),n[320]||(n[320]=a("，这里就不赘述了，以官方文档为准。"))]),s("p",null,[n[322]||(n[322]=a("如果大家有此类需求，可以参考下笔者")),s("a",ts,[n[321]||(n[321]=a("提交的 pull-request")),t(e)]),n[323]||(n[323]=a(" 。"))]),s("h2",os,[s("a",ps,[s("span",null,[n[325]||(n[325]=a("参考")),s("a",ls,[n[324]||(n[324]=a("§")),t(e)])])])]),s("ul",null,[s("li",null,[s("a",is,[n[326]||(n[326]=a("Writing Declaration Files")),t(e)]),n[327]||(n[327]=a("（[中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/declaration files/Introduction.html)）"))]),s("li",null,[s("a",rs,[n[328]||(n[328]=a("Triple-Slash Directives")),t(e)]),n[329]||(n[329]=a("（[中文版](https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Triple-Slash Directives.html)）"))]),s("li",null,[s("a",cs,[n[330]||(n[330]=a("typeRoots or paths")),t(e)])]),s("li",null,[s("a",ds,[n[331]||(n[331]=a("DefinitelyTyped")),t(e)])])])])}const vs=p(c,[["render",us],["__file","声明文件.html.vue"]]),bs=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/TypeScript/%E3%80%8ATypeScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%8B/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html","title":"声明文件","lang":"zh-CN","frontmatter":{"description":"声明文件 转：https://ts.xcatliu.com/basics/declaration-files.html 当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。 新语法索引 由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解： declare var 声明全...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/TypeScript/%E3%80%8ATypeScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%8B/%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"声明文件"}],["meta",{"property":"og:description","content":"声明文件 转：https://ts.xcatliu.com/basics/declaration-files.html 当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。 新语法索引 由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解： declare var 声明全..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"声明文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"声明文件","slug":"声明文件","link":"#声明文件","children":[{"level":2,"title":"新语法索引","slug":"新语法索引","link":"#新语法索引","children":[]},{"level":2,"title":"为什么要声明","slug":"为什么要声明","link":"#为什么要声明","children":[{"level":3,"title":"什么是声明语句","slug":"什么是声明语句","link":"#什么是声明语句","children":[]},{"level":3,"title":"什么是声明文件","slug":"什么是声明文件","link":"#什么是声明文件","children":[]},{"level":3,"title":"第三方声明文件","slug":"第三方声明文件","link":"#第三方声明文件","children":[]}]},{"level":2,"title":"书写声明文件","slug":"书写声明文件","link":"#书写声明文件","children":[{"level":3,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[{"level":4,"title":"declare var","slug":"declare-var","link":"#declare-var","children":[]},{"level":4,"title":"declare function","slug":"declare-function","link":"#declare-function","children":[]},{"level":4,"title":"declare class","slug":"declare-class","link":"#declare-class","children":[]},{"level":4,"title":"declare enum","slug":"declare-enum","link":"#declare-enum","children":[]},{"level":4,"title":"declare namespace","slug":"declare-namespace","link":"#declare-namespace","children":[{"level":5,"title":"嵌套的命名空间","slug":"嵌套的命名空间","link":"#嵌套的命名空间","children":[]}]},{"level":4,"title":"interface 和 type","slug":"interface-和-type","link":"#interface-和-type","children":[{"level":5,"title":"防止命名冲突","slug":"防止命名冲突","link":"#防止命名冲突","children":[]}]},{"level":4,"title":"声明合并","slug":"声明合并","link":"#声明合并","children":[]}]},{"level":3,"title":"npm 包","slug":"npm-包","link":"#npm-包","children":[{"level":4,"title":"export","slug":"export","link":"#export","children":[{"level":5,"title":"混用 declare 和 export","slug":"混用-declare-和-export","link":"#混用-declare-和-export","children":[]}]},{"level":4,"title":"export namespace§","slug":"export-namespace§","link":"#export-namespace§","children":[]},{"level":4,"title":"export default§","slug":"export-default§","link":"#export-default§","children":[]},{"level":4,"title":"export =§","slug":"export-§","link":"#export-§","children":[]}]},{"level":3,"title":"UMD 库","slug":"umd-库","link":"#umd-库","children":[{"level":4,"title":"export as namespace§","slug":"export-as-namespace§","link":"#export-as-namespace§","children":[]}]},{"level":3,"title":"直接扩展全局变量","slug":"直接扩展全局变量","link":"#直接扩展全局变量","children":[]},{"level":3,"title":"在 npm 包或 UMD 库中扩展全局变量","slug":"在-npm-包或-umd-库中扩展全局变量","link":"#在-npm-包或-umd-库中扩展全局变量","children":[{"level":4,"title":"declare global§","slug":"declare-global§","link":"#declare-global§","children":[]}]},{"level":3,"title":"模块插件§","slug":"模块插件§","link":"#模块插件§","children":[{"level":4,"title":"declare module§","slug":"declare-module§","link":"#declare-module§","children":[]}]},{"level":3,"title":"声明文件中的依赖","slug":"声明文件中的依赖","link":"#声明文件中的依赖","children":[{"level":4,"title":"三斜线指令§","slug":"三斜线指令§","link":"#三斜线指令§","children":[{"level":5,"title":"书写一个全局变量的声明文件","slug":"书写一个全局变量的声明文件","link":"#书写一个全局变量的声明文件","children":[]},{"level":5,"title":"依赖一个全局变量的声明文件","slug":"依赖一个全局变量的声明文件","link":"#依赖一个全局变量的声明文件","children":[]},{"level":5,"title":"拆分声明文件§","slug":"拆分声明文件§","link":"#拆分声明文件§","children":[]},{"level":5,"title":"其他三斜线指令§","slug":"其他三斜线指令§","link":"#其他三斜线指令§","children":[]}]}]},{"level":3,"title":"自动生成声明文件","slug":"自动生成声明文件","link":"#自动生成声明文件","children":[]}]},{"level":2,"title":"发布声明文件","slug":"发布声明文件","link":"#发布声明文件","children":[{"level":3,"title":"将声明文件和源码放在一起","slug":"将声明文件和源码放在一起","link":"#将声明文件和源码放在一起","children":[]},{"level":3,"title":"将声明文件发布到 @types 下","slug":"将声明文件发布到-types-下","link":"#将声明文件发布到-types-下","children":[]}]},{"level":2,"title":"参考§","slug":"参考§","link":"#参考§","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":27.69,"words":8307},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/TypeScript/《TypeScript入门教程》/声明文件.md","excerpt":"\\n<p>转：https://ts.xcatliu.com/basics/declaration-files.html</p>\\n<p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p>\\n<h2>新语法索引</h2>\\n<p>由于本章涉及大量新语法，故在本章开头列出新语法的索引，方便大家在使用这些新语法时能快速查找到对应的讲解：</p>\\n<ul>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-var\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare var</code></a> 声明全局变量</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-function\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare function</code></a> 声明全局方法</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-class\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare class</code></a> 声明全局类</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-enum\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare enum</code></a> 声明全局枚举类型</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare namespace</code></a> 声明（含有子属性的）全局对象</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#interface-%E5%92%8C-type\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>interface</code> 和 <code>type</code></a> 声明全局类型</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#export\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>export</code></a> 导出变量</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>export namespace</code></a> 导出（含有子属性的）对象</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#export-default\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>export default</code></a> ES6 默认导出</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#export-1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>export =</code></a> commonjs 导出模块</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#export-as-namespace\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>export as namespace</code></a> UMD 库声明全局变量</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-global\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare global</code></a> 扩展全局变量</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#declare-module\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>declare module</code></a> 扩展模块</li>\\n<li><a href=\\"https://ts.xcatliu.com/basics/declaration-files.html#san-xie-xian-zhi-ling\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>/// </code></a> 三斜线指令</li>\\n<li><code>kk</code> dfafd</li>\\n</ul>","autoDesc":true}');export{vs as comp,bs as data};
