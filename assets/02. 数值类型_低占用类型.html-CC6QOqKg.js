import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,a as n,b as l,d as t}from"./app-DUaYLZrg.js";const d={},s=n('<h1 id="_02-数值类型-低占用类型" tabindex="-1"><a class="header-anchor" href="#_02-数值类型-低占用类型"><span>02. 数值类型+低占用类型</span></a></h1><h2 id="基本类型-数字-整型、char、bool" tabindex="-1"><a class="header-anchor" href="#基本类型-数字-整型、char、bool"><span><strong>基本类型</strong> &gt; 数字 &gt; 整型、char、bool</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><blockquote><h4 id="子类型与类型宽度-与c不同" tabindex="-1"><a class="header-anchor" href="#子类型与类型宽度-与c不同"><span>子类型与类型宽度（与C不同）</span></a></h4></blockquote><p>字长（注意short [int]，long [int]简写）</p>',5),u=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,[t("C/C++"),l("br"),t("有符号类型")]),l("th",null,[t("C/C++"),l("br"),t("无符号类型")]),l("th",null,[t("宽度（C++标准表示法）"),l("br"),t("（确保最小长度）")]),l("th",null,[t("8/16位平台"),l("br"),t("字节数")]),l("th",null,[t("32位平台"),l("br"),t("字节数")]),l("th",null,[t("64位平台"),l("br"),t("字节数")]),l("th",null,"C++新增")])]),l("tbody",null,[l("tr",null,[l("td",null,"[signed] char"),l("td",null,"unsigned char"),l("td",null,[l("s",null,"至少"),t("1字节")]),l("td",null,"1"),l("td",null,"1"),l("td",null,"1"),l("td",null,"否")]),l("tr",null,[l("td",null,"short"),l("td",null,"unsigned short"),l("td",null,[l("s",null,"至少"),t("2字节")]),l("td",null,"2"),l("td",null,"2"),l("td",null,"2"),l("td",null,"否")]),l("tr",null,[l("td",null,"int"),l("td",null,"unsigned"),l("td",null,[t("至少2字节，且"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("short")]),l("td",null,"2"),l("td",null,"4"),l("td",null,"4"),l("td",null,"否")]),l("tr",null,[l("td",null,"long"),l("td",null,"unsigned long"),l("td",null,[t("至少4字节，且"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("int")]),l("td",null,"4"),l("td",null,[l("strong",null,"4")]),l("td",null,[l("strong",null,"8")]),l("td",null,"否")]),l("tr",null,[l("td",null,"longlong"),l("td",null,"unsigned long long"),l("td",null,[l("s",null,"至少"),t("8字节，且"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("long")]),l("td",null,"——"),l("td",null,"8"),l("td",null,"8"),l("td",null,[l("strong",null,"是")])]),l("tr",null,[l("td",null,"char *"),l("td"),l("td"),l("td",null,[l("mark",null,[l("strong",null,"2")])]),l("td",null,[l("mark",null,[l("strong",null,"4")])]),l("td",null,[l("mark",null,[l("strong",null,"8")])]),l("td",null,"否")]),l("tr",null,[l("td",null,"bool"),l("td"),l("td"),l("td"),l("td"),l("td"),l("td",null,[l("strong",null,"是")])]),l("tr",null,[l("td",null,"————"),l("td",null,"————"),l("td"),l("td",null,"————"),l("td",null,"————"),l("td",null,"————"),l("td",null,"——")]),l("tr",null,[l("td",null,"size_t"),l("td"),l("td"),l("td"),l("td",null,[l("strong",null,"4")]),l("td",null,[l("strong",null,"8")]),l("td",null,"否")]),l("tr",null,[l("td",null,"int32_t"),l("td",null,"uint32_t"),l("td"),l("td"),l("td",null,"4"),l("td",null,"4"),l("td",null,"否")]),l("tr",null,[l("td",null,"int64_t"),l("td",null,"unint64_t"),l("td"),l("td"),l("td",null,"8"),l("td",null,"8"),l("td",null,"否")]),l("tr",null,[l("td",null,"wchat_t"),l("td"),l("td"),l("td"),l("td",null,"根据字符集而定"),l("td",null,"根据字符集而定"),l("td",null,[l("strong",null,"是")])]),l("tr",null,[l("td",null,"——"),l("td",null,"char16_t"),l("td"),l("td"),l("td",null,"2"),l("td",null,"2"),l("td",null,[l("strong",null,"是")])]),l("tr",null,[l("td",null,"——"),l("td",null,"char32_t"),l("td"),l("td"),l("td",null,"4"),l("td",null,"4"),l("td",null,[l("strong",null,"是")])]),l("tr",null,[l("td",null,"————"),l("td",null,"————"),l("td"),l("td"),l("td"),l("td"),l("td")]),l("tr",null,[l("td",null,[l("s",null,"float")]),l("td"),l("td",null,"至少4字节"),l("td"),l("td",null,"4"),l("td",null,"4"),l("td",null,"否")]),l("tr",null,[l("td",null,[l("s",null,"double")]),l("td"),l("td",null,[t("至少6字节，且"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("float")]),l("td"),l("td",null,"8"),l("td",null,"8"),l("td",null,"否")]),l("tr",null,[l("td",null,[l("s",null,"long double")]),l("td"),l("td",null,[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("double")]),l("td"),l("td"),l("td",null,"(10、12、16)"),l("td",null,"否")])])],-1),c=n('<blockquote><h4 id="整型的子类型-char补充-与c不同" tabindex="-1"><a class="header-anchor" href="#整型的子类型-char补充-与c不同"><span>整型的子类型 - char补充（与C不同）</span></a></h4></blockquote><ul><li>分类依据：关于子类型加上<code>char</code>和<code>bool</code>，因为： <ul><li>char可以当整型用、只是一般是用来表示字符（ASCII）罢了</li><li>char可以用数字定义，而且也以数字存储数据</li></ul></li><li>符号 <ul><li>Java：char默认[signed] char，ASCII编码所在区域都在正数侧，占128个</li><li>C/C++：char在默认情况下即非无符号也非有符号，是否有符号由C++实现决定</li></ul></li><li>其他另类char类型 <ul><li><code>wchat_t</code><ul><li>对于有些字符集（如日文汉字系统）无法用char表示</li><li>而wchar_t是一种整数类型，有足够的空间可以表示系统使用的最大扩展字符集</li><li>输出使用<code>wcin</code>和<code>wcout</code></li></ul></li><li><code>char16_t</code>和<code>char32_t</code>（C++新增类型） <ul><li>类似于<code>int32_t</code>和<code>int64_t</code>的存在</li></ul></li></ul></li></ul><blockquote><h4 id="整型的子类型-bool补充-与c不同" tabindex="-1"><a class="header-anchor" href="#整型的子类型-bool补充-与c不同"><span>整型的子类型 - bool补充（与C不同）</span></a></h4></blockquote><ul><li>新增 <ul><li>ANSI/ISO C++标准后C++的新增类型，过去C++和C一样没有布尔类型，将非零值解释为true，将零解释为false</li></ul></li><li>转换 <ul><li>所有数字值或指针值都可以被隐式转换（不用显式强制转换）为bool值</li><li>任何非零值转换为true，零转换为false</li></ul></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><blockquote><h4 id="字面量方式" tabindex="-1"><a class="header-anchor" href="#字面量方式"><span>字面量方式</span></a></h4></blockquote><ul><li><p><strong>按进制定义</strong>：与C相同，C++能使用前1~2位来标识数字常量的基数（进制数）</p><ul><li>十进制：第一位1~9</li><li>八进制：第一位0，第二位1~7</li><li>16进制：前两位0x或0X</li></ul></li><li><p><strong>标明类型</strong>：和C一样通过后缀标明类型。在定义时意义不大，常用于<strong>不定义时直接使用数</strong>（用于选择存储常数的内存如何设置）</p><ul><li><p>显式标注（带后缀）</p><ul><li>int：默认情况的存储，不需要额外标明</li><li>long：<code>l</code>或<code>L</code>后缀（因为l看起来像数字，一般用L）</li><li>unsigned：<code>u</code>或<code>U</code>后缀</li><li>或者组合使用，如<code>ul</code>、<code>ll</code>、<code>ull</code></li></ul></li><li><p>隐式判断（不带后缀）</p><ul><li><p>不标明会自动判断，如在16位平台上（INT_MAX=32767，LONG_MIN=2147483648）：</p><p>20000被表示为int，40000被表示为long，3000000000被表示为longlong</p></li></ul></li></ul></li><li><p><strong>字符定义</strong>：</p><ul><li>使用单引号括起来，只能有一个字符</li></ul></li><li><p><strong>字符转义</strong>：</p><ul><li>C++转义序列编码查表去，基本上编程语言的都差不多（进制转义可能有点区别），转义包括按进制转义（类似于整数的按进制定义）</li></ul></li></ul><blockquote><h4 id="符号操作" tabindex="-1"><a class="header-anchor" href="#符号操作"><span>符号操作</span></a></h4></blockquote><ul><li><strong>算术运算符</strong>：<code>+、-、*、/、%</code>，加减乘除取余，其中： <ul><li>除法运算符有三种运算：整数除法（默认为floor除法）、float除法、double除法（运算符重载）</li><li>求模的操作数必须都是整型</li></ul></li></ul><blockquote><h4 id="内置函数操作-输出-与c不同" tabindex="-1"><a class="header-anchor" href="#内置函数操作-输出-与c不同"><span>内置函数操作 - 输出（与C不同）</span></a></h4></blockquote><p>C++的cout提供了控制符dec、hex、oct</p><ul><li><p><strong>按进制输出</strong>：C++的cout提供了控制符dec、hex、oct</p><ul><li><p>十进制：<code>cout &lt;&lt; dec &lt;&lt; n_int;</code>，整型默认方法（char例外）</p></li><li><p>八进制：<code>cout &lt;&lt; oct &lt;&lt; n_int;</code></p></li><li><p>16进制：<code>cout &lt;&lt; hex &lt;&lt; n_int;</code></p></li><li><p>ASCII编码输出：<code>cout &lt;&lt; c_char;</code>、<code>cout.put();</code>后者是成员函数，为什么有<code>cout.put();</code>？历史缘故：</p><p>在Release2.0之前<code>cout</code>能处理字符变量但无法正确处理字符常量（会自动保存成int类型，而现在可以正常处理了）</p></li><li><p>注意：默认输出dec（char例外），进制转换的操作是永久性的，如果是临时用的话就要改回来！</p></li></ul></li></ul><h2 id="基本类型-数字-浮点型" tabindex="-1"><a class="header-anchor" href="#基本类型-数字-浮点型"><span><strong>基本类型</strong> &gt; 数字 &gt; 浮点型</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><blockquote><h4 id="子类型与类型宽度-3种" tabindex="-1"><a class="header-anchor" href="#子类型与类型宽度-3种"><span>子类型与类型宽度（3种）</span></a></h4></blockquote>',15),i=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"浮点类型"),l("th",null,"宽度（C++标准表示法）"),l("th",null,"通常字节数")])]),l("tbody",null,[l("tr",null,[l("td",null,"float"),l("td",null,"至少4字节"),l("td",null,"4")]),l("tr",null,[l("td",null,"double"),l("td",null,[t("至少6字节，且"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("float")]),l("td",null,"6")]),l("tr",null,[l("td",null,"long double"),l("td",null,[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"≥")]),l("annotation",{encoding:"application/x-tex"},"\\geq")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),l("span",{class:"mrel"},"≥")])])]),t("double")]),l("td",null,"10、12、16")])])],-1),r=n('<p><code>long double</code>为多精度浮bai点类du型或长精度浮点类型</p><p>另外，这三种类型的指数范围至少是-37~37，可以从头文件cfloat或float.h中找到系统的限制</p><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><blockquote><h4 id="字面量方式-1" tabindex="-1"><a class="header-anchor" href="#字面量方式-1"><span>字面量方式</span></a></h4></blockquote><ul><li><strong>小数的两种表示法</strong><ul><li>小数点方式：如：<code>xx.xx</code></li><li>E表示法：如<code>xxexx</code>/<code>xxe+xx</code>、<code>xxe-xx</code>、<code>xxExx</code>/<code>xxE+xx</code>、<code>xxE-xx</code></li></ul></li><li><strong>标明类型</strong>：和C一样通过后缀标明类型，在定义时意义不大，常用于<strong>不定义时直接使用数</strong>（用于选择存储常数的内存如何设置） <ul><li>double：默认情况小数的存储，不需要额外标明</li><li>float：<code>f</code>或<code>F</code>后缀</li><li>long doublw：<code>l</code>或<code>L</code>后缀（因为l看起来像数字，一般用L）</li></ul></li></ul><blockquote><h4 id="符号操作-1" tabindex="-1"><a class="header-anchor" href="#符号操作-1"><span>符号操作</span></a></h4></blockquote><ul><li><strong>算术运算符</strong>：<code>+、-、*、/、%</code>，加减乘除取余，其中： <ul><li>除法运算符有三种运算：整数除法（默认为floor除法）、float除法、double除法（运算符重载）</li><li>求模的操作数必须都是整型</li></ul></li></ul><blockquote><h4 id="内置函数操作-输出-与c不同-1" tabindex="-1"><a class="header-anchor" href="#内置函数操作-输出-与c不同-1"><span>内置函数操作 - 输出（与C不同）</span></a></h4></blockquote><ul><li><strong>输出</strong>：通常cout会删除结尾的零，<code>cout.setf()</code>可以覆盖这种行为</li></ul>',9),h=[s,u,c,i,r];function p(g,m){return e(),o("div",null,h)}const _=a(d,[["render",p],["__file","02. 数值类型_低占用类型.html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"02. 数值类型+低占用类型","lang":"zh-CN","frontmatter":{"description":"02. 数值类型+低占用类型 基本类型 > 数字 > 整型、char、bool 简概 子类型与类型宽度（与C不同） 字长（注意short [int]，long [int]简写） 整型的子类型 - char补充（与C不同） 分类依据：关于子类型加上char和bool，因为： char可以当整型用、只是一般是用来表示字符（ASCII）罢了 char可以用数...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"02. 数值类型+低占用类型"}],["meta",{"property":"og:description","content":"02. 数值类型+低占用类型 基本类型 > 数字 > 整型、char、bool 简概 子类型与类型宽度（与C不同） 字长（注意short [int]，long [int]简写） 整型的子类型 - char补充（与C不同） 分类依据：关于子类型加上char和bool，因为： char可以当整型用、只是一般是用来表示字符（ASCII）罢了 char可以用数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02. 数值类型+低占用类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"02. 数值类型+低占用类型","slug":"_02-数值类型-低占用类型","link":"#_02-数值类型-低占用类型","children":[{"level":2,"title":"基本类型 > 数字 > 整型、char、bool","slug":"基本类型-数字-整型、char、bool","link":"#基本类型-数字-整型、char、bool","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"基本类型 > 数字 > 浮点型","slug":"基本类型-数字-浮点型","link":"#基本类型-数字-浮点型","children":[{"level":3,"title":"简概","slug":"简概-1","link":"#简概-1","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/C++/02. 数据+算法/02. 数值类型+低占用类型.md","autoDesc":true}');export{_ as comp,E as data};
