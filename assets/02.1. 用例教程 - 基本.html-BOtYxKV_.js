import{_ as o,c as l,e as t,a,d as n,b as p,o as r,r as c}from"./app-DaW0uU2l.js";const i={},u={href:"https://github.com/iovisor/bcc/blob/master/tools/execsnoop_example.txt",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/iovisor/bcc/blob/master/tools/opensnoop_example.txt",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/iovisor/bcc/blob/master/tools/ext4slower_example.txt",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/iovisor/bcc/blob/master/tools/biolatency_example.txt",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/iovisor/bcc/blob/master/tools/biosnoop_example.txt",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/iovisor/bcc/blob/master/tools/cachestat_example.txt",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/iovisor/bcc/blob/master/tools/tcpconnect_example.txt",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/iovisor/bcc/blob/master/tools/tcpaccept_example.txt",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/iovisor/bcc/blob/master/tools/tcpretrans_example.txt",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/iovisor/bcc/blob/master/tools/runqlat_example.txt",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/iovisor/bcc/blob/master/tools/profile_example.txt",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/iovisor/bcc/blob/master/tools/trace_example.txt",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/iovisor/bcc/blob/master/tools/argdist_example.txt",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/iovisor/bcc/blob/master/tools/funccount_example.txt",target:"_blank",rel:"noopener noreferrer"};function y(A,s){const e=c("ExternalLinkIcon");return r(),l("div",null,[s[38]||(s[38]=t(`<h1 id="bcc" tabindex="-1"><a class="header-anchor" href="#bcc"><span>BCC</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="用例教程-基本" tabindex="-1"><a class="header-anchor" href="#用例教程-基本"><span>用例教程 - 基本</span></a></h1><p>安装完再看这里</p><p>这些工具可能安装在您的系统上的 /usr/share/bcc/tools 下，或者您也可以从 /tools 下的 bcc github 存储库运行它们，其中它们具有 .py 扩展名。浏览 50 多种可用工具以获得更多分析选项。</p><h2 id="常规性能" tabindex="-1"><a class="header-anchor" href="#常规性能"><span>常规性能</span></a></h2><p>目录</p><ul><li>execsnoop, 为每个新进程打印一行输出</li><li>opensnoop, 打开监听</li><li>ext4slower, 跟踪 ext4 文件系统</li><li>biolatency, 跟踪磁盘 I/O 延迟</li><li>biosnoop, 为每个磁盘 I/O 打印一行输出，其中包含延迟（从设备发出到完成的时间）等详细信息</li><li>cachestat每秒（或每个自定义时间间隔）打印一行摘要，显示文件系统缓存的统计信息</li><li>tcpconnect, 为每个活动的 TCP 连接（例如，通过 connect()）打印一行输出，其中包括源地址和目标地址等详细信息</li><li>tcpaccept, 为每个被动 TCP 连接（例如，通过accept()）打印一行输出，其中包括源地址和目标地址等详细信息</li><li>tcpretrans, 为每个 TCP 重传数据包打印一行输出，其中包括源地址和目标地址以及 TCP 连接的内核状态等详细信息</li><li>runqlat, 计算线程在 CPU 运行队列上等待的时间，并将其打印为直方图</li><li>profile, 一个 CPU 分析器，它以一定的时间间隔采集堆栈跟踪样本，并打印唯一堆栈跟踪的摘要及其出现次数</li></ul><h3 id="execsnoop" tabindex="-1"><a class="header-anchor" href="#execsnoop"><span>execsnoop</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./execsnoop</span>
PCOMM            PID    RET ARGS
supervise        <span class="token number">9660</span>     <span class="token number">0</span> ./run
supervise        <span class="token number">9661</span>     <span class="token number">0</span> ./run
<span class="token function">mkdir</span>            <span class="token number">9662</span>     <span class="token number">0</span> /bin/mkdir <span class="token parameter variable">-p</span> ./main
run              <span class="token number">9663</span>     <span class="token number">0</span> ./run
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>execsnoop 为每个新进程打印一行输出。检查短期进程。这些可能会消耗 CPU 资源，但不会出现在大多数定期拍摄正在运行的进程的快照的监控工具中。</p><p>它通过跟踪 exec() 而不是 fork() 来工作，因此它将捕获多种类型的新进程，但不是全部（例如，它不会看到应用程序启动工作进程，也不会执行 exec() 任何其他进程）。</p>`,12)),a("p",null,[s[1]||(s[1]=n("More ")),a("a",u,[s[0]||(s[0]=n("examples")),p(e)])]),s[39]||(s[39]=t(`<h3 id="opensnoop" tabindex="-1"><a class="header-anchor" href="#opensnoop"><span>opensnoop</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./opensnoop</span>
PID    COMM               FD ERR <span class="token environment constant">PATH</span>
<span class="token number">1565</span>   redis-server        <span class="token number">5</span>   <span class="token number">0</span> /proc/1565/stat
<span class="token number">1565</span>   redis-server        <span class="token number">5</span>   <span class="token number">0</span> /proc/1565/stat
<span class="token number">1565</span>   redis-server        <span class="token number">5</span>   <span class="token number">0</span> /proc/1565/stat
<span class="token number">1603</span>   snmpd               <span class="token number">9</span>   <span class="token number">0</span> /proc/net/dev
<span class="token number">1603</span>   snmpd              <span class="token number">11</span>   <span class="token number">0</span> /proc/net/if_inet6
<span class="token number">1603</span>   snmpd              <span class="token parameter variable">-1</span>   <span class="token number">2</span> /sys/class/net/eth0/device/vendor
<span class="token number">1603</span>   snmpd              <span class="token number">11</span>   <span class="token number">0</span> /proc/sys/net/ipv4/neigh/eth0/retrans_time_ms
<span class="token number">1603</span>   snmpd              <span class="token number">11</span>   <span class="token number">0</span> /proc/sys/net/ipv6/neigh/eth0/retrans_time_ms
<span class="token number">1603</span>   snmpd              <span class="token number">11</span>   <span class="token number">0</span> /proc/sys/net/ipv6/conf/eth0/forwarding
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为每个 open() 系统调用打印一行输出，包括详细信息。</p><p>打开的文件可以告诉您很多有关应用程序如何工作的信息：识别它们的数据文件、配置文件和日志文件。有时，当应用程序不断尝试读取不存在的文件时，它们可能会行为不当且性能不佳。 opensnoop 让您快速浏览一下。</p>`,4)),a("p",null,[s[3]||(s[3]=n("More ")),a("a",d,[s[2]||(s[2]=n("examples")),p(e)]),s[4]||(s[4]=n("."))]),s[40]||(s[40]=t(`<h3 id="ext4slower-or-btrfs-xfs-zfs" tabindex="-1"><a class="header-anchor" href="#ext4slower-or-btrfs-xfs-zfs"><span>ext4slower (or <code>btrfs*</code>, <code>xfs*</code>, <code>zfs*</code>)</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./ext4slower</span>
Tracing ext4 operations slower than <span class="token number">10</span> ms
TIME     COMM           PID    T BYTES   OFF_KB   LAT<span class="token punctuation">(</span>ms<span class="token punctuation">)</span> FILENAME
06:35:01 <span class="token function">cron</span>           <span class="token number">16464</span>  R <span class="token number">1249</span>    <span class="token number">0</span>          <span class="token number">16.05</span> common-auth
06:35:01 <span class="token function">cron</span>           <span class="token number">16463</span>  R <span class="token number">1249</span>    <span class="token number">0</span>          <span class="token number">16.04</span> common-auth
06:35:01 <span class="token function">cron</span>           <span class="token number">16465</span>  R <span class="token number">1249</span>    <span class="token number">0</span>          <span class="token number">16.03</span> common-auth
06:35:01 <span class="token function">cron</span>           <span class="token number">16465</span>  R <span class="token number">4096</span>    <span class="token number">0</span>          <span class="token number">10.62</span> login.defs
06:35:01 <span class="token function">cron</span>           <span class="token number">16464</span>  R <span class="token number">4096</span>    <span class="token number">0</span>          <span class="token number">10.61</span> login.defs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ext4slower 跟踪 ext4 文件系统并对常见操作进行计时，然后仅打印超出阈值的操作。</p><p>这对于识别或消除一种类型的性能问题非常有用：通过文件系统显示单独的缓慢磁盘 I/O。磁盘异步处理 I/O，可能很难将该层的延迟与延迟应用程序体验相关联。在内核堆栈中向上跟踪，在 VFS -&gt; 文件系统接口处，将更接近地匹配应用程序所遭受的情况。使用此工具可以确定文件系统延迟是否超过给定阈值。</p><p>其他文件系统的 bcc 中也存在类似的工具：btrfsslower、xfsslower 和 zfsslower。还有 fileslower，它在 VFS 层工作并跟踪所有内容（尽管开销较高）</p>`,5)),a("p",null,[s[6]||(s[6]=n("More ")),a("a",b,[s[5]||(s[5]=n("examples")),p(e)]),s[7]||(s[7]=n("."))]),s[41]||(s[41]=t(`<h3 id="biolatency" tabindex="-1"><a class="header-anchor" href="#biolatency"><span>biolatency</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./biolatency</span>
Tracing block device I/O<span class="token punctuation">..</span>. Hit Ctrl-C to end.
^C
     usecs           <span class="token builtin class-name">:</span> count     distribution
       <span class="token number">0</span> -<span class="token operator">&gt;</span> <span class="token number">1</span>        <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
       <span class="token number">2</span> -<span class="token operator">&gt;</span> <span class="token number">3</span>        <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
       <span class="token number">4</span> -<span class="token operator">&gt;</span> <span class="token number">7</span>        <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
       <span class="token number">8</span> -<span class="token operator">&gt;</span> <span class="token number">15</span>       <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
      <span class="token number">16</span> -<span class="token operator">&gt;</span> <span class="token number">31</span>       <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
      <span class="token number">32</span> -<span class="token operator">&gt;</span> <span class="token number">63</span>       <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
      <span class="token number">64</span> -<span class="token operator">&gt;</span> <span class="token number">127</span>      <span class="token builtin class-name">:</span> <span class="token number">1</span>        <span class="token operator">|</span>                                      <span class="token operator">|</span>
     <span class="token number">128</span> -<span class="token operator">&gt;</span> <span class="token number">255</span>      <span class="token builtin class-name">:</span> <span class="token number">12</span>       <span class="token operator">|</span>********                              <span class="token operator">|</span>
     <span class="token number">256</span> -<span class="token operator">&gt;</span> <span class="token number">511</span>      <span class="token builtin class-name">:</span> <span class="token number">15</span>       <span class="token operator">|</span>**********                            <span class="token operator">|</span>
     <span class="token number">512</span> -<span class="token operator">&gt;</span> <span class="token number">1023</span>     <span class="token builtin class-name">:</span> <span class="token number">43</span>       <span class="token operator">|</span>*******************************       <span class="token operator">|</span>
    <span class="token number">1024</span> -<span class="token operator">&gt;</span> <span class="token number">2047</span>     <span class="token builtin class-name">:</span> <span class="token number">52</span>       <span class="token operator">|</span>**************************************<span class="token operator">|</span>
    <span class="token number">2048</span> -<span class="token operator">&gt;</span> <span class="token number">4095</span>     <span class="token builtin class-name">:</span> <span class="token number">47</span>       <span class="token operator">|</span>**********************************    <span class="token operator">|</span>
    <span class="token number">4096</span> -<span class="token operator">&gt;</span> <span class="token number">8191</span>     <span class="token builtin class-name">:</span> <span class="token number">52</span>       <span class="token operator">|</span>**************************************<span class="token operator">|</span>
    <span class="token number">8192</span> -<span class="token operator">&gt;</span> <span class="token number">16383</span>    <span class="token builtin class-name">:</span> <span class="token number">36</span>       <span class="token operator">|</span>**************************            <span class="token operator">|</span>
   <span class="token number">16384</span> -<span class="token operator">&gt;</span> <span class="token number">32767</span>    <span class="token builtin class-name">:</span> <span class="token number">15</span>       <span class="token operator">|</span>**********                            <span class="token operator">|</span>
   <span class="token number">32768</span> -<span class="token operator">&gt;</span> <span class="token number">65535</span>    <span class="token builtin class-name">:</span> <span class="token number">2</span>        <span class="token operator">|</span>*                                     <span class="token operator">|</span>
   <span class="token number">65536</span> -<span class="token operator">&gt;</span> <span class="token number">131071</span>   <span class="token builtin class-name">:</span> <span class="token number">2</span>        <span class="token operator">|</span>*                                     <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>biolatency 跟踪磁盘 I/O 延迟（从设备发出到完成的时间），当工具结束时（Ctrl-C 或给定间隔），它会打印延迟的直方图摘要。</p><p>这对于了解超出 iostat 等工具给出的平均时间的磁盘 I/O 延迟非常有用。 I/O 延迟异常值在分发以及多模式分发结束时将可见。</p>`,4)),a("p",null,[s[9]||(s[9]=n("More ")),a("a",m,[s[8]||(s[8]=n("examples")),p(e)])]),s[42]||(s[42]=t(`<h3 id="biosnoop" tabindex="-1"><a class="header-anchor" href="#biosnoop"><span>biosnoop</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./biosnoop</span>
TIME<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        COMM           PID    DISK    T  SECTOR    BYTES   LAT<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>
<span class="token number">0.000004001</span>    supervise      <span class="token number">1950</span>   xvda1   W  <span class="token number">13092560</span>  <span class="token number">4096</span>       <span class="token number">0.74</span>
<span class="token number">0.000178002</span>    supervise      <span class="token number">1950</span>   xvda1   W  <span class="token number">13092432</span>  <span class="token number">4096</span>       <span class="token number">0.61</span>
<span class="token number">0.001469001</span>    supervise      <span class="token number">1956</span>   xvda1   W  <span class="token number">13092440</span>  <span class="token number">4096</span>       <span class="token number">1.24</span>
<span class="token number">0.001588002</span>    supervise      <span class="token number">1956</span>   xvda1   W  <span class="token number">13115128</span>  <span class="token number">4096</span>       <span class="token number">1.09</span>
<span class="token number">1.022346001</span>    supervise      <span class="token number">1950</span>   xvda1   W  <span class="token number">13115272</span>  <span class="token number">4096</span>       <span class="token number">0.98</span>
<span class="token number">1.022568002</span>    supervise      <span class="token number">1950</span>   xvda1   W  <span class="token number">13188496</span>  <span class="token number">4096</span>       <span class="token number">0.93</span>
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>biosnoop 为每个磁盘 I/O 打印一行输出，其中包含延迟（从设备发出到完成的时间）等详细信息。</p><p>这使您可以更详细地检查磁盘 I/O，并查找按时间排序的模式（例如，在写入后面排队的读取）。请注意，如果您的系统以高速率执行磁盘 I/O，则输出将会很详细。</p>`,4)),a("p",null,[s[11]||(s[11]=n("More ")),a("a",k,[s[10]||(s[10]=n("examples")),p(e)])]),s[43]||(s[43]=t(`<h3 id="cachestat" tabindex="-1"><a class="header-anchor" href="#cachestat"><span>cachestat</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./cachestat</span>
    HITS   MISSES  DIRTIES  READ_HIT% WRITE_HIT%   BUFFERS_MB  CACHED_MB
    <span class="token number">1074</span>       <span class="token number">44</span>       <span class="token number">13</span>      <span class="token number">94.9</span>%       <span class="token number">2.9</span>%            <span class="token number">1</span>        <span class="token number">223</span>
    <span class="token number">2195</span>      <span class="token number">170</span>        <span class="token number">8</span>      <span class="token number">92.5</span>%       <span class="token number">6.8</span>%            <span class="token number">1</span>        <span class="token number">143</span>
     <span class="token number">182</span>       <span class="token number">53</span>       <span class="token number">56</span>      <span class="token number">53.6</span>%       <span class="token number">1.3</span>%            <span class="token number">1</span>        <span class="token number">143</span>
   <span class="token number">62480</span>    <span class="token number">40960</span>    <span class="token number">20480</span>      <span class="token number">40.6</span>%      <span class="token number">19.8</span>%            <span class="token number">1</span>        <span class="token number">223</span>
       <span class="token number">7</span>        <span class="token number">2</span>        <span class="token number">5</span>      <span class="token number">22.2</span>%      <span class="token number">22.2</span>%            <span class="token number">1</span>        <span class="token number">223</span>
     <span class="token number">348</span>        <span class="token number">0</span>        <span class="token number">0</span>     <span class="token number">100.0</span>%       <span class="token number">0.0</span>%            <span class="token number">1</span>        <span class="token number">223</span>
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cachestat 每秒（或每个自定义时间间隔）打印一行摘要，显示文件系统缓存的统计信息。</p><p>使用它来识别低缓存命中率和高未命中率：这为性能调整提供了线索。</p>`,4)),a("p",null,[s[13]||(s[13]=n("More ")),a("a",v,[s[12]||(s[12]=n("examples")),p(e)])]),s[44]||(s[44]=t(`<h3 id="tcpconnect" tabindex="-1"><a class="header-anchor" href="#tcpconnect"><span>tcpconnect</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpconnect</span>
PID    COMM         IP SADDR            DADDR            DPORT
<span class="token number">1479</span>   telnet       <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">127.0</span>.0.1        <span class="token number">23</span>
<span class="token number">1469</span>   <span class="token function">curl</span>         <span class="token number">4</span>  <span class="token number">10.201</span>.219.236   <span class="token number">54.245</span>.105.25    <span class="token number">80</span>
<span class="token number">1469</span>   <span class="token function">curl</span>         <span class="token number">4</span>  <span class="token number">10.201</span>.219.236   <span class="token number">54.67</span>.101.145    <span class="token number">80</span>
<span class="token number">1991</span>   telnet       <span class="token number">6</span>  ::1              ::1              <span class="token number">23</span>
<span class="token number">2015</span>   <span class="token function">ssh</span>          <span class="token number">6</span>  fe80::2000:bff:fe82:3ac fe80::2000:bff:fe82:3ac <span class="token number">22</span>
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcpconnect 为每个活动的 TCP 连接（例如，通过 connect()）打印一行输出，其中包括源地址和目标地址等详细信息。</p><p>查找可能导致应用程序配置效率低下或入侵者的意外连接。</p>`,4)),a("p",null,[s[15]||(s[15]=n("More ")),a("a",f,[s[14]||(s[14]=n("examples")),p(e)]),s[16]||(s[16]=n("."))]),s[45]||(s[45]=t(`<h3 id="tcpaccept" tabindex="-1"><a class="header-anchor" href="#tcpaccept"><span>tcpaccept</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpaccept</span>
PID    COMM         IP RADDR            LADDR            LPORT
<span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">192.168</span>.56.1     <span class="token number">192.168</span>.56.102   <span class="token number">22</span>
<span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">127.0</span>.0.1        <span class="token number">22</span>
<span class="token number">5389</span>   perl         <span class="token number">6</span>  <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">7001</span>
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcpaccept 为每个被动 TCP 连接（例如，通过accept()）打印一行输出，其中包括源地址和目标地址等详细信息。</p><p>查找可能导致应用程序配置效率低下或入侵者的意外连接。</p>`,4)),a("p",null,[s[18]||(s[18]=n("More ")),a("a",h,[s[17]||(s[17]=n("examples")),p(e)]),s[19]||(s[19]=n("."))]),s[46]||(s[46]=t(`<h3 id="tcpretrans" tabindex="-1"><a class="header-anchor" href="#tcpretrans"><span>tcpretrans</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpretrans</span>
TIME     PID    IP LADDR:LPORT          T<span class="token operator">&gt;</span> RADDR:RPORT          STATE
01:55:05 <span class="token number">0</span>      <span class="token number">4</span>  <span class="token number">10.153</span>.223.157:22    R<span class="token operator">&gt;</span> <span class="token number">69.53</span>.245.40:34619   ESTABLISHED
01:55:05 <span class="token number">0</span>      <span class="token number">4</span>  <span class="token number">10.153</span>.223.157:22    R<span class="token operator">&gt;</span> <span class="token number">69.53</span>.245.40:34619   ESTABLISHED
01:55:17 <span class="token number">0</span>      <span class="token number">4</span>  <span class="token number">10.153</span>.223.157:22    R<span class="token operator">&gt;</span> <span class="token number">69.53</span>.245.40:22957   ESTABLISHED
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcprerans 为每个 TCP 重传数据包打印一行输出，其中包括源地址和目标地址以及 TCP 连接的内核状态等详细信息。</p><p>TCP 重传会导致延迟和吞吐量问题。对于 ESTABLISHED 重传，寻找网络模式。对于 SYN_SENT，这可能表明目标内核 CPU 饱和和内核数据包丢失。</p>`,4)),a("p",null,[s[21]||(s[21]=n("More ")),a("a",g,[s[20]||(s[20]=n("examples")),p(e)]),s[22]||(s[22]=n("."))]),s[47]||(s[47]=t(`<h3 id="runqlat" tabindex="-1"><a class="header-anchor" href="#runqlat"><span>runqlat</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./runqlat</span>
Tracing run queue latency<span class="token punctuation">..</span>. Hit Ctrl-C to end.
^C
     usecs               <span class="token builtin class-name">:</span> count     distribution
         <span class="token number">0</span> -<span class="token operator">&gt;</span> <span class="token number">1</span>          <span class="token builtin class-name">:</span> <span class="token number">233</span>      <span class="token operator">|</span>***********                             <span class="token operator">|</span>
         <span class="token number">2</span> -<span class="token operator">&gt;</span> <span class="token number">3</span>          <span class="token builtin class-name">:</span> <span class="token number">742</span>      <span class="token operator">|</span>************************************    <span class="token operator">|</span>
         <span class="token number">4</span> -<span class="token operator">&gt;</span> <span class="token number">7</span>          <span class="token builtin class-name">:</span> <span class="token number">203</span>      <span class="token operator">|</span>**********                              <span class="token operator">|</span>
         <span class="token number">8</span> -<span class="token operator">&gt;</span> <span class="token number">15</span>         <span class="token builtin class-name">:</span> <span class="token number">173</span>      <span class="token operator">|</span>********                                <span class="token operator">|</span>
        <span class="token number">16</span> -<span class="token operator">&gt;</span> <span class="token number">31</span>         <span class="token builtin class-name">:</span> <span class="token number">24</span>       <span class="token operator">|</span>*                                       <span class="token operator">|</span>
        <span class="token number">32</span> -<span class="token operator">&gt;</span> <span class="token number">63</span>         <span class="token builtin class-name">:</span> <span class="token number">0</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>
        <span class="token number">64</span> -<span class="token operator">&gt;</span> <span class="token number">127</span>        <span class="token builtin class-name">:</span> <span class="token number">30</span>       <span class="token operator">|</span>*                                       <span class="token operator">|</span>
       <span class="token number">128</span> -<span class="token operator">&gt;</span> <span class="token number">255</span>        <span class="token builtin class-name">:</span> <span class="token number">6</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>
       <span class="token number">256</span> -<span class="token operator">&gt;</span> <span class="token number">511</span>        <span class="token builtin class-name">:</span> <span class="token number">3</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>
       <span class="token number">512</span> -<span class="token operator">&gt;</span> <span class="token number">1023</span>       <span class="token builtin class-name">:</span> <span class="token number">5</span>        <span class="token operator">|</span>                                        <span class="token operator">|</span>
      <span class="token number">1024</span> -<span class="token operator">&gt;</span> <span class="token number">2047</span>       <span class="token builtin class-name">:</span> <span class="token number">27</span>       <span class="token operator">|</span>*                                       <span class="token operator">|</span>
      <span class="token number">2048</span> -<span class="token operator">&gt;</span> <span class="token number">4095</span>       <span class="token builtin class-name">:</span> <span class="token number">30</span>       <span class="token operator">|</span>*                                       <span class="token operator">|</span>
      <span class="token number">4096</span> -<span class="token operator">&gt;</span> <span class="token number">8191</span>       <span class="token builtin class-name">:</span> <span class="token number">20</span>       <span class="token operator">|</span>                                        <span class="token operator">|</span>
      <span class="token number">8192</span> -<span class="token operator">&gt;</span> <span class="token number">16383</span>      <span class="token builtin class-name">:</span> <span class="token number">29</span>       <span class="token operator">|</span>*                                       <span class="token operator">|</span>
     <span class="token number">16384</span> -<span class="token operator">&gt;</span> <span class="token number">32767</span>      <span class="token builtin class-name">:</span> <span class="token number">809</span>      <span class="token operator">|</span>****************************************<span class="token operator">|</span>
     <span class="token number">32768</span> -<span class="token operator">&gt;</span> <span class="token number">65535</span>      <span class="token builtin class-name">:</span> <span class="token number">64</span>       <span class="token operator">|</span>***                                     <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>runqlat 计算线程在 CPU 运行队列上等待的时间，并将其打印为直方图。</p><p>这可以帮助量化在 CPU 饱和期间等待打开 CPU 所损失的时间。</p>`,4)),a("p",null,[s[24]||(s[24]=n("More ")),a("a",x,[s[23]||(s[23]=n("examples")),p(e)]),s[25]||(s[25]=n("."))]),s[48]||(s[48]=t(`<h3 id="profile" tabindex="-1"><a class="header-anchor" href="#profile"><span>profile</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./profile</span>
Sampling at <span class="token number">49</span> Hertz of all threads by user + kernel stack<span class="token punctuation">..</span>. Hit Ctrl-C to end.
^C
    00007f31d76c3251 <span class="token punctuation">[</span>unknown<span class="token punctuation">]</span>
    47a2c1e752bf47f7 <span class="token punctuation">[</span>unknown<span class="token punctuation">]</span>
    -                sign-file <span class="token punctuation">(</span><span class="token number">8877</span><span class="token punctuation">)</span>
        <span class="token number">1</span>

    ffffffff813d0af8 __clear_user
    ffffffff813d5277 iov_iter_zero
    ffffffff814ec5f2 read_iter_zero
    ffffffff8120be9d __vfs_read
    ffffffff8120c385 vfs_read
    ffffffff8120d786 sys_read
    ffffffff817cc076 entry_SYSCALL_64_fastpath
    00007fc5652ad9b0 <span class="token builtin class-name">read</span>
    -                <span class="token function">dd</span> <span class="token punctuation">(</span><span class="token number">25036</span><span class="token punctuation">)</span>
        <span class="token number">4</span>

    0000000000400542 func_a
    0000000000400598 main
    00007f12a133e830 __libc_start_main
    083e258d4c544155 <span class="token punctuation">[</span>unknown<span class="token punctuation">]</span>
    -                func_ab <span class="token punctuation">(</span><span class="token number">13549</span><span class="token punctuation">)</span>
        <span class="token number">5</span>

<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>

    ffffffff8105eb66 native_safe_halt
    ffffffff8103659e default_idle
    ffffffff81036d1f arch_cpu_idle
    ffffffff810bba5a default_idle_call
    ffffffff810bbd07 cpu_startup_entry
    ffffffff8104df55 start_secondary
    -                swapper/1 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token number">75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>profile 是一个 CPU 分析器，它以一定的时间间隔采集堆栈跟踪样本，并打印唯一堆栈跟踪的摘要及其出现次数。</p><p>使用此工具可以了解消耗 CPU 资源的代码路径。</p>`,4)),a("p",null,[s[27]||(s[27]=n("More ")),a("a",_,[s[26]||(s[26]=n("examples")),p(e)]),s[28]||(s[28]=n("."))]),s[49]||(s[49]=t(`<h2 id="使用通用工具的可观察性" tabindex="-1"><a class="header-anchor" href="#使用通用工具的可观察性"><span>使用通用工具的可观察性</span></a></h2><p>除了上述用于性能调整的工具之外，下面是 bcc 通用工具的清单，首先作为列表，然后详细说明：</p><ol><li>trace</li><li>argdist</li><li>funccount</li></ol><p>这些通用工具可能有助于提供可视性来解决您的特定问题。</p><h3 id="trace" tabindex="-1"><a class="header-anchor" href="#trace"><span>trace</span></a></h3><h4 id="example1" tabindex="-1"><a class="header-anchor" href="#example1"><span>example1</span></a></h4><p>假设您要跟踪文件所有权更改。用户可以使用三个系统调用 <code>chown</code> 、 <code>fchown</code> 和 <code>lchown</code> 来更改文件所有权。对应的系统调用条目是 <code>SyS_[f|l]chown</code> 。以下命令可用于打印系统调用参数和调用进程用户 ID。您可以使用 <code>id</code> 命令查找特定用户的uid。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace.py <span class="token punctuation">\\</span>
  <span class="token string">&#39;p::SyS_chown &quot;file = %s, to_uid = %d, to_gid = %d, from_uid = %d&quot;, arg1, arg2, arg3, $uid&#39;</span> <span class="token punctuation">\\</span>
  <span class="token string">&#39;p::SyS_fchown &quot;fd = %d, to_uid = %d, to_gid = %d, from_uid = %d&quot;, arg1, arg2, arg3, $uid&#39;</span> <span class="token punctuation">\\</span>
  <span class="token string">&#39;p::SyS_lchown &quot;file = %s, to_uid = %d, to_gid = %d, from_uid = %d&quot;, arg1, arg2, arg3, $uid&#39;</span>
PID    TID    COMM         FUNC             -
<span class="token number">1269255</span> <span class="token number">1269255</span> python3.6    SyS_lchown       <span class="token function">file</span> <span class="token operator">=</span> /tmp/dotsync-usisgezu/tmp, to_uid <span class="token operator">=</span> <span class="token number">128203</span>, to_gid <span class="token operator">=</span> <span class="token number">100</span>, from_uid <span class="token operator">=</span> <span class="token number">128203</span>
<span class="token number">1269441</span> <span class="token number">1269441</span> zstd         SyS_chown        <span class="token function">file</span> <span class="token operator">=</span> /tmp/dotsync-vic7ygj0/dotsync-package.zst, to_uid <span class="token operator">=</span> <span class="token number">128203</span>, to_gid <span class="token operator">=</span> <span class="token number">100</span>, from_uid <span class="token operator">=</span> <span class="token number">128203</span>
<span class="token number">1269255</span> <span class="token number">1269255</span> python3.6    SyS_lchown       <span class="token function">file</span> <span class="token operator">=</span> /tmp/dotsync-a40zd7ev/tmp, to_uid <span class="token operator">=</span> <span class="token number">128203</span>, to_gid <span class="token operator">=</span> <span class="token number">100</span>, from_uid <span class="token operator">=</span> <span class="token number">128203</span>
<span class="token number">1269442</span> <span class="token number">1269442</span> zstd         SyS_chown        <span class="token function">file</span> <span class="token operator">=</span> /tmp/dotsync-gzp413o_/dotsync-package.zst, to_uid <span class="token operator">=</span> <span class="token number">128203</span>, to_gid <span class="token operator">=</span> <span class="token number">100</span>, from_uid <span class="token operator">=</span> <span class="token number">128203</span>
<span class="token number">1269255</span> <span class="token number">1269255</span> python3.6    SyS_lchown       <span class="token function">file</span> <span class="token operator">=</span> /tmp/dotsync-whx4fivm/tmp/.bash_profile, to_uid <span class="token operator">=</span> <span class="token number">128203</span>, to_gid <span class="token operator">=</span> <span class="token number">100</span>, from_uid <span class="token operator">=</span> <span class="token number">128203</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example2" tabindex="-1"><a class="header-anchor" href="#example2"><span>example2</span></a></h4><p>假设您想要在基于 bpf 的性能监控工具中对非自愿上下文切换 ( <code>nvcsw</code> ) 进行计数，并且您不知道什么是正确的方法。 <code>/proc/&lt;pid&gt;/status</code> 已经告诉您 pid 的编号 ( <code>nonvoluntary_ctxt_switches</code> )，您可以使用 <code>trace.py</code> 进行快速实验来验证您的方法。对于内核源代码， <code>nvcsw</code> 在文件 <code>linux/kernel/sched/core.c</code> 函数 <code>__schedule</code> 处进行计数，并在条件下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span>preempt <span class="token operator">&amp;&amp;</span> prev-<span class="token operator">&gt;</span>state<span class="token punctuation">)</span> // i.e., preempt <span class="token operator">||</span> <span class="token operator">!</span>prev-<span class="token operator">&gt;</span>state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>__schedule</code> 函数被标记为 <code>notrace</code> ，评估上述条件的最佳位置似乎是在函数 <code>__schedule</code> 内部调用并在 <code>linux/include/trace/events/sched.h</code> 中定义的 <code>sched/sched_switch</code> 跟踪点。 <code>trace.py</code> 已经将 <code>args</code> 作为指向跟踪点 <code>TP_STRUCT__entry</code> 的指针。上述条件在函数 <code>__schedule</code> 中可以表示为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>args-<span class="token operator">&gt;</span>prev_state <span class="token operator">==</span> TASK_STATE_MAX <span class="token operator">||</span> args-<span class="token operator">&gt;</span>prev_state <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的命令可用于计算非自愿上下文切换（每个进程或每个 pid），并与 <code>/proc/&lt;pid&gt;/status</code> 或 <code>/proc/&lt;pid&gt;/task/&lt;task_id&gt;/status</code> 进行比较以确保正确性，因为在典型情况下，非自愿上下文切换并不常见。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace.py <span class="token parameter variable">-p</span> <span class="token number">1134138</span> <span class="token string">&#39;t:sched:sched_switch (args-&gt;prev_state == TASK_STATE_MAX || args-&gt;prev_state == 0)&#39;</span>
PID    TID    COMM         FUNC
<span class="token number">1134138</span> <span class="token number">1134140</span> contention_test sched_switch
<span class="token number">1134138</span> <span class="token number">1134142</span> contention_test sched_switch
<span class="token punctuation">..</span>.
$ trace.py <span class="token parameter variable">-L</span> <span class="token number">1134140</span> <span class="token string">&#39;t:sched:sched_switch (args-&gt;prev_state == TASK_STATE_MAX || args-&gt;prev_state == 0)&#39;</span>
PID    TID    COMM         FUNC
<span class="token number">1134138</span> <span class="token number">1134140</span> contention_test sched_switch
<span class="token number">1134138</span> <span class="token number">1134140</span> contention_test sched_switch
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example3" tabindex="-1"><a class="header-anchor" href="#example3"><span>example3</span></a></h4><p>此示例与issue 1231 和 1516 相关，其中 uprobe 在某些情况下根本不起作用。首先，您可以执行以下操作 <code>strace</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">strace</span> trace.py <span class="token string">&#39;r:bash:readline &quot;%s&quot;, retval&#39;</span>
<span class="token punctuation">..</span>.
perf_event_open<span class="token punctuation">(</span>0x7ffd968212f0, -1, <span class="token number">0</span>, -1, 0x8 /* PERF_FLAG_??? */<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token parameter variable">-1</span> EIO <span class="token punctuation">(</span>Input/output error<span class="token punctuation">)</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>perf_event_open</code> 系统调用返回 <code>-EIO</code> 。深入 <code>/kernel/trace</code> 和 <code>/kernel/events</code> 目录下的内核uprobe相关代码进行搜索 <code>EIO</code> ，函数 <code>uprobe_register</code> 是最可疑的。让我们看看这个函数是否被调用，如果被调用，返回值是多少。在一个终端使用以下命令打印出uprobe_register的返回值，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace.py <span class="token string">&#39;r::uprobe_register &quot;ret = %d&quot;, retval&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在另一个终端中运行相同的 bash uretprobe 跟踪示例，您应该得到</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace.py <span class="token string">&#39;r::uprobe_register &quot;ret = %d&quot;, retval&#39;</span>
PID    TID    COMM         FUNC             -
<span class="token number">1041401</span> <span class="token number">1041401</span> python2.7    uprobe_register  ret <span class="token operator">=</span> <span class="token parameter variable">-5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-5</code> 错误代码是 EIO。这证实了函数 <code>uprobe_register</code> 中的以下代码是最可疑的罪魁祸首。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode-<span class="token operator">&gt;</span>i_mapping-<span class="token operator">&gt;</span>a_ops-<span class="token operator">&gt;</span>readpage <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>shmem_mapping<span class="token punctuation">(</span>inode-<span class="token operator">&gt;</span>i_mapping<span class="token punctuation">))</span>
        <span class="token builtin class-name">return</span> -EIO<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>shmem_mapping</code> 函数定义为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bool shmem_mapping<span class="token punctuation">(</span>struct address_space *mapping<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token builtin class-name">return</span> mapping-<span class="token operator">&gt;</span>a_ops <span class="token operator">==</span> <span class="token operator">&amp;</span>shmem_aops<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了证实这一理论，请使用以下命令查找 <code>inode-&gt;i_mapping-&gt;a_ops</code> 是什么</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ trace.py <span class="token parameter variable">-I</span> <span class="token string">&#39;linux/fs.h&#39;</span> <span class="token string">&#39;p::uprobe_register(struct inode *inode) &quot;a_ops = %llx&quot;, inode-&gt;i_mapping-&gt;a_ops&#39;</span>
PID    TID    COMM         FUNC             -
<span class="token number">814288</span> <span class="token number">814288</span> python2.7    uprobe_register  a_ops <span class="token operator">=</span> ffffffff81a2adc0
^C$ <span class="token function">grep</span> ffffffff81a2adc0 /proc/kallsyms
ffffffff81a2adc0 R empty_aops
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)),a("p",null,[s[30]||(s[30]=n("More ")),a("a",E,[s[29]||(s[29]=n("examples")),p(e)]),s[31]||(s[31]=n("."))]),s[50]||(s[50]=a("h3",{id:"argdist",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#argdist"},[a("span",null,"argdist")])],-1)),a("p",null,[s[33]||(s[33]=n("More ")),a("a",C,[s[32]||(s[32]=n("examples")),p(e)]),s[34]||(s[34]=n("."))]),s[51]||(s[51]=a("h3",{id:"funccount",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#funccount"},[a("span",null,"funccount")])],-1)),a("p",null,[s[36]||(s[36]=n("More ")),a("a",B,[s[35]||(s[35]=n("examples")),p(e)]),s[37]||(s[37]=n("."))])])}const D=o(i,[["render",y],["__file","02.1. 用例教程 - 基本.html.vue"]]),I=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/02.1.%20%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B%20-%20%E5%9F%BA%E6%9C%AC.html","title":"BCC","lang":"zh-CN","frontmatter":{"description":"BCC 目录 用例教程 - 基本 安装完再看这里 这些工具可能安装在您的系统上的 /usr/share/bcc/tools 下，或者您也可以从 /tools 下的 bcc github 存储库运行它们，其中它们具有 .py 扩展名。浏览 50 多种可用工具以获得更多分析选项。 常规性能 目录 execsnoop, 为每个新进程打印一行输出 opensn...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/02.1.%20%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B%20-%20%E5%9F%BA%E6%9C%AC.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"BCC"}],["meta",{"property":"og:description","content":"BCC 目录 用例教程 - 基本 安装完再看这里 这些工具可能安装在您的系统上的 /usr/share/bcc/tools 下，或者您也可以从 /tools 下的 bcc github 存储库运行它们，其中它们具有 .py 扩展名。浏览 50 多种可用工具以获得更多分析选项。 常规性能 目录 execsnoop, 为每个新进程打印一行输出 opensn..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BCC\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"BCC","slug":"bcc","link":"#bcc","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"用例教程 - 基本","slug":"用例教程-基本","link":"#用例教程-基本","children":[{"level":2,"title":"常规性能","slug":"常规性能","link":"#常规性能","children":[{"level":3,"title":"execsnoop","slug":"execsnoop","link":"#execsnoop","children":[]},{"level":3,"title":"opensnoop","slug":"opensnoop","link":"#opensnoop","children":[]},{"level":3,"title":"ext4slower (or btrfs*, xfs*, zfs*)","slug":"ext4slower-or-btrfs-xfs-zfs","link":"#ext4slower-or-btrfs-xfs-zfs","children":[]},{"level":3,"title":"biolatency","slug":"biolatency","link":"#biolatency","children":[]},{"level":3,"title":"biosnoop","slug":"biosnoop","link":"#biosnoop","children":[]},{"level":3,"title":"cachestat","slug":"cachestat","link":"#cachestat","children":[]},{"level":3,"title":"tcpconnect","slug":"tcpconnect","link":"#tcpconnect","children":[]},{"level":3,"title":"tcpaccept","slug":"tcpaccept","link":"#tcpaccept","children":[]},{"level":3,"title":"tcpretrans","slug":"tcpretrans","link":"#tcpretrans","children":[]},{"level":3,"title":"runqlat","slug":"runqlat","link":"#runqlat","children":[]},{"level":3,"title":"profile","slug":"profile","link":"#profile","children":[]}]},{"level":2,"title":"使用通用工具的可观察性","slug":"使用通用工具的可观察性","link":"#使用通用工具的可观察性","children":[{"level":3,"title":"trace","slug":"trace","link":"#trace","children":[{"level":4,"title":"example1","slug":"example1","link":"#example1","children":[]},{"level":4,"title":"example2","slug":"example2","link":"#example2","children":[]},{"level":4,"title":"example3","slug":"example3","link":"#example3","children":[]}]},{"level":3,"title":"argdist","slug":"argdist","link":"#argdist","children":[]},{"level":3,"title":"funccount","slug":"funccount","link":"#funccount","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.85,"words":2954},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.1. 用例教程 - 基本.md","excerpt":"\\n<h1>目录</h1>\\n<h1>用例教程 - 基本</h1>\\n<p>安装完再看这里</p>\\n<p>这些工具可能安装在您的系统上的 /usr/share/bcc/tools 下，或者您也可以从 /tools 下的 bcc github 存储库运行它们，其中它们具有 .py 扩展名。浏览 50 多种可用工具以获得更多分析选项。</p>\\n<h2>常规性能</h2>\\n<p>目录</p>\\n<ul>\\n<li>execsnoop,  为每个新进程打印一行输出</li>\\n<li>opensnoop,  打开监听</li>\\n<li>ext4slower,  跟踪 ext4 文件系统</li>\\n<li>biolatency,  跟踪磁盘 I/O 延迟</li>\\n<li>biosnoop,  为每个磁盘 I/O 打印一行输出，其中包含延迟（从设备发出到完成的时间）等详细信息</li>\\n<li>cachestat每秒（或每个自定义时间间隔）打印一行摘要，显示文件系统缓存的统计信息</li>\\n<li>tcpconnect,  为每个活动的 TCP 连接（例如，通过 connect()）打印一行输出，其中包括源地址和目标地址等详细信息</li>\\n<li>tcpaccept,  为每个被动 TCP 连接（例如，通过accept()）打印一行输出，其中包括源地址和目标地址等详细信息</li>\\n<li>tcpretrans,  为每个 TCP 重传数据包打印一行输出，其中包括源地址和目标地址以及 TCP 连接的内核状态等详细信息</li>\\n<li>runqlat,  计算线程在 CPU 运行队列上等待的时间，并将其打印为直方图</li>\\n<li>profile,  一个 CPU 分析器，它以一定的时间间隔采集堆栈跟踪样本，并打印唯一堆栈跟踪的摘要及其出现次数</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.1. 用例教程 - 基本.md","value":{"title":"02.1. 用例教程 - 基本","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.1. 用例教程 - 基本.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{D as comp,I as data};
