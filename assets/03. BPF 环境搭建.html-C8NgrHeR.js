import{_ as i,c as p,e as t,a as s,d as a,b as l,o as r,r as o}from"./app-C-bjNnVy.js";const c={},d={href:"https://www.virtualbox.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://zh.wikipedia.org/wiki/Ubuntu%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},b={href:"https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.4.75/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://wiki.ubuntu.com/Kernel/Dev/KernelGitGuide",target:"_blank",rel:"noopener noreferrer"},k={href:"https://elixir.bootlin.com/linux/v5.4/source/samples/bpf",target:"_blank",rel:"noopener noreferrer"},h={href:"https://elixir.bootlin.com/linux/v5.4/source/samples/bpf/README.rst",target:"_blank",rel:"noopener noreferrer"},g={href:"http://kroah.com/log/blog/2018/08/24/what-stable-kernel-should-i-use/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://linux.cn/article-10103-1.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://unix.stackexchange.com/questions/585479/cant-find-the-source-of-some-asm-generated-header-files-in-linux-kernel",target:"_blank",rel:"noopener noreferrer"},E={href:"https://cloud.tencent.com/developer/article/1644458",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/qq_34258344/article/details/108932912",target:"_blank",rel:"noopener noreferrer"},A={href:"https://w3techs.com/technologies/history_details/os-linux/all/y",target:"_blank",rel:"noopener noreferrer"};function w(L,n){const e=o("ExternalLinkIcon");return r(),p("div",null,[n[28]||(n[28]=t('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="bpf-环境搭建" tabindex="-1"><a class="header-anchor" href="#bpf-环境搭建"><span>BPF 环境搭建</span></a></h1><h2 id="系统环境准备" tabindex="-1"><a class="header-anchor" href="#系统环境准备"><span>系统环境准备</span></a></h2><h3 id="内核版本选择" tabindex="-1"><a class="header-anchor" href="#内核版本选择"><span>内核版本选择</span></a></h3><ul><li><p><strong>补丁 Prepatch</strong></p><p>Prepatch 或 “RC” 内核是主线内核的预发布版本，主要针对其他内核开发者和 Linux 爱好者。它们必须从源码中编译，并且通常包含新的功能，这些功能必须在稳定发布之前进行测试。Prepatch 内核由 Linus Torvalds 维护和发布。</p></li><li><p><strong>主线版 Mainline</strong></p><p>主线版本由 Linus Torvalds 维护。它是介绍所有新功能的版本，包含了所有令人兴奋的新开发的功能。新的主线内核每 2-3 个月发布一次。</p></li><li><p><strong>稳定版 Stable</strong></p><p>每一个主线内核发布后，它都被认为是 “稳定的”。任何稳定内核的错误修复都会从主线版本上回溯，并由指定的稳定内核维护者应用。在下一个主线内核可用之前，通常只有几个错误修复内核的发布 – 除非它被指定为 “长期维护内核”。稳定的内核更新是根据需要发布的，通常一周一次。</p></li><li><p><strong>长期版 Longterm</strong></p><p>通常会有几个 “长期维护 “的内核版本，目的是为旧内核树的错误进行后向（backporting）修正。只有重要的bug 修复才会被应用到这长期内核版本中，而且它们通常不会频繁发布，尤其是对于老的内核版本。</p></li></ul><p>当前长期版本如下：</p><table><thead><tr><th>Version</th><th>Maintainer</th><th>Released</th><th>Projected EOL</th></tr></thead><tbody><tr><td>5.4</td><td>Greg Kroah-Hartman &amp; Sasha Levin</td><td>2019-11-24</td><td>Dec, 2025</td></tr><tr><td>4.19</td><td>Greg Kroah-Hartman &amp; Sasha Levin</td><td>2018-10-22</td><td>Dec, 2024</td></tr><tr><td>4.14</td><td>Greg Kroah-Hartman &amp; Sasha Levin</td><td>2017-11-12</td><td>Jan, 2024</td></tr><tr><td>4.9</td><td>Greg Kroah-Hartman &amp; Sasha Levin</td><td>2016-12-11</td><td>Jan, 2023</td></tr><tr><td>4.4</td><td>Greg Kroah-Hartman &amp; Sasha Levin</td><td>2016-01-10</td><td>Feb, 2022</td></tr></tbody></table><p>基于上述内核版本信息，我们选择最新 LTS 版本 5.4，5.4 版本最新版本为 5.4.75。</p><h3 id="ubuntu-20-04-搭建-virtualbox-vagrant" tabindex="-1"><a class="header-anchor" href="#ubuntu-20-04-搭建-virtualbox-vagrant"><span>Ubuntu 20.04 搭建 - VirtualBox + Vagrant</span></a></h3>',10)),s("p",null,[n[3]||(n[3]=a("本文的操作环境基于 VirtualBox + Vagrant 搭建，你需要提前安装好 ")),s("a",d,[n[0]||(n[0]=a("VirtualBox")),l(e)]),n[4]||(n[4]=a(" 和 ")),s("a",u,[n[1]||(n[1]=a("Vagrant")),l(e)]),n[5]||(n[5]=a("，操作系统采用 Ubuntun 20.04 Focal Fossa，其内核版本为 5.4.0， Ubuntu 的完整发行版本列表参见：")),s("a",m,[n[2]||(n[2]=a("wikipedia")),l(e)]),n[6]||(n[6]=a("。"))]),n[29]||(n[29]=t(`<table><thead><tr><th>版本</th><th>开发代号</th><th>发布日期</th><th>标准支持结束时间</th><th>延迟支持时间</th><th>内核版本</th></tr></thead><tbody><tr><td>20.04 LTS</td><td>Focal Fossa</td><td>2020-04-23</td><td><strong>2025-04</strong></td><td><strong>2030-04</strong></td><td>5.4</td></tr></tbody></table><p>采用 vagrant 安装命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant init bento/ubuntu-20.04
$ vagrant up
$ vagrant <span class="token function">ssh</span>
$ <span class="token function">cat</span> /etc/issue <span class="token comment"># 查看发行版本</span>
Ubuntu <span class="token number">20.04</span>.1 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu <span class="token number">20.04</span>.1 LTS
Release:	<span class="token number">20.04</span>
Codename:	focal

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">5.4</span>.0-52-generic

$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux vagrant <span class="token number">5.4</span>.0-52-generic <span class="token comment">#57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span>

$ <span class="token function">sudo</span> dpkg --get-selections <span class="token operator">|</span><span class="token function">grep</span> linux-image
linux-image-5.4.0-52-generic			<span class="token function">install</span>
linux-image-generic				<span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内核升级方式【备选资料】" tabindex="-1"><a class="header-anchor" href="#内核升级方式【备选资料】"><span>内核升级方式【备选资料】</span></a></h3>`,4)),s("ul",null,[n[10]||(n[10]=s("li",null,[s("p",null,"到 Ubuntu 网站 http://kernel.ubuntu.com/~kernel-ppa/mainline/")],-1)),s("li",null,[s("p",null,[n[8]||(n[8]=a("选择所需要的 Ubuntu 内核版本目录，比如最新的内核版本 ")),s("a",b,[n[7]||(n[7]=a("v5.4.75 目录")),l(e)]),n[9]||(n[9]=a("（发布日期 2020 年 11 月 05 日）"))])]),n[11]||(n[11]=t(`<li><p>在介绍页面中，根据硬件的架构选择内核版本，X86 硬件架构 64 位操作系统应选择 AMD64</p></li><li><p>下载对应的 deb 包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">wget</span> https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.4.75/amd64/linux-headers-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb
$ <span class="token function">wget</span> https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.4.75/amd64/linux-image-unsigned-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb
$ <span class="token function">wget</span> https://kernel.ubuntu.com/~kernel-ppa/mainline/v5.4.75/amd64/linux-modules-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb

$ <span class="token function">ls</span> <span class="token parameter variable">-hl</span>
total 59M
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">1</span>.2M Nov  <span class="token number">5</span> <span class="token number">12</span>:51 linux-headers-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">8</span>.5M Nov  <span class="token number">5</span> <span class="token number">12</span>:50 linux-image-unsigned-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb
-rw-r--r-- <span class="token number">1</span> root root  50M Nov  <span class="token number">5</span> <span class="token number">12</span>:50 linux-modules-5.4.75-050475-generic_5.4.75-050475.202011051231_amd64.deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>安装新的内核</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> *.deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>升级完成后，重启系统，再次检查内核版本，检查已经为最新的 5.4.75 版本。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># uname -sr</span>
Linux <span class="token number">5.4</span>.75-050475-generic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3))]),n[30]||(n[30]=t(`<h2 id="系统安装包准备-包括bpf组件" tabindex="-1"><a class="header-anchor" href="#系统安装包准备-包括bpf组件"><span>系统安装包准备（包括BPF组件）</span></a></h2><p>在操作系统环境准备好以后，我们需要安装 BPF 技术测试的必要系统组件，安装命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt</span> update
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential <span class="token function">git</span> <span class="token function">make</span> libelf-dev clang llvm <span class="token function">strace</span> <span class="token function">tar</span> bpfcc-tools linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> gcc-multilib  flex  bison libssl-dev <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>笔记者：这里分解一下需要安装的东西</p><ul><li>build-essential： 这是一个可以在 Ubuntu 上构建软件的元包。它包含了编译软件时所需的大量工具和库文件。</li><li>git： 这是一个版本控制工具，它用于管理代码版本，你也可以使用其他版本控制工具。</li><li>make： 这是用于自动执行编译工作流程的工具。</li><li>libelf-dev： 这是一个管理 ELF 文件格式的库文件，ELF 是 Linux 可执行文件的一种标准格式。</li><li>clang： 这是一种用于编译 C、C++ 和 Objective-C 的编译器，通常比 GCC 更快。</li><li>llvm： 这是一个编译基础设施，它可以将高级语言翻译成低级语言（如汇编语言）。</li><li>strace： 这是一个用于监视系统调用和信号的命令行工具。</li><li>tar： 这是一个用于归档和解压缩文件的工具。</li><li>bpfcc-tools： 这是一个用于开发 BPF 工具和程序的一组工具包。</li><li>linux-headers-$(uname -r)： 这个包包含了用于编译内核模块的头文件，其中 <code>$(uname -r)</code> 会自动获取当前正在使用的内核版本号。</li><li>gcc-multilib： 这是 GCC 版本控制工具的一个补充包，用于针对不同的体系结构生成目标代码。</li><li>flex： 这是一个用于生成词法分析器的工具。</li><li>bison： 这是一个用于生成语法分析器的工具。</li><li>libssl-dev： 这是一个管理 SSL/TLS 加密库文件的库文件，开发人员可以使用它为软件加入对 SSL/TLS 的支持。</li></ul><h2 id="内核源码编译" tabindex="-1"><a class="header-anchor" href="#内核源码编译"><span>内核源码编译</span></a></h2><h3 id="apt-安装源码-二选一-推荐" tabindex="-1"><a class="header-anchor" href="#apt-安装源码-二选一-推荐"><span>apt 安装源码 （二选一，推荐）</span></a></h3><p>一般情况下推荐采用 apt 方式的安装源码，安装简单而且只安装当前内核的源码，源码的大小在 <strong>200M</strong> 左右</p><p>下载源码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 编译内核需要的依赖包</span>
$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential libncurses-dev bison flex libssl-dev libelf-dev

$ <span class="token function">apt-cache</span> search linux-source
linux-source - Linux kernel <span class="token builtin class-name">source</span> with Ubuntu patches
linux-source-5.4.0 - Linux kernel <span class="token builtin class-name">source</span> <span class="token keyword">for</span> version <span class="token number">5.4</span>.0 with Ubuntu patches
linux-hwe-5.8-source-5.8.0 - Linux kernel <span class="token builtin class-name">source</span> <span class="token keyword">for</span> version <span class="token number">5.8</span>.0 with Ubuntu patches

$ <span class="token function">apt</span> <span class="token function">install</span> linux-source-5.4.0
Reading package lists<span class="token punctuation">..</span>. Done
Building dependency tree
Reading state information<span class="token punctuation">..</span>. Done
Suggested packages:
  kernel-package libqt3-dev
The following NEW packages will be installed:
  linux-source-5.4.0
<span class="token number">0</span> upgraded, <span class="token number">1</span> newly installed, <span class="token number">0</span> to remove and <span class="token number">38</span> not upgraded.
Need to get <span class="token number">135</span> MB of archives.
After this operation, <span class="token number">150</span> MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 linux-source-5.4.0 all <span class="token number">5.4</span>.0-52.57 <span class="token punctuation">[</span><span class="token number">135</span> MB<span class="token punctuation">]</span>
Fetched <span class="token number">135</span> MB <span class="token keyword">in</span> 27s <span class="token punctuation">(</span><span class="token number">5,015</span> kB/s<span class="token punctuation">)</span>
Selecting previously unselected package linux-source-5.4.0.
<span class="token punctuation">(</span>Reading database <span class="token punctuation">..</span>. <span class="token number">81402</span> files and directories currently installed.<span class="token punctuation">)</span>
Preparing to unpack <span class="token punctuation">..</span>./linux-source-5.4.0_5.4.0-52.57_all.deb <span class="token punctuation">..</span>.
Unpacking linux-source-5.4.0 <span class="token punctuation">(</span><span class="token number">5.4</span>.0-52.57<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
Setting up linux-source-5.4.0 <span class="token punctuation">(</span><span class="token number">5.4</span>.0-52.57<span class="token punctuation">)</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装源码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> /usr/src <span class="token comment"># 源码安装至 \`/usr/src/\` 目录下</span>
$ <span class="token function">ls</span> <span class="token parameter variable">-hl</span>
total <span class="token number">4</span>.0K
drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4</span>.0K Nov  <span class="token number">9</span> <span class="token number">13</span>:22 linux-source-5.4.0
lrwxrwxrwx <span class="token number">1</span> root root   <span class="token number">45</span> Oct <span class="token number">15</span> <span class="token number">10</span>:28 linux-source-5.4.0.tar.bz2 -<span class="token operator">&gt;</span> linux-source-5.4.0/linux-source-5.4.0.tar.bz2

$ <span class="token function">tar</span> <span class="token parameter variable">-jxvf</span> linux-source-5.4.0.tar.bz2
$ <span class="token builtin class-name">cd</span> linux-source-5.4.0

$ <span class="token function">make</span> scripts     <span class="token comment"># 构建 Linux 内核所需的一些辅助工具和脚本</span>
$ <span class="token function">cp</span> <span class="token parameter variable">-v</span> /boot/config-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> .config <span class="token comment"># 确保新编译的内核与当前正在使用的内核具有相同的配置。make defconfig 或者 make menuconfig</span>
$ <span class="token function">make</span> headers_install <span class="token comment"># 安装内核头文件到 /usr/include 目录中</span>

$ <span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf  <span class="token comment"># 编译 BPF 样例程序。如果配置出错，可以使用 make oldconfig &amp;&amp; make prepare 修复（生成新内核的配置文件）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内核代码-git-下载-二选一" tabindex="-1"><a class="header-anchor" href="#内核代码-git-下载-二选一"><span>内核代码 Git 下载（二选一）</span></a></h3><p><strong>如果我们的学习过程中需要持续用到多个版本</strong>，那么可以从 Ubuntun 官方维护的 git 仓库下载整个仓库包，下载的源码大小在 <strong>3G</strong> 左右。</p>`,14)),s("p",null,[n[15]||(n[15]=a("Ubuntun 内核代码安装教程参见：")),s("a",v,[n[12]||(n[12]=a("KernelGitGuide")),l(e)]),n[16]||(n[16]=a("。在线内核版本参见")),s("a",k,[n[13]||(n[13]=a("这里")),l(e)]),n[17]||(n[17]=a("，编译前可以先阅读 ")),s("a",h,[n[14]||(n[14]=a("README.rst")),l(e)]),n[18]||(n[18]=a("。"))]),n[31]||(n[31]=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ lsb_release <span class="token parameter variable">-cs</span>
focal
$ <span class="token function">git</span> clone git://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/<span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span>

<span class="token comment"># 源码下载完成后，通常为 master 分支，我们可以切换到我们系统的本地版本号</span>
$ <span class="token function">cat</span> /proc/version_signature
Ubuntu <span class="token number">5.4</span>.0-52.57-generic <span class="token number">5.4</span>.65

$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp Ubuntu-5.4.0-52.57
<span class="token comment"># 如果后续不需要可以通过 git branch -d temp 删除</span>
$ <span class="token function">git</span> log
commit 3f9bcec55a41c263d2f43a7ebbd8256b85767fe5 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> temp, tag: Ubuntu-5.4.0-52.57, origin/master, origin/HEAD, master<span class="token punctuation">)</span>
Author: Stefan Bader <span class="token operator">&lt;</span>stefan.bader@canonical.com<span class="token operator">&gt;</span>
Date:   Thu Oct <span class="token number">15</span> <span class="token number">12</span>:28:28 <span class="token number">2020</span> +0200

    UBUNTU: Ubuntu-5.4.0-52.57

    Signed-off-by: Stefan Bader <span class="token operator">&lt;</span>stefan.bader@canonical.com<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源码下载以后，编译方式与 apt 按照的方式一致。</p><h3 id="编译错误" tabindex="-1"><a class="header-anchor" href="#编译错误"><span>编译错误</span></a></h3><h4 id="scripts-mod-modpos-报错" tabindex="-1"><a class="header-anchor" href="#scripts-mod-modpos-报错"><span>scripts/mod/modpos 报错</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  WARNING: Symbol version dump ./Module.symvers
           is missing<span class="token punctuation">;</span> modules will have no dependencies and modversions.

  Building modules, stage <span class="token number">2</span>.
  MODPOST <span class="token number">0</span> modules
/bin/sh: <span class="token number">1</span>: scripts/mod/modpost: not found
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>scripts/Makefile.modpost:94: __modpost<span class="token punctuation">]</span> Error <span class="token number">127</span>
make: *** <span class="token punctuation">[</span>Makefile:1670: modules<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 <code>make scripts </code> 来补全脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> scripts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="asm-x-h-头文件缺少" tabindex="-1"><a class="header-anchor" href="#asm-x-h-头文件缺少"><span>&quot;asm/x.h&quot; 头文件缺少</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./include/linux/spinlock.h:60:10: fatal error: <span class="token string">&#39;asm/mmiowb.h&#39;</span> <span class="token function">file</span> not found
<span class="token comment">#include &lt;asm/mmiowb.h&gt;</span>
         ^~~~~~~~~~~~~~
<span class="token number">1</span> error generated.
  CC      samples/bpf/syscall_nrs.s
In <span class="token function">file</span> included from ./include/uapi/linux/unistd.h:8,
                 from samples/bpf/syscall_nrs.c:2:
./arch/x86/include/asm/unistd.h:19:12: fatal error: asm/unistd_64_x32.h: No such <span class="token function">file</span> or directory
   <span class="token number">19</span> <span class="token operator">|</span> <span class="token comment">#  include &lt;asm/unistd_64_x32.h&gt;</span>
      <span class="token operator">|</span>            ^~~~~~~~~~~~~~~~~~~~~
compilation terminated.
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>scripts/Makefile.build:99: samples/bpf/syscall_nrs.s<span class="token punctuation">]</span> Error <span class="token number">1</span>
make: *** <span class="token punctuation">[</span>Makefile:1757: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过查找发现系统中的头文件有对应的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">find</span> / <span class="token parameter variable">-name</span> mmiowb.h
/usr/src/linux-headers-5.4.0-52-generic/arch/x86/include/generated/asm/mmiowb.h

$ <span class="token function">sudo</span> <span class="token function">cat</span> /usr/src/linux-headers-5.4.0-52-generic/arch/x86/include/generated/asm/mmiowb.h
<span class="token comment">#include &lt;asm-generic/mmiowb.h&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 include 文件中创建 asm 目录，并将该 <code>/usr/src/linux-headers-5.4.0-52-generic/arch/x86/include/generated</code> 目下的全部文件复制到 <code>include/asm</code> 目录下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> include/asm
$ <span class="token function">sudo</span> <span class="token function">cp</span> /usr/src/linux-headers-5.4.0-52-generic/arch/x86/include/generated/asm/* include/asm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参见： https://www.mail-archive.com/openembedded-core@lists.openembedded.org/msg127370.html</p><h4 id="generated-x-h-报错" tabindex="-1"><a class="header-anchor" href="#generated-x-h-报错"><span>&quot;generated/x.h&quot; 报错</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./include/linux/page-flags-layout.h:6:10: fatal error: <span class="token string">&#39;generated/bounds.h&#39;</span> <span class="token function">file</span> not found
<span class="token comment">#include &lt;generated/bounds.h&gt;</span>
         ^~~~~~~~~~~~~~~~~~~~
^Cmake<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>samples/bpf/Makefile:286: samples/bpf/xdp_tx_iptunnel_kern.o<span class="token punctuation">]</span> Interrupt
make: *** <span class="token punctuation">[</span>Makefile:1757: samples/bpf<span class="token punctuation">]</span> Interrupt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方式</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cp</span> <span class="token parameter variable">-r</span> /usr/src/linux-headers-5.4.0-52-generic/include/generated/* ./include/generated
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于 headers 与 headers.x.y-z-generic 的区别：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>linux-headers-5.4.0-52 Header files related to Linux kernel version <span class="token number">5.4</span>.0
linux-headers-5.4.0-52-generic Linux kernel headers <span class="token keyword">for</span> version <span class="token number">5.4</span>.0 on x86/x86_64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他报错" tabindex="-1"><a class="header-anchor" href="#其他报错"><span>其他报错</span></a></h4><p>可参考 https://lore.kernel.org/lkml/20190518004639.20648-3-mcroce@redhat.com/T/</p><p>目录：</p><ol><li>samples/bpf: fix test_lru_dist build</li><li>libbpf: add missing typedef</li><li>samples/bpf: fix xdpsock_user build error</li><li>samples/bpf: fix tracex5_user build error</li><li>samples/bpf: fix hbm build error</li></ol><h4 id="评论中所说的报错" tabindex="-1"><a class="header-anchor" href="#评论中所说的报错"><span>评论中所说的报错</span></a></h4><p>如果遇到 sys/capability.h: No such file or directory 则可尝试 apt install libcap-dev</p><p>如果遇到 Cannot find a vmlinux for VMLINUX_BTF 则可尝试：make VMLINUX_BTF=/sys/kernel/btf/vmlinux M=samples/bpf</p><h4 id="笔记者遇到的报错" tabindex="-1"><a class="header-anchor" href="#笔记者遇到的报错"><span>笔记者遇到的报错</span></a></h4><p>报错：找不到vmlinux</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>samples/bpf/Makefile:369: *** Cannot <span class="token function">find</span> a vmlinux <span class="token keyword">for</span> VMLINUX_BTF at any of <span class="token string">&quot;  /usr/src/linux-source-5.15.0/vmlinux&quot;</span>, build the kernel or <span class="token builtin class-name">set</span> VMLINUX_BTF or VMLINUX_H variable.  Stop.
make: *** <span class="token punctuation">[</span>Makefile:1914: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为未成功编译内核</p><p>方法一</p><p>编译内核</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法二</p><p>是显式指定 <code>vmlinux</code> 文件路径，使用原来Linux系统的 vmlinux</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">VMLINUX_BTF</span><span class="token operator">=</span>/path/to/vmlinux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>报错2：</p><p>又是和vmlinux有关……</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** No rule to <span class="token function">make</span> target <span class="token string">&#39;/path/to/vmlinux&#39;</span>, needed by <span class="token string">&#39;samples/bpf/vmlinux.h&#39;</span><span class="token builtin class-name">.</span>  Stop.
make: *** <span class="token punctuation">[</span>Makefile:1914: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
<span class="token comment"># 或</span>
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** No rule to <span class="token function">make</span> target <span class="token string">&#39;/path/to/vmlinux&#39;</span>, needed by <span class="token string">&#39;/usr/src/linux-source-5.15.0/samples/bpf/vmlinux.h&#39;</span><span class="token builtin class-name">.</span>  Stop.
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>Makefile:1914: /usr/src/linux-source-5.15.0/samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Leaving directory <span class="token string">&#39;/usr/src/linux-source-5.15.0&#39;</span>
make: *** <span class="token punctuation">[</span>Makefile:275: all<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ample-bpf-样例" tabindex="-1"><a class="header-anchor" href="#ample-bpf-样例"><span>ample/bpf 样例</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf

<span class="token comment"># 清理</span>
$ <span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hello-bpf" tabindex="-1"><a class="header-anchor" href="#hello-bpf"><span>&quot;Hello BPF&quot;</span></a></h2><p>内核中的程序 <code>hello_kern.c</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#include &lt;linux/bpf.h&gt;</span>
<span class="token comment">#include &quot;bpf_helpers.h&quot;</span>

<span class="token comment">#define SEC(NAME) __attribute__((section(NAME), used))</span>

SEC<span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_enter_execve&quot;</span><span class="token punctuation">)</span>
int bpf_prog<span class="token punctuation">(</span>void *ctx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	char msg<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello BPF!<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">;</span>
	bpf_trace_printk<span class="token punctuation">(</span>msg, sizeof<span class="token punctuation">(</span>msg<span class="token punctuation">))</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

char _license<span class="token punctuation">[</span><span class="token punctuation">]</span> SEC<span class="token punctuation">(</span><span class="token string">&quot;license&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;GPL&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户态的程序 <code>hello_user.c</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#include &lt;stdio.h&gt;</span>
<span class="token comment">#include &quot;bpf_load.h&quot;</span>

int main<span class="token punctuation">(</span>int argc, char **argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	if<span class="token punctuation">(</span> load_bpf_file<span class="token punctuation">(</span><span class="token string">&quot;hello_kern.o&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		printf<span class="token punctuation">(</span><span class="token string">&quot;The kernel didn&#39;t load BPF program<span class="token entity" title="\\n">\\n</span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	read_trace_pipe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对应的位置修改 Makefile 文件，添加以下三行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hostprogs-y <span class="token operator">+=</span> hello
hello-objs :<span class="token operator">=</span> bpf_load.o hello_user.o
always <span class="token operator">+=</span> hello_kern.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># V=1 查看详细编译输出</span>
<span class="token comment"># make M=samples/bpf V=1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后的效果</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ls -hl samples/bpf/hello*</span>
-rwxr-xr-x <span class="token number">1</span> root root 404K Nov <span class="token number">10</span> <span class="token number">10</span>:01 samples/bpf/hello
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">296</span> Nov <span class="token number">10</span> 09:58 samples/bpf/hello_kern.c
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">3</span>.7K Nov <span class="token number">10</span> <span class="token number">10</span>:02 samples/bpf/hello_kern.o
-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">220</span> Nov <span class="token number">10</span> 09:57 samples/bpf/hello_user.c
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">2</span>.2K Nov <span class="token number">10</span> <span class="token number">10</span>:01 samples/bpf/hello_user.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>hello</code> 程序，在另外一个终端执行 <code>ls -hl</code>，则输出结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./hello</span>
           <span class="token operator">&lt;</span><span class="token punctuation">..</span>.<span class="token operator">&gt;</span>-113094 <span class="token punctuation">[</span>000<span class="token punctuation">]</span> <span class="token punctuation">..</span><span class="token punctuation">..</span>  <span class="token number">8411.799754</span>: <span class="token number">0</span>: Hello BPF<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,56)),s("ul",null,[s("li",null,[s("a",g,[n[19]||(n[19]=a("What Stable Kernel Should I Use?")),l(e)]),n[21]||(n[21]=a(" 作者为 LTS 版本维护者 Greg Kroah-Hartman ")),s("a",f,[n[20]||(n[20]=a("中文")),l(e)])]),s("li",null,[s("a",x,[n[22]||(n[22]=a("How to compile and install Linux Kernel 5.6.9 from source code")),l(e)])]),s("li",null,[s("a",B,[n[23]||(n[23]=a("Can’t find the source of some “asm”, “generated” header files in linux kernel?")),l(e)])]),s("li",null,[s("a",E,[n[24]||(n[24]=a("编译运行Linux内核源码中的BPF示例代码")),l(e)])]),s("li",null,[s("a",_,[n[25]||(n[25]=a("Ubuntu下bpf纯c程序的编写与运行")),l(e)])]),n[27]||(n[27]=s("li",null,"https://me.csdn.net/qq_34258344",-1)),s("li",null,[s("a",A,[n[26]||(n[26]=a("站点 Linux 服务器分布趋势")),l(e)])])])])}const F=i(c,[["render",w],["__file","03. BPF 环境搭建.html.vue"]]),y=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/03.%20BPF%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 BPF 环境搭建 系统环境准备 内核版本选择 补丁 Prepatch Prepatch 或 “RC” 内核是主线内核的预发布版本，主要针对其他内核开发者和 Linux 爱好者。它们必须从源码中编译，并且通常包含新的功能，这些功能必须在稳定发布之前进行测试。Prepatch 内核由 Linus Torvalds 维护和发布。 主线版 Ma...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/03.%20BPF%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 BPF 环境搭建 系统环境准备 内核版本选择 补丁 Prepatch Prepatch 或 “RC” 内核是主线内核的预发布版本，主要针对其他内核开发者和 Linux 爱好者。它们必须从源码中编译，并且通常包含新的功能，这些功能必须在稳定发布之前进行测试。Prepatch 内核由 Linus Torvalds 维护和发布。 主线版 Ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"BPF 环境搭建","slug":"bpf-环境搭建","link":"#bpf-环境搭建","children":[{"level":2,"title":"系统环境准备","slug":"系统环境准备","link":"#系统环境准备","children":[{"level":3,"title":"内核版本选择","slug":"内核版本选择","link":"#内核版本选择","children":[]},{"level":3,"title":"Ubuntu 20.04 搭建  - VirtualBox + Vagrant","slug":"ubuntu-20-04-搭建-virtualbox-vagrant","link":"#ubuntu-20-04-搭建-virtualbox-vagrant","children":[]},{"level":3,"title":"内核升级方式【备选资料】","slug":"内核升级方式【备选资料】","link":"#内核升级方式【备选资料】","children":[]}]},{"level":2,"title":"系统安装包准备（包括BPF组件）","slug":"系统安装包准备-包括bpf组件","link":"#系统安装包准备-包括bpf组件","children":[]},{"level":2,"title":"内核源码编译","slug":"内核源码编译","link":"#内核源码编译","children":[{"level":3,"title":"apt 安装源码 （二选一，推荐）","slug":"apt-安装源码-二选一-推荐","link":"#apt-安装源码-二选一-推荐","children":[]},{"level":3,"title":"内核代码 Git 下载（二选一）","slug":"内核代码-git-下载-二选一","link":"#内核代码-git-下载-二选一","children":[]},{"level":3,"title":"编译错误","slug":"编译错误","link":"#编译错误","children":[{"level":4,"title":"scripts/mod/modpos 报错","slug":"scripts-mod-modpos-报错","link":"#scripts-mod-modpos-报错","children":[]},{"level":4,"title":"\\"asm/x.h\\" 头文件缺少","slug":"asm-x-h-头文件缺少","link":"#asm-x-h-头文件缺少","children":[]},{"level":4,"title":"\\"generated/x.h\\" 报错","slug":"generated-x-h-报错","link":"#generated-x-h-报错","children":[]},{"level":4,"title":"其他报错","slug":"其他报错","link":"#其他报错","children":[]},{"level":4,"title":"评论中所说的报错","slug":"评论中所说的报错","link":"#评论中所说的报错","children":[]},{"level":4,"title":"笔记者遇到的报错","slug":"笔记者遇到的报错","link":"#笔记者遇到的报错","children":[]}]}]},{"level":2,"title":"ample/bpf 样例","slug":"ample-bpf-样例","link":"#ample-bpf-样例","children":[]},{"level":2,"title":"\\"Hello BPF\\"","slug":"hello-bpf","link":"#hello-bpf","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.73,"words":2919},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/03. BPF 环境搭建.md","excerpt":"\\n<h1>目录</h1>\\n<h1>BPF 环境搭建</h1>\\n<h2>系统环境准备</h2>\\n<h3>内核版本选择</h3>\\n<ul>\\n<li>\\n<p><strong>补丁 Prepatch</strong></p>\\n<p>Prepatch 或 “RC” 内核是主线内核的预发布版本，主要针对其他内核开发者和 Linux 爱好者。它们必须从源码中编译，并且通常包含新的功能，这些功能必须在稳定发布之前进行测试。Prepatch 内核由 Linus Torvalds 维护和发布。</p>\\n</li>\\n<li>\\n<p><strong>主线版 Mainline</strong></p>\\n<p>主线版本由 Linus Torvalds 维护。它是介绍所有新功能的版本，包含了所有令人兴奋的新开发的功能。新的主线内核每 2-3 个月发布一次。</p>\\n</li>\\n<li>\\n<p><strong>稳定版 Stable</strong></p>\\n<p>每一个主线内核发布后，它都被认为是  “稳定的”。任何稳定内核的错误修复都会从主线版本上回溯，并由指定的稳定内核维护者应用。在下一个主线内核可用之前，通常只有几个错误修复内核的发布 – 除非它被指定为 “长期维护内核”。稳定的内核更新是根据需要发布的，通常一周一次。</p>\\n</li>\\n<li>\\n<p><strong>长期版 Longterm</strong></p>\\n<p>通常会有几个 “长期维护 “的内核版本，目的是为旧内核树的错误进行后向（backporting）修正。只有重要的bug 修复才会被应用到这长期内核版本中，而且它们通常不会频繁发布，尤其是对于老的内核版本。</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/03. BPF 环境搭建.md","value":{"title":"03. BPF 环境搭建","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/03. BPF 环境搭建.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{F as comp,y as data};
