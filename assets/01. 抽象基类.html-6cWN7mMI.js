import{_ as a,c as e,e as s,o as t}from"./app-3W0Z1LB3.js";const l={};function i(p,n){return t(),e("div",null,n[0]||(n[0]=[s(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="抽象基类" tabindex="-1"><a class="header-anchor" href="#抽象基类"><span>抽象基类</span></a></h1><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h2><p><mark>与C++不同</mark></p><ul><li><p>Java</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>				<span class="token comment">// 抽象基类（关键字强制被声明，目的只是提高程序的清晰度）</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><p><strong>只要有一个纯虚函数，这个类就是抽象类</strong>。在C++中，没有提供用于表示抽象类的特殊关键字。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>class Person
{
public:
    virtual string getDescription() = 0;	// 纯虚函数
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="接口与抽象基类" tabindex="-1"><a class="header-anchor" href="#接口与抽象基类"><span>接口与抽象基类</span></a></h2><p><mark>与C/C++不同</mark></p><ul><li><p>Java</p><ul><li>Java有抽象基类，也有接口的概念</li><li>在Java程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义</li></ul></li><li><p>C++</p><ul><li>C++没有接口这的概念，不区分接口和纯虚基类 仅使用纯虚基类可以完成相同的需求</li></ul></li><li><p>Python</p><ul><li><p>没有纯虚积累或接口，但是可以在基类中抛出一个没有被实现的异常，以迫使使用者去实现接口</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">raise</span> NotImplemented<span class="token punctuation">(</span><span class="token string">&quot;This method has to be override in a child class&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><p><mark>与C++不同</mark></p><p>观察者模式的实现细节上</p><ul><li>C++ <ul><li>观察者/监听器，继承一个观察者基类</li><li>被观察者/触发者，包含一个观察者基类指针</li></ul></li><li>而Java则是 <ul><li>观察者/监听器，接口实现一个观察者基类</li><li>被观察者/触发者，包含一个观察者基类指针</li></ul></li></ul>`,12)]))}const o=a(l,[["render",i],["__file","01. 抽象基类.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.%20%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 抽象基类 抽象类 与C++不同 Java C++ 只要有一个纯虚函数，这个类就是抽象类。在C++中，没有提供用于表示抽象类的特殊关键字。 接口与抽象基类 与C/C++不同 Java Java有抽象基类，也有接口的概念 在Java程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义 C++ ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.%20%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 抽象基类 抽象类 与C++不同 Java C++ 只要有一个纯虚函数，这个类就是抽象类。在C++中，没有提供用于表示抽象类的特殊关键字。 接口与抽象基类 与C/C++不同 Java Java有抽象基类，也有接口的概念 在Java程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义 C++ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"抽象基类","slug":"抽象基类","link":"#抽象基类","children":[{"level":2,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":2,"title":"接口与抽象基类","slug":"接口与抽象基类","link":"#接口与抽象基类","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.19,"words":357},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/04. 特殊类/01. 抽象基类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>抽象基类</h1>\\n<h2>抽象类</h2>\\n<p><mark>与C++不同</mark></p>\\n<ul>\\n<li>\\n<p>Java</p>\\n<ul>\\n<li>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span>\\t\\t\\t\\t<span class=\\"token comment\\">// 抽象基类（关键字强制被声明，目的只是提高程序的清晰度）</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getDescription</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 抽象方法</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>C++</p>\\n<ul>\\n<li>\\n<p><strong>只要有一个纯虚函数，这个类就是抽象类</strong>。在C++中，没有提供用于表示抽象类的特殊关键字。</p>\\n<div class=\\"language-c++\\" data-ext=\\"c++\\" data-title=\\"c++\\"><pre class=\\"language-c++\\"><code>class Person\\n{\\npublic:\\n    virtual string getDescription() = 0;\\t// 纯虚函数\\n}\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/04. 特殊类/01. 抽象基类.md","value":{"title":"01. 抽象基类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/04. 特殊类/01. 抽象基类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,r as data};
