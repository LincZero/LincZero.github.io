import{_ as i,e as a,g as n,o as e}from"./app-EuS-Ookm.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="readme" tabindex="-1"><a class="header-anchor" href="#readme"><span>README</span></a></h1><p>原文：https://ue5wiki.com/wiki/12624/</p><h2 id="ue-反射实现分析-基础概念" tabindex="-1"><a class="header-anchor" href="#ue-反射实现分析-基础概念"><span>UE 反射实现分析：基础概念</span></a></h2><p><strong>反射</strong>，是指程序在运行时进行自检的的能力，在编辑器的属性面板、序列化、GC 等方面非常有用。但是 C++ 语言本身不支持反射特性，UE 在 C++ 的语法基础上通过 UHT 实现了反射信息的生成，从而实现了运行时的反射的目的。</p><p>在之前的文章中，有一些涉及到 UE 的构建系统和反射相关的内容。</p><p>涉及了 UE 的构建系统文章：</p><ul><li><a href="https://imzlp.com/posts/6362/" target="_blank" rel="noopener noreferrer">Build flow of the Unreal Engine4 project</a></li><li><a href="https://img.imzlp.com/imgs/zlp/blog/posts/16643/" target="_blank" rel="noopener noreferrer">UE4 Build System: Target and Module</a></li><li><a href="https://imzlp.com/posts/20425/" target="_blank" rel="noopener noreferrer">UEC++ 与标准 C++ 的区别与联系</a></li></ul><p>基于 UE 的反射机制来做一些奇淫巧技的文章：</p><ul><li><a href="https://imzlp.com/posts/15049/" target="_blank" rel="noopener noreferrer">UE4：Hook UObject</a></li></ul><p>UE 的反射实现是依赖于构建系统中 UHT 来执行代码生成的，本篇文章对 UE 的反射做一个基础概念介绍，后续会花几篇文章完整地介绍 UE 里反射的实现机制。</p><p>UE 的反射可以实现 Enum 的反射 (<code>UEnum</code>)、类反射(<code>UClass</code>)、结构反射(<code>UStruct</code>)、数据成员反射(<code>UProperty</code>/<code>FProperty</code>)、成员函数反射(<code>UFunction</code>)，可以在运行时访问到它们，其实反射被称作 <strong>属性系统</strong> 应该更合适。</p><p>可以根据这些反射信息来获取它们的类型信息，本篇文章以类反射为例子介绍一下 UE 的反射。</p><p>如以下纯 C++ 代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ClassRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    int32 ival </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 666</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int32</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> InIval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;}  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要在运行时获取 <code>ClassRef</code> 类有哪些数据成员、函数，要如何操作？</p><p>C++ 原生并没有提供这样的能力，相同的需求在 UE 中创建的类是以下形式：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#pragma</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> once</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;CoreMinimal.h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;RefObject.generated.h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">UCLASS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> REF_API </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">URefObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	GENERATED_BODY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	UPROPERTY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	int32 ival </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 666</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	UFUNCTION</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	bool</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">int32</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> InIval</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	{  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    	UE_LOG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LogTemp,Log,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Function func: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),InIval);  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中关键需要注意的点：</p><ol><li><code>RefObject.generated.h</code>文件</li><li>UCLASS 标记</li><li>GENERATED_BODY 标记</li><li>UPROPERTY 标记</li><li>UFUNCTION 标记</li></ol><p>本文不对它们的具体含义做过多的介绍，后续的文章会做详细的分析。</p><p><code>UCLASS</code>/<code>USTRUCT</code>/<code>UFUNCTION</code>/<code>UPROPERTY</code>等可以在 <code>()</code> 中添加很多的标记值以及 meta 参数，用于指导 UHT 来生成对应的反射代码，它们支持的参数可以在 UE 的文档中查看：</p><ul><li><a href="https://docs.unrealengine.com/en-US/Programming/UnrealArchitecture/Reference/Classes/Specifiers" target="_blank" rel="noopener noreferrer">Class Specifiers</a></li><li><a href="https://docs.unrealengine.com/en-US/ProgrammingAndScripting/GameplayArchitecture/Structs/Specifiers/index.html" target="_blank" rel="noopener noreferrer">Struct Specifiers</a></li><li><a href="https://docs.unrealengine.com/en-us/Programming/UnrealArchitecture/Reference/Functions/Specifiers" target="_blank" rel="noopener noreferrer">Function Specifiers</a></li><li><a href="https://docs.unrealengine.com/en-US/ProgrammingAndScripting/GameplayArchitecture/Properties/Specifiers/index.html" target="_blank" rel="noopener noreferrer">Property Specifiers</a></li><li><a href="https://docs.unrealengine.com/en-US/ProgrammingAndScripting/GameplayArchitecture/Metadata/index.html" target="_blank" rel="noopener noreferrer">Metadata Specifiers</a></li></ul><p>这种通过添加的 <strong>代码标记</strong> 来告诉 UE 的构建系统，由 UHT 来生成反射的代码，反射的代码保存在 <code>gen.cpp</code> 中，注意这些反射标记 <strong>只是</strong> 用来告诉 UHT 来生成代码的，在经过 C++ 的预处理阶段后它们大多都是空宏（有些是真的 C++ 宏），这也导致 UE 的反射标记有一个缺点：无法使用 C++ 的宏来包裹 UE 的反射标记，因为它们先于 <strong>预处理</strong> 执行。</p><blockquote><p>而且，UHT 只是简单粗暴的关键字匹配硬扫描，限制很大。</p></blockquote><p>对于继承自 UObject 的类而言，它的反射信息被创建出了一个 UClass 对象，可以通过这个对象在运行时获取对象类型的信息。并且，类内部的 <strong>反射数据成员</strong> 和<strong>反射成员函数</strong> ，都会给生成对应的<code>FProperty</code> 和<code>UFunction</code>对象，用来运行时访问到它们。</p><p>UClass 的继承关系：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>UObjectBase</span></span>
<span class="line"><span>  UObjectBaseUtility</span></span>
<span class="line"><span>    UObject</span></span>
<span class="line"><span>      UField</span></span>
<span class="line"><span>        UStruct</span></span>
<span class="line"><span>          UClass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对继承自 UObject 的类，可以通过 <code>GetClass()</code> 来获取 UClass 实例，但是如果想直接获取某个类型的 UClass，则可以通过 <code>StaticClass&lt;UObject&gt;</code> 或者 <code>UObject::StaticClass()</code> 来获取。</p><p>UClass 中记录这类的继承关系、实现的接口、各种 Flag 等等，具体可以直接查阅 UClass 的类定义，通过它可以访问到该 UObject 的 C++ 类型中的信息。</p><p>而且，在运行时可以通过 <code>TFieldIterator</code> 来遍历 UClass 中的反射属性：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">URefObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">URefObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FObjectInitializer</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Initializer):</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Initializer)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(TFieldIterator</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">FProperty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PropertyIter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());PropertyIter;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        FProperty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PropertyIns </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        UE_LOG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LogTemp,Log,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Property Name: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PropertyIns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(TFieldIterator</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">UFunction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PropertyIter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());PropertyIter;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter)  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        UFunction</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PropertyIns </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        UE_LOG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LogTemp,Log,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Function Name: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PropertyIns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LogTemp:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Property</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ival</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LogTemp:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">LogTemp:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Function</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ExecuteUbergraph</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何通过属性和成员函数的反射信息来访问到它们呢？</p><h3 id="访问数据成员" tabindex="-1"><a class="header-anchor" href="#访问数据成员"><span>访问数据成员</span></a></h3><p>首先，在 C++ 中类内存布局中是编译时固定的，所以一个数据成员在类中的位置是固定的，C++ 有一个特性叫做 <strong>指向类成员的指针</strong>，本质上就是描述了当前数据成员在类布局内的偏移值。这部分内容在我之前的文章中有介绍：<a href="https://imzlp.com/posts/27615/" target="_blank" rel="noopener noreferrer">C++ 中指向类成员的指针并非指针</a>。</p><p>FProperty 做的就是类似的事情，记录反射数据成员的类内偏移信息，UE 中的实现也是通过 <strong>指向成员的指针</strong> 来实现的，这部分后面的文章会着重介绍，这里只介绍使用方法。</p><p>通过 FProperty 获取对象中值的方式，需要通过调用 <code>FProperty</code> 的<code>ContainerPtrToValuePtr</code>来实现：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(TFieldIterator</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">FProperty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PropertyIter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());PropertyIter;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    FProperty</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> PropertyIns </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">PropertyIter;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PropertyIns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ival&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        int32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i32 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> PropertyIns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ContainerPtrToValuePtr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">int32</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);            </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        UE_LOG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LogTemp,Log,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEXT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Property </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value is </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PropertyIns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">i32);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img.imzlp.com/imgs/zlp/blog/posts/12624/fproperty-get-data-member-value.webp" alt="" loading="lazy"></p><p>这样就实现了通过 FProperty 来访问数据成员的目的，因为获取到的是数据成员的指针，所以修改它也是没问题的。</p><h3 id="访问成员函数" tabindex="-1"><a class="header-anchor" href="#访问成员函数"><span>访问成员函数</span></a></h3><p>通过反射访问函数则要复杂一些，因为要处理参数传递和返回值的接收问题。</p><p>前面已经提到了，UE 的反射成员函数会生成 <code>UFunction</code> 对象，函数的反射信息就在它里面，因为 UFUNCTION 是只能标记在继承自 UObject 的类中，所以 UE 封装了一套基于 UObject 的反射函数调用方式：</p><p>……</p><p>……</p><p>……</p>`,47)]))}const k=i(l,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/SoftCode/Game/UE4%EF%BC%88%E8%93%9D%E5%9B%BE%20C__%EF%BC%89/%E3%80%8Aue5wiki%E3%80%8B/%E5%8F%8D%E5%B0%84/","title":"README","lang":"zh-CN","frontmatter":{"description":"README 原文：https://ue5wiki.com/wiki/12624/ UE 反射实现分析：基础概念 反射，是指程序在运行时进行自检的的能力，在编辑器的属性面板、序列化、GC 等方面非常有用。但是 C++ 语言本身不支持反射特性，UE 在 C++ 的语法基础上通过 UHT 实现了反射信息的生成，从而实现了运行时的反射的目的。 在之前的文章中...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/SoftCode/Game/UE4%EF%BC%88%E8%93%9D%E5%9B%BE%20C__%EF%BC%89/%E3%80%8Aue5wiki%E3%80%8B/%E5%8F%8D%E5%B0%84/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"README"}],["meta",{"property":"og:description","content":"README 原文：https://ue5wiki.com/wiki/12624/ UE 反射实现分析：基础概念 反射，是指程序在运行时进行自检的的能力，在编辑器的属性面板、序列化、GC 等方面非常有用。但是 C++ 语言本身不支持反射特性，UE 在 C++ 的语法基础上通过 UHT 实现了反射信息的生成，从而实现了运行时的反射的目的。 在之前的文章中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.imzlp.com/imgs/zlp/blog/posts/12624/fproperty-get-data-member-value.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"README\\",\\"image\\":[\\"https://img.imzlp.com/imgs/zlp/blog/posts/12624/fproperty-get-data-member-value.webp\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.9,"words":1470},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/Game/UE4（蓝图 C++）/《ue5wiki》/反射/README.md","excerpt":"\\n<p>原文：https://ue5wiki.com/wiki/12624/</p>\\n<h2>UE 反射实现分析：基础概念</h2>\\n<p><strong>反射</strong>，是指程序在运行时进行自检的的能力，在编辑器的属性面板、序列化、GC 等方面非常有用。但是 C++ 语言本身不支持反射特性，UE 在 C++ 的语法基础上通过 UHT 实现了反射信息的生成，从而实现了运行时的反射的目的。</p>\\n<p>在之前的文章中，有一些涉及到 UE 的构建系统和反射相关的内容。</p>\\n<p>涉及了 UE 的构建系统文章：</p>\\n<ul>\\n<li><a href=\\"https://imzlp.com/posts/6362/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Build flow of the Unreal Engine4 project</a></li>\\n<li><a href=\\"https://img.imzlp.com/imgs/zlp/blog/posts/16643/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">UE4 Build System: Target and Module</a></li>\\n<li><a href=\\"https://imzlp.com/posts/20425/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">UEC++ 与标准 C++ 的区别与联系</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/Game/UE4（蓝图 C++）/《ue5wiki》/反射/README.md","value":{"title":"《ue5wiki》/","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/Game/UE4（蓝图 C++）/《ue5wiki》/反射/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
