import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as n,a as s}from"./app-DNx16x_G.js";const e={},d=s(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h1><h2 id="字符" tabindex="-1"><a class="header-anchor" href="#字符"><span>字符</span></a></h2><ul><li><code>C语言</code>：单引号声明字符、双引号声明字符串</li><li><code>Python</code>：单引号或双引号声明字符串，没有字符类型</li></ul><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h3><p>转义字符与字面量（多语言）</p><table><thead><tr><th>字符名称</th><th>C/C++</th><th>Java</th><th>HTML</th><th>英语</th><th>ASCII符号</th><th>十进制ASCII码</th><th>十六进制ASCII码</th></tr></thead><tbody><tr><td>换行符</td><td><code>\\n</code></td><td><code>\\n</code></td><td></td><td>line feed</td><td>NL（LF）</td><td>10</td><td>0x0A</td></tr><tr><td>水平制表符</td><td><code>\\t</code></td><td><code>\\t</code></td><td></td><td>table</td><td>HT</td><td>9</td><td>0x09</td></tr><tr><td>垂直制表符</td><td><code>\\v</code></td><td></td><td></td><td>vertical</td><td>VY</td><td>11</td><td>0x0B</td></tr><tr><td>退格</td><td><code>\\b</code></td><td><code>\\b</code></td><td></td><td>backspace</td><td>BS</td><td>8</td><td>0x08</td></tr><tr><td>回车</td><td><code>\\r</code></td><td></td><td></td><td>carriage return</td><td>CR</td><td>13</td><td>0x0D</td></tr><tr><td>振铃</td><td><code>\\a</code></td><td></td><td></td><td>alert</td><td>BEL</td><td>7</td><td>0x07</td></tr><tr><td>反斜杠</td><td><code>\\\\</code></td><td></td><td></td><td></td><td><code>\\</code></td><td>92</td><td>0x5C</td></tr><tr><td>单引号</td><td><code>\\&#39;</code></td><td><code>\\&#39;</code></td><td></td><td></td><td><code>&#39;</code></td><td>39</td><td>0x27</td></tr><tr><td>双引号</td><td><code>\\&quot;</code></td><td><code>\\&quot;</code></td><td><code>&amp;quot;</code></td><td>quotes</td><td><code>&quot;</code></td><td>34</td><td>0x22</td></tr><tr><td>问号</td><td><code>\\?</code></td><td><code>\\?</code></td><td></td><td></td><td><code>?</code></td><td>63</td><td>0x3F</td></tr><tr><td>换页符</td><td></td><td><code>\\f</code></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>空字符</td><td></td><td><code>\\0</code></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>空格</td><td>毋需</td><td><code>\\s</code></td><td><code>&amp;nbsp;</code></td><td>space</td><td></td><td></td><td></td></tr><tr><td>与号</td><td>毋需</td><td>毋需</td><td><code>&amp;amp;</code></td><td></td><td><code>&amp;</code></td><td></td><td></td></tr><tr><td>小于号</td><td>毋需</td><td>毋需</td><td><code>&amp;lt;</code></td><td>less</td><td><code>&lt;</code></td><td></td><td></td></tr><tr><td>大于号</td><td>毋需</td><td>毋需</td><td><code>&amp;gt;</code></td><td>greater than</td><td><code>&gt;</code></td><td></td><td></td></tr><tr><td>八进制ASCII</td><td><code>\\0dd</code></td><td><code>\\ddd</code></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16进制ASCII</td><td><code>\\0xaa</code></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16进制Unicdoe</td><td><code>\\uxxxx</code></td><td><code>\\uxxxx</code></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>补充：</p><ul><li>现代系统并非都支持所有的转义序列。例如输入振铃字符时，有些系统保持沉默</li><li>通用字符名：<code>\\u</code>后8个十六进制位，<code>\\U</code>后16个十六进制位，表示的是<code>ISO 10646</code>码点</li></ul><h3 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h3><ul><li><code>C语言</code>：需要引入库<code>&lt;string.h&gt;</code>，再用函数<code>strcat(str1,str2)</code></li><li><code>Python、Java</code>：使用字面量表达方式<code>+</code></li></ul><h3 id="底层实现" tabindex="-1"><a class="header-anchor" href="#底层实现"><span>底层实现</span></a></h3><ul><li><p><code>C/C++、Qt</code>：不自带，分别使用<code>string.h、string、QString</code>库，底层由数组实现</p><ul><li>元素是可变的（本质就是修改数组元素）</li></ul></li><li><p><code>Java</code>：使用<code>String</code>库</p><ul><li><p>元素是不可变的（本质上是指针，但Java不能直接通过指针操作地址）</p></li><li><p>Java这样做的原因：</p><ul><li><p>Java字符串由char值序列组成，而他的char数据类型是一个采用UTF-16编码表示Unicode码点的代码单元。</p><p><code>length</code>方法将返回采用UTF-16编码表示的给定字符串所需要的<code>代码单元数量</code></p><p><code>s.charAt(n)</code>方法返回<code>序列为n的代码单元</code></p><p>如果能够修改序列成员，其代码单元的长度是不可控的（大多数的常用Unicode字符是一个代码单元，有一些会超出）</p></li></ul></li></ul></li><li><p><code>Python</code>：Python自带</p><ul><li>元素是不可变的（不是指针，可以通过<code>==</code>直接比较字符串大小）</li><li>Python这样做的原因： <ul><li>(1) 字符串能更好地作为字典的主键</li><li>(2) 好像是对于变量的底层存储模型不同？？？？？？？</li></ul></li></ul></li></ul><h3 id="原理互通" tabindex="-1"><a class="header-anchor" href="#原理互通"><span>原理互通</span></a></h3><h4 id="c字符数组-vs-javastring" tabindex="-1"><a class="header-anchor" href="#c字符数组-vs-javastring"><span>C字符数组 vs JavaString</span></a></h4><p>在C程序员第一次接触Java字符串的时候，常常会感到迷惑，因为他们总将字符串认为是字符型数组</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种认识是错误的，Java字符串大致类似于char*指针</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token operator">*</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>替换字符时的原理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strncpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> greeting<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">strncpy</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;p!&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
greeting <span class="token operator">=</span> temp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是否会内存泄露：不会，Java会自动进行垃圾回收。如果一块内存不再使用了，系统最终会将其回收。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>greeting <span class="token operator">=</span> <span class="token string">&quot;Howdy&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="c-string对象-vs-javastring" tabindex="-1"><a class="header-anchor" href="#c-string对象-vs-javastring"><span>C++ String对象 vs JavaString</span></a></h4><ul><li>也自动地进行内存的分配与回收。内存管理是通过构造器、赋值操作和析构器显式执行的。</li><li>然而，C++字符串是可修改的，也就是说，可以修改字符串中的单个字符。</li></ul><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h3><ul><li><p>C</p><ul><li>不能用~~<code>==</code>~~，比较的是地址。本质上都是指针。<code>strcmp()</code></li></ul></li><li><p>C++ String类</p><ul><li>C++的string类<strong>重载了</strong><code>==</code>运算符以便检测字符串内容的相等性</li><li>可惜Java没有采用这种方式，<strong>它的字符串 “看起来、感觉起来” 与数值一样，但进行相等性测试时，其操作方式又类似于指针</strong> 语言的设计者本应该像对+那样也进行特殊处理，即重定义==运算符。</li></ul></li><li><p>Java</p><ul><li><p>不能用~~<code>==</code>~~，比较的是地址。本质上都是指针。<code>s.equals(t)</code></p></li><li><p>但和C/C++不同的是，Java中的字符串是共享的</p><p>如果虚拟机始终将相同的字符串共享，就可以使用==运算符检测是否相等。</p><p>但实际上只有字符串常量是共享的，而+或substring等操作产生的结果并不是共享的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>greeting <span class="token operator">==</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// probably true</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;Hel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// probably false    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Python</p><ul><li><code>==</code>：使用来比较两个字符串内的value值是否相同</li><li><code>is</code>：比较两个字符串的id值</li></ul></li></ul><h3 id="特殊字符串-格式、原始、模板字符串" tabindex="-1"><a class="header-anchor" href="#特殊字符串-格式、原始、模板字符串"><span>特殊字符串（格式、原始、模板字符串）</span></a></h3><div class="ab-note drop-shadow"><table class="ab-table ab-branch-table"><thead><tr><th rowspan="1" class="markdown-rendered"><div><p>语言</p></div></th><th rowspan="1" class="markdown-rendered"><div><p>格式字符串</p><ul><li>原始字符串</li><li>模板字符串</li><li>拼接字符串</li></ul></div></th></tr></thead><tbody><tr><td rowspan="1" class="markdown-rendered"><div><p>c/c++</p></div></td><td rowspan="1" class="markdown-rendered"><div><p>格式字符串</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s! Your age is %d.\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>原始字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>模板字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>字符串拼接（这个有点怪）</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 字符串字面值可以通过相邻放置在一起实现拼接</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token string">&quot;world&quot;</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div></td></tr><tr><td rowspan="1" class="markdown-rendered"><div><p>python</p></div></td><td rowspan="1" class="markdown-rendered"><div><p>格式字符串</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token string">&#39;%s, %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name1<span class="token punctuation">,</span> name2<span class="token punctuation">)</span> 						<span class="token comment"># 旧版格式字符串。Hello, world</span>
<span class="token string">&#39;{mame1}, {name2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span> name2<span class="token operator">=</span>name2<span class="token punctuation">)</span>	<span class="token comment"># 新版格式字符串。Hello, world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>原始字符串</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token string">r&#39;Hello, \\nworld!&#39;</span>	<span class="token comment"># 也能用大写的R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>模板字符串</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>hello<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>world<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>	<span class="token comment"># Python中也叫字符串插值</span>

<span class="token comment"># 但实际上，python的“模板字符串”不是上面那个，而是这个</span>
<span class="token keyword">from</span> string <span class="token keyword">import</span> Template
t <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">&quot;Hello, $name! Your age is $age.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>substitute<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>字符串拼接</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>combined_str <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td></tr><tr><td rowspan="1" class="markdown-rendered"><div><p>js</p></div></td><td rowspan="1" class="markdown-rendered"><div><p>格式字符串</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s! Your age is %d.&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>原始字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>模板字符串</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! Your age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>字符串拼接</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> combined_str <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td></tr><tr><td rowspan="1" class="markdown-rendered"><div><p>java</p></div></td><td rowspan="1" class="markdown-rendered"><div><p>格式字符串</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s! Your age is %d.\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>原始字符串</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> rawString <span class="token operator">=</span> \`<span class="token class-name">Hello</span><span class="token punctuation">,</span> \\nworld<span class="token operator">!</span>\` <span class="token comment">// Java12+支持</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>模板字符串</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不支持
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td><td rowspan="1" class="markdown-rendered"><div><p>字符串拼接</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div></td></tr></tbody></table></div>`,30),o=[d];function p(l,i){return t(),n("div",null,o)}const u=a(e,[["render",p],["__file","03. 字符类型.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 字符类型 字符 C语言：单引号声明字符、双引号声明字符串 Python：单引号或双引号声明字符串，没有字符类型 转义字符 转义字符与字面量（多语言） 补充： 现代系统并非都支持所有的转义序列。例如输入振铃字符时，有些系统保持沉默 通用字符名：\\\\u后8个十六进制位，\\\\U后16个十六进制位，表示的是ISO 10646码点 字符串拼...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 字符类型 字符 C语言：单引号声明字符、双引号声明字符串 Python：单引号或双引号声明字符串，没有字符类型 转义字符 转义字符与字面量（多语言） 补充： 现代系统并非都支持所有的转义序列。例如输入振铃字符时，有些系统保持沉默 通用字符名：\\\\u后8个十六进制位，\\\\U后16个十六进制位，表示的是ISO 10646码点 字符串拼..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[{"level":2,"title":"字符","slug":"字符","link":"#字符","children":[{"level":3,"title":"转义字符","slug":"转义字符","link":"#转义字符","children":[]},{"level":3,"title":"字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]},{"level":3,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":3,"title":"原理互通","slug":"原理互通","link":"#原理互通","children":[{"level":4,"title":"C字符数组 vs JavaString","slug":"c字符数组-vs-javastring","link":"#c字符数组-vs-javastring","children":[]},{"level":4,"title":"C++ String对象 vs JavaString","slug":"c-string对象-vs-javastring","link":"#c-string对象-vs-javastring","children":[]}]},{"level":3,"title":"比较","slug":"比较","link":"#比较","children":[]},{"level":3,"title":"特殊字符串（格式、原始、模板字符串）","slug":"特殊字符串-格式、原始、模板字符串","link":"#特殊字符串-格式、原始、模板字符串","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.64,"words":1391},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Different/02. 数据+算法/03. 字符类型.md","autoDesc":true}');export{u as comp,v as data};
