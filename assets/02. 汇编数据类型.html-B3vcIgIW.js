import{_ as d,e,g as r,o as s}from"./app-EuS-Ookm.js";const a={};function n(i,t){return s(),e("div",null,t[0]||(t[0]=[r(`<h1 id="computersystems" tabindex="-1"><a class="header-anchor" href="#computersystems"><span>ComputerSystems</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="汇编数据类型" tabindex="-1"><a class="header-anchor" href="#汇编数据类型"><span>汇编数据类型</span></a></h1><h2 id="数据指定" tabindex="-1"><a class="header-anchor" href="#数据指定"><span>数据指定</span></a></h2><h3 id="汇编数据格式-位宽修饰符" tabindex="-1"><a class="header-anchor" href="#汇编数据格式-位宽修饰符"><span>汇编数据格式（位宽修饰符）</span></a></h3><p>Inter术语<code>字(word)</code>表示16位数据类型（从16位体系结构扩展而来的原因），字不等于字长<br> 一般不用字长正概念，高级语言中常用字节表示数据大小、汇编语言中常用字表示数据大小</p><ul><li>32位1字长=2字=4B，1字=2字节</li><li>64位1字长=4字=8B，1字=2字节</li></ul><p>C语言数据类型与汇编位宽修饰符的关系：（x86-64，64位机器中，指针长：4字 = 1个字长 = 2^64bit = 64位 = 8字节）</p><table><thead><tr><th>C声明</th><th>汇编代码后缀<br>/位宽修饰符</th><th>后缀含义（double作l）</th><th>Intel数据类型</th><th>字节大小</th></tr></thead><tbody><tr><td>char</td><td>b</td><td>byte</td><td>字节</td><td>1</td></tr><tr><td>short</td><td>w</td><td>word</td><td>字</td><td>2</td></tr><tr><td>int</td><td>l</td><td>double words</td><td>双字</td><td>4</td></tr><tr><td>long</td><td>q</td><td>quad words</td><td>四字</td><td>8</td></tr><tr><td>char *</td><td>q</td><td>quad words</td><td>四字</td><td>8</td></tr><tr><td>float</td><td>s</td><td>single ...</td><td>单精度</td><td>4</td></tr><tr><td>double</td><td>l</td><td>double ...</td><td>双精度</td><td>8</td></tr></tbody></table><blockquote><p>表附：</p><ul><li>int和double后缀都是<code>l</code>但字节大小不同：但不产生歧义，浮点数会使用一组完全不同的指令和寄存器</li><li>使用立即数时需要加位宽修饰符且长度应该匹配 (否则warning)</li><li>以寄存器为目的时不需要加修饰符因为寄存器宽度固定 (8086寄存器不拆开时是16位)</li></ul></blockquote><h3 id="操作数指示符" tabindex="-1"><a class="header-anchor" href="#操作数指示符"><span>操作数指示符</span></a></h3><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" data-title="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>reg		;register	寄存器	跟8/16</span></span>
<span class="line"><span>mem		;memory		内存	跟8/16</span></span>
<span class="line"><span>imm		;immediate	立即数	跟8/16</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作数格式（M<sub>b</sub>为简便省去下标b，比例因子s必须是1/2/4/8）</p><table><thead><tr><th>类型</th><th>格式</th><th>操作数值</th><th>寻址模式名称</th><th>举例</th></tr></thead><tbody><tr><td><mark>立即数（immediate）</mark></td><td>$Imm</td><td>Imm</td><td><strong>立即数寻址</strong></td><td>mov ax, <strong>0xb800</strong></td></tr><tr><td><mark>寄存器（register）</mark></td><td>r<sub>a</sub></td><td><mark>R[r<sub>a</sub>]</mark></td><td>寄存器寻址</td><td></td></tr><tr><td>存储器</td><td>Imm</td><td>M[Imm]</td><td><strong>绝对寻址</strong></td><td></td></tr><tr><td>存储器</td><td>(r<sub>a</sub>)</td><td>M[<mark>R[r<sub>a</sub>]</mark>]</td><td><strong>间接寻址</strong></td><td>mov bl, <strong>[ds:si]</strong></td></tr><tr><td>存储器</td><td>Imm(r<sub>b</sub>)</td><td>M[Imm+<mark>R[r<sub>b</sub>]</mark>]</td><td>（基址+偏移量）寻址</td><td></td></tr><tr><td>存储器</td><td>(r<sub>b</sub>, r<sub>i</sub>)</td><td>M[<mark>R[r<sub>b</sub>]</mark>+<mark>R[r<sub>i</sub>]</mark>]</td><td>变址寻址</td><td></td></tr><tr><td>存储器</td><td>Imm(r<sub>b</sub>, r<sub>i</sub>)</td><td>M[Imm+<mark>R[r<sub>b</sub>]</mark>+<mark>R[r<sub>i</sub>]</mark>]</td><td>变址寻址</td><td></td></tr><tr><td>存储器</td><td>Imm(, r<sub>i</sub>, s)</td><td>M[<mark>R[r<sub>i</sub>]</mark> · s]</td><td>比例变址寻址</td><td></td></tr><tr><td>存储器</td><td>Imm</td><td>M[Imm+<mark>R[r<sub>i</sub>]</mark> · s]</td><td>比例变址寻址</td><td></td></tr><tr><td>存储器</td><td>(r<sub>b</sub>, r<sub>i</sub>, s)</td><td>M[<mark>R[r<sub>b</sub>]</mark>+<mark>R[r<sub>i</sub>]</mark> · s]</td><td>比例变址寻址</td><td></td></tr><tr><td><mark>存储器</mark></td><td>Imm(r<sub>b</sub>, r<sub>i</sub>, s)</td><td>M[Imm+<mark>R[r<sub>b</sub>]</mark>+<mark>R[r<sub>i</sub>]</mark> · s]</td><td>比例变址寻址</td><td></td></tr></tbody></table><p>根据操作数的可能性分三种类型：立即数、寄存器、内存引用（其他内存引用都是表中最后一行的特殊情况，只用记最后一行就行了！）</p>`,15)]))}const m=d(a,[["render",n],["__file","02. 汇编数据类型.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/02.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8C%87%E4%BB%A4/02.%20%E6%B1%87%E7%BC%96%E6%95%B0%E6%8D%AE/02.%20%E6%B1%87%E7%BC%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"ComputerSystems","lang":"zh-CN","frontmatter":{"description":"ComputerSystems 目录 汇编数据类型 数据指定 汇编数据格式（位宽修饰符） Inter术语字(word)表示16位数据类型（从16位体系结构扩展而来的原因），字不等于字长 一般不用字长正概念，高级语言中常用字节表示数据大小、汇编语言中常用字表示数据大小 32位1字长=2字=4B，1字=2字节 64位1字长=4字=8B，1字=2字节 C语言...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/02.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8C%87%E4%BB%A4/02.%20%E6%B1%87%E7%BC%96%E6%95%B0%E6%8D%AE/02.%20%E6%B1%87%E7%BC%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"ComputerSystems"}],["meta",{"property":"og:description","content":"ComputerSystems 目录 汇编数据类型 数据指定 汇编数据格式（位宽修饰符） Inter术语字(word)表示16位数据类型（从16位体系结构扩展而来的原因），字不等于字长 一般不用字长正概念，高级语言中常用字节表示数据大小、汇编语言中常用字表示数据大小 32位1字长=2字=4B，1字=2字节 64位1字长=4字=8B，1字=2字节 C语言..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ComputerSystems\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/02. 计算机指令/02. 汇编数据/02. 汇编数据类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>汇编数据类型</h1>\\n<h2>数据指定</h2>\\n<h3>汇编数据格式（位宽修饰符）</h3>\\n<p>Inter术语<code>字(word)</code>表示16位数据类型（从16位体系结构扩展而来的原因），字不等于字长<br>\\n一般不用字长正概念，高级语言中常用字节表示数据大小、汇编语言中常用字表示数据大小</p>\\n<ul>\\n<li>32位1字长=2字=4B，1字=2字节</li>\\n<li>64位1字长=4字=8B，1字=2字节</li>\\n</ul>\\n<p>C语言数据类型与汇编位宽修饰符的关系：（x86-64，64位机器中，指针长：4字 = 1个字长 = 2^64bit = 64位 = 8字节）</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/02. 计算机指令/02. 汇编数据/02. 汇编数据类型.md","value":{"title":"02. 汇编数据类型","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/02. 计算机指令/02. 汇编数据/02. 汇编数据类型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{m as comp,l as data};
