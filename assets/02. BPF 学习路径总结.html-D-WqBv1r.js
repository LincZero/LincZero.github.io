import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as a,c as s,b as e,e as r,d as n,a as o}from"./app-Bh75ISgc.js";const p={},h=o('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="bpf-学习路径总结" tabindex="-1"><a class="header-anchor" href="#bpf-学习路径总结"><span>BPF 学习路径总结</span></a></h1><h2 id="为什么要学习-bpf" tabindex="-1"><a class="header-anchor" href="#为什么要学习-bpf"><span>为什么要学习 BPF</span></a></h2>',4),c={href:"https://ebpf.io/",target:"_blank",rel:"noopener noreferrer"},d=o('<p>Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程序，而无需改变内核源代码或加载内核模块。</p><p>通过使Linux内核可编程，基础架构软件可以利用现有的层，使其更加智能，功能更加丰富，而不会继续给系统增加额外的复杂度，也不会影响执行效率和安全性。</p><p>eBPF 开发了全新一代的软件，能够对 Linux 内核的行为进行重新编程，甚至在传统上完全独立的多个子系统中应用逻辑。</p><p>BPF 技术目前主要用于以下场景：</p><ol><li><p>追踪和性能分析（Tracing &amp; Profiling）</p><p>将 eBPF 程序附加到跟踪点以及内核和用户应用探针点的能力，使得应用程序和系统本身的运行时行为具有前所未有的可见性。通过赋予应用程序和系统两方面的检测能力，可以将两种视图结合起来，从而获得强大而独特的洞察力来排除系统性能问题。先进的统计数据结构允许以高效的方式提取有意义的可见性数据，而不需要像类似系统那样，通常需要导出大量的采样数据。</p></li><li><p>观测和监控（Obervability &amp; Monitoring）</p><p>eBPF 不依赖于操作系统暴露的静态计数器和测量，而是实现了自定义指标的收集和内核内聚合，并基于广泛的可能来源生成可见性事件。这扩展了实现的可见性深度，并通过只收集所需的可见性数据，以及在事件源处生成直方图和类似的数据结构，而不是依赖样本的导出，大大降低了整体系统的开销。</p></li><li><p>网络（Network）</p><p>可编程性和效率的结合使得 eBPF 自然而然地满足了网络解决方案的所有数据包处理要求。eBPF 的可编程性使其能够在不离开 Linux内核的包处理上下文的情况下，添加额外的协议解析器，并轻松编程任何转发逻辑以满足不断变化的需求。JIT 编译器提供的效率使其执行性能接近于本地编译的内核代码。</p></li><li><p>安全（Security）</p><p>在看到和理解所有系统调用的基础上，将其与所有网络操作的数据包和套接字级视图相结合，可以采用革命性的新方法来确保系统的安全。虽然系统调用过滤、网络级过滤和进程上下文跟踪等方面通常由完全独立的系统处理，但 eBPF 允许将所有方面的可视性和控制结合起来，以创建在更多上下文上运行的、具有更好控制水平的安全系统。</p></li></ol><p>在追踪方面细分为了两类：</p><ul><li>追踪和性能分析</li><li>观测和监控</li></ul><p>这两者的区别主要在于数据的搜集和聚合是否在内测层面进行的，观测和监控主要是侧重于在内核导出指标、直方图或相关事件。</p><h2 id="bpf-应该怎么学习" tabindex="-1"><a class="header-anchor" href="#bpf-应该怎么学习"><span>BPF 应该怎么学习</span></a></h2><h3 id="书籍" tabindex="-1"><a class="header-anchor" href="#书籍"><span>书籍</span></a></h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>如果是想系统学习 BPF 技术，我的建议是先阅读相关的书籍，得到一个整体的认识，然后分方向单独深入。</p><p>目前 BPF 的书籍主要有以下两本：</p>',13),b={href:"https://www.amazon.com/Linux-Observability-BPF-Programming-Performance/dp/1492050202",target:"_blank",rel:"noopener noreferrer"},_={href:"https://item.jd.com/72110825905.html",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"图书全名为：《Linux Observability with BPF: Advanced Programming for Performance Analysis and Networking》。",-1),f={href:"https://pan.baidu.com/s/10gYYVXOdTX4HQ-_dQfWfOQ",target:"_blank",rel:"noopener noreferrer"},B=e("p",null,"本书两位作者合著：",-1),g=e("ul",null,[e("li",null,"[美] 大卫·卡拉维拉（David Calavera）Netlify 的 CTO，曾是 Docker 的维护者以及 Runc、Go 和 BCC 工具及其他开源项目的贡献者"),e("li",null,"[意] 洛伦佐·丰塔纳（Lorenzo Fontana）Sysdig 开源团队的成员，主要负责CNCF的 Falco 项目，该项目通过内核模块和 eBPF 实现了容器运行时安全和异常检测功能。")],-1),m={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},F={href:"http://www.brendangregg.com/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://item.jd.com/64536164411.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://item.jd.com/11755695.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.brendangregg.com/systems-performance-2nd-edition-book.html",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,"Brendan Gregg 的博客地址为： http://www.brendangregg.com/，里面有关于性能优化的诸多宝藏，值得仔细学习和研究。",-1),v=e("h4",{id:"图书心得",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#图书心得"},[e("span",null,"图书心得")])],-1),A={href:"https://www.amazon.com/Linux-Observability-BPF-Programming-Performance/dp/1492050202",target:"_blank",rel:"noopener noreferrer"},y=o("<p>中文和英文版都在 180 页左右，整体的思路清晰，相关的技术面面俱到，如果定位是整体理解（而不是实践练习），整本书阅读一天内可以完成，能够实现快速对于 BPF 技术的整体了解，但是本书对于涉及的内容介绍基本上还是停留在基础知识介绍，基本上无深入知识介绍，<strong>作为入门级别的书籍再合适不过</strong>。主要内容包括以下方面：</p><ul><li>BPF 基础知识 <ul><li>BPF 的历史及架构；</li><li>BPF 的程序类型和验证器：按照重要性依次介绍了各种程序类型；</li><li>BPF Map： BPF Map 类型，常见操作和以及 Map 相关虚拟系统；</li></ul></li><li>BPF Trace <ul><li>BPF Trace：Trace 的基础知识（kprobe、tracepoint、usdt等）和几个 BCC 使用的样例；</li><li>BPF 相关工具（BPFTool &amp; BPFTrace &amp; kubectl-trace &amp; eBPF Exportor）；</li></ul></li><li>BPF Network <ul><li>Linux 网络和 BPF：涵盖数据包过滤和 cls_bpf 相关内容；</li><li>XDP：由于 XDP 在网络数据处理的特殊地位，单独成章，对于 XDP 进行了简单介绍和一个简单的原理实现，以及如何使用 BCC 进行 XDP 相关的验证；</li></ul></li><li>安全 <ul><li>主要是 Seccomp（基于传统的 cBPF）和 LSM 钩子两个方面的内容，主要是简单的介绍，内容不多；</li></ul></li><li>真实的用户案例 <ul><li>国外几大公司 Sysdig 、Floowmill 等在 BPF 的技术实践。</li></ul></li></ul>",2),C={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},D=o("<p>本书英文版 839 页，主要涉及的 BPF 技术的基础、BPF Trace 基础基础知识、<strong>BPF 技术 Trace 方面的各种实践</strong>，<strong>本书无 BPF 在网络、安全上的详细介绍</strong>。本书的<strong>介绍侧重于基础知识和在 Trace 层面的实践</strong>，可以理解为 《Systems Performance: Enterprise and the Cloud》图书的修订版本，重点引入了 BPF 技术的实践。</p><p>全书主题分成四个部分：</p><ol><li><p>技术</p><p>在第一部分主要涉及的是 BPF 相关的技术和如何使用的总览。</p><ul><li>BPF 技术介绍</li><li>👍 技术背景</li><li>性能分析总览</li><li>BCC 工具介绍</li><li>BPFTrace 工具介绍</li></ul><p>这个部分的内容介绍，重点在 <code>技术背景</code> 章节，介绍的了 Trace 相关的技术点及实现原理，总结的非常简练和准确，值得多阅读几遍； BCC 和 BPFTrace 工具的介绍更多是从原理和使用层面介绍，详细的知识可以从两者的 github 网址学习到，贵在章节内容总结的有图有条理，可以快速对于整体架构有个快速的认知。</p></li><li><p>使用 BPF 工具</p><p>本章节主要是介绍了各种性能分析维度（CPU/Mem/Network/System等）的背景知识、传统工具和BPF 工具使用。</p><p>这个章节可以理解是 《Systems Performance: Enterprise and the Cloud》的缩减（背景知识、传统工具）和BPF 工具的补充，但是也增加了一些多的内容比如安全、容器和虚拟化的内容。</p><p>这部分的内容有方法论、基础知识和使用实践，可以作为日常问题排查的参考工具书。</p></li><li><p>附加主题</p><p>作为 BPF 性能工具的补充，还有一些是使用 BPF 各种过程中的小知识、技巧和常见的问题。</p></li><li><p>附录</p><p>虽然是作为附录的内容，但是却是我们学习深入技术点的重要参考，主要是 bpftrace 工具的一览表、BCC Tools 开发、使用原生的 C 编写 BPF 和 BPF 指令集等。</p><p>这部分的内容面对的是希望对于 BPF 技术更加深入了解和希望参与到 BCC 工具开发的研发人员。</p></li></ol>",3),L=e("h3",{id:"bpf-学习样例",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bpf-学习样例"},[e("span",null,"BPF 学习样例")])],-1),T={href:"https://github.com/iovisor/bcc/tree/master/tools",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/iovisor/bpftrace/tree/master/tools",target:"_blank",rel:"noopener noreferrer"},S={href:"https://elixir.bootlin.com/linux/v5.8/source/samples/bpf",target:"_blank",rel:"noopener noreferrer"},M={href:"https://elixir.bootlin.com/linux/v5.8/source/tools/testing/selftests/bpf",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"如果是一开始学习 BPF，我个人的建议是：",-1),z=e("li",null,"先大体了解 BPF 技术的发展历史、优点、限制；",-1),X=e("li",null,"使用 BCC 工具在环境中进行实践，并且初步了解相关工具的的运作机制；",-1),G=e("li",null,"参考 BCC 样例，用原生的 C 代码进行实践并编写；",-1),K={href:"https://ebpf.io/summit-2020",target:"_blank",rel:"noopener noreferrer"},V={href:"https://cloud.tencent.com/developer/article/1698426",target:"_blank",rel:"noopener noreferrer"},j=e("h2",{id:"bpf资料汇总",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bpf资料汇总"},[e("span",null,"BPF资料汇总")])],-1),I={href:"https://github.com/DavadDi/bpf_study",target:"_blank",rel:"noopener noreferrer"},H=e("h3",{id:"介绍系列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#介绍系列"},[e("span",null,"介绍系列")])],-1),R={href:"https://ebpf.io/",target:"_blank",rel:"noopener noreferrer"},J={href:"http://arthurchiao.art/blog/ebpf-and-k8s-zh/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/DavadDi/bpf_study/blob/master/BPF-and-Kubernetes-Little-Helper-Minions-for-Scaling-Microservices/Aug19_eBPF_and_Kubernetes_Little_Helper_Minions_for_Scaling_Microservices_Daniel_Borkmann.pdf",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/DavadDi/bpf_study/blob/master/how-to-make-linux-microservice-aware-with-cilium-ebpf/index.md",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/DavadDi/bpf_study/blob/master/how-to-make-linux-microservice-aware-with-cilium-ebpf/bpf_-_turning_linux_into_a_microservices-aware_operating_system.pdf",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.collabora.com/news-and-blog/blog/2019/04/05/an-ebpf-overview-part-1-introduction/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.collabora.com/news-and-blog/blog/2019/04/15/an-ebpf-overview-part-2-machine-and-bytecode/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.collabora.com/news-and-blog/blog/2019/04/26/an-ebpf-overview-part-3-walking-up-the-software-stack/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.collabora.com/news-and-blog/blog/2019/05/06/an-ebpf-overview-part-4-working-with-embedded-systems/",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://www.collabora.com/news-and-blog/blog/2019/05/14/an-ebpf-overview-part-5-tracing-user-processes/",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/DavadDi/bpf_study/blob/master/the-art-of-writing-ebpf-programs-a-primer/index.md",target:"_blank",rel:"noopener noreferrer"},te={href:"https://blog.aquasec.com/intro-ebpf-tracing-containers",target:"_blank",rel:"noopener noreferrer"},ne={href:"http://www.brendangregg.com/ebpf.html",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://lwn.net/Articles/740157/",target:"_blank",rel:"noopener noreferrer"},le={href:"https://github.com/iovisor",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://github.com/iovisor/bpf-docs",target:"_blank",rel:"noopener noreferrer"},ae=e("li",null,[r("【视频】Linux 内核之旅的视频，偏基础一些 "),e("ul",null,[e("li",null,"高效入门eBPF https://www.bilibili.com/video/BV1LX4y157Gp/"),e("li",null,"BPF C编程入门 https://www.bilibili.com/video/BV1f54y1h74r/")])],-1),se=e("h3",{id:"深入系列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#深入系列"},[e("span",null,"深入系列")])],-1),pe={href:"https://www.infradead.org/~mchehab/kernel_docs/bpf/index.html",target:"_blank",rel:"noopener noreferrer"},he=e("li",null,"bpf 归档的邮件列表 https://lore.kernel.org/bpf/， 完整列表 http://vger.kernel.org/vger-lists.html",-1),ce={href:"https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/",target:"_blank",rel:"noopener noreferrer"},de={href:"https://www.zcfy.cc/article/dive-into-bpf-a-list-of-reading-material",target:"_blank",rel:"noopener noreferrer"},be={href:"https://github.com/zoidbergwill/awesome-ebpf",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://github.com/icopy-site/awesome-cn/blob/master/docs/awesome/awesome-ebpf.md",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://docs.cilium.io/en/v1.8/bpf/",target:"_blank",rel:"noopener noreferrer"},fe={href:"http://arthurchiao.art/blog/cilium-bpf-xdp-reference-guide-zh/",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://lwn.net/Kernel/Index/#Berkeley_Packet_Filter",target:"_blank",rel:"noopener noreferrer"},ge={href:"http://blogs.oracle.com/linux/notes-on-bpf-1",target:"_blank",rel:"noopener noreferrer"},me={href:"https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md",target:"_blank",rel:"noopener noreferrer"},Pe={href:"http://blogs.oracle.com/linux/notes-on-bpf-2",target:"_blank",rel:"noopener noreferrer"},Fe={href:"http://blogs.oracle.com/linux/notes-on-bpf-3",target:"_blank",rel:"noopener noreferrer"},Ee={href:"http://blogs.oracle.com/linux/notes-on-bpf-4",target:"_blank",rel:"noopener noreferrer"},we={href:"http://blogs.oracle.com/linux/notes-on-bpf-5",target:"_blank",rel:"noopener noreferrer"},ke={href:"http://blogs.oracle.com/linux/notes-on-bpf-6",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://blogs.oracle.com/linux/the-power-of-xdp",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://blogs.oracle.com/linux/notes-on-bpf-7",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://blogs.oracle.com/linux/taming-tracepoints-in-the-linux-kernel",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://github.com/xdp-project/xdp-tutorial",target:"_blank",rel:"noopener noreferrer"},Ce={href:"http://arthurchiao.art/blog/understanding-ebpf-datapath-in-cilium-zh/",target:"_blank",rel:"noopener noreferrer"},De={href:"https://github.com/DavadDi/bpf_study/blob/master/Understanding-the-eBPF-Datapath-in-Cilium/eBPF-and-the-Cilium-Datapath.pdf",target:"_blank",rel:"noopener noreferrer"},Le=e("h3",{id:"linux-资源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#linux-资源"},[e("span",null,"Linux 资源")])],-1),Te=e("ul",null,[e("li",null,"在线内核源码 https://elixir.bootlin.com/")],-1);function Ne(Se,Me){const t=i("ExternalLinkIcon");return a(),s("div",null,[h,e("p",null,[r("可以先从 "),e("a",c,[r("ebpf.io"),n(t)]),r(" 网站获取一个简单的了解，首页内容翻译如下。")]),d,e("ul",null,[e("li",null,[e("p",null,[e("a",b,[r("《Linux Observability with BPF》"),n(t)]),r("。中文：当前图书已经翻译成中文，京东地址："),e("a",_,[r("《Linux内核观测技术BPF》"),n(t)]),r("。")]),u,e("p",null,[r("早期该书的电子版可以在 sysdig 官网下载，国内可以在"),e("a",f,[r("此处下载"),n(t)]),r("：链接: 提取码: bebt。")]),B,g]),e("li",null,[e("p",null,[e("a",m,[r("《BPF Performance Tools》 "),n(t)]),r("。中文：该书的中文版本已经出版在售，中文名为 《BPF之巅：洞悉Linux系统和应用性能》， JD 购买地址：https://item.jd.com/12769029.html")]),e("p",null,[r("图书全名为：《"),e("a",P,[r("BPF Performance Tools: Linux System and Application Observability"),n(t)]),r("》")]),e("p",null,[r("作者为大名鼎鼎的性能大师 "),e("a",F,[r("Brendan Gregg"),n(t)]),r("，该书目前还没有中文版，如果购买英文版，可以从"),e("a",E,[r("外文书店"),n(t)]),r("代购，2-3 周可以收到。")]),e("p",null,[r("他还写过一本性能优化的畅销书 《Systems Performance: Enterprise and the Cloud》，中文翻译版本为 "),e("a",w,[r("《性能之巅：洞悉系统、企业与云计算》"),n(t)]),r("。该书的第二版作者还在修订中，可参见：《"),e("a",k,[r("Systems Performance: Enterprise and the Cloud, Second Edition (2020)"),n(t)]),r("》。")]),x])]),v,e("ul",null,[e("li",null,[e("p",null,[e("a",A,[r("《Linux Observability with BPF》"),n(t)])]),y]),e("li",null,[e("p",null,[e("a",C,[r("《BPF Performance Tools》 "),n(t)])]),D])]),L,e("p",null,[r("如果是 BCC 的样例可以参考 "),e("a",T,[r("tools"),n(t)]),r(" 目录下的全部文件； BPFTrace 也可以参考 "),e("a",N,[r("tools"),n(t)]),r(" 目录。")]),e("p",null,[r("内核中的 BPF 样例参见 "),e("a",S,[r("samples/bpf"),n(t)]),r(" 和 "),e("a",M,[r("testing/bpf"),n(t)]),r("，这部分的代码都是原生的 C 代码，比较适合对于 BPF 技术原理进一步深入的同学。")]),O,e("ol",null,[z,X,G,e("li",null,[r("通过 KubeCon 会议或者 "),e("a",K,[r("BPF Summit"),n(t)]),r(" 峰会学习当前主要的进展并学习跟进最新的进展；")])]),e("p",null,[r("学习方式也可以参考的大卫李的一篇文章 "),e("a",V,[r("Linux超能力BPF技术介绍及学习分享"),n(t)]),r("，写的内容也比较齐全，可以参考")]),j,e("p",null,[r("如果有好的文章或者思路分析，可以到我的 "),e("a",I,[r("GitHub Repo"),n(t)]),r(" 提交 Issue，地址：https://github.com/DavadDi/bpf_study。")]),H,e("ul",null,[e("li",null,[r("👍 "),e("a",R,[r("https://ebpf.io"),n(t)]),r(" 官方维护的站点，上面的资料还是比较完整和权威的")]),e("li",null,[r("👍👍 ["),e("a",J,[r("译] 大规模微服务利器：eBPF + Kubernetes（KubeCon, 2020）"),n(t)]),r(" BPF Maintainer Daniel 的大作，非常详细，本文内容的时间跨度有 8 年，覆盖了 eBPF 发展的整个历史，非常值得一读。"),e("a",Q,[r("pdf"),n(t)])]),e("li",null,[r("👍 ["),e("a",W,[r("译] 如何基于 Cilium 和 eBPF 打造可感知微服务的 Linux（2019）"),n(t)]),r(),e("a",Z,[r("pdf"),n(t)])]),e("li",null,[r("An eBPF overview 系列 "),e("ul",null,[e("li",null,[e("a",q,[r("part 1: Introduction"),n(t)])]),e("li",null,[e("a",U,[r("part 2: Machine & bytecode"),n(t)])]),e("li",null,[e("a",Y,[r("part 3: Walking up the software stack"),n(t)])]),e("li",null,[e("a",$,[r("part 4: Working with embedded systems"),n(t)])]),e("li",null,[e("a",ee,[r("part 5: Tracing user processes"),n(t)])])])]),e("li",null,[e("a",re,[r("The art of writing eBPF programs: a primer"),n(t)])]),e("li",null,[e("a",te,[r("A Deep Dive into eBPF: The Technology that Powers Tracee"),n(t)])]),e("li",null,[e("a",ne,[r("Linux Extended BPF (eBPF) Tracing Tools"),n(t)]),r(" Brendan Gregg")]),e("li",null,[e("a",oe,[r("A thorough introduction to eBPF"),n(t)])]),e("li",null,[e("a",le,[r("iovisor"),n(t)]),r("/"),e("strong",null,[e("a",ie,[r("bpf-docs"),n(t)])])]),ae]),se,e("ul",null,[e("li",null,[e("a",pe,[r("Linux 内核 BPF 文档"),n(t)])]),he,e("li",null,[r("👍 "),e("a",ce,[r("Dive into BPF: a list of reading material"),n(t)]),r("，中文参见"),e("a",de,[r("这里"),n(t)]),r(", 基于这个文档有作者整理了一个更加清晰的分类 "),e("a",be,[r("zoidbergwill/awesome-ebpf"),n(t)]),r(" 和 "),e("a",_e,[r("**awesome-ebpf **"),n(t)]),r("- 中文")]),e("li",null,[r("👍👍 "),e("a",ue,[r("Cillum BPF and XDP Reference Guide"),n(t)]),r(" ["),e("a",fe,[r("译] Cilium：BPF 和 XDP 参考指南（2019） "),n(t)])]),e("li",null,[e("a",Be,[r("lwn.net#Berkeley_Packet_Filter"),n(t)]),r(" lwn.net 网站中与 BPF 相关的主题文章，对于了解 BPF 的历史非常有帮助")]),e("li",null,[r("👍👍 Oracle Blog 系列教程，深入浅出，是深入学习的必学教程 "),e("ul",null,[e("li",null,[e("a",ge,[r("BPF program types"),n(t)]),r("，配合 "),e("a",me,[r("eBPF features by Linux version"),n(t)]),r(" 效果更好")]),e("li",null,[e("a",Pe,[r("BPF helper functions for those programs"),n(t)])]),e("li",null,[e("a",Fe,[r("BPF userspace communication"),n(t)])]),e("li",null,[e("a",Ee,[r("BPF program build environment"),n(t)])]),e("li",null,[e("a",we,[r("BPF bytecodes and verifier"),n(t)])]),e("li",null,[e("a",ke,[r("BPF Packet Transformation"),n(t)])]),e("li",null,[e("a",xe,[r("The Power of XDP"),n(t)])]),e("li",null,[e("a",ve,[r("Notes on BPF (7) - BPF, tc and Generic Segmentation Offload"),n(t)])]),e("li",null,[e("a",Ae,[r("Taming Tracepoints in the Linux Kernel"),n(t)])])])]),e("li",null,[r("👍 "),e("a",ye,[r("xdp-tutorial"),n(t)]),r(" 里面有详细的 xdp 的源码，是学习 xdp 的好地方")]),e("li",null,[r("👍 ["),e("a",Ce,[r("译] 深入理解 Cilium 的 eBPF 收发包路径（datapath）（KubeCon, 2019）"),n(t)]),r(),e("a",De,[r("pdf"),n(t)])])]),Le,Te])}const Xe=l(p,[["render",Ne],["__file","02. BPF 学习路径总结.html.vue"]]),Ge=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/02.%20BPF%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%80%BB%E7%BB%93.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 BPF 学习路径总结 为什么要学习 BPF 可以先从 ebpf.io 网站获取一个简单的了解，首页内容翻译如下。 Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/02.%20BPF%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 BPF 学习路径总结 为什么要学习 BPF 可以先从 ebpf.io 网站获取一个简单的了解，首页内容翻译如下。 Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"BPF 学习路径总结","slug":"bpf-学习路径总结","link":"#bpf-学习路径总结","children":[{"level":2,"title":"为什么要学习 BPF","slug":"为什么要学习-bpf","link":"#为什么要学习-bpf","children":[]},{"level":2,"title":"BPF 应该怎么学习","slug":"bpf-应该怎么学习","link":"#bpf-应该怎么学习","children":[{"level":3,"title":"书籍","slug":"书籍","link":"#书籍","children":[{"level":4,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":4,"title":"图书心得","slug":"图书心得","link":"#图书心得","children":[]}]},{"level":3,"title":"BPF 学习样例","slug":"bpf-学习样例","link":"#bpf-学习样例","children":[]}]},{"level":2,"title":"BPF资料汇总","slug":"bpf资料汇总","link":"#bpf资料汇总","children":[{"level":3,"title":"介绍系列","slug":"介绍系列","link":"#介绍系列","children":[]},{"level":3,"title":"深入系列","slug":"深入系列","link":"#深入系列","children":[]},{"level":3,"title":"Linux 资源","slug":"linux-资源","link":"#linux-资源","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.92,"words":3277},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/02. BPF 学习路径总结.md","autoDesc":true}');export{Xe as comp,Ge as data};
