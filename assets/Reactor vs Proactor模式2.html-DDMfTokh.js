import{_ as o,e as r,g as t,o as a}from"./app-EuS-Ookm.js";const c={};function p(s,e){return a(),r("div",null,e[0]||(e[0]=[t('<h1 id="reactor-vs-proactor模式2" tabindex="-1"><a class="header-anchor" href="#reactor-vs-proactor模式2"><span>Reactor vs Proactor模式2</span></a></h1><p>参考：<a href="https://blog.csdn.net/lpf463061655/article/details/103403881" target="_blank" rel="noopener noreferrer">高性能IO模型分析-Reactor模式和Proactor模式（二）</a></p><p>上一章内容是本章内容的理论基础和底层依赖。本章内容则是在上章内容作为底层的基础，经过巧妙的设计和前赴后继的实践，得出的一套应用层的“最佳实践”。虽不是开箱即用，但也为我们提供了很大的便利，让我们少走很多弯路。下面我们就看看有哪些不错的架构模型、模式值得我们去参考。</p><p>在web服务中，处理web请求通常有两种体系结构，分别为：</p><ul><li>thread-based architecture（基于线程的架构）</li><li>event-driven architecture（事件驱动模型）</li></ul><h2 id="thread-based-architecture-基于线程的架构" tabindex="-1"><a class="header-anchor" href="#thread-based-architecture-基于线程的架构"><span>thread-based architecture（基于线程的架构）</span></a></h2><p>thread-based architecture（基于线程的架构），通俗的说就是：<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">多线程</a>并发模式，一个连接一个线程，服务器每当收到客户端的一个请求， 便开启一个独立的线程来处理。</p><p><img src="https://img-blog.csdnimg.cn/20191205142035183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="多线程并发" loading="lazy"></p><p>一定程上极大地提高了服务器的吞吐量，由于在不同线程中，之前的请求在read阻塞以后，不会影响到后续的请求。</p><p>但是，仅适用于于并发量不大的场景，如果连接数太高，系统将无法承受。因为：</p><ul><li>线程<strong>存在</strong>需要占用一定的内存资源</li><li><strong>创建和销毁</strong>线程也需一定的代价</li><li>操作系统在<strong>切换</strong>线程也需要一定的开销</li><li>线程处理I/O，在等待输入或输出的这段时间处于<strong>空闲</strong>的状态，同样也会造成cpu资源的<strong>浪费</strong></li></ul><h2 id="event-driven-architecture-事件驱动模型" tabindex="-1"><a class="header-anchor" href="#event-driven-architecture-事件驱动模型"><span>event-driven architecture（事件驱动模型）</span></a></h2><p>事件驱动体系结构是目前比较广泛使用的一种。这种方式会定义一系列的事件处理器来响应事件的发生，并且将服务端接受连接与对事件的处理分离。其中，事件是一种状态的改变。比如，tcp中socket的new incoming connection、ready for read、ready for write。</p><p>如果对event-driven architecture有深入兴趣，可以看下维基百科对它的解释：传送门</p><p>Reactor模式和Proactor模式都是是event-driven architecture（事件驱动模型）的实现方式，下面聊一聊这两种模式。</p><h3 id="reactor模型" tabindex="-1"><a class="header-anchor" href="#reactor模型"><span>Reactor模型</span></a></h3><p>维基百科对<code>Reactor pattern</code>的解释</p><blockquote><p>反应器设计模式是一种事件处理模式，用于处理通过一个或多个输入并发地传递给服务处理程序的服务请求。<br> 然后，服务处理程序将传入的请求解复用，并将它们同步地分派给相关的请求处理程序</p></blockquote><p>从这个描述中，我们知道Reactor模式首先是事件驱动的，有一个或多个并发输入源，有一个Service Handler，有多个Request Handlers；<br> Service Handler会对输入的请求（Event）进行多路复用，并同步地将它们分发给相应的Request Handler。</p><p>下面的图将直观地展示上述文字描述：</p><p><img src="https://img-blog.csdnimg.cn/20191205142204185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Reactor_Simple" loading="lazy"></p><p>Reactor模式也有三种不同的方式，下面一一介绍：</p><h4 id="reactor模式-单线程模式" tabindex="-1"><a class="header-anchor" href="#reactor模式-单线程模式"><span>Reactor模式 - 单线程模式</span></a></h4><p>Java中的NIO模式的Selector网络通讯，其实就是一个简单的Reactor模型。可以说是单线程的Reactor模式</p><p><img src="https://img-blog.csdnimg.cn/2019120514232136.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Reactor-单线程模式" loading="lazy"></p><p>单线程模式的单线程主要是针对于I/O操作而言，也就是所以的I/O的accept()、read()、write()以及connect()操作都在一个线程上完成的。</p><p>但在目前的单线程Reactor模式中，不仅I/O操作在该Reactor线程上，连非I/O的业务操作也在该线程上进行处理了，这可能会大大延迟I/O请求的响应。所以我们应该将非I/O的业务逻辑操作从Reactor线程上卸载，以此来加速Reactor线程对I/O请求的响应。</p><h4 id="reactor模式-工作者线程池模式" tabindex="-1"><a class="header-anchor" href="#reactor模式-工作者线程池模式"><span>Reactor模式 - 工作者线程池模式</span></a></h4><p>与单线程模式不同的是，添加了一个<strong>工作者线程池</strong>，并将非I/O操作从Reactor线程中移出转交给工作者线程池（Thread Pool）来执行。这样能够提高Reactor线程的I/O响应，不至于因为一些耗时的业务逻辑而延迟对后面I/O请求的处理。</p><p><img src="https://img-blog.csdnimg.cn/20191205143707668.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Reactor工作者线程模式" loading="lazy"></p><p>在工作者线程池模式中，虽然非I/O操作交给了线程池来处理，但是<strong>所有的I/O操作依然由Reactor单线程执行</strong>，在高负载、高并发或大数据量的应用场景，依然较容易成为瓶颈。所以，对于Reactor的优化，又产生出下面的多线程模式。</p><h4 id="reactor模式-多线程模式" tabindex="-1"><a class="header-anchor" href="#reactor模式-多线程模式"><span>Reactor模式 - 多线程模式</span></a></h4><p>对于多个CPU的机器，为充分利用系统资源，将Reactor拆分为两部分：mainReactor和subReactor</p><p><img src="https://img-blog.csdnimg.cn/20191205143733380.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Reactor多线程模式" loading="lazy"></p><p>mainReactor负责监听server socket，用来处理网络新连接的建立，将建立的socketChannel指定注册给subReactor，通常一个线程就可以处理 ；</p><p>subReactor维护自己的selector, 基于mainReactor 注册的socketChannel多路分离I/O读写事件，读写网络数据，通常使用多线程；</p><p>对非I/O的操作，依然转交给工作者线程池（Thread Pool）执行。</p><p>此种模型中，每个模块的工作更加专一，耦合度更低，性能和稳定性也大量的提升，支持的可并发客户端数量可达到上百万级别。关于此种模型的应用，目前有很多优秀的框架已经在应用了，比如mina和netty 等。Reactor模式-多线程模式下去掉工作者线程池（Thread Pool），则是Netty中NIO的默认模式。</p><ul><li>mainReactor对应Netty中配置的BossGroup线程组，主要负责接受客户端连接的建立。一般只暴露一个服务端口，BossGroup线程组一般一个线程工作即可</li><li>subReactor对应Netty中配置的WorkerGroup线程组，BossGroup线程组接受并建立完客户端的连接后，将网络socket转交给WorkerGroup线程组，然后在WorkerGroup线程组内选择一个线程，进行I/O的处理。WorkerGroup线程组主要处理I/O，一般设置2*CPU核数个线程</li></ul><h3 id="proactor模型" tabindex="-1"><a class="header-anchor" href="#proactor模型"><span>Proactor模型</span></a></h3><p>流程与Reactor模式类似，区别在于proactor在IO ready事件触发后，<strong>完成IO操作再通知应用回调</strong>。</p><p>虽然在linux平台还是基于epoll/select，但是内部实现了异步操作处理器(Asynchronous Operation Processor)以及异步事件分离器(Asynchronous Event Demultiplexer)将IO操作与应用回调隔离。经典应用例如boost asio异步IO库的结构和流程图如下：</p><p><img src="https://img-blog.csdnimg.cn/20191205143949109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Proactor" loading="lazy"></p><p>再直观一点，就是下面这幅图：</p><p><img src="https://img-blog.csdnimg.cn/20191205143842183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="Proactor模式" loading="lazy"></p><p>再再直观一点，其实就回到了五大模型-异步I/O模型的流程，就是下面这幅图：</p><p><img src="https://img-blog.csdnimg.cn/20191205144014675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70" alt="proactor2" loading="lazy"></p><p>针对第二幅图在稍作解释：</p><p>Reactor模式中，用户线程通过向Reactor对象注册感兴趣的事件监听，然后事件触发时调用事件处理函数。而Proactor模式中，用户线程将AsynchronousOperation（读/写等）、Proactor以及操作完成时的CompletionHandler注册到AsynchronousOperationProcessor。</p><p>AsynchronousOperationProcessor使用Facade模式提供了一组异步操作API（读/写等）供用户使用，当用户线程调用异步API后，便继续执行自己的任务。AsynchronousOperationProcessor 会开启独立的内核线程执行异步操作，实现真正的异步。当异步IO操作完成时，AsynchronousOperationProcessor将用户线程与AsynchronousOperation一起注册的Proactor和CompletionHandler取出，然后将CompletionHandler与IO操作的结果数据一起转发给Proactor，Proactor负责回调每一个异步操作的事件完成处理函数handle_event。虽然Proactor模式中每个异步操作都可以绑定一个Proactor对象，但是一般在操作系统中，Proactor被实现为Singleton模式，以便于集中化分发操作完成事件。</p><h3 id="两种模型的总结" tabindex="-1"><a class="header-anchor" href="#两种模型的总结"><span>两种模型的总结</span></a></h3><ul><li><p>主动和被动</p><p>以主动写为例：</p><ul><li><p>Reactor将handler放到select()，等待可写就绪，然后调用write()写入数据；写完处理后续逻辑；</p></li><li><p>Proactor调用aoi_write后立刻返回，由内核负责写操作，写完后调用相应的回调函数处理后续逻辑</p></li><li><p>Reactor模式是一种被动的处理，即有事件发生时被动处理。而Proator模式则是主动发起异步调用，然后循环检测完成事件。</p></li></ul></li><li><p>实现</p><ul><li>Reactor实现了一个被动的事件分离和分发模型，服务等待请求事件的到来，再通过不受间断的同步处理事件，从而做出反应；</li><li>Proactor实现了一个主动的事件分离和分发模型；这种设计允许多个任务并发的执行，从而提高吞吐量。</li><li>所以涉及到文件I/O或耗时I/O可以使用Proactor模式，或使用多线程模拟实现异步I/O的方式。</li></ul></li><li><p>优点</p><ul><li><p>Reactor实现相对简单，对于链接多，但耗时短的处理场景高效；</p><ul><li><p>操作系统可以在多个事件源上等待，并且避免了线程切换的性能开销和编程复杂性；</p></li><li><p>事件的串行化对应用是透明的，可以顺序的同步执行而不需要加锁；</p></li><li><p>事务分离：将与应用无关的多路复用、分配机制和与应用相关的回调函数分离开来。</p></li></ul></li><li><p>Proactor在理论上性能更高，能够处理<strong>耗时长的并发场景</strong>。为什么说在理论上？请自行搜索Netty 5.X版本废弃的原因。</p><blockquote><p>废弃原因：使⽤ForkJoinPool后复杂度提升了，但是性能⽅⾯并没有明显的优势，反⽽给项⽬的维护带来了很⼤的⼯作量，因此还有到发布新版本的时机，所以将5.x废弃</p></blockquote></li></ul></li><li><p>缺点</p><ul><li>Reactor处理耗时长的操作会造成事件分发的阻塞，影响到后续事件的处理；</li><li>Proactor实现逻辑复杂；依赖操作系统对异步的支持，目前实现了纯异步操作的操作系统少，实现优秀的如windows IOCP，但由于其windows系统用于服务器的局限性，目前应用范围较小；而Unix/Linux系统对纯异步的支持有限，应用事件驱动的主流还是通过select/epoll来实现。</li></ul></li><li><p>适用场景</p><ul><li>Reactor：同时接收多个服务请求，并且依次同步的处理它们的事件驱动程序；</li><li>Proactor：异步接收和同时处理多个服务请求的事件驱动程序。<br> ux系统对纯异步的支持有限，应用事件驱动的主流还是通过select/epoll来实现。</li></ul></li><li><p>适用场景</p><ul><li>Reactor：同时接收多个服务请求，并且依次同步的处理它们的事件驱动程序；</li><li>Proactor：异步接收和同时处理多个服务请求的事件驱动程序。</li></ul></li></ul>',52)]))}const i=o(c,[["render",p],["__file","Reactor vs Proactor模式2.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/Reactor%20vs%20Proactor%E6%A8%A1%E5%BC%8F2.html","title":"Reactor vs Proactor模式2","lang":"zh-CN","frontmatter":{"description":"Reactor vs Proactor模式2 参考：高性能IO模型分析-Reactor模式和Proactor模式（二） 上一章内容是本章内容的理论基础和底层依赖。本章内容则是在上章内容作为底层的基础，经过巧妙的设计和前赴后继的实践，得出的一套应用层的“最佳实践”。虽不是开箱即用，但也为我们提供了很大的便利，让我们少走很多弯路。下面我们就看看有哪些不错的...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/Reactor%20vs%20Proactor%E6%A8%A1%E5%BC%8F2.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Reactor vs Proactor模式2"}],["meta",{"property":"og:description","content":"Reactor vs Proactor模式2 参考：高性能IO模型分析-Reactor模式和Proactor模式（二） 上一章内容是本章内容的理论基础和底层依赖。本章内容则是在上章内容作为底层的基础，经过巧妙的设计和前赴后继的实践，得出的一套应用层的“最佳实践”。虽不是开箱即用，但也为我们提供了很大的便利，让我们少走很多弯路。下面我们就看看有哪些不错的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img-blog.csdnimg.cn/20191205142035183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Reactor vs Proactor模式2\\",\\"image\\":[\\"https://img-blog.csdnimg.cn/20191205142035183.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205142204185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/2019120514232136.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205143707668.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205143733380.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205143949109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205143842183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\",\\"https://img-blog.csdnimg.cn/20191205144014675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xwZjQ2MzA2MTY1NQ==,size_16,color_FFFFFF,t_70\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":9.45,"words":2835},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/Reactor vs Proactor模式2.md","excerpt":"\\n<p>参考：<a href=\\"https://blog.csdn.net/lpf463061655/article/details/103403881\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">高性能IO模型分析-Reactor模式和Proactor模式（二）</a></p>\\n<p>上一章内容是本章内容的理论基础和底层依赖。本章内容则是在上章内容作为底层的基础，经过巧妙的设计和前赴后继的实践，得出的一套应用层的“最佳实践”。虽不是开箱即用，但也为我们提供了很大的便利，让我们少走很多弯路。下面我们就看看有哪些不错的架构模型、模式值得我们去参考。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/Reactor vs Proactor模式2.md","value":{"title":"Reactor vs Proactor模式2","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/Reactor vs Proactor模式2.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,l as data};
