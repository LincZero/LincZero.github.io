import{_ as e,e as n,g as l,o}from"./app-DPU1xou8.js";const a={};function i(r,t){return o(),n("div",null,t[0]||(t[0]=[l('<h1 id="分类原则" tabindex="-1"><a class="header-anchor" href="#分类原则"><span>分类原则</span></a></h1><h2 id="个人总结原则" tabindex="-1"><a class="header-anchor" href="#个人总结原则"><span>个人总结原则</span></a></h2><p>个人总结出来的一些原则，能够帮助更好的分类。必须遵守tag的需要严格遵守，否则建议遵守</p><h3 id="不要分类" tabindex="-1"><a class="header-anchor" href="#不要分类"><span>不要分类</span></a></h3><ul><li><strong>不要提前分类</strong>。在东西还不多时不要提前分类，东西多了再分类。借用程序里的一句话就是 ”过早的优化是万恶之源“。哪怕后期需要重构 (只要重构及时)，也不会比一开始做很多优化多浪费太多的东西</li><li><strong>不要过度分类</strong>。分类是为了提高效率，而不是为了你在这上面消耗精力</li><li><strong>非归档工程不用太分类</strong>。从使用和存放角度上。工作区里简单分分就得了，工作区里同一时间使用的项目一般不会超过20个，如果太多了，就说明该归档了。工作区里如果像归档区分得那么详细，提高了项目深度，反而降低工作效率</li><li><strong>归档保证项目完整性</strong>。从使用角度上。一个项目不要东一块西一块，要求别人拿到一个压缩包/文件夹后，可以继续完成里面的内容，而无需放在别处的其他素材。东西都绑一块就行了</li></ul><h3 id="分类二义性" tabindex="-1"><a class="header-anchor" href="#分类二义性"><span>分类二义性</span></a></h3><p>对于一个新的东西究竟放A里还是B里</p><ul><li><p><strong>优化原则</strong> (<mark>必须</mark>遵守)</p><ul><li><p>例如：有Docs、CodeProject、SourceProject。他们往往并不只是在不同的文件夹那么简单，而是极有可能在<strong>存储设备上和管理系统</strong>上有所不同！</p><p>Docs可以纯小容量U盘/SD卡放Kindle里看书，大的东西就<strong>绝对不能</strong>往里放。</p><p>CodeProject可以用Git管理，二进制存储的SourceProject就<strong>绝对不能</strong>放里面去。</p></li><li><p>例如：一个项目即包含了三维项目、也包含游戏项目。根据优化原则，应该放游戏项目！三维管理软件 (如3D66) 无法管理这个项目，而游戏管理软件肯定是可以管理这个项目的。</p></li></ul></li><li><p><strong>包含原则</strong> (<mark>必须</mark>遵守)</p><ul><li>如果两个分类是纯包含关系，如Docs和MdDocs，当满足小的肯定是放小的那个（小类可看成是在大类里的一个文件夹的快捷方式，而且此时不用小类岂不是没用了）</li></ul></li><li><p><strong>优先级原则</strong>：规定冲突时的选择优先级，若无规定则再往下看</p><ul><li>例如：我的Dev里有 Language、Platform、Type 三类，并规定了优先级 Platform &gt; Type &gt; Language。那么只要项目扯到一些跨平台的东西都应该放在多平台里</li></ul></li><li><p><strong>多人原则</strong>：分类到两个文件夹就像分派任务给两个人，且应尽力避免这两个人之间的交流。好好想想清楚他们各自的业务需要什么功能</p></li></ul><h3 id="同时多类" tabindex="-1"><a class="header-anchor" href="#同时多类"><span>同时多类</span></a></h3><p>(难题)</p><ul><li><p>平等类</p><ul><li>例如：一个项目脑子抽风没做分离，同时有 Java后端、Vue前端。而两部分是无论从什么角度上看都是平等，无重无轻</li></ul></li><li><p>多类</p><ul><li><p>例如：一个项目即包含了三维项目、也包含游戏项目。根据优化原则，应该放游戏项目！三维管理软件 (如3D66) 无法管理这个项目，而游戏管理软件肯定是可以管理这个项目的。</p><p>但此时你无法在三维分类中找到对应的游戏所使用的那个资源。这是单类模式的必然性。</p></li></ul></li><li><p>标签</p></li></ul><h2 id="一些根类" tabindex="-1"><a class="header-anchor" href="#一些根类"><span>一些根类</span></a></h2><p>有三大类是指导前几层的分类策略的，这类型通常会被放在分类开始根类里，而不是在很后面才去区分。</p><p>至于他们之间的优先级不作硬规定，视具体情况而定。</p><p>我觉得这里可以有个专有名词：<code>Big3</code>、<code>ThreeRoot</code></p><ul><li>性能优化</li><li>隐私优化</li><li>管理软件优化</li></ul>',16)]))}const s=e(a,[["render",i],["__file","分类原则.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/02.%20SubjectAndKnowledge/12.%20%E7%AE%A1%E7%90%86%E5%AD%A6%E3%80%81%E5%88%86%E7%B1%BB%E5%AD%A6/%E5%88%86%E7%B1%BB%E5%AD%A6/%E5%88%86%E7%B1%BB%E5%8E%9F%E5%88%99.html","title":"分类原则","lang":"zh-CN","frontmatter":{"last_time":"2024-03-24T00:00:00.000Z","tags":["原创"],"description":"分类原则 个人总结原则 个人总结出来的一些原则，能够帮助更好的分类。必须遵守tag的需要严格遵守，否则建议遵守 不要分类 不要提前分类。在东西还不多时不要提前分类，东西多了再分类。借用程序里的一句话就是 ”过早的优化是万恶之源“。哪怕后期需要重构 (只要重构及时)，也不会比一开始做很多优化多浪费太多的东西 不要过度分类。分类是为了提高效率，而不是为了你...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/02.%20SubjectAndKnowledge/12.%20%E7%AE%A1%E7%90%86%E5%AD%A6%E3%80%81%E5%88%86%E7%B1%BB%E5%AD%A6/%E5%88%86%E7%B1%BB%E5%AD%A6/%E5%88%86%E7%B1%BB%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"分类原则"}],["meta",{"property":"og:description","content":"分类原则 个人总结原则 个人总结出来的一些原则，能够帮助更好的分类。必须遵守tag的需要严格遵守，否则建议遵守 不要分类 不要提前分类。在东西还不多时不要提前分类，东西多了再分类。借用程序里的一句话就是 ”过早的优化是万恶之源“。哪怕后期需要重构 (只要重构及时)，也不会比一开始做很多优化多浪费太多的东西 不要过度分类。分类是为了提高效率，而不是为了你..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"原创"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分类原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.32,"words":997},"filePathRelative":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/分类学/分类原则.md","excerpt":"\\n<h2>个人总结原则</h2>\\n<p>个人总结出来的一些原则，能够帮助更好的分类。必须遵守tag的需要严格遵守，否则建议遵守</p>\\n<h3>不要分类</h3>\\n<ul>\\n<li><strong>不要提前分类</strong>。在东西还不多时不要提前分类，东西多了再分类。借用程序里的一句话就是 ”过早的优化是万恶之源“。哪怕后期需要重构 (只要重构及时)，也不会比一开始做很多优化多浪费太多的东西</li>\\n<li><strong>不要过度分类</strong>。分类是为了提高效率，而不是为了你在这上面消耗精力</li>\\n<li><strong>非归档工程不用太分类</strong>。从使用和存放角度上。工作区里简单分分就得了，工作区里同一时间使用的项目一般不会超过20个，如果太多了，就说明该归档了。工作区里如果像归档区分得那么详细，提高了项目深度，反而降低工作效率</li>\\n<li><strong>归档保证项目完整性</strong>。从使用角度上。一个项目不要东一块西一块，要求别人拿到一个压缩包/文件夹后，可以继续完成里面的内容，而无需放在别处的其他素材。东西都绑一块就行了</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/分类学/分类原则.md","value":{"title":"分类原则","path":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/分类学/分类原则.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,c as data};
