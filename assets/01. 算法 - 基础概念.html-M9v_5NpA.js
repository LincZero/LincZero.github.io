import{_ as i,c as n,e as l,a as s,o as t}from"./app-BgHc8lP1.js";const p={},e={class:"katex-block"},m={class:"katex-display"},r={class:"katex"},c={class:"katex-html","aria-hidden":"true"},h={class:"base"},o={class:"minner"},g={class:"mopen"},d={class:"delimsizing mult"},y={class:"vlist-t vlist-t2"},u={class:"vlist-r"},k={class:"vlist",style:{height:"2.35em"}},v={style:{top:"-2.192em"}},b={style:{height:"0.316em",width:"0.8889em"}},A={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},w={style:{top:"-4.292em"}},f={style:{height:"0.316em",width:"0.8889em"}},x={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"};function B(E,a){return t(),n("div",null,[a[13]||(a[13]=l(`<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h1><ul><li>算法 <ul><li>位运算 <ul><li>二进制及其基本位运算科普</li><li>……</li></ul></li><li>对数器</li><li>比较器</li><li>排序 <ul><li>选择排序</li><li>冒泡排序</li><li>插入排序</li><li>归并排序</li><li>快速排序</li><li>堆排序</li><li>计数排序</li><li>基数排序</li><li>排序大总结 &amp; 避坑指南</li></ul></li><li>二分及其扩展</li></ul></li><li>递归到动态规划 <ul><li>递归行为 <ul><li>Master公式</li><li>汉诺塔问题</li><li>生成全子序列</li><li>生成全排列</li><li>很多题目的对数器方法都是递归</li></ul></li><li>动态规划 <ul><li>从左往右尝试模型</li><li>区间范围尝试模型</li><li>样本对应尝试模型</li><li>业务限制尝试模型</li></ul></li><li>贪心</li></ul></li><li>数据结构 <ul><li>链表</li><li>队列</li><li>栈</li><li>哈希表的使用</li><li>有序表的使用</li><li>堆 <ul><li>堆的原理和实现</li><li>最大线段重合问题</li><li>合并K个有序链表</li></ul></li><li>加强堆</li><li>前缀树</li><li>二叉树</li><li>并查集</li><li>图</li><li>哈夫曼树</li></ul></li></ul><h2 id="指标" tabindex="-1"><a class="header-anchor" href="#指标"><span>指标</span></a></h2><h3 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度"><span>复杂度</span></a></h3><p>复杂度制表，及符号</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">...</span><span class="mclose">)</span></span></span></span>，最差复杂度（读大欧，或big欧）</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\Theta(...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">...</span><span class="mclose">)</span></span></span></span>，平均复杂度</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\Omega(...)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord">...</span><span class="mclose">)</span></span></span></span>，最优复杂度</li><li>一般仅需要看最差，平均和最好很少看</li></ul><p>选最大多项式，如：</p><ul><li>看：O(n^2)</li><li>比较：O(n^2)</li><li>交换：O(n)</li><li>总的时间复杂度：O(an^2+bn+c) = O(n^2)</li></ul><p>特别地：</p><ul><li>数组寻址，常数操作</li><li>链表寻位置，则不是常熟操作，复杂度是n</li><li>常数操作与N操作最明显的区别：会不会随数据量的增大而增大</li></ul><p>同算法复杂度如何判断优劣？</p><ul><li>很难去拼常数项，哪怕知道常数操作的数量，也常数操作之间的时间也会不同。只能去实验</li><li>评价一个算法流程的好坏，先看时间复杂度的指标，然后再分析不同数据样本下的实际运行时间，也就是“常数项时间”。</li></ul><h3 id="稳定性" tabindex="-1"><a class="header-anchor" href="#稳定性"><span>稳定性</span></a></h3><p>概念：</p><p>注意这里的稳定性，不是指不同数据状态下复杂度不同。</p><p>指值相同的元素在排完之后，能否保证原来的相对次序不变。</p><p>例如对：[2,1,2,1,3,2,3,2]，排序后是否能保证同样是1或2，在排序后位置不变</p><p>作用：</p><p>基础类型的数组没有用，主要用于非基础类型。</p><p>例如：学生有班级号和年龄两个信息，我可以分别弄一个班级和年龄的比较器，有稳定性的排序算法在两次排序后就能先排年龄再排班级。再例如学生有语文、数学、英语成绩，那么就可以依次排序得到成绩最好的学生。</p><p>判断：</p><p>见前面的表格，几乎是跨多个数字交换就做不到，堆也做不到</p><h2 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h2><p>交换</p><ul><li><p>有个好玩的点，可以用异或来交换（弹幕好像说，CSAPP里说现在这种写法性能没什么优势了）</p></li><li><p>异或，也是<strong>无进位相加</strong>（可以用这个来理解：为什么异或满足<strong>交换率和结合率</strong>），加法器也是异或实现，除了与或非外，这个最重要最好用了应该。</p></li><li><p>这三行跑完就交换了：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原，b=b原</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原，b = a原^b原^b原 = a原^0 = a原，这里使用了交换率或结合率</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// a = a原^b原^a原 = b原，b = a原</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>注意有个致命缺点，这里有个前提，a和b的值可以相当，但不能是同一个内存，否则自己和自己异或会变成0</p></li></ul><h3 id="题-找两出现奇数次的数" tabindex="-1"><a class="header-anchor" href="#题-找两出现奇数次的数"><span>题（找两出现奇数次的数）</span></a></h3><ul><li><p>限制时间复杂度O(n)，空间复杂度O(1)</p></li><li><p>一个数组中，有一个数出现了奇数次，其他都是偶数次，怎么找出来？</p><ul><li>全部异或，最后出来的数就是了</li></ul></li><li><p>一个数组中，有两个数出现了奇数次，其他都是偶数次，怎么找出来？</p><ul><li><p>这个一时间没想出来</p></li><li><p>答案：先得到A^B，因为A!=B，所以一定有一位不等于0。假设第8位是1，则表示A和B第8位不同，一个是1一个是0。 此时将第8位是1的数组全部异或一遍，就得到了A或B了！强啊！</p></li><li><p>代码实现里的一个细节技巧：<code>int rightOne = eor &amp; (~eor+1);</code> 位运算，提取最右侧的零。有点类似于补码转化那种想法，但有些不同</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 		0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1010111100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 	0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0101000011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">	0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0101000100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">eor</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0000000100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="二分" tabindex="-1"><a class="header-anchor" href="#二分"><span>二分</span></a></h2><p>二分查找，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log_2N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><p>技巧：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mfrac><mrow><mi>L</mi><mo>+</mo><mi>R</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">mid = \\frac{L+R}2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">mi</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 可能溢出，可以写成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>L</mi><mo>+</mo><mfrac><mrow><mi>R</mi><mo>−</mo><mi>L</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mi>L</mi><mo>+</mo><mo stretchy="false">(</mo><mi>R</mi><mo>−</mo><mi>L</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">mid = L+\\frac{R-L}2 = L+(R-L)&gt;&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">mi</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。但现代编译器都会把除法优化成移位，爱咋写咋写</li></ul><h3 id="题-局部最小-无序二分" tabindex="-1"><a class="header-anchor" href="#题-局部最小-无序二分"><span>题（局部最小，无序二分）</span></a></h3><ul><li>局部最小定义：n[i-1] &lt; n[i] &lt; n[i+1]，无需数组，相邻数一定不相等。问：是否最好情况能少于O(n)</li><li>答案：少于O(n)，那应该是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\\log_2N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>了，应该是二分的思路。无序二分 <ul><li>例如 0-&gt;1 下降，n-2 -&gt; n-1 上升，那么中间必然存在局部最小！</li><li>有点像 罗尔定理、拉格朗日中值定理</li></ul></li><li>总结 如何想出这种答案？甩掉一半原问题与二分问题相同就能二分</li></ul><h2 id="对数器" tabindex="-1"><a class="header-anchor" href="#对数器"><span>对数器</span></a></h2><p>非常好用，可以不依赖线上测试平台就验证算法的准确性</p><p>对数器的概念和使用</p><ol><li>有一个你想要测的方法a</li><li>实现复杂度不好但是容易实现的方法b</li><li>实现一个随机样本产生器</li><li>把方法a和方法b跑相同的随机样本，看看得到的结果是否一样。</li><li>如果有一个随机样本使得比对结果不一致，打印样本进行人工千预，改对方法a或者方法b</li><li>当样本数量很多时比对测试依然正确，可以确定方法a已经正确。</li></ol><h2 id="比较器" tabindex="-1"><a class="header-anchor" href="#比较器"><span>比较器</span></a></h2><p>类似于Cpp重载运算符，或者是Cpp模板里的比较器，Java也有比较器。Cpp也有叫仿函数的</p><p>用于比较自定义结构体或类</p><p>例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(students, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IdAscendingComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(students, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AgeAscendingComparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>约定：</p><ul><li>返回负数时，参数1在前</li><li>返回正数时，参数2在前</li><li>返回零时，顺序无所谓</li></ul><p>使用场景：</p><ul><li>比较器的实质就是重载比较运算符</li><li>比较器可以很好的应用在特殊标准的排序上</li><li>比较器可以很好的应用在根据特殊标准排序的结构上</li></ul><h2 id="从递归到动态规划" tabindex="-1"><a class="header-anchor" href="#从递归到动态规划"><span>从递归到动态规划</span></a></h2><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h3><h4 id="递归行为复杂度估算-——-master公式" tabindex="-1"><a class="header-anchor" href="#递归行为复杂度估算-——-master公式"><span>递归行为复杂度估算 —— master公式</span></a></h4><p>一个递归情景：用递归找数组中的最大值，系统是怎么做的？</p><p>master公式：</p>`,51)),s("p",e,[s("span",m,[s("span",r,[a[12]||(a[12]=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"a"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mi",null,"b")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"}),s("mtext",null,"母问题"),s("mo",null,"="),s("mtext",null,"调用子问题的次数"),s("mo",null,"∗"),s("mtext",null,"子问题的规模是父问题的多少分之一"),s("mo",null,"+"),s("mtext",null,"除子问题外的部分的复杂度"),s("mspace",{linebreak:"newline"}),s("mspace",{linebreak:"newline"}),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"1."),s("mtext",null," "),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,">"),s("mi",null,"d")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"复杂度为"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mi",null,"b")]),s("mi",null,"a")])]),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"2."),s("mtext",null," "),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"="),s("mi",null,"d")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"复杂度为"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",null,"∗"),s("mi",null,"log"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mn",null,"3."),s("mtext",null," "),s("mi",null,"l"),s("mi",null,"o"),s("msub",null,[s("mi",null,"g"),s("mi",null,"b")]),s("mi",null,"a"),s("mo",null,"<"),s("mi",null,"d")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"复杂度为"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"N"),s("mi",null,"d")]),s("mo",{stretchy:"false"},")")])])])])])])]),s("annotation",{encoding:"application/x-tex"},"T(N)= a*T(\\frac Nb)+O(N^d)\\\\ 母问题=调用子问题的次数*子问题的规模是父问题的多少分之一+除子问题外的部分的复杂度\\\\ \\\\ \\begin{cases} & 1.~log_ba>d & 复杂度为O(N^{\\log_ba}) \\\\ & 2.~log_ba=d & 复杂度为O(N^d*\\log(N)) \\\\ & 3.~log_ba<d & 复杂度为O(N^d) \\end{cases} ")])])],-1)),s("span",c,[a[11]||(a[11]=l('<span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">母问题</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">调用子问题的次数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">子问题的规模是父问题的多少分之一</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">除子问题外的部分的复杂度</span></span><span class="mspace newline"></span><span class="mspace newline"></span>',11)),s("span",h,[a[10]||(a[10]=s("span",{class:"strut",style:{height:"4.32em","vertical-align":"-1.91em"}},null,-1)),s("span",o,[s("span",g,[s("span",d,[s("span",y,[s("span",u,[s("span",k,[a[4]||(a[4]=s("span",{style:{top:"-2.2em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎩")])],-1)),s("span",v,[a[1]||(a[1]=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1)),s("span",b,[(t(),n("svg",A,a[0]||(a[0]=[s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1)])))])]),a[5]||(a[5]=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎨")])],-1)),s("span",w,[a[3]||(a[3]=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1)),s("span",f,[(t(),n("svg",x,a[2]||(a[2]=[s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1)])))])]),a[6]||(a[6]=s("span",{style:{top:"-4.6em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎧")])],-1))]),a[7]||(a[7]=s("span",{class:"vlist-s"},"​",-1))]),a[8]||(a[8]=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.85em"}},[s("span")])],-1))])])]),a[9]||(a[9]=l('<span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1.</span><span class="mspace nobreak"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2.</span><span class="mspace nobreak"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3.</span><span class="mspace nobreak"> </span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">复杂度为</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight"><span class="mtight">l</span><span class="mtight">o</span><span class="mtight" style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2302em;"><span style="top:-2.2341em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2659em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">复杂度为</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">))</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord cjk_fallback">复杂度为</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span>',2))])])])])])]),a[14]||(a[14]=s("p",null,"例如在 “递归找数组中的最大值” 的例子中：",-1)),a[15]||(a[15]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mn",null,"2"),s("mo",{separator:"true"},","),s("mi",null,"b"),s("mo",null,"="),s("mn",null,"2"),s("mo",{separator:"true"},","),s("mi",null,"d"),s("mo",null,"="),s("mn",null,"0"),s("mspace",{linebreak:"newline"}),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"2"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"a=2, b=2, d=0\\\\ T(N)=2*T(\\frac N2)+O(1) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1)),a[16]||(a[16]=s("p",null,"如果我不二分而是三分，也符合：",-1)),a[17]||(a[17]=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mn",null,"3"),s("mo",{separator:"true"},","),s("mi",null,"b"),s("mo",null,"="),s("mn",null,"3"),s("mo",{separator:"true"},","),s("mi",null,"d"),s("mo",null,"="),s("mn",null,"0"),s("mspace",{linebreak:"newline"}),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mi",null,"N"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"3"),s("mo",null,"∗"),s("mi",null,"T"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mi",null,"N"),s("mn",null,"3")]),s("mo",{stretchy:"false"},")"),s("mo",null,"+"),s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"a=3, b=3, d=0\\\\ T(N)=3*T(\\frac N3)+O(1) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"b"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"3")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")")])])])])],-1)),a[18]||(a[18]=l('<p>此处不证，《算法导论》有相等时的证明（P53）</p><p>再算一个归并排序：</p><p>a=2，b=2，d=1，与上同理，结果复杂度就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mi>log</mi><mo>⁡</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N\\log N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><h3 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针"><span>双指针</span></a></h3><ul><li><p>滑动窗口，<strong>比较步进 同向双指针</strong></p><ul><li>例如 找最长不重复字符子串</li></ul></li><li><p>归并排序的双指针，<strong>比较步进 同向双指针</strong></p><ul><li>例如 两个容器的两个指针各自遍历</li></ul></li><li><p>无环单链表判断相交双指针，<strong>同速步进 同路径双指针</strong></p></li><li><p>扩张窗口，荷兰过期的双指针/三指针，<strong>遍历指针 + 比较步进 内向双指针</strong></p><ul><li>例如 一个指针正常遍历，另一个指针往后压缩空间/两个指针往中间压缩空间</li></ul></li><li><p>快慢指针，<strong>快慢步进 同向双指针</strong> (例如快指针2步慢指针一步，也是双指针的一种，快慢指针有时不同的定制)</p><ul><li>例如 不知道长度的链表找中间位置</li></ul></li></ul><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h3>',6))])}const N=i(p,[["render",B],["__file","01. 算法 - 基础概念.html.vue"]]),z=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/01.%20%E7%AE%97%E6%B3%95%20-%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html","title":"算法","lang":"zh-CN","frontmatter":{"description":"算法 算法 位运算 二进制及其基本位运算科普 …… 对数器 比较器 排序 选择排序 冒泡排序 插入排序 归并排序 快速排序 堆排序 计数排序 基数排序 排序大总结 & 避坑指南 二分及其扩展 递归到动态规划 递归行为 Master公式 汉诺塔问题 生成全子序列 生成全排列 很多题目的对数器方法都是递归 动态规划 从左往右尝试模型 区间范围尝试模型 样本...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/01.%20%E7%AE%97%E6%B3%95%20-%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"算法 算法 位运算 二进制及其基本位运算科普 …… 对数器 比较器 排序 选择排序 冒泡排序 插入排序 归并排序 快速排序 堆排序 计数排序 基数排序 排序大总结 & 避坑指南 二分及其扩展 递归到动态规划 递归行为 Master公式 汉诺塔问题 生成全子序列 生成全排列 很多题目的对数器方法都是递归 动态规划 从左往右尝试模型 区间范围尝试模型 样本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"算法","slug":"算法","link":"#算法","children":[{"level":2,"title":"指标","slug":"指标","link":"#指标","children":[{"level":3,"title":"复杂度","slug":"复杂度","link":"#复杂度","children":[]},{"level":3,"title":"稳定性","slug":"稳定性","link":"#稳定性","children":[]}]},{"level":2,"title":"位运算","slug":"位运算","link":"#位运算","children":[{"level":3,"title":"题（找两出现奇数次的数）","slug":"题-找两出现奇数次的数","link":"#题-找两出现奇数次的数","children":[]}]},{"level":2,"title":"二分","slug":"二分","link":"#二分","children":[{"level":3,"title":"题（局部最小，无序二分）","slug":"题-局部最小-无序二分","link":"#题-局部最小-无序二分","children":[]}]},{"level":2,"title":"对数器","slug":"对数器","link":"#对数器","children":[]},{"level":2,"title":"比较器","slug":"比较器","link":"#比较器","children":[]},{"level":2,"title":"从递归到动态规划","slug":"从递归到动态规划","link":"#从递归到动态规划","children":[{"level":3,"title":"递归","slug":"递归","link":"#递归","children":[{"level":4,"title":"递归行为复杂度估算 —— master公式","slug":"递归行为复杂度估算-——-master公式","link":"#递归行为复杂度估算-——-master公式","children":[]}]},{"level":3,"title":"双指针","slug":"双指针","link":"#双指针","children":[]},{"level":3,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]}]}]}],"git":{},"readingTime":{"minutes":6.97,"words":2092},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/01. 算法 - 基础概念.md","excerpt":"\\n<ul>\\n<li>算法\\n<ul>\\n<li>位运算\\n<ul>\\n<li>二进制及其基本位运算科普</li>\\n<li>……</li>\\n</ul>\\n</li>\\n<li>对数器</li>\\n<li>比较器</li>\\n<li>排序\\n<ul>\\n<li>选择排序</li>\\n<li>冒泡排序</li>\\n<li>插入排序</li>\\n<li>归并排序</li>\\n<li>快速排序</li>\\n<li>堆排序</li>\\n<li>计数排序</li>\\n<li>基数排序</li>\\n<li>排序大总结 &amp; 避坑指南</li>\\n</ul>\\n</li>\\n<li>二分及其扩展</li>\\n</ul>\\n</li>\\n<li>递归到动态规划\\n<ul>\\n<li>递归行为\\n<ul>\\n<li>Master公式</li>\\n<li>汉诺塔问题</li>\\n<li>生成全子序列</li>\\n<li>生成全排列</li>\\n<li>很多题目的对数器方法都是递归</li>\\n</ul>\\n</li>\\n<li>动态规划\\n<ul>\\n<li>从左往右尝试模型</li>\\n<li>区间范围尝试模型</li>\\n<li>样本对应尝试模型</li>\\n<li>业务限制尝试模型</li>\\n</ul>\\n</li>\\n<li>贪心</li>\\n</ul>\\n</li>\\n<li>数据结构\\n<ul>\\n<li>链表</li>\\n<li>队列</li>\\n<li>栈</li>\\n<li>哈希表的使用</li>\\n<li>有序表的使用</li>\\n<li>堆\\n<ul>\\n<li>堆的原理和实现</li>\\n<li>最大线段重合问题</li>\\n<li>合并K个有序链表</li>\\n</ul>\\n</li>\\n<li>加强堆</li>\\n<li>前缀树</li>\\n<li>二叉树</li>\\n<li>并查集</li>\\n<li>图</li>\\n<li>哈夫曼树</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/01. 算法 - 基础概念.md","value":{"title":"01. 算法 - 基础概念","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/01. 算法 - 基础概念.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{N as comp,z as data};
