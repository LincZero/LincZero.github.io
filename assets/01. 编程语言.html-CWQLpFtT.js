import{_ as s,e as a,g as t,o as l}from"./app-EuS-Ookm.js";const e={};function n(h,i){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="rust入门" tabindex="-1"><a class="header-anchor" href="#rust入门"><span>Rust入门</span></a></h1><p>参考：</p><ul><li><p><a href="https://www.bilibili.com/video/BV16B4y1q7Sq" target="_blank" rel="noopener noreferrer">【B站】【2023】最新最全Rust编程语言入门教程</a>。进度：p1~21e+27</p><ul><li><mark>笔者评价：屎一样的教程，广告很多，不建议选择</mark></li><li>自带在线笔记：http://www.go-edu.cn/categories/Rust%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</li></ul></li><li><p>rust官网：rust-lang.org/zh-CN/tools/install</p></li></ul><h2 id="为什么要使用-rust-语言" tabindex="-1"><a class="header-anchor" href="#为什么要使用-rust-语言"><span>为什么要使用 Rust 语言？</span></a></h2><p>Rust 是一种快速、高并发、安全且具有授权性的编程语言，最初由 Graydon Hoare 于 2006 年创造和发布。现在它是一种开源语言，主要由 <strong>Mozilla</strong> 团队和许多开源社区成员共同维护和开发。它的目标是 C 和 C++ 占主导地位的系统编程领域。</p><ul><li>Rust 的目标 <ul><li>Rust 语言瞄准的是工业系统的霸者 - C++ 语言。</li></ul></li><li>Rust 的优势 <ul><li>Rust 是一门编译语言，因此它的效率可以媲美 C 或 C++ 语言。</li><li>由于<strong>没有 GC</strong> (垃圾回收机制)，所以是安全度极高的语言。</li></ul></li><li>Rust 可以做什么？ <ol><li>可以使用 Rust 编写<strong>操作系统</strong>、<strong>游戏引擎</strong>和许多性能关键型应用程序。</li><li>可以使用它构建高性能的 <strong>Web</strong> 应用程序、网络服务，类型安全的数据库对象关系映射（Object Relational Mapping，ORM）库，还可以将程序编译成 <strong>WebAssembly</strong> 在 Web 浏览器上运行。</li><li>Rust 还在为<strong>嵌入式</strong>平台构建安全性优先的实时应用程序方面获得了相当大的关注。<br> 例如 Arm 基于 Cortex-M 的微控制器，目前该领域主要由 C 语言主导。Rust 因其广泛的适用性在多个领域都表现良好。</li></ol></li></ul><h2 id="rust-环境搭建" tabindex="-1"><a class="header-anchor" href="#rust-环境搭建"><span>Rust 环境搭建</span></a></h2><h3 id="mac" tabindex="-1"><a class="header-anchor" href="#mac"><span>Mac</span></a></h3><p>在 Mac 环境下，利用 brew 包管理，十分方便</p><ol><li><p>brew upgrade</p></li><li><p>brew install rustup-init</p></li><li><p>进入/opt/homebrew/Cellar/rustup-init/1.24.3/bin</p></li><li><p>运行 rustup-init</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) Proceed with installation (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) //默认安装</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) Customize installation //自定义安装</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) Cancel installation	//取消安装</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">我选的是第</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 个。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>屏幕出现成功字样 Rust is installed now. Great!</p></li><li><p>最后执行这句，让环境变量生效 source $HOME/.cargo/env</p></li><li><p>再打开终端</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -V</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">屏幕输出</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  rustc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.59.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>出现上面的提示，证明你的 Rust 环境安装好了。</p></li></ol><h3 id="软件" tabindex="-1"><a class="header-anchor" href="#软件"><span>软件</span></a></h3><p>可以使用趁手的编辑（jetbrains 系列可以安装 rust 插件，或者是 vscode 的 rust 插件都可以）</p><p>其他补充：</p><p>配置vscode进行rust debug,在.vscode/launch.json中复制如下:</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用 IntelliSense 了解相关属性。 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 悬停以查看现有属性的描述。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.2.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;configurations&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">			&quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lldb&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          	&quot;request&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;launch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          	&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Custom launch&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          	&quot;program&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${workspaceRoot}/bool07/target/debug/bool07&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          	&quot;cwd&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${workspaceRoot}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hello-rust" tabindex="-1"><a class="header-anchor" href="#hello-rust"><span>Hello_rust</span></a></h2><p>先创建一个目录 hello_rust，并创建 rust 源代码文件，<code>hello.rs</code></p><p>源码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// @file hello.rs</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { 				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// fn: Rust 语言使用 fn 关键字定义函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    						// main(): 该函数是一个预定义的主函数，充当 Rust 程序的入口点，每个语言都会有自己的 main() 函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello Rust!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// println!(): 是 Rust 语言中的一个 预定义的宏。它用于将传递给它的参数输出到 标准输出。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    						// 注：Rust 语言中的 宏 都会以 感叹号 ( ! ) 结尾。以后看到以 ! 结尾的类似函数调用，都是 宏调用。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    						// Rust 提供了一个功能非常强大的 宏 体系，通过这些 宏，我们可以很方便的进行 元编程。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    						// Rust 中的 宏 有点类似于 函数。可以将 宏 理解为 函数的加强版。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rustc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello.rs</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	# 生成hello为名字的二进制的可执行文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./hello</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# 然后会打印：Hello Rust!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="也可以用包管理来创建工程" tabindex="-1"><a class="header-anchor" href="#也可以用包管理来创建工程"><span>也可以用包管理来创建工程</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cargo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> folderName</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会自动生成文件夹与以下结构：</p><ul><li>folderName/ <ul><li>src/ <ul><li>main.rs</li></ul></li><li>Cargo.toml， 一些工程配置</li></ul></li></ul>`,27)]))}const p=s(e,[["render",n],["__file","01. 编程语言.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html","title":"Rust入门","lang":"zh-CN","frontmatter":{"description":"Rust入门 参考： 【B站】【2023】最新最全Rust编程语言入门教程。进度：p1~21e+27 笔者评价：屎一样的教程，广告很多，不建议选择 自带在线笔记：http://www.go-edu.cn/categories/Rust%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/ rust官网：rust-lang.org/z...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust入门"}],["meta",{"property":"og:description","content":"Rust入门 参考： 【B站】【2023】最新最全Rust编程语言入门教程。进度：p1~21e+27 笔者评价：屎一样的教程，广告很多，不建议选择 自带在线笔记：http://www.go-edu.cn/categories/Rust%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/ rust官网：rust-lang.org/z..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/01. 编程语言/01. 编程语言.md","excerpt":"\\n<p>参考：</p>\\n<ul>\\n<li>\\n<p><a href=\\"https://www.bilibili.com/video/BV16B4y1q7Sq\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【B站】【2023】最新最全Rust编程语言入门教程</a>。进度：p1~21e+27</p>\\n<ul>\\n<li><mark>笔者评价：屎一样的教程，广告很多，不建议选择</mark></li>\\n<li>自带在线笔记：http://www.go-edu.cn/categories/Rust%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</li>\\n</ul>\\n</li>\\n<li>\\n<p>rust官网：rust-lang.org/zh-CN/tools/install</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/01. 编程语言/01. 编程语言.md","value":{"title":"01. 编程语言","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/01. 编程语言/01. 编程语言.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,k as data};
