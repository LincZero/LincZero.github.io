import{_ as a,c as l,e as n,o as t}from"./app-DQC9V0Al.js";const i="/assets/overview-DPMFr4p2.png",p="/assets/syscall-hook-VkbrGfDn.png",s="/assets/hook-overview-B4rgQTxs.png",h="/assets/clang-6ktgWBg5.png",r="/assets/go-D9kSj5Gx.png",o="/assets/map-architecture-D_u2m4lk.png",c="/assets/helper-DXX3veSD.png",d="/assets/tailcall-DlWFrkue.png",B="/assets/geocities-HDAd049J.png",k="/assets/kernel-arch-BQxKplWP.png",g="/assets/bcc-BsSOBWw2.png",F="/assets/bpftrace-Bqenp3Qt.png",b="/assets/go-D9kSj5Gx.png",P="/assets/libbpf-B5WrGavy.png",u="/assets/eBPF_animated_bg-DpK2OsMh.gif",f={};function v(A,e){return t(),l("div",null,e[0]||(e[0]=[n('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="what-is-ebpf" tabindex="-1"><a class="header-anchor" href="#what-is-ebpf"><span>What is eBPF?</span></a></h1><h2 id="什么是-ebpf" tabindex="-1"><a class="header-anchor" href="#什么是-ebpf"><span>什么是 eBPF？</span></a></h2><blockquote><h4 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h4></blockquote><blockquote><p>eBPF 是一项革命性技术，起源于 Linux 内核，可以在特权上下文（例如操作系统内核）中运行沙盒程序，应用程序开发人员可以运行 eBPF 程序以在运行时向操作系统添加其他功能。 它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。</p></blockquote><blockquote><h4 id="为什么需要" tabindex="-1"><a class="header-anchor" href="#为什么需要"><span>为什么需要</span></a></h4></blockquote><blockquote><p>操作系统的一些特点：</p><ul><li>由于内核具有监督和控制整个系统的特权能力，操作系统一直是<strong>实现可观察性、安全性和网络功能的理想场所</strong></li><li>但操作系统内核由于其核心地位，<strong>对稳定性和安全性要求较高，演化难度较大</strong>。因此，与外部实现的功能相比，<strong>操作系统级别的创新率传统上较低</strong></li></ul><p><strong>而eBPF 从根本上改变了这个公式</strong></p></blockquote><blockquote><h4 id="使用逻辑" tabindex="-1"><a class="header-anchor" href="#使用逻辑"><span>使用逻辑</span></a></h4></blockquote><img src="'+i+'" alt="Overview" style="zoom:80%;"><p>图的文本结构化*：</p><ul><li><p>用例</p><ul><li>现代网络、安全、可观察性和追踪</li></ul></li><li><p>用户空间</p><ul><li>Projects：BCC (包括 python Go C Lua)、cilium、Faico、Katran、PIXIE</li><li>SDKs：bcc、bpftrace、GO、C++、Rust</li></ul></li><li><p>核心：核心运行时</p><ul><li>检验器 &amp; 运行时编译</li><li>映射表</li><li>核心帮助API</li><li>Linux、Windows 系统运行时</li></ul></li></ul><blockquote><h4 id="用例" tabindex="-1"><a class="header-anchor" href="#用例"><span>用例</span></a></h4></blockquote><p>如今，eBPF 被广泛用于驱动各种用例：</p><ul><li>在现代数据中心和云原生环境中提供高性能网络和负载平衡，以低开销提取细粒度的安全可观察性数据</li><li>帮助应用程序开发人员跟踪应用程序，提供性能故障排除、预防性应用程序和容器运行时安全实施等方面的见解、</li></ul><p>可能性是无限的，eBPF 所释放的创新才刚刚开始。</p><blockquote><h4 id="什么是-ebpf-io" tabindex="-1"><a class="header-anchor" href="#什么是-ebpf-io"><span>什么是 eBPF.io？</span></a></h4></blockquote><p>eBPF.io 是每个人就 eBPF 主题进行学习和协作的地方。 eBPF是一个开放的社区，每个人都可以参与和分享。无论您是想阅读 eBPF 的初步介绍、查找进一步的阅读材料，还是迈出成为主要 eBPF 项目贡献者的第一步，eBPF.io 都将一路为您提供帮助。</p><blockquote><h4 id="ebpf-和-bpf-代表什么" tabindex="-1"><a class="header-anchor" href="#ebpf-和-bpf-代表什么"><span>eBPF 和 BPF 代表什么？</span></a></h4></blockquote><p>BPF 最初代表伯克利数据包过滤器，但现在 eBPF（扩展 BPF）可以做的不仅仅是数据包过滤，这个缩写词不再有意义。eBPF 现在被认为是一个独立的术语，不代表任何东西。</p><p>在 Linux 源代码中，术语 BPF 仍然存在，并且在工具和文档中，术语 BPF 和 eBPF 通常可以互换使用。最初的BPF有时被称为cBPF（经典BPF）以区别于eBPF。</p><blockquote><h4 id="蜜蜂叫什么名字" tabindex="-1"><a class="header-anchor" href="#蜜蜂叫什么名字"><span>蜜蜂叫什么名字？</span></a></h4></blockquote><p>蜜蜂是 eBPF 的官方标志，最初由 Vadim Shchekoldin 创建。在第一届 eBPF 峰会上进行了投票，这只蜜蜂被命名为 eBee。 （有关徽标可接受用途的详细信息，请参阅 Linux 基金会品牌指南。）</p><h2 id="ebpf简介" tabindex="-1"><a class="header-anchor" href="#ebpf简介"><span>eBPF简介</span></a></h2><p>以下章节是对 eBPF 的快速介绍。如果您想了解有关 eBPF 的更多信息，请参阅 eBPF 和 XDP 参考指南。无论您是希望构建 eBPF 程序的开发人员，还是有兴趣利用使用 eBPF 的解决方案，了解基本概念和架构都非常有用。</p><h3 id="钩子概述" tabindex="-1"><a class="header-anchor" href="#钩子概述"><span>钩子概述</span></a></h3><p>eBPF 程序是<strong>事件驱动</strong>的，当内核或应用程序通过某个挂钩点时运行。预定义的挂钩包括系统调用、函数入口/出口、内核跟踪点、网络事件等。</p><img src="'+p+'" alt="Syscall hook" style="zoom:80%;"><p>如果不存在满足特定需求的预定义挂钩，则可以创建 <code>内核探针 (kprobe)</code> 或 <code>用户探针 (uprobe)</code> 来将 eBPF 程序附加到<strong>内核或用户应用程序中的几乎任何位置</strong></p><img src="'+s+'" alt="Hook overview" style="zoom:80%;"><h3 id="ebpf程序是如何编写的" tabindex="-1"><a class="header-anchor" href="#ebpf程序是如何编写的"><span>eBPF程序是如何编写的？</span></a></h3><p>两种方式：（更详细的分类和说明见 <a href="##%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%93%BE">#开发工具链</a>）</p><ul><li><p><strong>在很多场景中，eBPF 并不直接使用，而是通过 Cilium、bcc 或 bpftrace 等项目间接使用</strong>。</p><p>这些项目在 eBPF 之上提供抽象，不需要直接编写程序，而是提供指定基于意图的定义的能力，这些定义是然后用eBPF实现。</p></li><li><p><strong>但如果不存在更高级别的抽象，则需要直接编写程序</strong>。</p><p>Linux 内核期望 eBPF 程序以字节码的形式加载。虽然直接编写字节码当然是可能的，但更常见的开发实践是利用 LLVM 等编译器套件将伪 C 代码编译为 eBPF 字节码。</p><img src="'+h+'" alt="Clang" style="zoom:80%;"></li></ul><h3 id="加载器和验证架构" tabindex="-1"><a class="header-anchor" href="#加载器和验证架构"><span>加载器和验证架构</span></a></h3><p>当识别出所需的钩子后，可以使用 bpf 系统调用将 eBPF 程序加载到 Linux 内核中。这通常是使用可用的 eBPF 库之一来完成的。 下一节将介绍可用的开发工具链。</p><img src="'+r+'" alt="Go" style="zoom:80%;"><p>当程序加载到 Linux 内核中时，它在附加到请求的钩子之前要经过两个步骤：</p><h4 id="验证器" tabindex="-1"><a class="header-anchor" href="#验证器"><span>验证器</span></a></h4><p>验证步骤确保 eBPF 程序可以安全运行。它验证程序是否满足多个条件，例如：</p><ul><li>加载 eBPF 程序的进程拥有所需的能力（特权）。除非启用非特权 eBPF，否则只有特权进程才能加载 eBPF 程序。</li><li>该程序不会崩溃或以其他方式损害系统。</li><li>程序总是运行到完成（即程序不会永远处于循环中，从而阻止进一步的处理）。</li></ul><h4 id="即时编译" tabindex="-1"><a class="header-anchor" href="#即时编译"><span>即时编译</span></a></h4><p>即时 (JIT) 编译步骤将程序的通用字节码转换为机器特定的指令集，以优化程序的执行速度。 这使得 eBPF 程序的运行效率与本机编译的内核代码或作为内核模块加载的代码一样高效。</p><h3 id="ebpf-映射" tabindex="-1"><a class="header-anchor" href="#ebpf-映射"><span>eBPF 映射</span></a></h3><p>eBPF 程序的一个重要方面是共享收集的信息和存储状态的能力。为此，eBPF 程序可以利用 eBPF 映射的概念来存储和检索各种数据结构中的数据。 eBPF 映射可以通过系统调用从 eBPF 程序以及用户空间中的应用程序访问。</p><img src="'+o+'" alt="Map architecture" style="zoom:80%;"><p>以下是支持的映射类型的不完整列表，以帮助您了解数据结构的多样性。对于各种地图类型，可以使用共享版本和每个 CPU 版本。</p><ul><li>Hash tables, Arrays 哈希表、数组</li><li>LRU (Least Recently Used) LRU (最近最少使用)</li><li>Ring Buffer 环形缓冲器</li><li>Stack Trace 堆栈跟踪</li><li>LPM (Longest Prefix match) LPM (最长前缀匹配)</li><li>...</li></ul><h3 id="助手调用" tabindex="-1"><a class="header-anchor" href="#助手调用"><span>助手调用</span></a></h3><p>eBPF 程序无法调用任意内核函数。允许这样做会将 eBPF 程序绑定到特定的内核版本，并使程序的兼容性变得复杂。相反，eBPF 程序可以对辅助函数进行函数调用，辅助函数是内核提供的众所周知且稳定的 API。</p><img src="'+c+'" alt="Helper" style="zoom:80%;"><p>可用的助手调用集在不断发展。可用助手调用的示例：</p><ul><li>生成随机数</li><li>获取当前时间和日期</li><li>eBPF 地图访问</li><li>获取进程/cgroup 上下文</li><li>操纵网络数据包和转发逻辑</li></ul><h3 id="尾部和函数调用" tabindex="-1"><a class="header-anchor" href="#尾部和函数调用"><span>尾部和函数调用</span></a></h3><p>eBPF 程序可以通过尾部和函数调用的概念进行组合。函数调用允许在 eBPF 程序中定义和调用函数。尾部调用可以调用并执行另一个 eBPF 程序并替换执行上下文，类似于常规进程的 execve() 系统调用的操作方式。</p><img src="'+d+'" alt="Tail call" style="zoom:80%;"><h3 id="ebpf安全" tabindex="-1"><a class="header-anchor" href="#ebpf安全"><span>eBPF安全</span></a></h3><blockquote><p><em>With great power there must also come great responsibility. 权力越大，责任也越大。</em></p></blockquote><p>eBPF 是一项极其强大的技术，现在运行在许多关键软件基础设施组件的核心。在eBPF的开发过程中，当考虑将eBPF纳入Linux内核时，eBPF的安全性是最重要的方面。 eBPF 的安全性通过多个层面来确保：</p><h4 id="所需权限" tabindex="-1"><a class="header-anchor" href="#所需权限"><span>所需权限</span></a></h4><p>除非启用非特权 eBPF，否则所有打算将 eBPF 程序加载到 Linux 内核中的进程都必须在特权模式（root）下运行，或者需要 CAP_BPF 功能。这意味着不受信任的程序无法加载 eBPF 程序。</p><p>如果启用非特权 eBPF，非特权进程可以加载某些 eBPF 程序，但功能集会减少，并且对内核的访问受到限制。</p><h4 id="verifier-验证器" tabindex="-1"><a class="header-anchor" href="#verifier-验证器"><span>Verifier 验证器</span></a></h4><p>如果允许进程加载eBPF程序，则所有程序仍然通过eBPF验证器。 eBPF验证器保证了程序本身的安全。这意味着，例如：</p><ul><li>程序经过验证以确保它们始终运行完成，例如eBPF 程序可能永远不会阻塞或永远处于循环中。 eBPF 程序可能包含所谓的有界循环，但只有当验证者可以确保循环包含保证为真的退出条件时，该程序才会被接受。</li><li>程序不得使用任何未初始化的变量或越界访问内存。</li><li>程序必须符合系统的大小要求。不可能加载任意大的 eBPF 程序。</li><li>程序必须具有有限的复杂性。验证者将评估所有可能的执行路径，并且必须能够在配置的复杂性上限范围内完成分析。</li></ul><p>验证器是一种安全工具，用于检查程序是否可以安全运行。它不是检查程序正在做什么的安全工具。</p><h4 id="hardening" tabindex="-1"><a class="header-anchor" href="#hardening"><span>Hardening</span></a></h4><p>成功完成验证后，eBPF 程序将根据程序是从特权进程还是非特权进程加载来运行强化过程。该步骤包括：</p><ul><li><p><strong>程序执行保护</strong></p><p>保存 eBPF 程序的内核内存受到保护并变为只读。如果由于任何原因，无论是内核错误还是恶意操纵，试图修改 eBPF 程序，内核将崩溃，而不是允许它继续执行损坏/操纵的程序。</p></li><li><p><strong>针对 Spectre 的缓解措施</strong></p><p>据推测，CPU 可能会错误预测分支并留下可通过侧通道提取的可观察到的副作用。举几个例子：eBPF 程序屏蔽内存访问，以便将瞬态指令下的访问重定向到受控区域，验证器还遵循仅在推测执行下可访问的程序路径，并且 JIT 编译器在尾调用无法转换为直接调用的情况下发出 Retpolines 。</p></li><li><p><strong>常量致盲</strong></p><p>代码中的所有常量都被致盲，以防止 JIT 喷射攻击。这可以防止攻击者将可执行代码作为常量注入，在存在另一个内核错误的情况下，可能允许攻击者跳转到 eBPF 程序的内存部分来执行代码。</p></li></ul><h4 id="抽象运行时上下文" tabindex="-1"><a class="header-anchor" href="#抽象运行时上下文"><span>抽象运行时上下文</span></a></h4><p>eBPF 程序无法直接访问任意内核内存。对程序上下文之外的数据和数据结构的访问必须通过 eBPF 助手进行访问。这保证了数据访问的一致性，并使任何此类访问都受到 eBPF 程序特权的约束。</p><p>例如运行中的eBPF程序在保证安全的情况下，可以修改某些数据结构的数据。 eBPF 程序不能随机修改内核中的数据结构。</p><h2 id="为什么选择ebpf" tabindex="-1"><a class="header-anchor" href="#为什么选择ebpf"><span>为什么选择eBPF？</span></a></h2><h3 id="可编程性的力量" tabindex="-1"><a class="header-anchor" href="#可编程性的力量"><span>可编程性的力量</span></a></h3><p>让我们从一个类比开始。你还记得地球城吗？ 20 年前，网页几乎都是用静态标记语言 (HTML) 编写的。网页基本上是一个带有能够显示它的应用程序（浏览器）的文档。看看今天的网页，网页已经成为成熟的应用程序，基于网络的技术已经取代了绝大多数用需要编译的语言编写的应用程序。是什么促成了这种演变？</p><img src="'+B+'" alt="Geocities" style="zoom:80%;"><p>简而言之，就是通过引入 JavaScript 实现可编程性。它开启了一场巨大的革命，导致浏览器演变成几乎独立的操作系统。</p><p>为什么会发生进化？程序员不再受制于运行特定浏览器版本的用户。必要的构建块的可用性并没有让标准机构相信需要新的 HTML 标签，而是将底层浏览器的创新步伐与顶部运行的应用程序脱钩。这当然有点过于简单化了，因为 HTML 确实随着时间的推移而发展并为成功做出了贡献，但 HTML 本身的发展还不够。</p><p>在使用这个示例并将其应用到 eBPF 之前，让我们先看一下在介绍 JavaScript 时至关重要的几个关键方面：</p><ul><li><strong>安全</strong>：不受信任的代码在用户的浏览器中运行。这是通过对 JavaScript 程序进行沙箱处理并抽象对浏览器数据的访问来解决的。</li><li><strong>持续交付</strong>：程序逻辑的演变必须是可能的，而无需不断发布新的浏览器版本。这是通过提供足以构建任意逻辑的正确低级构建块来解决的。</li><li><strong>性能</strong>：必须以最小的开销提供可编程性。通过引入即时 (JIT) 编译器解决了这个问题</li></ul><p>对于上述所有内容，出于同样的原因，可以在 eBPF 中找到精确的对应项</p><h3 id="ebpf对linux内核的影响" tabindex="-1"><a class="header-anchor" href="#ebpf对linux内核的影响"><span>eBPF对Linux内核的影响</span></a></h3><p>现在让我们回到 eBPF。为了了解 eBPF 对 Linux 内核的可编程性影响，有助于对 Linux 内核的架构以及它如何与应用程序和硬件交互有一个高层次的了解</p><img src="'+k+'" alt="Kernel architecture" style="zoom:80%;"><blockquote><p>这图好像前面出现过，前面说这图时是说哪里可以设置钩子</p><img src="'+s+'" alt="Hook overview" style="zoom:80%;"></blockquote><p><strong>Linux内核的主要目的是抽象硬件或虚拟硬件并提供一致的API（系统调用）</strong>，允许应用程序运行和共享资源。</p><p>为了实现这一目标，需要维护大量的子系统和层来分配这些职责。每个子系统通常允许某种级别的配置来满足用户的不同需求。</p><p>如果无法配置所需的行为，则需要更改内核，从历史上看有两个选项，而eBPF提供了第三个选项：</p><ul><li><p>Native Support 原生支持</p><ol><li><p>更改内核源代码并说服 Linux 内核社区需要进行更改。</p></li><li><p>等待数年新内核版本才能成为商品。</p></li></ol></li><li><p>Kernel Module 内核模块</p><ol><li>编写内核模块</li><li>定期修复它，因为每个内核版本都可能会破坏它</li><li>由于缺乏安全边界而存在损坏 Linux 内核的风险</li></ol></li><li><p>eBPF (新)</p><ul><li><p>允许对 Linux 内核的行为进行重新编程，而无需更改内核源代码或加载内核模块。</p><p>在许多方面，这与 JavaScript 和其他脚本语言如何解锁已经变得难以或昂贵的系统的演变非常相似。</p></li></ul></li></ul><h2 id="开发工具链" tabindex="-1"><a class="header-anchor" href="#开发工具链"><span>开发工具链</span></a></h2><p>存在多个开发工具链来协助 eBPF 程序的开发和管理。它们都满足用户的不同需求：</p><h3 id="iovisor-bcc-python-go-lua-cpp" tabindex="-1"><a class="header-anchor" href="#iovisor-bcc-python-go-lua-cpp"><span>iovisor/BCC (python go lua cpp)</span></a></h3><p>BCC 是一个框架，使用户能够编写嵌入了 eBPF 程序的 python 程序。</p><p>该框架主要针对涉及应用程序和系统分析/跟踪的用例，其中 eBPF 程序用于收集统计数据或生成事件，而用户空间中的对应程序则收集数据并以人类可读的形式显示数据。运行python程序将生成eBPF字节码并将其加载到内核中。</p><img src="'+g+'" alt="bcc" style="zoom:80%;"><h3 id="iovisor-bpftrace" tabindex="-1"><a class="header-anchor" href="#iovisor-bpftrace"><span>iovisor/bpftrace</span></a></h3><p>这个bpftrace和BCC的仓库作者都是iovisor</p><p><strong>bpftrace 是一种适用于 Linux eBPF 的高级跟踪语言</strong> (一种专用的语言)，可在半新的 Linux 内核 (4.x) 中使用。bpftrace 语言受到 awk、C 和前身跟踪器（例如 DTrace 和 SystemTap）的启发。</p><p>bpftrace 使用 <strong>LLVM</strong> 作为后端将脚本编译为 eBPF 字节码，并利用 BCC 与 Linux eBPF 子系统以及现有的 Linux 跟踪功能进行交互：<code>内核动态跟踪 (kprobes)</code>、<code>用户级动态跟踪 (uprobes)</code> 和跟踪点。</p><img src="'+F+'" alt="bpftrace" style="zoom:80%;"><h3 id="ebpf-go-库" tabindex="-1"><a class="header-anchor" href="#ebpf-go-库"><span>eBPF Go 库</span></a></h3><p>eBPF Go 库提供了一个通用的 eBPF 库，它将获取 eBPF 字节码的过程与 eBPF 程序的加载和管理解耦。 eBPF 程序通常是通过编写更高级的语言来创建的，然后使用 clang/LLVM 编译器编译为 eBPF 字节码。</p><img src="'+b+'" alt="Go" style="zoom:80%;"><h3 id="libbpf-c-c-库" tabindex="-1"><a class="header-anchor" href="#libbpf-c-c-库"><span>libbpf C/C++ 库</span></a></h3><p><strong>libbpf</strong> 库是一个基于 C/C++ 的通用 eBPF 库，有助于将 clang/LLVM 编译器生成的 eBPF 目标文件加载解耦到内核中，并通过提供易于使用的库 API 来抽象与 BPF 系统调用的交互应用程序。</p><img src="'+P+'" alt="Libbpf" style="zoom:80%;"><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>话说前面那图里显示的好像不止这几种。有：</p><ul><li>Projects：BCC、cilium、Faico、Katran、PIXIE</li><li>SDKs：bcc、bpftrace、GO、C++、Rust?</li></ul><img src="'+i+`" alt="Overview" style="zoom:80%;"><h2 id="进一步阅读" tabindex="-1"><a class="header-anchor" href="#进一步阅读"><span>进一步阅读</span></a></h2><p>详细见收集资料的笔记（README.md）</p><h1 id="lab补充" tabindex="-1"><a class="header-anchor" href="#lab补充"><span>Lab补充</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><h3 id="了解-ebpf" tabindex="-1"><a class="header-anchor" href="#了解-ebpf"><span>了解 eBPF</span></a></h3><p>BPF 是一项起源于 Linux 内核的革命性技术，可以在操作系统内核中运行沙盒程序。它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。</p><h3 id="内核的-javascript" tabindex="-1"><a class="header-anchor" href="#内核的-javascript"><span>内核的 JavaScript</span></a></h3><p>eBPF 是一种内核技术，允许在运行时动态扩展 Linux 内核的功能。</p><p>您可以将其视为 JavaScript 之于 Web 浏览器：JavaScript 允许您将回调附加到 DOM 中的事件，以便为您的网页带来动态功能。以类似的方式，eBPF 允许挂钩内核事件并在触发这些事件时扩展其逻辑！</p><p>![img](./01. What is eBPF.assets/ebpf_javascript.png)</p><p>例如，当一个进程创建一个新进程时，它会调用 <code>execve</code> 系统调用，这通常会导致在内核中调度新进程的执行。使用 eBPF，您可以将程序附加到该事件并使用它对其进行操作，例如用于可观察性。</p><h3 id="可观察性示例" tabindex="-1"><a class="header-anchor" href="#可观察性示例"><span>可观察性示例</span></a></h3><p>在前面的示例中，我们可以将以下 eBPF 代码附加到 <code>execve</code> 挂钩：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> syscall__ret_execve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pt_regs </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> comm_event event </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		.pid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> bpf_get_current_pid_tgid</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		.type </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TYPE_RETURN,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	bpf_get_current_comm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">comm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">comm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	comm_events</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">perf_submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ctx, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">event，</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(event));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将允许观察计划的进程并将命令的 PID 存储到结构中（在本例中为性能缓冲区），稍后可以由用户空间程序检索该结构以用于可观察性目的（JSON 流、指标等）。</p><h3 id="验证和-jit-编译" tabindex="-1"><a class="header-anchor" href="#验证和-jit-编译"><span>验证和 JIT 编译</span></a></h3><p>为什么 eBPF 比现有的扩展内核（例如内核模块）的解决方案更好？除了它允许采用事件驱动的方法进行内核开发之外，它本质上也更加安全。</p><p>这是因为 eBPF 程序在注入内核时会被验证。</p><img src="`+u+'" alt="img" style="zoom:50%;"><p>第一步之后，eBPF 代码可以被 JIT 编译为机器代码，然后附加到内核挂钩和 eBPF 映射。当这些钩子被事件触发时，代码就会被执行。</p><h3 id="您将在本课程中做什么" tabindex="-1"><a class="header-anchor" href="#您将在本课程中做什么"><span>您将在本课程中做什么</span></a></h3><p>为了获得 eBPF 的第一手经验，在本实验中我们将：</p><ul><li>构建并使用 <code>opensnoop</code> ，这是一个基于 eBPF 的工具，每当打开文件时都会报告</li><li>使用 <code>readelf</code> 将 BPF 目标文件与其源代码进行比较</li><li>使用 <code>bpftool</code> 查看您的工具如何加载到内核中</li><li>在源代码中添加额外的“hello world”式跟踪</li><li>再次构建并运行它以查看您自己的自定义 eBPF 跟踪 我们使用的示例工具 <code>opensnoop</code> 是 BCC 项目中基于 eBPF 的工具集合之一。</li></ul><h3 id="有关-ebpf-的更多信息" tabindex="-1"><a class="header-anchor" href="#有关-ebpf-的更多信息"><span>有关 eBPF 的更多信息</span></a></h3><p>如前所述，如果您想更深入地了解 eBPF：请获取 Liz Rice 所著的《What is eBPF》一书，其中更详细地描述了此 <code>opensnoop</code> 示例中发生的情况，并查看 eBPF.io。</p><h2 id="实操" tabindex="-1"><a class="header-anchor" href="#实操"><span>实操</span></a></h2><p>见 “Try the Lab” 笔记</p>',136)]))}const y=a(f,[["render",v],["__file","01. What is eBPF.html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E5%AE%98%E7%BD%91/01.%20What%20is%20eBPF.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 What is eBPF? 什么是 eBPF？ 是什么 eBPF 是一项革命性技术，起源于 Linux 内核，可以在特权上下文（例如操作系统内核）中运行沙盒程序，应用程序开发人员可以运行 eBPF 程序以在运行时向操作系统添加其他功能。 它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。 为什么需要 操作系统的一些特点...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E5%AE%98%E7%BD%91/01.%20What%20is%20eBPF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 What is eBPF? 什么是 eBPF？ 是什么 eBPF 是一项革命性技术，起源于 Linux 内核，可以在特权上下文（例如操作系统内核）中运行沙盒程序，应用程序开发人员可以运行 eBPF 程序以在运行时向操作系统添加其他功能。 它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。 为什么需要 操作系统的一些特点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"What is eBPF?","slug":"what-is-ebpf","link":"#what-is-ebpf","children":[{"level":2,"title":"什么是 eBPF？","slug":"什么是-ebpf","link":"#什么是-ebpf","children":[]},{"level":2,"title":"eBPF简介","slug":"ebpf简介","link":"#ebpf简介","children":[{"level":3,"title":"钩子概述","slug":"钩子概述","link":"#钩子概述","children":[]},{"level":3,"title":"eBPF程序是如何编写的？","slug":"ebpf程序是如何编写的","link":"#ebpf程序是如何编写的","children":[]},{"level":3,"title":"加载器和验证架构","slug":"加载器和验证架构","link":"#加载器和验证架构","children":[{"level":4,"title":"验证器","slug":"验证器","link":"#验证器","children":[]},{"level":4,"title":"即时编译","slug":"即时编译","link":"#即时编译","children":[]}]},{"level":3,"title":"eBPF 映射","slug":"ebpf-映射","link":"#ebpf-映射","children":[]},{"level":3,"title":"助手调用","slug":"助手调用","link":"#助手调用","children":[]},{"level":3,"title":"尾部和函数调用","slug":"尾部和函数调用","link":"#尾部和函数调用","children":[]},{"level":3,"title":"eBPF安全","slug":"ebpf安全","link":"#ebpf安全","children":[{"level":4,"title":"所需权限","slug":"所需权限","link":"#所需权限","children":[]},{"level":4,"title":"Verifier 验证器","slug":"verifier-验证器","link":"#verifier-验证器","children":[]},{"level":4,"title":"Hardening","slug":"hardening","link":"#hardening","children":[]},{"level":4,"title":"抽象运行时上下文","slug":"抽象运行时上下文","link":"#抽象运行时上下文","children":[]}]}]},{"level":2,"title":"为什么选择eBPF？","slug":"为什么选择ebpf","link":"#为什么选择ebpf","children":[{"level":3,"title":"可编程性的力量","slug":"可编程性的力量","link":"#可编程性的力量","children":[]},{"level":3,"title":"eBPF对Linux内核的影响","slug":"ebpf对linux内核的影响","link":"#ebpf对linux内核的影响","children":[]}]},{"level":2,"title":"开发工具链","slug":"开发工具链","link":"#开发工具链","children":[{"level":3,"title":"iovisor/BCC (python go lua cpp)","slug":"iovisor-bcc-python-go-lua-cpp","link":"#iovisor-bcc-python-go-lua-cpp","children":[]},{"level":3,"title":"iovisor/bpftrace","slug":"iovisor-bpftrace","link":"#iovisor-bpftrace","children":[]},{"level":3,"title":"eBPF Go 库","slug":"ebpf-go-库","link":"#ebpf-go-库","children":[]},{"level":3,"title":"libbpf C/C++ 库","slug":"libbpf-c-c-库","link":"#libbpf-c-c-库","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"进一步阅读","slug":"进一步阅读","link":"#进一步阅读","children":[]}]},{"level":1,"title":"Lab补充","slug":"lab补充","link":"#lab补充","children":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"了解 eBPF","slug":"了解-ebpf","link":"#了解-ebpf","children":[]},{"level":3,"title":"内核的 JavaScript","slug":"内核的-javascript","link":"#内核的-javascript","children":[]},{"level":3,"title":"可观察性示例","slug":"可观察性示例","link":"#可观察性示例","children":[]},{"level":3,"title":"验证和 JIT 编译","slug":"验证和-jit-编译","link":"#验证和-jit-编译","children":[]},{"level":3,"title":"您将在本课程中做什么","slug":"您将在本课程中做什么","link":"#您将在本课程中做什么","children":[]},{"level":3,"title":"有关 eBPF 的更多信息","slug":"有关-ebpf-的更多信息","link":"#有关-ebpf-的更多信息","children":[]}]},{"level":2,"title":"实操","slug":"实操","link":"#实操","children":[]}]}],"git":{},"readingTime":{"minutes":17,"words":5099},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/官网/01. What is eBPF.md","excerpt":"\\n<h1>目录</h1>\\n<h1>What is eBPF?</h1>\\n<h2>什么是 eBPF？</h2>\\n<blockquote>\\n<h4>是什么</h4>\\n</blockquote>\\n<blockquote>\\n<p>eBPF 是一项革命性技术，起源于 Linux 内核，可以在特权上下文（例如操作系统内核）中运行沙盒程序，应用程序开发人员可以运行 eBPF  程序以在运行时向操作系统添加其他功能。\\n它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。</p>\\n</blockquote>\\n<blockquote>\\n<h4>为什么需要</h4>\\n</blockquote>\\n<blockquote>\\n<p>操作系统的一些特点：</p>\\n<ul>\\n<li>由于内核具有监督和控制整个系统的特权能力，操作系统一直是<strong>实现可观察性、安全性和网络功能的理想场所</strong></li>\\n<li>但操作系统内核由于其核心地位，<strong>对稳定性和安全性要求较高，演化难度较大</strong>。因此，与外部实现的功能相比，<strong>操作系统级别的创新率传统上较低</strong></li>\\n</ul>\\n<p><strong>而eBPF 从根本上改变了这个公式</strong></p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/官网/01. What is eBPF.md","value":{"title":"01. What is eBPF","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/官网/01. What is eBPF.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{y as comp,E as data};
