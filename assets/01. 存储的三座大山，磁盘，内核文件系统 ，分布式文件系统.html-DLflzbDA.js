import{_ as p,c as o,a,e,b as s,o as c,r as l}from"./app-Dk2XlTVI.js";const i={};function u(r,n){const t=l("Mermaid");return c(),o("div",null,[n[4]||(n[4]=a('<h1 id="存储的三座大山-磁盘-内核文件系统-分布式文件系统" tabindex="-1"><a class="header-anchor" href="#存储的三座大山-磁盘-内核文件系统-分布式文件系统"><span>存储的三座大山，磁盘，内核文件系统 ，分布式文件系统</span></a></h1><h2 id="存储的三座大山" tabindex="-1"><a class="header-anchor" href="#存储的三座大山"><span>存储的三座大山</span></a></h2><p>存储的三座大山：</p><ul><li>磁盘</li><li>内核文件系统</li><li>以及分布式文件系统</li></ul><h3 id="三层结构与三种方式-三山夹两盆" tabindex="-1"><a class="header-anchor" href="#三层结构与三种方式-三山夹两盆"><span>三层结构与三种方式，三山夹两盆</span></a></h3>',5)),e(t,{id:"mermaid-29",code:"eJxLL0osyFAIceLiyq0sLszRT0kr1s/JT1fQ1X02befTPf2GVnllualP22a+WLzj+ewZEEFdXV2u54sbgXxc2oysytKKrRSKUhNT9MuLMktSgTK6XM+mtT/Zve355t3Pd8+3Sq0oMdEHEsbxL/bPfNne82zG+qdtrc8W7Hg+q+XJ3ran/euf7F76smHWi/3twQEu3s/mLn3aP+NZx4TnU1Y869j+rKERqA5oakpmUVlqEdh4XE4CysD0ILsA7lhjq+KClGwkEwCPaItv"}),n[5]||(n[5]=a(`<p>（注脚：FS是FileSystem文件系统，VFS是VirtualFS虚拟文件系统，BIO即Buffer IO而不是Block IO）</p><h3 id="根据数据结构进行优化" tabindex="-1"><a class="header-anchor" href="#根据数据结构进行优化"><span>根据数据结构进行优化</span></a></h3><h4 id="读写模式" tabindex="-1"><a class="header-anchor" href="#读写模式"><span>读写模式</span></a></h4><ul><li>日志：写多读少</li><li>写作软件：读写一样</li><li>Blog：读多写少</li></ul><h4 id="数据组织结构" tabindex="-1"><a class="header-anchor" href="#数据组织结构"><span>数据组织结构</span></a></h4><ul><li>数组，字符。格式统一</li><li>存储 Blog，5000个字符</li><li>地图数据存储</li><li>AIGC</li></ul><h2 id="三种裸盘读写方式" tabindex="-1"><a class="header-anchor" href="#三种裸盘读写方式"><span>三种裸盘读写方式</span></a></h2><ol><li>应用层 NVME</li><li>内核里面 读写NVME</li><li>SPDK</li></ol><h3 id="方式1-应用层-nvme-不使用文件系统-写裸盘" tabindex="-1"><a class="header-anchor" href="#方式1-应用层-nvme-不使用文件系统-写裸盘"><span>方式1：应用层 NVME（不使用文件系统，写裸盘）</span></a></h3><h4 id="写demo" tabindex="-1"><a class="header-anchor" href="#写demo"><span>写demo</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/nvme_ioctl.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打开fd</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/nvme0n1&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 准备内存空间</span>
    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;malloc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 准备参数</span>
    <span class="token keyword">struct</span> <span class="token class-name">nvme_user_io</span> io<span class="token punctuation">;</span>
    io<span class="token punctuation">.</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span>
    io<span class="token punctuation">.</span>slba <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    io<span class="token punctuation">.</span>nblocks <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 从buffer写入</span>
    io<span class="token punctuation">.</span>opcode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// write</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NVME_IOCTL_SDUBMIT_IO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>io<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;ioctl\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;write successfully\\n&quot;</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 写完后可以这样查看是否写入成功了：</span>
    <span class="token comment">// 命令: cat /dev/nvme0n1</span>
    <span class="token comment">// 输出: ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读demo" tabindex="-1"><a class="header-anchor" href="#读demo"><span>读demo</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// 在前面main()里面的后面追加：</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 读至buffer</span>
    io<span class="token punctuation">.</span>opcode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// read</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NVME_IOCTL_SDUBMIT_IO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>io<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;ioctl\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;read successfully: %s\\n&quot;</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式2-内核方式" tabindex="-1"><a class="header-anchor" href="#方式2-内核方式"><span>方式2：内核方式</span></a></h3><h4 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>demo</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/bio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/blkdev.h&gt;</span></span>

<span class="token comment">// 内核里对 /dev/nvme0n1 进行读写</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DISK_NAME</span> <span class="token string">&quot;/dev/nvme0n1&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECTOR_SIZE</span> <span class="token expression"><span class="token number">4096</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">king_nvme_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">block_device</span><span class="token operator">*</span> bdev<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token operator">*</span> page<span class="token punctuation">;</span>
    
    <span class="token comment">// 写</span>
    <span class="token keyword">struct</span> <span class="token class-name">bio</span><span class="token operator">*</span> bio <span class="token operator">=</span> <span class="token function">bio_alloc</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> BIO_MAX_VECS<span class="token punctuation">,</span> REQ_OP_WRITE<span class="token punctuation">,</span> GFP_NOIO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bio<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 分配页</span>
    page <span class="token operator">=</span> <span class="token function">alooc_page</span><span class="token punctuation">(</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token function">page_address</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bio_add_page</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> page<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">submit_bio_wait</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">bio_put</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">king_nvme_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">block_device</span><span class="token operator">*</span> bdev<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token operator">*</span> page<span class="token punctuation">;</span>
    
    <span class="token comment">// 读</span>
    <span class="token keyword">struct</span> <span class="token class-name">bio</span><span class="token operator">*</span> bio <span class="token operator">=</span> <span class="token function">bio_alloc</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> BIO_MAX_VECS<span class="token punctuation">,</span> REQ_OP_READ<span class="token punctuation">,</span> GFP_NOIO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bio<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 分配页</span>
    page <span class="token operator">=</span> <span class="token function">alooc_page</span><span class="token punctuation">(</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token function">page_address</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bio_add_page</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token function">virt_to_page</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">submit_bio_wait</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__free_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">bio_put</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// insmod kernel_nvme.ko</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">king_nvme_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;king_nvme_init\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 准备buffer</span>
    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>SECTOR_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;kmalloc failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 说一下这个数据结构。网卡叫 struct net_device, 磁盘叫 struct block_device</span>
    <span class="token keyword">struct</span> <span class="token class-name">block_device</span><span class="token operator">*</span> bdev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    bdev <span class="token operator">=</span> <span class="token function">blkdev_get_by_path</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/nvme0n1&quot;</span><span class="token punctuation">,</span> FMOOD_READ <span class="token operator">|</span> FMOOD_WRITE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>bdev<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;blkev_get_by_path failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 写入</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">&quot;KING ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">king_nvme_write</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> DISK_SECTOR_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;write successfully: %s\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 读取</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> DISK_SECTOR_SIZE<span class="token punctuation">)</span>
    ret <span class="token operator">=</span> <span class="token function">king_nvme_wead</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> DISK_SECTOR_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;read successfully: %s\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// rmmod kernel_nvme.ko</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> __exit <span class="token function">king_nvme_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;king_nvme_exit\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">module_init</span><span class="token punctuation">(</span>king_nvme_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>king_nvme_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token comment">// $ insmod kernel_nvme.ko	# 要先执行这个，才会进入init函数</span>
<span class="token comment">// $ rmmod kernel_nvme.ko</span>
<span class="token comment">// $ dmesg	# 查看日志打印，可以分别看到输出打印</span>
<span class="token comment">// $ cat /dev/nvme0n1  # 查看是否写入成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注脚：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 说一下这个数据结构。网卡叫 struct net_device, 磁盘叫 struct block_device</span>
<span class="token comment">// 然后这里带k的是内核函数? 如printk，kmalloc。其中printk可以通过dmesg来查看输出日志</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式3-spdk方式" tabindex="-1"><a class="header-anchor" href="#方式3-spdk方式"><span>方式3：SPDK方式</span></a></h3><h4 id="先从dpdk说起" tabindex="-1"><a class="header-anchor" href="#先从dpdk说起"><span>先从DPDK说起</span></a></h4><p>捋一下一些相关概念</p>`,21)),s("ul",null,[s("li",null,[n[0]||(n[0]=s("p",null,"DPDK：消除网卡->内核->用户态的两次拷贝变为一次拷贝，旁路接管网卡的",-1)),e(t,{id:"mermaid-137",code:"eJxLL0osyFAIceJKLCjQ1S3IL86sUEgsyNTV1eV62tb6bMGO53snPu1d+LS3/8W6dc8WdHDp6qZkFpWlFoFUQOS4APAVHyg="})]),n[1]||(n[1]=s("li",null,[s("p",null,"RDMA：一个网络协议，两个机器同步")],-1)),n[2]||(n[2]=s("li",null,[s("p",null,"内核网络")],-1)),n[3]||(n[3]=s("li",null,[s("p",null,"eBpf：一种Hook技术")],-1))]),n[6]||(n[6]=a('<h3 id="比较三种方式" tabindex="-1"><a class="header-anchor" href="#比较三种方式"><span>比较三种方式</span></a></h3><p>三种方式都是裸盘读写方式，都可以去做文件系统</p><h2 id="内核文件系统与-spdk-文件系统" tabindex="-1"><a class="header-anchor" href="#内核文件系统与-spdk-文件系统"><span>内核文件系统与 SPDK 文件系统</span></a></h2><h2 id="实现媲美-ext4-读写的文件系统" tabindex="-1"><a class="header-anchor" href="#实现媲美-ext4-读写的文件系统"><span>实现媲美 EXT4 读写的文件系统</span></a></h2><h2 id="bio-与-nvme-落盘" tabindex="-1"><a class="header-anchor" href="#bio-与-nvme-落盘"><span>BIO 与 NVME 落盘</span></a></h2>',5))])}const d=p(i,[["render",u],["__file","01. 存储的三座大山，磁盘，内核文件系统 ，分布式文件系统.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/01.%20%E5%AD%98%E5%82%A8%E7%9A%84%E4%B8%89%E5%BA%A7%E5%A4%A7%E5%B1%B1%EF%BC%8C%E7%A3%81%E7%9B%98%EF%BC%8C%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%20%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html","title":"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统","lang":"zh-CN","frontmatter":{"description":"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统 存储的三座大山 存储的三座大山： 磁盘 内核文件系统 以及分布式文件系统 三层结构与三种方式，三山夹两盆 （注脚：FS是FileSystem文件系统，VFS是VirtualFS虚拟文件系统，BIO即Buffer IO而不是Block IO） 根据数据结构进行优化 读写模式 日志：写多读少 写作软件：...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/01.%20%E5%AD%98%E5%82%A8%E7%9A%84%E4%B8%89%E5%BA%A7%E5%A4%A7%E5%B1%B1%EF%BC%8C%E7%A3%81%E7%9B%98%EF%BC%8C%E5%86%85%E6%A0%B8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%20%EF%BC%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统"}],["meta",{"property":"og:description","content":"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统 存储的三座大山 存储的三座大山： 磁盘 内核文件系统 以及分布式文件系统 三层结构与三种方式，三山夹两盆 （注脚：FS是FileSystem文件系统，VFS是VirtualFS虚拟文件系统，BIO即Buffer IO而不是Block IO） 根据数据结构进行优化 读写模式 日志：写多读少 写作软件：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"存储的三座大山，磁盘，内核文件系统 ，分布式文件系统","slug":"存储的三座大山-磁盘-内核文件系统-分布式文件系统","link":"#存储的三座大山-磁盘-内核文件系统-分布式文件系统","children":[{"level":2,"title":"存储的三座大山","slug":"存储的三座大山","link":"#存储的三座大山","children":[{"level":3,"title":"三层结构与三种方式，三山夹两盆","slug":"三层结构与三种方式-三山夹两盆","link":"#三层结构与三种方式-三山夹两盆","children":[]},{"level":3,"title":"根据数据结构进行优化","slug":"根据数据结构进行优化","link":"#根据数据结构进行优化","children":[{"level":4,"title":"读写模式","slug":"读写模式","link":"#读写模式","children":[]},{"level":4,"title":"数据组织结构","slug":"数据组织结构","link":"#数据组织结构","children":[]}]}]},{"level":2,"title":"三种裸盘读写方式","slug":"三种裸盘读写方式","link":"#三种裸盘读写方式","children":[{"level":3,"title":"方式1：应用层 NVME（不使用文件系统，写裸盘）","slug":"方式1-应用层-nvme-不使用文件系统-写裸盘","link":"#方式1-应用层-nvme-不使用文件系统-写裸盘","children":[{"level":4,"title":"写demo","slug":"写demo","link":"#写demo","children":[]},{"level":4,"title":"读demo","slug":"读demo","link":"#读demo","children":[]}]},{"level":3,"title":"方式2：内核方式","slug":"方式2-内核方式","link":"#方式2-内核方式","children":[{"level":4,"title":"demo","slug":"demo","link":"#demo","children":[]}]},{"level":3,"title":"方式3：SPDK方式","slug":"方式3-spdk方式","link":"#方式3-spdk方式","children":[{"level":4,"title":"先从DPDK说起","slug":"先从dpdk说起","link":"#先从dpdk说起","children":[]}]},{"level":3,"title":"比较三种方式","slug":"比较三种方式","link":"#比较三种方式","children":[]}]},{"level":2,"title":"内核文件系统与 SPDK 文件系统","slug":"内核文件系统与-spdk-文件系统","link":"#内核文件系统与-spdk-文件系统","children":[]},{"level":2,"title":"实现媲美 EXT4 读写的文件系统","slug":"实现媲美-ext4-读写的文件系统","link":"#实现媲美-ext4-读写的文件系统","children":[]},{"level":2,"title":"BIO 与 NVME 落盘","slug":"bio-与-nvme-落盘","link":"#bio-与-nvme-落盘","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.15,"words":946},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/Linux文件系统/01. 存储的三座大山，磁盘，内核文件系统 ，分布式文件系统.md","excerpt":"\\n<h2>存储的三座大山</h2>\\n<p>存储的三座大山：</p>\\n<ul>\\n<li>磁盘</li>\\n<li>内核文件系统</li>\\n<li>以及分布式文件系统</li>\\n</ul>\\n<h3>三层结构与三种方式，三山夹两盆</h3>\\n<p>（注脚：FS是FileSystem文件系统，VFS是VirtualFS虚拟文件系统，BIO即Buffer IO而不是Block IO）</p>\\n<h3>根据数据结构进行优化</h3>\\n<h4>读写模式</h4>\\n<ul>\\n<li>日志：写多读少</li>\\n<li>写作软件：读写一样</li>\\n<li>Blog：读多写少</li>\\n</ul>\\n<h4>数据组织结构</h4>","autoDesc":true}');export{d as comp,v as data};
