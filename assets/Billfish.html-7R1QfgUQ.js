import{_ as l,c as i,e as t,o as a}from"./app-DnpufS1x.js";const n="/assets/image-20220712194809407-CK5d9oza.png",s="/assets/image-20220712195402763-_CDFRwVP.png",h={};function p(r,e){return a(),i("div",null,e[0]||(e[0]=[t('<h1 id="billfish吐槽" tabindex="-1"><a class="header-anchor" href="#billfish吐槽"><span>Billfish吐槽</span></a></h1><h2 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式"><span>三种模式</span></a></h2><p>![three patten](Billfish.assets/three patten.png)</p><h3 id="索引模式" tabindex="-1"><a class="header-anchor" href="#索引模式"><span>索引模式</span></a></h3><ol><li>索引模式创建快捷方式的方式来管理 利：可以直接用文件资源管理器来看分类后了的目录 弊：创建大量快捷方式使得路径冗余。</li><li>索引模式主结构层次分离 利：分离后可在不破坏原路径结构的情况下随意修改资源库的路径结构 （但这个利不是很明显。不分离也是可以做得到的，数据库式管理就没有的主结构，多弄一个层次结构树来映射就行，虽然我原来弄那个也没有做这个功能） 弊：无法反向影响资源库的路径结构，无法对原资源路径的层次进行优化。我猜测这与索引模式有关，复制和剪切模式下应该都是可以影响的。</li></ol><h3 id="剪切模式" tabindex="-1"><a class="header-anchor" href="#剪切模式"><span>剪切模式</span></a></h3><p>也是以数据库形式存储的。 按道理应该也是不需要创建那一大堆的快捷方式的，我用剪切方式测试了一部分文件，耗时相差不大，也是1s大概一百多份左右，（同盘剪切耗时也几乎没有）。推测主要耗时应该也不是创建那堆快捷方式。但也没道理是操控数据库的，数据库没那么慢，就算不是固态。</p><p>后来我查看了一下生成的.bf文件夹 —— 好家伙，几乎图片都生成了缩略图 _ 然后刚刚也说到了测试了剪切方式，验证了下，剪切是可以修改目录结构的</p><h2 id="缺乏-自定义属性-属性单层" tabindex="-1"><a class="header-anchor" href="#缺乏-自定义属性-属性单层"><span>缺乏 “自定义属性”，属性单层</span></a></h2><p>~~所有属性归类为标签，且标签只有一层。~~即你无法分别通过画家名、风格、人物特色来分别制定标签</p><p>后来发现有，在标签管理 &gt; 标签分类里有，但是分类后的标签组是不能上色的，区分度很低</p><p>Eagle在这方面做得好一点，“标签群组” 功能是能给标签组分别上色的</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h2><p>素材分析太慢、居然还不提供无图显示的模式（卡顿或仅根据文件名搜索时会用到）</p><p>没有超多图管理的概念，感觉管理我那10w张的图还是有点费劲的，否则不应该直接解析所有图的缩略图的</p><h2 id="缺乏-图集管理-的概念" tabindex="-1"><a class="header-anchor" href="#缺乏-图集管理-的概念"><span>缺乏 “图集管理” 的概念</span></a></h2><p>没有图集的概念，只有图的概念。对于漫画图集这种东西的管理非常费劲，只能对散乱的图进行管理</p><h2 id="一些缺失的功能" tabindex="-1"><a class="header-anchor" href="#一些缺失的功能"><span>一些缺失的功能</span></a></h2><p>我的图库管理大概是这样的：几千个图集，每个图集有几十到上百张图 (类似于漫画序列)，然后我现在库里有10w张图。 但其实更多时候，我只需要对图集文件夹进行管理，而不是对于单张图片进行管理，图集中的所有图片共享同一组标签。</p><ul><li>文件夹拖拽问题：只有左侧文件树能拖拽，中间部分无法拖拽（只能拖拽图片）</li><li>无法对文件夹进行标签的筛选 比如我想筛选所有黑白漫画文件夹</li><li>弄通过文件夹对里面的图片进行批量增加标签，但不能批量删除某个标签。 例如：一旦多选几十张图片赋予标签时，不小心赋予错了，删除就很难受，要一张一张删除</li><li>没有图集的概念，应该将图集文件夹作为一个小的概念 基本单元是图，用来管理图集是非常难受的</li></ul><h2 id="损耗缺点" tabindex="-1"><a class="header-anchor" href="#损耗缺点"><span>损耗缺点</span></a></h2><p>资源损耗大</p><p>还一卡一卡的</p><p>图：加载文件时</p><p><img src="'+n+'" alt="image-20220712194809407" loading="lazy"></p><p>图：素材分析时</p><p><img src="'+s+'" alt="image-20220712195402763" loading="lazy"></p>',27)]))}const c=l(h,[["render",p],["__file","Billfish.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/02.%20SubjectAndKnowledge/12.%20%E7%AE%A1%E7%90%86%E5%AD%A6%E3%80%81%E5%88%86%E7%B1%BB%E5%AD%A6/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/Plane%20%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/Billfish.html","title":"Billfish吐槽","lang":"zh-CN","frontmatter":{"description":"Billfish吐槽 三种模式 ![three patten](Billfish.assets/three patten.png) 索引模式 索引模式创建快捷方式的方式来管理 利：可以直接用文件资源管理器来看分类后了的目录 弊：创建大量快捷方式使得路径冗余。 索引模式主结构层次分离 利：分离后可在不破坏原路径结构的情况下随意修改资源库的路径结构 （但这...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/02.%20SubjectAndKnowledge/12.%20%E7%AE%A1%E7%90%86%E5%AD%A6%E3%80%81%E5%88%86%E7%B1%BB%E5%AD%A6/%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6/Plane%20%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86/Billfish.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Billfish吐槽"}],["meta",{"property":"og:description","content":"Billfish吐槽 三种模式 ![three patten](Billfish.assets/three patten.png) 索引模式 索引模式创建快捷方式的方式来管理 利：可以直接用文件资源管理器来看分类后了的目录 弊：创建大量快捷方式使得路径冗余。 索引模式主结构层次分离 利：分离后可在不破坏原路径结构的情况下随意修改资源库的路径结构 （但这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Billfish吐槽\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Billfish吐槽","slug":"billfish吐槽","link":"#billfish吐槽","children":[{"level":2,"title":"三种模式","slug":"三种模式","link":"#三种模式","children":[{"level":3,"title":"索引模式","slug":"索引模式","link":"#索引模式","children":[]},{"level":3,"title":"剪切模式","slug":"剪切模式","link":"#剪切模式","children":[]}]},{"level":2,"title":"缺乏 “自定义属性”，属性单层","slug":"缺乏-自定义属性-属性单层","link":"#缺乏-自定义属性-属性单层","children":[]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[]},{"level":2,"title":"缺乏 “图集管理” 的概念","slug":"缺乏-图集管理-的概念","link":"#缺乏-图集管理-的概念","children":[]},{"level":2,"title":"一些缺失的功能","slug":"一些缺失的功能","link":"#一些缺失的功能","children":[]},{"level":2,"title":"损耗缺点","slug":"损耗缺点","link":"#损耗缺点","children":[]}]}],"git":{},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/管理系统软件/Plane 图片管理/Billfish.md","excerpt":"\\n<h2>三种模式</h2>\\n<p>![three patten](Billfish.assets/three patten.png)</p>\\n<h3>索引模式</h3>\\n<ol>\\n<li>索引模式创建快捷方式的方式来管理\\n利：可以直接用文件资源管理器来看分类后了的目录\\n弊：创建大量快捷方式使得路径冗余。</li>\\n<li>索引模式主结构层次分离\\n利：分离后可在不破坏原路径结构的情况下随意修改资源库的路径结构\\n（但这个利不是很明显。不分离也是可以做得到的，数据库式管理就没有的主结构，多弄一个层次结构树来映射就行，虽然我原来弄那个也没有做这个功能）\\n弊：无法反向影响资源库的路径结构，无法对原资源路径的层次进行优化。我猜测这与索引模式有关，复制和剪切模式下应该都是可以影响的。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/管理系统软件/Plane 图片管理/Billfish.md","value":{"title":"Billfish","path":"MdNote_Public/02. SubjectAndKnowledge/12. 管理学、分类学/管理系统软件/Plane 图片管理/Billfish.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,d as data};
