import{_ as i,c as l,e,o as n}from"./app-CZqDObZ4.js";const a={};function o(d,t){return n(),l("div",null,t[0]||(t[0]=[e('<h1 id="高性能网络设计" tabindex="-1"><a class="header-anchor" href="#高性能网络设计"><span>高性能网络设计</span></a></h1><h2 id="reactor" tabindex="-1"><a class="header-anchor" href="#reactor"><span>reactor</span></a></h2><h2 id="io-uring" tabindex="-1"><a class="header-anchor" href="#io-uring"><span>io_uring</span></a></h2><h3 id="版本问题" tabindex="-1"><a class="header-anchor" href="#版本问题"><span>版本问题</span></a></h3><blockquote><p>io_uring 是 aio，Linux也有aio呢？我之前学boost::asio时还说linux网络还没aio呢……现在终于有了！以前就Window有AIO (IOCP)</p><p>这个是 Linux Kernel 5.1 版本加入的，并在 <strong>5.10 版本</strong>后才得到较好支持，libaio 即将埋入黄土。参考：https://zhuanlan.zhihu.com/p/62682475</p><table><thead><tr><th>发行版本</th><th>发行时间</th><th>内核版本</th><th>发布时间</th></tr></thead><tbody><tr><td>18.04</td><td>2018.04.26</td><td>4.15</td><td>2018.01</td></tr><tr><td>18.10</td><td>2018.10.18</td><td>4.18</td><td>2018.08</td></tr><tr><td>19.04</td><td>2019.04.18</td><td>5.0</td><td>2019.03</td></tr><tr><td>19.10</td><td>2019.10.17</td><td>5.2</td><td>2019.07</td></tr><tr><td>20.04</td><td>2020.04.23</td><td>5.4</td><td>2019.11</td></tr><tr><td>22.04.2 LTS</td><td></td><td>6.2</td><td></td></tr></tbody></table><p>版本对照如上</p><p>以前的Linux操作是：</p><ul><li>网络用epoll</li><li>磁盘操作用多线程</li><li>大文件和数据库用libaio (io_uring 可能代替之)</li></ul><p>不过io_uring现在有系统调用了，但库现在还未调研，不知道支持好不好</p></blockquote><h3 id="同步io、异步、aio" tabindex="-1"><a class="header-anchor" href="#同步io、异步、aio"><span>同步io、异步、aio</span></a></h3><ul><li>同步 <ul><li>read：读-&gt;等</li><li>write</li></ul></li><li>异步 <ul><li>read_request</li><li>write_……</li></ul></li><li>aio <ul><li>aio_read</li></ul></li></ul><p>同步与异步用来处理两者之间的关系</p><h3 id="实现细节" tabindex="-1"><a class="header-anchor" href="#实现细节"><span>实现细节</span></a></h3><h4 id="环形队列" tabindex="-1"><a class="header-anchor" href="#环形队列"><span>环形队列</span></a></h4><p>环形队列实现方式</p><ul><li>链表 <ul><li>好处：插入简单、删除简单</li><li>坏处：有锁（双向链表）</li></ul></li><li>连续内存 (数组)：逻辑环，双指针快 <ul><li>好处：无锁队列、原子操作</li><li>坏处：读写需要拷贝</li></ul></li><li>io_uring 一般选择后者比较多，考量为： <ul><li>链表容易出现很多小的内存，不好</li><li>连续内存的另一个好处是，可以做共享内存的映射</li><li>不过链表法还有另一种分支：手动管理内存，也能避免上面那个缺点，也还不错</li></ul></li></ul><p>两个环：</p><ul><li>submit queue, sq</li><li>complete queue, sq</li><li>这两个环是使用了<strong>mmap映射</strong>的，这两个环是用户空间和内核空间<strong>共享</strong>的，所以取的时候是零拷贝</li></ul><p>操作流程：</p><ol><li>每次读请求，放到sq</li><li>处理完的结果，放到cq</li><li>遍历cq</li></ol><p>io_uring</p><ul><li>liburing：用户态</li><li>3个syscall：内核态</li></ul><h4 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>tcp</span></a></h4><p>tcp</p><ul><li>accept()</li><li>recv()</li><li>send()</li></ul><p>流程</p><ol><li>客户多次连接，多次accept</li><li>recv</li><li>send</li><li>close</li></ol><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><p>略</p><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li><p>fio</p></li><li><p>iops，每秒的io次数</p></li><li><p>iodepth，异步时ring的长度</p></li><li><p>理论</p></li><li><p>代码实现</p></li><li><p>应用场景</p></li><li><p>更好的解决方案</p></li></ul><h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程"><span>协程</span></a></h2><h2 id="用户态协议栈-三部曲-uio-数据帧-协议栈" tabindex="-1"><a class="header-anchor" href="#用户态协议栈-三部曲-uio-数据帧-协议栈"><span>用户态协议栈 三部曲 uio，数据帧，协议栈</span></a></h2><h2 id="透过tcp-server看到网络编程-多线程-网络协议栈" tabindex="-1"><a class="header-anchor" href="#透过tcp-server看到网络编程-多线程-网络协议栈"><span>透过tcp server看到网络编程，多线程，网络协议栈</span></a></h2><h2 id="手撕-epoll-组件" tabindex="-1"><a class="header-anchor" href="#手撕-epoll-组件"><span>手撕 epoll 组件</span></a></h2>',31)]))}const p=i(a,[["render",o],["__file","04. 高性能网络设计.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/04.%20%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1.html","title":"高性能网络设计","lang":"zh-CN","frontmatter":{"description":"高性能网络设计 reactor io_uring 版本问题 io_uring 是 aio，Linux也有aio呢？我之前学boost::asio时还说linux网络还没aio呢……现在终于有了！以前就Window有AIO (IOCP) 这个是 Linux Kernel 5.1 版本加入的，并在 5.10 版本后才得到较好支持，libaio 即将埋入黄土...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/04.%20%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"高性能网络设计"}],["meta",{"property":"og:description","content":"高性能网络设计 reactor io_uring 版本问题 io_uring 是 aio，Linux也有aio呢？我之前学boost::asio时还说linux网络还没aio呢……现在终于有了！以前就Window有AIO (IOCP) 这个是 Linux Kernel 5.1 版本加入的，并在 5.10 版本后才得到较好支持，libaio 即将埋入黄土..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高性能网络设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"高性能网络设计","slug":"高性能网络设计","link":"#高性能网络设计","children":[{"level":2,"title":"reactor","slug":"reactor","link":"#reactor","children":[]},{"level":2,"title":"io_uring","slug":"io-uring","link":"#io-uring","children":[{"level":3,"title":"版本问题","slug":"版本问题","link":"#版本问题","children":[]},{"level":3,"title":"同步io、异步、aio","slug":"同步io、异步、aio","link":"#同步io、异步、aio","children":[]},{"level":3,"title":"实现细节","slug":"实现细节","link":"#实现细节","children":[{"level":4,"title":"环形队列","slug":"环形队列","link":"#环形队列","children":[]},{"level":4,"title":"tcp","slug":"tcp","link":"#tcp","children":[]},{"level":4,"title":"代码","slug":"代码","link":"#代码","children":[]}]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":2,"title":"用户态协议栈 三部曲 uio，数据帧，协议栈","slug":"用户态协议栈-三部曲-uio-数据帧-协议栈","link":"#用户态协议栈-三部曲-uio-数据帧-协议栈","children":[]},{"level":2,"title":"透过tcp server看到网络编程，多线程，网络协议栈","slug":"透过tcp-server看到网络编程-多线程-网络协议栈","link":"#透过tcp-server看到网络编程-多线程-网络协议栈","children":[]},{"level":2,"title":"手撕 epoll 组件","slug":"手撕-epoll-组件","link":"#手撕-epoll-组件","children":[]}]}],"git":{},"readingTime":{"minutes":1.87,"words":560},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/04. 高性能网络设计.md","excerpt":"\\n<h2>reactor</h2>\\n<h2>io_uring</h2>\\n<h3>版本问题</h3>\\n<blockquote>\\n<p>io_uring 是 aio，Linux也有aio呢？我之前学boost::asio时还说linux网络还没aio呢……现在终于有了！以前就Window有AIO (IOCP)</p>\\n<p>这个是 Linux Kernel 5.1 版本加入的，并在 <strong>5.10 版本</strong>后才得到较好支持，libaio 即将埋入黄土。参考：https://zhuanlan.zhihu.com/p/62682475</p>\\n<table>\\n<thead>\\n<tr>\\n<th>发行版本</th>\\n<th>发行时间</th>\\n<th>内核版本</th>\\n<th>发布时间</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>18.04</td>\\n<td>2018.04.26</td>\\n<td>4.15</td>\\n<td>2018.01</td>\\n</tr>\\n<tr>\\n<td>18.10</td>\\n<td>2018.10.18</td>\\n<td>4.18</td>\\n<td>2018.08</td>\\n</tr>\\n<tr>\\n<td>19.04</td>\\n<td>2019.04.18</td>\\n<td>5.0</td>\\n<td>2019.03</td>\\n</tr>\\n<tr>\\n<td>19.10</td>\\n<td>2019.10.17</td>\\n<td>5.2</td>\\n<td>2019.07</td>\\n</tr>\\n<tr>\\n<td>20.04</td>\\n<td>2020.04.23</td>\\n<td>5.4</td>\\n<td>2019.11</td>\\n</tr>\\n<tr>\\n<td>22.04.2 LTS</td>\\n<td></td>\\n<td>6.2</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>版本对照如上</p>\\n<p>以前的Linux操作是：</p>\\n<ul>\\n<li>网络用epoll</li>\\n<li>磁盘操作用多线程</li>\\n<li>大文件和数据库用libaio (io_uring 可能代替之)</li>\\n</ul>\\n<p>不过io_uring现在有系统调用了，但库现在还未调研，不知道支持好不好</p>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/04. 高性能网络设计.md","value":{"title":"04. 高性能网络设计","path":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/04. 高性能网络设计.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
