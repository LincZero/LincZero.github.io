import{_ as s,c as t,b as i,a,d as l,e as r,o,r as c}from"./app-DWLYIH0A.js";const d={},p={href:"https://www.kernel.org/doc/Documentation/networking/vrf.txt",target:"_blank",rel:"noopener noreferrer"};function u(v,n){const e=c("ExternalLinkIcon");return o(),t("div",null,[n[1]||(n[1]=i(`<h1 id="内核虚拟路由转发-vrf-virtual-routing-and-forwarding" tabindex="-1"><a class="header-anchor" href="#内核虚拟路由转发-vrf-virtual-routing-and-forwarding"><span>内核虚拟路由转发 (VRF, Virtual Routing and Forwarding)</span></a></h1><p>Linux 内核的 <strong>虚拟路由转发 (VRF, Virtual Routing and Forwarding)</strong> 是由路由表和一组网络设备组成的路由实例。</p><h2 id="vrf安装" tabindex="-1"><a class="header-anchor" href="#vrf安装"><span>VRF安装</span></a></h2><p><code>Ubuntu</code>默认不包括<code>vrf</code>内核模块，需要额外安装:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> <span class="token function">install</span> linux-headers-4.10.0-14-generic linux-image-extra-4.10.0-14-generic
<span class="token function">reboot</span>
<span class="token function">apt-get</span> <span class="token function">install</span> linux-image-extra-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>
modprobe vrf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vrf示例" tabindex="-1"><a class="header-anchor" href="#vrf示例"><span>VRF示例</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># create vrf device</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> vrf-blue <span class="token builtin class-name">type</span> vrf table <span class="token number">10</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev vrf-blue up

<span class="token comment"># An l3mdev FIB rule directs lookups to the table associated with the device.</span>
<span class="token comment"># A single l3mdev rule is sufficient for all VRFs.</span>
<span class="token comment"># Prior to the v4.8 kernel iif and oif rules are needed for each VRF device:</span>
<span class="token function">ip</span> ru <span class="token function">add</span> oif vrf-blue table <span class="token number">10</span>
<span class="token function">ip</span> ru <span class="token function">add</span> iif vrf-blue table <span class="token number">10</span>

<span class="token comment">#Set the default route for the table (and hence default route for the VRF).</span>
<span class="token function">ip</span> route <span class="token function">add</span> table <span class="token number">10</span> unreachable default

<span class="token comment"># Enslave L3 interfaces to a VRF device.</span>
<span class="token comment"># Local and connected routes for enslaved devices are automatically moved to</span>
<span class="token comment"># the table associated with VRF device. Any additional routes depending on</span>
<span class="token comment"># the enslaved device are dropped and will need to be reinserted to the VRF</span>
<span class="token comment"># FIB table following the enslavement.</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev eth1 master vrf-blue

<span class="token comment"># The IPv6 sysctl option keep_addr_on_down can be enabled to keep IPv6 global</span>
<span class="token comment"># addresses as VRF enslavement changes.</span>
<span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv6.conf.all.keep_addr_on_down</span><span class="token operator">=</span><span class="token number">1</span>

<span class="token comment"># Additional VRF routes are added to associated table.</span>
<span class="token function">ip</span> route <span class="token function">add</span> table <span class="token number">10</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进程绑定vrf" tabindex="-1"><a class="header-anchor" href="#进程绑定vrf"><span>进程绑定VRF</span></a></h2><p><code>Linux</code>进程可以通过在<code>VRF</code>设备上监听<code>socket</code>来绑定VRF：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">setsockopt</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> SOL_SOCKET<span class="token punctuation">,</span> SO_BINDTODEVICE<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TCP &amp; UDP services running in the default VRF context (ie., not bound to any VRF device) can work across all VRF domains by enabling the <code>tcp_l3mdev_accept</code> and <code>udp_l3mdev_accept</code> sysctl options:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_l3mdev_accept</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.udp_l3mdev_accept</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vrf操作" tabindex="-1"><a class="header-anchor" href="#vrf操作"><span>VRF操作</span></a></h2><h3 id="创建vrf" tabindex="-1"><a class="header-anchor" href="#创建vrf"><span>创建VRF</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> dev NAME <span class="token builtin class-name">type</span> vrf table ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询vrf列表" tabindex="-1"><a class="header-anchor" href="#查询vrf列表"><span>查询VRF列表</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ip -d link show type vrf</span>
<span class="token number">16</span>: vrf-blue: <span class="token operator">&lt;</span>NOARP,MASTER,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UP mode DEFAULT group default qlen <span class="token number">1000</span>
    link/ether 9e:9c:8e:7b:32:a4 brd ff:ff:ff:ff:ff:ff promiscuity <span class="token number">0</span>
    vrf table <span class="token number">10</span> addrgenmode eui64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加网卡到vrf" tabindex="-1"><a class="header-anchor" href="#添加网卡到vrf"><span>添加网卡到VRF</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev eth0 master vrf-blue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询vrf邻接表和路由" tabindex="-1"><a class="header-anchor" href="#查询vrf邻接表和路由"><span>查询VRF邻接表和路由</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> neigh show vrf vrf-blue
<span class="token function">ip</span> addr show vrf vrf-blue
<span class="token function">ip</span> <span class="token parameter variable">-br</span> addr show vrf vrf-blue
<span class="token function">ip</span> route show vrf vrf-blue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从vrf中删除网卡" tabindex="-1"><a class="header-anchor" href="#从vrf中删除网卡"><span>从VRF中删除网卡</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev eth0 nomaster
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,24)),a("ul",null,[a("li",null,[a("a",p,[n[0]||(n[0]=l("Linux kernel documentation")),r(e)])])])])}const b=s(d,[["render",u],["__file","06. 内核VRF.html.vue"]]),f=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/06.%20%E5%86%85%E6%A0%B8VRF.html","title":"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding)","lang":"zh-CN","frontmatter":{"description":"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding) Linux 内核的 虚拟路由转发 (VRF, Virtual Routing and Forwarding) 是由路由表和一组网络设备组成的路由实例。 VRF安装 Ubuntu默认不包括vrf内核模块，需要额外安装: VRF示例 进程绑定VRF Linux进程...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/06.%20%E5%86%85%E6%A0%B8VRF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding)"}],["meta",{"property":"og:description","content":"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding) Linux 内核的 虚拟路由转发 (VRF, Virtual Routing and Forwarding) 是由路由表和一组网络设备组成的路由实例。 VRF安装 Ubuntu默认不包括vrf内核模块，需要额外安装: VRF示例 进程绑定VRF Linux进程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"内核虚拟路由转发 (VRF, Virtual Routing and Forwarding)","slug":"内核虚拟路由转发-vrf-virtual-routing-and-forwarding","link":"#内核虚拟路由转发-vrf-virtual-routing-and-forwarding","children":[{"level":2,"title":"VRF安装","slug":"vrf安装","link":"#vrf安装","children":[]},{"level":2,"title":"VRF示例","slug":"vrf示例","link":"#vrf示例","children":[]},{"level":2,"title":"进程绑定VRF","slug":"进程绑定vrf","link":"#进程绑定vrf","children":[]},{"level":2,"title":"VRF操作","slug":"vrf操作","link":"#vrf操作","children":[{"level":3,"title":"创建VRF","slug":"创建vrf","link":"#创建vrf","children":[]},{"level":3,"title":"查询VRF列表","slug":"查询vrf列表","link":"#查询vrf列表","children":[]},{"level":3,"title":"添加网卡到VRF","slug":"添加网卡到vrf","link":"#添加网卡到vrf","children":[]},{"level":3,"title":"查询VRF邻接表和路由","slug":"查询vrf邻接表和路由","link":"#查询vrf邻接表和路由","children":[]}]},{"level":2,"title":"从VRF中删除网卡","slug":"从vrf中删除网卡","link":"#从vrf中删除网卡","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.64,"words":493},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/06. 内核VRF.md","excerpt":"\\n<p>Linux 内核的 <strong>虚拟路由转发 (VRF, Virtual Routing and Forwarding)</strong> 是由路由表和一组网络设备组成的路由实例。</p>\\n<h2>VRF安装</h2>\\n<p><code>Ubuntu</code>默认不包括<code>vrf</code>内核模块，需要额外安装:</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">apt-get</span> <span class=\\"token function\\">install</span> linux-headers-4.10.0-14-generic linux-image-extra-4.10.0-14-generic\\n<span class=\\"token function\\">reboot</span>\\n<span class=\\"token function\\">apt-get</span> <span class=\\"token function\\">install</span> linux-image-extra-<span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">uname</span> <span class=\\"token parameter variable\\">-r</span><span class=\\"token variable\\">)</span></span>\\nmodprobe vrf\\n</code></pre></div>","autoDesc":true}');export{b as comp,f as data};
