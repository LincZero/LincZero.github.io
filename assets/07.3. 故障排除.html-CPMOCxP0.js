import{_ as a,c as i,a as n,d,b as l,e as o,o as t,r}from"./app-CmE7YtTQ.js";const c={},p={href:"http://man7.org/linux/man-pages/man2/setrlimit.2.html",target:"_blank",rel:"noopener noreferrer"};function b(f,e){const s=r("ExternalLinkIcon");return t(),i("div",null,[e[12]||(e[12]=n("h1",{id:"ebpf故障排查",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ebpf故障排查"},[n("span",null,"eBPF故障排查")])],-1)),e[13]||(e[13]=n("h2",{id:"内存限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内存限制"},[n("span",null,"内存限制")])],-1)),n("p",null,[e[1]||(e[1]=n("code",null,"eBPF map",-1)),e[2]||(e[2]=d("使用固定的内存（")),e[3]||(e[3]=n("code",null,"locked memory",-1)),e[4]||(e[4]=d("），但默认非常小，可以通过调用")),n("a",p,[e[0]||(e[0]=d("setrlimit(2)")),l(s)]),e[5]||(e[5]=d("来增大")),e[6]||(e[6]=n("code",null,"RLIMIT_MEMLOCK",-1)),e[7]||(e[7]=d("。如果内存不足，")),e[8]||(e[8]=n("code",null,"bpf_create_map",-1)),e[9]||(e[9]=d("会返回")),e[10]||(e[10]=n("code",null,"EPERM (Operation not permitted)",-1)),e[11]||(e[11]=d("错误。"))]),e[14]||(e[14]=o(`<h2 id="开启bpf-jit" tabindex="-1"><a class="header-anchor" href="#开启bpf-jit"><span>开启BPF JIT</span></a></h2><p>开启方法为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sysctl</span> net/core/bpf_jit_enable<span class="token operator">=</span><span class="token number">1</span>
net.core.bpf_jit_enable <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="elf二进制文件" tabindex="-1"><a class="header-anchor" href="#elf二进制文件"><span>ELF二进制文件</span></a></h2><p><code>eBPF</code>通过<code>LLVM</code>编译器生成的程序就是一个普通的<code>ELF</code>二进制文件，可以使用<code>readelf</code>或者<code>llvm-objdump</code>分析该文件，如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ llvm-objdump <span class="token parameter variable">-h</span> xdp_ddos01_blacklist_kern.o

xdp_ddos01_blacklist_kern.o:    <span class="token function">file</span> <span class="token function">format</span> ELF64-unknown

Sections:
Idx Name          Size      Address          Type
  <span class="token number">0</span>               00000000 0000000000000000
  <span class="token number">1</span> .strtab       00000072 0000000000000000
  <span class="token number">2</span> .text         00000000 0000000000000000 TEXT DATA
  <span class="token number">3</span> xdp_prog      000001b8 0000000000000000 TEXT DATA
  <span class="token number">4</span> .relxdp_prog  00000020 0000000000000000
  <span class="token number">5</span> maps          00000028 0000000000000000 DATA
  <span class="token number">6</span> license       00000004 0000000000000000 DATA
  <span class="token number">7</span> .symtab       000000d8 0000000000000000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提取ebpf-jit代码" tabindex="-1"><a class="header-anchor" href="#提取ebpf-jit代码"><span>提取eBPF-JIT代码</span></a></h2><p>在调试<code>eBPF</code>程序时，有时需要提取<code>eBPF-JIT</code>代码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sysctl</span> <span class="token assign-left variable">net.core.bpf_jit_enable</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出如下所示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> flen=55 proglen=335 pass=4 image=ffffffffa0006820 from=xdp_ddos01_blac pid=13333
 JIT code: 00000000: 55 48 89 e5 48 81 ec 28 02 00 00 48 89 9d d8 fd
 JIT code: 00000010: ff ff 4c 89 ad e0 fd ff ff 4c 89 b5 e8 fd ff ff
 JIT code: 00000020: 4c 89 bd f0 fd ff ff 31 c0 48 89 85 f8 fd ff ff
 JIT code: 00000030: bb 02 00 00 00 48 8b 77 08 48 8b 7f 00 48 89 fa
 JIT code: 00000040: 48 83 c2 0e 48 39 f2 0f 87 e1 00 00 00 48 0f b6
 JIT code: 00000050: 4f 0c 48 0f b6 57 0d 48 c1 e2 08 48 09 ca 48 89
 JIT code: 00000060: d1 48 81 e1 ff 00 00 00 41 b8 06 00 00 00 49 39
 JIT code: 00000070: c8 0f 87 b7 00 00 00 48 81 fa 88 a8 00 00 74 0e
 JIT code: 00000080: b9 0e 00 00 00 48 81 fa 81 00 00 00 75 1a 48 89
 JIT code: 00000090: fa 48 83 c2 12 48 39 f2 0f 87 90 00 00 00 b9 12
 JIT code: 000000a0: 00 00 00 48 0f b7 57 10 bb 02 00 00 00 48 81 e2
 JIT code: 000000b0: ff ff 00 00 48 83 fa 08 75 49 48 01 cf 31 db 48
 JIT code: 000000c0: 89 fa 48 83 c2 14 48 39 f2 77 38 8b 7f 0c 89 7d
 JIT code: 000000d0: fc 48 89 ee 48 83 c6 fc 48 bf 00 9c 24 5f 07 88
 JIT code: 000000e0: ff ff e8 29 cd 13 e1 bb 02 00 00 00 48 83 f8 00
 JIT code: 000000f0: 74 11 48 8b 78 00 48 83 c7 01 48 89 78 00 bb 01
 JIT code: 00000100: 00 00 00 89 5d f8 48 89 ee 48 83 c6 f8 48 bf c0
 JIT code: 00000110: 76 12 13 04 88 ff ff e8 f4 cc 13 e1 48 83 f8 00
 JIT code: 00000120: 74 0c 48 8b 78 00 48 83 c7 01 48 89 78 00 48 89
 JIT code: 00000130: d8 48 8b 9d d8 fd ff ff 4c 8b ad e0 fd ff ff 4c
 JIT code: 00000140: 8b b5 e8 fd ff ff 4c 8b bd f0 fd ff ff c9 c3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>proglen</code>是<code>opcode sequence</code>的长度，<code>flen</code>是<code>bpf insns</code>的个数。可以使用<code>bpf_jit_disasm</code>工具来生成相关的<code>opcodes</code>。</p>`,12))])}const u=a(c,[["render",b],["__file","07.3. 故障排除.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.3.%20%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4.html","title":"eBPF故障排查","lang":"zh-CN","frontmatter":{"description":"eBPF故障排查 内存限制 eBPF map使用固定的内存（locked memory），但默认非常小，可以通过调用setrlimit(2)来增大RLIMIT_MEMLOCK。如果内存不足，bpf_create_map会返回EPERM (Operation not permitted)错误。 开启BPF JIT 开启方法为 ELF二进制文件 eBPF通...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.3.%20%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF故障排查"}],["meta",{"property":"og:description","content":"eBPF故障排查 内存限制 eBPF map使用固定的内存（locked memory），但默认非常小，可以通过调用setrlimit(2)来增大RLIMIT_MEMLOCK。如果内存不足，bpf_create_map会返回EPERM (Operation not permitted)错误。 开启BPF JIT 开启方法为 ELF二进制文件 eBPF通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF故障排查\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF故障排查","slug":"ebpf故障排查","link":"#ebpf故障排查","children":[{"level":2,"title":"内存限制","slug":"内存限制","link":"#内存限制","children":[]},{"level":2,"title":"开启BPF JIT","slug":"开启bpf-jit","link":"#开启bpf-jit","children":[]},{"level":2,"title":"ELF二进制文件","slug":"elf二进制文件","link":"#elf二进制文件","children":[]},{"level":2,"title":"提取eBPF-JIT代码","slug":"提取ebpf-jit代码","link":"#提取ebpf-jit代码","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.15,"words":644},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/07.3. 故障排除.md","excerpt":"\\n<h2>内存限制</h2>\\n<p><code>eBPF map</code>使用固定的内存（<code>locked memory</code>），但默认非常小，可以通过调用<a href=\\"http://man7.org/linux/man-pages/man2/setrlimit.2.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">setrlimit(2)</a>来增大<code>RLIMIT_MEMLOCK</code>。如果内存不足，<code>bpf_create_map</code>会返回<code>EPERM (Operation not permitted)</code>错误。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/07.3. 故障排除.md","value":{"title":"07.3. 故障排除","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/07.3. 故障排除.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,v as data};
