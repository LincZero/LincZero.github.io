import{_ as e,e as d,g as n,o as l}from"./app-DPU1xou8.js";const o={};function i(r,t){return l(),d("div",null,t[0]||(t[0]=[n('<h1 id="_01-泛操作" tabindex="-1"><a class="header-anchor" href="#_01-泛操作"><span>01. 泛操作</span></a></h1><h2 id="常量泛操作" tabindex="-1"><a class="header-anchor" href="#常量泛操作"><span>常量泛操作</span></a></h2><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><blockquote><h4 id="内置常量-头文件climits查看符号常量" tabindex="-1"><a class="header-anchor" href="#内置常量-头文件climits查看符号常量"><span>内置常量 - 头文件climits查看符号常量</span></a></h4></blockquote><p>需要先引入头文件<code>#include&lt;climits&gt;</code>，然后就可以使用里面的符号常量</p><p>符号常量包括最小值和最大值，如需知道宽度，可使用函数<code>sizeof()</code></p><table><thead><tr><th>符号常量</th><th style="text-align:right;">表示对象</th><th>表示含义</th></tr></thead><tbody><tr><td>CHAR_BIT</td><td style="text-align:right;">char</td><td>位数</td></tr><tr><td>CHAT_MAX</td><td style="text-align:right;">char</td><td>最大值</td></tr><tr><td>CHAR_MIN</td><td style="text-align:right;">char</td><td>最小值</td></tr><tr><td><strong>S</strong>CHAR_MAX</td><td style="text-align:right;">signed char</td><td>最大值</td></tr><tr><td><strong>S</strong>CHAR_MIN</td><td style="text-align:right;">signed char</td><td>最小值</td></tr><tr><td><strong>U</strong>CHAR_MAX</td><td style="text-align:right;">unsigned char</td><td>最大值</td></tr><tr><td>SHRT_MAX</td><td style="text-align:right;">short</td><td>最大值</td></tr><tr><td>SHRT_MIN</td><td style="text-align:right;">short</td><td>最小值</td></tr><tr><td><strong>U</strong>SHRT_MAX</td><td style="text-align:right;">unsigned short</td><td>最大值</td></tr><tr><td>INT_MAX</td><td style="text-align:right;">int</td><td>最大值</td></tr><tr><td>INT_MIN</td><td style="text-align:right;">int</td><td>最小值</td></tr><tr><td><strong>U</strong>INT_MAX</td><td style="text-align:right;">unsigned int</td><td>最大值</td></tr><tr><td>LONG_MAX</td><td style="text-align:right;">long</td><td>最大值</td></tr><tr><td>LONG_MIN</td><td style="text-align:right;">long</td><td>最小值</td></tr><tr><td><strong>U</strong>LONG_MAX</td><td style="text-align:right;">unsigned long</td><td>最大值</td></tr><tr><td>LLONG_MAX</td><td style="text-align:right;">long long</td><td>最大值</td></tr><tr><td>LLONG_MIN</td><td style="text-align:right;">long long</td><td>最小值</td></tr><tr><td><strong>U</strong>LLONG_MAX</td><td style="text-align:right;">unsigned long long</td><td>最大值</td></tr></tbody></table><blockquote><h4 id="定义常量-预处理器方式和const限定符-与c不同" tabindex="-1"><a class="header-anchor" href="#定义常量-预处理器方式和const限定符-与c不同"><span>定义常量 - 预处理器方式和const限定符（与C不同）</span></a></h4></blockquote><ul><li>使用 <ul><li><code>#define</code>，预处理方式。使用举例<code>#define INT_MAX 32767</code></li><li><code>const</code>，限定符方式。通用格式<code>const type name = value</code>，使用举例：<code>const int Months = 12</code><ul><li>注意！const必须在声明时提供常量值，否则无法通过后期赋（修改）值</li><li>const是C++的新方法，<strong>更好用：能指定类型、能定义更复杂的类型、可以指定作用域</strong></li></ul></li><li><code>typedef</code>，类型别名方式</li><li><code>enum</code>，可以通过枚举类型来定义一些字符常量名</li></ul></li><li>预处理方式：<code>#define</code>和<code>#include</code>一样，使用预处理器编译指令 <ul><li><code>#define</code>，是在程序中查找常量名（完全匹配才算），并全部替换为常量名所表示的值</li><li><code>#include</code>，是在头部插入头文件</li></ul></li><li>补充：头文件climits所定义的符号常量也是使用该方法</li><li>const与指针 <ul><li>有两种用法，如下：</li><li><code>const int * pn = &amp;n</code>，禁止修改指向的值，允许修改指向另一变量（即作用对象为<code>*pn</code>，<code>*pn</code>不能改变但<code>pn</code>可以）</li><li><code>int * const pn = &amp;n</code>，禁止修改指向另一变量，允许修改指向的值（即作用对象未<code>pn</code>，<code>pn</code>不能改变但<code>*pn</code>可以）</li></ul></li></ul><h2 id="变量泛操作-内置" tabindex="-1"><a class="header-anchor" href="#变量泛操作-内置"><span>变量泛操作（内置）</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><blockquote><h4 id="类型-与c不同" tabindex="-1"><a class="header-anchor" href="#类型-与c不同"><span>类型（与C不同）</span></a></h4></blockquote><p>C++的类型</p><ul><li><strong>基本类型 / 基本数据类型</strong><ul><li><strong>算术（<em>arithmetic</em>）类型</strong>（可以进行运算） <ul><li><strong>整型</strong>（无小数点数） <ul><li><strong>符号整型</strong>：signed char、short、int、long</li><li><strong>无符号整型</strong>：上面的无符号版本</li><li>（C++新增：long long、bool、char、wchar_t、char16_t、char32_t）</li></ul></li><li><strong>浮点型</strong>（有小数点数） <ul><li>float、double、long double</li></ul></li></ul></li><li><strong>（string类的）字符串</strong></li></ul></li><li><strong>复合类型 / 对象数据类型 / 引用类型</strong><ul><li><strong>直接使用类</strong>（不需要提前定义类型模板） <ul><li><strong>字符数组</strong></li><li><strong>（字符数组的）字符串</strong></li></ul></li><li><strong>类型模板类</strong>（需要提前定义类型模板） <ul><li><strong>结构体 struct</strong>（类似于类）</li><li><strong>共用体 union</strong>（每次只能使用其中一种类型，用于节约空间）</li><li><strong>枚举 enum</strong>（可以用来定义常量）</li></ul></li></ul></li></ul><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><h4 id="初始化和声明-与c不同" tabindex="-1"><a class="header-anchor" href="#初始化和声明-与c不同"><span>初始化和声明（与C不同）</span></a></h4><p>C++初始化方式</p><ul><li><strong>经典C语言方式</strong><ul><li><code>int n_int = 1</code>，可以定义多个<code>int a,b,c</code></li></ul></li><li><strong>大括号初始化器</strong>，如<code>int n_int = {1}</code><ul><li>C语言只能通过大括号初始器（列表初始化）初始化<code>类变量</code>，C++将其作为一种通用初始化方式，并且其新增了一些功能： <ul><li>可省略等号，如<code>int n_int {1}</code></li><li>可省略大括号里的值（初始化为0），如<code>int n_int {}</code>（优点：能更好防范类型转换错误）</li><li>禁止缩窄转换，如不能<code>int n_int {1.0}</code></li></ul></li></ul></li><li><strong>auto类型</strong>（C++新增，类似于TypeScript中的any类型），用法和经典C语言方式相同 <ul><li>编译器会根据初始值的类型判断变量的类型并设置，例如<code>auto lf_bar = 1.5L</code></li><li>适用用处：C++11让程序员将主要精力放在设计而不是细节上 <ul><li>比如用<code>auto pc = &amp;pa;</code>代替<code>const double *(*(*pd)[3])(const double *, int) = &amp;pa</code>（一个函数指针）</li></ul></li></ul></li></ul><p>变量名选择</p><ul><li><p><strong>合法规则</strong></p><ul><li>由字母数字下划线组成</li><li>非数字开头</li><li>区分大小写</li><li>不能使用关键字</li><li>两个下划线打头，或下划线+大写字母打头的名称被保留给实现使用，一个下划线打头的名称被保留给实现，用作全局标识符</li></ul></li><li><p>C语言只保证名称前63个字符有意义，C++对于名称长度没有限制</p></li><li><p><strong>变量名建议规范</strong></p><ul><li><p>小驼峰/下划线/大驼峰都行，C风格建议下划线</p></li><li><p>常用的前缀</p><p>如：<code>n</code>int、<code>str或s</code>string、<code>b</code>byte、<code>c</code>char、<code>p</code>point（一般组合使用，如pn)、<code>arr或a</code>array（一般组合使用）</p></li><li><p>大写字母开头留给定义常量</p></li><li><p>一致性和精度是最重要的</p></li></ul></li></ul><h4 id="表达式的定义" tabindex="-1"><a class="header-anchor" href="#表达式的定义"><span>表达式的定义</span></a></h4><ul><li><strong>表达式的广义性</strong>（C/C++中表达式的定义） <ul><li><strong>任何<code>值</code>或<code>有效的值和运算符的组合</code>都是表达式</strong>，例如可<code>x = (y = 1) + 1</code>、<code>a=b=c=1</code></li><li>但注意<strong>变量声明不是表达式</strong>，for循环这类也不是表达式</li><li>（题外话：C++曾新增了只能在for中出现的<code>声明语句表达式</code>，后来又取消了这种特性，修改了for）</li></ul></li></ul><h4 id="类型查看" tabindex="-1"><a class="header-anchor" href="#类型查看"><span>类型查看</span></a></h4><ul><li><p><strong>类型长度查看</strong>：<code>sizeof()</code>，里面可以是具体变量，也可以是变量类型</p><p>其中字符串常用<code>strlen()</code></p></li></ul><h4 id="类型转换-显式和隐式-与c不同" tabindex="-1"><a class="header-anchor" href="#类型转换-显式和隐式-与c不同"><span>类型转换（显式和隐式）（与C不同）</span></a></h4><p>类型转换方式</p><ol><li><p><strong>初始化和赋值进行的转换</strong>：可缩小可放大，相当于强制类型转换</p></li><li><p><strong>以<code>{}</code>方式初始化</strong>：大括号初始化也称列表初始化</p><p>与普通初始化和赋值相比，其<mark>不允许缩窄</mark>，例如不允许将浮点型转换为整型</p></li><li><p><strong>表达式中的转换</strong>：同一个表达式中包括两种不同的算术类型时，包含两种转换</p><ul><li><p><strong>自动转换（整型提升）</strong>：在出现时便会自动转换</p><p>会被提升为下列类型中第一个宽度足以存储其取值范围的类型：int、unsigned int、long、unsigned long</p><p>如：（int是计算机最自然的类型）</p><ul><li>bool、char、unsigned char、signed char、short换转换成int</li><li>若<code>范围(short)&lt;范围(int)</code>，unsigned short转换为int</li><li>若<code>范围(short)=范围(int)</code>，unsigned short转换为unsigned int</li></ul></li><li><p><strong>不同类型进行运算时</strong>：较小的类型被转换为较大的类型，简单来说：</p><p>有符号整型long long&gt;long&gt;int&gt;short&gt;signed char，无符号相同，char=signed char=unsigned char，bool最低</p></li></ul></li><li><p><strong>传递参数时的转换</strong>：由函数原型控制</p></li><li><p><strong>强制类型转换（显式）</strong>：有两种方法</p><ul><li><strong>C语言通用方法</strong>：不修改变量本身，而是创建一个新的值 <ul><li>C语言：通用格式<code>(typeName) value</code>，例如<code>(float) 1</code></li><li>C++：通用格式<code>typeName (value)</code>，例如<code>float (1)</code></li></ul></li><li><strong>C++新增方法</strong>：引入了4个强制类型转换运算符（Stroustrup认为C语言的转换有危险，<code>static_cast&lt;&gt;</code>的转换更严格） <ul><li>通用格式<code>static_cast&lt;typeName&gt; (value)</code>，例如<code>static_cast&lt;long&gt; (n_int)</code></li><li>（15章才讲）</li><li>（15章才讲）</li><li>（15章才讲）</li></ul></li></ul></li></ol><p>bool补充</p><ul><li>所有数字值或指针值都可以被隐式转换（不用显式强制转换）为bool值</li><li>任何非零值转换为true，零转换为false</li></ul><h4 id="类型别名" tabindex="-1"><a class="header-anchor" href="#类型别名"><span>类型别名</span></a></h4><p>有两种方法</p><ul><li>常量定义方式：如<code>#define BYTE char</code>（不建议）</li><li>typedef方式：如<code>typedef char byte</code>（建议）</li><li>比较 <ul><li>后者能处理更复杂的类型别名，不会出现以下情况：</li><li>比如<code>#define FP float *; FP pa, pb;</code>会变成<code>float *pa, pb</code>而非<code>float *pa, *pb</code></li></ul></li></ul><h4 id="符号" tabindex="-1"><a class="header-anchor" href="#符号"><span>符号</span></a></h4><ul><li><p>算术运算符：从左到右，乘除&gt;加减，<code>()</code>提升优先级</p></li><li><p>递增运算符和递减运算符：<code>++</code>、<code>--</code></p><ul><li><p>这里注意一下两种变体：前缀格式和后缀格式</p><ul><li><p><code>i++</code>/<code>i--</code>后缀格式：先运算当前值表达式，再运算自增自减</p><p>例：<code>a=0; b=(a++)+1</code>，等同<code>a=0; b=a+1; a++</code>，结果<code>a=1; b=1</code></p></li><li><p><code>++i</code>/<code>--i</code>前缀格式：先运算自增自减，再运算当前值表达式</p><p>例：<code>a=0; b=(++a)+1</code>，等同<code>a=0; a++; b=a+1</code>，结果<code>a=1; b=2</code></p></li></ul></li><li><p>可以用副作用和顺序点的概念来理解</p><ul><li>程序只保证程序执行到下个语句之前对所有副作用进行评估，而不保证计算完子表达式还是整个表达式计算完后才评估副作用</li><li>故应避免这样的写法：<code>y = (4+x++) + (6+x++)</code></li></ul></li><li><p>细微的性能区别</p><ul><li>如果表达式的值未被使用，而只有副作用，则使用两种版本效果一样，但性能有细微区别</li><li>对数来说差距很少，但允许对类使用前缀函数和后缀函数，差距会变大</li><li>后缀版本首先复制一个副本，将其加1，再返回复制的副本。即前缀版本的效率更高</li></ul></li></ul></li><li><p>关系运算符：<code>&gt;</code>、<code>&gt;=</code>、<code>==</code>、<code>&lt;=</code>、<code>&lt;</code>、<code>!=</code></p></li><li><p>组合赋值运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></p></li><li><p>逗号运算符：<code>,</code></p><p>语句块允许把多条语句放到按C++句法只能放一条语句的地方，逗号运算符同样可以做到相同的工作。最常用的用途是讲多个表达式放到一个for循环表达式中</p></li><li><p>逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code>，C++提供了另一种表示方式：<code>and</code>、<code>or</code>、<code>not</code>（同python）</p></li></ul>',34)]))}const s=e(o,[["render",i],["__file","01. 泛操作.html.vue"]]),a=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html","title":"01. 泛操作","lang":"zh-CN","frontmatter":{"description":"01. 泛操作 常量泛操作 使用 内置常量 - 头文件climits查看符号常量 需要先引入头文件#include<climits>，然后就可以使用里面的符号常量 符号常量包括最小值和最大值，如需知道宽度，可使用函数sizeof() 定义常量 - 预处理器方式和const限定符（与C不同） 使用 #define，预处理方式。使用举例#define IN...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"01. 泛操作"}],["meta",{"property":"og:description","content":"01. 泛操作 常量泛操作 使用 内置常量 - 头文件climits查看符号常量 需要先引入头文件#include<climits>，然后就可以使用里面的符号常量 符号常量包括最小值和最大值，如需知道宽度，可使用函数sizeof() 定义常量 - 预处理器方式和const限定符（与C不同） 使用 #define，预处理方式。使用举例#define IN..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01. 泛操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.56,"words":2268},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/01. 泛操作.md","excerpt":"\\n<h2>常量泛操作</h2>\\n<h3>使用</h3>\\n<blockquote>\\n<h4>内置常量 - 头文件climits查看符号常量</h4>\\n</blockquote>\\n<p>需要先引入头文件<code>#include&lt;climits&gt;</code>，然后就可以使用里面的符号常量</p>\\n<p>符号常量包括最小值和最大值，如需知道宽度，可使用函数<code>sizeof()</code></p>\\n<table>\\n<thead>\\n<tr>\\n<th>符号常量</th>\\n<th style=\\"text-align:right\\">表示对象</th>\\n<th>表示含义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>CHAR_BIT</td>\\n<td style=\\"text-align:right\\">char</td>\\n<td>位数</td>\\n</tr>\\n<tr>\\n<td>CHAT_MAX</td>\\n<td style=\\"text-align:right\\">char</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>CHAR_MIN</td>\\n<td style=\\"text-align:right\\">char</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>S</strong>CHAR_MAX</td>\\n<td style=\\"text-align:right\\">signed char</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td><strong>S</strong>CHAR_MIN</td>\\n<td style=\\"text-align:right\\">signed char</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>U</strong>CHAR_MAX</td>\\n<td style=\\"text-align:right\\">unsigned char</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>SHRT_MAX</td>\\n<td style=\\"text-align:right\\">short</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>SHRT_MIN</td>\\n<td style=\\"text-align:right\\">short</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>U</strong>SHRT_MAX</td>\\n<td style=\\"text-align:right\\">unsigned short</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>INT_MAX</td>\\n<td style=\\"text-align:right\\">int</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>INT_MIN</td>\\n<td style=\\"text-align:right\\">int</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>U</strong>INT_MAX</td>\\n<td style=\\"text-align:right\\">unsigned int</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>LONG_MAX</td>\\n<td style=\\"text-align:right\\">long</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>LONG_MIN</td>\\n<td style=\\"text-align:right\\">long</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>U</strong>LONG_MAX</td>\\n<td style=\\"text-align:right\\">unsigned long</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>LLONG_MAX</td>\\n<td style=\\"text-align:right\\">long long</td>\\n<td>最大值</td>\\n</tr>\\n<tr>\\n<td>LLONG_MIN</td>\\n<td style=\\"text-align:right\\">long long</td>\\n<td>最小值</td>\\n</tr>\\n<tr>\\n<td><strong>U</strong>LLONG_MAX</td>\\n<td style=\\"text-align:right\\">unsigned long long</td>\\n<td>最大值</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/01. 泛操作.md","value":{"title":"01. 泛操作","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/01. 泛操作.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,a as data};
