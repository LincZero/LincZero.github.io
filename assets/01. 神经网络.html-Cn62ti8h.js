import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as t,c as e,a as s,b as a,d as p,e as n}from"./app-D0lUbzfA.js";const c="/assets/image-20220908165536244-DRlZCScE.png",m="/assets/image-20220908171058818-CAyKxMel.png",r="/assets/image-20220908124803285-WU4aQe_9.png",h="/assets/image-20220908144206121-9H1FhPbi.png",u="/assets/image-20220908144838773-4tztnMkn.png",d="/assets/image-20220908144816755-DxqVHDgT.png",g="/assets/image-20220909142218767-wMVQWFW5.png",k="/assets/image-20220909100331462-YgNpifxm.png",y="/assets/image-20220909100137536-Hto0XOcL.png",_="/assets/image-20220909095403322-B4k0OwgI.png",v={},b=n('<h1 id="吴恩达机器学习" tabindex="-1"><a class="header-anchor" href="#吴恩达机器学习"><span>吴恩达机器学习</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>第二课导读</p><ul><li>神经网络（Neural Networks） <ul><li>推理（预言）</li><li>训练</li></ul></li><li>建立机器学习系统的一些实用建议</li><li>决策树（Decision Tree）</li></ul><h1 id="神经网络-neural-networks" tabindex="-1"><a class="header-anchor" href="#神经网络-neural-networks"><span>神经网络（Neural Networks）</span></a></h1><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h2><h3 id="入门-1" tabindex="-1"><a class="header-anchor" href="#入门-1"><span>入门</span></a></h3><h4 id="起源" tabindex="-1"><a class="header-anchor" href="#起源"><span>起源</span></a></h4><p>模拟神经元和大脑（Neuron &amp; Brain）</p><p>研究历史</p><ul><li>起源：1950年尝试去模拟大脑</li><li>1980~1990年，再次流行</li><li>2005年，兴起</li><li>神经网络近期增长，也很大程度因为数据的数量多了很多，即大数据。这得以去训练大型神经网络</li></ul><p>大脑如何运行？</p><ul><li>一个神经元可以影响输出其他神经元，神经元包括树突轴突神经末梢等，……</li><li>简化数学模型：输入神经元影响输出神经元，神经元可以影响多个神经元，神经元也可以被多个神经元影响</li></ul><h4 id="神经网络为何如此高效" tabindex="-1"><a class="header-anchor" href="#神经网络为何如此高效"><span>神经网络为何如此高效</span></a></h4><p>CPU GPU 能并行运算，擅长做非常大的矩阵运算，矩阵运算通常也是可并行计算的</p><p>在编程时应该尽量用矩阵运算去代替for循环，以提高运算效率</p><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><h4 id="激活函数-activation-function" tabindex="-1"><a class="header-anchor" href="#激活函数-activation-function"><span>激活函数（Activation Function）</span></a></h4><p>定义一个激活函数，一般选择Sigomid作为激活函数</p>',19),x=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mi",null,"g"),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mi",null,"w"),s("mi",null,"x"),s("mo",null,"+"),s("mi",null,"b"),s("mo",{stretchy:"false"},")")])])])]),s("mspace",{linebreak:"newline"}),s("mtext",null,"其中"),s("mi",null,"a"),s("mtext",null,"是激活 "),s("mi",null,"a"),s("mi",null,"c"),s("mi",null,"t"),s("mi",null,"i"),s("mi",null,"v"),s("mi",null,"a"),s("mi",null,"t"),s("mi",null,"i"),s("mi",null,"o"),s("mi",null,"n"),s("mtext",null," 的意思，这个函数也叫激活函数")]),s("annotation",{encoding:"application/x-tex"}," a=g(x)=\\frac1{1+e^{-(wx+b)}}\\\\ 其中a是激活~activation~的意思，这个函数也叫激活函数 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.1088em","vertical-align":"-0.7873em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.296em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.814em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal mtight"},"x"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mathnormal mtight"},"b"),s("span",{class:"mclose mtight"},")")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7873em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"其中"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord cjk_fallback"},"是激活"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"c"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mord cjk_fallback"},"的意思，这个函数也叫激活函数")])])])])],-1),w=s("p",null,"写程序时也经常将这个激活函数分两条语句：",-1),f=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"z"),s("mo",null,"="),s("mi",null,"w"),s("mi",null,"x"),s("mo",null,"+"),s("mi",null,"b")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mi",null,"g"),s("mo",{stretchy:"false"},"("),s("mi",null,"z"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"z")])])])])])])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{cases} z=wx+b\\\\ a=g(z)=\\frac1{1+e^{-z}} \\end{cases} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3em","vertical-align":"-1.25em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size4"},"{")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.69em"}},[s("span",{style:{top:"-3.69em"}},[s("span",{class:"pstrut",style:{height:"3.008em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"b")])]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"3.008em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7027em"}},[s("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.04398em"}},"z")])])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4033em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.19em"}},[s("span")])])])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),z=n(`<p>即</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> b
f_x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>mp<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="神经元-neuron-单元-units" tabindex="-1"><a class="header-anchor" href="#神经元-neuron-单元-units"><span>神经元（Neuron）/ 单元（Units）</span></a></h4><p>对于一个 Neuron (神经元) 来说，对他输入x便会根据激活函数输出a</p><p>这里的神经元在机器神经网络中也被简称为单元（Units）</p><h4 id="层-layer" tabindex="-1"><a class="header-anchor" href="#层-layer"><span>层（Layer）</span></a></h4><ul><li><p>层</p><ul><li><p>层（Layer），说详细点也可以叫 神经网络层（Neural Network Layer）</p></li><li><p>一个神经网络有一或多个层，每一层可以有一或多个 Neuron</p></li><li><p>同一层的 Neuron 有相同的特性</p><p>例如：同一层中的每一个 Neuron 他们的激活函数模型一样 (比如都是Sigmoid)，但是函数中的参数可能不一样（例如w和b不同）</p></li></ul></li><li><p>层包括</p><ul><li>这些层包含输入层（Input Layout）、 输出层（Output Layouts）、中间层 / 隐藏层（Middle Layer / Hidden Layer） <ul><li>输入层补充：不包含 Neuron，就是原始数据</li><li>输出层补充：一般只有一个 Neuron，得到最终结果</li><li>中间层补充：也叫做隐藏层的原因是，在训练集中，只能看到输入和输出结果，中间的过程不能看 (也看不懂)</li></ul></li><li>层的计数是从0开始的。例如输入层和输出层直接有三个中间层，他们分别是 “Layer0~Layer4”</li></ul></li><li><p>向量化</p><ul><li>不同层之间的 Neuron，上一层的每个 Neuron 输出给下一层的所有 Neuron，下一层的每个 Neuron 接收上一层所有Neuron，即 “全射”</li><li>一般将一个层中的所有 Neuron 包成一个向量，通过矩阵叉乘的方式就可以将上一个层全射到下一个层中</li></ul></li></ul><h4 id="神经网络-neural-networks-1" tabindex="-1"><a class="header-anchor" href="#神经网络-neural-networks-1"><span>神经网络（Neural Networks）</span></a></h4><blockquote><h5 id="单中间层的结构" tabindex="-1"><a class="header-anchor" href="#单中间层的结构"><span>单中间层的结构</span></a></h5></blockquote><p>每一个 Neuron 都有一个Sigmoid的激活函数</p><p><mark>符号表示</mark></p>`,11),M=s("li",null,[a("右上角加"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mtext",null," "),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[~]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mclose"},"]")])])]),a("的上标表示处于第几个网络层")],-1),E=s("li",null,[a("右上角加"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"()")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mclose"},")")])])]),a("的上标表示用的是第几个样本（当然，在向量化的公式里你看不到这个表示的，而且一般也是用下标表示的）")],-1),A=s("li",null,[a("右下角数字"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("的下标表示是该网络层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个单元。是输入层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个特制，其中"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"x"),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"≠"),s("msub",null,[s("mi",null,"x"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"x^{(1)}\\not=x_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0824em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.888em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mtight"},"1"),s("span",{class:"mclose mtight"},")")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},[s("span",{class:"mord vbox"},[s("span",{class:"thinbox"},[s("span",{class:"rlap"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"inner"},[s("span",{class:"mord"},[s("span",{class:"mrel"},"")])]),s("span",{class:"fix"})])])])])]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])],-1),B=s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mi",null,"w"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])]),s("mtext",null,"、"),s("msubsup",null,[s("mi",null,"b"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"w_j^{[l]}、b_j^{[l]}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4578em","vertical-align":"-0.413em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0448em"}},[s("span",{style:{top:"-2.4231em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])]),s("span",{style:{top:"-3.2198em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"["),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose mtight"},"]")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.413em"}},[s("span")])])])])]),s("span",{class:"mord cjk_fallback"},"、"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0448em"}},[s("span",{style:{top:"-2.4231em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])]),s("span",{style:{top:"-3.2198em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"["),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose mtight"},"]")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.413em"}},[s("span")])])])])])])])]),a("表示处于第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l")]),s("annotation",{encoding:"application/x-tex"},"l")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l")])])]),a("个神经网络层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个神经元所使用Sigmoid函数的参数")],-1),L={class:"katex"},j=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")])]),s("annotation",{encoding:"application/x-tex"},"\\vec x")])])],-1),N={class:"katex-html","aria-hidden":"true"},S={class:"base"},q=s("span",{class:"strut",style:{height:"0.714em"}},null,-1),D={class:"mord accent"},P={class:"vlist-t"},C={class:"vlist-r"},T={class:"vlist",style:{height:"0.714em"}},F=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"x")],-1),H={style:{top:"-3em"}},Y=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),R={class:"accent-body",style:{left:"-0.2077em"}},W={class:"overlay",style:{height:"0.714em",width:"0.471em"}},U={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},I=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),O=[I],J={class:"katex"},V=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"⃗")]),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"\\vec a^{[l]}")])])],-1),Z={class:"katex-html","aria-hidden":"true"},X={class:"base"},G=s("span",{class:"strut",style:{height:"0.888em"}},null,-1),Q={class:"mord"},K={class:"mord accent"},$={class:"vlist-t"},ss={class:"vlist-r"},as={class:"vlist",style:{height:"0.714em"}},ns=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")],-1),ts={style:{top:"-3em"}},es=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),ls={class:"accent-body",style:{left:"-0.2355em"}},ps={class:"overlay",style:{height:"0.714em",width:"0.471em"}},is={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},os=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),cs=[os],ms=n('<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span>',1),rs={class:"katex"},hs=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"⃗")]),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"\\vec a^{[l]}")])])],-1),us={class:"katex-html","aria-hidden":"true"},ds={class:"base"},gs=s("span",{class:"strut",style:{height:"0.888em"}},null,-1),ks={class:"mord"},ys={class:"mord accent"},_s={class:"vlist-t"},vs={class:"vlist-r"},bs={class:"vlist",style:{height:"0.714em"}},xs=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")],-1),ws={style:{top:"-3em"}},fs=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),zs={class:"accent-body",style:{left:"-0.2355em"}},Ms={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Es={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},As=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Bs=[As],Ls=n('<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span>',1),js=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l")]),s("annotation",{encoding:"application/x-tex"},"l")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l")])])],-1),Ns=s("figure",null,[s("img",{src:c,alt:"image-20220908165536244",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20220908165536244")],-1),Ss=s("blockquote",null,[s("h5",{id:"多中间层的结构",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#多中间层的结构"},[s("span",null,"多中间层的结构")])])],-1),qs={class:"katex-block"},Ds={class:"katex-display"},Ps={class:"katex"},Cs=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mi",null,"a"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])]),s("mo",null,"="),s("mi",null,"g"),s("mo",{stretchy:"false"},"("),s("msubsup",null,[s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])]),s("mo",null,"⋅"),s("msup",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"⃗")]),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},"]")])]),s("mo",null,"+"),s("msubsup",null,[s("mi",null,"b"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," a_j^{[l]}=g(\\vec w_j^{[l]}\\cdot \\vec a^{[l-1]}+b_j^{[l]}) ")])])],-1),Ts={class:"katex-html","aria-hidden":"true"},Fs=n('<span class="base"><span class="strut" style="height:1.4578em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1),Hs={class:"base"},Ys=s("span",{class:"strut",style:{height:"1.4578em","vertical-align":"-0.413em"}},null,-1),Rs=s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g",-1),Ws=s("span",{class:"mopen"},"(",-1),Us={class:"mord"},Is={class:"mord accent"},Os={class:"vlist-t"},Js={class:"vlist-r"},Vs={class:"vlist",style:{height:"0.714em"}},Zs=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w")],-1),Xs={style:{top:"-3em"}},Gs=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),Qs={class:"accent-body",style:{left:"-0.1522em"}},Ks={class:"overlay",style:{height:"0.714em",width:"0.471em"}},$s={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},sa=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),aa=[sa],na=n('<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span>',1),ta=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),ea=s("span",{class:"mbin"},"⋅",-1),la=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),pa={class:"base"},ia=s("span",{class:"strut",style:{height:"1.0213em","vertical-align":"-0.0833em"}},null,-1),oa={class:"mord"},ca={class:"mord accent"},ma={class:"vlist-t"},ra={class:"vlist-r"},ha={class:"vlist",style:{height:"0.714em"}},ua=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")],-1),da={style:{top:"-3em"}},ga=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),ka={class:"accent-body",style:{left:"-0.2355em"}},ya={class:"overlay",style:{height:"0.714em",width:"0.471em"}},_a={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},va=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),ba=[va],xa=n('<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span>',1),wa=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),fa=s("span",{class:"mbin"},"+",-1),za=s("span",{class:"mspace",style:{"margin-right":"0.2222em"}},null,-1),Ma=n('<span class="base"><span class="strut" style="height:1.4578em;vertical-align:-0.413em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span>',1),Ea=s("p",null,[s("mark",null,"符号表示")],-1),Aa=s("li",null,[a("右上角加"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mtext",null," "),s("mo",{stretchy:"false"},"]")]),s("annotation",{encoding:"application/x-tex"},"[~]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"["),s("span",{class:"mspace nobreak"}," "),s("span",{class:"mclose"},"]")])])]),a("的上标表示处于第几个网络层")],-1),Ba=s("li",null,[a("右上角加"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"()")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mclose"},")")])])]),a("的上标表示用的是第几个样本（当然，在向量化的公式里你看不到这个表示的，而且一般也是用下标表示的）")],-1),La=s("li",null,[a("右下角数字"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("的下标表示是该网络层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个单元。是输入层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个特制，其中"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"x"),s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"≠"),s("msub",null,[s("mi",null,"x"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"x^{(1)}\\not=x_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0824em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.888em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"("),s("span",{class:"mord mtight"},"1"),s("span",{class:"mclose mtight"},")")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},[s("span",{class:"mord vbox"},[s("span",{class:"thinbox"},[s("span",{class:"rlap"},[s("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),s("span",{class:"inner"},[s("span",{class:"mord"},[s("span",{class:"mrel"},"")])]),s("span",{class:"fix"})])])])])]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"x"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])],-1),ja=s("li",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msubsup",null,[s("mi",null,"w"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])]),s("mtext",null,"、"),s("msubsup",null,[s("mi",null,"b"),s("mi",null,"j"),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"w_j^{[l]}、b_j^{[l]}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.4578em","vertical-align":"-0.413em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0448em"}},[s("span",{style:{top:"-2.4231em","margin-left":"-0.0269em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])]),s("span",{style:{top:"-3.2198em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"["),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose mtight"},"]")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.413em"}},[s("span")])])])])]),s("span",{class:"mord cjk_fallback"},"、"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.0448em"}},[s("span",{style:{top:"-2.4231em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])]),s("span",{style:{top:"-3.2198em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen mtight"},"["),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mclose mtight"},"]")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.413em"}},[s("span")])])])])])])])]),a("表示处于第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l")]),s("annotation",{encoding:"application/x-tex"},"l")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l")])])]),a("个神经网络层的第"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j")]),s("annotation",{encoding:"application/x-tex"},"j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j")])])]),a("个神经元所使用Sigmoid函数的参数")],-1),Na={class:"katex"},Sa=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")])]),s("annotation",{encoding:"application/x-tex"},"\\vec x")])])],-1),qa={class:"katex-html","aria-hidden":"true"},Da={class:"base"},Pa=s("span",{class:"strut",style:{height:"0.714em"}},null,-1),Ca={class:"mord accent"},Ta={class:"vlist-t"},Fa={class:"vlist-r"},Ha={class:"vlist",style:{height:"0.714em"}},Ya=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"x")],-1),Ra={style:{top:"-3em"}},Wa=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),Ua={class:"accent-body",style:{left:"-0.2077em"}},Ia={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Oa={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},Ja=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Va=[Ja],Za={class:"katex"},Xa=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"⃗")]),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"\\vec a^{[l]}")])])],-1),Ga={class:"katex-html","aria-hidden":"true"},Qa={class:"base"},Ka=s("span",{class:"strut",style:{height:"0.888em"}},null,-1),$a={class:"mord"},sn={class:"mord accent"},an={class:"vlist-t"},nn={class:"vlist-r"},tn={class:"vlist",style:{height:"0.714em"}},en=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")],-1),ln={style:{top:"-3em"}},pn=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),on={class:"accent-body",style:{left:"-0.2355em"}},cn={class:"overlay",style:{height:"0.714em",width:"0.471em"}},mn={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},rn=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),hn=[rn],un=n('<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span>',1),dn={class:"katex"},gn=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mover",{accent:"true"},[s("mi",null,"a"),s("mo",null,"⃗")]),s("mrow",null,[s("mo",{stretchy:"false"},"["),s("mi",null,"l"),s("mo",{stretchy:"false"},"]")])])]),s("annotation",{encoding:"application/x-tex"},"\\vec a^{[l]}")])])],-1),kn={class:"katex-html","aria-hidden":"true"},yn={class:"base"},_n=s("span",{class:"strut",style:{height:"0.888em"}},null,-1),vn={class:"mord"},bn={class:"mord accent"},xn={class:"vlist-t"},wn={class:"vlist-r"},fn={class:"vlist",style:{height:"0.714em"}},zn=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"a")],-1),Mn={style:{top:"-3em"}},En=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),An={class:"accent-body",style:{left:"-0.2355em"}},Bn={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Ln={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},jn=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Nn=[jn],Sn=n('<span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">[</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mclose mtight">]</span></span></span></span></span></span></span></span>',1),qn=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"l")]),s("annotation",{encoding:"application/x-tex"},"l")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l")])])],-1),Dn=n('<figure><img src="'+m+'" alt="image-20220908171058818" tabindex="0" loading="lazy"><figcaption>image-20220908171058818</figcaption></figure><h3 id="使用举例" tabindex="-1"><a class="header-anchor" href="#使用举例"><span>使用举例</span></a></h3><h4 id="举例-需求预测-demand-prediction" tabindex="-1"><a class="header-anchor" href="#举例-需求预测-demand-prediction"><span>举例 - 需求预测（Demand Prediction）</span></a></h4><p>例如我们要根据价格、运费、促销、材质来预测是否畅销</p><p>大概原理如下图，但是不需要手动去设置特征，中间层是自动算的</p><figure><img src="'+r+'" alt="image-20220908124803285" tabindex="0" loading="lazy"><figcaption>image-20220908124803285</figcaption></figure><h4 id="举例-图像感知、物品识别" tabindex="-1"><a class="header-anchor" href="#举例-图像感知、物品识别"><span>举例 - 图像感知、物品识别</span></a></h4><p>图像的输入方式</p><figure><img src="'+h+'" alt="image-20220908144206121" tabindex="0" loading="lazy"><figcaption>image-20220908144206121</figcaption></figure><p>不同层的分工</p><blockquote><h5 id="人脸识别" tabindex="-1"><a class="header-anchor" href="#人脸识别"><span>人脸识别</span></a></h5></blockquote><figure><img src="'+u+'" alt="image-20220908144838773" tabindex="0" loading="lazy"><figcaption>image-20220908144838773</figcaption></figure><blockquote><h5 id="车辆检测" tabindex="-1"><a class="header-anchor" href="#车辆检测"><span>车辆检测</span></a></h5></blockquote><figure><img src="'+d+'" alt="image-20220908144816755" tabindex="0" loading="lazy"><figcaption>image-20220908144816755</figcaption></figure><h2 id="前向传播-forward-propagation" tabindex="-1"><a class="header-anchor" href="#前向传播-forward-propagation"><span>前向传播（Forward Propagation）</span></a></h2><p>另参考：</p>',16),Pn={href:"https://blog.csdn.net/bitcarmanlee/article/details/78819025",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://zhuanlan.zhihu.com/p/429099813",target:"_blank",rel:"noopener noreferrer"},Tn=n('<h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><ul><li><p><strong>前向传播</strong> / 正向传播（Forward Propagation）算法</p><ul><li><p>简单解释：将上一层的输出作为下一层的输入，并计算下一层的输出，一直到运算到输出层为止</p><p>当你训练完神经网络后，你就可以通过前向传播来用训练后的模型进行预测</p></li><li><p>其他特性：随着靠近输出层，隐藏层的 Neuron (Units) 数量会减少</p></li></ul></li><li><p><strong>反向传播</strong>（Backward Propagation / Back Propagation）算法</p><ul><li>与前向传播相对应</li></ul></li></ul><h3 id="公式" tabindex="-1"><a class="header-anchor" href="#公式"><span>公式</span></a></h3><p>对于前向传播来说，不管维度多高，其过程都可以用如下公式表示：</p>',4),Fn=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mi",null,"a"),s("mn",null,"2")]),s("mo",null,"="),s("mi",null,"σ"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"z"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"σ"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"a"),s("mn",null,"1")]),s("mo",null,"∗"),s("msup",null,[s("mi",null,"W"),s("mn",null,"2")]),s("mo",null,"+"),s("msup",null,[s("mi",null,"b"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," a^2=\\sigma(z^2)=\\sigma(a^1*W^2+b^2) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8641em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1141em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"σ"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1141em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"σ"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9474em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1141em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"b"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8641em"}},[s("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"mclose"},")")])])])])],-1),Hn=n('<p>其中，上标代表层数，星号表示卷积，b表示偏置项bias，σ表示激活函数</p><p>例如：单个网络层的前向传播：</p><figure><img src="'+g+`" alt="image-20220909142218767" tabindex="0" loading="lazy"><figcaption>image-20220909142218767</figcaption></figure><h3 id="代码基础" tabindex="-1"><a class="header-anchor" href="#代码基础"><span>代码基础</span></a></h3><h4 id="numpy中数据的形式" tabindex="-1"><a class="header-anchor" href="#numpy中数据的形式"><span>NumPy中数据的形式</span></a></h4><p>NumPy 存储数据的方式：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>		<span class="token comment"># 这是一个矩阵</span>
    <span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">425.0</span><span class="token punctuation">,</span> <span class="token number">18.5</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

x  <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>		<span class="token comment"># 这是一个4x2矩阵，即四行两列矩阵</span>
    <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tensorflow中数据形式" tabindex="-1"><a class="header-anchor" href="#tensorflow中数据形式"><span>Tensorflow中数据形式</span></a></h4><p>这里举一个例子：通过温度和时间来判断咖啡是否煮熟（不会未熟或过熟）</p><table><thead><tr><th>温度</th><th>分钟</th><th>是否好咖啡</th></tr></thead><tbody><tr><td>200</td><td>17.0</td><td>1</td></tr><tr><td>425</td><td>18.5</td><td>0</td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table><p>神经网络前向传播的代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>					<span class="token comment"># 输入数据x</span>
layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># 第一层神经网络层，定义该层有三个单元，使用Sigmoid作为激活函数</span>
a1 <span class="token operator">=</span> layer_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>									<span class="token comment"># 将输入数据x传给layer1得到输出</span>

layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># （重复，不过单元的数量减少为1）</span>
a2 <span class="token operator">=</span> layer_1<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于数据形式的补充：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># x：</span>
<span class="token comment"># 这里的输入向量x变量，需要是一个NumPy的行矩阵的形式</span>

<span class="token comment"># a1：</span>
tf<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.2</span> <span class="token number">0.7</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>
<span class="token comment"># a1.numpy()：</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.4661001</span><span class="token punctuation">,</span> <span class="token number">1.12516</span><span class="token punctuation">,</span> <span class="token number">3.2159438</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>

<span class="token comment"># a2：</span>
tf<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>
<span class="token comment"># a2.numpy()：</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><h4 id="举例-手写体数字识别" tabindex="-1"><a class="header-anchor" href="#举例-手写体数字识别"><span>举例 - 手写体数字识别</span></a></h4><p>前向传播中Units的减少</p><figure><img src="`+k+'" alt="image-20220909100331462" tabindex="0" loading="lazy"><figcaption>image-20220909100331462</figcaption></figure><p>代码</p><figure><img src="'+y+'" alt="image-20220909100137536" tabindex="0" loading="lazy"><figcaption>image-20220909100137536</figcaption></figure><h4 id="举例-判断咖啡是否煮得好" tabindex="-1"><a class="header-anchor" href="#举例-判断咖啡是否煮得好"><span>举例 - 判断咖啡是否煮得好</span></a></h4><p>这里举一个例子：通过温度和时间来判断咖啡是否煮熟（不会未熟或过熟）</p><figure><img src="'+_+`" alt="image-20220909095403322" tabindex="0" loading="lazy"><figcaption>image-20220909095403322</figcaption></figure><p>代码：（课程中用的TensorFlow工具）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>					<span class="token comment"># 输入数据x</span>
layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># 第一层神经网络层，定义该层有三个单元，使用Sigmoid作为激活函数</span>
a1 <span class="token operator">=</span> layer_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>									<span class="token comment"># 将输入数据x传给layer1得到输出</span>

layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># （重复，不过单元的数量减少为1）</span>
a2 <span class="token operator">=</span> layer_1<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码原理" tabindex="-1"><a class="header-anchor" href="#代码原理"><span>代码原理</span></a></h3><p>用TensorFlow实现</p><h4 id="未矩阵化" tabindex="-1"><a class="header-anchor" href="#未矩阵化"><span>未矩阵化</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>W <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
a_in <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">dense</span><span class="token punctuation">(</span>a_in<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token string">&quot;sigmoid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    units <span class="token operator">=</span> W<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>				<span class="token comment"># shape是[2行,3列]，即 units = 3</span>
    a_out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>units<span class="token punctuation">)</span>			<span class="token comment"># a_out = [0,0,0]</span>
    
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>units<span class="token punctuation">)</span><span class="token punctuation">:</span>			<span class="token comment"># 遍历该层的三个神经元，j: 0, 1, 2</span>
        w <span class="token operator">=</span> W<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span>					<span class="token comment"># 获取该神经元的w和b</span>
        b <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span>					<span class="token comment"># ^</span>
        z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span>a_in<span class="token punctuation">)</span> <span class="token operator">+</span> b		<span class="token comment"># 通过sigmoid函数计算输出</span>
        a_out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">(</span>z<span class="token punctuation">)</span>				<span class="token comment"># ^</span>
    <span class="token keyword">return</span> a_out

<span class="token keyword">def</span> <span class="token function">sequential</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a1 <span class="token operator">=</span> dense<span class="token punctuation">(</span> x<span class="token punctuation">,</span> W1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
    a2 <span class="token operator">=</span> dense<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> W1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
    a3 <span class="token operator">=</span> dense<span class="token punctuation">(</span>a3<span class="token punctuation">,</span> W1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
    a4 <span class="token operator">=</span> dense<span class="token punctuation">(</span>a4<span class="token punctuation">,</span> W1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>
    f_x <span class="token operator">=</span> a4
    <span class="token keyword">return</span> f_x

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="矩阵化" tabindex="-1"><a class="header-anchor" href="#矩阵化"><span>矩阵化</span></a></h4><p>用矩阵运算改良旧代码，矩阵化后最大的优点是可以充分利用 CPU GPU 并行计算的资源，高效快速</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">dense</span><span class="token punctuation">(</span>A_in<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token string">&quot;sigmoid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    Z <span class="token operator">=</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>A_in<span class="token punctuation">,</span>W<span class="token punctuation">)</span> <span class="token operator">+</span> B
    A_out <span class="token operator">=</span> g<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>
    <span class="token keyword">return</span> A_out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="训练-model-training" tabindex="-1"><a class="header-anchor" href="#训练-model-training"><span>训练（Model Training）</span></a></h2><h3 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span>代码实现</span></a></h3><blockquote><h5 id="代码实现1" tabindex="-1"><a class="header-anchor" href="#代码实现1"><span>代码实现1</span></a></h5></blockquote><p>还是之前那个判断咖啡是否煮得好的例子</p><p>之前是手动一层一层去传播的，现在可以不用</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># 定义层</span>
layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>
model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>layout_1<span class="token punctuation">,</span> laoyout_2<span class="token punctuation">]</span><span class="token punctuation">)</span>		<span class="token comment"># 定义一个神经网络</span>

x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>									<span class="token comment"># 定义输入矩阵</span>
    <span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">120.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">425.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">212.0</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>							<span class="token comment"># 定义输出向量（可以看成是列矩阵）</span>

<span class="token comment"># model.compile(...) # （这个以后再学）</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>									<span class="token comment"># 训练模型</span>
model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span> 							<span class="token comment"># 用模型预测新数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="代码实现2" tabindex="-1"><a class="header-anchor" href="#代码实现2"><span>代码实现2</span></a></h5></blockquote><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>import tensorflow as tf							# tensorflow包
from tensorflow.keras.layers import Dense		# 可以用来创建层
from tensorflow.keras import Sequential			# 可以用多个层来创建神经网络

model = Sequential([
    Dense(units=25, activation=&#39;sigmoid&#39;),
    Dense(units=15, activation=&#39;sigmoid&#39;),
    Dense(units= 1, activation=&#39;sigmoid&#39;)
])

from tensorflow.keras.losses import BinaryCrossentropy	# 二进制交叉熵
model.comile(loss=BinaryCrossentropy())			# 定义Loss函数
model.fit(X,Y,epoches=100)						# 训练神经网络，Epoches参数为梯度下降的次数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="训练的三个步骤" tabindex="-1"><a class="header-anchor" href="#训练的三个步骤"><span>训练的三个步骤</span></a></h3><p>训练步骤（Model Training Steps）有三个：</p><h4 id="_1-定义模型、定义层与激活函数" tabindex="-1"><a class="header-anchor" href="#_1-定义模型、定义层与激活函数"><span>① 定义模型、定义层与激活函数</span></a></h4><h4 id="_2-定义loss函数、cost函数" tabindex="-1"><a class="header-anchor" href="#_2-定义loss函数、cost函数"><span>② 定义Loss函数、Cost函数</span></a></h4><h4 id="_3-最优化、模型训练" tabindex="-1"><a class="header-anchor" href="#_3-最优化、模型训练"><span>③ 最优化、模型训练</span></a></h4><h3 id="训练的三个步骤-具体" tabindex="-1"><a class="header-anchor" href="#训练的三个步骤-具体"><span>训练的三个步骤 - 具体</span></a></h3><h4 id="公式中" tabindex="-1"><a class="header-anchor" href="#公式中"><span>公式中</span></a></h4><blockquote><h5 id="_1-定义模型" tabindex="-1"><a class="header-anchor" href="#_1-定义模型"><span>① 定义模型</span></a></h5></blockquote><p>公式</p>`,49),Yn={class:"katex-block"},Rn={class:"katex-display"},Wn={class:"katex"},Un=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"f"),s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mo",{separator:"true"},","),s("mi",null,"b")])]),s("mo",{stretchy:"false"},"("),s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")]),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mo",{stretchy:"false"},"?")]),s("annotation",{encoding:"application/x-tex"}," f_{\\vec w,b}(\\vec x)=? ")])])],-1),In={class:"katex-html","aria-hidden":"true"},On={class:"base"},Jn=s("span",{class:"strut",style:{height:"1.0411em","vertical-align":"-0.2911em"}},null,-1),Vn={class:"mord"},Zn=s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f",-1),Xn={class:"msupsub"},Gn={class:"vlist-t vlist-t2"},Qn={class:"vlist-r"},Kn={class:"vlist",style:{height:"0.3448em"}},$n={style:{top:"-2.545em","margin-left":"-0.1076em","margin-right":"0.05em"}},st=s("span",{class:"pstrut",style:{height:"2.7em"}},null,-1),at={class:"sizing reset-size6 size3 mtight"},nt={class:"mord mtight"},tt={class:"mord accent mtight"},et={class:"vlist-t"},lt={class:"vlist-r"},pt={class:"vlist",style:{height:"0.714em"}},it=s("span",{style:{top:"-2.714em"}},[s("span",{class:"pstrut",style:{height:"2.714em"}}),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02691em"}},"w")],-1),ot={style:{top:"-2.714em"}},ct=s("span",{class:"pstrut",style:{height:"2.714em"}},null,-1),mt={class:"accent-body",style:{left:"-0.1522em"}},rt={class:"overlay mtight",style:{height:"0.714em",width:"0.471em"}},ht={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},ut=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),dt=[ut],gt=s("span",{class:"mpunct mtight"},",",-1),kt=s("span",{class:"mord mathnormal mtight"},"b",-1),yt=s("span",{class:"vlist-s"},"​",-1),_t=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2911em"}},[s("span")])],-1),vt=s("span",{class:"mopen"},"(",-1),bt={class:"mord accent"},xt={class:"vlist-t"},wt={class:"vlist-r"},ft={class:"vlist",style:{height:"0.714em"}},zt=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal"},"x")],-1),Mt={style:{top:"-3em"}},Et=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),At={class:"accent-body",style:{left:"-0.2077em"}},Bt={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Lt={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},jt=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Nt=[jt],St=s("span",{class:"mclose"},")",-1),qt=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1),Dt=s("span",{class:"mrel"},"=",-1),Pt=s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mclose"},"?")],-1),Ct=s("blockquote",null,[s("h5",{id:"_2-定义loss函数和cost函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-定义loss函数和cost函数"},[s("span",null,"② 定义Loss函数和Cost函数")])])],-1),Tt=s("p",null,"公式",-1),Ft={class:"katex-block"},Ht={class:"katex-display"},Yt={class:"katex"},Rt=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mstyle",{mathcolor:"orange"},[s("mi",null,"L"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"f"),s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mo",{separator:"true"},","),s("mi",null,"b")])]),s("mo",{stretchy:"false"},"("),s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")]),s("mo",{stretchy:"false"},")"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{stretchy:"false"},")")]),s("mo",null,"="),s("mo",{stretchy:"false"},"?"),s("mspace",{linebreak:"newline"}),s("mi",null,"J"),s("mo",{stretchy:"false"},"("),s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mo",{separator:"true"},","),s("mi",null,"b"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mi",null,"m")]),s("munderover",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"m")]),s("mstyle",{mathcolor:"orange"},[s("mi",null,"L"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"f"),s("mrow",null,[s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mo",{separator:"true"},","),s("mi",null,"b")])]),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mover",{accent:"true"},[s("mi",null,"x"),s("mo",null,"⃗")]),s("mi",null,"i")]),s("mo",{separator:"true"},","),s("msub",null,[s("mi",null,"y"),s("mi",null,"i")]),s("mo",{stretchy:"false"},")"),s("mo",{stretchy:"false"},")")])]),s("annotation",{encoding:"application/x-tex"}," {\\color{orange}L(f_{\\vec w,b}(\\vec x),y)}=?\\\\ J(\\vec w,b)=\\frac1m \\sum^m_{i=1} {\\color{orange}L(f_{\\vec w,b}(\\vec x_i,y_i))} ")])])],-1),Wt={class:"katex-html","aria-hidden":"true"},Ut={class:"base"},It=s("span",{class:"strut",style:{height:"1.0411em","vertical-align":"-0.2911em"}},null,-1),Ot={class:"mord"},Jt=s("span",{class:"mord mathnormal",style:{color:"orange"}},"L",-1),Vt=s("span",{class:"mopen",style:{color:"orange"}},"(",-1),Zt={class:"mord",style:{color:"orange"}},Xt=s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em",color:"orange"}},"f",-1),Gt={class:"msupsub"},Qt={class:"vlist-t vlist-t2"},Kt={class:"vlist-r"},$t={class:"vlist",style:{height:"0.3448em"}},se={style:{top:"-2.545em","margin-left":"-0.1076em","margin-right":"0.05em"}},ae=s("span",{class:"pstrut",style:{height:"2.7em"}},null,-1),ne={class:"sizing reset-size6 size3 mtight",style:{color:"orange"}},te={class:"mord mtight",style:{color:"orange"}},ee={class:"mord accent mtight",style:{color:"orange"}},le={class:"vlist-t"},pe={class:"vlist-r"},ie={class:"vlist",style:{height:"0.714em"}},oe=s("span",{style:{top:"-2.714em"}},[s("span",{class:"pstrut",style:{height:"2.714em"}}),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02691em",color:"orange"}},"w")],-1),ce={style:{top:"-2.714em"}},me=s("span",{class:"pstrut",style:{height:"2.714em"}},null,-1),re={class:"accent-body",style:{left:"-0.1522em"}},he={class:"overlay mtight",style:{color:"orange",height:"0.714em",width:"0.471em"}},ue={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},de=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),ge=[de],ke=s("span",{class:"mpunct mtight",style:{color:"orange"}},",",-1),ye=s("span",{class:"mord mathnormal mtight",style:{color:"orange"}},"b",-1),_e=s("span",{class:"vlist-s"},"​",-1),ve=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2911em"}},[s("span")])],-1),be=s("span",{class:"mopen",style:{color:"orange"}},"(",-1),xe={class:"mord accent",style:{color:"orange"}},we={class:"vlist-t"},fe={class:"vlist-r"},ze={class:"vlist",style:{height:"0.714em"}},Me=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal",style:{color:"orange"}},"x")],-1),Ee={style:{top:"-3em"}},Ae=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),Be={class:"accent-body",style:{left:"-0.2077em"}},Le={class:"overlay",style:{color:"orange",height:"0.714em",width:"0.471em"}},je={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},Ne=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Se=[Ne],qe=n('<span class="mclose" style="color:orange;">)</span><span class="mpunct" style="color:orange;">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;color:orange;">y</span><span class="mclose" style="color:orange;">)</span>',5),De=s("span",{class:"mspace",style:{"margin-right":"0.2778em"}},null,-1),Pe=s("span",{class:"mrel"},"=",-1),Ce=s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mclose"},"?")],-1),Te=s("span",{class:"mspace newline"},null,-1),Fe={class:"base"},He=s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}},null,-1),Ye=s("span",{class:"mord mathnormal",style:{"margin-right":"0.09618em"}},"J",-1),Re=s("span",{class:"mopen"},"(",-1),We={class:"mord accent"},Ue={class:"vlist-t"},Ie={class:"vlist-r"},Oe={class:"vlist",style:{height:"0.714em"}},Je=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w")],-1),Ve={style:{top:"-3em"}},Ze=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),Xe={class:"accent-body",style:{left:"-0.1522em"}},Ge={class:"overlay",style:{height:"0.714em",width:"0.471em"}},Qe={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},Ke=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),$e=[Ke],sl=n('<span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span>',7),al={class:"base"},nl=n('<span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span>',5),tl={class:"mord"},el=s("span",{class:"mord mathnormal",style:{color:"orange"}},"L",-1),ll=s("span",{class:"mopen",style:{color:"orange"}},"(",-1),pl={class:"mord",style:{color:"orange"}},il=s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em",color:"orange"}},"f",-1),ol={class:"msupsub"},cl={class:"vlist-t vlist-t2"},ml={class:"vlist-r"},rl={class:"vlist",style:{height:"0.3448em"}},hl={style:{top:"-2.545em","margin-left":"-0.1076em","margin-right":"0.05em"}},ul=s("span",{class:"pstrut",style:{height:"2.7em"}},null,-1),dl={class:"sizing reset-size6 size3 mtight",style:{color:"orange"}},gl={class:"mord mtight",style:{color:"orange"}},kl={class:"mord accent mtight",style:{color:"orange"}},yl={class:"vlist-t"},_l={class:"vlist-r"},vl={class:"vlist",style:{height:"0.714em"}},bl=s("span",{style:{top:"-2.714em"}},[s("span",{class:"pstrut",style:{height:"2.714em"}}),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02691em",color:"orange"}},"w")],-1),xl={style:{top:"-2.714em"}},wl=s("span",{class:"pstrut",style:{height:"2.714em"}},null,-1),fl={class:"accent-body",style:{left:"-0.1522em"}},zl={class:"overlay mtight",style:{color:"orange",height:"0.714em",width:"0.471em"}},Ml={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},El=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Al=[El],Bl=s("span",{class:"mpunct mtight",style:{color:"orange"}},",",-1),Ll=s("span",{class:"mord mathnormal mtight",style:{color:"orange"}},"b",-1),jl=s("span",{class:"vlist-s"},"​",-1),Nl=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2911em"}},[s("span")])],-1),Sl=s("span",{class:"mopen",style:{color:"orange"}},"(",-1),ql={class:"mord",style:{color:"orange"}},Dl={class:"mord accent",style:{color:"orange"}},Pl={class:"vlist-t"},Cl={class:"vlist-r"},Tl={class:"vlist",style:{height:"0.714em"}},Fl=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal",style:{color:"orange"}},"x")],-1),Hl={style:{top:"-3em"}},Yl=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),Rl={class:"accent-body",style:{left:"-0.2077em"}},Wl={class:"overlay",style:{color:"orange",height:"0.714em",width:"0.471em"}},Ul={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},Il=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),Ol=[Il],Jl=n('<span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:orange;"><span class="mord mathnormal mtight" style="color:orange;">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span>',1),Vl=n('<span class="mpunct" style="color:orange;">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord" style="color:orange;"><span class="mord mathnormal" style="margin-right:0.03588em;color:orange;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:orange;"><span class="mord mathnormal mtight" style="color:orange;">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose" style="color:orange;">))</span>',4),Zl=s("blockquote",null,[s("h5",{id:"_3-最优化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-最优化"},[s("span",null,"③ 最优化")])])],-1),Xl=s("p",null,"公式",-1),Gl={class:"katex-block"},Ql={class:"katex-display"},Kl={class:"katex"},$l=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"minimize "),s("mi",null,"J"),s("mo",{stretchy:"false"},"("),s("mover",{accent:"true"},[s("mi",null,"w"),s("mo",null,"⃗")]),s("mo",{separator:"true"},","),s("mi",null,"b"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," \\text{minimize }J(\\vec w,b) ")])])],-1),sp={class:"katex-html","aria-hidden":"true"},ap={class:"base"},np=n('<span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">minimize </span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mopen">(</span>',4),tp={class:"mord accent"},ep={class:"vlist-t"},lp={class:"vlist-r"},pp={class:"vlist",style:{height:"0.714em"}},ip=s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w")],-1),op={style:{top:"-3em"}},cp=s("span",{class:"pstrut",style:{height:"3em"}},null,-1),mp={class:"accent-body",style:{left:"-0.1522em"}},rp={class:"overlay",style:{height:"0.714em",width:"0.471em"}},hp={xmlns:"http://www.w3.org/2000/svg",width:"0.471em",height:"0.714em",style:{width:"0.471em"},viewBox:"0 0 471 714",preserveAspectRatio:"xMinYMin"},up=s("path",{d:`M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`},null,-1),dp=[up],gp=s("span",{class:"mpunct"},",",-1),kp=s("span",{class:"mspace",style:{"margin-right":"0.1667em"}},null,-1),yp=s("span",{class:"mord mathnormal"},"b",-1),_p=s("span",{class:"mclose"},")",-1),vp=n(`<hr><h4 id="逻辑回归中" tabindex="-1"><a class="header-anchor" href="#逻辑回归中"><span>逻辑回归中</span></a></h4><blockquote><h5 id="_1-定义模型-1" tabindex="-1"><a class="header-anchor" href="#_1-定义模型-1"><span>① 定义模型</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> b
f_x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>mp<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="_2-定义loss函数和cost函数-1" tabindex="-1"><a class="header-anchor" href="#_2-定义loss函数和cost函数-1"><span>② 定义Loss函数和Cost函数</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>loss <span class="token operator">=</span> <span class="token operator">-</span>y <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>f_x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>f_x<span class="token punctuation">)</span>\\\\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h5 id="_3-最优化-1" tabindex="-1"><a class="header-anchor" href="#_3-最优化-1"><span>③ 最优化</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
w <span class="token operator">=</span> w <span class="token operator">-</span> alpha <span class="token operator">*</span> dj_dw
b <span class="token operator">=</span> b <span class="token operator">-</span> alpha <span class="token operator">*</span> dj_dw
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="神经网络中" tabindex="-1"><a class="header-anchor" href="#神经网络中"><span>神经网络中</span></a></h4><blockquote><h5 id="_1-定义模型-2" tabindex="-1"><a class="header-anchor" href="#_1-定义模型-2"><span>① 定义模型</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>
    Dense<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Dense<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Dense<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="_2-定义loss函数和cost函数-2" tabindex="-1"><a class="header-anchor" href="#_2-定义loss函数和cost函数-2"><span>② 定义Loss函数和Cost函数</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span>BinaryCrossentropy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h5 id="_3-最优化-2" tabindex="-1"><a class="header-anchor" href="#_3-最优化-2"><span>③ 最优化</span></a></h5></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="神经网络的优化方法" tabindex="-1"><a class="header-anchor" href="#神经网络的优化方法"><span>神经网络的优化方法</span></a></h2><h3 id="model优化-正则化" tabindex="-1"><a class="header-anchor" href="#model优化-正则化"><span>Model优化 - 正则化</span></a></h3><p>正则化之前介绍过，不再赘述</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">,</span>    kernel_regularizer<span class="token operator">=</span>L2<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;relu&#39;</span><span class="token punctuation">,</span>    kernel_regularizer<span class="token operator">=</span>L2<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">,</span> kernel_regularizer<span class="token operator">=</span>L2<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="optimize优化-减少误差" tabindex="-1"><a class="header-anchor" href="#optimize优化-减少误差"><span>Optimize优化 - 减少误差</span></a></h3><p>（这章P67 3.4我其实不太看得懂）</p><p>先引一个东西：数字舍入误差（numerical roundoff error）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x1 <span class="token operator">=</span> <span class="token number">2.0</span><span class="token operator">/</span><span class="token number">10000</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>x1<span class="token punctuation">:</span><span class="token format-spec">.18f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>	<span class="token comment"># 保留18位小数</span>
<span class="token comment"># 输出：0.000200000000000000</span>

x2 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>x1<span class="token punctuation">:</span><span class="token format-spec">.18f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>	<span class="token comment"># 保留18位小数</span>
<span class="token comment"># 输出：0.000199999999999978</span>

<span class="token comment"># 为了减少这些误差，在TensorFlow进行更准确的计算，原理是可以将1/10000看作一个中间量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>神经网络中的代码优化如下</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 将</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss <span class="token operator">=</span> SparseCategoricalCrossentropy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 替换成</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss <span class="token operator">=</span> SparseCategoricalCrossentropy<span class="token punctuation">(</span>from_logits<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理是</p>`,28),bp=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"将"),s("mspace",{linebreak:"newline"}),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"a"),s("mo",null,"="),s("mi",null,"g"),s("mo",{stretchy:"false"},"("),s("mi",null,"z"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"z")])])])])])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"L"),s("mi",null,"o"),s("mi",null,"s"),s("mi",null,"s"),s("mo",null,"="),s("mo",null,"−"),s("mi",null,"y"),s("mi",null,"log"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mi",null,"a"),s("mo",{stretchy:"false"},")"),s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mi",null,"log"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"a"),s("mo",{stretchy:"false"},")")])])])])])]),s("mspace",{linebreak:"newline"}),s("mtext",null,"变成"),s("mspace",{linebreak:"newline"}),s("mi",null,"L"),s("mi",null,"o"),s("mi",null,"s"),s("mi",null,"s"),s("mo",null,"="),s("mo",null,"−"),s("mi",null,"y"),s("mi",null,"log"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"z")])])])]),s("mo",{stretchy:"false"},")"),s("mo",null,"−"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"y"),s("mo",{stretchy:"false"},")"),s("mi",null,"log"),s("mo",null,"⁡"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mfrac",null,[s("mn",null,"1"),s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("msup",null,[s("mi",null,"e"),s("mrow",null,[s("mo",null,"−"),s("mi",null,"z")])])])]),s("mo",{stretchy:"false"},")"),s("mspace",{linebreak:"newline"})]),s("annotation",{encoding:"application/x-tex"}," 将\\\\ \\begin{cases} a=g(z)=\\frac1{1+e^{-z}}\\\\ Loss=-y\\log (a)-(1-y)\\log(1-a)\\\\ \\end{cases}\\\\ 变成\\\\ Loss=-y\\log (\\frac1{1+e^{-z}})-(1-y)\\log(1-\\frac1{1+e^{-z}})\\\\ ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"将")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3em","vertical-align":"-1.25em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size4"},"{")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-l"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.69em"}},[s("span",{style:{top:"-3.69em"}},[s("span",{class:"pstrut",style:{height:"3.008em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8451em"}},[s("span",{style:{top:"-2.655em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1"),s("span",{class:"mbin mtight"},"+"),s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7027em"}},[s("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.04398em"}},"z")])])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.394em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.4033em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])]),s("span",{style:{top:"-2.25em"}},[s("span",{class:"pstrut",style:{height:"3.008em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"oss"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mclose"},")")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.19em"}},[s("span")])])])])])]),s("span",{class:"mclose nulldelimiter"})])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"变成")]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"L"),s("span",{class:"mord mathnormal"},"oss"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0908em","vertical-align":"-0.7693em"}}),s("span",{class:"mord"},"−"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6973em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.04398em"}},"z")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0908em","vertical-align":"-0.7693em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"e"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6973em"}},[s("span",{style:{top:"-2.989em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.04398em"}},"z")])])])])])])])])])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7693em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mclose"},")")]),s("span",{class:"mspace newline"})])])])],-1),xp=s("h3",{id:"optimize优化-adam优化算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#optimize优化-adam优化算法"},[s("span",null,"Optimize优化 - AdaM优化算法")])],-1),wp=s("p",null,"概念",-1),fp=s("p",null,"AdaM算法直觉（AdaM Algorithm Intuition） 其中AdaM含义为：自适应估算方法（AdaM，Adaptive Moment estimation）",-1),zp=s("p",null,[a("我们知道梯度下降法需要设置学习率"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α")]),s("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),a("，学习率过大会导致无法收敛、过小会导致收敛速度太慢。 而该算法能够动态自动调节"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α")]),s("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),a("，刚开始时快速下降，收敛时速度减慢")],-1),Mp=s("p",null,"大概原理",-1),Ep=s("p",null,[a("当往一个方向下降时，增大"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"α"),s("mi",null,"j")])]),s("annotation",{encoding:"application/x-tex"},"\\alpha_j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7167em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])]),a("。当发现"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α")]),s("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),a("来回正当时，减低"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"α"),s("mi",null,"j")])]),s("annotation",{encoding:"application/x-tex"},"\\alpha_j")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7167em","vertical-align":"-0.2861em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0037em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2861em"}},[s("span")])])])])])])])])],-1),Ap=n(`<p>代码写法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;sigmoid&#39;</span><span class="token punctuation">)</span>
    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">&#39;linear&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>
    optimizer<span class="token operator">=</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>optimizers<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>learning<span class="token operator">-</span>rate<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>		 <span class="token comment"># 指定优化器（使用Adam算法优化，初始学习率为10^-3）</span>
    loss<span class="token operator">=</span>tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>losses<span class="token punctuation">.</span>SparseCategoricalCrossentropy<span class="token punctuation">(</span>from_logits<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Bp(Lp,jp){const l=o("ExternalLinkIcon");return t(),e("div",null,[b,x,w,f,z,s("ul",null,[M,E,A,B,s("li",null,[s("span",L,[j,s("span",N,[s("span",S,[q,s("span",D,[s("span",P,[s("span",C,[s("span",T,[F,s("span",H,[Y,s("span",R,[s("span",W,[(t(),e("svg",U,O))])])])])])])])])])]),a("表示输入层的矢量表示，等价于"),s("span",J,[V,s("span",Z,[s("span",X,[G,s("span",Q,[s("span",K,[s("span",$,[s("span",ss,[s("span",as,[ns,s("span",ts,[es,s("span",ls,[s("span",ps,[(t(),e("svg",is,cs))])])])])])])]),ms])])])])]),s("li",null,[s("span",rs,[hs,s("span",us,[s("span",ds,[gs,s("span",ks,[s("span",ys,[s("span",_s,[s("span",vs,[s("span",bs,[xs,s("span",ws,[fs,s("span",zs,[s("span",Ms,[(t(),e("svg",Es,Bs))])])])])])])]),Ls])])])]),a("表示序列"),js,a(" (注意从0开始计数) 的神经网络层的输出的矢量表示")])]),Ns,Ss,s("p",qs,[s("span",Ds,[s("span",Ps,[Cs,s("span",Ts,[Fs,s("span",Hs,[Ys,Rs,Ws,s("span",Us,[s("span",Is,[s("span",Os,[s("span",Js,[s("span",Vs,[Zs,s("span",Xs,[Gs,s("span",Qs,[s("span",Ks,[(t(),e("svg",$s,aa))])])])])])])]),na]),ta,ea,la]),s("span",pa,[ia,s("span",oa,[s("span",ca,[s("span",ma,[s("span",ra,[s("span",ha,[ua,s("span",da,[ga,s("span",ka,[s("span",ya,[(t(),e("svg",_a,ba))])])])])])])]),xa]),wa,fa,za]),Ma])])])]),Ea,s("ul",null,[Aa,Ba,La,ja,s("li",null,[s("span",Na,[Sa,s("span",qa,[s("span",Da,[Pa,s("span",Ca,[s("span",Ta,[s("span",Fa,[s("span",Ha,[Ya,s("span",Ra,[Wa,s("span",Ua,[s("span",Ia,[(t(),e("svg",Oa,Va))])])])])])])])])])]),a("表示输入层的矢量表示，等价于"),s("span",Za,[Xa,s("span",Ga,[s("span",Qa,[Ka,s("span",$a,[s("span",sn,[s("span",an,[s("span",nn,[s("span",tn,[en,s("span",ln,[pn,s("span",on,[s("span",cn,[(t(),e("svg",mn,hn))])])])])])])]),un])])])])]),s("li",null,[s("span",dn,[gn,s("span",kn,[s("span",yn,[_n,s("span",vn,[s("span",bn,[s("span",xn,[s("span",wn,[s("span",fn,[zn,s("span",Mn,[En,s("span",An,[s("span",Bn,[(t(),e("svg",Ln,Nn))])])])])])])]),Sn])])])]),a("表示序列"),qn,a(" (注意从0开始计数) 的神经网络层的输出的矢量表示")])]),Dn,s("ul",null,[s("li",null,[s("a",Pn,[a("【CSDN】前向传播算法(Forward propagation)与反向传播算法(Back propagation)"),p(l)])]),s("li",null,[s("a",Cn,[a("【知乎】什么是前向传播算法(Forward propagation)？"),p(l)])])]),Tn,Fn,Hn,s("p",Yn,[s("span",Rn,[s("span",Wn,[Un,s("span",In,[s("span",On,[Jn,s("span",Vn,[Zn,s("span",Xn,[s("span",Gn,[s("span",Qn,[s("span",Kn,[s("span",$n,[st,s("span",at,[s("span",nt,[s("span",tt,[s("span",et,[s("span",lt,[s("span",pt,[it,s("span",ot,[ct,s("span",mt,[s("span",rt,[(t(),e("svg",ht,dt))])])])])])])]),gt,kt])])])]),yt]),_t])])]),vt,s("span",bt,[s("span",xt,[s("span",wt,[s("span",ft,[zt,s("span",Mt,[Et,s("span",At,[s("span",Bt,[(t(),e("svg",Lt,Nt))])])])])])])]),St,qt,Dt]),Pt])])])]),Ct,Tt,s("p",Ft,[s("span",Ht,[s("span",Yt,[Rt,s("span",Wt,[s("span",Ut,[It,s("span",Ot,[Jt,Vt,s("span",Zt,[Xt,s("span",Gt,[s("span",Qt,[s("span",Kt,[s("span",$t,[s("span",se,[ae,s("span",ne,[s("span",te,[s("span",ee,[s("span",le,[s("span",pe,[s("span",ie,[oe,s("span",ce,[me,s("span",re,[s("span",he,[(t(),e("svg",ue,ge))])])])])])])]),ke,ye])])])]),_e]),ve])])]),be,s("span",xe,[s("span",we,[s("span",fe,[s("span",ze,[Me,s("span",Ee,[Ae,s("span",Be,[s("span",Le,[(t(),e("svg",je,Se))])])])])])])]),qe]),De,Pe]),Ce,Te,s("span",Fe,[He,Ye,Re,s("span",We,[s("span",Ue,[s("span",Ie,[s("span",Oe,[Je,s("span",Ve,[Ze,s("span",Xe,[s("span",Ge,[(t(),e("svg",Qe,$e))])])])])])])]),sl]),s("span",al,[nl,s("span",tl,[el,ll,s("span",pl,[il,s("span",ol,[s("span",cl,[s("span",ml,[s("span",rl,[s("span",hl,[ul,s("span",dl,[s("span",gl,[s("span",kl,[s("span",yl,[s("span",_l,[s("span",vl,[bl,s("span",xl,[wl,s("span",fl,[s("span",zl,[(t(),e("svg",Ml,Al))])])])])])])]),Bl,Ll])])])]),jl]),Nl])])]),Sl,s("span",ql,[s("span",Dl,[s("span",Pl,[s("span",Cl,[s("span",Tl,[Fl,s("span",Hl,[Yl,s("span",Rl,[s("span",Wl,[(t(),e("svg",Ul,Ol))])])])])])])]),Jl]),Vl])])])])])]),Zl,Xl,s("p",Gl,[s("span",Ql,[s("span",Kl,[$l,s("span",sp,[s("span",ap,[np,s("span",tp,[s("span",ep,[s("span",lp,[s("span",pp,[ip,s("span",op,[cp,s("span",mp,[s("span",rp,[(t(),e("svg",hp,dp))])])])])])])]),gp,kp,yp,_p])])])])]),vp,bp,xp,wp,fp,zp,Mp,Ep,Ap])}const qp=i(v,[["render",Bp],["__file","01. 神经网络.html.vue"]]),Dp=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Artificial_Intelligence/%E7%BA%BF%E6%80%A7%E5%9E%8B/01.%20%E5%90%B4%E6%81%A9%E8%BE%BE%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/02.%20%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/01.%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html","title":"吴恩达机器学习","lang":"zh-CN","frontmatter":{"description":"吴恩达机器学习 目录 第二课导读 神经网络（Neural Networks） 推理（预言） 训练 建立机器学习系统的一些实用建议 决策树（Decision Tree） 神经网络（Neural Networks） 入门 入门 起源 模拟神经元和大脑（Neuron & Brain） 研究历史 起源：1950年尝试去模拟大脑 1980~1990年，再次流行 ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Artificial_Intelligence/%E7%BA%BF%E6%80%A7%E5%9E%8B/01.%20%E5%90%B4%E6%81%A9%E8%BE%BE%20%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/02.%20%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/01.%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"吴恩达机器学习"}],["meta",{"property":"og:description","content":"吴恩达机器学习 目录 第二课导读 神经网络（Neural Networks） 推理（预言） 训练 建立机器学习系统的一些实用建议 决策树（Decision Tree） 神经网络（Neural Networks） 入门 入门 起源 模拟神经元和大脑（Neuron & Brain） 研究历史 起源：1950年尝试去模拟大脑 1980~1990年，再次流行 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"吴恩达机器学习\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"吴恩达机器学习","slug":"吴恩达机器学习","link":"#吴恩达机器学习","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"神经网络（Neural Networks）","slug":"神经网络-neural-networks","link":"#神经网络-neural-networks","children":[{"level":2,"title":"入门","slug":"入门","link":"#入门","children":[{"level":3,"title":"入门","slug":"入门-1","link":"#入门-1","children":[{"level":4,"title":"起源","slug":"起源","link":"#起源","children":[]},{"level":4,"title":"神经网络为何如此高效","slug":"神经网络为何如此高效","link":"#神经网络为何如此高效","children":[]}]},{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[{"level":4,"title":"激活函数（Activation Function）","slug":"激活函数-activation-function","link":"#激活函数-activation-function","children":[]},{"level":4,"title":"神经元（Neuron）/ 单元（Units）","slug":"神经元-neuron-单元-units","link":"#神经元-neuron-单元-units","children":[]},{"level":4,"title":"层（Layer）","slug":"层-layer","link":"#层-layer","children":[]},{"level":4,"title":"神经网络（Neural Networks）","slug":"神经网络-neural-networks-1","link":"#神经网络-neural-networks-1","children":[]}]},{"level":3,"title":"使用举例","slug":"使用举例","link":"#使用举例","children":[{"level":4,"title":"举例 - 需求预测（Demand Prediction）","slug":"举例-需求预测-demand-prediction","link":"#举例-需求预测-demand-prediction","children":[]},{"level":4,"title":"举例 - 图像感知、物品识别","slug":"举例-图像感知、物品识别","link":"#举例-图像感知、物品识别","children":[]}]}]},{"level":2,"title":"前向传播（Forward Propagation）","slug":"前向传播-forward-propagation","link":"#前向传播-forward-propagation","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"公式","slug":"公式","link":"#公式","children":[]},{"level":3,"title":"代码基础","slug":"代码基础","link":"#代码基础","children":[{"level":4,"title":"NumPy中数据的形式","slug":"numpy中数据的形式","link":"#numpy中数据的形式","children":[]},{"level":4,"title":"Tensorflow中数据形式","slug":"tensorflow中数据形式","link":"#tensorflow中数据形式","children":[]}]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":4,"title":"举例 - 手写体数字识别","slug":"举例-手写体数字识别","link":"#举例-手写体数字识别","children":[]},{"level":4,"title":"举例 - 判断咖啡是否煮得好","slug":"举例-判断咖啡是否煮得好","link":"#举例-判断咖啡是否煮得好","children":[]}]},{"level":3,"title":"代码原理","slug":"代码原理","link":"#代码原理","children":[{"level":4,"title":"未矩阵化","slug":"未矩阵化","link":"#未矩阵化","children":[]},{"level":4,"title":"矩阵化","slug":"矩阵化","link":"#矩阵化","children":[]}]}]},{"level":2,"title":"训练（Model Training）","slug":"训练-model-training","link":"#训练-model-training","children":[{"level":3,"title":"代码实现","slug":"代码实现-1","link":"#代码实现-1","children":[]},{"level":3,"title":"训练的三个步骤","slug":"训练的三个步骤","link":"#训练的三个步骤","children":[{"level":4,"title":"① 定义模型、定义层与激活函数","slug":"_1-定义模型、定义层与激活函数","link":"#_1-定义模型、定义层与激活函数","children":[]},{"level":4,"title":"② 定义Loss函数、Cost函数","slug":"_2-定义loss函数、cost函数","link":"#_2-定义loss函数、cost函数","children":[]},{"level":4,"title":"③ 最优化、模型训练","slug":"_3-最优化、模型训练","link":"#_3-最优化、模型训练","children":[]}]},{"level":3,"title":"训练的三个步骤 - 具体","slug":"训练的三个步骤-具体","link":"#训练的三个步骤-具体","children":[{"level":4,"title":"公式中","slug":"公式中","link":"#公式中","children":[]},{"level":4,"title":"逻辑回归中","slug":"逻辑回归中","link":"#逻辑回归中","children":[]},{"level":4,"title":"神经网络中","slug":"神经网络中","link":"#神经网络中","children":[]}]}]},{"level":2,"title":"神经网络的优化方法","slug":"神经网络的优化方法","link":"#神经网络的优化方法","children":[{"level":3,"title":"Model优化 - 正则化","slug":"model优化-正则化","link":"#model优化-正则化","children":[]},{"level":3,"title":"Optimize优化 - 减少误差","slug":"optimize优化-减少误差","link":"#optimize优化-减少误差","children":[]},{"level":3,"title":"Optimize优化 - AdaM优化算法","slug":"optimize优化-adam优化算法","link":"#optimize优化-adam优化算法","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.35,"words":3106},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Artificial_Intelligence/线性型/01. 吴恩达 机器学习/02. 高级学习算法/01. 神经网络.md","excerpt":"\\n<h1>目录</h1>\\n<p>第二课导读</p>\\n<ul>\\n<li>神经网络（Neural Networks）\\n<ul>\\n<li>推理（预言）</li>\\n<li>训练</li>\\n</ul>\\n</li>\\n<li>建立机器学习系统的一些实用建议</li>\\n<li>决策树（Decision Tree）</li>\\n</ul>\\n<h1>神经网络（Neural Networks）</h1>\\n<h2>入门</h2>\\n<h3>入门</h3>\\n<h4>起源</h4>\\n<p>模拟神经元和大脑（Neuron &amp; Brain）</p>\\n<p>研究历史</p>\\n<ul>\\n<li>起源：1950年尝试去模拟大脑</li>\\n<li>1980~1990年，再次流行</li>\\n<li>2005年，兴起</li>\\n<li>神经网络近期增长，也很大程度因为数据的数量多了很多，即大数据。这得以去训练大型神经网络</li>\\n</ul>","autoDesc":true}');export{qp as comp,Dp as data};
