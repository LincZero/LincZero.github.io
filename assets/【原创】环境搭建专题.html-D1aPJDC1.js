import{_ as t,c as p,b as i,a as s,e as a,d as l,o,r as c}from"./app-CcLagq2a.js";const r={},d={href:"https://luckymrwang.github.io/2022/08/19/%E6%90%AD%E5%BB%BA-eBPF-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#Ubuntu-20-04",target:"_blank",rel:"noopener noreferrer"},u={href:"https://cloud.tencent.com/developer/tools/blog-entry?target=https://www.vagrantup.com/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/linuxkit/linuxkit?spm=a2c6h.12873639.article-detail.5.3e805798KLBkfr",target:"_blank",rel:"noopener noreferrer"},v={href:"https://hub.docker.com/r/docker/for-desktop-kernel/tags?spm=a2c6h.12873639.article-detail.6.3e805798KLBkfr",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/iovisor/bcc?spm=a2c6h.12873639.article-detail.7.3e805798KLBkfr",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/iovisor/bpftrace?spm=a2c6h.12873639.article-detail.8.3e805798KLBkfr",target:"_blank",rel:"noopener noreferrer"};function h(f,n){const e=c("ExternalLinkIcon");return o(),p("div",null,[n[23]||(n[23]=i('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="环境搭建专题" tabindex="-1"><a class="header-anchor" href="#环境搭建专题"><span>环境搭建专题</span></a></h1><p>参考：</p>',4)),s("ul",null,[n[2]||(n[2]=s("li",null,"狄卫华博客",-1)),n[3]||(n[3]=s("li",null,"BBC github wiki",-1)),s("li",null,[n[1]||(n[1]=a("一些专题博客 ")),s("ul",null,[s("li",null,[s("a",d,[n[0]||(n[0]=a("搭建 eBPF 开发环境")),l(e)])])])])]),n[24]||(n[24]=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><h3 id="最低环境" tabindex="-1"><a class="header-anchor" href="#最低环境"><span>最低环境</span></a></h3><p>虽然 Linux 内核很早就已经支持了 eBPF，但很多新特性都是在 4.x 版本中逐步增加的。所以，想要稳定运行 eBPF 程序，内核至少需要 4.9 或者更新的版本。而在开发和学习 eBPF 时，为了体验和掌握最新的 eBPF 特性，我推荐使用更新的 5.x 内核。</p><p>作为 eBPF 最重大的改进之一，一次编译到处执行（简称 CO-RE）解决了内核数据结构在不同版本差异导致的兼容性问题。不过，在使用 CO-RE 之前，内核需要开启 <code>CONFIG_DEBUG_INFO_BTF=y</code> 和 <code>CONFIG_DEBUG_INFO=y</code> 这两个编译选项。为了避免你在首次学习 eBPF 时就去重新编译内核，我推荐使用已经默认开启这些编译选项的发行版，作为你的开发环境，比如：</p><ul><li>Ubuntu 20.10+</li><li>Fedora 31+</li><li>RHEL 8.2+</li><li>Debian 11+</li></ul><h3 id="设置内核编译选项" tabindex="-1"><a class="header-anchor" href="#设置内核编译选项"><span>设置内核编译选项</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libbpf-dev libelf-dev llvm clang dwarves <span class="token comment"># 确保已安装 BTF 工具</span>
<span class="token builtin class-name">cd</span> /usr/src/linux-source-5.15.0
<span class="token function">make</span> clean <span class="token comment"># 清理当前的内核编译</span>

<span class="token comment"># 配置内核并启用 CONFIG_DEBUG_INFO_BTF 1（如果没该文件，这个有可能不行，就用下面那个方案）</span>
<span class="token function">vim</span> .config
<span class="token comment"># 设置这两个选项，如果不存在，将其添加到文件末尾</span>
<span class="token comment"># CONFIG_DEBUG_INFO=y</span>
<span class="token comment"># CONFIG_DEBUG_INFO_BTF=y</span>

<span class="token comment"># 配置内核并启用 CONFIG_DEBUG_INFO_BTF 2</span>
<span class="token function">make</span> menuconfig <span class="token comment"># 打开内核配置菜单</span>
<span class="token comment"># 进入到 “General setup” --&gt; “Compile-time checks and compiler options”，找到 “Generate BTF (BPF Type Format) type info” 配置选项，选中它。确保 CONFIG_DEBUG_INFO_BTF 被设置为 y。</span>
<span class="token comment"># 如果找不到按\`/\`键对 CONFIG_DEBUG_INFO_BTF 进行路径搜索。我这里是在/Kernel hacking/Compile-time checks and compiler options/Compile the kernel with debug info里面</span>

<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> <span class="token comment"># 编译内核</span>
<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf <span class="token comment"># 重新尝试</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境"><span>开发环境</span></a></h3>`,8)),s("ul",null,[s("li",null,[n[5]||(n[5]=a("linux环境：支持eBPF最新特性的内核版本需要5.X以及避免第一次学习就要重新编译内核麻烦推荐Ubuntu 20.10+、Debian 11+，可以使用云机器、也可以使用")),s("a",u,[n[4]||(n[4]=a("vgrant")),l(e)]),n[6]||(n[6]=a("虚拟机；"))]),n[7]||(n[7]=s("li",null,"LLVM：可以将eBPF程序编写成BPF bytecode；",-1)),n[8]||(n[8]=s("li",null,"make：C语言编译工具；",-1)),n[9]||(n[9]=s("li",null,"BBC：BPF工具集和它所以来的头文件；",-1)),n[10]||(n[10]=s("li",null,"libbpf：与内核代码仓库实时同步；",-1)),n[11]||(n[11]=s("li",null,"pbftool：内核代码提供的 eBPF 程序管理工具；",-1))]),n[25]||(n[25]=i(`<h3 id="本章常用的一些linux目录" tabindex="-1"><a class="header-anchor" href="#本章常用的一些linux目录"><span>本章常用的一些Linux目录</span></a></h3><p>完整的Linux常用路径去看对应的笔记，这里没只是这章会用的</p><ul><li>/usr/ <ul><li>src/， 通过apt-get下载Linux内核的源码会在这，如果是用git/wget的则是自定义路径</li><li>share/bcc/， bcc install完之后会在这</li><li>lib/ <ul><li>python3/</li><li>llvm-10/</li></ul></li><li>bin/python/</li></ul></li><li>/boot/config-$(uname -r)， 内核配置</li><li>/proc/config.gz</li></ul><h2 id="开始配置" tabindex="-1"><a class="header-anchor" href="#开始配置"><span>开始配置</span></a></h2><h3 id="配置-ebpf-开发环境" tabindex="-1"><a class="header-anchor" href="#配置-ebpf-开发环境"><span>配置 eBPF 开发环境</span></a></h3><p>见后</p><h1 id="个人环境问题" tabindex="-1"><a class="header-anchor" href="#个人环境问题"><span>个人环境问题</span></a></h1><h2 id="介绍个人使用的环境" tabindex="-1"><a class="header-anchor" href="#介绍个人使用的环境"><span>介绍个人使用的环境</span></a></h2><p>不同于一些网上的资料，我这里的环境有所不同。其中 “208” 特指公司电脑贴着 &quot;1.208&quot; 标签的ip为1.208的2U服务器</p><h3 id="原文配置" tabindex="-1"><a class="header-anchor" href="#原文配置"><span>原文配置</span></a></h3><p>用的是 VirtualBox + Vagrant</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue
Ubuntu <span class="token number">20.04</span>.1 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu <span class="token number">20.04</span>.1 LTS
Release:	<span class="token number">20.04</span>
Codename:	focal

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">5.4</span>.0-52-generic

$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential <span class="token function">git</span> <span class="token function">make</span> libelf-dev clang llvm <span class="token function">strace</span> <span class="token function">tar</span> bpfcc-tools linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> gcc-multilib  flex  bison libssl-dev <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="官网在线虚拟机的配置" tabindex="-1"><a class="header-anchor" href="#官网在线虚拟机的配置"><span>官网在线虚拟机的配置</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue
Ubuntu <span class="token number">22.04</span>.2 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu <span class="token number">22.04</span>.2 LTS
Release:        <span class="token number">22.04</span>
Codename:       jammy

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">5.19</span>.0-1022-gcp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个环境挺好，但缺点就是不能保存虚拟机状态，每半小时多就会被重置。</p><p>如果这里像前面原文那样安装环境，依然会有一些报错。但就不解决了</p><h3 id="wsl" tabindex="-1"><a class="header-anchor" href="#wsl"><span>wsl</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue <span class="token comment"># 查看发行版</span>
Ubuntu <span class="token number">20.04</span>.6 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span> <span class="token comment"># 查看发行版 (Linux Standard Base Release)</span>
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu <span class="token number">20.04</span>.6 LTS
Release:        <span class="token number">20.04</span>
Codename:       focal

$ <span class="token function">uname</span> <span class="token parameter variable">-a</span> <span class="token comment"># 查看内核版本</span>
Linux Linc-Main-Pc <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2 <span class="token comment">#1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux</span>

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span> <span class="token comment"># 查看内核版本 (更省略的命令)</span>
Linux <span class="token number">5.10</span>.16.3-microsoft-standard-WSL2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>wsl在安装 <code>linux-headers-$(uname -r)</code> 时会遇到一些问题： linux-headers-$(uname -r)： 这个包包含了<strong>用于编译内核模块的头文件</strong>，其中 <code>$(uname -r)</code> 会自动获取当前正在使用的内核版本号。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span>
Reading package lists<span class="token punctuation">..</span>. Done
Building dependency tree
Reading state information<span class="token punctuation">..</span>. Done
E: Unable to <span class="token function">locate</span> package linux-headers-5.10.16.3-microsoft-standard-WSL2
E: Couldn<span class="token string">&#39;t find any package by glob &#39;</span>linux-headers-5.10.16.3-microsoft-standard-WSL2&#39;

<span class="token comment"># 解决方法：先手动指定内核版本号</span>
<span class="token variable">$uname</span> <span class="token parameter variable">-r</span>
<span class="token number">5.10</span>.16.3-microsoft-standard-WSL2
$ <span class="token function">apt</span> <span class="token function">install</span> linux-headers-5.10.16.3-microsoft-standard-WSL2 <span class="token comment"># 这是不行的，依然报相同的错误，没有</span>

<span class="token comment"># 然后尝试列举可用的内核版本号，例如这里我选择了其中一个</span>
$ <span class="token function">sudo</span> <span class="token function">apt</span> update
$ <span class="token function">sudo</span> <span class="token function">apt</span> search linux-headers
linux-headers-5.10.0-1057-oem/focal-updates,focal-security <span class="token number">5.10</span>.0-1057.61 amd64
  Linux kernel headers <span class="token keyword">for</span> version <span class="token number">5.10</span>.0 on <span class="token number">64</span> bit x86 SMP
$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> linux-headers-5.10.0-1057-oem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_208机器-旧系统" tabindex="-1"><a class="header-anchor" href="#_208机器-旧系统"><span>208机器（旧系统）</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue
Debian GNU/Linux <span class="token number">10</span> <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID: Debian
Description:    Debian GNU/Linux <span class="token number">10</span> <span class="token punctuation">(</span>buster<span class="token punctuation">)</span>
Release:        <span class="token number">10</span>
Codename:       buster

$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux MiWiFi-R4ACv2-srv-208 <span class="token number">4.19</span>.0-24-amd64 <span class="token comment">#1 SMP Debian 4.19.282-1 (2023-04-29) x86_64 GNU/Linux</span>
$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">4.19</span>.0-24-amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然是debian10，但那些包居然都完美安装了</p><h3 id="_208机器-新系统" tabindex="-1"><a class="header-anchor" href="#_208机器-新系统"><span>208机器（新系统）</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue
Ubuntu <span class="token number">22.04</span>.2 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu <span class="token number">22.04</span>.2 LTS
Release:        <span class="token number">22.04</span>
Codename:       jammy

$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux msy <span class="token number">5.15</span>.0-76-generic <span class="token comment">#83-Ubuntu SMP Thu Jun 15 19:16:32 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux</span>
$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">5.15</span>.0-76-generic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vagrant-virtualbox" tabindex="-1"><a class="header-anchor" href="#vagrant-virtualbox"><span>vagrant + virtualBox</span></a></h3><p>总觉得这个环境有问题，好奇怪的</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/issue
<span class="token punctuation">\\</span>S
Kernel <span class="token punctuation">\\</span>r on an <span class="token punctuation">\\</span>m <span class="token punctuation">(</span><span class="token punctuation">\\</span>l<span class="token punctuation">)</span>

$ lsb_relase <span class="token parameter variable">-a</span>
-bash: lsb_release: <span class="token builtin class-name">command</span> not found

$ uanme <span class="token parameter variable">-a</span>
Linux localhost.localdomain <span class="token number">6.2</span>.9-300.fc38.x86_64 <span class="token comment">#1 SMP PREEMPT_DYNAMIC Thr Mar 30 22:32:58 UTC 2023 x86_64 GNU/Linux</span>

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">6.2</span>.9-300.gc38.x86_64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从0开始的配置记录" tabindex="-1"><a class="header-anchor" href="#从0开始的配置记录"><span>从0开始的配置记录</span></a></h2><p>该章节用于完整记录从新系统开始到编译成功的所有步骤（尽量不漏太多），利于环境的复现的配置</p><h3 id="_208版-编译内核中的bpf-demo" tabindex="-1"><a class="header-anchor" href="#_208版-编译内核中的bpf-demo"><span>208版 编译内核中的bpf demo</span></a></h3><p>这个环境配置与编译的方法是狄卫华博客第三章的内容，可以去看那边</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装新系统、修复开机慢、安装ifocnfig、配置静态ip</span>

<span class="token comment"># 检查发行版本和内核版本（见上）</span>

<span class="token function">apt</span> update
<span class="token function">apt</span> <span class="token function">install</span> build-essential <span class="token function">git</span> <span class="token function">make</span> libelf-dev clang llvm <span class="token function">strace</span> <span class="token function">tar</span> bpfcc-tools linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> gcc-multilib  flex  bison libssl-dev <span class="token parameter variable">-y</span>
<span class="token function">apt-cache</span> search linux-source
<span class="token comment"># 输出：</span>
<span class="token comment"># linux-source - Linux kernel source with Ubuntu patches</span>
<span class="token comment"># linux-source-5.15.0 - Linux kernel source for version 5.15.0 with Ubuntu patches</span>
<span class="token comment"># linux-source-5.19.0 - Linux kernel source for version 5.19.0 with Ubuntu patches</span>
<span class="token comment"># linux-source-6.2.0 - Linux kernel source for version 6.2.0 with Ubuntu patches</span>
<span class="token function">apt</span> <span class="token function">install</span> linux-source-5.15.0
<span class="token builtin class-name">cd</span> /usr/src
<span class="token function">ls</span> <span class="token parameter variable">-hl</span>
<span class="token function">tar</span> <span class="token parameter variable">-jxvf</span> linux-source-5.15.0.tar.bz2
<span class="token builtin class-name">cd</span> linux-source-5.15.0
<span class="token function">make</span> scripts <span class="token comment"># 可选</span>
<span class="token function">cp</span> <span class="token parameter variable">-v</span> /boot/config-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> .config <span class="token comment"># make defconfig 或者 make menuconfig</span>
<span class="token function">make</span> headers_install
<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf <span class="token comment"># 配置出错（此时查看后面的解决方法）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-重新生成配置项" tabindex="-1"><a class="header-anchor" href="#坑1-重新生成配置项"><span>坑1，重新生成配置项</span></a></h4><p>可以使用 make oldconfig &amp;&amp; make prepare，修复一部分，但依然还会有其他问题</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> prepare
<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf
<span class="token comment"># 输出：</span>
<span class="token comment"># samples/bpf/Makefile:369: *** Cannot find a vmlinux for VMLINUX_BTF at any of &quot;  /usr/src/linux-source-5.15.0/vmlinux&quot;, build the kernel or set VMLINUX_BTF or VMLINUX_H variable.  Stop.</span>
<span class="token comment"># make: *** [Makefile:1914: samples/bpf] Error 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑2-找不到vmlinux-3" tabindex="-1"><a class="header-anchor" href="#坑2-找不到vmlinux-3"><span>坑2，找不到vmlinux *3</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
  CC  samples/bpf/xdp_fwd_user.o
samples/bpf/Makefile:369: *** Cannot <span class="token function">find</span> a vmlinux <span class="token keyword">for</span> VMLINUX_BTF at any of <span class="token string">&quot;  /usr/src/linux-source-5.15.0/vmlinux&quot;</span>, build the kernel or <span class="token builtin class-name">set</span> VMLINUX_BTF or VMLINUX_H variable.  Stop.
make: *** <span class="token punctuation">[</span>Makefile:1914: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="解决方法1-内核编译-失败" tabindex="-1"><a class="header-anchor" href="#解决方法1-内核编译-失败"><span>解决方法1，内核编译（失败）</span></a></h5></blockquote><p>这个错误表示无法找到一个名为 <code>vmlinux</code> 的文件。 <code>vmlinux</code> 是内核编译产生的二进制可执行文件，如果 <code>vmlinux</code> 不存在，则可能是内核尚未成功编译。</p><p>尝试先在该版本的 Linux 内核源代码目录中编译内核。在确保内核成功编译后再次运行 <code>make M=samples/bpf</code> 命令。</p><p>如果您只需要编译 BPF 样例，可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> <span class="token parameter variable">-C</span> /usr/src/linux-source-5.15.0/tools/build/ <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您已经编译了内核但仍然遇到此问题，请检查是否存在 <code>vmlinux</code> 文件。如果不存在，请构建 <code>vmlinux</code> 文件并将其放置在 <code>vmlinux</code> 文件所在的路径中。</p><p>方法二：设置 VMLINUX_BTF 环境变量，指向已生成的 vmlinux 文件：</p><ol><li>在命令行中设置变量并编译：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">VMLINUX_BTF</span><span class="token operator">=</span>/path/to/your/vmlinux
<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>/path/to/your/vmlinux</code> 替换为你的 vmlinux BTF 文件的实际路径。</p><blockquote><h5 id="解决方法2-编译内核-还有其他bug" tabindex="-1"><a class="header-anchor" href="#解决方法2-编译内核-还有其他bug"><span>解决方法2，编译内核（还有其他bug）</span></a></h5></blockquote><p>（编译整个系统的耗时是很长的，这里仅编译内核是快很多的了）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> menuconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后会打开一个图形化配置程序，你可以根据需要进行更改和配置，或者直接保存并退出。</p><p>然后构建内核</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装内核</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">make</span> modules_install <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后你可以在 <code>/boot</code> 目录中找到相应的 <code>vmlinux</code> 文件，然后将其设置为 <code>VMLINUX_BTF</code> 或 <code>VMLINUX_H</code> 变量来解决此问题，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf <span class="token assign-left variable">VMLINUX_BTF</span><span class="token operator">=</span>/boot/vmlinux-5.15.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>编译内核并生成 vmlinux 文件：</p><ol><li>进入内核源码目录，如：<code>cd /usr/src/linux-source-5.15.0</code></li><li>使用默认配置或者你定制的配置进行配置内核，如：<code>make defconfig</code>（或者将你的配置文件 .config 复制到源码目录）</li><li>编译内核：<code>make -j$(nproc)</code></li><li>等待编译完成后，vmlinux 文件会在内核源码目录下生成。然后再尝试执行 <code>make M=samples/bpf</code></li></ol><blockquote><h5 id="解决方法3-手动指定vmlinux位置-还有其他bug" tabindex="-1"><a class="header-anchor" href="#解决方法3-手动指定vmlinux位置-还有其他bug"><span>解决方法3，手动指定vmlinux位置（还有其他bug）</span></a></h5></blockquote><p>这个错误是因为在构建 samples/bpf 这个 demo 时，找不到 vmlinux 的 BPF 类型信息 (BTF) 文件。有两种方法可以解决这个问题：</p><hr><p>如果您的 <code>vmlinux</code> 文件已更名或位于其他目录中，则可以通过设置 <code>VMLINUX_BTF</code> 或 <code>VMLINUX_H</code> 环境变量来显示其位置。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">VMLINUX_BTF</span><span class="token operator">=</span>/path/to/vmlinux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的错误解决了，但又会出现其他与vmlinux相关的错误</p><h4 id="坑3-无法加载btf" tabindex="-1"><a class="header-anchor" href="#坑3-无法加载btf"><span>坑3，无法加载BTF</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>.
  GEN     /usr/src/linux-source-5.15.0/samples/bpf/bpftool/vmlinux.h
Error: failed to load BTF from /usr/src/linux-source-5.15.0/vmlinux: No such <span class="token function">file</span> or directory
make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>Makefile:157: /usr/src/linux-source-5.15.0/samples/bpf/bpftool/vmlinux.h<span class="token punctuation">]</span> Error <span class="token number">2</span>
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>samples/bpf/Makefile:293: /usr/src/linux-source-5.15.0/samples/bpf/bpftool/bpftool<span class="token punctuation">]</span> Error <span class="token number">2</span>
make: *** <span class="token punctuation">[</span>Makefile:1914: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误是因为在编译 <code>samples/bpf</code> demo 时，内核找不到包含 BPF 类型信息 (BTF) 的 vmlinux 文件。BTF 信息没有成功地嵌入到 vmlinux 文件中。为了解决这个问题，请按照以下步骤操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libbpf-dev libelf-dev llvm clang dwarves <span class="token comment"># 确保已安装 BTF 工具</span>
<span class="token builtin class-name">cd</span> /usr/src/linux-source-5.15.0
<span class="token function">make</span> clean <span class="token comment"># 清理当前的内核编译</span>

<span class="token comment"># 配置内核并启用 CONFIG_DEBUG_INFO_BTF</span>
<span class="token function">make</span> menuconfig <span class="token comment"># 打开内核配置菜单</span>
<span class="token comment"># 进入到 “General setup” --&gt; “Compile-time checks and compiler options”，找到 “Generate BTF (BPF Type Format) type info” 配置选项，选中它。确保 CONFIG_DEBUG_INFO_BTF 被设置为 y。</span>
<span class="token comment"># 如果找不到按\`/\`键对 CONFIG_DEBUG_INFO_BTF 进行路径搜索。我这里是在/Kernel hacking/Compile-time checks and compiler options/Compile the kernel with debug info里面</span>

<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> <span class="token comment"># 编译内核</span>
<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf <span class="token comment"># 重新尝试</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑4-重复定义-list-head" tabindex="-1"><a class="header-anchor" href="#坑4-重复定义-list-head"><span>坑4，重复定义 list_head</span></a></h4><p>解决完上面的问题还有问题</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  INSTALL headers
  CC  samples/bpf/test_lru_dist
samples/bpf/test_lru_dist.c:36:8: error: redefinition of ‘struct list_head’
   <span class="token number">36</span> <span class="token operator">|</span> struct list_head <span class="token punctuation">{</span>
      <span class="token operator">|</span>        ^~~~~~~~~
In <span class="token function">file</span> included from samples/bpf/test_lru_dist.c:6:
./tools/include/linux/types.h:75:8: note: originally defined here
   <span class="token number">75</span> <span class="token operator">|</span> struct list_head <span class="token punctuation">{</span>
      <span class="token operator">|</span>        ^~~~~~~~~
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>/usr/src/linux-source-5.15.0/samples/bpf/Makefile.target:58: samples/bpf/test_lru_dist<span class="token punctuation">]</span> Error <span class="token number">1</span>
make: *** <span class="token punctuation">[</span>Makefile:1914: samples/bpf<span class="token punctuation">]</span> Error <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：需要手动修改源码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/src/linux-source-5.15.0
<span class="token function">vi</span> samples/bpf/test_lru_dist.c

<span class="token comment"># 找到并注释下面，然后保存并退出</span>
<span class="token comment"># struct list_head {</span>
<span class="token comment">#     struct list_head *next, *prev;</span>
<span class="token comment"># };</span>

<span class="token function">make</span> <span class="token assign-left variable">M</span><span class="token operator">=</span>samples/bpf <span class="token comment"># 重新构建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑5-struct-btf-定义不完整" tabindex="-1"><a class="header-anchor" href="#坑5-struct-btf-定义不完整"><span>坑5，struct btf 定义不完整</span></a></h4><p>这个好像解决不了了……</p><p>又出现了其他bug</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>.
    CLANG   /usr/src/linux-source-5.15.0/samples/bpf/bpftool/pid_iter.bpf.o
skeleton/pid_iter.bpf.c:33:10: error: incomplete definition of <span class="token builtin class-name">type</span> <span class="token string">&#39;struct btf&#39;</span>
                <span class="token builtin class-name">return</span> BPF_CORE_READ<span class="token variable"><span class="token punctuation">((</span>struct btf <span class="token operator">*</span><span class="token punctuation">)</span>ent<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                       <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>
<span class="token operator">/</span>usr<span class="token operator">/</span>src<span class="token operator">/</span>linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">5.15</span><span class="token number">.0</span><span class="token operator">/</span>samples<span class="token operator">/</span>bpf<span class="token operator">/</span>..<span class="token operator">/</span>..<span class="token operator">/</span><span class="token operator">/</span>tools<span class="token operator">/</span>lib<span class="token operator">/</span>bpf<span class="token operator">/</span>bpf_core_read.h<span class="token operator">:</span><span class="token number">403</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span> note<span class="token operator">:</span> expanded from macro &#39;BPF_CORE_READ&#39;
        ___type<span class="token punctuation">((</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> ##__VA_ARGS__<span class="token punctuation">)</span> __r<span class="token punctuation">;</span>                               \\
        <span class="token operator">^</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>
<span class="token operator">/</span>usr<span class="token operator">/</span>src<span class="token operator">/</span>linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">5.15</span><span class="token number">.0</span><span class="token operator">/</span>samples<span class="token operator">/</span>bpf<span class="token operator">/</span>..<span class="token operator">/</span>..<span class="token operator">/</span><span class="token operator">/</span>tools<span class="token operator">/</span>lib<span class="token operator">/</span>bpf<span class="token operator">/</span>bpf_core_read.h<span class="token operator">:</span><span class="token number">274</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span> note<span class="token operator">:</span> expanded from macro &#39;___type&#39;
#define ___type<span class="token punctuation">(</span>...<span class="token punctuation">)</span> typeof<span class="token punctuation">(</span>___arrow<span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">))</span></span>
                            ^~~~~~~~~~~~~~~~~~~~~
/usr/src/linux-source-5.15.0/samples/bpf/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>//tools/lib/bpf/bpf_core_read.h:272:23: note: expanded from macro <span class="token string">&#39;___arrow&#39;</span>
<span class="token comment">#define ___arrow(...) ___apply(___arrow, ___narg(__VA_ARGS__))(__VA_ARGS__)</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误是由于编译期间，关于 <code>struct btf</code> 的定义不完整。这可能是因为 BPF 工具链中 BTF 部分的一些错误。</p><p>在这种情况下，可能的解决方案是升级你的 libbpf 和 BPF 工具链。升级的方法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade
udo <span class="token function">apt-get</span> <span class="token function">install</span> libbpf-dev libelf-dev llvm clang dwarves
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但更新了好像也没用</p><h4 id="其他坑" tabindex="-1"><a class="header-anchor" href="#其他坑"><span>其他坑</span></a></h4><p>其他我没遇到的坑，详见原博客</p><ul><li>原博客坑 <ul><li>scripts/mod/modpos 报错</li><li>&quot;asm/x.h&quot; 头文件缺少</li><li>&quot;generated/x.h&quot; 报错</li></ul></li><li>该链接里的坑：https://lore.kernel.org/lkml/20190518004639.20648-3-mcroce@redhat.com/T/ <ul><li>samples/bpf: fix test_lru_dist build</li><li>libbpf: add missing typedef</li><li>samples/bpf: fix xdpsock_user build error</li><li>samples/bpf: fix tracex5_user build error</li><li>samples/bpf: fix hbm build error</li></ul></li><li>评论中所说的报错 <ul><li>如果遇到 sys/capability.h: No such file or directory 则可尝试 apt install libcap-dev</li><li>如果遇到 Cannot find a vmlinux for VMLINUX_BTF 则可尝试：make VMLINUX_BTF=/sys/kernel/btf/vmlinux M=samples/bp</li></ul></li></ul><h3 id="_208版-编译bcc" tabindex="-1"><a class="header-anchor" href="#_208版-编译bcc"><span>208版 编译BCC</span></a></h3><p>这个是github开源项目BCC提供的环境配置与编译方法。主要要先进行 <code>内核配置</code>，不然会多很多bug</p><p>看起来成功，socure正常的进行编译以及install，包括python版本。但实际上似乎没成功</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装构建依赖项（**选择对应的的版本**，这里我选择22.04） - For Focal (20.04.1 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># 安装并编译BCC 1</span>
<span class="token function">git</span> clone https://github.com/iovisor/bcc.git
<span class="token function">mkdir</span> bcc/build<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> bcc/build
cmake <span class="token punctuation">..</span> <span class="token comment"># 使用 CMake 生成 Makefile</span>
<span class="token function">make</span> <span class="token comment"># 编译 BCC</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装 BCC</span>

<span class="token comment"># 安装并编译BCC 2</span>
cmake <span class="token parameter variable">-DPYTHON_CMD</span><span class="token operator">=</span>python3 <span class="token punctuation">..</span> <span class="token comment"># 重新使用 CMake 生成 Makefile，这次指定了 Python 3 的路径作为 PYTHON_CMD</span>
<span class="token function">pushd</span> src/python/
<span class="token function">make</span> <span class="token comment"># 编译</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装</span>
<span class="token function">popd</span>

<span class="token comment"># 检查是否安装成功</span>
<span class="token function">sudo</span> /usr/share/bcc/tools/check-kernel-helper <span class="token comment"># 检查是否安装成功，成功会显示：Kernel helper loaded successfully</span>
<span class="token function">sudo</span> /usr/share/bcc/tools/ext4dist <span class="token comment"># 运行tools下面的都行，这里检查系统中ext4文件系统延迟</span>
<span class="token comment"># 但都失败了，都说：from bcc import BPF; ImportError: No module named bcc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-无法运行-usr-share-bcc-tools里的python程序" tabindex="-1"><a class="header-anchor" href="#坑1-无法运行-usr-share-bcc-tools里的python程序"><span>坑1，无法运行/usr/share/bcc/tools里的python程序</span></a></h4><p>编译安装后，依然无法运行/usr/share/bcc/tools里的程序</p><blockquote><h5 id="尝试1" tabindex="-1"><a class="header-anchor" href="#尝试1"><span>尝试1</span></a></h5></blockquote><p>这里的脚本为 BCC 构建了两个版本：一个是基本的 C/C++ 版本，另一个是使用 Python 3 的扩展版本。</p><ul><li><p>C/C++ 版本：</p><ul><li><p>编译产物：位于 <code>bcc/build</code> 目录下，当运行 <code>sudo make install</code> 时，这些文件会被安装到系统的默认路径（通常是 <code>/usr/local</code>）</p></li><li><p>测试：例如 <code>funclatency</code> 或者 <code>execsnoop</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> funclatency vfs_read <span class="token comment"># 这将显示在实时监控系统调用 \`vfs_read\` 的延迟。要停止监控，请按 CTRL + C</span>

<span class="token comment"># 笔记者，找不到命令。这样倒是行：</span>
root@Linc-Main-Pc:/home/linczero/git/public/bcc/libbpf-tools$ <span class="token function">make</span> execsnoop
  BPF      execsnoop.bpf.o
  GEN-SKEL execsnoop.skel.h
  CC       execsnoop.o
  BINARY   execsnoop
root@Linc-Main-Pc:/home/linczero/git/public/bcc/libbpf-tools$ ./execsnoop
PCOMM            PID    <span class="token environment constant">PPID</span>   RET ARGS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Python 版本：</p><ul><li><p>编译产物：位于 <code>bcc/build/src/python</code> 目录下，在运行 <code>sudo make install</code> 之后，这些文件会被安装到系统的 Python 库目录，例如：<code>/usr/local/lib/python3.x/dist-packages</code>。</p></li><li><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token variable">$PYTHONPATH</span>:/path/to/bcc/examples <span class="token comment"># 首先，将 Python 示例目录添加到你的 \`PYTHONPATH\`</span>
<span class="token comment"># 然后尝试运行其中的一个示例，例如 \`hello_world.py\`</span>
<span class="token function">sudo</span> python3 /path/to/bcc/examples/hello_world.py
<span class="token comment"># 这将加载一个 eBPF 程序，跟踪所有进程的 \`clone\` 系统调用，并打印事件。如果输出显示了事件，说明编译和安装成功。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>对于c/cpp版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@msy:/home/msy/git/public/bcc/examples<span class="token comment"># funclatency vfs_read</span>
funclatency: <span class="token builtin class-name">command</span> not found
root@msy:/home/msy/git/public/bcc/examples<span class="token comment"># execsnoop</span>
execsnoop: <span class="token builtin class-name">command</span> not found
root@msy:/home/msy/git/public/bcc/examples<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于python版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@msy:/home/msy/git/public/bcc/examples<span class="token comment"># export PYTHONPATH=$PYTHONPATH:/home/msy/git/public/bcc/examples/</span>
root@msy:/home/msy/git/public/bcc/examples<span class="token comment"># python3 /home/msy/git/public/bcc/examples/hello_world.py</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;/home/msy/git/public/bcc/examples/hello_world.py&quot;</span>, line <span class="token number">9</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from bcc <span class="token function">import</span> BPF
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc/__init__.py&quot;</span>, line <span class="token number">27</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from .libbcc <span class="token function">import</span> lib, bcc_symbol, bcc_symbol_option, bcc_stacktrace_build_id, _SYM_CB_TYPE
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc/libbcc.py&quot;</span>, line <span class="token number">20</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    lib.bpf_module_create_b.restype <span class="token operator">=</span> ct.c_void_p
  File <span class="token string">&quot;/usr/lib/python3.10/ctypes/__init__.py&quot;</span>, line <span class="token number">387</span>, <span class="token keyword">in</span> __getattr__
    func <span class="token operator">=</span> self.__getitem__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  File <span class="token string">&quot;/usr/lib/python3.10/ctypes/__init__.py&quot;</span>, line <span class="token number">392</span>, <span class="token keyword">in</span> __getitem__
    func <span class="token operator">=</span> self._FuncPtr<span class="token variable"><span class="token punctuation">((</span>name_or_ordinal<span class="token punctuation">,</span> self<span class="token punctuation">))</span></span>
AttributeError: /lib/x86_64-linux-gnu/libbcc.so.0: undefined symbol: bpf_module_create_b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="尝试2" tabindex="-1"><a class="header-anchor" href="#尝试2"><span>尝试2</span></a></h5></blockquote><p>在 bcc github 搜索 <code>ImportError: No module named bcc</code>，发现有很多人问过这个问题</p><p>如：https://github.com/iovisor/bcc/issues/549</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 临时方案</span>
python3 helloword.py

<span class="token comment"># 一劳永逸方案</span>
root@Linc-Main-Pc:/usr/share/bcc/tools<span class="token comment"># python --version</span>
Python <span class="token number">2.7</span>.18
root@Linc-Main-Pc:/usr/share/bcc/tools<span class="token comment"># python3 --version</span>
Python <span class="token number">3.8</span>.10
root@Linc-Main-Pc:/usr/share/bcc/tools<span class="token comment"># update-alternatives --install /usr/bin/python python /usr/bin/python3 10</span>
update-alternatives: using /usr/bin/python3 to provide /usr/bin/python <span class="token punctuation">(</span>python<span class="token punctuation">)</span> <span class="token keyword">in</span> auto mode
root@Linc-Main-Pc:/usr/share/bcc/tools<span class="token comment"># python --version</span>
Python <span class="token number">3.8</span>.10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑2-找不到-bpf-module-create-b" tabindex="-1"><a class="header-anchor" href="#坑2-找不到-bpf-module-create-b"><span>坑2，找不到：bpf_module_create_b</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@Linc-Main-Pc:/usr/share/bcc/examples<span class="token comment"># python3 hello_world.py</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;hello_world.py&quot;</span>, line <span class="token number">9</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from bcc <span class="token function">import</span> BPF
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc/__init__.py&quot;</span>, line <span class="token number">26</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from .libbcc <span class="token function">import</span> lib, bcc_symbol, bcc_symbol_option, bcc_stacktrace_build_id, _SYM_CB_TYPE
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc/libbcc.py&quot;</span>, line <span class="token number">20</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    lib.bpf_module_create_b.restype <span class="token operator">=</span> ct.c_void_p
  File <span class="token string">&quot;/usr/lib/python3.8/ctypes/__init__.py&quot;</span>, line <span class="token number">386</span>, <span class="token keyword">in</span> __getattr__
    func <span class="token operator">=</span> self.__getitem__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  File <span class="token string">&quot;/usr/lib/python3.8/ctypes/__init__.py&quot;</span>, line <span class="token number">391</span>, <span class="token keyword">in</span> __getitem__
    func <span class="token operator">=</span> self._FuncPtr<span class="token variable"><span class="token punctuation">((</span>name_or_ordinal<span class="token punctuation">,</span> self<span class="token punctuation">))</span></span>
AttributeError: /lib/x86_64-linux-gnu/libbcc.so.0: undefined symbol: bpf_module_create_b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bcc github issue 也有这个问题：</p><ul><li>https://github.com/iovisor/bcc/issues/4671， 这个说要卸载预安装的bpfcc-tools</li><li>https://github.com/iovisor/bcc/issues/4583， 没看</li><li>https://github.com/iovisor/bcc/issues/4581， 没看</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt</span> remove bpfcc-tools python3-bpfcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后直接解决了</p><h3 id="_208版-编译bcc-libbpf-tools-笔记者-亲测完成" tabindex="-1"><a class="header-anchor" href="#_208版-编译bcc-libbpf-tools-笔记者-亲测完成"><span>208版 编译BCC-libbpf-tools (笔记者: 亲测完成)</span></a></h3><p>方法同官方提供的Lab虚拟机上的操作</p><h4 id="坑1-找不到vmlinux-518" tabindex="-1"><a class="header-anchor" href="#坑1-找不到vmlinux-518"><span>坑1，找不到vmlinux_518</span></a></h4><p>是想要像在官方虚拟机那样将opensnoop进行编译和运行时则出现了问题</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> opensnoop
  BPF      opensnoop.bpf.o
In <span class="token function">file</span> included from opensnoop.bpf.c:4:
x86/vmlinux.h:1:1: error: unknown <span class="token builtin class-name">type</span> name <span class="token string">&#39;vmlinux_518&#39;</span>
vmlinux_518.h
^
x86/vmlinux.h:1:12: error: expected identifier or <span class="token string">&#39;(&#39;</span>
vmlinux_518.h
           ^
In <span class="token function">file</span> included from opensnoop.bpf.c:5:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><s>这里需要注意如果先编译这边的，就不能做上一节 &quot;208版 编译BCC&quot; 的内容。似乎会因为make缓存的原因，导致另一种失败。或者清理make缓存可能也可以。</s></p><p>后来我又试了一次，又莫名其妙可以了（可能是因为前面的修复运行内核bpf demo时顺便把这边给修复了）</p><h3 id="wsl2版-编译内核中的bpf-demo" tabindex="-1"><a class="header-anchor" href="#wsl2版-编译内核中的bpf-demo"><span>wsl2版 编译内核中的bpf demo</span></a></h3><p>基本和前面的方法一样，但由于wsl内核版本和实机内核版本有所不同，需要替换一个东西：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> <span class="token comment"># 使用这条会报错，原因在于这里通过uname -r不能获取wsl正确的对应的linux内核版本</span>
<span class="token comment"># Reading package lists... Done</span>
<span class="token comment"># Building dependency tree</span>
<span class="token comment"># Reading state information... Done</span>
<span class="token comment"># E: Unable to locate package linux-headers-5.10.16.3-microsoft-standard-WSL2</span>
<span class="token comment"># E: Couldn&#39;t find any package by glob &#39;linux-headers-5.10.16.3-microsoft-standard-WSL2&#39;</span>

<span class="token comment"># 需要替换成下面</span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/microsoft/WSL2-Linux-Kernel.git <span class="token parameter variable">-b</span> linux-msft-wsl-<span class="token variable">$KERNEL_VERSION</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-重复定义-list-head" tabindex="-1"><a class="header-anchor" href="#坑1-重复定义-list-head"><span>坑1，重复定义 list_head</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>samples/bpf/test_lru_dist.c:36:8: error: redefinition of ‘struct list_head’
   <span class="token number">36</span> <span class="token operator">|</span> struct list_head <span class="token punctuation">{</span>
      <span class="token operator">|</span>        ^~~~~~~~~
In <span class="token function">file</span> included from samples/bpf/test_lru_dist.c:6:
./tools/include/linux/types.h:69:8: note: originally defined here
   <span class="token number">69</span> <span class="token operator">|</span> struct list_head <span class="token punctuation">{</span>
      <span class="token operator">|</span>        ^~~~~~~~~
make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>/home/linczero/git/public/WSL2-Linux-Kernel/samples/bpf/Makefile.target:58: samples/bpf/test_lru_dist<span class="token punctuation">]</span> Error <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的情况和208配置那边一样</p><h3 id="wsl2版-编译bcc-笔记者-python版成功-c-cpp版未至全局变量" tabindex="-1"><a class="header-anchor" href="#wsl2版-编译bcc-笔记者-python版成功-c-cpp版未至全局变量"><span>wsl2版 编译BCC (笔记者: python版成功，c/cpp版未至全局变量)</span></a></h3><p>WSL版本需要另外准备一些东西。 编译依赖于linux内核模块的头文件和lib，在wsl发行包repo中找不到。我们<strong>必须手动编译内核模块</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装依赖项</span>
<span class="token function">apt-get</span> <span class="token function">install</span> flex bison libssl-dev libelf-dev dwarves

<span class="token comment"># 下载内核源码</span>
<span class="token assign-left variable">KERNEL_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;-&#39;</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">)</span></span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/microsoft/WSL2-Linux-Kernel.git <span class="token parameter variable">-b</span> linux-msft-wsl-<span class="token variable">$KERNEL_VERSION</span>
<span class="token builtin class-name">cd</span> WSL2-Linux-Kernel

<span class="token comment"># 编译并安装内核</span>
<span class="token function">cp</span> Microsoft/config-wsl .config
<span class="token function">make</span> oldconfig <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> prepare
<span class="token function">make</span> scripts
<span class="token function">make</span> modules
<span class="token function">sudo</span> <span class="token function">make</span> modules_install

<span class="token comment"># 安装模块后，您需要更改目录名称以删除末尾的“+”</span>
<span class="token function">mv</span> /lib/modules/<span class="token variable">$KERNEL_VERSION</span>-microsoft-standard-WSL2+/ /lib/modules/<span class="token variable">$KERNEL_VERSION</span>-microsoft-standard-WSL2

<span class="token comment"># 然后您可以根据您的发行版安装 bcc 工具包，如果遇到了一些错误，请尝试：sudo mount -t debugfs debugfs /sys/kernel/debug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正式编译BCC</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装构建依赖项（**选择对应的的版本**，这里我选择22.04） - For Focal (20.04.1 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># 安装并编译BCC 1</span>
<span class="token function">git</span> clone https://github.com/iovisor/bcc.git
<span class="token function">mkdir</span> bcc/build<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> bcc/build
cmake <span class="token punctuation">..</span> <span class="token comment"># 使用 CMake 生成 Makefile</span>
<span class="token function">make</span> <span class="token comment"># 编译 BCC</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装 BCC</span>

<span class="token comment"># 安装并编译BCC 2</span>
cmake <span class="token parameter variable">-DPYTHON_CMD</span><span class="token operator">=</span>python3 <span class="token punctuation">..</span> <span class="token comment"># 重新使用 CMake 生成 Makefile，这次指定了 Python 3 的路径作为 PYTHON_CMD</span>
<span class="token function">pushd</span> src/python/
<span class="token function">make</span> <span class="token comment"># 编译</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装</span>
<span class="token function">popd</span>

<span class="token comment"># 检查是否安装成功</span>
<span class="token function">sudo</span> /usr/share/bcc/tools/check-kernel-helper <span class="token comment"># 检查是否安装成功，成功会显示：Kernel helper loaded successfully</span>
<span class="token function">sudo</span> /usr/share/bcc/tools/ext4dist <span class="token comment"># 运行tools下面的都行，这里检查系统中ext4文件系统延迟</span>
<span class="token comment"># 但都失败了，都说：from bcc import BPF; ImportError: No module named bcc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-无法运行-usr-share-bcc-tools里的python程序-解决同208" tabindex="-1"><a class="header-anchor" href="#坑1-无法运行-usr-share-bcc-tools里的python程序-解决同208"><span>坑1，无法运行/usr/share/bcc/tools里的python程序 (解决同208)</span></a></h4><p>(解决同208)</p><h4 id="坑2-找不到-bpf-module-create-b-解决同208" tabindex="-1"><a class="header-anchor" href="#坑2-找不到-bpf-module-create-b-解决同208"><span>坑2，找不到：bpf_module_create_b (解决同208)</span></a></h4><p>(解决同208)</p><h3 id="wsl2版-编译bcc-libbpf-tools-笔记者-亲测完成" tabindex="-1"><a class="header-anchor" href="#wsl2版-编译bcc-libbpf-tools-笔记者-亲测完成"><span>wsl2版 编译BCC-libbpf-tools (笔记者: 亲测完成)</span></a></h3><p>前面看似成功了，但实则运行不起来。在vmlinux中找不到BTF的问题</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> opensnoop
$ ./opensnoop
libbpf: failed to <span class="token function">find</span> <span class="token string">&#39;.BTF&#39;</span> ELF section <span class="token keyword">in</span> /lib/modules/5.10.16.3-microsoft-standard-WSL2/build/vmlinux
libbpf: failed to <span class="token function">find</span> valid kernel BTF
failed to fetch necessary BTF <span class="token keyword">for</span> CO-RE: Operation not supported
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-在vmlinux中找不到-btf" tabindex="-1"><a class="header-anchor" href="#坑1-在vmlinux中找不到-btf"><span>坑1，在vmlinux中找不到.BTF</span></a></h4><p>（这个不同于前面208的解决方法）</p><blockquote><h5 id="尝试1-失败" tabindex="-1"><a class="header-anchor" href="#尝试1-失败"><span>尝试1，失败</span></a></h5></blockquote><p>应该是像前面208编译那样解决，但实际上好像有点不同……</p><ol><li><p>在 .config 中添加或修改以下行。如果没有这个文件，wsl的 <code>.config</code> 文件看前面BCC的部分，好像是有说怎么生成。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">CONFIG_DEBUG_INFO_BTF</span><span class="token operator">=</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>或者采用一个更简单的方法，执行以下 <code>sed</code> 命令来实现：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/# CONFIG_DEBUG_INFO_BTF is notset/CONFIG_DEBUG_INFO_BTF=y/&#39;</span> .config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>像前面208那样。</p><p>BTF选项不见了，有点奇怪。明明在可视化UI那块用<code>\\</code>是能搜到有的，但进行对应的路径却发现没这个选项。</p><p>补充：后来折腾了一翻，也不知道具体什么过程，那个选项又出现了。真的奇怪。</p></li></ol><p>总结下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/microsoft/WSL2-Linux-Kernel.git <span class="token parameter variable">-b</span> linux-msft-wsl-<span class="token variable">$KERNEL_VERSION</span>
<span class="token builtin class-name">cd</span> WSL2-Linux-Kernel
<span class="token comment"># cp /boot/config-$(uname -r) .config</span>
<span class="token function">cp</span> Microsoft/config-wsl .config

<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/# CONFIG_DEBUG_INFO_BTF is not set/CONFIG_DEBUG_INFO_BTF=y/&#39;</span> .config <span class="token comment"># 配置BTF选项</span>
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> <span class="token comment"># 编译内核 (可能需要一些时间)</span>
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> modules <span class="token comment"># 编译内核模块</span>
<span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装新内核</span>
<span class="token function">make</span> modules_install <span class="token comment"># 安装新模块</span>
update-initramfs <span class="token parameter variable">-c</span> <span class="token parameter variable">-k</span> <span class="token number">5.10</span>.16.3 <span class="token comment"># 更新内核引导加载项，以确保新内核在下次启动时使用（好像这句有问题）</span>
<span class="token function">update-grub</span> <span class="token comment"># （好像这句有问题）</span>
wsl.exe <span class="token parameter variable">--shutdown</span> <span class="token comment"># 完成后，请重启您的 WSL2 实例 （好像这句有问题）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="尝试2-成功" tabindex="-1"><a class="header-anchor" href="#尝试2-成功"><span>尝试2，成功</span></a></h5></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>zcat /proc/config.gz <span class="token operator">|</span> <span class="token function">grep</span> CONFIG_DEBUG_INFO_BTF <span class="token comment"># 确保您的内核支持BTF。您可以通过查看 /proc/config.gz 文件来检查设置。如果支持会输出打印类似 CONFIG_DEBUG_INFO_BTF=y</span>

<span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade
<span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> build-essential flex bison libelf-dev libssl-dev libz-dev <span class="token function">bc</span> <span class="token comment"># 安装编译内核所依赖的包</span>
<span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/microsoft/WSL2-Linux-Kernel.git <span class="token parameter variable">-b</span> linux-msft-wsl-<span class="token variable">$KERNEL_VERSION</span>
<span class="token comment"># 上面不知名原因clone总是失败，可能网太差了。可以尝试在pc里clone再复制到wsl，或者我这边直接下载github对应版本的源码，再解压。不过我这边也不行，我直接pc下载tar.gz再复制到wsl了</span>
<span class="token comment"># wget https://github.com/microsoft/WSL2-Linux-Kernel/archive/refs/tags/linux-msft-wsl-5.10.16.3.tar.gz</span>
<span class="token comment"># tar xvf linux-msft-wsl-5.10.16.3.tar.gz</span>
<span class="token comment"># mv WSL2-Linux-Kernel-linux-msft-wsl-5.10.16.3 WSL2-Linux-Kernel</span>
<span class="token builtin class-name">cd</span> WSL2-Linux-Kernel
<span class="token function">cp</span> Microsoft/config-wsl .config
<span class="token comment"># sed -i &#39;s/# CONFIG_DEBUG_INFO_BTF is not set/CONFIG_DEBUG_INFO_BTF=y/&#39; .config # (可选) 配置BTF选项</span>
<span class="token function">make</span> menuconfig
<span class="token comment"># 需要在可视化界面设置这个：CONFIG_DEBUG_INFO_BTF=y</span>
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> <span class="token comment"># 编译内核</span>
<span class="token builtin class-name">cd</span> ./arch/x86_64/boot <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span> <span class="token comment"># 检查该路径bzImage是否存在（也可能不是x86_64而是x86，看 make -j$(nproc) 的输出就知道是哪个</span>
<span class="token function">cp</span> bzImage /mnt/c/WSL2-Kernel/bzImage <span class="token comment"># 将该文件复制到windows对应路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译完成后需要回到Windows做操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 编译完成后，将新的 bzImage 内核替换原先的 WSL2 内核。在 Windows 系统：</span>
<span class="token comment"># 打开 %USERPROFILE%\\.wslconfig 文件（如果不存在，请创建一个，这个变量路径直接在地址栏打就行了），并加入以下内容：</span>
<span class="token comment"># [wsl2]</span>
<span class="token comment"># kernel=&lt;path_to_custom_bzImage&gt;</span>
<span class="token comment"># 其中 &lt;path_to_custom_bzImage&gt; 需要替换为新编译完成的 bzImage 文件的完整路径。例如：</span>
<span class="token punctuation">[</span>wsl2<span class="token punctuation">]</span>
<span class="token assign-left variable">kernel</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span><span class="token punctuation">\\</span>WSL2-Kernel<span class="token punctuation">\\</span><span class="token punctuation">\\</span>bzImage

<span class="token punctuation">[</span>Ctrl+D<span class="token punctuation">]</span> <span class="token comment"># 退出ssh回到powershell（我原来是用ssh linczero@localhost -p 22来连接wsl的）</span>
wsl.exe <span class="token parameter variable">--shutdown</span> <span class="token comment"># 重启 WSL2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后回到wsl检查是否正确了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ zcat /proc/config.gz <span class="token operator">|</span> <span class="token function">grep</span> CONFIG_DEBUG_INFO_BTF <span class="token comment"># 重新检查。打印下面的内容就成功了</span>
<span class="token assign-left variable">CONFIG_DEBUG_INFO_BTF</span><span class="token operator">=</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果回不来wsl而是如下报错，说明bzImage的地址和.wslconfig文件指向的地址不符，有可能是没写双反斜杠</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>系统找不到指定的路径。
系统找不到指定的路径。
系统找不到指定的路径。
Press any key to continue<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑2-找不到syscalls-sys-enter-openat-无法与跟踪点连接" tabindex="-1"><a class="header-anchor" href="#坑2-找不到syscalls-sys-enter-openat-无法与跟踪点连接"><span>坑2，找不到syscalls/sys_enter_openat，无法与跟踪点连接</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@Linc-Main-Pc:/home/linczero/git/public/bcc/libbpf-tools$ ./opensnoop
libbpf: failed to determine tracepoint <span class="token string">&#39;syscalls/sys_enter_openat&#39;</span> perf event ID: No such <span class="token function">file</span> or directory
libbpf: prog <span class="token string">&#39;tracepoint__syscalls__sys_enter_openat&#39;</span><span class="token builtin class-name">:</span> failed to create tracepoint <span class="token string">&#39;syscalls/sys_enter_openat&#39;</span> perf event: No such <span class="token function">file</span> or directory
libbpf: prog <span class="token string">&#39;tracepoint__syscalls__sys_enter_openat&#39;</span><span class="token builtin class-name">:</span> failed to auto-attach: <span class="token parameter variable">-2</span>
failed to attach BPF programs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无法将BPF程序与<code>syscalls/sys_enter_openat</code>跟踪点连接。这个问题可能是由于以下原因导致的：</p><p>检查0：（我这是正常的，不是这个问题）</p><p>确保你的内核版本支持 BPF 和 tracepoints。eBPF 最低要求内核版本 4.9。你可以通过运行 <code>uname -r</code> 命令来检查你的内核版本</p><p>检查1：（我这是正常的，不是这个问题）</p><p>内核配置文件 <code>/boot/config-$(uname -r)</code> 是否包含以下选项：（可以使用vim的<code>/</code>搜索模式进行搜索）。另外还有个 <code>/proc/config.gz</code> 的类似路径，但应该不用那个</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">CONFIG_BPF</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_BPF_SYSCALL</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_TRACEPOINTS</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_HAVE_EBPF_JIT</span><span class="token operator">=</span>y
<span class="token comment"># 后来再补充几个：</span>
<span class="token assign-left variable">CONFIG_KPROBES</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_KPROBE_EVENTS</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_UPROBES</span><span class="token operator">=</span>y
<span class="token assign-left variable">CONFIG_DEBUG_FS</span><span class="token operator">=</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充：后来我找到了更快的调试方法：</p><p>zcat /proc/config.gz | grep -E &quot;CONFIG_BPF|CONFIG_TRACING&quot;</p></blockquote><p>检查2：（我这是正常的，不是这个问题）</p><p>如果你的内核配置正确，请检查是否有权限问题。如果你在 root 用户下运行该程序，请确保内核参数 <code>kernel.unprivileged_bpf_disabled</code> 设置为 <code>0</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前设置</span>
<span class="token function">sysctl</span> kernel.unprivileged_bpf_disabled

<span class="token comment"># 设置为 0</span>
<span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">kernel.unprivileged_bpf_disabled</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查3：（我是因为这个原因）</p><p><code>tracefs</code> 没有挂载：请确保tracefs已挂载至/sys/kernel/tracing。 可以使用以下命令来挂载tracefs。</p><p>挂载 <code>debugfs</code> 文件系统。运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs nodev /sys/kernel/debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="docker版-编译bcc" tabindex="-1"><a class="header-anchor" href="#docker版-编译bcc"><span>Docker版 编译BCC</span></a></h3><h4 id="docker容器准备" tabindex="-1"><a class="header-anchor" href="#docker容器准备"><span>docker容器准备</span></a></h4><p>命令改良版（有容器名方便操控、退出不删除容器）。 使用的镜像是 <code>zlim/bcc</code>，路径 <code>/usr/share/bcc/tool</code> 自带BCC工具。 使用的系统版本是：ubuntu 18.04.1，内核 5.15.0-76-generic</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /lib/modules:/lib/modules:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /usr/src:/usr/src:ro  <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--workdir</span> /usr/share/bcc/tools  <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> bcc <span class="token punctuation">\\</span>
  zlim/bcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原版</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /lib/modules:/lib/modules:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /usr/src:/usr/src:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--workdir</span> /usr/share/bcc/tools <span class="token punctuation">\\</span>
  zlim/bcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可能需要先安装docker：<code>apt install docker.io</code></p><p>docker一些常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 退出</span>
<span class="token builtin class-name">exit</span> <span class="token comment"># 或 Ctrl+D</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 或 docker ps -a</span>
<span class="token function">docker</span> start <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="wsl补充" tabindex="-1"><a class="header-anchor" href="#wsl补充"><span>wsl补充</span></a></h4><p>另外说一下，如果是wsl2使用Docker可能需要先设置 Systemd 作为 init 系统，否则会报错。 WSL2默认的 init 系统 upstart，这些init系统与常见的Linux发行版中使用的Systemd不同。方法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 1. 在 PowerShell 中以管理员身份运行以下命令，这将打开 wsl.conf 文件</span>
notepad <span class="token variable">$env</span>:WSL_ROOTFS_DIR/etc/wsl.conf

<span class="token comment"># 2. 然后添加以下内容：</span>
<span class="token punctuation">[</span>boot<span class="token punctuation">]</span>
<span class="token assign-left variable">command</span><span class="token operator">=</span><span class="token string">&quot;service systemd start&quot;</span>

<span class="token comment"># 3. 保存并关闭文件。然后需要重新启动WSL2实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FAQ：</p><ul><li>Q：wsl不用systemd应该是有原因的，这样设置后会不会给我的wsl系统带来其他影响？</li><li>A：WSL2 默认不使用 Systemd 作为其 init 系统的主要原因是为了实现更快的启动时间和更小的资源占用。但是，这种启用 Systemd 的影响应该是可以忽略不计的。大多数 WSL2 用户都会将其用作开发环境，并且对启动时间和资源占用的要求不像生产环境那么严格。因此，启用 Systemd 应该不会对您的 WSL2 环境造成负面影响。</li></ul><h4 id="使用该docker编译bcc" tabindex="-1"><a class="header-anchor" href="#使用该docker编译bcc"><span>使用该docker编译BCC</span></a></h4><p>wiki里有直接安装和手动编译两种方法，这里作为开发环境而非使用环境使用后者验证环境是否正确，参见：https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---source</p><p>编译环境准备</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># For Bionic (18.04 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm6.0 llvm-6.0-dev libclang-6.0-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># For Focal (20.04.1 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装并编译BCC</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/iovisor/bcc.git
<span class="token function">mkdir</span> bcc/build<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> bcc/build
cmake <span class="token punctuation">..</span>
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
cmake <span class="token parameter variable">-DPYTHON_CMD</span><span class="token operator">=</span>python3 <span class="token punctuation">..</span> <span class="token comment"># build python3 binding</span>
<span class="token function">pushd</span> src/python/
<span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token function">popd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker版-编译bcc-libbpf-tools" tabindex="-1"><a class="header-anchor" href="#docker版-编译bcc-libbpf-tools"><span>Docker版 - 编译BCC-libbpf-tools</span></a></h3><p>报错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@bb5ca8527503:/home/msy/bcc/libbpf-tools<span class="token comment"># make opensnoop</span>
  BPF      opensnoop.bpf.o
In <span class="token function">file</span> included from opensnoop.bpf.c:4:
x86/vmlinux.h:5:15: error: attribute <span class="token string">&#39;preserve_access_index&#39;</span> is not supported by <span class="token string">&#39;#pragma clang attribute&#39;</span>
<span class="token comment">#pragma clang attribute push (__attribute__((preserve_access_index)), apply_to = record)</span>
              ^
x86/vmlinux.h:6533:20: error: expected member name or <span class="token string">&#39;;&#39;</span> after declaration specifiers
        struct cgroup_bpf bpf<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker版-mac" tabindex="-1"><a class="header-anchor" href="#docker版-mac"><span>Docker版 - mac</span></a></h3><p>https://luckymrwang.github.io/2022/05/23/%E4%BD%BF%E7%94%A8-Docker-Desktop%E8%BF%9B%E8%A1%8C-BPF-%E5%BC%80%E5%8F%91/</p>`,191)),s("p",null,[n[13]||(n[13]=a("Docker Desktop for Mac 通过一个虚拟机，来运行基于")),s("a",b,[n[12]||(n[12]=a("Linuxkit")),l(e)]),n[14]||(n[14]=a("构建的操作系统支持Docker环境。我们无法直接访问Virtual Machine，我们需要在 Docker容器中运行 eBPF 工具, 这需要有如下的前提条件："))]),n[26]||(n[26]=i(`<ul><li>/usr/src/ 需要包含内核源代码</li><li>debugfs 被正确挂载。 <code>mount -t debugfs debugfs /sys/kernel/debug</code></li><li>/lib/modules/ 需要挂载 host 宿主机上相关目录</li><li>需要在特权方式运行，比如 <code>docker run --privileged ...</code></li><li>需要使用宿主机 PID 名空间，比如 <code>docker run --pid=host ...</code></li></ul><p>我们首先获取当前宿主机内核版本信息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--pid</span><span class="token operator">=</span>host justincormack/nsenter1
<span class="token comment"># uname -r</span>
<span class="token number">5.10</span>.47-linuxkit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[16]||(n[16]=a("在Docker Hub上，Docker 在 ")),s("a",v,[n[15]||(n[15]=a("docker/for-desktop-kernel")),l(e)]),n[17]||(n[17]=a(" 仓库中发布了 Docker Desktop 所包含的 linuxkit 内核代码的容器镜像。大家根据上面的内核版本信息就能定位相应的镜像 tag。"))]),s("p",null,[n[20]||(n[20]=a("然后，我们来构建属于自己的 Docker 镜像，比如我希望构建一个Docker镜像包含，")),s("a",m,[n[18]||(n[18]=a("bcc")),l(e)]),n[21]||(n[21]=a(" 和 ")),s("a",k,[n[19]||(n[19]=a("bpftrace")),l(e)]),n[22]||(n[22]=a(" 等eBPF开发工具。我们创建如下 Dockerfile.tools 来构建相应镜像"))]),n[27]||(n[27]=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>FROM docker/for-desktop-kernel:5.10.47-0b705d955f5e283f62583c4e227d64a7924c138f AS ksrc

FROM ubuntu:20.04 AS bpftrace
COPY <span class="token parameter variable">--from</span><span class="token operator">=</span>ksrc /kernel-dev.tar /
RUN <span class="token function">tar</span> xf kernel-dev.tar <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> kernel-dev.tar
<span class="token comment"># Use Alibaba Cloud mirror for ubuntu</span>
RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/archive.ubuntu.com/mirrors.aliyun.com/&#39;</span> /etc/apt/sources.list
<span class="token comment"># Install LLVM 10.0.1</span>
RUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> lsb-release software-properties-common <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://apt.llvm.org/llvm.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x llvm.sh <span class="token operator">&amp;&amp;</span> ./llvm.sh <span class="token number">10</span>
ENV <span class="token environment constant">PATH</span> <span class="token string">&quot;<span class="token environment constant">$PATH</span>:/usr/lib/llvm-10/bin&quot;</span>

<span class="token comment"># Build/Install bpftrace</span>
RUN <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> bpftrace

<span class="token comment"># Build/Install bcc</span>
WORKDIR /root
RUN <span class="token assign-left variable">DEBIAN_FRONTEND</span><span class="token operator">=</span><span class="token string">&quot;noninteractive&quot;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> kmod <span class="token function">vim</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libcap-dev zlib1g-dev libelf-dev libfl-dev python3.8 python3-pip python3.8-dev clang libclang-dev <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
  <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> python3<span class="token variable">)</span></span> /usr/bin/python
RUN <span class="token function">git</span> clone https://github.com/iovisor/bcc.git <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">mkdir</span> bcc/build <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token builtin class-name">cd</span> bcc/build <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    cmake <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    cmake <span class="token parameter variable">-DPYTHON_CMD</span><span class="token operator">=</span>python3 <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token builtin class-name">cd</span> src/python/ <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">make</span> <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s/self._syscall_prefixes\\[0\\]/self._syscall_prefixes\\[1\\]/g&quot;</span> /usr/lib/python3/dist-packages/bcc/__init__.py

CMD <span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs debugfs /sys/kernel/debug <span class="token operator">&amp;&amp;</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行如下命令，构建镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> ebpf-for-mac <span class="token parameter variable">-f</span> ./Dockerfile.tools <span class="token builtin class-name">.</span>
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Building <span class="token number">6097</span>.8s <span class="token punctuation">(</span><span class="token number">16</span>/16<span class="token punctuation">)</span> FINISHED
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以直接拉取以构建好的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> pull registry.cn-hangzhou.aliyuncs.com/denverdino/ebpf-for-mac
$ <span class="token function">docker</span> tag registry.cn-hangzhou.aliyuncs.com/denverdino/ebpf-for-mac ebpf-for-mac
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vagrant-virtualbox-1" tabindex="-1"><a class="header-anchor" href="#vagrant-virtualbox-1"><span>Vagrant + VirtualBox</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant init bento/ubuntu-20.04
$ vagrant up
$ vagrant <span class="token function">ssh</span>
$ <span class="token function">cat</span> /etc/issue <span class="token comment"># 查看发行版本</span>
Ubuntu <span class="token number">20.04</span>.1 LTS <span class="token punctuation">\\</span>n <span class="token punctuation">\\</span>l

$ lsb_release <span class="token parameter variable">-a</span>
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu <span class="token number">20.04</span>.1 LTS
Release:	<span class="token number">20.04</span>
Codename:	focal

$ <span class="token function">uname</span> <span class="token parameter variable">-rs</span>
Linux <span class="token number">5.4</span>.0-52-generic

$ <span class="token function">uname</span> <span class="token parameter variable">-a</span>
Linux vagrant <span class="token number">5.4</span>.0-52-generic <span class="token comment">#57-Ubuntu SMP Thu Oct 15 10:57:00 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span>

$ <span class="token function">sudo</span> dpkg --get-selections <span class="token operator">|</span><span class="token function">grep</span> linux-image
linux-image-5.4.0-52-generic			<span class="token function">install</span>
linux-image-generic				<span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用clone下来的Vagrantfile进行偷懒</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/bpftools/linux-observability-with-bpf.git
<span class="token builtin class-name">cd</span> linux-observability-with-bpf
vagrant up <span class="token comment"># 此过程可能需要一段时间，因为Vagrant会下载所需的虚拟机镜像（称为box）并进行配置</span>
vagrant <span class="token function">ssh</span> <span class="token comment"># 虚拟机配置完成后，运行以下命令以ssh访问该虚拟机</span>
<span class="token comment"># 然后填写默认账密：都是vagrant</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-tls错误" tabindex="-1"><a class="header-anchor" href="#坑1-tls错误"><span>坑1，TLS错误</span></a></h4><p>vpn原因，关了就好。原错误</p><p>vagrant up时报错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant up
Bringing machine <span class="token string">&#39;bpfbook&#39;</span> up with <span class="token string">&#39;virtualbox&#39;</span> provider<span class="token punctuation">..</span>.
<span class="token operator">==</span><span class="token operator">&gt;</span> bpfbook: Box <span class="token string">&#39;fedora/30-cloud-base&#39;</span> could not be found. Attempting to <span class="token function">find</span> and install<span class="token punctuation">..</span>.
    bpfbook: Box Provider: virtualbox
    bpfbook: Box Version: <span class="token number">30.20190425</span>.0
<span class="token operator">==</span><span class="token operator">&gt;</span> bpfbook: Loading metadata <span class="token keyword">for</span> box <span class="token string">&#39;fedora/30-cloud-base&#39;</span>
    bpfbook: URL: https://vagrantcloud.com/fedora/30-cloud-base
The box <span class="token string">&#39;fedora/30-cloud-base&#39;</span> could not be found or
could not be accessed <span class="token keyword">in</span> the remote catalog. If this is a private
box on HashiCorp<span class="token string">&#39;s Vagrant Cloud, please verify you&#39;</span>re logged <span class="token keyword">in</span> via
<span class="token variable"><span class="token variable">\`</span>vagrant login<span class="token variable">\`</span></span><span class="token builtin class-name">.</span> Also, please double-check the name. The expanded
URL and error message are shown below:

URL: https://vagrantcloud.com/fedora/30-cloud-base
Error: schannel: next InitializeSecurityContext failed: Unknown error <span class="token punctuation">(</span>0x80092013<span class="token punctuation">)</span> - ���ڵ������������ѻ� �����������޷���������
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑2-box版本不可用" tabindex="-1"><a class="header-anchor" href="#坑2-box版本不可用"><span>坑2，box版本不可用</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant up
Bringing machine <span class="token string">&#39;bpfbook&#39;</span> up with <span class="token string">&#39;virtualbox&#39;</span> provider<span class="token punctuation">..</span>.
<span class="token operator">==</span><span class="token operator">&gt;</span> bpfbook: Box <span class="token string">&#39;fedora/30-cloud-base&#39;</span> could not be found. Attempting to <span class="token function">find</span> and install<span class="token punctuation">..</span>.
    bpfbook: Box Provider: virtualbox
    bpfbook: Box Version: <span class="token number">30.20190425</span>.0
<span class="token operator">==</span><span class="token operator">&gt;</span> bpfbook: Loading metadata <span class="token keyword">for</span> box <span class="token string">&#39;fedora/30-cloud-base&#39;</span>
    bpfbook: URL: https://vagrantcloud.com/fedora/30-cloud-base
<span class="token operator">==</span><span class="token operator">&gt;</span> bpfbook: Adding box <span class="token string">&#39;fedora/30-cloud-base&#39;</span> <span class="token punctuation">(</span>v30.20190425.0<span class="token punctuation">)</span> <span class="token keyword">for</span> provider: virtualbox
    bpfbook: Downloading: https://vagrantcloud.com/fedora/boxes/30-cloud-base/versions/30.20190425.0/providers/virtualbox.box
Download redirected to host: download.fedoraproject.org
    bpfbook:
An error occurred <span class="token keyword">while</span> downloading the remote file. The error
message, <span class="token keyword">if</span> any, is reproduced below. Please fix this error and try
again.

The requested URL returned error: <span class="token number">404</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误是因为Vagrant试图下载一个名为<code>fedora/30-cloud-base</code>的box，但遇到了404错误，即文件未找到。这可能是因为该box版本不再可用，或者下载地址已发生变化。</p><p>解决这个问题的方法有两个：</p><ol><li><p>使用一个可用的box版本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>config.vm.box <span class="token operator">=</span> <span class="token string">&quot;fedora/30-cloud-base&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以从以下网址查找可用的Fedora版本：https://app.vagrantup.com/fedora</p></li><li><p>如果您需要使用特定版本的Fedora，还可以尝试自定义下载URL。首先，在Vagrantfile中找到以下一行代码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>config.vm.box <span class="token operator">=</span> <span class="token string">&quot;fedora/30-cloud-base&quot;</span>
config.vm.box_url <span class="token operator">=</span> <span class="token string">&quot;https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/30/Cloud/x86_64/images/Fedora-Cloud-Base-Vagrant-30-1.2.x86_64.vagrant-virtualbox.box&quot;</span> <span class="token comment"># 在其下方添加一行，指定自定义的box下载URL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>我实际的解决：修改：（好像升一个两个版本还是不可用，这里直接升到最新版就行了）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>fedora.vm.box <span class="token operator">=</span> <span class="token string">&quot;fedora/38-cloud-base&quot;</span>
fedora.vm.box_version <span class="token operator">=</span> <span class="token string">&quot;38.20230413.1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑3-ssh之后没反应" tabindex="-1"><a class="header-anchor" href="#坑3-ssh之后没反应"><span>坑3，ssh之后没反应</span></a></h4><p>情况：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PS H:<span class="token punctuation">\\</span>Git<span class="token punctuation">\\</span>Public<span class="token punctuation">\\</span>linux-observability-with-bpf<span class="token operator">&gt;</span> vagrant <span class="token function">ssh</span>
PS H:<span class="token punctuation">\\</span>Git<span class="token punctuation">\\</span>Public<span class="token punctuation">\\</span>linux-observability-with-bpf<span class="token operator">&gt;</span> vagrant <span class="token function">ssh</span>
PS H:<span class="token punctuation">\\</span>Git<span class="token punctuation">\\</span>Public<span class="token punctuation">\\</span>linux-observability-with-bpf<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant ssh-config <span class="token comment"># 这将显示如下信息</span>
Host bpfbook
  HostName <span class="token number">127.0</span>.0.1
  User vagrant
  Port <span class="token number">2222</span>
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  <span class="token punctuation">..</span>.
  IdentityFile <span class="token operator">&lt;</span>虚拟机私钥路径<span class="token operator">&gt;</span>
  <span class="token punctuation">..</span>.

<span class="token comment"># 用ssh命令手动连接，例如：ssh vagrant@&lt;HostName&gt; -p &lt;Port&gt; -i &lt;PRIVATE_KEY_PATH&gt;</span>
$ <span class="token function">ssh</span> vagrant@127.0.0.1 <span class="token parameter variable">-p</span> <span class="token number">2222</span> <span class="token parameter variable">-i</span> C:/Users/A/.vagrant.d/insecure_private_key
ssh: connect to <span class="token function">host</span> <span class="token number">127.0</span>.0.1 port <span class="token number">2222</span>: Connection refused 然后这里可能会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑4-ssh连接拒绝" tabindex="-1"><a class="header-anchor" href="#坑4-ssh连接拒绝"><span>坑4，ssh连接拒绝</span></a></h4><p>先重新运行检查状态</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant status <span class="token comment"># 查看虚拟机的运行状态</span>
Current machine states:

bpfbook                   running <span class="token punctuation">(</span>virtualbox<span class="token punctuation">)</span>

The VM is running. To stop this VM, you can run <span class="token variable"><span class="token variable">\`</span>vagrant <span class="token function">halt</span><span class="token variable">\`</span></span> to
shut it down forcefully, or you can run <span class="token variable"><span class="token variable">\`</span>vagrant <span class="token function">suspend</span><span class="token variable">\`</span></span> to simply
<span class="token function">suspend</span> the virtual machine. In either case, to restart it again,
simply run <span class="token variable"><span class="token variable">\`</span>vagrant up<span class="token variable">\`</span></span><span class="token builtin class-name">.</span>

$ vagrant ssh-config
Host bpfbook
  HostName <span class="token number">127.0</span>.0.1
  User vagrant
  Port <span class="token number">2222</span>
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile C:/Users/A/.vagrant.d/insecure_private_key
  IdentitiesOnly <span class="token function">yes</span>
  LogLevel FATAL
  PubkeyAcceptedKeyTypes +ssh-rsa
  HostKeyAlgorithms +ssh-rsa

$ <span class="token function">ssh</span> vagrant@127.0.0.1 <span class="token parameter variable">-p</span> <span class="token number">2222</span> <span class="token parameter variable">-i</span> C:/Users/A/.vagrant.d/insecure_private_key

$ <span class="token function">ssh</span> <span class="token parameter variable">-vvv</span> vagrant@127.0.0.1 <span class="token parameter variable">-p</span> <span class="token number">2222</span> <span class="token parameter variable">-i</span> C:/Users/A/.vagrant.d/insecure_private_key <span class="token comment"># 这个会打印详细的debug和错误信息，利于分析</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟机软件设置</p><ol><li>打开 Oracle VM VirtaulBox 或对应的虚拟机软件，查看是否多了一个正在运行的虚拟机</li><li>选择对应的虚拟机并单击设置</li><li>进入 “网络” 选项卡</li><li>展开 “高级” 设置</li><li>点击 “端口转发”</li><li>确保存在一个转发规则，其中主机端口（如2222）已映射到虚拟机的端口（如22）</li></ol><p>或尝试重新创建虚拟机。有时虚拟机配置可能出现问题</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ vagrant destroy
$ vagrant up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再不然双击虚拟机软件对应的虚拟机进行连接。注意VirtaulBox是 <strong>右Ctrl</strong> 退出聚焦，VMWare好像是 <strong>Ctrl+Alt</strong> 退出聚焦</p><h3 id="通用" tabindex="-1"><a class="header-anchor" href="#通用"><span>通用</span></a></h3><h4 id="坑1-找不到-sys-kernel-tracing-从kprobe上分离bpf失败" tabindex="-1"><a class="header-anchor" href="#坑1-找不到-sys-kernel-tracing-从kprobe上分离bpf失败"><span>坑1 - 找不到/sys/kernel/tracing/，从kprobe上分离BPF失败</span></a></h4><p>wsl重启后再次运行相同的eBPF BCC程序，但出现了错误：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./hello_world.py</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;./hello_world.py&quot;</span>, line <span class="token number">12</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    BPF<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">&#39;&#39;</span>&#39;
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">1568</span>, <span class="token keyword">in</span> trace_print
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">1544</span>, <span class="token keyword">in</span> trace_readline
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">1495</span>, <span class="token keyword">in</span> trace_open
FileNotFoundError: <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such <span class="token function">file</span> or directory: <span class="token string">&#39;/sys/kernel/tracing/trace_pipe&#39;</span>
open<span class="token punctuation">(</span>/sys/kernel/tracing/kprobe_events<span class="token punctuation">)</span>: No such <span class="token function">file</span> or directory
Error <span class="token keyword">in</span> atexit._run_exitfuncs:
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">1774</span>, <span class="token keyword">in</span> cleanup
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">899</span>, <span class="token keyword">in</span> detach_kprobe_event
  File <span class="token string">&quot;/usr/lib/python3/dist-packages/bcc-0.28.0+18b00a90-py3.8.egg/bcc/__init__.py&quot;</span>, line <span class="token number">913</span>, <span class="token keyword">in</span> detach_kprobe_event_by_fn
Exception: Failed to detach BPF from kprobe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决：重新挂载tracing追踪点</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mount</span> <span class="token parameter variable">-t</span> tracefs tracefs /sys/kernel/tracing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="验证环境" tabindex="-1"><a class="header-anchor" href="#验证环境"><span>验证环境</span></a></h1><p>找个eBPF项目进行编译，前面配置时有以项目编译作为目标的。如内核自带的bpf demo、如BCC。</p>`,41))])}const x=t(r,[["render",h],["__file","【原创】环境搭建专题.html.vue"]]),_=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/%E5%8E%9F%E5%88%9B/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%93%E9%A2%98/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%93%E9%A2%98.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 环境搭建专题 参考： 狄卫华博客 BBC github wiki 一些专题博客 搭建 eBPF 开发环境 前言 最低环境 虽然 Linux 内核很早就已经支持了 eBPF，但很多新特性都是在 4.x 版本中逐步增加的。所以，想要稳定运行 eBPF 程序，内核至少需要 4.9 或者更新的版本。而在开发和学习 eBPF 时，为了体验和掌握最...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/%E5%8E%9F%E5%88%9B/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%93%E9%A2%98/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%93%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 环境搭建专题 参考： 狄卫华博客 BBC github wiki 一些专题博客 搭建 eBPF 开发环境 前言 最低环境 虽然 Linux 内核很早就已经支持了 eBPF，但很多新特性都是在 4.x 版本中逐步增加的。所以，想要稳定运行 eBPF 程序，内核至少需要 4.9 或者更新的版本。而在开发和学习 eBPF 时，为了体验和掌握最..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"环境搭建专题","slug":"环境搭建专题","link":"#环境搭建专题","children":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"最低环境","slug":"最低环境","link":"#最低环境","children":[]},{"level":3,"title":"设置内核编译选项","slug":"设置内核编译选项","link":"#设置内核编译选项","children":[]},{"level":3,"title":"开发环境","slug":"开发环境","link":"#开发环境","children":[]},{"level":3,"title":"本章常用的一些Linux目录","slug":"本章常用的一些linux目录","link":"#本章常用的一些linux目录","children":[]}]},{"level":2,"title":"开始配置","slug":"开始配置","link":"#开始配置","children":[{"level":3,"title":"配置 eBPF 开发环境","slug":"配置-ebpf-开发环境","link":"#配置-ebpf-开发环境","children":[]}]}]},{"level":1,"title":"个人环境问题","slug":"个人环境问题","link":"#个人环境问题","children":[{"level":2,"title":"介绍个人使用的环境","slug":"介绍个人使用的环境","link":"#介绍个人使用的环境","children":[{"level":3,"title":"原文配置","slug":"原文配置","link":"#原文配置","children":[]},{"level":3,"title":"官网在线虚拟机的配置","slug":"官网在线虚拟机的配置","link":"#官网在线虚拟机的配置","children":[]},{"level":3,"title":"wsl","slug":"wsl","link":"#wsl","children":[]},{"level":3,"title":"208机器（旧系统）","slug":"_208机器-旧系统","link":"#_208机器-旧系统","children":[]},{"level":3,"title":"208机器（新系统）","slug":"_208机器-新系统","link":"#_208机器-新系统","children":[]},{"level":3,"title":"vagrant + virtualBox","slug":"vagrant-virtualbox","link":"#vagrant-virtualbox","children":[]}]},{"level":2,"title":"从0开始的配置记录","slug":"从0开始的配置记录","link":"#从0开始的配置记录","children":[{"level":3,"title":"208版 编译内核中的bpf demo","slug":"_208版-编译内核中的bpf-demo","link":"#_208版-编译内核中的bpf-demo","children":[{"level":4,"title":"坑1，重新生成配置项","slug":"坑1-重新生成配置项","link":"#坑1-重新生成配置项","children":[]},{"level":4,"title":"坑2，找不到vmlinux *3","slug":"坑2-找不到vmlinux-3","link":"#坑2-找不到vmlinux-3","children":[]},{"level":4,"title":"坑3，无法加载BTF","slug":"坑3-无法加载btf","link":"#坑3-无法加载btf","children":[]},{"level":4,"title":"坑4，重复定义 list_head","slug":"坑4-重复定义-list-head","link":"#坑4-重复定义-list-head","children":[]},{"level":4,"title":"坑5，struct btf 定义不完整","slug":"坑5-struct-btf-定义不完整","link":"#坑5-struct-btf-定义不完整","children":[]},{"level":4,"title":"其他坑","slug":"其他坑","link":"#其他坑","children":[]}]},{"level":3,"title":"208版 编译BCC","slug":"_208版-编译bcc","link":"#_208版-编译bcc","children":[{"level":4,"title":"坑1，无法运行/usr/share/bcc/tools里的python程序","slug":"坑1-无法运行-usr-share-bcc-tools里的python程序","link":"#坑1-无法运行-usr-share-bcc-tools里的python程序","children":[]},{"level":4,"title":"坑2，找不到：bpf_module_create_b","slug":"坑2-找不到-bpf-module-create-b","link":"#坑2-找不到-bpf-module-create-b","children":[]}]},{"level":3,"title":"208版 编译BCC-libbpf-tools (笔记者: 亲测完成)","slug":"_208版-编译bcc-libbpf-tools-笔记者-亲测完成","link":"#_208版-编译bcc-libbpf-tools-笔记者-亲测完成","children":[{"level":4,"title":"坑1，找不到vmlinux_518","slug":"坑1-找不到vmlinux-518","link":"#坑1-找不到vmlinux-518","children":[]}]},{"level":3,"title":"wsl2版 编译内核中的bpf demo","slug":"wsl2版-编译内核中的bpf-demo","link":"#wsl2版-编译内核中的bpf-demo","children":[{"level":4,"title":"坑1，重复定义 list_head","slug":"坑1-重复定义-list-head","link":"#坑1-重复定义-list-head","children":[]}]},{"level":3,"title":"wsl2版 编译BCC (笔记者: python版成功，c/cpp版未至全局变量)","slug":"wsl2版-编译bcc-笔记者-python版成功-c-cpp版未至全局变量","link":"#wsl2版-编译bcc-笔记者-python版成功-c-cpp版未至全局变量","children":[{"level":4,"title":"坑1，无法运行/usr/share/bcc/tools里的python程序 (解决同208)","slug":"坑1-无法运行-usr-share-bcc-tools里的python程序-解决同208","link":"#坑1-无法运行-usr-share-bcc-tools里的python程序-解决同208","children":[]},{"level":4,"title":"坑2，找不到：bpf_module_create_b (解决同208)","slug":"坑2-找不到-bpf-module-create-b-解决同208","link":"#坑2-找不到-bpf-module-create-b-解决同208","children":[]}]},{"level":3,"title":"wsl2版 编译BCC-libbpf-tools (笔记者: 亲测完成)","slug":"wsl2版-编译bcc-libbpf-tools-笔记者-亲测完成","link":"#wsl2版-编译bcc-libbpf-tools-笔记者-亲测完成","children":[{"level":4,"title":"坑1，在vmlinux中找不到.BTF","slug":"坑1-在vmlinux中找不到-btf","link":"#坑1-在vmlinux中找不到-btf","children":[]},{"level":4,"title":"坑2，找不到syscalls/sys_enter_openat，无法与跟踪点连接","slug":"坑2-找不到syscalls-sys-enter-openat-无法与跟踪点连接","link":"#坑2-找不到syscalls-sys-enter-openat-无法与跟踪点连接","children":[]}]},{"level":3,"title":"Docker版 编译BCC","slug":"docker版-编译bcc","link":"#docker版-编译bcc","children":[{"level":4,"title":"docker容器准备","slug":"docker容器准备","link":"#docker容器准备","children":[]},{"level":4,"title":"wsl补充","slug":"wsl补充","link":"#wsl补充","children":[]},{"level":4,"title":"使用该docker编译BCC","slug":"使用该docker编译bcc","link":"#使用该docker编译bcc","children":[]}]},{"level":3,"title":"Docker版 - 编译BCC-libbpf-tools","slug":"docker版-编译bcc-libbpf-tools","link":"#docker版-编译bcc-libbpf-tools","children":[]},{"level":3,"title":"Docker版 - mac","slug":"docker版-mac","link":"#docker版-mac","children":[]},{"level":3,"title":"Vagrant + VirtualBox","slug":"vagrant-virtualbox-1","link":"#vagrant-virtualbox-1","children":[{"level":4,"title":"坑1，TLS错误","slug":"坑1-tls错误","link":"#坑1-tls错误","children":[]},{"level":4,"title":"坑2，box版本不可用","slug":"坑2-box版本不可用","link":"#坑2-box版本不可用","children":[]},{"level":4,"title":"坑3，ssh之后没反应","slug":"坑3-ssh之后没反应","link":"#坑3-ssh之后没反应","children":[]},{"level":4,"title":"坑4，ssh连接拒绝","slug":"坑4-ssh连接拒绝","link":"#坑4-ssh连接拒绝","children":[]}]},{"level":3,"title":"通用","slug":"通用","link":"#通用","children":[{"level":4,"title":"坑1 - 找不到/sys/kernel/tracing/，从kprobe上分离BPF失败","slug":"坑1-找不到-sys-kernel-tracing-从kprobe上分离bpf失败","link":"#坑1-找不到-sys-kernel-tracing-从kprobe上分离bpf失败","children":[]}]}]}]},{"level":1,"title":"验证环境","slug":"验证环境","link":"#验证环境","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":28.81,"words":8644},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/原创/环境搭建专题/【原创】环境搭建专题.md","excerpt":"\\n<h1>目录</h1>\\n<h1>环境搭建专题</h1>\\n<p>参考：</p>\\n<ul>\\n<li>狄卫华博客</li>\\n<li>BBC github wiki</li>\\n<li>一些专题博客\\n<ul>\\n<li><a href=\\"https://luckymrwang.github.io/2022/08/19/%E6%90%AD%E5%BB%BA-eBPF-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/#Ubuntu-20-04\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">搭建 eBPF 开发环境</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{x as comp,_ as data};
