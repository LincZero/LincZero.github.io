import{_ as s,c as a,e as t,o as e}from"./app-TEGfglWE.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h1><h2 id="string类-字符串" tabindex="-1"><a class="header-anchor" href="#string类-字符串"><span>String类（字符串）</span></a></h2><p>API: <code>java.lang.String 1.0</code>（包含了50多个方法）</p><h3 id="原理类" tabindex="-1"><a class="header-anchor" href="#原理类"><span>原理类</span></a></h3><h4 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h4><p>从概念上讲，Java字符串就是Unicode字符序列</p><p>Java<strong>没有内置的字符串类型</strong>，而是在标准Java类库中提供了一个预定义类，很自然地叫做String</p><p>（Python有但用起来有点奇怪（存储字符串的变量可变，字符串元素不可变，为区别于常量其更贴切的说法是<code>元素不可变性</code>），这有点不像数组）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> e <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>				<span class="token comment">// an empty string</span>
<span class="token class-name">String</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不可变字符串" tabindex="-1"><a class="header-anchor" href="#不可变字符串"><span>不可变字符串</span></a></h4><p>和Python字符串一样，Java的String类字符串也是不可修改的。String类没有提供用于修改字符串的方法。 如果希望将greeting（“Hello”）的内容修改为“Help！”，不能直接地将greeting的最后两个位置的字符修改为‘p’和‘！’。 这对于C程序员来说，将会感到无从下手。</p><h5 id="技巧-拼接" tabindex="-1"><a class="header-anchor" href="#技巧-拼接"><span>技巧（拼接）</span></a></h5><p>在Java中实现这项操作非常容易。首先提取需要的字符，然后再拼接上替换的字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>greeting <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;p!&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// Help!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h5><ul><li><p>原理：可以修改字符串变量greeting，让它引用另外一个字符串，这就如同可以将存放3的数值变量改成存放4一样。</p></li><li><p>效率：这样做是否会降低运行效率呢？看起来好像修改一个代码单元要比创建一个新字符串更加简洁。</p><p>答案是：也对，也不对。的确，通过拼接“Hel”和“p！”来创建一个新字符串的效率确实不高。</p><p>但是，<strong>不可变字符串却有一个优点：编译器可以让字符串共享</strong>。</p><p>总而言之，Java的设计者认为共享带来的高效率远远胜过于提取、拼接字符串所带来的低效率。查看一下程序会发现：很少需要修改字符串，而是往往需要对字符串进行比较</p></li></ul><h4 id="长度-length和codepointcount" tabindex="-1"><a class="header-anchor" href="#长度-length和codepointcount"><span>长度 length和codePointCount</span></a></h4><p>长度，length 和 codePointCount</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;\\uD835\\uDD46 is the set of octonions&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 其中\\uD835\\uDD46也可写作U+1D546或𝕆，是一个八元数的数学符号，需要两个代码单元</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 返回\`代码单元的数量\`（采用UTF-16编码表示的给定字符串）</span>
<span class="token comment">// is 26，  \\uD835\\uDD46为2</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 返回\`码点的数量\`（实际长度）</span>
<span class="token comment">// is 25，  \\uD835\\uDD46为1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><s>码点和代码单元（除非对底层的代码单元感兴趣，否则不要使用）</s></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 将返回位置n的代码单元（相当于取数组）</span>
<span class="token comment">//  调用s.charAt(1);返回的不是该字符的后一个字符，而是第二个代码单元。为了避免这个问题，不要使用char类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>码点遍历</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 顺序遍历</span>
<span class="token keyword">int</span> cp <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isSupplementaryCodePoint</span><span class="token punctuation">(</span>cp<span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>

<span class="token comment">// 或者回退</span>
i<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isSurrogate</span><span class="token punctuation">(</span>sentence<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> cp <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更容易的办法是使用codePoints方法，它会生成一个int值的“流”，每个int值对应一个码点。</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codePoints <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">codePoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 反之，要把一个码点数组转换为一个字符串，可以使用构造函数</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> codePoints<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-常用-api" tabindex="-1"><a class="header-anchor" href="#string-常用-api"><span>String 常用 API</span></a></h3><h4 id="拼接" tabindex="-1"><a class="header-anchor" href="#拼接"><span>拼接 +</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> expletive <span class="token operator">=</span> <span class="token string">&quot;Expletive&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">PG13</span> <span class="token operator">=</span> <span class="token string">&quot;deleted&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> expletive <span class="token operator">+</span> <span class="token constant">PG13</span><span class="token punctuation">;</span>

<span class="token comment">// 还可以拼接数值类型</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;age:&quot;</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子串-substring" tabindex="-1"><a class="header-anchor" href="#子串-substring"><span>子串 substring</span></a></h4><p>有点类似于Python中的切片操作，不过Python的操作更字面量些</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// “Hel&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>join</span></a></h4><p>多个字符串放在一起，用一个定界符分隔</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s_all <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; / &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;S&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;XL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s_all is &quot;S / M / L / XL&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检测字符串是否相等-equals" tabindex="-1"><a class="header-anchor" href="#检测字符串是否相等-equals"><span>检测字符串是否相等 equals</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">// 返回布尔，区分大小写</span>
<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 可以使用字面量</span>
<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 不区分大小写</span>
<span class="token comment">// 一定不要使用==运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上</span>
<span class="token comment">// 这点和C/C++一样，因为JavaString本质上是指针</span>
greeting<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>		<span class="token comment">// 更类似于C strcmp的函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空串与null串" tabindex="-1"><a class="header-anchor" href="#空串与null串"><span>空串与Null串</span></a></h4><p>检查方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 空串</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Null串</span>
<span class="token comment">// String变量还可以存放一个特殊的值，名为null，这表示目前没有任何对象与该变量关联</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 即不是空串又不是null，则用&amp;&amp;来检测</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-api" tabindex="-1"><a class="header-anchor" href="#string-api"><span>String API</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 其他</span>
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 返回给定位置的代码单元（除非对底层的代码单元感兴趣，否则不要使用）</span>
<span class="token keyword">int</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 返回从给定位置开始的码点</span>
<span class="token keyword">int</span> <span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> cpCount<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 返回从startIndex开始，cpCount个码数</span>
<span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 按字典顺序，看字符串若位于other前则负数，之后正数，相等为0</span>
<span class="token class-name">IntStream</span> <span class="token function">codePoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 将字符串码点作为一个流返回，调用toArray将它们放在一个数组中</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codePoints<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// offset开始的count个码点构造一个新字符串</span>

<span class="token comment">// 布尔类</span>
<span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>												<span class="token comment">// 是否为空</span>
<span class="token keyword">boolean</span> <span class="token function">blank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>												<span class="token comment">// 是否为空或由空格组成</span>
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 两字符是否相等，不忽略/忽略大小写</span>
<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//</span>
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 前缀/后缀</span>
<span class="token keyword">boolean</span> <span class="token function">endWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">//</span>

<span class="token comment">// 序列/个数类</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 从cp开始，返回匹配到的序列，不存在则返回-1</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 从最后开始匹配</span>
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastindexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastindexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>													<span class="token comment">// 返回字符串代码单元的个数</span>
<span class="token keyword">int</span> <span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 返回字符串片段中码点的个数</span>

<span class="token comment">// 返回新字符串系列</span>
<span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> oldString<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 返回新字符串，用newString替换oldString</span>
<span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 返回新字符串，子串</span>
<span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">//</span>
<span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 返回新字符串，全小写/全小写</span>
<span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">//</span>
<span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>													<span class="token comment">// 返回新字符串，删除头尾空格或空白</span>
<span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CHarSequence</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 返回新字符串，用给定的定界符连接所有元素</span>
<span class="token class-name">String</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 返回新字符串，将当前字符串重复count次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stringbuilder类-构建字符串类" tabindex="-1"><a class="header-anchor" href="#stringbuilder类-构建字符串类"><span>StringBuilder类（构建字符串类）</span></a></h2><p>API: <code>java.lang.StringBuilder 5.0</code></p><h3 id="构造" tabindex="-1"><a class="header-anchor" href="#构造"><span>构造</span></a></h3><p>有些时候，需要由较短的字符串构建字符串，例如，按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。</p><p>每次连接字符串，都会构建一个新的String对象，<strong>既耗时，又浪费空间</strong>。使用StringBuilder类就可以避免这个问题的发生。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当每次需要添加一部分内容时，就调用append方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 添加单个字符</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 追加字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h3><p>在需要构建字符串时就调用toString方法，将可以得到一个String对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> completedString <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,52)]))}const i=s(p,[["render",o],["__file","03. 字符类型.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 字符类型 String类（字符串） API: java.lang.String 1.0（包含了50多个方法） 原理类 简概 从概念上讲，Java字符串就是Unicode字符序列 Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类，很自然地叫做String （Python有但用起来有点奇怪（存储字符串的变量可变，字符...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 字符类型 String类（字符串） API: java.lang.String 1.0（包含了50多个方法） 原理类 简概 从概念上讲，Java字符串就是Unicode字符序列 Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类，很自然地叫做String （Python有但用起来有点奇怪（存储字符串的变量可变，字符..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[{"level":2,"title":"String类（字符串）","slug":"string类-字符串","link":"#string类-字符串","children":[{"level":3,"title":"原理类","slug":"原理类","link":"#原理类","children":[{"level":4,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":4,"title":"不可变字符串","slug":"不可变字符串","link":"#不可变字符串","children":[{"level":5,"title":"技巧（拼接）","slug":"技巧-拼接","link":"#技巧-拼接","children":[]},{"level":5,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[]}]},{"level":4,"title":"长度 length和codePointCount","slug":"长度-length和codepointcount","link":"#长度-length和codepointcount","children":[]}]},{"level":3,"title":"String 常用 API","slug":"string-常用-api","link":"#string-常用-api","children":[{"level":4,"title":"拼接  +","slug":"拼接","link":"#拼接","children":[]},{"level":4,"title":"子串  substring","slug":"子串-substring","link":"#子串-substring","children":[]},{"level":4,"title":"join","slug":"join","link":"#join","children":[]},{"level":4,"title":"检测字符串是否相等 equals","slug":"检测字符串是否相等-equals","link":"#检测字符串是否相等-equals","children":[]},{"level":4,"title":"空串与Null串","slug":"空串与null串","link":"#空串与null串","children":[]}]},{"level":3,"title":"String API","slug":"string-api","link":"#string-api","children":[]}]},{"level":2,"title":"StringBuilder类（构建字符串类）","slug":"stringbuilder类-构建字符串类","link":"#stringbuilder类-构建字符串类","children":[{"level":3,"title":"构造","slug":"构造","link":"#构造","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.88,"words":1765},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/03. 字符类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>字符类型</h1>\\n<h2>String类（字符串）</h2>\\n<p>API: <code>java.lang.String 1.0</code>（包含了50多个方法）</p>\\n<h3>原理类</h3>\\n<h4>简概</h4>\\n<p>从概念上讲，Java字符串就是Unicode字符序列</p>\\n<p>Java<strong>没有内置的字符串类型</strong>，而是在标准Java类库中提供了一个预定义类，很自然地叫做String</p>\\n<p>（Python有但用起来有点奇怪（存储字符串的变量可变，字符串元素不可变，为区别于常量其更贴切的说法是<code>元素不可变性</code>），这有点不像数组）</p>","autoDesc":true}');export{i as comp,u as data};
