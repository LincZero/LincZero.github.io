import{_ as s,c as l,e,o as a}from"./app-Dnpl954R.js";const n={};function t(h,i){return a(),l("div",null,i[0]||(i[0]=[e(`<h1 id="结构-结构化编程" tabindex="-1"><a class="header-anchor" href="#结构-结构化编程"><span>结构 - 结构化编程</span></a></h1><h2 id="结构化编程思想-逻辑控制" tabindex="-1"><a class="header-anchor" href="#结构化编程思想-逻辑控制"><span>结构化编程思想（逻辑控制）</span></a></h2><h3 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块"><span>语句块</span></a></h3><ul><li>作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作）</li><li>使用：两个花括号能构造一条复合语句（代码块）</li><li>局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放</li></ul><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><h4 id="for-else-与c不同" tabindex="-1"><a class="header-anchor" href="#for-else-与c不同"><span>for [- else]（与C不同）</span></a></h4><ul><li><p>使用</p><ul><li>通式：<code>for (initialization; test-expression; update-expression) body</code></li><li>举例：<code>for (i=0; i&lt;5; i++) a++</code>（单行执行语句可以不加大括号）</li></ul></li><li><p>组成</p><ul><li>初始化（<em>loop initialization</em>） <ul><li>循环初始化（<em>initialization</em>）</li><li>循环测试（<em>test-expression</em>）</li><li>更新表达式（<em>update-expression</em>）</li></ul></li><li>循环体（<em>loop body</em>）</li></ul></li><li><p>执行顺序</p><ul><li>初始值 &gt; 执行测试 &gt; 执行循环体 &gt; 更新用于测试的值 &gt; 从2开始重复</li></ul></li><li><p><mark><strong>声明语句表达式、新的for语句</strong></mark></p><ul><li><p>声明语句表达式（旧）</p><ul><li>C++曾定义了声明语句表达式，允许在for初始化处声明变量（语法糖，本质还是for前声明变量）</li><li>而本来在for中只能初始化值，需要提前声明变量</li><li>声明语句表达式只能在for中使用，在其他地方声明语句不被视作表达式</li><li>这种修改后来被取消，取而代之使用新的for语句</li></ul></li><li><p><strong>新的for语句（新）</strong></p><ul><li><p>将for语句从<code>for(expression, expression, expression) expression</code></p><p>改为<code>for(for-init-statement condition; expression) expression</code>（初始化和条件都在前面，一并视作语句）</p></li><li><p>与在for前声明相比，这种变量之存在for语句中，当程序离开循环后变量将消失（一些老式编译器仍视作在循环前声明）</p></li></ul></li></ul></li></ul><h4 id="while-else" tabindex="-1"><a class="header-anchor" href="#while-else"><span>while [- else]</span></a></h4><ul><li>使用： <ul><li>通式：<code>while (test-condition) body</code></li></ul></li><li>执行顺序： <ul><li>执行测试 &gt; 执行循环体 &gt; 从头开始重复</li></ul></li></ul><h4 id="do-while-else" tabindex="-1"><a class="header-anchor" href="#do-while-else"><span>do-while [- else]</span></a></h4><ul><li>区别 <ul><li>for循环和while：入口条件（<em>entry-condition</em>）循环（每轮循环之前都计算测试表达式的值）</li><li>do-whild：出口条件（<em>exit condition</em>）循环</li></ul></li><li>使用 <ul><li>通式：<code>do body while (test-expression)</code></li></ul></li></ul><h4 id="三种foreach高级循环" tabindex="-1"><a class="header-anchor" href="#三种foreach高级循环"><span>三种foreach高级循环</span></a></h4><h5 id="基于范围的for循环-引用循环和值循环" tabindex="-1"><a class="header-anchor" href="#基于范围的for循环-引用循环和值循环"><span>基于范围的for循环（引用循环和值循环）</span></a></h5><p>常用于数组遍历</p><p>一般是通过<code>str.size()</code>限制范围，用中括号法取元素</p><p>但C++11新增了一种循环：<code>基于范围</code>（<em>range-based</em>）的for循环，可用于数组和容器类（如vector和array）</p><ul><li>使用 <ul><li>例如<code>for (double x : prices) cout &lt;&lt; x &lt;&lt; std::endl;</code>（只能输出）</li><li>例如<code>for (double &amp;x : prices) x = x*0.8;</code>（可以改变数组的内容）</li></ul></li></ul><p>_</p><p>引用和值的循环</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : prices) cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 只能输出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x : prices) x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				// 可以改变数组的内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="qt的foreach" tabindex="-1"><a class="header-anchor" href="#qt的foreach"><span>QT的foreach</span></a></h5><p>Qt提供的替代C++中for循环的关键字</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, QList</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // process</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="stl容器循环" tabindex="-1"><a class="header-anchor" href="#stl容器循环"><span>STL容器循环</span></a></h5><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> my_array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> my_array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">it)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">it </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="延时循环" tabindex="-1"><a class="header-anchor" href="#延时循环"><span>延时循环</span></a></h4><ul><li><p>方案一：<code>clock()</code>，返回程序开始执行后所用的系统时间</p><p>但返回单位不一定是秒，而且返回的类型不确定</p></li><li><p>方案二：头文件<code>ctime</code>定义了常量<code>CLOCKS_PER_SEC</code>，等于每秒种包含的系统时间单位数，即<code>系统时间/CLOCKS_PER_SEC==秒数</code></p><p>而且<code>ctime</code>将<code>cloct_t</code>作为<code>clock()</code>返回类型的别名</p></li></ul><h3 id="条件" tabindex="-1"><a class="header-anchor" href="#条件"><span>条件</span></a></h3><h4 id="if-else-if-else" tabindex="-1"><a class="header-anchor" href="#if-else-if-else"><span>if [- else if - else]</span></a></h4><ul><li><p>使用：<code>if (test-condition) statement1 else statement2</code>，或<code>if - else if - else</code></p></li><li><p>自由排列：<code>if - else if - else</code>的写法基于C++的自由排列规则</p><ul><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">condition1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      statement1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">condition2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          statement2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          statement3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 可被排列成：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">condition1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      statement1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (test</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">condition2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      statement2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      statement3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>switch</span></a></h4><ul><li><p>使用：</p><ul><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (interger</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">expression)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      case</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> label1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">statement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      case</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> label2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">statement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">statement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>技巧——枚举量用作标签</p><ul><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  enum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">orange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">yellow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">green</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">blue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">violet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">indigo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (颜色号):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> red :</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>与if语句区别</p><ul><li>需要<code>break</code>：case是行标签而不是选项之间的界限，程序不会在执行到下一个case处自动停止，必须使用<code>break</code>语句跳出</li><li>比较局限性：不能处理取值范围、浮点测试，只能进行整数测试</li><li>性能：快很多</li></ul></li></ul><h4 id="三目运算符-条件运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符-条件运算符"><span>三目运算符（条件运算符）</span></a></h4><ul><li>使用： <ul><li><code>expression1 ? expression2 : expression3</code></li></ul></li><li>与if语句区别：三目运算符生成一个表达式，是一个值</li></ul><h3 id="跳转" tabindex="-1"><a class="header-anchor" href="#跳转"><span>跳转</span></a></h3><h4 id="break和continue语句" tabindex="-1"><a class="header-anchor" href="#break和continue语句"><span>break和continue语句</span></a></h4><ul><li><code>break</code>：用于循环体和switch（还能跳出switch语句） <ul><li>循环体使用：跳出全部循环，即跳过循环的剩余部分并到达下一条语句</li><li>switch使用：跳出switch语句（默认执行完case后的语句不会停止）</li></ul></li><li><code>continue</code>：用于循环体（不能用于switch语句） <ul><li>循环体使用：跳出本次循环，即跳过循环<strong>体</strong>剩余部分并开始新一轮循环</li></ul></li></ul><h4 id="goto" tabindex="-1"><a class="header-anchor" href="#goto"><span>goto</span></a></h4><h3 id="异常捕捉" tabindex="-1"><a class="header-anchor" href="#异常捕捉"><span>异常捕捉</span></a></h3><h4 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch"><span>try-catch</span></a></h4><h4 id="throw" tabindex="-1"><a class="header-anchor" href="#throw"><span>throw</span></a></h4>`,41)]))}const r=s(n,[["render",t],["__file","01. 结构 - 结构化编程.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html","title":"结构 - 结构化编程","lang":"zh-CN","frontmatter":{"description":"结构 - 结构化编程 结构化编程思想（逻辑控制） 语句块 作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作） 使用：两个花括号能构造一条复合语句（代码块） 局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放 循环 for [- else]（与C不同） 使用 通式：for (initialization...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"结构 - 结构化编程"}],["meta",{"property":"og:description","content":"结构 - 结构化编程 结构化编程思想（逻辑控制） 语句块 作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作） 使用：两个花括号能构造一条复合语句（代码块） 局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放 循环 for [- else]（与C不同） 使用 通式：for (initialization..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构 - 结构化编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"结构 - 结构化编程","slug":"结构-结构化编程","link":"#结构-结构化编程","children":[{"level":2,"title":"结构化编程思想（逻辑控制）","slug":"结构化编程思想-逻辑控制","link":"#结构化编程思想-逻辑控制","children":[{"level":3,"title":"语句块","slug":"语句块","link":"#语句块","children":[]},{"level":3,"title":"循环","slug":"循环","link":"#循环","children":[{"level":4,"title":"for [- else]（与C不同）","slug":"for-else-与c不同","link":"#for-else-与c不同","children":[]},{"level":4,"title":"while [- else]","slug":"while-else","link":"#while-else","children":[]},{"level":4,"title":"do-while [- else]","slug":"do-while-else","link":"#do-while-else","children":[]},{"level":4,"title":"三种foreach高级循环","slug":"三种foreach高级循环","link":"#三种foreach高级循环","children":[{"level":5,"title":"基于范围的for循环（引用循环和值循环）","slug":"基于范围的for循环-引用循环和值循环","link":"#基于范围的for循环-引用循环和值循环","children":[]},{"level":5,"title":"QT的foreach","slug":"qt的foreach","link":"#qt的foreach","children":[]},{"level":5,"title":"STL容器循环","slug":"stl容器循环","link":"#stl容器循环","children":[]}]},{"level":4,"title":"延时循环","slug":"延时循环","link":"#延时循环","children":[]}]},{"level":3,"title":"条件","slug":"条件","link":"#条件","children":[{"level":4,"title":"if [- else if - else]","slug":"if-else-if-else","link":"#if-else-if-else","children":[]},{"level":4,"title":"switch","slug":"switch","link":"#switch","children":[]},{"level":4,"title":"三目运算符（条件运算符）","slug":"三目运算符-条件运算符","link":"#三目运算符-条件运算符","children":[]}]},{"level":3,"title":"跳转","slug":"跳转","link":"#跳转","children":[{"level":4,"title":"break和continue语句","slug":"break和continue语句","link":"#break和continue语句","children":[]},{"level":4,"title":"goto","slug":"goto","link":"#goto","children":[]}]},{"level":3,"title":"异常捕捉","slug":"异常捕捉","link":"#异常捕捉","children":[{"level":4,"title":"try-catch","slug":"try-catch","link":"#try-catch","children":[]},{"level":4,"title":"throw","slug":"throw","link":"#throw","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":3.86,"words":1158},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/01. 结构 - 结构化编程.md","excerpt":"\\n<h2>结构化编程思想（逻辑控制）</h2>\\n<h3>语句块</h3>\\n<ul>\\n<li>作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作）</li>\\n<li>使用：两个花括号能构造一条复合语句（代码块）</li>\\n<li>局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放</li>\\n</ul>\\n<h3>循环</h3>\\n<h4>for [- else]（与C不同）</h4>\\n<ul>\\n<li>\\n<p>使用</p>\\n<ul>\\n<li>通式：<code>for (initialization; test-expression; update-expression) body</code></li>\\n<li>举例：<code>for (i=0; i&lt;5; i++) a++</code>（单行执行语句可以不加大括号）</li>\\n</ul>\\n</li>\\n<li>\\n<p>组成</p>\\n<ul>\\n<li>初始化（<em>loop initialization</em>）\\n<ul>\\n<li>循环初始化（<em>initialization</em>）</li>\\n<li>循环测试（<em>test-expression</em>）</li>\\n<li>更新表达式（<em>update-expression</em>）</li>\\n</ul>\\n</li>\\n<li>循环体（<em>loop body</em>）</li>\\n</ul>\\n</li>\\n<li>\\n<p>执行顺序</p>\\n<ul>\\n<li>初始值 &gt; 执行测试 &gt; 执行循环体 &gt; 更新用于测试的值 &gt; 从2开始重复</li>\\n</ul>\\n</li>\\n<li>\\n<p><mark><strong>声明语句表达式、新的for语句</strong></mark></p>\\n<ul>\\n<li>\\n<p>声明语句表达式（旧）</p>\\n<ul>\\n<li>C++曾定义了声明语句表达式，允许在for初始化处声明变量（语法糖，本质还是for前声明变量）</li>\\n<li>而本来在for中只能初始化值，需要提前声明变量</li>\\n<li>声明语句表达式只能在for中使用，在其他地方声明语句不被视作表达式</li>\\n<li>这种修改后来被取消，取而代之使用新的for语句</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>新的for语句（新）</strong></p>\\n<ul>\\n<li>\\n<p>将for语句从<code>for(expression, expression, expression) expression</code></p>\\n<p>改为<code>for(for-init-statement condition; expression) expression</code>（初始化和条件都在前面，一并视作语句）</p>\\n</li>\\n<li>\\n<p>与在for前声明相比，这种变量之存在for语句中，当程序离开循环后变量将消失（一些老式编译器仍视作在循环前声明）</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/01. 结构 - 结构化编程.md","value":{"title":"01. 结构 - 结构化编程","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/01. 结构 - 结构化编程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,d as data};
