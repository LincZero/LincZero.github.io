import{_ as t,c as i,e as o,o as n}from"./app-BgHc8lP1.js";const l={};function r(p,e){return n(),i("div",null,e[0]||(e[0]=[o('<p>NFV（Network Functions Virtualization）</p><p>所有跨主机通信几乎都会涉及网络协议栈以及底层网卡驱动对于数据包的处理。然而，低速网络和高速网络处理对系统的要求完全不一样</p><p>以Linux为例，传统网络设备驱动包处理的动作可以概括如下：</p><h2 id="ia不适合进行数据包处理吗" tabindex="-1"><a class="header-anchor" href="#ia不适合进行数据包处理吗"><span>IA不适合进行数据包处理吗？</span></a></h2><ol><li>数据包到达网卡设备</li><li>网卡设备依据配置进行DMA操作</li><li>网卡发送中断，唤醒处理器</li><li>驱动软件填充读写缓冲区数据结构</li><li>数据报文达到内核协议栈，进行高层处理</li><li>如果最终应用在用户态，数据从内核搬移到用户态 如果最终应用在内核态，在内核继续进行</li></ol><p>随着网络接口带宽从千兆向万兆买进，原先每个报文就会出发一个中断，中断带来的开销变得突出，大量数据到来会出发频繁的中断开销，导致系统无法承受，因此有人在Linux内核中引入<strong>NAPI机制</strong>，其策略是系统被中断唤醒后，尽量使用轮询的方式一次处理多个数据包，直到网络再次空闲重新转入中断等待。NAPI策略用于高吞吐的场景，效率提升明显。</p><p>...</p><p>一个二层以太网包经过网络设备驱动的处理后，最终大多要交给用户态的应用。</p><p>网络包进入计算机大多需要经过协议处理，在LInux系统中TCP/IP由LInux内核处理。即使在不需要协议处理的场景下，大多数场景下也需要把包从内核的缓冲区复制到用户缓冲区，系统盗用以及数据包复制的开销，会直接影响用户态应用从设备直接获得包的能力。 而对于多样的网络功能节点来说，TCP/IP协议栈并不是数据转发节点所必须的</p>',9)]))}const E=t(l,[["render",r],["__file","01. 介绍.html.vue"]]),B=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/01.%20%E4%BB%8B%E7%BB%8D.html","title":"01. 介绍","lang":"zh-CN","frontmatter":{"description":"NFV（Network Functions Virtualization） 所有跨主机通信几乎都会涉及网络协议栈以及底层网卡驱动对于数据包的处理。然而，低速网络和高速网络处理对系统的要求完全不一样 以Linux为例，传统网络设备驱动包处理的动作可以概括如下： IA不适合进行数据包处理吗？ 数据包到达网卡设备 网卡设备依据配置进行DMA操作 网卡发送中断...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/01.%20%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"NFV（Network Functions Virtualization） 所有跨主机通信几乎都会涉及网络协议栈以及底层网卡驱动对于数据包的处理。然而，低速网络和高速网络处理对系统的要求完全不一样 以Linux为例，传统网络设备驱动包处理的动作可以概括如下： IA不适合进行数据包处理吗？ 数据包到达网卡设备 网卡设备依据配置进行DMA操作 网卡发送中断..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"IA不适合进行数据包处理吗？","slug":"ia不适合进行数据包处理吗","link":"#ia不适合进行数据包处理吗","children":[]}],"git":{},"readingTime":{"minutes":1.73,"words":519},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/01. 介绍.md","excerpt":"<p>NFV（Network Functions Virtualization）</p>\\n<p>所有跨主机通信几乎都会涉及网络协议栈以及底层网卡驱动对于数据包的处理。然而，低速网络和高速网络处理对系统的要求完全不一样</p>\\n<p>以Linux为例，传统网络设备驱动包处理的动作可以概括如下：</p>\\n<h2>IA不适合进行数据包处理吗？</h2>\\n<ol>\\n<li>数据包到达网卡设备</li>\\n<li>网卡设备依据配置进行DMA操作</li>\\n<li>网卡发送中断，唤醒处理器</li>\\n<li>驱动软件填充读写缓冲区数据结构</li>\\n<li>数据报文达到内核协议栈，进行高层处理</li>\\n<li>如果最终应用在用户态，数据从内核搬移到用户态\\n如果最终应用在内核态，在内核继续进行</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/01. 介绍.md","value":{"title":"01. 介绍","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/01. 介绍.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{E as comp,B as data};
