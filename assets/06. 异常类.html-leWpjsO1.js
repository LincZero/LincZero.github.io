import{_ as s,e as a,g as n,o as l}from"./app-HvNDXJEG.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="异常类" tabindex="-1"><a class="header-anchor" href="#异常类"><span>异常类</span></a></h1><p>API: <code>java.lang.Throwable 1.0</code>，将Throwable对象和栈的轨迹输出到标准错误流</p><h2 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常"><span>捕获异常</span></a></h2><p>当程序运行过程中发生错误时，就会“抛出异常”。</p><p><strong>抛出异常比终止程序要灵活得多</strong>，这是因为可以提供一个 “捕获” 异常的处理器（handler）对异常情况进行处理</p><p>如果没有提供处理器，程序就会终止，并在控制台上打印出一条信息，其中给出了异常的类型。</p><p>异常有两种类型</p><ul><li>已检查异常 <ul><li>对于已检查异常，编译器将会检查是否提供了处理器</li></ul></li><li>未检查异常 <ul><li>然而，有很多常见的异常，都属于未检查异常<br> 例如，访问null引用。编译器不会查看是否为这些错误提供了处理器。<br> 毕竟，应该精心地编写代码来避免这些错误的发生，而不要将精力花在编写异常处理器上。</li></ul></li></ul><p>将可能抛出已检查异常的一个或多个方法调用代码放在try块中，然后在catch子句中提供处理器代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    statement that might thorw exceptions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    handler action</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 例如</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 获取类名字符串</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 有可能会抛出异常</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // do somthing with cl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStrackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 打印堆栈轨迹</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const r=s(e,[["render",t],["__file","06. 异常类.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/06.%20%E5%BC%82%E5%B8%B8%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 异常类 API: java.lang.Throwable 1.0，将Throwable对象和栈的轨迹输出到标准错误流 捕获异常 当程序运行过程中发生错误时，就会“抛出异常”。 抛出异常比终止程序要灵活得多，这是因为可以提供一个 “捕获” 异常的处理器（handler）对异常情况进行处理 如果没有提供处理器，程序就会终止，并在控制台上打印...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/06.%20%E5%BC%82%E5%B8%B8%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 异常类 API: java.lang.Throwable 1.0，将Throwable对象和栈的轨迹输出到标准错误流 捕获异常 当程序运行过程中发生错误时，就会“抛出异常”。 抛出异常比终止程序要灵活得多，这是因为可以提供一个 “捕获” 异常的处理器（handler）对异常情况进行处理 如果没有提供处理器，程序就会终止，并在控制台上打印..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.16,"words":347},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/06. 异常类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>异常类</h1>\\n<p>API: <code>java.lang.Throwable 1.0</code>，将Throwable对象和栈的轨迹输出到标准错误流</p>\\n<h2>捕获异常</h2>\\n<p>当程序运行过程中发生错误时，就会“抛出异常”。</p>\\n<p><strong>抛出异常比终止程序要灵活得多</strong>，这是因为可以提供一个 “捕获” 异常的处理器（handler）对异常情况进行处理</p>\\n<p>如果没有提供处理器，程序就会终止，并在控制台上打印出一条信息，其中给出了异常的类型。</p>\\n<p>异常有两种类型</p>\\n<ul>\\n<li>已检查异常\\n<ul>\\n<li>对于已检查异常，编译器将会检查是否提供了处理器</li>\\n</ul>\\n</li>\\n<li>未检查异常\\n<ul>\\n<li>然而，有很多常见的异常，都属于未检查异常<br>\\n例如，访问null引用。编译器不会查看是否为这些错误提供了处理器。<br>\\n毕竟，应该精心地编写代码来避免这些错误的发生，而不要将精力花在编写异常处理器上。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/06. 异常类.md","value":{"title":"06. 异常类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/06. 异常类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,k as data};
