import{_ as s,c as a,e,o as t}from"./app-CtMeyR3O.js";const i={};function p(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="jni" tabindex="-1"><a class="header-anchor" href="#jni"><span>JNI</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>参考：</p><ul><li>https://www.bilibili.com/video/BV188411V7Yq（1h快速入门版，选）</li><li>https://www.bilibili.com/video/BV1qW411L7oY（10h详细版）</li><li>JNI最新在线API：https://docs/oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html</li></ul><h1 id="jni入门" tabindex="-1"><a class="header-anchor" href="#jni入门"><span>JNI入门</span></a></h1><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><ol><li>AndroidStudio环境准备：4.2版本 (2021 04 29 Build)，小蜜蜂最新版本可能有问题。JDK 1.8</li><li>创建NDK工程 <ul><li>new Peoject &gt; Native C++</li><li>SDK API 16: Android 4.1</li></ul></li><li>运行</li></ol><h2 id="jni介绍" tabindex="-1"><a class="header-anchor" href="#jni介绍"><span>JNI介绍</span></a></h2><p>如何沟通Java与C/C++</p><ul><li>上层 Kotlin Java</li><li>中间件 JNI</li><li>下层 C/C++</li></ul><p>为什么要有JNI？</p><ul><li>实际使用中，Java需要与本地代码进行交互</li></ul><p>JNI与NDK的关系</p><ul><li>先有JNI才有NDK，JNI是Java的东西，JNI在1996的时候就有了，而NDK是Android的东西，200X左右才有Android</li><li>那为什么NDK里面有JNI呢？jni.h 的的JDK版本和NDK版本是不一样的： <ul><li>NDK版本：D:/Android/<strong>Sdk/ndk</strong>/21.0.6113669/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include/<strong>jni</strong>.h （将JDK的JNI再次进行了封装，NDK包括gcc g++ 工具链 JNI 等一堆东西）</li><li>JDK版本：C:/Program Files/Java/jdk1.8.0_131/include/jni.h</li></ul></li></ul><p>常用规则如下：</p><p>java类型——属性类型符号</p><ul><li>boolean, Z</li><li>byte, B</li><li>char, C</li><li>short, S</li><li>int, I</li><li>long, J</li><li>float, F</li><li>double, D</li><li>void, V</li><li>object, L完整类名</li><li>array[数组的数据类型, <code>int [] […………</code></li><li>mehtod(参数类型)返回直类型, <code>void name (int a, double b) (ID) V</code></li></ul><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h2><p>&lt; MainActivity.java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;native-lib&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">ActivityMainBinding</span> binding<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Derry&quot;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">stringFromJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (原生函数，cpp进行实现) </span>
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (原生函数，cpp进行实现) 改变我们的属性name</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> saveInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        binding <span class="token operator">=</span> <span class="token class-name">ActivityMainBinding</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">serContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">TextView</span> tv <span class="token operator">=</span> binding<span class="token punctuation">.</span>sampleText<span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span><span class="token function">serText</span><span class="token punctuation">(</span><span class="token function">stringFromJNI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">&quot;name修改前是：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">changName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">&quot;name修改后是：&quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt; native-lib.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;jni.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">incldue</span> <span class="token expression"><span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span></span>

<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> JNIEXPORT jstring JNICALL
MainActivity<span class="token punctuation">.</span><span class="token function">stringFromJIN</span><span class="token punctuation">(</span>
        JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span>
        jobject <span class="token comment">/* this */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string hello <span class="token operator">=</span> <span class="token string">&quot;Hello from Cpp&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> env<span class="token operator">-&gt;</span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * @param env JNI环境，核心，桥梁
 */</span>
<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token comment">// 下面的代码，重用C的编译方式。为什么要这样，后面专门讲JNIEnv源码</span>
JNIEXPORT <span class="token keyword">void</span> JNICALL
<span class="token function">Java_com_derry_as_1jni_1project_MainActivity_changeName</span><span class="token punctuation">(</span>JNIEnv<span class="token operator">*</span> env<span class="token punctuation">,</span> jobject <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jni-h-源码" tabindex="-1"><a class="header-anchor" href="#jni-h-源码"><span>jni.h 源码</span></a></h2><p>&lt; jni.h</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// &lt; 139 line</span>
<span class="token comment">// 无论Cpp还是C，都是要访问 JNINativeInterface 这个C结构体的</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__cplusplus<span class="token punctuation">)</span> </span><span class="token comment">// C++</span></span>
<span class="token keyword">typedef</span> _JNIEnv JNIEnv<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> _JavaVM JavaVM<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">// C</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">JNINativeInterface</span><span class="token operator">*</span> JNIEnv<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">JNINativeInterface</span><span class="token operator">*</span> JavaVM<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token comment">// &lt; 490 line</span>
<span class="token keyword">struct</span> <span class="token class-name">_JNIEnv</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">JNINativeInterface</span><span class="token operator">*</span> functions<span class="token punctuation">;</span> <span class="token comment">// 这里又是个结构体，见下</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// &lt; 150 line</span>
<span class="token comment">// 核心，只要将里面的300多个函数学完，就基本会了</span>
<span class="token keyword">struct</span> <span class="token class-name">JNINativeInterface</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)]))}const c=s(i,[["render",p],["__file","01. JNI入门.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E5%A4%9A%E8%AF%AD%E8%A8%80/JNI/01.%20JNI%E5%85%A5%E9%97%A8.html","title":"JNI","lang":"zh-CN","frontmatter":{"description":"JNI 目录 参考： https://www.bilibili.com/video/BV188411V7Yq（1h快速入门版，选） https://www.bilibili.com/video/BV1qW411L7oY（10h详细版） JNI最新在线API：https://docs/oracle.com/javase/8/docs/technotes/...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E5%A4%9A%E8%AF%AD%E8%A8%80/JNI/01.%20JNI%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"JNI"}],["meta",{"property":"og:description","content":"JNI 目录 参考： https://www.bilibili.com/video/BV188411V7Yq（1h快速入门版，选） https://www.bilibili.com/video/BV1qW411L7oY（10h详细版） JNI最新在线API：https://docs/oracle.com/javase/8/docs/technotes/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JNI\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"JNI","slug":"jni","link":"#jni","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"JNI入门","slug":"jni入门","link":"#jni入门","children":[{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[]},{"level":2,"title":"JNI介绍","slug":"jni介绍","link":"#jni介绍","children":[]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[]},{"level":2,"title":"jni.h 源码","slug":"jni-h-源码","link":"#jni-h-源码","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.88,"words":564},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/01. 知识层/多语言/JNI/01. JNI入门.md","excerpt":"\\n<h1>目录</h1>\\n<p>参考：</p>\\n<ul>\\n<li>https://www.bilibili.com/video/BV188411V7Yq（1h快速入门版，选）</li>\\n<li>https://www.bilibili.com/video/BV1qW411L7oY（10h详细版）</li>\\n<li>JNI最新在线API：https://docs/oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html</li>\\n</ul>\\n<h1>JNI入门</h1>\\n<h2>环境准备</h2>\\n<ol>\\n<li>AndroidStudio环境准备：4.2版本 (2021 04 29 Build)，小蜜蜂最新版本可能有问题。JDK 1.8</li>\\n<li>创建NDK工程\\n<ul>\\n<li>new Peoject &gt; Native C++</li>\\n<li>SDK API 16: Android 4.1</li>\\n</ul>\\n</li>\\n<li>运行</li>\\n</ol>","autoDesc":true}');export{c as comp,u as data};
