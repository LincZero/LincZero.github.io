import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-FiwKXEJX.js";const e={},p=t(`<h1 id="rust基本类型" tabindex="-1"><a class="header-anchor" href="#rust基本类型"><span>Rust基本类型</span></a></h1><h2 id="类型-整型" tabindex="-1"><a class="header-anchor" href="#类型-整型"><span>类型 - 整型</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><p>整形再分类：</p><ul><li><p>按符号</p><ul><li><p>有符号整型，英文 signed，既可以存储正数，也可以存储负数。</p></li><li><p>无符号整型，因为 unsigned，只能存储正数。</p></li></ul></li><li><p>按存储大小</p><ul><li>整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节</li><li>整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch 的整数在 x86 机器上为 32 位，在 x64 机器上为 64 位</li><li>技巧：最大和最小值范围可以分别这样打印： <ul><li>最大值 std::u128::MAX，值为 340282366920938463463374607431768211455</li><li>最小值 std::i128::MIN，值为 -170141183460469231731687303715884105728</li></ul></li></ul></li></ul><table><thead><tr><th>大小</th><th></th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8 bit</td><td>1 Byte</td><td>i8</td><td>u8</td></tr><tr><td>16 bit</td><td>2 Byte</td><td>i16</td><td>u16</td></tr><tr><td>32 bit (默认)</td><td>4 Byte (默认)</td><td>i32</td><td>u32</td></tr><tr><td>64 bit</td><td>8 Byte</td><td>i64</td><td>u64</td></tr><tr><td>128 bit</td><td>16 Byte</td><td>i128</td><td>u128</td></tr><tr><td>Arch</td><td></td><td>isize</td><td>usize</td></tr></tbody></table><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">// i32 默认</span>
<span class="token keyword">let</span> price2<span class="token punctuation">:</span><span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> price3<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> price4<span class="token punctuation">:</span><span class="token keyword">isize</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> price5<span class="token punctuation">:</span><span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price is {}&quot;</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 price is 100</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price2 is {} and price3 is {}&quot;</span><span class="token punctuation">,</span> price3<span class="token punctuation">,</span> price2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 price2 is -300 and price3 is 200</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price4 is {} and price5 is {}&quot;</span><span class="token punctuation">,</span> price4<span class="token punctuation">,</span> price5<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 price4 is 400 and price5 is 500</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="技巧-编译器提示" tabindex="-1"><a class="header-anchor" href="#技巧-编译器提示"><span>技巧：编译器提示</span></a></h3><p>Rust有非常好的报错提示，报错非常清晰</p><p>类型和值不匹配</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> price6<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">66.66</span>

<span class="token comment">// 编译不会通过，并且编译器报错如下</span>
mismatched types <span class="token punctuation">[</span><span class="token constant">E0308</span><span class="token punctuation">]</span> expected \`<span class="token keyword">i32</span>\`<span class="token punctuation">,</span> found \`<span class="token keyword">f64</span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整型溢出</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> price7<span class="token punctuation">:</span><span class="token keyword">i8</span> <span class="token operator">=</span> <span class="token number">192</span><span class="token punctuation">;</span>	<span class="token comment">// 我们已经计算了 i8 的最大值是 127。我给一个更大的数值会如何呢？</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price7 is {}&quot;</span><span class="token punctuation">,</span> price7<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 报错如下，很明确的告诉你超出了 i8 的范围</span>
<span class="token number">16</span> <span class="token operator">|</span>     <span class="token keyword">let</span> price7<span class="token punctuation">:</span><span class="token keyword">i8</span><span class="token operator">=</span><span class="token number">192</span><span class="token punctuation">;</span>
 <span class="token operator">|</span>                   <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span>
 <span class="token operator">|</span>
 <span class="token operator">=</span> note<span class="token punctuation">:</span> \`<span class="token attribute attr-name">#[deny(overflowing_literals)]</span>\` on by default
 <span class="token operator">=</span> note<span class="token punctuation">:</span> the literal \`<span class="token number">192</span>\` does not fit into the <span class="token keyword">type</span> \`<span class="token keyword">i8</span>\` whose range is \`<span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">..=</span><span class="token number">127</span>\`
 <span class="token operator">=</span> help<span class="token punctuation">:</span> consider using the <span class="token keyword">type</span> \`<span class="token keyword">u8</span>\` instead
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-浮点型" tabindex="-1"><a class="header-anchor" href="#类型-浮点型"><span>类型 - 浮点型</span></a></h2><h3 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1"><span>分类</span></a></h3><p>按照存储大小，把浮点型划分为 f32 和 f64。其中 f64 是默认的浮点类型。</p><ul><li>f32 又称为 单精度浮点型。</li><li>f64 又称为 双精度浮点型，它是 Rust 默认的浮点类型.</li></ul><p>Rust 中不能将 0.0 赋值给任意一个整型，也不能将 0 赋值给任意一个浮点型。</p><h3 id="代码示例-1" tabindex="-1"><a class="header-anchor" href="#代码示例-1"><span>代码示例</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> price8<span class="token punctuation">:</span><span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
报错：mismatched types <span class="token punctuation">[</span><span class="token constant">E0308</span><span class="token punctuation">]</span> expected \`<span class="token keyword">f64</span>\`<span class="token punctuation">,</span> found \`<span class="token keyword">i32</span>\`

<span class="token keyword">let</span> price9 <span class="token operator">=</span> <span class="token number">18.00</span><span class="token punctuation">;</span>        			<span class="token comment">// 默认是 f64</span>
<span class="token keyword">let</span> price10<span class="token punctuation">:</span><span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">8.88</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> price11<span class="token punctuation">:</span><span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">168.125</span><span class="token punctuation">;</span>  		<span class="token comment">// 双精度浮点型</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price9 {}&quot;</span><span class="token punctuation">,</span> price9<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">// 输出 price9 18</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price10 {}&quot;</span><span class="token punctuation">,</span> price10<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 price10 8.88</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price11 {}&quot;</span><span class="token punctuation">,</span> price11<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 price11 168.125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="技巧-下划线" tabindex="-1"><a class="header-anchor" href="#技巧-下划线"><span>技巧：下划线</span></a></h3><p>当数字很大的时候，Rust 可以用 **(_下划线) ** ，来让数字变得可读性更好。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> price12 <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price12 {}&quot;</span><span class="token punctuation">,</span> price12<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 price12 1000000</span>

<span class="token keyword">let</span> price13 <span class="token operator">=</span> <span class="token number">1_000_000.666_123</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;price13 {}&quot;</span><span class="token punctuation">,</span> price13<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 price13 1000000.666123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-布尔" tabindex="-1"><a class="header-anchor" href="#类型-布尔"><span>类型 - 布尔</span></a></h2><p>Rust 使用 bool 关键字来声明一个 布尔类型 的变量。 布尔类型 取值是 true 或 false 。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> checked<span class="token punctuation">:</span><span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;checked {}&quot;</span><span class="token punctuation">,</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 checked true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-字符" tabindex="-1"><a class="header-anchor" href="#类型-字符"><span>类型 - 字符</span></a></h2><p>字符(char) ，就是字符串的基本组成部分，也就是单个字符或字。</p><p>Rust 使用 UTF-8 作为底层的编码 ，而不是常见的使用 ASCII 作为底层编码。 Rust 中的 字符数据类型 包含了 数字、字母、Unicode 和 其它特殊字符。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token char">&#39;R&#39;</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;c {}&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 c R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>Rust 语言支持以下四种运算符</p><ul><li>算术运算符</li><li>位运算符</li><li>关系运算符</li><li>逻辑运算符</li></ul><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th></tr></thead><tbody><tr><td>加</td><td>+</td></tr><tr><td>减</td><td>-</td></tr><tr><td>乘</td><td>*</td></tr><tr><td>除</td><td>/</td></tr><tr><td>求余</td><td>%</td></tr></tbody></table><p>注：Rust 语言<strong>不支持</strong>自增自减运算符 ++ 和 --</p><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>大于</td><td>&gt;</td><td>如果左操作数大于右操作数则返回 true 否则返回 false</td></tr><tr><td>小于</td><td>&lt;</td><td>如果左操作数小于于右操作数则返回 true 否则返回 false</td></tr><tr><td>大于等于</td><td>&gt;=</td><td>如果左操作数大于或等于右操作数则返回 true 否则返回 false</td></tr><tr><td>小于等于</td><td>&lt;=</td><td>如果左操作数小于或等于右操作数则返回 true 否则返回 false</td></tr><tr><td>等于</td><td>==</td><td>如果左操作数等于右操作数则返回 true 否则返回 false</td></tr><tr><td>不等于</td><td>!=</td><td>如果左操作数不等于右操作数则返回 true 否则返回 false</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>逻辑与</td><td>&amp;&amp;</td><td>两边的条件表达式都为真则返回 true 否则返回 false</td></tr><tr><td>逻辑或</td><td>||</td><td>两边的条件表达式只要有一个为真则返回 true 否则返回 false</td></tr><tr><td>逻辑非</td><td>!</td><td>如果表达式为真则返回 false 否则返回 true</td></tr></tbody></table><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>位与</td><td>&amp;</td><td>相同位都是 1 则返回 1 否则返回 0</td></tr><tr><td>位或</td><td>|</td><td>相同位只要有一个是 1 则返回 1 否则返回 0</td></tr><tr><td>异或</td><td>^</td><td>相同位不相同则返回 1 否则返回 0</td></tr><tr><td>位非</td><td>!</td><td>把位中的 1 换成 0 ， 0 换成 1</td></tr><tr><td>左移</td><td>&lt;&lt;</td><td>操作数中的所有位向左移动指定位数，右边的位补 0</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>操作数中的所有位向右移动指定位数，左边的位补 0</td></tr></tbody></table>`,43),l=[p];function o(c,i){return s(),a("div",null,l)}const u=n(e,[["render",o],["__file","02. 数值类型_低占用类型.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"Rust基本类型","lang":"zh-CN","frontmatter":{"description":"Rust基本类型 类型 - 整型 分类 整形再分类： 按符号 有符号整型，英文 signed，既可以存储正数，也可以存储负数。 无符号整型，因为 unsigned，只能存储正数。 按存储大小 整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节 整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust基本类型"}],["meta",{"property":"og:description","content":"Rust基本类型 类型 - 整型 分类 整形再分类： 按符号 有符号整型，英文 signed，既可以存储正数，也可以存储负数。 无符号整型，因为 unsigned，只能存储正数。 按存储大小 整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节 整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust基本类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust基本类型","slug":"rust基本类型","link":"#rust基本类型","children":[{"level":2,"title":"类型 - 整型","slug":"类型-整型","link":"#类型-整型","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"技巧：编译器提示","slug":"技巧-编译器提示","link":"#技巧-编译器提示","children":[]}]},{"level":2,"title":"类型 - 浮点型","slug":"类型-浮点型","link":"#类型-浮点型","children":[{"level":3,"title":"分类","slug":"分类-1","link":"#分类-1","children":[]},{"level":3,"title":"代码示例","slug":"代码示例-1","link":"#代码示例-1","children":[]},{"level":3,"title":"技巧：下划线","slug":"技巧-下划线","link":"#技巧-下划线","children":[]}]},{"level":2,"title":"类型 - 布尔","slug":"类型-布尔","link":"#类型-布尔","children":[]},{"level":2,"title":"类型 - 字符","slug":"类型-字符","link":"#类型-字符","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"位运算","slug":"位运算","link":"#位运算","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.1,"words":1230},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Rust/学习/02. 数据+算法/02. 数值类型+低占用类型.md","autoDesc":true}');export{u as comp,k as data};
