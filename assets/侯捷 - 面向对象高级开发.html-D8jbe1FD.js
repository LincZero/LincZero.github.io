import{_ as i,e as a,g as n,o as l}from"./app-DPU1xou8.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<p>参考：侯捷 - 面向对象高级开发 系列视频</p><h1 id="_1-c-编程简介" tabindex="-1"><a class="header-anchor" href="#_1-c-编程简介"><span>1.C++编程简介</span></a></h1><h2 id="书录" tabindex="-1"><a class="header-anchor" href="#书录"><span>书录</span></a></h2><p>C++</p><ul><li>C++ Primer</li><li>The C++ Programming Language</li></ul><p>建议经验</p><ul><li>Effective C++</li></ul><p>标准库</p><ul><li>The C++ Standard Library（标准库的学习）</li><li>STL源码解析（再深入的话，关于STL源码的）</li></ul><h1 id="_2-头文件与类的声明" tabindex="-1"><a class="header-anchor" href="#_2-头文件与类的声明"><span>2.头文件与类的声明</span></a></h1><h1 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h1><p>构造函数的 initialization list，列表初始化</p><h1 id="参数传递和返回值" tabindex="-1"><a class="header-anchor" href="#参数传递和返回值"><span>参数传递和返回值</span></a></h1><p>单例模式</p><p>常量成员函数</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> real</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re;}</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> complex</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(complex</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ths, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> complex</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> r){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">re</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">re</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">im</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">im</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ths;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值传递和引用传递</p><p>友元 —— “相同class的各个objects互为firends”</p><h1 id="操作符重载与临时对象" tabindex="-1"><a class="header-anchor" href="#操作符重载与临时对象"><span>操作符重载与临时对象</span></a></h1><p>未</p><h1 id="复习complex的实现过程" tabindex="-1"><a class="header-anchor" href="#复习complex的实现过程"><span>复习Complex的实现过程</span></a></h1><p>未</p><h1 id="三大函数-拷贝构造-拷贝复制-析构" tabindex="-1"><a class="header-anchor" href="#三大函数-拷贝构造-拷贝复制-析构"><span>三大函数：拷贝构造，拷贝复制，析构</span></a></h1><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s1);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 拷贝构造</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    s3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 拷贝复制</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类包含指针，<strong>必须</strong>要自己写拷贝构造，否则两个指针会指向同一个东西</p><p>三个特殊函数（<a href="https://gcallah.github.io/OOP2/big3.html" target="_blank" rel="noopener noreferrer">The Big Three</a>，指 拷贝构造函数、赋值操作符、析构函数。另外，当您需要编写其中任何一个时，您很可能需要编写另外两个）</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cstr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> operator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ~String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_c_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_data;}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ctor 和 dtor（构造函数和析构函数，constructor 和 destructor）</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string: : </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cstr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (cstr) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		m _data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (cstr)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">strepy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (m_data, cstr);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	//未指定初值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		m_data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inline</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">string: :</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">~</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	delete[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m_data;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    delete</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class-with-pointer-members-必须有-copy-ctor-和-copy-op-析构也要吧" tabindex="-1"><a class="header-anchor" href="#class-with-pointer-members-必须有-copy-ctor-和-copy-op-析构也要吧"><span>class with pointer members 必须有 copy ctor 和 copy op=（析构也要吧）</span></a></h2><p>还需要检测自我赋值，不然可能有bug（不只是为了效率）</p><p>![image-20230302051826719](侯捷 - 面向对象高级开发.assets/image-20230302051826719.png)</p><h1 id="堆-栈与内存管理" tabindex="-1"><a class="header-anchor" href="#堆-栈与内存管理"><span><mark>堆，栈与内存管理</mark></span></a></h1><h2 id="堆-栈" tabindex="-1"><a class="header-anchor" href="#堆-栈"><span>堆，栈</span></a></h2><p>Stack，是存在与某作用域（scope）的一块内存空间（memory space）。例如当你调用函数，函数本身即会形成一个stack用来防止它所接受的参数，以及返回地址<br> 在函数本体（fucntion body）内声明的任何变量，其所使用的内存块都取自上述stack</p><p>Heap，或谓system heap，是指由操作系统提供的一块global内存空间，程序可动态分配（dynamic allocaed）从某中获得若干区块（blocks）<br> （new 出来是heap）</p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><ul><li>stack objects 的生命周期、也叫 auto object（离开大括号自动释放）</li><li>static local objects 的生命周期，直到整个程序结束</li><li>global objects 的生命周期，在整个程序结束后才结束，也可以把它视为一种static object，其作用域是整个程序</li></ul><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理"><span>内存管理</span></a></h2><p>![image-20230302055145589](侯捷 - 面向对象高级开发.assets/image-20230302055145589.png)</p><h2 id="new-delete的底层原理" tabindex="-1"><a class="header-anchor" href="#new-delete的底层原理"><span>new/delete的底层原理</span></a></h2><p>![image-20230302055343858](侯捷 - 面向对象高级开发.assets/image-20230302055343858.png)</p><p>![image-20230302055709496](侯捷 - 面向对象高级开发.assets/image-20230302055709496.png)</p><h2 id="动态分配所得的内存块-vc" tabindex="-1"><a class="header-anchor" href="#动态分配所得的内存块-vc"><span>动态分配所得的内存块（VC）</span></a></h2><p>左侧两个是复数，右侧两个是String。<br> 左列是调试模式，调试模式分配的内存会大很多</p><ul><li>红色的叫cookie（内容是16进制指示的大小：40就是64，10就是16，30就是48。而+1表示这个内存是给出去的）</li><li>深绿色的是填补（这里是填补成2的幂次方大小）</li><li>亮绿色是给对象实际的内存（例如这里的complex里的内容，其实就是两个double的大小=8h=8字节。h表示的是hex16进制的字节数）</li></ul><p>![image-20230302061852875](侯捷 - 面向对象高级开发.assets/image-20230302061852875.png)</p><h2 id="动态分配所得的array" tabindex="-1"><a class="header-anchor" href="#动态分配所得的array"><span>动态分配所得的array</span></a></h2><p>![image-20230302063838050](侯捷 - 面向对象高级开发.assets/image-20230302063838050.png)</p><p>![image-20230302064056605](侯捷 - 面向对象高级开发.assets/image-20230302064056605.png)</p><h1 id="复习string类的实现过程" tabindex="-1"><a class="header-anchor" href="#复习string类的实现过程"><span>复习String类的实现过程</span></a></h1><p>![image-20230302065045243](侯捷 - 面向对象高级开发.assets/image-20230302065045243.png)</p><p>![image-20230302080433021](侯捷 - 面向对象高级开发.assets/image-20230302080433021.png)</p><h1 id="扩展补充-类模板-函数模板-及其他" tabindex="-1"><a class="header-anchor" href="#扩展补充-类模板-函数模板-及其他"><span>扩展补充：类模板，函数模板，及其他</span></a></h1><p>补充：static</p><p>成员变量 <code>this-&gt;</code> 的省略，static没有this</p><p>调用static函数的两种方法：通过object或class name调用</p><p>cout</p><p>calss template，类模板</p><p>namespace，命名空间</p><p>![image-20230302102205604](侯捷 - 面向对象高级开发.assets/image-20230302102205604.png)</p><p>![image-20230302102937597](侯捷 - 面向对象高级开发.assets/image-20230302102937597.png)</p>`,63)]))}const k=i(e,[["render",h],["__file","侯捷 - 面向对象高级开发.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/08.%20C__%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/%E4%BE%AF%E6%8D%B7%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91/%E4%BE%AF%E6%8D%B7%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91.html","title":"1.C++编程简介","lang":"zh-CN","frontmatter":{"description":"参考：侯捷 - 面向对象高级开发 系列视频 1.C++编程简介 书录 C++ C++ Primer The C++ Programming Language 建议经验 Effective C++ 标准库 The C++ Standard Library（标准库的学习） STL源码解析（再深入的话，关于STL源码的） 2.头文件与类的声明 构造函数 构造...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/08.%20C__%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/%E4%BE%AF%E6%8D%B7%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91/%E4%BE%AF%E6%8D%B7%20-%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"1.C++编程简介"}],["meta",{"property":"og:description","content":"参考：侯捷 - 面向对象高级开发 系列视频 1.C++编程简介 书录 C++ C++ Primer The C++ Programming Language 建议经验 Effective C++ 标准库 The C++ Standard Library（标准库的学习） STL源码解析（再深入的话，关于STL源码的） 2.头文件与类的声明 构造函数 构造..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.C++编程简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.45,"words":1036},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/08. C++高级编程/侯捷 - 面向对象高级开发/侯捷 - 面向对象高级开发.md","excerpt":"<p>参考：侯捷 - 面向对象高级开发 系列视频</p>\\n<h1>1.C++编程简介</h1>\\n<h2>书录</h2>\\n<p>C++</p>\\n<ul>\\n<li>C++ Primer</li>\\n<li>The C++ Programming Language</li>\\n</ul>\\n<p>建议经验</p>\\n<ul>\\n<li>Effective C++</li>\\n</ul>\\n<p>标准库</p>\\n<ul>\\n<li>The C++ Standard Library（标准库的学习）</li>\\n<li>STL源码解析（再深入的话，关于STL源码的）</li>\\n</ul>\\n<h1>2.头文件与类的声明</h1>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/08. C++高级编程/侯捷 - 面向对象高级开发/侯捷 - 面向对象高级开发.md","value":{"title":"侯捷 - 面向对象高级开发","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/08. C++高级编程/侯捷 - 面向对象高级开发/侯捷 - 面向对象高级开发.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
