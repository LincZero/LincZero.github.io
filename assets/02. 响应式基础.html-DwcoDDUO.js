import{_ as o,c,e as p,a as s,d as a,b as t,o as l,r as i}from"./app-QbMAvOD7.js";const u={},r={href:"https://cn.vuejs.org/api/reactivity-core.html#reactive",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.vuejs.org/guide/extras/reactivity-in-depth.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/guide/typescript/composition-api.html#typing-reactive",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.vuejs.org/api/general.html#nexttick",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#%E4%BD%BF%E7%94%A8%E9%94%AE%E7%9A%84%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"},h={href:"https://cn.vuejs.org/api/reactivity-core.html#ref",target:"_blank",rel:"noopener noreferrer"},j={href:"https://cn.vuejs.org/guide/typescript/composition-api.html#typing-ref",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cn.vuejs.org/guide/reusability/composables.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set",target:"_blank",rel:"noopener noreferrer"},P={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply",target:"_blank",rel:"noopener noreferrer"},S={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",target:"_blank",rel:"noopener noreferrer"},O={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"},D={href:"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#limitations-of-reactive",target:"_blank",rel:"noopener noreferrer"},J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy",target:"_blank",rel:"noopener noreferrer"};function z(B,n){const e=i("ExternalLinkIcon");return l(),c("div",null,[n[77]||(n[77]=p('<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="响应式基础" tabindex="-1"><a class="header-anchor" href="#响应式基础"><span>响应式基础</span></a></h1><h2 id="声明响应式状态" tabindex="-1"><a class="header-anchor" href="#声明响应式状态"><span>声明响应式状态</span></a></h2>',4)),s("p",null,[n[1]||(n[1]=a("我们可以使用 ")),s("a",r,[n[0]||(n[0]=s("code",null,"reactive()",-1)),t(e)]),n[2]||(n[2]=a(" 函数创建一个响应式对象或数组："))]),n[78]||(n[78]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[5]||(n[5]=a("响应式对象其实是 ")),s("a",d,[n[3]||(n[3]=a("JavaScript Proxy")),t(e)]),n[6]||(n[6]=a("，其行为表现与一般对象相似。 不同之处在于 Vue 能够跟踪对响应式对象属性的访问与更改操作。 如果你对这其中的细节感到好奇，我们在 ")),s("a",k,[n[4]||(n[4]=a("深入响应式系统")),t(e)]),n[7]||(n[7]=a(" 一章中会进行解释，")),n[8]||(n[8]=s("strong",null,"但我们推荐你先读完这里的主要指南",-1)),n[9]||(n[9]=a("。"))]),s("p",null,[n[11]||(n[11]=a("TypeScript 用户请参阅：")),s("a",v,[n[10]||(n[10]=a("为响应式对象标注类型")),t(e)])]),n[79]||(n[79]=p(`<h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span><code>setup()</code></span></a></h3><p>要在组件模板中使用响应式状态，需要在 <code>setup()</code> 函数中定义并返回。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// ...</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`setup\` 是一个专门用于组合式 API 的特殊钩子函数</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// 暴露 state 到模板</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然，我们也可以在同一个作用域下定义更新响应式状态的函数，并将他们作为方法与状态一起暴露出去：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 不要忘记同时暴露 increment 函数</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">,</span>
      increment
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴露的方法通常会被用作事件监听器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span>
  <span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="script-setup" tabindex="-1"><a class="header-anchor" href="#script-setup"><span><code>&lt;script setup&gt;</code></span></a></h3><p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。 幸运的是，我们可以通过使用构建工具来简化该操作。 当使用单文件组件（SFC）时，我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>count<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;script setup&gt;</code> 中的顶层的导入和变量声明可在同一组件的模板中直接使用。 你可以理解为模板中的表达式和 <code>&lt;script setup&gt;</code> 中的代码处在<strong>同一个作用域</strong>中。</p><blockquote><p>在指南的后续章节中，我们基本上都会在组合式 API 示例中使用单文件组件 + <code>&lt;script setup&gt;</code> 的语法，因为大多数 Vue 开发者都会这样使用。</p></blockquote><h3 id="dom-更新时机" tabindex="-1"><a class="header-anchor" href="#dom-更新时机"><span>DOM 更新时机</span></a></h3><p>当你更改响应式状态后，DOM 会自动更新。然而，你得注意 DOM 的更新并不是同步的。相反，Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只更新一次。</p>`,14)),s("p",null,[n[13]||(n[13]=a("若要等待一个状态改变后的 DOM 更新完成，你可以使用 ")),s("a",m,[n[12]||(n[12]=a("nextTick()")),t(e)]),n[14]||(n[14]=a(" 这个全局 API："))]),n[80]||(n[80]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>count<span class="token operator">++</span>
  <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 访问更新后的 DOM</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深层响应性" tabindex="-1"><a class="header-anchor" href="#深层响应性"><span>深层响应性</span></a></h3><p>在 Vue 中，状态都是默认深层响应式的。这意味着即使在更改深层次的对象或数组，你的改动也能被检测到。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">nested</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">mutateDeeply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 以下都会按照期望工作</span>
  obj<span class="token punctuation">.</span>nested<span class="token punctuation">.</span>count<span class="token operator">++</span>
  obj<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[16]||(n[16]=a("你也可以直接创建一个")),s("a",b,[n[15]||(n[15]=a("浅层响应式对象")),t(e)]),n[17]||(n[17]=a("。它们仅在顶层具有响应性，一般仅在某些特殊场景中需要。"))]),n[81]||(n[81]=s("h3",{id:"响应式代理-vs-原始对象",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#响应式代理-vs-原始对象"},[s("span",null,"响应式代理 vs. 原始对象")])],-1)),s("p",null,[n[19]||(n[19]=a("值得注意的是，")),n[20]||(n[20]=s("code",null,"reactive()",-1)),n[21]||(n[21]=a(" 返回的是一个原始对象的 ")),s("a",g,[n[18]||(n[18]=a("Proxy")),t(e)]),n[22]||(n[22]=a("，它和原始对象是不相等的："))]),n[82]||(n[82]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span>

<span class="token comment">// 代理对象和原始对象不是全等的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy <span class="token operator">===</span> raw<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有代理对象是响应式的，更改原始对象不会触发更新。因此，使用 Vue 的响应式系统的最佳实践是 <strong>仅使用你声明对象的代理版本</strong>。</p><p>为保证访问代理的一致性，对同一个原始对象调用 <code>reactive()</code> 会总是返回同样的代理对象，而对一个已存在的代理对象调用 <code>reactive()</code> 会返回其本身：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在同一个对象上调用 reactive() 会返回相同的代理</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token operator">===</span> proxy<span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 在一个代理上调用 reactive() 会返回它自己</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">===</span> proxy<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个规则对嵌套对象也适用。依靠深层响应性，响应式对象内的嵌套对象依然是代理：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> raw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
proxy<span class="token punctuation">.</span>nested <span class="token operator">=</span> raw

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>nested <span class="token operator">===</span> raw<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactive-的局限性" tabindex="-1"><a class="header-anchor" href="#reactive-的局限性"><span><code>reactive()</code> 的局限性</span></a></h3><p><code>reactive()</code> API 有两条限制：</p>`,8)),s("ol",null,[s("li",null,[n[25]||(n[25]=a("仅对对象类型有效（对象、数组和 ")),n[26]||(n[26]=s("code",null,"Map",-1)),n[27]||(n[27]=a("、")),n[28]||(n[28]=s("code",null,"Set",-1)),n[29]||(n[29]=a(" 这样的")),s("a",f,[n[23]||(n[23]=a("集合类型")),t(e)]),n[30]||(n[30]=a("），而对 ")),n[31]||(n[31]=s("code",null,"string",-1)),n[32]||(n[32]=a("、")),n[33]||(n[33]=s("code",null,"number",-1)),n[34]||(n[34]=a(" 和 ")),n[35]||(n[35]=s("code",null,"boolean",-1)),n[36]||(n[36]=a(" 这样的 ")),s("a",y,[n[24]||(n[24]=a("原始类型")),t(e)]),n[37]||(n[37]=a(" 无效。"))]),n[38]||(n[38]=p(`<li>因为 Vue 的响应式系统是通过属性访问进行追踪的，因此我们必须始终保持对该响应式对象的相同引用。 这意味着我们不可以随意地“替换”一个响应式对象，因为这将导致对初始引用的响应性连接丢失：<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 上面的引用 ({ count: 0 }) 将不再被追踪（响应性连接已丢失！）</span>
state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))]),n[83]||(n[83]=s("pre",null,[s("code",null,`同时这也意味着当我们将响应式对象的属性赋值或解构至本地变量时，或是将该属性传入一个函数时，我们会失去响应性：
 \`\`\`cpp
 const state = reactive({ count: 0 })
 
 // n 是一个局部变量，同 state.count
 // 失去响应性连接
 let n = state.count
 // 不影响原始的 state
 n++
 
 // count 也和 state.count 失去了响应性连接
 let { count } = state
 // 不会影响原始的 state
 count++
 
 // 该函数接收一个普通数字，并且
 // 将无法跟踪 state.count 的变化
 callSomeFunction(state.count)
 \`\`\`
`)],-1)),n[84]||(n[84]=s("h2",{id:"用-ref-定义响应式变量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#用-ref-定义响应式变量"},[s("span",null,[a("用 "),s("code",null,"ref()"),a(" 定义响应式变量")])])],-1)),s("p",null,[n[40]||(n[40]=s("code",null,"reactive()",-1)),n[41]||(n[41]=a(" 的种种限制归根结底是因为 JavaScript 没有可以作用于")),n[42]||(n[42]=s("strong",null,"所有值类型",-1)),n[43]||(n[43]=a("的 “引用” 机制。 为此，Vue 提供了一个 ")),s("a",h,[n[39]||(n[39]=s("code",null,"ref()",-1)),t(e)]),n[44]||(n[44]=a(" 方法来允许我们创建可以使用任何值类型的响应式 ")),n[45]||(n[45]=s("strong",null,"ref",-1)),n[46]||(n[46]=a("："))]),n[85]||(n[85]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ref()</code> 将传入参数的值包装为一个带 <code>.value</code> 属性的 ref 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// { value: 0 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>

count<span class="token punctuation">.</span>value<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[48]||(n[48]=a("TypeScript 用户请参阅：")),s("a",j,[n[47]||(n[47]=a("为 ref 标注类型")),t(e)])]),n[86]||(n[86]=p(`<p>和响应式对象的属性类似，ref 的 <code>.value</code> 属性<strong>也是响应式的</strong>。同时，当值为对象类型时，会用 <code>reactive()</code> 自动转换它的 <code>.value</code>。</p><p>一个包含对象类型值的 ref 可以响应式地替换整个对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objectRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 这是响应式的替换</span>
objectRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ref 被传递给函数或是从一般对象上被解构时，不会丢失响应性：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 该函数接收一个 ref</span>
<span class="token comment">// 需要通过 .value 取值</span>
<span class="token comment">// 但它会保持响应性</span>
<span class="token function">callSomeFunction</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>

<span class="token comment">// 仍然是响应式的</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("p",null,[n[50]||(n[50]=a("简言之，")),n[51]||(n[51]=s("code",null,"ref()",-1)),n[52]||(n[52]=a(" 让我们能创造一种对任意值的 “引用”，并能够在不丢失响应性的前提下传递这些引用。 这个功能很重要，因为它经常用于将逻辑提取到 ")),s("a",w,[n[49]||(n[49]=a("组合函数")),t(e)]),n[53]||(n[53]=a(" 中。"))]),n[87]||(n[87]=p(`<h3 id="ref-在模板中的解包" tabindex="-1"><a class="header-anchor" href="#ref-在模板中的解包"><span>ref 在模板中的解包</span></a></h3><p>当 ref 在模板中作为顶层属性被访问时，它们会被自动“解包”，所以不需要使用 <code>.value</code>。下面是之前的计数器例子，用 <code>ref()</code> 代替：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 无需 <span class="token punctuation">.</span>value <span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，仅当 ref 是模板渲染上下文的顶层属性时才适用自动“解包”。 例如， <code>object</code> 是顶层属性，但 <code>object.foo</code> 不是。</p><p>所以我们给出以下 object：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token operator">...</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>foo <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 不会像预期的那样工作，渲染的结果会是一个 \`[object Object]1\`</span>
<span class="token operator">...</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> object<span class="token punctuation">.</span>foo <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// 需要注意的是，如果一个 ref 是文本插值（即一个 \`{{ }}\` 符号）计算的最终值，它也将被解包。因此下面的渲染结果将为 \`1\`</span>
				<span class="token comment">// 这只是文本插值的一个方便功能，相当于 \`{{ object.foo.value }}\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>object.foo</code> 是一个 ref 对象。我们可以通过将 <code>foo</code> 改成顶层属性来解决这个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> object
<span class="token operator">...</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> foo <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment">// 现在渲染结果将是 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ref-在响应式对象中的解包" tabindex="-1"><a class="header-anchor" href="#ref-在响应式对象中的解包"><span>ref 在响应式对象中的解包</span></a></h3><p>当一个 <code>ref</code> 被嵌套在一个响应式对象中，作为属性被访问或更改时，它会自动解包，因此会表现得和一般的属性一样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  count
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 0</span>

state<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> otherCount <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

state<span class="token punctuation">.</span>count <span class="token operator">=</span> otherCount
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 2 // 原始 ref 现在已经和 state.count 失去联系</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)),s("p",null,[n[55]||(n[55]=a("只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为")),s("a",x,[n[54]||(n[54]=a("浅层响应式对象")),t(e)]),n[56]||(n[56]=a("的属性被访问时不会解包。"))]),n[88]||(n[88]=p(`<h3 id="数组和集合类型的-ref-解包" tabindex="-1"><a class="header-anchor" href="#数组和集合类型的-ref-解包"><span>数组和集合类型的 ref 解包</span></a></h3><p>跟响应式对象不同，当 ref 作为响应式数组或像 <code>Map</code> 这种原生集合类型的元素被访问时，不会进行解包。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Vue 3 Guide&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 这里需要 .value</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>books<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 这里需要 .value</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【补充】javascript-proxy" tabindex="-1"><a class="header-anchor" href="#【补充】javascript-proxy"><span>【补充】JavaScript Proxy</span></a></h2><p>参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</p><p><strong>Proxy</strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="教程" tabindex="-1"><a class="header-anchor" href="#教程"><span>教程</span></a></h3><p>语法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token parameter">handler</span> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为
 *                包含捕捉器（trap）的占位符对象，可译为处理器对象
 * <span class="token keyword">@param</span> <span class="token parameter">target</span> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）
 *               被 Proxy 代理虚拟化的对象。它常被作为代理的存储后端。根据目标验证关于对象不可扩展性或不可配置属性的不变量（保持不变的语义）
 */</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><h4 id="基础示例" tabindex="-1"><a class="header-anchor" href="#基础示例"><span>基础示例</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> prop <span class="token keyword">in</span> obj <span class="token operator">?</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// 如果没有对应的key就打印37</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>a<span class="token punctuation">,</span> p<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 1, undefined</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span> <span class="token keyword">in</span> p<span class="token punctuation">,</span> p<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 37</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="无操作转发代理" tabindex="-1"><a class="header-anchor" href="#无操作转发代理"><span>无操作转发代理</span></a></h4><p>在以下例子中，我们使用了一个原生 JavaScript 对象，代理会将所有应用到它的操作转发到这个对象上。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>   <span class="token comment">// 操作转发到目标</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 37. 操作已经被正确地转发</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h4>`,16)),s("p",null,[n[58]||(n[58]=a("通过代理，你可以轻松地验证向一个对象的传值。下面的代码借此展示了 ")),s("a",A,[n[57]||(n[57]=s("code",null,"set",-1)),t(e)]),n[59]||(n[59]=a(" handler 的作用"))]),n[89]||(n[89]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> validator <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;年龄不是整数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&#39;年龄似乎无效&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 存储值的默认行为</span>
    obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>

    <span class="token comment">// 表示成功</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> validator<span class="token punctuation">)</span><span class="token punctuation">;</span>

person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 100</span>

person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">&#39;young&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出异常：Uncaught TypeError: 年龄不是整数</span>

person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出异常：Uncaught RangeError: 年龄似乎无效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展构造函数" tabindex="-1"><a class="header-anchor" href="#扩展构造函数"><span>扩展构造函数</span></a></h4>`,2)),s("p",null,[n[62]||(n[62]=a("方法代理可以轻松地通过一个新构造函数来扩展一个已有的构造函数。这个例子使用了")),s("a",P,[n[60]||(n[60]=s("code",null,"construct",-1)),t(e)]),n[63]||(n[63]=a("和")),s("a",E,[n[61]||(n[61]=s("code",null,"apply",-1)),t(e)])]),n[90]||(n[90]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 该函数，可在sup类的基础上，扩展base方法。并返回一个新类</span>
<span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">sup<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>
    base<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;constructor&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  base<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">construct</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">apply</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> that<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">sup</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">base</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> proxy<span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&quot;constructor&quot;</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原类</span>
<span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 扩展后的类。通过extend返回值得到</span>
<span class="token keyword">var</span> Boy <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Boy</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> Peter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">&quot;Peter&quot;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Peter<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;M&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Peter<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Peter&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Peter<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 13</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作dom节点" tabindex="-1"><a class="header-anchor" href="#操作dom节点"><span>操作DOM节点</span></a></h4><p>略</p><h4 id="值修正及附加属性" tabindex="-1"><a class="header-anchor" href="#值修正及附加属性"><span>值修正及附加属性</span></a></h4><p>略</p><h4 id="通过属性查找数组中的特定对象" tabindex="-1"><a class="header-anchor" href="#通过属性查找数组中的特定对象"><span>通过属性查找数组中的特定对象</span></a></h4><p>略</p><h4 id="一个完整的-traps-列表示例" tabindex="-1"><a class="header-anchor" href="#一个完整的-traps-列表示例"><span>一个完整的 <code>traps</code> 列表示例</span></a></h4><p>略</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><p>略</p><h2 id="【补充】深入响应式系统" tabindex="-1"><a class="header-anchor" href="#【补充】深入响应式系统"><span>【补充】深入响应式系统</span></a></h2><p>Vue 最标志性的功能就是其低侵入性的响应式系统。组件状态都是由响应式的 JavaScript 对象组成的。 当更改它们时，视图会随即自动更新。 这让状态管理更加简单直观，但理解它是如何工作的也是很重要的，这可以帮助我们避免一些常见的陷阱。 在本节中，我们将深入研究 Vue 响应性系统的一些底层细节。</p><h3 id="什么是响应性" tabindex="-1"><a class="header-anchor" href="#什么是响应性"><span>什么是响应性</span></a></h3><p>Q：这个术语在今天的各种编程讨论中经常出现，但人们说它的时候究竟是想表达什么意思呢？</p><p>A：本质上，响应性是一种可以使我们声明式地处理变化的编程范式。一个经常被拿来当作典型例子的用例即是 Excel 表格。 例如 <code>A2 = A0+A1</code>，当你试着更改 A0 或 A1，你会注意到 A2 也随即自动更新了。</p><p>而 JavaScript 默认并不是这样的。如果我们用 JavaScript 写类似的逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A0</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> <span class="token constant">A1</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">let</span> <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token constant">A0</span> <span class="token operator">+</span> <span class="token constant">A1</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>

<span class="token constant">A0</span> <span class="token operator">=</span> <span class="token number">2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A2</span><span class="token punctuation">)</span> <span class="token comment">// 仍然是 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们更改 <code>A0</code> 后，<code>A2</code> 不会自动更新。</p><h3 id="js如何做到响应式" tabindex="-1"><a class="header-anchor" href="#js如何做到响应式"><span>js如何做到响应式</span></a></h3><p>那么我们如何在 JavaScript 中做到这一点呢？首先，为了能重新运行计算的代码来更新 <code>A2</code>，我们需要将其包装为一个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token constant">A2</span>

<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token constant">A2</span> <span class="token operator">=</span> <span class="token constant">A0</span> <span class="token operator">+</span> <span class="token constant">A1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要定义几个术语：</p><ul><li>这个 <code>update()</code> 函数会产生一个<strong>副作用</strong>，或者就简称为<strong>作用</strong> (effect)，因为它会更改程序里的状态。</li><li><code>A0</code> 和 <code>A1</code> 被视为这个作用的<strong>依赖</strong> (dependency)，因为它们的值被用来执行这个作用。因此这次作用也可以说是一个它依赖的<strong>订阅者</strong> (subscriber)。</li></ul><p>我们需要一个魔法函数，能够在 <code>A0</code> 或 <code>A1</code> (这两个<strong>依赖</strong>) 变化时调用 <code>update()</code> (产生<strong>作用</strong>)。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">whenDepsChange</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个 <code>whenDepsChange()</code> 函数有如下的任务：</p><ol><li>当一个变量被读取时进行追踪。 例如我们执行了表达式 <code>A0 + A1</code> 的计算，则 <code>A0</code> 和 <code>A1</code> 都被读取到了。</li><li>如果一个变量在当前运行的副作用中被读取了，就将该副作用设为此变量的一个订阅者。 例如由于 <code>A0</code> 和 <code>A1</code> 在 <code>update()</code> 执行时被访问到了，则 <code>update()</code> 需要在第一次调用之后成为 <code>A0</code> 和 <code>A1</code> 的订阅者。</li><li>探测一个变量的变化。 例如当我们给 <code>A0</code> 赋了一个新的值后，应该通知其所有订阅了的副作用重新执行。</li></ol><h3 id="vue-中的响应性是如何工作的" tabindex="-1"><a class="header-anchor" href="#vue-中的响应性是如何工作的"><span>Vue 中的响应性是如何工作的</span></a></h3><p>我们无法直接追踪对上述示例中局部变量的读写，原生 JavaScript 没有提供任何机制能做到这一点。<strong>但是</strong>，我们是可以追踪<strong>对象属性</strong>的读写的。</p><p>在 JavaScript 中有两种劫持 property 访问的方式：</p>`,31)),s("ul",null,[s("li",null,[s("a",S,[n[64]||(n[64]=a("getter")),t(e)]),n[66]||(n[66]=a(" / ")),s("a",V,[n[65]||(n[65]=a("setters")),t(e)]),n[67]||(n[67]=s("ul",null,[s("li",null,"Vue 2 使用 getter / setters 完全是出于支持旧版本浏览器的限制")],-1))]),s("li",null,[s("a",O,[n[68]||(n[68]=a("Proxies")),t(e)]),n[69]||(n[69]=s("ul",null,[s("li",null,"Vue 3 中则使用了 Proxy 来创建响应式对象，仅将 getter / setter 用于 ref")],-1))])]),n[91]||(n[91]=p(`<p>下面的伪代码将会说明它们是如何工作的：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>			<span class="token comment">// reactive</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>				<span class="token comment">// Proxy的方式进行响应式</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>				<span class="token comment">// ref</span>
  <span class="token keyword">const</span> refObject <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>refObject<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> value
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> newValue
      <span class="token function">trigger</span><span class="token punctuation">(</span>refObject<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> refObject
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[|TIP] 这里和下面的代码片段皆旨在以最简单的形式解释核心概念，因此省略了许多细节和边界情况。</p><h3 id="reactive-局限性" tabindex="-1"><a class="header-anchor" href="#reactive-局限性"><span>reactive 局限性</span></a></h3>`,4)),s("p",null,[n[72]||(n[72]=a("以上代码解释了我们在基础章节部分讨论过的一些 ")),s("a",D,[n[70]||(n[70]=s("code",null,"reactive()",-1)),n[71]||(n[71]=a(" 的局限性")),t(e)]),n[73]||(n[73]=a("："))]),n[92]||(n[92]=p(`<ul><li>当你将一个响应性对象的属性解构为一个局部变量时，响应性就会“断开连接”，因为对局部变量的访问不再触发 get / set 代理捕获。</li><li>从 <code>reactive()</code> 返回的代理尽管行为上表现得像原始对象，但我们通过使用 <code>===</code> 运算符还是能够比较出它们的不同。</li></ul><p>在 <code>track()</code> 内部，我们会检查当前是否有正在运行的副作用。如果有，我们会查找到一个存储了所有追踪了该属性的订阅者的 Set，然后将当前这个副作用作为新订阅者添加到该 Set 中。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这会在一个副作用就要运行之前被设置</span>
<span class="token comment">// 我们会在后面处理它</span>
<span class="token keyword">let</span> activeEffect

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token function">getSubscribersForProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>……</p><p>……</p><p>……</p><p>……</p><p>……</p><p>……</p><p>……</p><p>……</p><h3 id="typescript-为相应式标注类型" tabindex="-1"><a class="header-anchor" href="#typescript-为相应式标注类型"><span>TypeScript 为相应式标注类型</span></a></h3><p>……</p><h1 id="响应式基础-选项式" tabindex="-1"><a class="header-anchor" href="#响应式基础-选项式"><span>响应式基础（选项式）</span></a></h1><h2 id="声明响应式状态-1" tabindex="-1"><a class="header-anchor" href="#声明响应式状态-1"><span>声明响应式状态</span></a></h2><p>选用选项式 API 时，会用 <code>data</code> 选项来声明组件的响应式状态。 此选项的值应为返回一个对象的函数。 Vue 将在创建新组件实例的时候调用此函数，并将函数返回的对象用响应式系统进行包装。 此对象的所有顶层属性都会被代理到组件实例 (即方法和生命周期钩子中的 <code>this</code>) 上。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// \`mounted\` 是生命周期钩子，之后我们会讲到</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \`this\` 指向当前组件实例</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// =&gt; 1</span>

    <span class="token comment">// 数据属性也可以被更改</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些实例上的属性仅在实例首次创建时被添加，因此你需要确保它们都出现在 <code>data</code> 函数返回的对象上。若所需的值还未准备好，在必要时也可以使用 <code>null</code>、<code>undefined</code> 或者其他一些值占位。</p><p>虽然也可以不在 <code>data</code> 上定义，直接向组件实例添加新属性，但这个属性将无法触发响应式更新。</p><p>Vue 在组件实例上暴露的内置 API 使用 <code>$</code> 作为前缀。它同时也为内部属性保留 <code>_</code> 前缀。因此，你应该避免在顶层 <code>data</code> 上使用任何以这些字符作前缀的属性。</p><h3 id="响应式代理-vs-原始值" tabindex="-1"><a class="header-anchor" href="#响应式代理-vs-原始值"><span>响应式代理 vs. 原始值</span></a></h3>`,21)),s("p",null,[n[75]||(n[75]=a("在 Vue 3 中，数据是基于 ")),s("a",J,[n[74]||(n[74]=a("JavaScript Proxy（代理）")),t(e)]),n[76]||(n[76]=a(" 实现响应式的。使用过 Vue 2 的用户可能需要注意下面这样的边界情况："))]),n[93]||(n[93]=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">someObject</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someObject <span class="token operator">=</span> newObject

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObject <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">)</span> <span class="token comment">// false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你在赋值后再访问 <code>this.someObject</code>，此值已经是原来的 <code>newObject</code> 的一个响应式代理。 <strong>与 Vue 2 不同的是，这里原始的 <code>newObject</code> 不会变为响应式：请确保始终通过 <code>this</code> 来访问响应式状态。</strong></p><h2 id="声明方法" tabindex="-1"><a class="header-anchor" href="#声明方法"><span>声明方法</span></a></h2><p>要为组件添加方法，我们需要用到 <code>methods</code> 选项。它应该是一个包含所有方法的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在其他方法或是生命周期中也可以调用方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 自动为 <code>methods</code> 中的方法绑定了永远指向组件实例的 <code>this</code>。这确保了方法在作为事件监听器或回调函数时始终保持正确的 <code>this</code>。 你不应该在定义 <code>methods</code> 时使用箭头函数，因为箭头函数没有自己的 <code>this</code> 上下文。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 反例：无法访问此处的 \`this\`!</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和组件实例上的其他属性一样，方法也可以在模板上被访问。在模板中它们常常被用作事件监听器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的例子中，<code>increment</code> 方法会在 <code>&lt;button&gt;</code> 被点击时调用。</p><h3 id="dom更新时机" tabindex="-1"><a class="header-anchor" href="#dom更新时机"><span>DOM更新时机</span></a></h3><p>基本同组合式</p><h3 id="深层相应性" tabindex="-1"><a class="header-anchor" href="#深层相应性"><span>深层相应性</span></a></h3><p>基本同组合式</p>`,14))])}const M=o(u,[["render",z],["__file","02. 响应式基础.html.vue"]]),N=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/02.%20%E5%9F%BA%E7%A1%80/02.%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80.html","title":"Vue","lang":"zh-CN","frontmatter":{"description":"Vue 目录 响应式基础 声明响应式状态 我们可以使用 reactive() 函数创建一个响应式对象或数组： 响应式对象其实是 JavaScript Proxy，其行为表现与一般对象相似。 不同之处在于 Vue 能够跟踪对响应式对象属性的访问与更改操作。 如果你对这其中的细节感到好奇，我们在 深入响应式系统 一章中会进行解释，但我们推荐你先读完这里的主...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/02.%20%E5%9F%BA%E7%A1%80/02.%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Vue"}],["meta",{"property":"og:description","content":"Vue 目录 响应式基础 声明响应式状态 我们可以使用 reactive() 函数创建一个响应式对象或数组： 响应式对象其实是 JavaScript Proxy，其行为表现与一般对象相似。 不同之处在于 Vue 能够跟踪对响应式对象属性的访问与更改操作。 如果你对这其中的细节感到好奇，我们在 深入响应式系统 一章中会进行解释，但我们推荐你先读完这里的主..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"响应式基础","slug":"响应式基础","link":"#响应式基础","children":[{"level":2,"title":"声明响应式状态","slug":"声明响应式状态","link":"#声明响应式状态","children":[{"level":3,"title":"setup()","slug":"setup","link":"#setup","children":[]},{"level":3,"title":"<script setup>","slug":"script-setup","link":"#script-setup","children":[]},{"level":3,"title":"DOM 更新时机","slug":"dom-更新时机","link":"#dom-更新时机","children":[]},{"level":3,"title":"深层响应性","slug":"深层响应性","link":"#深层响应性","children":[]},{"level":3,"title":"响应式代理 vs. 原始对象","slug":"响应式代理-vs-原始对象","link":"#响应式代理-vs-原始对象","children":[]},{"level":3,"title":"reactive() 的局限性","slug":"reactive-的局限性","link":"#reactive-的局限性","children":[]}]},{"level":2,"title":"用 ref() 定义响应式变量","slug":"用-ref-定义响应式变量","link":"#用-ref-定义响应式变量","children":[{"level":3,"title":"ref 在模板中的解包","slug":"ref-在模板中的解包","link":"#ref-在模板中的解包","children":[]},{"level":3,"title":"ref 在响应式对象中的解包","slug":"ref-在响应式对象中的解包","link":"#ref-在响应式对象中的解包","children":[]},{"level":3,"title":"数组和集合类型的 ref 解包","slug":"数组和集合类型的-ref-解包","link":"#数组和集合类型的-ref-解包","children":[]}]},{"level":2,"title":"【补充】JavaScript Proxy","slug":"【补充】javascript-proxy","link":"#【补充】javascript-proxy","children":[{"level":3,"title":"教程","slug":"教程","link":"#教程","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[{"level":4,"title":"基础示例","slug":"基础示例","link":"#基础示例","children":[]},{"level":4,"title":"无操作转发代理","slug":"无操作转发代理","link":"#无操作转发代理","children":[]},{"level":4,"title":"验证","slug":"验证","link":"#验证","children":[]},{"level":4,"title":"扩展构造函数","slug":"扩展构造函数","link":"#扩展构造函数","children":[]},{"level":4,"title":"操作DOM节点","slug":"操作dom节点","link":"#操作dom节点","children":[]},{"level":4,"title":"值修正及附加属性","slug":"值修正及附加属性","link":"#值修正及附加属性","children":[]},{"level":4,"title":"通过属性查找数组中的特定对象","slug":"通过属性查找数组中的特定对象","link":"#通过属性查找数组中的特定对象","children":[]},{"level":4,"title":"一个完整的 traps 列表示例","slug":"一个完整的-traps-列表示例","link":"#一个完整的-traps-列表示例","children":[]}]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"【补充】深入响应式系统","slug":"【补充】深入响应式系统","link":"#【补充】深入响应式系统","children":[{"level":3,"title":"什么是响应性","slug":"什么是响应性","link":"#什么是响应性","children":[]},{"level":3,"title":"js如何做到响应式","slug":"js如何做到响应式","link":"#js如何做到响应式","children":[]},{"level":3,"title":"Vue 中的响应性是如何工作的","slug":"vue-中的响应性是如何工作的","link":"#vue-中的响应性是如何工作的","children":[]},{"level":3,"title":"reactive 局限性","slug":"reactive-局限性","link":"#reactive-局限性","children":[]},{"level":3,"title":"TypeScript 为相应式标注类型","slug":"typescript-为相应式标注类型","link":"#typescript-为相应式标注类型","children":[]}]}]},{"level":1,"title":"响应式基础（选项式）","slug":"响应式基础-选项式","link":"#响应式基础-选项式","children":[{"level":2,"title":"声明响应式状态","slug":"声明响应式状态-1","link":"#声明响应式状态-1","children":[{"level":3,"title":"响应式代理 vs. 原始值","slug":"响应式代理-vs-原始值","link":"#响应式代理-vs-原始值","children":[]}]},{"level":2,"title":"声明方法","slug":"声明方法","link":"#声明方法","children":[{"level":3,"title":"DOM更新时机","slug":"dom更新时机","link":"#dom更新时机","children":[]},{"level":3,"title":"深层相应性","slug":"深层相应性","link":"#深层相应性","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.5,"words":4951},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/02. 基础/02. 响应式基础.md","excerpt":"\\n<h1>目录</h1>\\n<h1>响应式基础</h1>\\n<h2>声明响应式状态</h2>\\n<p>我们可以使用 <a href=\\"https://cn.vuejs.org/api/reactivity-core.html#reactive\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>reactive()</code></a> 函数创建一个响应式对象或数组：</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> reactive <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vue'</span>\\n<span class=\\"token keyword\\">const</span> state <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{M as comp,N as data};
