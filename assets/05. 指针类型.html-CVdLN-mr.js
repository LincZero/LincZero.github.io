import{_ as a,c as s,a as e,o as t}from"./app-DMuzqBDp.js";const p={};function o(l,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型"><span>指针类型</span></a></h1><h2 id="数组指针" tabindex="-1"><a class="header-anchor" href="#数组指针"><span>数组指针</span></a></h2><p>Java数组与C++数组在堆栈上有很大不同</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// Java	堆 heap</span>
等同于
<span class="token keyword">int</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// C++	堆 heap</span>
而不同于
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>					<span class="token comment">// C++ 	栈 stack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多维数组同理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> balances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// Java</span>
等同于
<span class="token keyword">double</span><span class="token operator">*</span><span class="token operator">*</span> balances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// C++，这种可以是不规则数组</span>
不同于
<span class="token keyword">double</span> balances<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>						<span class="token comment">// C++</span>
也不同于
<span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>balances<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// C++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中的[]运算符被预定义为检查数组边界，而且<strong>没有指针运算</strong>，即不能通过a加1得到数组的下一个元素</p><h2 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针"><span>函数指针</span></a></h2><p>有无函数指针</p><ul><li>C和C++ <ul><li>可以从<strong>函数指针</strong>执行任意函数。</li></ul></li><li>Java <ul><li>从表面上看，Java没有提供方法指针，即将一个方法的存储地址传给另外一个方法，以便第二个方法能够随后调用它。</li><li>代替方案 <ul><li>事实上，Java的设计者曾说过：方法指针是很危险的，并且常常会带来隐患。他们认为Java提供的**接口（interface）**是一种更好的解决方案。</li><li>然而，<strong>反射机制</strong>允许你调用任意方法。</li></ul></li></ul></li><li>J++/C# <ul><li>微软公司为自己的非标准Java语言J++（以及后来的C#）增加了另一种被称为**委托（delegate）**的方法指针类型， 它与Java中的Method类不同。Java中内部类比委托更加有用。</li></ul></li></ul>`,12)]))}const i=a(p,[["render",o],["__file","05. 指针类型.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/05.%20%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 指针类型 数组指针 Java数组与C++数组在堆栈上有很大不同 多维数组同理 Java中的[]运算符被预定义为检查数组边界，而且没有指针运算，即不能通过a加1得到数组的下一个元素 函数指针 有无函数指针 C和C++ 可以从函数指针执行任意函数。 Java 从表面上看，Java没有提供方法指针，即将一个方法的存储地址传给另外一个...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/05.%20%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 指针类型 数组指针 Java数组与C++数组在堆栈上有很大不同 多维数组同理 Java中的[]运算符被预定义为检查数组边界，而且没有指针运算，即不能通过a加1得到数组的下一个元素 函数指针 有无函数指针 C和C++ 可以从函数指针执行任意函数。 Java 从表面上看，Java没有提供方法指针，即将一个方法的存储地址传给另外一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"指针类型","slug":"指针类型","link":"#指针类型","children":[{"level":2,"title":"数组指针","slug":"数组指针","link":"#数组指针","children":[]},{"level":2,"title":"函数指针","slug":"函数指针","link":"#函数指针","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.22,"words":366},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/02. 数据+算法/05. 指针类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>指针类型</h1>\\n<h2>数组指针</h2>\\n<p>Java数组与C++数组在堆栈上有很大不同</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// Java\\t堆 heap</span>\\n等同于\\n<span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span>a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// C++\\t堆 heap</span>\\n而不同于\\n<span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// C++ \\t栈 stack</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,r as data};
