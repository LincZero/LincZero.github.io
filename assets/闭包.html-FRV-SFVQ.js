import{_ as s,c as a,e as t,o as e}from"./app-CR1DZRQy.js";const p={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="闭包-closure" tabindex="-1"><a class="header-anchor" href="#闭包-closure"><span>闭包（closure）</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Rust 中的 <strong>闭包（closure）</strong>，也叫做 <strong>lambda 表达式</strong> 或者 <strong>lambda</strong>，是一类能够捕获周围作用域中变量的函数。</p><p>调用一个闭包和调用一个函数完全<strong>相同</strong>，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。</p><p>与普通函数的区别：</p><ul><li>声明时使用 <code>||</code> 替代 <code>()</code> 将输入参数括起来，去掉了 <code>fn</code> 关键字和函数名。</li><li>函数体定界符（{}）对于单个表达式是可选的，其他情况必须加上。</li><li>有能力<strong>捕获外部环境的变量</strong></li></ul><h2 id="定义闭包" tabindex="-1"><a class="header-anchor" href="#定义闭包"><span>定义闭包</span></a></h2><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 普通函数</span>
<span class="token keyword">fn</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> 返回值 <span class="token punctuation">{</span>
   <span class="token comment">// 业务逻辑</span>
<span class="token punctuation">}</span>

<span class="token comment">// 闭包			// 去掉了 fn，去掉了函数名，用\`||\`代替\`()\`</span>
<span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>参数列表<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
	<span class="token comment">// 业务逻辑</span>
<span class="token punctuation">}</span>

<span class="token comment">// 无参数闭包</span>
<span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
	<span class="token comment">// 业务逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包也可以赋值给一个变量，可以通过调用这个变量来完成闭包的调用</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> 闭包变量 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>参数列表<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
   <span class="token comment">// 闭包的具体逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">,</span> b<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 输出 6，= 2+4</span>

<span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 输出10，= 5*2</span>

<span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> add2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span> v <span class="token operator">+</span> x <span class="token punctuation">}</span><span class="token punctuation">;</span>	<span class="token comment">// 这里说明闭包有能力&quot;捕获外部环境的变量&quot;，虽然这里只是捕获了栈变量，不设计所有权的移动和借用</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出7，3+4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="捕获" tabindex="-1"><a class="header-anchor" href="#捕获"><span>捕获</span></a></h3><p>闭包本质上很灵活，闭包可以在没有类型标注的情况下运行。可移动（move），又可借用（borrow）。闭包可以通过以下方式捕获变量：</p><ul><li>通过引用：&amp;T</li><li>通过可变引用：&amp;mut T</li><li>通过值：T</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><p>闭包就是在一个函数内创建立即调用的另一个函数。</p></li><li><p>闭包是一个匿名函数。</p></li><li><p>闭包虽然没有函数名，但可以把整个闭包赋值一个变量，通过调用该变量来完成闭包的调用。</p></li><li><p>闭包不用声明返回值，但它却可以有返回值。并且使用最后一条语句的执行结果作为返回值。闭包的返回值可以赋值给变量。</p></li><li><p>闭包又称之为 内联函数。可以让闭包访问外层函数里的变量。</p></li></ul>`,17)]))}const i=s(p,[["render",o],["__file","闭包.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/05.%20%E5%B0%81%E8%A3%85/%E9%97%AD%E5%8C%85.html","title":"闭包（closure）","lang":"zh-CN","frontmatter":{"description":"闭包（closure） 概念 Rust 中的 闭包（closure），也叫做 lambda 表达式 或者 lambda，是一类能够捕获周围作用域中变量的函数。 调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。 与普通函数的区别： 声明时使用 || 替代 () 将输入参数括起来，去掉了 fn 关...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/05.%20%E5%B0%81%E8%A3%85/%E9%97%AD%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"闭包（closure）"}],["meta",{"property":"og:description","content":"闭包（closure） 概念 Rust 中的 闭包（closure），也叫做 lambda 表达式 或者 lambda，是一类能够捕获周围作用域中变量的函数。 调用一个闭包和调用一个函数完全相同，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。 与普通函数的区别： 声明时使用 || 替代 () 将输入参数括起来，去掉了 fn 关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包（closure）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"闭包（closure）","slug":"闭包-closure","link":"#闭包-closure","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"定义闭包","slug":"定义闭包","link":"#定义闭包","children":[{"level":3,"title":"捕获","slug":"捕获","link":"#捕获","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.95,"words":584},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Rust/学习/05. 封装/闭包.md","excerpt":"\\n<h2>概念</h2>\\n<p>Rust 中的 <strong>闭包（closure）</strong>，也叫做 <strong>lambda 表达式</strong> 或者 <strong>lambda</strong>，是一类能够捕获周围作用域中变量的函数。</p>\\n<p>调用一个闭包和调用一个函数完全<strong>相同</strong>，不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。</p>\\n<p>与普通函数的区别：</p>\\n<ul>\\n<li>声明时使用 <code>||</code> 替代 <code>()</code> 将输入参数括起来，去掉了 <code>fn</code> 关键字和函数名。</li>\\n<li>函数体定界符（{}）对于单个表达式是可选的，其他情况必须加上。</li>\\n<li>有能力<strong>捕获外部环境的变量</strong></li>\\n</ul>","autoDesc":true}');export{i as comp,u as data};
