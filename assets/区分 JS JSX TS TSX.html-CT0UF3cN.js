import{_ as e,c as s,e as a,o as p}from"./app-BDGujT_T.js";const i={};function n(S,t){return p(),s("div",null,t[0]||(t[0]=[a('<h1 id="区分-js-jsx-ts-tsx" tabindex="-1"><a class="header-anchor" href="#区分-js-jsx-ts-tsx"><span>区分 JS JSX TS TSX</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="区分-js-jsx-ts-tsx-1" tabindex="-1"><a class="header-anchor" href="#区分-js-jsx-ts-tsx-1"><span>区分 JS JSX TS TSX</span></a></h1><p>参考：https://blog.csdn.net/shifang07/article/details/105371268</p><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>JSX</span></a></h2><p>就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到&lt;，JSX就当HTML解析，遇到{就当JavaScript解析。JSX 只是为 React.createElement(component, props, …children) 方法提供的语法糖。React 自创了JSX语法，是一个 JavaScript 的语法扩展，官方建议在 React 中配合使用 JSX 来替代原始的 JS。因为JSX 可以更好的描述 UI 应该呈现出它应有交互的本质形式。JSX 看起来有点类似模版语言，但它具有 JavaScript 的全部功能。</p><h2 id="js和-jsx的区别" tabindex="-1"><a class="header-anchor" href="#js和-jsx的区别"><span>.js和.jsx的区别</span></a></h2><p>.js可以用来做为模块来使用</p><p>.jsx一般作为组件来使用，但是js也可以用来作为组件使用也是没问题的</p><p>.js就是前端开发语言,jsx是React框架下用的,要在React框架中的编译器编译成js语言才能使用的</p><h2 id="ts" tabindex="-1"><a class="header-anchor" href="#ts"><span>TS</span></a></h2><p>用 TypeScript 语法写的 .ts .tsx 等后缀的程序是不能直接运行的，而是会被 tsconfig.json 配置中的 “target”: “es6”, 这项配置转换为 es6 语法的 .js 文件。</p><p>TypeScript 中的 import 只会加载 .ts .tsx 后缀的文件，而 Javascript 中的 import 只能加载 .js 等后缀的文件</p><p><strong>TypeScript的优势</strong></p><ul><li>规避静态类型出错：TS通过静态类型检查，能把错误从运行时提前至编译时，避免了一些基本bug。</li><li>应对接口改变 快速准确<br> 假如后端改变了一些接口字段，可以通过直接改变编译出错的地方，快速替换。而不需要一个一个字段地寻找</li></ul><h2 id="ts-js-区别" tabindex="-1"><a class="header-anchor" href="#ts-js-区别"><span>ts js 区别</span></a></h2><p>TypeScript 和 JavaScript 是目前项目开发中较为流行的两种脚本语言。<br> JavaScript 是轻量级的解释性脚本语言，可嵌入到 HTML 页面中，在浏览器端执行。而TypeScript 是JavaScript 的超集，即包含JavaScript 的所有元素，能运行JavaScript 的代码，并扩展了JavaScript 的语法。相比于JavaScript ，它还增加了静态类型、类、模块、接口和类型注解方面的功能，更易于大项目的开发。</p><p>经过查阅资料，TypeScript 相比于JavaScript 的优势总结为以下几点:</p><p>1.便于开发人员做注释。<br> 2.能帮助开发人员检测出错误并修改。<br> 3.TypeScript工具使重构更变的容易、快捷。<br> 4.TypeScript 引入了 JavaScript 中没有的“类”概念。<br> 5.TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。<br> 6.。类型安全功能能在编码期间检测错误，这为开发人员创建了一个更高效的编码和调试过</p><h2 id="ts和tsx区别" tabindex="-1"><a class="header-anchor" href="#ts和tsx区别"><span>ts和tsx区别</span></a></h2><p>tsx大家默认含模板代码</p><p>使用<code>.ts</code>纯TS文件</p><p>使用<code>.tsx</code>了含有JSX文件</p><p>例如，一个 React 组件应该是<code>.tsx</code>，但是一个包含辅助函数的文件应该是<code>.ts</code></p>',24)]))}const r=e(i,[["render",n],["__file","区分 JS JSX TS TSX.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/TypeScript/%E5%8C%BA%E5%88%86%20JS%20JSX%20TS%20TSX.html","title":"区分 JS JSX TS TSX","lang":"zh-CN","frontmatter":{"description":"区分 JS JSX TS TSX 目录 区分 JS JSX TS TSX 参考：https://blog.csdn.net/shifang07/article/details/105371268 JSX 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到<，JSX就当HTML解析，遇到{就当...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/TypeScript/%E5%8C%BA%E5%88%86%20JS%20JSX%20TS%20TSX.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"区分 JS JSX TS TSX"}],["meta",{"property":"og:description","content":"区分 JS JSX TS TSX 目录 区分 JS JSX TS TSX 参考：https://blog.csdn.net/shifang07/article/details/105371268 JSX 就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到<，JSX就当HTML解析，遇到{就当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"区分 JS JSX TS TSX\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"区分 JS JSX TS TSX","slug":"区分-js-jsx-ts-tsx","link":"#区分-js-jsx-ts-tsx","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"区分 JS JSX TS TSX","slug":"区分-js-jsx-ts-tsx-1","link":"#区分-js-jsx-ts-tsx-1","children":[{"level":2,"title":"JSX","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":".js和.jsx的区别","slug":"js和-jsx的区别","link":"#js和-jsx的区别","children":[]},{"level":2,"title":"TS","slug":"ts","link":"#ts","children":[]},{"level":2,"title":"ts js 区别","slug":"ts-js-区别","link":"#ts-js-区别","children":[]},{"level":2,"title":"ts和tsx区别","slug":"ts和tsx区别","link":"#ts和tsx区别","children":[]}]}],"git":{},"readingTime":{"minutes":2.48,"words":743},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/TypeScript/区分 JS JSX TS TSX.md","excerpt":"\\n<h1>目录</h1>\\n<h1>区分 JS JSX TS TSX</h1>\\n<p>参考：https://blog.csdn.net/shifang07/article/details/105371268</p>\\n<h2>JSX</h2>\\n<p>就是Javascript和XML结合的一种格式。React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到&lt;，JSX就当HTML解析，遇到{就当JavaScript解析。JSX 只是为 React.createElement(component, props, …children) 方法提供的语法糖。React 自创了JSX语法，是一个 JavaScript 的语法扩展，官方建议在 React 中配合使用 JSX 来替代原始的 JS。因为JSX 可以更好的描述 UI 应该呈现出它应有交互的本质形式。JSX 看起来有点类似模版语言，但它具有 JavaScript 的全部功能。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/TypeScript/区分 JS JSX TS TSX.md","value":{"title":"区分 JS JSX TS TSX","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/TypeScript/区分 JS JSX TS TSX.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,l as data};
