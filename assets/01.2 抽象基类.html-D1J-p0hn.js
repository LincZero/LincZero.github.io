import{_ as n,c as s,e,o as t}from"./app-D9x9tU0e.js";const l={};function p(i,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="抽象基类" tabindex="-1"><a class="header-anchor" href="#抽象基类"><span>抽象基类</span></a></h1><h2 id="抽象类简概" tabindex="-1"><a class="header-anchor" href="#抽象类简概"><span>抽象类简概</span></a></h2><ul><li>作用：位于上层的类更具有通用性，甚至可能更加抽象</li><li>举例：Employee和Student的共同超类为Person</li><li>性质：抽象类不能被实例化</li></ul><h2 id="抽象类使用-abstract关键字" tabindex="-1"><a class="header-anchor" href="#抽象类使用-abstract关键字"><span>抽象类使用（abstract关键字）</span></a></h2><ul><li><p>抽象方法</p><ul><li><p>使用abstract关键字，这样就完全不<strong>需要实现超类的方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// no implementation required，不需要实现</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>抽象类</p><ul><li><p>为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。 但类即使不含抽象方法，也可以将类声明为抽象类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>补充</p><blockquote><p>除了抽象方法之外，抽象类还可以包含具体数据和具体方法</p><p>但许多程序员认为，在抽象类中不能包含具体方法。建议尽量将通用的域和方法（不管是否是抽象的）放在超类（不管是否是抽象类）中</p><p>在Java程序设计语言中，抽象方法是一个重要的概念。在接口（interface）一章中将会看到更多的抽象方法</p></blockquote><hr><p><mark>与C++不同</mark></p><ul><li><p>Java</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>				<span class="token comment">// 抽象基类（关键字强制被声明，目的只是提高程序的清晰度）</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抽象方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><p><strong>只要有一个纯虚函数，这个类就是抽象类</strong>。在C++中，没有提供用于表示抽象类的特殊关键字。</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>class Person
{
public:
    virtual string getDescription() = 0;	// 纯虚函数
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,12)]))}const o=n(l,[["render",p],["__file","01.2 抽象基类.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.2%20%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 抽象基类 抽象类简概 作用：位于上层的类更具有通用性，甚至可能更加抽象 举例：Employee和Student的共同超类为Person 性质：抽象类不能被实例化 抽象类使用（abstract关键字） 抽象方法 使用abstract关键字，这样就完全不需要实现超类的方法 抽象类 为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.2%20%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 抽象基类 抽象类简概 作用：位于上层的类更具有通用性，甚至可能更加抽象 举例：Employee和Student的共同超类为Person 性质：抽象类不能被实例化 抽象类使用（abstract关键字） 抽象方法 使用abstract关键字，这样就完全不需要实现超类的方法 抽象类 为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"抽象基类","slug":"抽象基类","link":"#抽象基类","children":[{"level":2,"title":"抽象类简概","slug":"抽象类简概","link":"#抽象类简概","children":[]},{"level":2,"title":"抽象类使用（abstract关键字）","slug":"抽象类使用-abstract关键字","link":"#抽象类使用-abstract关键字","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.3,"words":389},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/01.2 抽象基类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>抽象基类</h1>\\n<h2>抽象类简概</h2>\\n<ul>\\n<li>作用：位于上层的类更具有通用性，甚至可能更加抽象</li>\\n<li>举例：Employee和Student的共同超类为Person</li>\\n<li>性质：抽象类不能被实例化</li>\\n</ul>\\n<h2>抽象类使用（abstract关键字）</h2>\\n<ul>\\n<li>\\n<p>抽象方法</p>\\n<ul>\\n<li>\\n<p>使用abstract关键字，这样就完全不<strong>需要实现超类的方法</strong></p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getDescription</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// no implementation required，不需要实现</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>抽象类</p>\\n<ul>\\n<li>\\n<p>为了提高程序的清晰度，包含一个或多个抽象方法的类本身必须被声明为抽象的。\\n但类即使不含抽象方法，也可以将类声明为抽象类</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">abstract</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getDescription</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{o as comp,r as data};
