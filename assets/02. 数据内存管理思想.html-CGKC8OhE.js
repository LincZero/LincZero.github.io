import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as t,e as i}from"./app-DtBZtuIa.js";const a={},o=i('<h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="对象引用和裸指针" tabindex="-1"><a class="header-anchor" href="#对象引用和裸指针"><span>对象引用和裸指针</span></a></h2><h2 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制"><span>垃圾回收机制</span></a></h2><ul><li>无GC <ul><li><code>C/C++</code></li><li><code>Rust</code>：无GC</li></ul></li><li>有GC <ul><li><code>JavaScript</code>：使用new创建对象，但不用担心释放内存，垃圾信息收集器会自动处理这件事。详细原理去查Mozilla文档</li><li><code>Qt C++</code>：一定程度简化了C++的垃圾回收机制，如对象树机制：详情略、自主去查</li><li><code>Java</code>：相比C++一定程度简化了垃圾回收机制</li><li><code>Python</code></li><li><code>Go</code></li></ul></li></ul><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h2><p>现代编程语言影响性能“最大”的因素，除了这两个：</p><ol><li>执行机制，机器码&gt;&gt;虚拟机&gt;&gt;解释器 <ul><li>机器码：C++、Rust、Go</li><li>虚拟机：Java (JVM)</li><li>解释器：JavaScript、Python (也可JIT)</li></ul></li><li>无GC&gt;&gt;有GC <ul><li>无GC：C++、Rust</li><li>有GC：Java、Go、JavaScript、Python</li></ul></li></ol><p>还有</p><ol><li><p>数据结构和算法的使用：适当的数据结构和算法可以显著提高性能，反之则会拖慢性能。</p></li><li><p>并发和并行处理：并发和并行处理能力对于利用现代多核处理器架构的性能至关重要。语言如何支持并发和并行，会影响执行效率。</p><ul><li>Python：有GIL，不佳，听说后面的改版能去掉</li><li>Go：语言级并发、异步IO</li><li>Java：优秀</li><li>C++：异步支持尚不足</li><li>Rust：优秀且安全</li><li>Js：异步，但并发弱</li></ul></li><li><p>编译器优化：编译器的质量和优化能力可以大大影响生成代码的性能。</p></li><li><p>语言的抽象级别：高级语言通常比低级语言具有更好的生产力，但其性能可能较差，因为更高的抽象级别可能会引入额外的计算和内存开销</p><ul><li><p>补充一下，Rust 所宣传的 &quot;零成本抽象&quot;。指在不牺牲性能的情况下，使用更高级别的抽象（如函数，对象，泛型等）</p><p>编译器生成的机器码与你直接用低级代码编写的效果是一样的。</p><p>这种编译时优化和消除开销的能力，主要来自于Rust的先进的类型系统、借用检查器以及优秀的LLVM后端编译器。</p></li></ul></li><li><p>I/O操作：对于某些应用程序，如网络服务器、数据库等，I/O操作可能是性能瓶颈。语言对I/O操作的支持会影响性能</p></li><li><p>特定平台的优化：某些编程语言可能会针对特定的硬件或操作系统平台进行优化，从而在这些平台上表现出较好的性能。例如，Objective-C和Swift在iOS设备上的性能优于其他语言</p></li></ol>',9),n=[o];function c(r,p){return l(),t("div",null,n)}const E=e(a,[["render",c],["__file","02. 数据内存管理思想.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/02.%20%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%9D%E6%83%B3.html","title":"其他","lang":"zh-CN","frontmatter":{"description":"其他 对象引用和裸指针 垃圾回收机制 无GC C/C++ Rust：无GC 有GC JavaScript：使用new创建对象，但不用担心释放内存，垃圾信息收集器会自动处理这件事。详细原理去查Mozilla文档 Qt C++：一定程度简化了C++的垃圾回收机制，如对象树机制：详情略、自主去查 Java：相比C++一定程度简化了垃圾回收机制 Python ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/02.%20%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%9D%E6%83%B3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"其他"}],["meta",{"property":"og:description","content":"其他 对象引用和裸指针 垃圾回收机制 无GC C/C++ Rust：无GC 有GC JavaScript：使用new创建对象，但不用担心释放内存，垃圾信息收集器会自动处理这件事。详细原理去查Mozilla文档 Qt C++：一定程度简化了C++的垃圾回收机制，如对象树机制：详情略、自主去查 Java：相比C++一定程度简化了垃圾回收机制 Python ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"其他\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"其他","slug":"其他","link":"#其他","children":[{"level":2,"title":"对象引用和裸指针","slug":"对象引用和裸指针","link":"#对象引用和裸指针","children":[]},{"level":2,"title":"垃圾回收机制","slug":"垃圾回收机制","link":"#垃圾回收机制","children":[]},{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.15,"words":646},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Different/04. 优化/02. 数据内存管理思想.md","autoDesc":true}');export{E as comp,h as data};
