import{_ as i,c as e,e as n,o as t}from"./app-7Hf1q1UN.js";const p={};function a(o,l){return t(),e("div",null,l[0]||(l[0]=[n('<h2 id="gpt4" tabindex="-1"><a class="header-anchor" href="#gpt4"><span>GPT4</span></a></h2><p>GPT4</p><hr><p>以这几种不同虽是不同领域，但都使用了虚拟化的技术为例：</p><ul><li>BIOS设置中的VT虚拟化选项</li><li>Windows子系统WSL（需要BIOS开虚拟化）</li><li>Java的JVM</li><li>前端WebAssembly的VM</li><li>Linux常规的Docket/K8s</li><li>eBPF的Linux内核虚拟机</li><li>(后来补充) <ul><li>DPDK（NFV的基石）</li><li>python的venv虚拟环境</li></ul></li></ul><p>说说为什么虚拟化/虚拟机技术变得越来越重要，能帮我们解决哪些痛点，为什么虚拟化后能够如此高性能地运行甚至能够相较于旧体系实现性能的优化？</p><hr><p>虚拟化技术是为了解决物理服务器资源利用不足、硬件资源分配不均、服务器管理复杂等问题而诞生的。虚拟化技术能够实现将物理服务器上的硬件资源虚拟化，从而创建出一系列虚拟机，并通过分配虚拟机资源的方式，使得不同的应用程序以及系统可以在同一台物理服务器上并行运行。虚拟化使得资源的利用更加高效，也能够更加灵活地部署应用，并且能够实现对于硬件资源的有效管理和调度。</p><p>在虚拟化技术发展的过程中，Virtual Machine Monitor（VMM）被用作一种有效的虚拟化技术。VMM通过在主机操作系统之上运行，在主机硬件和下层操作系统之间提供一个抽象层，使得不同的操作系统和应用程序以及主机操作系统能够共享同一套硬件资源，并且安全可靠。</p><p>虚拟化后能够如此高性能运行的原因：</p><ul><li>一方面是因为虚拟化技术的研究不断深入，使得虚拟机的性能得到了极大的提升</li><li>另一方面是因为硬件技术的发展，如Intel的VT虚拟化技术，使得虚拟化过程得到了更好的支持和加速</li></ul><p>因此，虚拟化技术不仅能够提高硬件资源的利用效率，还能够实现更好的性能优化，促进系统性能的提升。同时，还能够提高系统的可靠性，降低系统的故障率，加强系统的安全性。</p><hr><p>以我举的那几种例子，虽然都是虚拟化，但应该是有所区别的。进行本质的分类并比较</p><hr><p>好的。这几种虚拟化技术有着不同的本质和区别，可以从多个方面进行比较：</p><ul><li><p>应用场景区别</p><p>不同的虚拟化技术面向的应用场景、应用领域有所不同。</p><ul><li>JVM 是虚拟机的一种，用于执行 Java 程序</li><li>WSL 是 Windows 的子系统，可以在 Windows 中运行 Linux 程序</li><li>WebAssembly 是前端虚拟机，运行在浏览器中，主要用于在浏览器中运行高性能应用程序和游戏，减少性能损失</li><li>而 eBPF 是在 Linux 内核中运行的虚拟机，主要用于网络和系统性能的监控和管理</li><li>Docker/K8s 则是一种容器化技术，用于实现应用程序的部署和管理</li></ul></li><li><p>资源共享和分配方式</p><ul><li>在 JVM 中，Java 虚拟机本身就是一个独立的进程，每个 Java 程序都有自己独立的 Java 虚拟机。</li><li>在 WSL 中，Windows 和 Linux 的虚拟机是通过资源共享和分配的方式来实现在同一物理机上运行。</li><li>WebAssembly 虚拟机是直接运行在浏览器中的，通过降低性能损失来共享和分配浏览器的运行资源。</li><li>eBPF 内核虚拟机和容器化技术则是通过调度和控制硬件资源来进行共享和分配。</li></ul></li><li><p>软件体系结构</p><p>JVM、WSL、WebAssembly、eBPF 和容器化技术都有不同的软件体系结构，通过不同的方式来实现虚拟化和资源共享。</p><ul><li>JVM 的软件体系结构是基于 Java 虚拟机规范和类库，通过解释 Java 代码或 JIT 编译来实现虚拟化。</li><li>WSL 的软件体系结构是通过 Windows 和 Linux 的系统调用和文件系统的映射来实现。</li><li>WebAssembly 是通过 WebAssembly 标准来实现虚拟化。</li><li>eBPF 的软件体系结构是在 Linux 内核中运行，通过内核模块和用户态程序共同完成任务。</li><li>容器化技术的软件体系结构是基于容器引擎和镜像管理器，通过容器技术的模块化特性来实现虚拟化。</li></ul></li></ul><p>综上所述，这几种虚拟化技术具有不同的特点和应用场景，在实际应用中需要根据实际需求选取合适的虚拟化技术。</p><hr><p>进一步列举更多的虚拟化技术并进行聚合归类</p><hr><p>好的，我们进一步列举一些虚拟化技术，并按照其实现方式进行聚合归类：</p><p>虚拟化技术大致可以分为三类：全虚拟化（Full Virtualization）、半虚拟化（Para-Virtualization）和容器化虚拟化（Containerization Virtualization）</p><ul><li>全虚拟化 <ul><li>全虚拟化是指一个物理机上运行多个虚拟机，每个虚拟机具有自己的操作系统、硬件资源和应用程序等，由虚拟机监控程序（或称为虚拟机管理器、Hypervisor）控制虚拟化硬件资源的分配和管理。Typical examples include Xen, VMware, and Hyper-V。</li></ul></li><li>半虚拟化 <ul><li>指在虚拟机中运行的操作系统知道自己运行在虚拟环境中，它需要为虚拟机提供访问虚拟化硬件的接口，并且需要做出一定的修改，以更好地适应虚拟化硬件的资源分配和管理。</li></ul></li><li>容器化虚拟化 <ul><li>容器化虚拟化是一种将应用程序和其依赖性打包为容器，并在主机上隔离运行的技术</li></ul></li></ul><p>举例：</p><ol><li><p>基于完全虚拟化的虚拟化技术：</p><ul><li>VMware ESXi</li><li>Microsoft Hyper-V</li><li>Oracle VirtualBox</li><li>KVM（Kernel-based Virtual Machine） ，即是硬件辅助也是全虚拟化</li></ul></li><li><p>基于容器化的虚拟化技术:</p><ul><li>Docker</li><li>Kubernetes（简称 K8s）</li><li>OpenShift</li><li>LXC（Linux Containers）</li><li>rkt</li></ul></li><li><p>基于半虚拟化的虚拟化技术：</p><ul><li>Xen</li></ul></li><li><p>基于硬件辅助虚拟化的虚拟化技术：</p><ul><li>Intel VT-x</li><li>AMD-V</li><li>Hyper-V</li><li>KVM，即是硬件辅助也是全虚拟化</li></ul></li><li><p>基于操作系统虚拟化的虚拟化技术：</p><ul><li>WSL (Windows Subsystem for Linux)</li><li>Cygwin</li><li>Wine</li></ul></li><li><p>其他虚拟化技术</p><ul><li><p>JVM</p><ul><li>JVM 提供了一种独立于操作系统、硬件平台和编程语言的虚拟化环境，使得 Java 应用程序可以在不同的平台和环境中运行。</li></ul></li><li><p>eBPF</p><ul><li>基于 Linux 内核的虚拟机技术</li></ul></li><li><p>WASM （基于浏览器而非系统的虚拟机）</p><p>相比于其他虚拟化技术，WebAssembly 有以下不同点：</p><ul><li>运行环境不同： WebAssembly 运行在浏览器中，而其他虚拟化技术大多是运行在操作系统上的</li><li>安全性更高： WebAssembly 内置了一些安全机制，例如，它使用的是静态类型，这意味着它们与 C++ 之类的语言中的类型相似。这使执行 WebAssembly 代码更加安全，因为可以在编写时捕获问题，而不需要在运行时进行检查</li><li>更好的移植性：WebAssembly 的目标之一是为各种编程语言和平台提供一个标准的运行时环境。得益于其语言中立的二进制格式，WebAssembly 的代码可以在多种平台和浏览器环境中运行，无需重新编译或改变代码</li></ul></li><li><p>由于WASM和eBPF的特殊性质，在虚拟化技术的分类中可能不太合适与上述的几类进行归类，但它们在不同的领域中都具备着难以替代的应用价值。</p></li></ul></li></ol><p>从以上列举的虚拟化技术中可以看出，虚拟化技术在不同的领域都有着广泛的应用。其中：</p><ul><li>基于完全虚拟化的技术在虚拟化软件和虚拟机操作系统之间加入了Hypervisor层，使得VM更接近物理机。</li><li>基于容器化的虚拟化技术则<strong>依赖于操作系统本身的分离特性</strong>，允许运行在同一物理机上的应用程序在不同容器中共享操作系统内核。</li><li>基于硬件辅助虚拟化技术则是硬件辅助虚拟化技术，提高了虚拟化性能。</li><li>基于半虚拟化的虚拟化技术则是在不改变虚拟机内操作系统源码的情况下支持设备虚拟化。</li><li>基于操作系统虚拟化的技术则是通过操作系统提供<strong>隔离性和资源限制</strong>来控制不同应用的资源使用。</li></ul><p>不同的虚拟化技术按照其实现方式进行分类，让我们更加深入地了解其原理，为其在不同领域的应用提供更好的支持。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>（前面漏了NFV、前端框架虚拟DOM等技术）</p>',31)]))}const u=i(p,[["render",a],["__file","虚拟化技术.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF.html","title":"虚拟化技术","lang":"zh-CN","frontmatter":{"description":"GPT4 GPT4 以这几种不同虽是不同领域，但都使用了虚拟化的技术为例： BIOS设置中的VT虚拟化选项 Windows子系统WSL（需要BIOS开虚拟化） Java的JVM 前端WebAssembly的VM Linux常规的Docket/K8s eBPF的Linux内核虚拟机 (后来补充) DPDK（NFV的基石） python的venv虚拟环境 ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"GPT4 GPT4 以这几种不同虽是不同领域，但都使用了虚拟化的技术为例： BIOS设置中的VT虚拟化选项 Windows子系统WSL（需要BIOS开虚拟化） Java的JVM 前端WebAssembly的VM Linux常规的Docket/K8s eBPF的Linux内核虚拟机 (后来补充) DPDK（NFV的基石） python的venv虚拟环境 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"GPT4","slug":"gpt4","link":"#gpt4","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"readingTime":{"minutes":7.65,"words":2296},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/虚拟化技术/虚拟化技术.md","excerpt":"<h2>GPT4</h2>\\n<p>GPT4</p>\\n<hr>\\n<p>以这几种不同虽是不同领域，但都使用了虚拟化的技术为例：</p>\\n<ul>\\n<li>BIOS设置中的VT虚拟化选项</li>\\n<li>Windows子系统WSL（需要BIOS开虚拟化）</li>\\n<li>Java的JVM</li>\\n<li>前端WebAssembly的VM</li>\\n<li>Linux常规的Docket/K8s</li>\\n<li>eBPF的Linux内核虚拟机</li>\\n<li>(后来补充)\\n<ul>\\n<li>DPDK（NFV的基石）</li>\\n<li>python的venv虚拟环境</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/虚拟化技术/虚拟化技术.md","value":{"title":"虚拟化技术","path":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/虚拟化技术/虚拟化技术.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,r as data};
