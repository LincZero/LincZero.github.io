import{_ as s,c as t,e as a,o as l}from"./app-BDGujT_T.js";const n={};function h(e,i){return l(),t("div",null,i[0]||(i[0]=[a(`<h1 id="_03-字符类型" tabindex="-1"><a class="header-anchor" href="#_03-字符类型"><span>03. 字符类型</span></a></h1><h2 id="char" tabindex="-1"><a class="header-anchor" href="#char"><span>char</span></a></h2><p>参见整型</p><h2 id="复合类型-直接使用类-字符串" tabindex="-1"><a class="header-anchor" href="#复合类型-直接使用类-字符串"><span><strong>复合类型</strong> &gt; 直接使用类 &gt; 字符串</span></a></h2><p>其实也是一种特殊的容器类型</p><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><ul><li><p>原理：字符串的变量名本质上存储的是一个地址（存储形式为字符串）</p><p>当输出时，不输出地址，而是输出地址所表示的东西</p></li><li><p>原理的验证实验：</p></li></ul><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ac_dog4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		 		// 输出单个字符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ac_dog4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// 输出地址</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ac_dog4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 			// 输出地址</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hex </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ac_dog4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dec</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 输出地址</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ac_dog4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 					// 输出字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ac_dog4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 				// 输出字符串</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><blockquote><h4 id="字面量方式" tabindex="-1"><a class="header-anchor" href="#字面量方式"><span>字面量方式</span></a></h4></blockquote><ul><li><strong>C-风格字符串（<em>C-style string</em>）</strong><ul><li><strong>数组法</strong><ul><li>性质：以空字符<code>\\0</code>（<em>null character</em>，ASCII为0）结尾，可以不显性标注（会自动补\\0）</li><li>自动填补：数组是填补0，而字符串是填补<code>\\0</code></li><li>举例：<code>char ac_dog[] = {&#39;d&#39;, &#39;o&#39;, &#39;g&#39;, &#39;\\0&#39;};</code></li><li>如果不以空字符结尾：<code>cout</code>会一直输出知道遇到空字符为止（空字符在内存中很常见，这一个过程很快停止）</li><li>缺点：冗长乏味（使用大量单引号），且必须记住加空字符</li></ul></li><li><strong>字符串常量（<em>string constant</em>）或字符串字面值（<em>string literal</em>）</strong><ul><li>性质：以空字符<code>\\0</code>（<em>null character</em>，ASCII为0）结尾，可以不显性标注（字符串本来就隐式包括结尾的空字符）</li><li>自动填补：数组是填补0，而字符串是填补<code>\\0</code></li><li>举例：<code>char ac_dog[] = {&quot;dog&quot;}</code>=<code>char ac_dog[4] = {&quot;dog&quot;}</code>=<code>char ac_dog[4] = {&#39;d&#39;,&#39;o&#39;,&#39;g&#39;,&#39;\\0&#39;}</code></li><li>注意：通常要多预留一位给空字符串，上面几种写法是等价的==（把4改成3会报错，拿不准数量时最好是让程序自动填充长度）==</li></ul></li></ul></li><li><strong>基于string类库的方法</strong>：见后</li></ul><blockquote><h4 id="符号操作-与java不同" tabindex="-1"><a class="header-anchor" href="#符号操作-与java不同"><span>符号操作（与Java不同）</span></a></h4></blockquote><ul><li><strong>拼接字符串</strong>：用空白（空格、制表符、换行符）分隔的字符串常量会自动拼接成一个（Java中使用<code>+</code>号拼接） <ul><li>举例：<code>cout &lt;&lt; &quot;d&quot; &quot;og&quot;;</code></li></ul></li></ul><blockquote><h4 id="内置函数方法" tabindex="-1"><a class="header-anchor" href="#内置函数方法"><span>内置函数方法</span></a></h4></blockquote><ul><li><p><strong>计算长度</strong>：<code>strlen()</code>，计算数组中字符串的长度，到第一个空字符时停止且不计算后续内容的长度（<code>sizeof</code>则是整个数组的长度）</p><p>只能计算<code>char[]</code>类型，不能计算其他数组类型</p></li><li><p><strong>比较</strong>：<code>strcmp()</code>（不能使用<code>==</code>比较，因为会被解释为地址，但string类可以）</p><ul><li>若相同：返回零</li><li>若第一个字符串按字母顺序排在第二个字符串之前：返回负数</li><li>若第一个字符串按字母顺序排在第二个字符串之后：返回正数</li></ul></li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h2><h3 id="string类-简概-新-c-新增" tabindex="-1"><a class="header-anchor" href="#string类-简概-新-c-新增"><span>String类 - 简概（新）（C++新增）</span></a></h3><ul><li><p>头文件：C++的String类需要包含头文件<code>string</code>，string类位于名称空间<code>std</code>中</p></li><li><p>string类与字符数组区别：string类定义隐藏了字符串的数组性质，可以像处理普通变量那样处理字符串</p></li><li><p>本质：模板类 &amp; 动态数组（动态联结）</p></li></ul><h3 id="string类-使用-新-c-新增" tabindex="-1"><a class="header-anchor" href="#string类-使用-新-c-新增"><span>String类 - 使用（新）（C++新增）</span></a></h3><blockquote><h4 id="字面量方式-1" tabindex="-1"><a class="header-anchor" href="#字面量方式-1"><span>字面量方式</span></a></h4></blockquote><ul><li><p><strong>定义</strong></p><ul><li><p>支持C-风格字符串定义，<code>string str = &quot;dog&quot;;</code></p></li><li><p>可以使用cin来存储，<code>cin &gt;&gt; str;</code></p></li><li><p>可以使用列表初始化，<code>string str = {&quot;dog&quot;};</code></p></li><li><p>”其他形式的字符串字面量值“：略</p></li><li><p>其他定义方法</p><ul><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  					// s1 = &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> s2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  			// s2 = &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> s3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;K&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  			// s3 = &quot;KKKK&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">string</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> s4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;12345&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  		// s4 = &quot;234&quot;，即 &quot;12345&quot; 的从下标 1 开始，长度为 3 的子串</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><blockquote><h4 id="string对象和字符数组区别-优点" tabindex="-1"><a class="header-anchor" href="#string对象和字符数组区别-优点"><span>string对象和字符数组区别（优点）</span></a></h4></blockquote><ul><li><strong>声明</strong>：可以将string对象声明为简单变量，而不是数组</li><li><strong>赋值</strong>：可以直接将一个string对象赋值给另一个（而不能将一个数组赋值给另一个）</li><li><strong>拼接字符串</strong>：用<code>+</code>拼接，如<code>str = s1 + s2</code>（数组无该方法，只能依靠<code>cout</code>拼接）</li><li><strong>附加</strong>：可以使用<code>+=</code>附加，如<code>str += s1</code>（数组无该方法）</li></ul><h2 id="cstring" tabindex="-1"><a class="header-anchor" href="#cstring"><span>CString</span></a></h2><h3 id="cstring类-简概-旧" tabindex="-1"><a class="header-anchor" href="#cstring类-简概-旧"><span>cstring类 - 简概（旧）</span></a></h3><ul><li>头文件：在早期C++新增string类之前，可以使用C的string库<code>cstring</code>（以前的string.h），没有名称空间</li></ul><h3 id="cstring类-使用-旧" tabindex="-1"><a class="header-anchor" href="#cstring类-使用-旧"><span>cstring类 - 使用（旧）</span></a></h3><blockquote><h4 id="函数方法-cstring库" tabindex="-1"><a class="header-anchor" href="#函数方法-cstring库"><span>函数方法（<code>cstring</code>库）</span></a></h4></blockquote><ul><li><code>strcpy(charr1, charr2)</code>，可以将字符串<strong>拷贝</strong>到字符数组中</li><li><code>strncpy(charr1, charr2, len)</code>还可以指出目标数组最大允许长度的第三个参数</li><li><code>strcat(charr1, charr2)</code>，可以将字符串<strong>附加到</strong>字符数组<strong>结尾</strong></li><li><code>strncat(charr1, charr2, len)</code>还可以指出目标数组最大允许长度的第三个参数</li></ul>`,29)]))}const p=s(n,[["render",h],["__file","03. 字符类型.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html","title":"03. 字符类型","lang":"zh-CN","frontmatter":{"description":"03. 字符类型 char 参见整型 复合类型 > 直接使用类 > 字符串 其实也是一种特殊的容器类型 简概 原理：字符串的变量名本质上存储的是一个地址（存储形式为字符串） 当输出时，不输出地址，而是输出地址所表示的东西 原理的验证实验： 使用 字面量方式 C-风格字符串（C-style string） 数组法 性质：以空字符\\\\0（null chara...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03.%20%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"03. 字符类型"}],["meta",{"property":"og:description","content":"03. 字符类型 char 参见整型 复合类型 > 直接使用类 > 字符串 其实也是一种特殊的容器类型 简概 原理：字符串的变量名本质上存储的是一个地址（存储形式为字符串） 当输出时，不输出地址，而是输出地址所表示的东西 原理的验证实验： 使用 字面量方式 C-风格字符串（C-style string） 数组法 性质：以空字符\\\\0（null chara..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03. 字符类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"03. 字符类型","slug":"_03-字符类型","link":"#_03-字符类型","children":[{"level":2,"title":"char","slug":"char","link":"#char","children":[]},{"level":2,"title":"复合类型 > 直接使用类 > 字符串","slug":"复合类型-直接使用类-字符串","link":"#复合类型-直接使用类-字符串","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"String","slug":"string","link":"#string","children":[{"level":3,"title":"String类 - 简概（新）（C++新增）","slug":"string类-简概-新-c-新增","link":"#string类-简概-新-c-新增","children":[]},{"level":3,"title":"String类 - 使用（新）（C++新增）","slug":"string类-使用-新-c-新增","link":"#string类-使用-新-c-新增","children":[]}]},{"level":2,"title":"CString","slug":"cstring","link":"#cstring","children":[{"level":3,"title":"cstring类 - 简概（旧）","slug":"cstring类-简概-旧","link":"#cstring类-简概-旧","children":[]},{"level":3,"title":"cstring类 - 使用（旧）","slug":"cstring类-使用-旧","link":"#cstring类-使用-旧","children":[]}]}]}],"git":{},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/03. 字符类型.md","excerpt":"\\n<h2>char</h2>\\n<p>参见整型</p>\\n<h2><strong>复合类型</strong> &gt; 直接使用类 &gt; 字符串</h2>\\n<p>其实也是一种特殊的容器类型</p>\\n<h3>简概</h3>\\n<ul>\\n<li>\\n<p>原理：字符串的变量名本质上存储的是一个地址（存储形式为字符串）</p>\\n<p>当输出时，不输出地址，而是输出地址所表示的东西</p>\\n</li>\\n<li>\\n<p>原理的验证实验：</p>\\n</li>\\n</ul>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">cout </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> ac_dog4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t\\t \\t\\t// 输出单个字符</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\\"> &amp;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">ac_dog4 </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t\\t\\t\\t\\t// 输出地址</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\\"> &amp;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">ac_dog4 </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">+</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> &lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> \\t\\t\\t// 输出地址</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> hex </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> long</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\\">&amp;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">ac_dog4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">]) </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> dec</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">\\t// 输出地址</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ac_dog4 </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> \\t\\t\\t\\t\\t// 输出字符串</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#56B6C2\\"> &amp;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">ac_dog4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">&lt;&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">\\\\t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> \\t\\t\\t\\t// 输出字符串</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    &lt;&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> endl;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/03. 字符类型.md","value":{"title":"03. 字符类型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/02. 数据+算法/03. 字符类型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,r as data};
