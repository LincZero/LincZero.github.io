import{_ as s,c as a,e as l,o as n}from"./app-BgHc8lP1.js";const t={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="旧笔记" tabindex="-1"><a class="header-anchor" href="#旧笔记"><span>旧笔记</span></a></h1><h2 id="java-1" tabindex="-1"><a class="header-anchor" href="#java-1"><span>Java</span></a></h2><h3 id="特性与环境" tabindex="-1"><a class="header-anchor" href="#特性与环境"><span>特性与环境</span></a></h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h4><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称</p><p>由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p><p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p><ul><li><p>Java分为三个体系</p><ul><li>JavaSE （J2SE） （Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE （J2EE） （Java 2 Platform,Enterprise Edition，java平台企业版）</li><li>JavaME（J2ME）（Java 2 Platform Micro Edition，java平台微型版）</li></ul></li><li><p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 &quot;2&quot;</p><ul><li>J2EE 更名为 Java EE</li><li>J2SE 更名为Java SE</li><li>J2ME 更名为 Java ME</li></ul></li></ul><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><ul><li><p><strong>简单</strong></p></li><li><p>Java 语言的语法与 C 语言和 C++ 语言很接近</p></li><li><p>丢弃了 C++ 中很少使用的、很难理解的特性：如操作符重载、多继承、自动的强制类型转换</p></li><li><p>不使用指针，而是引用</p></li><li><p>提供了自动分配和回收内存空间，使得程序员不必为内存管理而担忧</p></li><li><p><strong>面向对象的</strong></p><ul><li><p>Java 语言提供类、接口和继承等面向对象的特性</p></li><li><p>为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为 implements）</p></li><li><p>全面支持动态绑定，而 C++语言只对虚函数使用动态绑定</p></li><li><p>总之，Java语言是一个纯的面向对象程序设计语言。</p></li></ul></li><li><p><strong>分布式</strong></p><ul><li>支持 Internet 应用的开发，在基本的 Java 应用编程接口中有一个网络应用编程接口（java net）</li><li>提供了用于网络应用编程的类库，包括 URL、URLConnection、Socket、ServerSocket 等</li><li>Java 的 RMI（远程方法激活）机制也是开发分布式应用的重要手段</li></ul></li><li><p><strong>健壮</strong></p><ul><li>Java 的强类型机制、异常处理、垃圾的自动收集等是 Java 程序健壮性的重要保证</li><li>对指针的丢弃是 Java 的明智选择。Java 的安全检查机制使得 Java 更具健壮性</li></ul></li><li><p><strong>安全</strong></p><ul><li>Java通常被用在网络环境中，为此，Java 提供了一个安全机制以防恶意代码的攻击</li><li>除了Java 语言具有的许多安全特性以外，Java 对通过网络下载的类具有一个安全防范机制（类 ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类 SecurityManager）让 Java 应用设置安全哨兵</li></ul></li><li><p><strong>体系结构中立</strong></p><ul><li>Java 程序（后缀为 java 的文件）在 Java 平台上被编译为体系结构中立的字节码格式（后缀为 class 的文件），然后可以在实现这个 Java 平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发</li></ul></li><li><p><strong>可移植</strong></p><ul><li>这种可移植性来源于体系结构中立性，另外，Java 还严格规定了各个基本数据类型的长度</li><li>Java 系统本身也具有很强的可移植性，Java 编译器是用 Java 实现的，Java 的运行环境是用 ANSI C 实现的</li></ul></li><li><p><strong>解释型</strong></p><ul><li>如前所述，Java 程序在 Java 平台上被编译为字节码格式，然后可以在实现这个 Java 平台的任何系统中运行</li><li>在运行时，Java 平台中的 Java 解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中</li></ul></li><li><p><strong>高性能</strong></p><ul><li>与那些解释型的高级脚本语言相比，Java 的确是高性能的。事实上，Java 的运行速度随着 JIT(Just-In-Time）编译器技术的发展越来越接近于 C++。</li></ul></li><li><p><strong>多线程</strong></p><ul><li>在 Java 语言中，线程是一种特殊的对象，它必须由 Thread 类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为 Thread(Runnable) 的构造子类将一个实现了 Runnable 接口的对象包装成一个线程，其二，从 Thread 类派生出子类并重写 run 方法，使用该子类创建的对象即为线程。值得注意的是 Thread 类已经实现了 Runnable 接口，因此，任何一个线程均有它的 run 方法，而 run 方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java 语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为 synchronized）。</li></ul></li><li><p><strong>动态</strong></p><ul><li>Java 语言的设计目标之一是适应于动态变化的环境</li><li>Java 程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。</li><li>另外，Java 中的类有一个运行时刻的表示，能进行运行时刻的类型检查</li></ul></li></ul><h4 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h4><p>window系统安装java</p><ul><li><p>下载JDK</p><p>首先我们需要下载java开发工具包JDK，下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html</p></li><li><p>配置环境变量</p><p>1.安装完成后，我的电脑 &gt; 属性 &gt; 高级系统设置 &gt; 高级选项卡，点击&quot;环境变量&quot;；</p></li><li><p>测试JDK是否安装成功</p><p>开始 &gt; 运行 &gt; cmd &gt; <code>java -version、java、javac</code>几个命令，出现以下信息，说明环境变量配置成功；</p></li><li><p>流行JAVA开发工具</p><ul><li>**Eclipse（推荐）😗*另一个免费开源的java IDE，下载地址： http://www.eclipse.org/downloads/packages/</li><li><strong>JetBrains</strong> 的 IDEA， 现在很多人开始使用了，功能很强大，下载地址：https://www.jetbrains.com/idea/download/</li><li><strong>Notepad++ :</strong> Notepad++ 是在微软视窗环境之下的一个免费的代码编辑器，下载地址：<a href="http://notepad-plus-plus.org/" target="_blank" rel="noopener noreferrer"> http://notepad-plus-plus.org/</a></li><li>**Netbeans:**开源免费的java IDE，下载地址： http://www.netbeans.org/index.html</li></ul></li></ul><h3 id="学习" tabindex="-1"><a class="header-anchor" href="#学习"><span>学习</span></a></h3><ul><li><a href="https://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程 - Java</a></li><li><a href="https://www.runoob.com/try/showjava.php?filename=HelloWorld" target="_blank" rel="noopener noreferrer">菜鸟教程 - Java 在线工具</a></li><li><a href="https://c.runoob.com/compile/11" target="_blank" rel="noopener noreferrer">菜鸟 - 在线工具（多语言）</a></li><li><a href="https://www.runoob.com/manual/jdk11api/index.html" target="_blank" rel="noopener noreferrer">JDK 11 在线中文手册</a></li><li><a href="https://www.runoob.com/manual/jdk1.6/" target="_blank" rel="noopener noreferrer">JDK 1.6 在线中文手册(旧版)</a></li></ul><h3 id="模块与导包" tabindex="-1"><a class="header-anchor" href="#模块与导包"><span>模块与导包</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.mycompany.mypackage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 包声明【位置】：被导的文件的顶部</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.mycompany.mypackage.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 包导入【位置】：要导入的文件的顶部</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //使用：直接&#39;类.方法&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型与方法-静态强类型" tabindex="-1"><a class="header-anchor" href="#类型与方法-静态强类型"><span>类型与方法 - 静态强类型</span></a></h3><h4 id="类型分类" tabindex="-1"><a class="header-anchor" href="#类型分类"><span>类型分类</span></a></h4><ul><li>常量</li><li>变量 <ul><li>按数据类型 <ul><li>内置数据类型、不可迭代型（8种）：<code>byte，short，int，long、float、double、boolean、char</code></li><li>引用数据类型、可迭代型（2种）：<code>对象、数组</code></li></ul></li><li>按类型区分 <ul><li><strong>局部变量</strong>：方法结束后，变量就会自动销毁</li><li><strong>类变量（静态变量）</strong>：定义在类中，方法体之外</li><li><strong>成员变量（非静态变量）</strong>：也定义在类中，方法体之外。但必须声明为 static 类型</li></ul></li></ul></li></ul><h4 id="变量声明" tabindex="-1"><a class="header-anchor" href="#变量声明"><span>变量声明</span></a></h4><table><thead><tr><th>类型</th><th>默认值</th><th>大小</th><th>变量声明<code>type identifier [ = value][, identifier [= value] ...] ;</code></th></tr></thead><tbody><tr><td>常量</td><td></td><td></td><td><code>final double PI = 3.14</code></td></tr><tr><td>byte</td><td>0</td><td>1B</td><td><code>byte i = 1</code></td></tr><tr><td>short</td><td>0</td><td>2B</td><td><code>short i = 1</code></td></tr><tr><td>int</td><td>0</td><td>4B</td><td><code>int i = 1</code></td></tr><tr><td>long</td><td>0L</td><td>8B</td><td><code>long i = 1L</code></td></tr><tr><td>float</td><td>0.0f</td><td>4B</td><td><code>float i = 1f</code></td></tr><tr><td>double</td><td>0.0d</td><td>8B</td><td><code>double i = 1F</code></td></tr><tr><td>boolean</td><td>false</td><td>1b</td><td><code>boolean i = true</code></td></tr><tr><td>char</td><td>&#39;u0000&#39;</td><td>2B-Unicode</td><td><code>char i = &#39;1&#39;</code></td></tr><tr><td>数组</td><td>null</td><td></td><td><code>int[] a = {1, 2, 3}</code> <code>int[] a = new int[4] </code> <code>String[] str = new String[] {&quot;12&quot;, &quot;23&quot;}</code></td></tr><tr><td>对象</td><td>null</td><td></td><td><code>Site site = new Site(&quot;Runoob&quot;)</code></td></tr><tr><td>(String)</td><td></td><td></td><td><code>String s = &quot;11&quot;</code>String 不属于Java语法的一部分，而是基于Java语法封装的一个类（首字母大写）</td></tr></tbody></table><h4 id="变量方法" tabindex="-1"><a class="header-anchor" href="#变量方法"><span>变量方法</span></a></h4><blockquote><h5 id="byte、short、int、long" tabindex="-1"><a class="header-anchor" href="#byte、short、int、long"><span>byte、short、int、long</span></a></h5></blockquote><ul><li>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示 当使用字面量的时候，前缀 0 表示 8 进制，而前缀 0x 代表 16 进制</li></ul><blockquote><h5 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h5></blockquote><ul><li>自动类型转换：byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double</li><li>强制类型转换：<code>(type)value type</code></li><li>隐含类型转换：定义 float 类型时必须在数字后面跟上F或者f</li></ul><h3 id="对象与类" tabindex="-1"><a class="header-anchor" href="#对象与类"><span>对象与类</span></a></h3><p>作为一种面向对象语言。支持以下基本概念：</p><blockquote><p>多态、继承、封装、抽象、类、对象、实例、方法、重载</p></blockquote><p>（用类创建对象）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Rectangle</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rect </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 实例化【位置】：入口函数或被调用函数内</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> rect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Square</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Square</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构造函数，注意：new Square(100) == new Rectangle(100)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(size, size)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 类定义【位置】：主类之下！</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 若加上private，就只能通过getWidth引用width了</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    Rectangle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构造函数。构造方法的名称必须与类同名，一个类可以有多个构造方法。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">width</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> width;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">height</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> height;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getWidth</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认为public修饰符</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">width</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类变量-静态变量-、成员变量-非静态变量" tabindex="-1"><a class="header-anchor" href="#类变量-静态变量-、成员变量-非静态变量"><span>类变量（静态变量）、成员变量（非静态变量）</span></a></h4><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><blockquote><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4></blockquote><ul><li><strong>大小写敏感</strong></li><li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><blockquote><h4 id="helloworld" tabindex="-1"><a class="header-anchor" href="#helloworld"><span>HelloWorld</span></a></h4></blockquote><p>HelloWorld.java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 类名需与文件名一致</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// String args[]与String[] args均可，但推荐后者防歧义</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shell</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> javac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HelloWorld.java</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# 将源文件编译为class字节码文件，编译无误则得到HelloWorld.class</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HelloWorld</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			# HelloWorld不要加.class</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制"><span>流程控制</span></a></h4></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ( False ) {}							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// while循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {} 					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// for循环</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {} 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// if条件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 							// 三目条件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">switch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (i){ 								</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// switch条件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    default:break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h4></blockquote><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foo</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 					// 调用【位置】：定义之上！入口函数或被调用函数内</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b){ 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 函数定义【位置】：调用之下！主类或其他类内</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特色" tabindex="-1"><a class="header-anchor" href="#特色"><span>特色</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 主类与入口方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 修饰符（也叫Field，函数与类共用，用于定义状态数据）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// private、protected、public</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// xsg是封装的基础</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="aide提示" tabindex="-1"><a class="header-anchor" href="#aide提示"><span>aide提示</span></a></h4></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">自动补全</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    无：函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    蓝：变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    红：方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    圆三角方块：对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">能根据报错自动导包</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Fix</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> &gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Add &#39;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">......</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyClass&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="专题——spring" tabindex="-1"><a class="header-anchor" href="#专题——spring"><span>专题——Spring</span></a></h1><h2 id="连环十问【转载】" tabindex="-1"><a class="header-anchor" href="#连环十问【转载】"><span>连环十问【转载】</span></a></h2><p>原链接：https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&amp;mid=2247496142&amp;idx=2&amp;sn=a1be7cb1bf7267dc04c357dde9806e8e</p><h3 id="说说spring里用了哪些设计模式" tabindex="-1"><a class="header-anchor" href="#说说spring里用了哪些设计模式"><span>说说Spring里用了哪些设计模式?</span></a></h3><p><code>单例模式</code>：Spring 中的 Bean 默认情况下都是单例的。无需多说。</p><p><code>工厂模式</code>：工厂模式主要是通过 BeanFactory 和 ApplicationContext 来生产 Bean 对象。</p><p><code>代理模式</code>：最常见的 AOP 的实现方式就是通过代理来实现，Spring主要是使用 JDK 动态代理和 CGLIB 代理。</p><p><code>模板方法模式</code>：主要是一些对数据库操作的类用到，比如 JdbcTemplate、JpaTemplate，因为查询数据库的建立连接、执行查询、关闭连接几个过程，非常适用于模板方法。</p><h3 id="_2、谈谈对ioc和aop的理解-实现原理是什么" tabindex="-1"><a class="header-anchor" href="#_2、谈谈对ioc和aop的理解-实现原理是什么"><span>2、谈谈对IOC和AOP的理解？实现原理是什么？</span></a></h3><p>IOC 叫做控制反转，指的是通过Spring来管理对象的创建、配置和生命周期，这样相当于把控制权交给了Spring，不需要人工来管理对象之间复杂的依赖关系，这样做的好处就是解耦。在Spring里面，主要提供了 BeanFactory 和 ApplicationContext 两种 IOC 容器，通过他们来实现对 Bean 的管理。</p><p>AOP 叫做面向切面编程，他是一个编程范式，目的就是提高代码的模块性。Srping AOP 基于动态代理的方式实现，如果是实现了接口的话就会使用 JDK 动态代理，反之则使用 CGLIB 代理，Spring中 AOP 的应用主要体现在 事务、日志、异常处理等方面，通过在代码的前后做一些增强处理，可以实现对业务逻辑的隔离，提高代码的模块化能力，同时也是解耦。Spring主要提供了 Aspect 切面、JoinPoint 连接点、PointCut 切入点、Advice 增强等实现方式。</p><h3 id="_3、jdk动态代理和cglib代理有什么区别" tabindex="-1"><a class="header-anchor" href="#_3、jdk动态代理和cglib代理有什么区别"><span>3、JDK动态代理和CGLIB代理有什么区别？</span></a></h3><p>JDK 动态代理主要是针对类实现了某个接口，AOP 则会使用 JDK 动态代理。他基于反射的机制实现，生成一个实现同样接口的一个代理类，然后通过重写方法的方式，实现对代码的增强。</p><p>而如果某个类没有实现接口，AOP 则会使用 CGLIB 代理。他的底层原理是基于 asm 第三方框架，通过修改字节码生成成成一个子类，然后重写父类的方法，实现对代码的增强。</p><h3 id="_4、spring-aop-和-aspectj-aop-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4、spring-aop-和-aspectj-aop-有什么区别"><span>4、Spring AOP 和 AspectJ AOP 有什么区别？</span></a></h3><p>Spring AOP 基于动态代理实现，属于运行时增强。</p><p>AspectJ 则属于编译时增强，主要有3种方式：</p><ol><li>编译时织入：指的是增强的代码和源代码我们都有，直接使用 AspectJ 编译器编译就行了，编译之后生成一个新的类，他也会作为一个正常的 Java 类装载到JVM。</li><li>编译后织入：指的是代码已经被编译成 class 文件或者已经打成 jar 包，这时候要增强的话，就是编译后织入，比如你依赖了第三方的类库，又想对他增强的话，就可以通过这种方式。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2OnmhLVnP2Wys2NkcUoQwQaq6FibWjXwtRgWFBxw0p42baia28SZ1RhibA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><ol><li>加载时织入：指的是在 JVM 加载类的时候进行织入。</li></ol><p>总结下来的话，就是 Spring AOP 只能在运行时织入，不需要单独编译，性能相比 AspectJ 编译织入的方式慢，而 AspectJ 只支持编译前后和类加载时织入，性能更好，功能更加强大。</p><h3 id="_5、factorybean-和-beanfactory有什么区别" tabindex="-1"><a class="header-anchor" href="#_5、factorybean-和-beanfactory有什么区别"><span>5、FactoryBean 和 BeanFactory有什么区别？</span></a></h3><p>BeanFactory 是 Bean 的工厂， ApplicationContext 的父类，IOC 容器的核心，负责生产和管理 Bean 对象。</p><p>FactoryBean 是 Bean，可以通过实现 FactoryBean 接口定制实例化 Bean 的逻辑，通过代理一个Bean对象，对方法前后做一些操作。</p><h3 id="_6、springbean的生命周期说说" tabindex="-1"><a class="header-anchor" href="#_6、springbean的生命周期说说"><span>6、SpringBean的生命周期说说？</span></a></h3><p>Spring Bean 生命周期简单概括为4个阶段：</p><ol><li><p>实例化，创建一个Bean对象</p></li><li><p>填充属性，为属性赋值</p></li><li><p>初始化</p></li><li><ul><li>如果实现了<code>xxxAware</code>接口，通过不同类型的Aware接口拿到Spring容器的资源</li><li>如果实现了BeanPostProcessor接口，则会回调该接口的<code>postProcessBeforeInitialzation</code>和<code>postProcessAfterInitialization</code>方法</li><li>如果配置了<code>init-method</code>方法，则会执行<code>init-method</code>配置的方法</li></ul></li><li><p>销毁</p></li><li><ul><li>容器关闭后，如果Bean实现了<code>DisposableBean</code>接口，则会回调该接口的<code>destroy</code>方法</li><li>如果配置了<code>destroy-method</code>方法，则会执行<code>destroy-method</code>配置的方法</li></ul></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AzW6WIZjiaXWE6LUS5J66vgqhicU60FNxIf0V0mv8QqssYniaFBoFibraw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><h3 id="_7-spring是怎么解决循环依赖的" tabindex="-1"><a class="header-anchor" href="#_7-spring是怎么解决循环依赖的"><span>7.Spring是怎么解决循环依赖的？</span></a></h3><p>首先，Spring 解决循环依赖有两个前提条件：</p><ol><li>不全是构造器方式的循环依赖</li><li>必须是单例</li></ol><p>基于上面的问题，我们知道Bean的生命周期，本质上解决循环依赖的问题就是三级缓存，通过三级缓存提前拿到未初始化的对象。</p><p>第一级缓存：用来保存实例化、初始化都完成的对象</p><p>第二级缓存：用来保存实例化完成，但是未初始化完成的对象</p><p>第三级缓存：用来保存一个对象工厂，提供一个匿名内部类，用于创建二级缓存中的对象</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AKQpf8yvnt5PXLsbCR8bLyMGRDEAslaMMl3AhGJq8bkMUNETTh5qpQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p>假设一个简单的循环依赖场景，A、B互相依赖。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2MNTicM1Yr2ZicnqkgNZky17S90C9icBc9yHzIowluMykeHibvhNsOTkia0Q/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p>A对象的创建过程：</p><ol><li>创建对象A，实例化的时候把A对象工厂放入三级缓存</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2ic0qR8shPvuk9mib9YEvBqtb4iasibz7Bk1pyZR2HbichnN4LVpK3Y1pMCA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><ol><li>A注入属性时，发现依赖B，转而去实例化B</li><li>同样创建对象B，注入属性时发现依赖A，一次从一级到三级缓存查询A，从三级缓存通过对象工厂拿到A，把A放入二级缓存，同时删除三级缓存中的A，此时，B已经实例化并且初始化完成，把B放入一级缓存。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AIXA8Ic8iaSIBst74uO1cib8wrbAfQpc3icONdicnK8yvialmlLJicUEuWXg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><ol><li>接着继续创建A，顺利从一级缓存拿到实例化且初始化完成的B对象，A对象创建也完成，删除二级缓存中的A，同时把A放入一级缓存</li><li>最后，一级缓存中保存着实例化、初始化都完成的A、B对象</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H24oPiaNGtpjbUhSxW4HNlPqMEFg10eaLU0V7gfrFmHJRv25pwic9XS7JQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p>因此，由于把实例化和初始化的流程分开了，所以如果都是用构造器的话，就没法分离这个操作，所以都是构造器的话就无法解决循环依赖的问题了。</p><h3 id="_8、为什么要三级缓存-二级不行吗" tabindex="-1"><a class="header-anchor" href="#_8、为什么要三级缓存-二级不行吗"><span>8、为什么要三级缓存？二级不行吗？</span></a></h3><p>不可以，主要是为了生成代理对象。</p><p>因为三级缓存中放的是生成具体对象的匿名内部类，他可以生成代理对象，也可以是普通的实例对象。</p><p>使用三级缓存主要是为了保证不管什么时候使用的都是一个对象。</p><p>假设只有二级缓存的情况，往二级缓存中放的显示一个普通的Bean对象，<code>BeanPostProcessor</code>去生成代理对象之后，覆盖掉二级缓存中的普通Bean对象，那么多线程环境下可能取到的对象就不一致了。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2tDZJooDFwPAn5JMKHpeLrLDtgkItbZtDpWf9cBVLXFWiaqSO2TYIrEQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><h3 id="_9、spring事务传播机制有哪些" tabindex="-1"><a class="header-anchor" href="#_9、spring事务传播机制有哪些"><span>9、Spring事务传播机制有哪些？</span></a></h3><ol><li><strong>PROPAGATION_REQUIRED</strong>：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，这也是通常我们的默认选择。</li><li><strong>PROPAGATION_REQUIRES_NEW</strong>：创建新事务，无论当前存不存在事务，都创建新事务。</li><li>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。</li><li>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。</li><li>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。‘</li></ol><h3 id="_10、最后-说说spring-boot启动流程吧" tabindex="-1"><a class="header-anchor" href="#_10、最后-说说spring-boot启动流程吧"><span>10、最后，说说Spring Boot启动流程吧？</span></a></h3><p>关于这个问题，之前专门写过一篇文章，可以参考：《<a href="http://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&amp;mid=2247492538&amp;idx=1&amp;sn=9e3237fb91188941ab78a71ae5383a8d&amp;chksm=fddd357ecaaabc685dd8e7eafa26a8afd2fb0d3086ee5f476ca76794e0aa0ee92b1f2997bbe0&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreferrer"><strong>你知道Spring Boot是怎么启动的吗？</strong></a>》。</p><p>这个流程，如果网上一搜，基本都是这张图了，我也不想再画一遍了。那其实主要的流程就几个大步骤：</p><ol><li>准备环境，根据不同的环境创建不同的Environment</li><li>准备、加载上下文，为不同的环境选择不同的Spring Context，然后加载资源，配置Bean</li><li>初始化，这个阶段刷新Spring Context，启动应用</li><li>最后结束流程</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2yht9fh2bYQ6zDibebR46AiaKz50jvicw2L6sXNz79CNrCbrpnibxw4QCJg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy"></p><p>图片来源于网络</p>`,114)]))}const r=s(t,[["render",e],["__file","99. 旧笔记.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/99.%20%E6%97%A7%E7%AC%94%E8%AE%B0.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 旧笔记 Java 特性与环境 简介 Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称 由 James Gosling和同事们共同研发，并在 1995 年正式推出。 后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Or...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/99.%20%E6%97%A7%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 旧笔记 Java 特性与环境 简介 Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称 由 James Gosling和同事们共同研发，并在 1995 年正式推出。 后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Or..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2OnmhLVnP2Wys2NkcUoQwQaq6FibWjXwtRgWFBxw0p42baia28SZ1RhibA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2OnmhLVnP2Wys2NkcUoQwQaq6FibWjXwtRgWFBxw0p42baia28SZ1RhibA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AzW6WIZjiaXWE6LUS5J66vgqhicU60FNxIf0V0mv8QqssYniaFBoFibraw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AKQpf8yvnt5PXLsbCR8bLyMGRDEAslaMMl3AhGJq8bkMUNETTh5qpQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2MNTicM1Yr2ZicnqkgNZky17S90C9icBc9yHzIowluMykeHibvhNsOTkia0Q/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2ic0qR8shPvuk9mib9YEvBqtb4iasibz7Bk1pyZR2HbichnN4LVpK3Y1pMCA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2AIXA8Ic8iaSIBst74uO1cib8wrbAfQpc3icONdicnK8yvialmlLJicUEuWXg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H24oPiaNGtpjbUhSxW4HNlPqMEFg10eaLU0V7gfrFmHJRv25pwic9XS7JQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2tDZJooDFwPAn5JMKHpeLrLDtgkItbZtDpWf9cBVLXFWiaqSO2TYIrEQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/ibBMVuDfkZUnmFsqZZ4gkrIRbV5o351H2yht9fh2bYQ6zDibebR46AiaKz50jvicw2L6sXNz79CNrCbrpnibxw4QCJg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"旧笔记","slug":"旧笔记","link":"#旧笔记","children":[{"level":2,"title":"Java","slug":"java-1","link":"#java-1","children":[{"level":3,"title":"特性与环境","slug":"特性与环境","link":"#特性与环境","children":[{"level":4,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":4,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":4,"title":"环境","slug":"环境","link":"#环境","children":[]}]},{"level":3,"title":"学习","slug":"学习","link":"#学习","children":[]},{"level":3,"title":"模块与导包","slug":"模块与导包","link":"#模块与导包","children":[]},{"level":3,"title":"类型与方法 - 静态强类型","slug":"类型与方法-静态强类型","link":"#类型与方法-静态强类型","children":[{"level":4,"title":"类型分类","slug":"类型分类","link":"#类型分类","children":[]},{"level":4,"title":"变量声明","slug":"变量声明","link":"#变量声明","children":[]},{"level":4,"title":"变量方法","slug":"变量方法","link":"#变量方法","children":[]}]},{"level":3,"title":"对象与类","slug":"对象与类","link":"#对象与类","children":[{"level":4,"title":"类变量（静态变量）、成员变量（非静态变量）","slug":"类变量-静态变量-、成员变量-非静态变量","link":"#类变量-静态变量-、成员变量-非静态变量","children":[]}]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"特色","slug":"特色","link":"#特色","children":[]}]}]},{"level":1,"title":"专题——Spring","slug":"专题——spring","link":"#专题——spring","children":[{"level":2,"title":"连环十问【转载】","slug":"连环十问【转载】","link":"#连环十问【转载】","children":[{"level":3,"title":"说说Spring里用了哪些设计模式?","slug":"说说spring里用了哪些设计模式","link":"#说说spring里用了哪些设计模式","children":[]},{"level":3,"title":"2、谈谈对IOC和AOP的理解？实现原理是什么？","slug":"_2、谈谈对ioc和aop的理解-实现原理是什么","link":"#_2、谈谈对ioc和aop的理解-实现原理是什么","children":[]},{"level":3,"title":"3、JDK动态代理和CGLIB代理有什么区别？","slug":"_3、jdk动态代理和cglib代理有什么区别","link":"#_3、jdk动态代理和cglib代理有什么区别","children":[]},{"level":3,"title":"4、Spring AOP 和 AspectJ AOP 有什么区别？","slug":"_4、spring-aop-和-aspectj-aop-有什么区别","link":"#_4、spring-aop-和-aspectj-aop-有什么区别","children":[]},{"level":3,"title":"5、FactoryBean 和 BeanFactory有什么区别？","slug":"_5、factorybean-和-beanfactory有什么区别","link":"#_5、factorybean-和-beanfactory有什么区别","children":[]},{"level":3,"title":"6、SpringBean的生命周期说说？","slug":"_6、springbean的生命周期说说","link":"#_6、springbean的生命周期说说","children":[]},{"level":3,"title":"7.Spring是怎么解决循环依赖的？","slug":"_7-spring是怎么解决循环依赖的","link":"#_7-spring是怎么解决循环依赖的","children":[]},{"level":3,"title":"8、为什么要三级缓存？二级不行吗？","slug":"_8、为什么要三级缓存-二级不行吗","link":"#_8、为什么要三级缓存-二级不行吗","children":[]},{"level":3,"title":"9、Spring事务传播机制有哪些？","slug":"_9、spring事务传播机制有哪些","link":"#_9、spring事务传播机制有哪些","children":[]},{"level":3,"title":"10、最后，说说Spring Boot启动流程吧？","slug":"_10、最后-说说spring-boot启动流程吧","link":"#_10、最后-说说spring-boot启动流程吧","children":[]}]}]}],"git":{},"readingTime":{"minutes":16.38,"words":4915},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/01. 编程语言/99. 旧笔记.md","excerpt":"\\n<h1>目录</h1>\\n<h1>旧笔记</h1>\\n<h2>Java</h2>\\n<h3>特性与环境</h3>\\n<h4>简介</h4>\\n<p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称</p>\\n<p>由  James Gosling和同事们共同研发，并在 1995 年正式推出。</p>\\n<p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p>\\n<ul>\\n<li>\\n<p>Java分为三个体系</p>\\n<ul>\\n<li>JavaSE  （J2SE） （Java2 Platform Standard Edition，java平台标准版）</li>\\n<li>JavaEE  （J2EE） （Java 2 Platform,Enterprise Edition，java平台企业版）</li>\\n<li>JavaME（J2ME）（Java 2 Platform Micro Edition，java平台微型版）</li>\\n</ul>\\n</li>\\n<li>\\n<p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 \\"2\\"</p>\\n<ul>\\n<li>J2EE 更名为 Java EE</li>\\n<li>J2SE 更名为Java SE</li>\\n<li>J2ME 更名为 Java ME</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/01. 编程语言/99. 旧笔记.md","value":{"title":"99. 旧笔记","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/01. 编程语言/99. 旧笔记.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,k as data};
