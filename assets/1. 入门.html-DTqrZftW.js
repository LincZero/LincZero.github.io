import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DcHgvwx3.js";const e={},p=t(`<h1 id="《python绝技-运用python成为顶级黑客》" tabindex="-1"><a class="header-anchor" href="#《python绝技-运用python成为顶级黑客》"><span>《Python绝技 运用Python成为顶级黑客》</span></a></h1><p>书评：</p><ul><li>可能是为了便于Linux使用，例子使用了Python2的语法（如<code>print</code>语句没有了括号），这导致了使用python3运行时可能会有点问题</li></ul><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h1><h2 id="安装python-nmap包" tabindex="-1"><a class="header-anchor" href="#安装python-nmap包"><span>安装python-nmap包</span></a></h2><p>Linux安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://xael.org/norman/python/python-nmap/pythonmap-0.2.4.tar.gz-On map.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xzf</span> nmap.tar.gz
<span class="token builtin class-name">cd</span> python-nmap-0.2.4
python setup.py <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用easy_install模块进行安装</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>easy_install python-nmap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装常用的库" tabindex="-1"><a class="header-anchor" href="#安装常用的库"><span>安装常用的库</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>easy <span class="token function">install</span> pyPdf python-nmap pygeoip mechanize BeautifulSoup4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="实战程序" tabindex="-1"><a class="header-anchor" href="#实战程序"><span>实战程序</span></a></h1><h2 id="unix口令破解器" tabindex="-1"><a class="header-anchor" href="#unix口令破解器"><span>UNIX口令破解器</span></a></h2><ul><li><p>知识点：<code>socket模块</code>、<code>crypt模块</code>、<code>hashlib模块</code></p></li><li><p>加密口令获得：（存入<code>passwords.txt</code>）</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> /etc/passwd
victim: HX9LLTdc/jiDE: <span class="token number">503</span>:100:Iama Victim:/home/victim:/bin/sh
root: DFNFxgW7C05fo: <span class="token number">504</span>:100: Markus Hess:/root:/bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>demo：</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> crypt  <span class="token comment"># 一种加密方式的模块（UNIX口令）</span>
<span class="token keyword">def</span> <span class="token function">testPass</span><span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 密码尝试函数</span>
    salt <span class="token operator">=</span> crypyPass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
    dictFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dictionary.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 字典</span>
    <span class="token keyword">for</span> word <span class="token keyword">in</span> dictFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        word <span class="token operator">=</span> word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
        cryptWord <span class="token operator">=</span> crypt<span class="token punctuation">.</span>crypt<span class="token punctuation">(</span>word<span class="token punctuation">,</span>salt<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cryptWord <span class="token operator">==</span> cryptPass<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">&quot;[+] Found Passeord: &quot;</span><span class="token operator">+</span>word<span class="token operator">+</span><span class="token string">&quot;\\n&quot;</span>
            <span class="token keyword">return</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 入口函数，</span>
    passFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;passwords.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 密码</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">&quot;:&quot;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
            user <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            cryptPass <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">&quot;[*] Crack Password For: &quot;</span><span class="token operator">+</span>user
            testPass<span class="token punctuation">(</span>cryptPass<span class="token punctuation">)</span>  <span class="token comment"># 调用函数</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>  <span class="token comment"># 入口函数模拟</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用与输出：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python crack.py
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Cracking Password For: victim
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found Password: egg
<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Cracking Password For: root
<span class="token punctuation">[</span>-<span class="token punctuation">]</span> Password Not Found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>补充：</li></ul><blockquote><p>在基于<code>*Nix</code>的现代操作系统中，/etc/shadow文件存储口令的hash，并能使用更多安全的hash算法</p><p>比如SHA-512 hash算法。<code>SHA-512</code>函数需要在<code>hashlib库</code>找到</p></blockquote><h2 id="zip文件口令破解机" tabindex="-1"><a class="header-anchor" href="#zip文件口令破解机"><span>Zip文件口令破解机</span></a></h2><ul><li>知识点：<code>zipfile模块</code>、<code>threading模块Thread类</code>、<code>optparse模块</code></li><li>使用：<code>help(&#39;zipfile&#39;)</code>查看用法</li><li>demo，模块基本用法（<code>unzip.py</code>）</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> zipfile
zFile <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>zipFile<span class="token punctuation">(</span><span class="token string">&#39;evil.zip&#39;</span><span class="token punctuation">)</span>
passFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dictionary.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>demo，Zip文件口令破解机（<code>zip-file-cracker.py</code>）</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> zipfile  <span class="token comment"># zip文件模块</span>
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread  <span class="token comment"># 多线程模块 </span>
<span class="token keyword">def</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试使用指定密码破解</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        zFile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>password<span class="token punctuation">)</span>
        <span class="token keyword">return</span> password
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    zFile <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">&#39;evil.zip&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 用字典作参构造对象实例</span>
    passFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dictionary.txt&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 打开字典</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>			<span class="token comment"># 并遍历字典</span>
        password <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39; 普通版本
        guess = extractFile(zFile, password)	# 尝试调用函数破解密码
        if guess:
            print &#39;[+] Password = &#39;+password+&#39;\\n&#39;
            exit(0)								# 退出程序
        &#39;&#39;&#39;</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39; 多线程版本 &#39;&#39;&#39;</span>
        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>extractFile<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建多线程实例</span>
        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>												<span class="token comment"># 运行多线程</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>demo，使用<code>optparse</code>进行口令保护的优化</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 使用：\`$ python unzip.py -f evil.zip -d dictionary.txt\`</span>
<span class="token keyword">import</span> zipfile
<span class="token keyword">import</span> optparse
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread
<span class="token keyword">def</span> <span class="token function">extractFile</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 尝试使用指定密码破解</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        zFile<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>pwd<span class="token operator">=</span>password<span class="token punctuation">)</span>
        <span class="token keyword">return</span> password
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 会生成一个参数解析器（option parser）类的实例</span>
    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">&quot;usage%prog &quot;</span><span class="token operator">+</span><span class="token string">&quot;-f &lt;zipfile&gt; -d &lt;dictionary&gt;&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置格式</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-f&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;zname&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify zip file&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 设置可选参数</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-d&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;dname&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify dictionary file&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>opetions<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment"># python的解压缩赋值写法</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>zname <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>dname <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>		<span class="token comment"># 检验参数是否正确</span>
        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage
        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        zname <span class="token operator">=</span> option<span class="token punctuation">.</span>zname
        dname <span class="token operator">=</span> option<span class="token punctuation">.</span>dname
    
    zFile <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>zname<span class="token punctuation">)</span>								<span class="token comment"># 用字典作参构造对象实例</span>
    passFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dname<span class="token punctuation">)</span>										<span class="token comment"># 打开字典</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> passFile<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>							<span class="token comment"># 并遍历字典</span>
        password <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39; 普通版本
        guess = extractFile(zFile, password)					# 尝试调用函数破解密码
        if guess:
            print &#39;[+] Password = &#39;+password+&#39;\\n&#39;
            exit(0)												# 退出程序
        &#39;&#39;&#39;</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39; 多线程版本 &#39;&#39;&#39;</span>
        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>extractFile<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>zFile<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建多线程实例</span>
        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>												<span class="token comment"># 运行多线程</span>
        
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="本书中用到的模块" tabindex="-1"><a class="header-anchor" href="#本书中用到的模块"><span>本书中用到的模块</span></a></h2><h3 id="内置模块-标准库模块-不用下载-不用显式导入" tabindex="-1"><a class="header-anchor" href="#内置模块-标准库模块-不用下载-不用显式导入"><span>内置模块 / 标准库模块（不用下载，不用显式导入）</span></a></h3><h4 id="【内置】string模块" tabindex="-1"><a class="header-anchor" href="#【内置】string模块"><span>【内置】string模块</span></a></h4><h4 id="【内置】文件输入-输出模块" tabindex="-1"><a class="header-anchor" href="#【内置】文件输入-输出模块"><span>【内置】文件输入/输出模块</span></a></h4><ul><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;vuln_banners.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自带模块-不用下载-要显式导入" tabindex="-1"><a class="header-anchor" href="#自带模块-不用下载-要显式导入"><span>自带模块（不用下载，要显式导入）</span></a></h3><h4 id="【标准】socket模块-网络模块" tabindex="-1"><a class="header-anchor" href="#【标准】socket模块-网络模块"><span>【标准】socket模块（网络模块）</span></a></h4><ul><li><p>官网参考文档：https://docs.python.org/zh-cn/3/library/socket.html</p></li><li><p>demo</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> socket
socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 		<span class="token comment"># 设置超时</span>
s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span> 				<span class="token comment"># 创建实例</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.95.148&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 	<span class="token comment"># 连接指定ip和端口</span>
ans <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> 					<span class="token comment"># 读取接下来1KB数据</span>
<span class="token keyword">print</span> ans 							<span class="token comment"># 打印</span>
<span class="token comment"># 200 FreeFloat Ftp Server (Version 1.00)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【标准】optparse-参数解析" tabindex="-1"><a class="header-anchor" href="#【标准】optparse-参数解析"><span>【标准】optparse（参数解析）</span></a></h4><ul><li>载入：<code>import optparse</code></li><li>作用：比sys模块的.argv参数更进一步。用于解析脚本标志和可选参数</li><li>demo：详见<code>Zip口令破解器demo</code></li></ul><h4 id="【标准】os模块" tabindex="-1"><a class="header-anchor" href="#【标准】os模块"><span>【标准】os模块</span></a></h4><ul><li>作用：提供了丰富的适用于各种操作系统的函数，可以交互的对象： <ul><li>操作系统环境、文件系统、用户数据、权限</li></ul></li><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token comment"># ...</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有该文件</span>
    <span class="token keyword">pass</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有权限访问该文件</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【标准】ordereddict类-有序字典" tabindex="-1"><a class="header-anchor" href="#【标准】ordereddict类-有序字典"><span>【标准】OrderedDict类（有序字典）</span></a></h4><ul><li>载入：<code>from collections import OrderedDict</code></li></ul><h4 id="【标准】threading的thread类" tabindex="-1"><a class="header-anchor" href="#【标准】threading的thread类"><span>【标准】threading的Thread类</span></a></h4><ul><li>载入：<code>from threading import Thread</code></li></ul><h4 id="【标准】time" tabindex="-1"><a class="header-anchor" href="#【标准】time"><span>【标准】time</span></a></h4><ul><li>载入：<code>import time</code></li><li>作用：主要提供<code>sleep</code></li></ul><h3 id="hack模块" tabindex="-1"><a class="header-anchor" href="#hack模块"><span>Hack模块</span></a></h3><h4 id="【标准】crypy-unix加密" tabindex="-1"><a class="header-anchor" href="#【标准】crypy-unix加密"><span>【标准】crypy（UNIX加密）</span></a></h4><ul><li>使用：详见第一个程序——UNIX加密</li></ul><h4 id="【标准】hashlib-sha-512函数等hash算法" tabindex="-1"><a class="header-anchor" href="#【标准】hashlib-sha-512函数等hash算法"><span>【标准】hashlib（SHA-512函数等hash算法）</span></a></h4><ul><li>使用：详见第一个程序——UNIX加密</li></ul><h4 id="【标准】zipfile" tabindex="-1"><a class="header-anchor" href="#【标准】zipfile"><span>【标准】zipfile</span></a></h4><ul><li>使用：详见第二个程序——Zip文件口令破解机</li></ul><h4 id="【第三方】namp" tabindex="-1"><a class="header-anchor" href="#【第三方】namp"><span>【第三方】namp</span></a></h4><ul><li><p>第三方模块地址：http://xael.org/norman/python/python-nmap/（手动下载地址）</p></li><li><p>载入：<code>easy_install python-nmap</code>，<code>import nmap</code></p></li><li><p>使用：详见端口扫描器demo（namp版本）</p></li><li><p>作用：提供多种类型的扫描，如Namp工具包提供的<code>ACK</code>、<code>RST</code>、<code>FIN</code>、<code>SYN-ACK</code>扫描等</p><ul><li><table><thead><tr><th>扫描类型</th><th>说明</th></tr></thead><tbody><tr><td><code>TCP SYN SCAN</code></td><td>半开放扫描。发送一个SYN包，启动一个TCP会话，并等待响应的数据包<br>若接收到reset包，则表示端口关闭。若接受到SYN/ACK包，则表示端口打开</td></tr><tr><td><code>TCP NULL SCAN</code></td><td>把TCP头中的所有标志都设为NULL<br>若接收到的是一个RST包，则表示端口关闭</td></tr><tr><td><code>TCP FIN SCAN</code></td><td>发送一个表示拆除一个活动的TCP连接的FIN包，让对方关闭连接<br>若接收到一个RST包，则表示相应端口关闭</td></tr><tr><td><code>TCP XMAS SCAN</code></td><td>发送PSH、DIN、URG和TCP标志位设为1的数据包<br>若接收到一个RST包，则表示相应端口关闭</td></tr></tbody></table></li></ul></li></ul><h4 id="【第三方】pexpect" tabindex="-1"><a class="header-anchor" href="#【第三方】pexpect"><span><s>【第三方】Pexpect</s></span></a></h4><ul><li>第三方模块地址：http://pexpect.sourceforge.net（手动下载地址）</li><li>作用：实现与程序交互、等待预期的屏幕输出，并根据此做出不同的响应</li></ul><h4 id="【第三方】pxssh-包含pexpect" tabindex="-1"><a class="header-anchor" href="#【第三方】pxssh-包含pexpect"><span>【第三方】Pxssh（包含Pexpect）</span></a></h4>`,63),o=[p];function i(l,c){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","1. 入门.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Hack/%E3%80%8APython%E7%BB%9D%E6%8A%80%20%E8%BF%90%E7%94%A8Python%E6%88%90%E4%B8%BA%E9%A1%B6%E7%BA%A7%E9%BB%91%E5%AE%A2%E3%80%8B/1.%20%E5%85%A5%E9%97%A8.html","title":"《Python绝技 运用Python成为顶级黑客》","lang":"zh-CN","frontmatter":{"description":"《Python绝技 运用Python成为顶级黑客》 书评： 可能是为了便于Linux使用，例子使用了Python2的语法（如print语句没有了括号），这导致了使用python3运行时可能会有点问题 目录 入门 安装python-nmap包 Linux安装 用easy_install模块进行安装 安装常用的库 实战程序 UNIX口令破解器 知识点：so...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Hack/%E3%80%8APython%E7%BB%9D%E6%8A%80%20%E8%BF%90%E7%94%A8Python%E6%88%90%E4%B8%BA%E9%A1%B6%E7%BA%A7%E9%BB%91%E5%AE%A2%E3%80%8B/1.%20%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《Python绝技 运用Python成为顶级黑客》"}],["meta",{"property":"og:description","content":"《Python绝技 运用Python成为顶级黑客》 书评： 可能是为了便于Linux使用，例子使用了Python2的语法（如print语句没有了括号），这导致了使用python3运行时可能会有点问题 目录 入门 安装python-nmap包 Linux安装 用easy_install模块进行安装 安装常用的库 实战程序 UNIX口令破解器 知识点：so..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《Python绝技 运用Python成为顶级黑客》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《Python绝技 运用Python成为顶级黑客》","slug":"《python绝技-运用python成为顶级黑客》","link":"#《python绝技-运用python成为顶级黑客》","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"入门","slug":"入门","link":"#入门","children":[{"level":2,"title":"安装python-nmap包","slug":"安装python-nmap包","link":"#安装python-nmap包","children":[]},{"level":2,"title":"安装常用的库","slug":"安装常用的库","link":"#安装常用的库","children":[]}]},{"level":1,"title":"实战程序","slug":"实战程序","link":"#实战程序","children":[{"level":2,"title":"UNIX口令破解器","slug":"unix口令破解器","link":"#unix口令破解器","children":[]},{"level":2,"title":"Zip文件口令破解机","slug":"zip文件口令破解机","link":"#zip文件口令破解机","children":[]}]},{"level":1,"title":"其他","slug":"其他","link":"#其他","children":[{"level":2,"title":"本书中用到的模块","slug":"本书中用到的模块","link":"#本书中用到的模块","children":[{"level":3,"title":"内置模块 / 标准库模块（不用下载，不用显式导入）","slug":"内置模块-标准库模块-不用下载-不用显式导入","link":"#内置模块-标准库模块-不用下载-不用显式导入","children":[{"level":4,"title":"【内置】string模块","slug":"【内置】string模块","link":"#【内置】string模块","children":[]},{"level":4,"title":"【内置】文件输入/输出模块","slug":"【内置】文件输入-输出模块","link":"#【内置】文件输入-输出模块","children":[]}]},{"level":3,"title":"自带模块（不用下载，要显式导入）","slug":"自带模块-不用下载-要显式导入","link":"#自带模块-不用下载-要显式导入","children":[{"level":4,"title":"【标准】socket模块（网络模块）","slug":"【标准】socket模块-网络模块","link":"#【标准】socket模块-网络模块","children":[]},{"level":4,"title":"【标准】optparse（参数解析）","slug":"【标准】optparse-参数解析","link":"#【标准】optparse-参数解析","children":[]},{"level":4,"title":"【标准】os模块","slug":"【标准】os模块","link":"#【标准】os模块","children":[]},{"level":4,"title":"【标准】OrderedDict类（有序字典）","slug":"【标准】ordereddict类-有序字典","link":"#【标准】ordereddict类-有序字典","children":[]},{"level":4,"title":"【标准】threading的Thread类","slug":"【标准】threading的thread类","link":"#【标准】threading的thread类","children":[]},{"level":4,"title":"【标准】time","slug":"【标准】time","link":"#【标准】time","children":[]}]},{"level":3,"title":"Hack模块","slug":"hack模块","link":"#hack模块","children":[{"level":4,"title":"【标准】crypy（UNIX加密）","slug":"【标准】crypy-unix加密","link":"#【标准】crypy-unix加密","children":[]},{"level":4,"title":"【标准】hashlib（SHA-512函数等hash算法）","slug":"【标准】hashlib-sha-512函数等hash算法","link":"#【标准】hashlib-sha-512函数等hash算法","children":[]},{"level":4,"title":"【标准】zipfile","slug":"【标准】zipfile","link":"#【标准】zipfile","children":[]},{"level":4,"title":"【第三方】namp","slug":"【第三方】namp","link":"#【第三方】namp","children":[]},{"level":4,"title":"【第三方】Pexpect","slug":"【第三方】pexpect","link":"#【第三方】pexpect","children":[]},{"level":4,"title":"【第三方】Pxssh（包含Pexpect）","slug":"【第三方】pxssh-包含pexpect","link":"#【第三方】pxssh-包含pexpect","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.83,"words":1450},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Hack/《Python绝技 运用Python成为顶级黑客》/1. 入门.md","excerpt":"\\n<p>书评：</p>\\n<ul>\\n<li>可能是为了便于Linux使用，例子使用了Python2的语法（如<code>print</code>语句没有了括号），这导致了使用python3运行时可能会有点问题</li>\\n</ul>\\n<h1>目录</h1>\\n<h1>入门</h1>\\n<h2>安装python-nmap包</h2>\\n<p>Linux安装</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">wget</span> http://xael.org/norman/python/python-nmap/pythonmap-0.2.4.tar.gz-On map.tar.gz\\n<span class=\\"token function\\">tar</span> <span class=\\"token parameter variable\\">-xzf</span> nmap.tar.gz\\n<span class=\\"token builtin class-name\\">cd</span> python-nmap-0.2.4\\npython setup.py <span class=\\"token function\\">install</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
