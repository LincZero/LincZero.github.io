import{_ as s,c as a,e as l,o as n}from"./app-CAfWfcmi.js";const e={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="类中函数" tabindex="-1"><a class="header-anchor" href="#类中函数"><span>类中函数</span></a></h1><p>补充：</p><p>Java的函数都在类中</p><p>这是<strong>纯面向对象</strong>语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。</p><h2 id="成员-方法访问控制" tabindex="-1"><a class="header-anchor" href="#成员-方法访问控制"><span>成员/方法访问控制</span></a></h2><h3 id="实例域的访问权限" tabindex="-1"><a class="header-anchor" href="#实例域的访问权限"><span>实例域的访问权限</span></a></h3><ul><li>公有 实例域：[省略]</li><li>私有 实例域：[省略]</li><li>final 实例域</li><li>static 静态域（静态实例域）</li><li>static final 静态常量</li></ul><h4 id="private-实例域-原则建议使用" tabindex="-1"><a class="header-anchor" href="#private-实例域-原则建议使用"><span>private 实例域（原则建议使用）</span></a></h4><p>原则</p><ul><li>强烈建议将实例域标记为privat。public标记实例域，但这是一种<strong>极为不提倡</strong>的做法。</li><li>public数据域允许程序中的任何方法对其进行读取和修改。这就<strong>完全破坏了封装</strong>。</li></ul><p>原因</p><ul><li>如果某成员是一个只读域 <ul><li>一旦在构造器中设置完毕，就没有任何一个办法可以对它进行修改，这样来确保该域不会受到外界的破坏。</li></ul></li><li>如果某成员不是只读域 <ul><li>如果它只能通过给定的方法修改，则一旦这个域值出现了错误，只要调试这个方法就可以了。</li><li>如果域是public的，则破坏这个域值的捣乱者有可能会出没在任何地方，不易调试。</li></ul></li></ul><p>注意</p><ul><li>注意不要编写返回引用可变对象的访问器方法。这近乎等同于将该可变对象的域标记为public</li><li>如果需要返回一个可变数据域的拷贝，就应该使用clone</li></ul><h4 id="public-实例域" tabindex="-1"><a class="header-anchor" href="#public-实例域"><span>public 实例域</span></a></h4><p>使用回public的场景</p><ul><li>为final实例域，本来就不可变</li></ul><h4 id="final-实例域" tabindex="-1"><a class="header-anchor" href="#final-实例域"><span>final 实例域</span></a></h4><ul><li>可以将实例域定义为final。构建对象时必须初始化这样的域。 也就是说，必须确保在每一个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够再对它进行修改</li><li>（final关键字还用于表示常量的定义）</li><li>final修饰符大都应用于基本（primitive）类型域，或不可变（immutable）类的域 （如果类中的每个方法都不会改变其对象，这种类就是不可变的类。例如，String类就是一个不可变的类）。 对于可变的类，使用final修饰符可能会对读者造成混乱。</li></ul><h4 id="static-静态域" tabindex="-1"><a class="header-anchor" href="#static-静态域"><span>static 静态域</span></a></h4><p>如果将域定义为static，每个类中只有一个这样的域。而每一个对象对于其他所有的实例域却都有自己的一份拷贝。</p><p>应用举例：类成员计数 / 实例id</p><p>&quot;static&quot;关键字的路径依赖问题：</p><blockquote><p>在绝大多数的面向对象程序设计语言中，静态域被称为<code>类域</code>。术语“static”只是沿用了C++的叫法，名字上并无实际意义。</p><ul><li>起初，C引入关键字static是为了表示退出一个块后依然存在的局部变量。此时术语“static”是有意义的：变量一直存在，当再次进入该块时仍然存在</li><li>随后，static在C中有了第二种含义，表示不能被其他文件访问的全局变量和函数。为了避免引入一个新的关键字，关键字static被重用了</li><li>最后，C++第三次重用了这个关键字，与前面赋予的含义完全不一样，这里将其解释为：属于类且不属于类对象的变量和函数。这个含义与Java相同</li></ul></blockquote><h4 id="static-final-静态常量" tabindex="-1"><a class="header-anchor" href="#static-final-静态常量"><span>static final 静态常量</span></a></h4><p>静态变量使用得比较少，但静态常量却使用得比较多</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Math</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PI </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3.14159265358979323846</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面曾经提到过，由于每个类对象都可以对公有域进行修改，所以，最好不要将域设计为public。然而，公有常量（即final域）却没问题。</p><h4 id="绕过static-final-不要这样写" tabindex="-1"><a class="header-anchor" href="#绕过static-final-不要这样写"><span><s>绕过static final（不要这样写）</s></span></a></h4><p>System.out</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> System</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PrintStream</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> out </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PrintStream</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// Error--out is final</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按理final不可被赋值。但发现有一个<code>setOut</code>方法，它可以将System.out设置为不同的流，修改了final变量的值</p><p>原因在于，setOut方法是一个本地方法，而不是用Java语言实现的。本地方法可以绕过Java语言的存取控制机制。这是一种特殊的方法，在自己编写程序时，不应该这样处理。</p><h3 id="类方法的访问权限" tabindex="-1"><a class="header-anchor" href="#类方法的访问权限"><span>类方法的访问权限</span></a></h3><ul><li>公有方法：略</li><li>私有方法：由于公有数据非常危险，所以应该将所有的数据域都设置为私有的 <ul><li>场景：</li><li>将一个计算代码划分成若干个独立的辅助方法。通常，这些辅助方法不应该成为公有接口的一部分，这是由于它们往往与当前的实现机制非常紧密</li><li>或者需要一个特别的协议以及一个特别的调用次序</li></ul></li></ul><p>4种访问权限</p><table><thead><tr><th>关键字/访问修饰符（access modifier）</th><th>访问权限-----------------------------------------------------------------------</th></tr></thead><tbody><tr><td>public</td><td>公有</td></tr><tr><td>private</td><td>私有</td></tr><tr><td>static</td><td>静态</td></tr></tbody></table><h4 id="static-静态方法" tabindex="-1"><a class="header-anchor" href="#static-静态方法"><span>static 静态方法</span></a></h4><p>静态方法是一种不能向对象实施操作的方法。可以认为静态方法是没有this参数的方法</p><p>但是，静态方法可以访问自身类中的静态域。</p><p>例如，Math类的pow方法就是一个静态方法。在运算时，不使用任何Math对象换句话说，没有隐式的参数</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x,a);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用场景</p><ul><li>方法不需要访问对象状态，因为它需要的所有参数都通过显式参数提供（例如Math.pow）</li><li>方法只需要访问类的静态字段（例如Employee.getNextId）</li></ul><p><mark>与C++不同</mark></p><blockquote><p>好像C++中只有static方法才能操作static成员，但Java中似乎没有此限制</p><p>Java中的静态域与静态方法在功能上与C++相同。但是，语法书写上却稍有所不同。</p><ul><li>Java：无需构造对象。使用<code>.</code>操作符直接访问，如<code>Math.pow</code></li><li>C++：无需构造对象。使用<code>::</code>操作符访问自身作用域之外的静态域和静态方法，如<code>Math::PI</code></li></ul></blockquote><h5 id="工厂方法-静态方法" tabindex="-1"><a class="header-anchor" href="#工厂方法-静态方法"><span>工厂方法（静态方法）</span></a></h5><p>工厂方法是静态方法</p><ul><li><p>作用</p><ul><li>可以在不构建对象和不使用构造器的前提下构造对象（构造器也是静态方法吧）</li></ul></li><li><p>举例</p><p>类似LocalDate和NumberFormat的类使用静态工厂方法（factory method）来构造对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NumberFormat</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> currencyFormatter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getCurrencyInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NumberFormat</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> percentFormatter </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> NumberFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPercentInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">currencyFormatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// prints $0.10</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Syste</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">percentFormatter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// prints 10%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>为什么NumberFormat类不利用构造器完成这些操作呢？这主要有两个原因：</p><ul><li>无法命名构造器。构造器的名字必须与类名相同。但是这里希望有两个不同的名字，分别得到货币实例和百分比实例</li><li>使用构造器时，无法改变所构造对象的类型。而工厂方法实际将返回DecimalFormat类的对象，这是NumberFormat的一个子类</li></ul><h5 id="main方法-静态方法" tabindex="-1"><a class="header-anchor" href="#main方法-静态方法"><span>main方法（静态方法）</span></a></h5><p>main方法也是静态方法</p><p>事实上，在启动程序时还没有任何一个对象。静态的main方法将执行并创建程序所需要的对象。</p><ul><li><p>作用</p><ul><li>每一个类可以有一个main方法。<strong>这是一个常用于对类进行单元测试的技巧</strong></li><li>作用有点类似于Python中的<code>if __name__==&#39;main&#39;:</code></li><li>或者也可以选择在同一文件下创建一个用于单元测试的类</li></ul></li><li><p>举例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Employee</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        Syste,.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// shell：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">java Employee		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果想要独立地测试Employee类，只要单独执行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">java Application	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果该类类是一个更大型应用程序的一部分，则不直接运行时其main方法永远不会执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="构造和析构函数" tabindex="-1"><a class="header-anchor" href="#构造和析构函数"><span>构造和析构函数</span></a></h2><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>构造器（constructor）构造新实例。构造器是一种特殊的方法，用来构造并初始化对象。</p><p>Java构造器的工作方式与C++一样。但是，要记住所有的<strong>Java对象都是在堆中构造的</strong>，构造器总是伴随着new操作符一起使用。</p><p>构造器与其他的方法有一个重要的不同。构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">james </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;James Bond&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1950</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">jame</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;James Bond&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1950</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// ERROR</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>不要在构造器中定义与实例域重名的局部变量</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // instance field</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> salary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Localdate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hireDay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // constructor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> month</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> day</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Error</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> salary</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Error</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法一-默认域初始化" tabindex="-1"><a class="header-anchor" href="#方法一-默认域初始化"><span>方法一：默认域初始化</span></a></h4><p>如果在构造器中没有显式地给域赋予初值，那么就会被自动地赋为默认值：数值为0、布尔值为false、对象引用为null</p><p>然而，只有缺少程序设计经验的人才会这样做。如果不明确地对域进行初始化，就会影响程序代码的可读性</p><p>与C++相似地：</p><p>仅当类没有提供任何构造器的时候，系统才会提供一个默认的构造器</p><h4 id="方法二-显式域初始化" tabindex="-1"><a class="header-anchor" href="#方法二-显式域初始化"><span>方法二：显式域初始化</span></a></h4><p>与C++相似地：</p><ul><li><p>Java：可以在执行构造器之前，先执行赋值操作</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C++：</p><p>C++11也可以进行<code>类内初始化</code>（C++前不能），也有功能相似的<code>成员初始化列表</code>（Java没有）</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Employee::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(String n, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        :</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n), </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">salary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s), </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hireDay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(y,m,d)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // ...    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="方法三-初始化块-initialization-block" tabindex="-1"><a class="header-anchor" href="#方法三-初始化块-initialization-block"><span>方法三：初始化块（initialization block）</span></a></h4><p>这种机制不是必需的，也不常见</p><p>无论使用哪个构造器构造对象，id域都在对象初始化块中被初始化</p><p>首先运行初始化块，然后才运行构造器的主体部分。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nextId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> salary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 初始化块 object initialization block</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nextId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        nextId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造器调用构造器" tabindex="-1"><a class="header-anchor" href="#构造器调用构造器"><span>构造器调用构造器</span></a></h4><p><mark>与C/C++不同</mark>：构造器调用构造器</p><ul><li>C++：一个构造器不能调用另一个构造器。在C++中，必须将抽取出的公共初始化代码编写成一个独立的方法</li><li>Java：可以，调用构造器的具体处理步骤如下 <ol><li>所有数据域被初始化为默认值（0、false或null）</li><li>按照在类声明中出现的次序，依次执行所有域初始化语句和初始化块</li><li>如果构造器第一行调用了第二个构造器，则执行第二个构造器主体</li><li>执行这个构造器的主体</li></ol></li></ul><h4 id="参数名命名习惯" tabindex="-1"><a class="header-anchor" href="#参数名命名习惯"><span>参数名命名习惯</span></a></h4><p><mark>与C/C++不同</mark>：成员函数参数命名习惯</p><ul><li><p>C++</p><ul><li>经常用下划线或某个固定的字母（一般选用m或x）作为实例域的前缀</li><li>例如，_salary、mSalary或xSalary</li></ul></li><li><p>Java</p><ul><li><p>程序员则喜欢在每个参数前面加上一个前缀“a”</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> aName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> aSalary)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> aName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> aSalary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="析构函数、finalize方法" tabindex="-1"><a class="header-anchor" href="#析构函数、finalize方法"><span>析构函数、finalize方法</span></a></h3><p><mark>与C/C++不同</mark>：析构函数</p><ul><li><p>C++：有显式的析构器方法：<code>~</code>+类名</p></li><li><p>Java：有自动的垃圾回收器，不需要人工回收内存，所以Java不支持析构器</p><p>当然，某些对象使用了内存之外的其他资源，例如，文件或使用了系统资源的另一个对象的句柄。在这种情况下，当资源不再需要时，将其回收和再利用将显得十分重要。</p><p>可以为任何一个类添加<code>finalize</code>方法。finalize方法将在垃圾回收器清除对象之前调用</p></li><li><p>补充</p><p>在实际应用中，<strong>不要依赖于使用finalize方法回收任何短缺的资源</strong>，这是因为很难知道这个方法什么时候才能够调用</p><p>如果某个资源需要在使用完毕后立刻被关闭，那么就需要由人工来管理。对象用完时，可以应用一个close方法来完成相应的清理操作</p></li></ul><h2 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数"><span>其他函数</span></a></h2><h3 id="更改器方法与访问器方法-c-中的const成员函数" tabindex="-1"><a class="header-anchor" href="#更改器方法与访问器方法-c-中的const成员函数"><span>更改器方法与访问器方法（C++中的const成员函数）</span></a></h3><p><mark>与C/C++不同</mark>：访问器方法和静态方法</p><ul><li>Java：只访问对象而不修改对象的方法有时称为<code>访问器方法</code>（accessor method） 例如：LocalDate.getYear和GregorianCalendar.get就是访问器方法。 在Java语言中，访问器方法与更改器方法在<strong>语法上没有明显的区别</strong></li><li>C++：带有const后缀的方法是访问器方法；默认为更改器方法。 但C++中似乎没有这种叫法，只是简单称为const成员函数</li></ul><h3 id="内联方法-虚拟机自动设置" tabindex="-1"><a class="header-anchor" href="#内联方法-虚拟机自动设置"><span>内联方法（虚拟机自动设置）</span></a></h3><p><mark>与C/C++不同</mark>：</p><ul><li>C++ <ul><li>通常在类的外面定义方法</li><li>如果在类的内部定义方法，这个方法将自动地成为内联（inline）方法。</li></ul></li><li>Java <ul><li>所有的方法都必须在类的内部定义</li><li>但并不表示它们是内联方法。是否将某个方法设置为内联方法是Java虚拟机的任务。 即时编译器会监视调用那些简洁、经常被调用、没有被重载以及可优化的方法。</li></ul></li></ul><h2 id="普通方法-java" tabindex="-1"><a class="header-anchor" href="#普通方法-java"><span>普通方法（Java）</span></a></h2><p>（该节指与类关系不大的方法，毕竟其他语言中的函数并不强制要求要在类中声明）</p><h3 id="方法参数" tabindex="-1"><a class="header-anchor" href="#方法参数"><span>方法参数</span></a></h3><p>“按……调用”（call by）是一个标准的计算机科学术语，它用来描述各种程序设计语言中方法参数的传递方式</p><ul><li>按值调用（call by value）表示方法接收的是调用者提供的值</li><li>按引用调用（call by reference）表示方法接收的是调用者提供的变量地址。</li></ul><p><mark>与C/C++不同</mark>：</p><ul><li><p>Java：程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝。方法不能修改传递给它的任何参数变量的内容</p><p>但注意的是：Java的对象实例本来就是对象的引用，按值引用后依然是对象的引用。可以通过对象方法修改对象实例所引用的对象</p></li><li><p>C++：可以自由选择按值调用（call by value）或按引用调用（call by reference）</p><p>例如：<code>void tripleValue(double&amp;x)</code>，一个方法是按值调用还是按引用调用需要看函数原型才能知道</p></li><li><p>不可单纯将Java的对象实例理解为C++的引用，而必须要看成指针</p><ul><li>比如：不能编写一个交换两个雇员对象的方法，因为交换的只是拷贝进方法中的两个对象实例的地址，而并不能改变外部的两个对象实例的地址</li></ul></li></ul><h3 id="方法重载" tabindex="-1"><a class="header-anchor" href="#方法重载"><span>方法重载</span></a></h3><ul><li><p>重载（overloading）</p><ul><li>如果多个方法（比如，StringBuilder构造器方法）有相同的名字、不同的参数，便产生了重载。</li></ul></li><li><p>重载解析（overloading resolution）</p><ul><li>编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。</li><li>如果编译器找不到匹配的参数，就会产生编译时错误，因为根本不存在匹配，或者没有一个比其他的更好。</li></ul></li><li><p>方法的签名（signature）</p><ul><li><p>要完整地描述一个方法，需要指出方法名以及参数类型。这叫做方法的签名</p></li><li><p><strong>返回类型不是方法签名的一部分</strong>。也就是说，不能有两个名字相同、参数类型也相同却返回不同类型值的方法</p></li><li><p>例如：String类有4个称为indexOf的公有方法，它们的签名是</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(String)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="隐式-implicit-参数与显式-explicit-参数" tabindex="-1"><a class="header-anchor" href="#隐式-implicit-参数与显式-explicit-参数"><span>隐式（implicit）参数与显式（explicit）参数</span></a></h3><p>在每一个方法中，关键字this表示隐式参数，是类实例的指针</p><p>在Java中不用this也能调用，但有些程序员更偏爱加this，因为这样可以将实例域与局部变量明显地区分开来</p>`,107)]))}const p=s(e,[["render",t],["__file","02. 类中函数.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/02.%20%E7%B1%BB%E7%9A%84%E5%86%85%E5%AE%B9/02.%20%E7%B1%BB%E4%B8%AD%E5%87%BD%E6%95%B0.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 类中函数 补充： Java的函数都在类中 这是纯面向对象语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。 成员/方法访问控制 实例域的访问权限 公有 实例域：[省略] 私有 实例域：[省略] final 实例域 static 静态域（静态实例域...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/02.%20%E7%B1%BB%E7%9A%84%E5%86%85%E5%AE%B9/02.%20%E7%B1%BB%E4%B8%AD%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 类中函数 补充： Java的函数都在类中 这是纯面向对象语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。 成员/方法访问控制 实例域的访问权限 公有 实例域：[省略] 私有 实例域：[省略] final 实例域 static 静态域（静态实例域..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"类中函数","slug":"类中函数","link":"#类中函数","children":[{"level":2,"title":"成员/方法访问控制","slug":"成员-方法访问控制","link":"#成员-方法访问控制","children":[{"level":3,"title":"实例域的访问权限","slug":"实例域的访问权限","link":"#实例域的访问权限","children":[{"level":4,"title":"private 实例域（原则建议使用）","slug":"private-实例域-原则建议使用","link":"#private-实例域-原则建议使用","children":[]},{"level":4,"title":"public 实例域","slug":"public-实例域","link":"#public-实例域","children":[]},{"level":4,"title":"final 实例域","slug":"final-实例域","link":"#final-实例域","children":[]},{"level":4,"title":"static 静态域","slug":"static-静态域","link":"#static-静态域","children":[]},{"level":4,"title":"static final 静态常量","slug":"static-final-静态常量","link":"#static-final-静态常量","children":[]},{"level":4,"title":"绕过static final（不要这样写）","slug":"绕过static-final-不要这样写","link":"#绕过static-final-不要这样写","children":[]}]},{"level":3,"title":"类方法的访问权限","slug":"类方法的访问权限","link":"#类方法的访问权限","children":[{"level":4,"title":"static 静态方法","slug":"static-静态方法","link":"#static-静态方法","children":[{"level":5,"title":"工厂方法（静态方法）","slug":"工厂方法-静态方法","link":"#工厂方法-静态方法","children":[]},{"level":5,"title":"main方法（静态方法）","slug":"main方法-静态方法","link":"#main方法-静态方法","children":[]}]}]}]},{"level":2,"title":"构造和析构函数","slug":"构造和析构函数","link":"#构造和析构函数","children":[{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":4,"title":"方法一：默认域初始化","slug":"方法一-默认域初始化","link":"#方法一-默认域初始化","children":[]},{"level":4,"title":"方法二：显式域初始化","slug":"方法二-显式域初始化","link":"#方法二-显式域初始化","children":[]},{"level":4,"title":"方法三：初始化块（initialization block）","slug":"方法三-初始化块-initialization-block","link":"#方法三-初始化块-initialization-block","children":[]},{"level":4,"title":"构造器调用构造器","slug":"构造器调用构造器","link":"#构造器调用构造器","children":[]},{"level":4,"title":"参数名命名习惯","slug":"参数名命名习惯","link":"#参数名命名习惯","children":[]}]},{"level":3,"title":"析构函数、finalize方法","slug":"析构函数、finalize方法","link":"#析构函数、finalize方法","children":[]}]},{"level":2,"title":"其他函数","slug":"其他函数","link":"#其他函数","children":[{"level":3,"title":"更改器方法与访问器方法（C++中的const成员函数）","slug":"更改器方法与访问器方法-c-中的const成员函数","link":"#更改器方法与访问器方法-c-中的const成员函数","children":[]},{"level":3,"title":"内联方法（虚拟机自动设置）","slug":"内联方法-虚拟机自动设置","link":"#内联方法-虚拟机自动设置","children":[]}]},{"level":2,"title":"普通方法（Java）","slug":"普通方法-java","link":"#普通方法-java","children":[{"level":3,"title":"方法参数","slug":"方法参数","link":"#方法参数","children":[]},{"level":3,"title":"方法重载","slug":"方法重载","link":"#方法重载","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"隐式（implicit）参数与显式（explicit）参数","slug":"隐式-implicit-参数与显式-explicit-参数","link":"#隐式-implicit-参数与显式-explicit-参数","children":[]}]}]}],"git":{},"readingTime":{"minutes":13.52,"words":4057},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/02. 类的内容/02. 类中函数.md","excerpt":"\\n<h1>目录</h1>\\n<h1>类中函数</h1>\\n<p>补充：</p>\\n<p>Java的函数都在类中</p>\\n<p>这是<strong>纯面向对象</strong>语言的通用标准，C#也是如此：\\n不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。\\n即便是主函数的main，也必须定义在某个类里面。</p>\\n<h2>成员/方法访问控制</h2>\\n<h3>实例域的访问权限</h3>\\n<ul>\\n<li>公有 实例域：[省略]</li>\\n<li>私有 实例域：[省略]</li>\\n<li>final 实例域</li>\\n<li>static 静态域（静态实例域）</li>\\n<li>static final 静态常量</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/02. 类的内容/02. 类中函数.md","value":{"title":"02. 类中函数","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/02. 类的内容/02. 类中函数.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
