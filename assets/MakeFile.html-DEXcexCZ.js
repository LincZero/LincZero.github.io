import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as p,a,b as n,d as l,e}from"./app-HRMkW8Cz.js";const o={},u=e('<h1 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>MakeFile</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="比较-make、cmake、qmake、nmake" tabindex="-1"><a class="header-anchor" href="#比较-make、cmake、qmake、nmake"><span>比较 make、cmake、qmake、nmake</span></a></h1><h2 id="makefile-1" tabindex="-1"><a class="header-anchor" href="#makefile-1"><span>makefile</span></a></h2><ul><li>其他语言关联编译的方法（与C/C++不同） <ul><li>如果熟悉UNIX的 “<strong>make</strong>”工具（或者是Windows中的“<strong>nmake</strong>”等工具），可以认为<strong>Java编译器内置了“make”功能</strong></li><li>C++一般是使用makefile，即<strong>qmake</strong> (QT) 或 <strong>cmake</strong> (通用) 来辅助编译</li></ul></li><li>详细过程 <ul><li>没有显式地编译Employee.java。然而，当Java编译器发现EmployeeTest.java使用了Employee类时会查找名为Employee.class的文件</li><li>如果没有找到这个文件，就会自动地搜索Employee.java，然后，对它进行编译</li></ul></li></ul><h2 id="qmake-vs-cmake" tabindex="-1"><a class="header-anchor" href="#qmake-vs-cmake"><span>qmake vs cmake</span></a></h2>',6),d=a("li",null,"cmake获取：http://www.cmake.org",-1),r=a("li",null,[n("选用比较 "),a("ul",null,[a("li",null,"qmake 是为 Qt 量身打造的，使用起来非常方便"),a("li",null,"cmake 使用上不如qmake简单直接，但复杂换来的是强大的功能")])],-1),k={href:"http://developer.qt.nokia.com/quarterly/view/using_cmake_to_build_qt_projects",target:"_blank",rel:"noopener noreferrer"},m=a("li",null,"对简单的Qt工程，采用 qmake",-1),v=a("li",null,"对复杂度超过 qmake 处理能力的，采用 cmake",-1),E=a("li",null,[n("项目区别 "),a("ul",null,[a("li",null,"需要创建一个CMakeLists.txt文件，该文件很像是一个qmake.pro文件")])],-1),h=e('<h1 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake"><span>CMake</span></a></h1><h2 id="介绍与准备" tabindex="-1"><a class="header-anchor" href="#介绍与准备"><span>介绍与准备</span></a></h2><h3 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h3>',3),_=a("li",null,[a("p",null,"官网：https://cmake.org/")],-1),b=a("li",null,[a("p",null,"官网文档（有点丑）：https://cmake.org/documentation/")],-1),g=a("li",null,[a("p",null,"官网教程（有点丑）：https://cmake.org/cmake/help/latest/guide/tutorial/index.html")],-1),C=a("li",null,[a("p",null,".")],-1),R={href:"https://www.bilibili.com/video/BV1rR4y1E7n9",target:"_blank",rel:"noopener noreferrer"},A=a("li",null,[a("p",null,"0")],-1),f=e(`<h3 id="ide的构建系统" tabindex="-1"><a class="header-anchor" href="#ide的构建系统"><span>IDE的构建系统</span></a></h3><p>平时使用的IDE大多都内置了构建系统，只是我们可能没有留意罢了。 他们都各有擅长的领域</p><ul><li>.| GUN Make</li><li>.| Apache Ant</li><li>(万用)| Bazel| 能完成不同语言在不同环境的构建</li><li>(万用)| Buck| 能完成不同语言在不同环境的构建</li><li>C/C++较常用| CMake</li><li>Android| Gradle</li><li>.| Maven</li><li>VS| MSBuild</li><li>Qt| QMake</li></ul><h3 id="安装cmake" tabindex="-1"><a class="header-anchor" href="#安装cmake"><span>安装CMake</span></a></h3><ul><li>官网</li><li>操作系统自带的包管理工具（例如Linux的yum，winget的choco）</li><li>其他包管理工具，笔者使用的是 cygwin</li></ul><p>安装后cmd看一下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装编译工具" tabindex="-1"><a class="header-anchor" href="#安装编译工具"><span>安装编译工具</span></a></h3><p>CMake 自身不带编译工具，要另外下clang、gcc、g++这些</p><p>然后需要指定工具链</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>VSCode 为例</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>原理：编写CMakeList.txt，该文件可以用来自动生成各目标平台下的工程文件。该过程在CMake中叫 <code>配置（Configure）</code></p><p>例如：</p><ul><li>VS| *.sln</li><li>Makefile</li><li>*.xcodeproj</li><li>...</li></ul><p>配置方法：</p><p>项目根目录下创建 CMakeLists.txt</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>cmake_minimum_required<span class="token punctuation">(</span>VERSION 3.10<span class="token punctuation">)</span>	<span class="token comment"># 指定所需最低的CMake版本</span>

project<span class="token punctuation">(</span>Example<span class="token punctuation">)</span>						<span class="token comment"># 工程名，输入的可执行文件同该名称</span>

add_executable<span class="token punctuation">(</span>Example main.cpp<span class="token punctuation">)</span>		<span class="token comment"># 构建一个可执行文件，并指定源文件（这里只编译单个文件）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VSCode打开项目时会自动提示你进行项目 “配置”</p><p>VSCode命令：<code>Select a Kit for cmake</code>，选择一个平台原生的C++构建工具然后等配置即可</p><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><p>F7，或VSCode命令：<code>cmake build</code></p><h2 id="使用-较复杂的例子" tabindex="-1"><a class="header-anchor" href="#使用-较复杂的例子"><span>使用 - 较复杂的例子</span></a></h2><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>cmake_minimum_required<span class="token punctuation">(</span>VERSION 2.7<span class="token punctuation">)</span>		<span class="token comment"># 指定所需最低的CMake版本</span>

project<span class="token punctuation">(</span>Blackhole<span class="token punctuation">)</span>						<span class="token comment"># 工程名，输入的可执行文件同该名称</span>

<span class="token comment"># 寻找第三方库</span>
find_package<span class="token punctuation">(</span>imgui REQUIRED<span class="token punctuation">)</span>
find_package<span class="token punctuation">(</span>glfw3 REQUIRED<span class="token punctuation">)</span>
find_package<span class="token punctuation">(</span>GLEW REQUIRED<span class="token punctuation">)</span>
find_package<span class="token punctuation">(</span>glm REQUIRED<span class="token punctuation">)</span>

<span class="token comment"># 匹配所有的源文件，存放于变量 SRC_FILES 中</span>
file<span class="token punctuation">(</span>GLOB SRC_FILES
	<span class="token string">&quot;\${PROJECT_SOURCE_DIR}/src/*.h&quot;</span>,
    <span class="token string">&quot;\${PROJECT_SOURCE_DIR}/src/*.cpp&quot;</span>,
    <span class="token string">&quot;\${PROJECT_SOURCE_DIR}/src/*.c&quot;</span>,
    <span class="token string">&quot;\${PROJECT_SOURCE_DIR}/src/*.cc&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 构建可执行文件，用之前匹配到的源文件来构建</span>
add_executable<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_PROJECT_NAME<span class="token punctuation">}</span> <span class="token variable">$</span><span class="token punctuation">{</span>SRC_FILES<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 第三方库</span>
<span class="token target symbol">target_link_libraries(<span class="token variable">$</span>{CMAKE_PROJECT_NAME} PRIVATE imgui</span><span class="token punctuation">:</span><span class="token punctuation">:</span>imgui<span class="token punctuation">)</span>
target_link_libraries<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_PROJECT_NAME<span class="token punctuation">}</span> PRIVATE glfw<span class="token punctuation">)</span>
<span class="token target symbol">target_link_libraries(<span class="token variable">$</span>{CMAKE_PROJECT_NAME} PRIVATE GLEW</span><span class="token punctuation">:</span><span class="token punctuation">:</span>GLEW<span class="token punctuation">)</span>
target_link_libraries<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_PROJECT_NAME<span class="token punctuation">}</span> PRIVATE glm<span class="token punctuation">)</span>

<span class="token comment"># 支持C++17</span>
target_compile_features<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_PROJECT_NAME<span class="token punctuation">}</span> PRIVATE cxx_std_17<span class="token punctuation">)</span>

add_custom_command<span class="token punctuation">(</span>
	TARGET <span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_PROJECT_NAME<span class="token punctuation">}</span>
	POST_BUILD							<span class="token comment"># 构建以后要做的事，这里将 &lt;项目根目录&gt;/assets 拷贝到 &lt;项目根目录&gt;/build/Debug/assets</span>
	COMMAND <span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_COMMAND<span class="token punctuation">}</span> -E copy_directory
			<span class="token string">&quot;\${PROJECT_SOUREC_DIR}/assets&quot;</span>
			<span class="token string">&quot;$&lt;TARGET_FILE_DIR:\${CMAKE_PROJECT_NAME}&gt;/assets&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三方库的安装" tabindex="-1"><a class="header-anchor" href="#第三方库的安装"><span>第三方库的安装</span></a></h2><p>常见的安装方式</p><ol><li><p>手动下载库的源文件。 然后手动构建并指定CMake库的路径，<code>cd glfw</code>+<code>cmake -S . -B build</code></p></li><li><p>对于Linux和Mac，可以使用包管理工具安装 例如 <code>sudo apt-get install libpng-dev</code></p><p>另外推荐：微软的开源工具：<strong>vcpkg</strong>（用于在Windows、Linux、MacOS上管理C和C++库）</p></li></ol><h2 id="一些其他常用的指令" tabindex="-1"><a class="header-anchor" href="#一些其他常用的指令"><span>一些其他常用的指令</span></a></h2><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>aux_source_directory<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_CURRENT_SOURCE_DIR<span class="token punctuation">}</span> DIR_SRCS<span class="token punctuation">)</span>
aux_source_directory<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_CURRENT_SOURCE_DIR<span class="token punctuation">}</span>/core/src DIR_CORE<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用于在指定的目录中查找所有的源文件，并将文件名列表存储在变量中</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_CORE<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_UTILS<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_ZIP<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_IXWS<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_ICMP<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_UDP<span class="token punctuation">}</span><span class="token punctuation">)</span>
list<span class="token punctuation">(</span>APPEND DIR_SRCS <span class="token variable">$</span><span class="token punctuation">{</span>DIR_TRACEROUTE<span class="token punctuation">}</span><span class="token punctuation">)</span>
add_executable<span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">{</span>PROJECT_NAME<span class="token punctuation">}</span> <span class="token variable">$</span><span class="token punctuation">{</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个CMake命令，用于向一个列表变量中追加元素</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>CMAKE_SOURCE_DIR <span class="token comment"># 源代码树的顶层目录，即包含顶层CMakeLists.txt文件的目录。</span>
CMAKE_CURRENT_SOURCE_DIR <span class="token comment"># 当前处理的CMakeLists.txt文件所在的目录。（用得最多的）</span>
CMAKE_BINARY_DIR <span class="token comment"># 构建树的顶层目录，即运行cmake命令的目录。</span>
CMAKE_CURRENT_BINARY_DIR <span class="token comment"># 当前处理的CMakeLists.txt文件对应的构建目录。</span>
PROJECT_SOURCE_DIR <span class="token comment"># 当前项目的源代码树的顶层目录，即包含project命令的CMakeLists.txt文件所在的目录。</span>
projectName_SOURCE_DIR <span class="token comment"># 指定项目名（projectName）的源代码树的顶层目录。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些路径的宏，这里还有更多：https://johnnado.com/cmake-directory-variables/</p>`,35);function M(I,D){const s=i("ExternalLinkIcon");return c(),p("div",null,[u,a("ul",null,[d,r,a("li",null,[n("如何选择？ "),a("ul",null,[a("li",null,[a("a",k,[n("Using CMake to Build Qt Projects"),l(s)]),n(" 一文中说：")]),m,v])]),E]),h,a("ul",null,[_,b,g,C,a("li",null,[a("p",null,[a("a",R,[n("【B站】软件构建: CMake 快速入门"),l(s)])])]),A]),f])}const B=t(o,[["render",M],["__file","MakeFile.html.vue"]]),P=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/02.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/MakeFile.html","title":"MakeFile","lang":"zh-CN","frontmatter":{"description":"MakeFile 目录 比较 make、cmake、qmake、nmake makefile 其他语言关联编译的方法（与C/C++不同） 如果熟悉UNIX的 “make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++一般是使用makefile，即qmake (QT) 或 cmake (通用) ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/02.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/MakeFile.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MakeFile"}],["meta",{"property":"og:description","content":"MakeFile 目录 比较 make、cmake、qmake、nmake makefile 其他语言关联编译的方法（与C/C++不同） 如果熟悉UNIX的 “make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++一般是使用makefile，即qmake (QT) 或 cmake (通用) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MakeFile\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"MakeFile","slug":"makefile","link":"#makefile","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"比较 make、cmake、qmake、nmake","slug":"比较-make、cmake、qmake、nmake","link":"#比较-make、cmake、qmake、nmake","children":[{"level":2,"title":"makefile","slug":"makefile-1","link":"#makefile-1","children":[]},{"level":2,"title":"qmake vs cmake","slug":"qmake-vs-cmake","link":"#qmake-vs-cmake","children":[]}]},{"level":1,"title":"CMake","slug":"cmake","link":"#cmake","children":[{"level":2,"title":"介绍与准备","slug":"介绍与准备","link":"#介绍与准备","children":[{"level":3,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":3,"title":"IDE的构建系统","slug":"ide的构建系统","link":"#ide的构建系统","children":[]},{"level":3,"title":"安装CMake","slug":"安装cmake","link":"#安装cmake","children":[]},{"level":3,"title":"安装编译工具","slug":"安装编译工具","link":"#安装编译工具","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]}]},{"level":2,"title":"使用 - 较复杂的例子","slug":"使用-较复杂的例子","link":"#使用-较复杂的例子","children":[]},{"level":2,"title":"第三方库的安装","slug":"第三方库的安装","link":"#第三方库的安装","children":[]},{"level":2,"title":"一些其他常用的指令","slug":"一些其他常用的指令","link":"#一些其他常用的指令","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.91,"words":1173},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/02. 多文件多目录管理/辅助文件/MakeFile.md","autoDesc":true}');export{B as comp,P as data};
