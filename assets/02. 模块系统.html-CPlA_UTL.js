import{_ as s,c as a,e as l,o as e}from"./app-_6RECMRt.js";const t={};function n(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统"><span>模块系统</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="在线api文档" tabindex="-1"><a class="header-anchor" href="#在线api文档"><span>在线API文档</span></a></h3><p>String类包含许多方法。而且，在标准库中有几千个类，方法数量更加惊人。</p><p>要想记住所有的类和方法是一件不太不可能的事情。因此，学会使用在线API文档十分重要，从中可以查阅到标准类库中的所有类和方法。</p><p>API文档是JDK的一部分，它是HTML格式的。让浏览器指向安装JDK的docs/api/index.html子目录</p><ul><li><a href="https://docs.oracle.com/javase/8/docs/api" target="_blank" rel="noopener noreferrer">Oracle_Java_官网API文档</a><ul><li>使用方法：API文档的三个窗格</li><li>左上方显示了可使用的所有包，选择后对左下方的类进行一个筛选</li><li>左下方显示了所有类，选择后右侧的文档进行该类的文档显示</li><li>右侧显示选择类的文档，再点击里面的方法可以看到更详细的信息</li></ul></li></ul><h3 id="包系统" tabindex="-1"><a class="header-anchor" href="#包系统"><span>包系统</span></a></h3><p>与Python的包系统非常像，而并不像C++的include体系</p><ul><li>简概 <ul><li>Java允许使用包（package）将类组织起来。借助于包可以方便地组织自己的代码，并将自己的代码与别人提供的代码库分开管理</li><li>标准的Java类库分布在多个包中，包括java.lang、java.util和java.net等</li></ul></li><li>作用 <ul><li>使用包的主要原因是确保类名的唯一性。假如两个程序员不约而同地建立了Employee类。只要将这些类放置在不同的包中，就不会产生冲突。</li></ul></li><li>嵌套性 <ul><li>标准的Java包具有一个层次结构，如同硬盘的目录嵌套一样，也可以使用嵌套层次组织包</li><li>所有标准的Java包都处于java和javax（还有org？）包层次中</li></ul></li><li>其他补充：唯一性 <ul><li>事实上，为了保证包名的绝对唯一性，Sun公司建议将公司的因特网域名以逆序的形式作为包名，并且对于不同的项目使用不同的子包</li><li>例如，horstmann.com的逆序形式为com.horstmann。这个包还可以被进一步地划分成子包，如com.horstmann.corejava。</li><li>Android的软件包倒是使用了该方案</li></ul></li></ul><h2 id="使用包-import" tabindex="-1"><a class="header-anchor" href="#使用包-import"><span>使用包（import）</span></a></h2><p>三段式命名式命名</p><ul><li>import xx.xx.xx 格式命名</li><li>第一部分：<code>java/javax/org</code></li><li>第二部分：包名，小写开头</li><li>第三部分：类名，大写开头，大驼峰命名</li><li>第四部分：类下方法，可以为<code>*</code>表示导入所有方法</li></ul><h3 id="类的导入" tabindex="-1"><a class="header-anchor" href="#类的导入"><span>类的导入</span></a></h3><p>第一种方式是在每个类名之前添加完整的包名。很繁琐</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">time</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> today </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二种方式是使用import语句</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// import语句应该位于源文件的顶部（但位于package语句的后面）</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LocalDate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> today </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LocalDate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 在使用类时，就不必写出包的全名了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>补充</p><blockquote><p>只能使用星号（*）导入一个包，而不能使用<code>import java.*</code>或<code>import java.*.*</code>导入以java为前缀的所有包</p></blockquote><p><mark>与C/C++不同</mark>：</p><ul><li>Java：包机制</li><li>C++：命名空间（namespace）</li><li>Java：import语句</li><li>C++：C++中的namespace和using指令</li></ul><h3 id="静态导入" tabindex="-1"><a class="header-anchor" href="#静态导入"><span>静态导入</span></a></h3><p>（吐槽：傻逼翻译，静态方法和静态域什么鬼）</p><p>在源文件的顶部，添加一条静态导入的指令，就是导入类下的全部方法，使用时便不必加类名前缀</p><p>导入静态方法和静态域</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.Syste.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Goodbye, World!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// System.out</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						// System.exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入特定的方法和域</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.lang.System.out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="将类放入包中" tabindex="-1"><a class="header-anchor" href="#将类放入包中"><span>将类放入包中</span></a></h3><p>Employee.java</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.horstmann.corejava</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 将类放入该包中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认包 <ul><li>如果没有在源文件中放置package语句，这个源文件中的类就被放置在一个默认包（defaulf package）中。默认包是一个没有名字的包。这里定义的所有类都在默认包中。</li></ul></li><li>路径 <ul><li>将包中的文件放到与完整的包名匹配的子目录中。 例如，com.horstmann.corejava包中的所有源文件应该被放置在子目录com/horstmann/corejava（Windows中com\\horstmann\\corejava）中。 编译器将类文件也放在相同的目录结构中</li></ul></li></ul><blockquote><h4 id="使用默认包" tabindex="-1"><a class="header-anchor" href="#使用默认包"><span>使用默认包</span></a></h4></blockquote><ul><li><p>目录结构</p><ul><li><blockquote><p>基目录</p><p>​ PackageTest.java # 在默认包中</p><p>​ PackageTest.class # 在默认包中</p><p>​ com/</p><p>​ horstmann/</p><p>​ corejava/</p><p>​ Employee.java</p><p>​ Employee.class</p></blockquote></li></ul></li><li><p>编译</p><ul><li><p>要想编译这个程序，只需改变基目录，并运行命令</p></li><li><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PackageTest.java</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 编译器就会自动地查找文件com/horstmann/corejava/Employee.java并进行编译</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><blockquote><h4 id="将类分别放在不同的包中" tabindex="-1"><a class="header-anchor" href="#将类分别放在不同的包中"><span>将类分别放在不同的包中</span></a></h4></blockquote><p>不使用默认包，而是将类分别放在不同的包中（com.horstmann.corejava和com.mycompany）</p><ul><li><p>目录结构</p><ul><li><blockquote><p>基目录</p><p>​ com/</p><p>​ horstmann/</p><p>​ corejava/</p><p>​ Employee.java</p><p>​ Employee.class</p><p>​ mycompany/</p><p>​ PayrollApp.java</p><p>​ PayrollApp.class</p></blockquote></li></ul></li><li><p>编译</p><ul><li><p>在这种情况下，仍然要从基目录编译和运行类，即包含com目录</p></li><li><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> javac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com/mycompany/PayrollApp.java</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> com.mycompany.PayrollApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>其他补充</p><p>从下一章开始，我们将对源代码使用包。这样一来，就可以为各章建立一个IDE工程，而不是各小节分别建立工程</p><h3 id="包作用域" tabindex="-1"><a class="header-anchor" href="#包作用域"><span>包作用域</span></a></h3><p>举例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Winodw</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;"> extend Container</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> warningString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 该变量不是private，包中的所有方法都可以访问或设置该变量。不妥</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类路径-jar-java归档-此略-详见书" tabindex="-1"><a class="header-anchor" href="#类路径-jar-java归档-此略-详见书"><span>类路径（JAR，Java归档）<mark>[此略] 详见书</mark></span></a></h2><h3 id="jar文件" tabindex="-1"><a class="header-anchor" href="#jar文件"><span>JAR文件</span></a></h3><p>使用</p><ul><li>类文件也可以存储在<code>JAR（Java归档）</code>文件中。在一个JAR文件中，可以包含多个压缩形式的类文件和子目录，这样既可以节省又可以改善性能。</li><li>在程序中用到第三方（third-party）的库文件时，通常会给出一个或多个需要包含的JAR文件。JDK也提供了许多的JAR文件，例如，在jre/lib/rt.jar中包含数千个类库文件。</li><li>JAR文件使用ZIP格式组织文件和子目录。可以使用所有ZIP实用程序查看内部的rt.jar以及其他的JAR文件</li></ul><p>生成</p><p>为了使类能够被多个程序共享，需要做到下面几点</p><ul><li><p>把类放到一个目录中，例如/home/user/classdir。需要注意，这个目录是包树状结构的基目录。 如果希望将com.horstmann.corejava.Employee类添加到其中，这个Employee.class类文件就必须位于子录/home/user/classdir/com/horstmann/corejava中</p></li><li><p>将JAR文件放在一个目录中，例如：/home/user/archives。</p></li><li><p>设置<code>类路径（class path）</code>。类路径是所有包含类文件的路径的集合。</p></li></ul><p>在UNIX环境中，类路径中的不同项目之间采用冒号（：）分隔</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/home/user/classdir:.:/home/user/archives/archive.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在Windows环境中，则以分号（；）分隔</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c:\\classdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c:\\archives\\archive.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="设置类路径" tabindex="-1"><a class="header-anchor" href="#设置类路径"><span>设置类路径</span></a></h3><p>最好采用-classpath（或-cp）选项指定类路径：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/user/classdir:.:/home/user/archives/archive.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyProg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -classpath</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lassdir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c:\\archives\\archive.jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyProg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="文档注释-此略-详见书" tabindex="-1"><a class="header-anchor" href="#文档注释-此略-详见书"><span>文档注释 <mark>[此略] 详见书</mark></span></a></h2><p>概述：JDK包含一个很有用的工具，叫做javadoc，它可以由源文件生成一个HTML文档</p><p>优点：这种方式可以将代码与注释保存在一个地方。如果将文档存入一个独立的文件中，就有可能会随着时间的推移，出现代码和注释不一致的问题。然而，由于文档注释与源代码在同一个文件中，在修改源代码的同时，重新运行javadoc就可以轻而易举地保持两者的一致性。</p><h3 id="注释的插入" tabindex="-1"><a class="header-anchor" href="#注释的插入"><span>注释的插入</span></a></h3><p>基本使用</p><ul><li><code>/**...*/</code>文档注释在<code>标记</code>之后紧跟着<code>自由格式文本（free-form text）</code></li></ul><h4 id="标记" tabindex="-1"><a class="header-anchor" href="#标记"><span>标记</span></a></h4><ul><li>标记由@开始，如<code>@author</code>或<code>@param</code></li></ul><h4 id="自由格式文本" tabindex="-1"><a class="header-anchor" href="#自由格式文本"><span>自由格式文本</span></a></h4><ul><li>第一句应该是一个概要性的句子。javadoc实用程序自动地将这些句子抽取出来形成概要页</li><li>在自由格式文本中，可以使用HTML修饰符，例如： <ul><li>用于强调的<code>&lt;em&gt;...&lt;/em&gt;</code></li><li>用于着重强调的<code>&lt;strong&gt;...&lt;/strong&gt;</code></li><li>包含图像的<code>&lt;img...&gt;</code>等。</li><li>注意：一定不要使用<code>&lt;h1&gt;</code>或<code>&lt;hr&gt;</code>，因为会与文档的格式产生冲突</li></ul></li><li>若要键入等宽代码，需使用<code>{@code...}</code>而不是<code>&lt;code&gt;...&lt;/code&gt;</code>——这样一来，就不用操心对代码中的<code>&lt;</code>字符转义了</li><li>文件链接的处理：如果文档中有到其他文件的链接，例如，图像文件，就应该将这些文件放到子目录doc-files中 例如：<code>&lt;img src=“doc-files/uml.png”alt=“UML diagram”&gt;</code></li></ul><h3 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h3><h4 id="类注释" tabindex="-1"><a class="header-anchor" href="#类注释"><span>类注释</span></a></h4><p>类注释必须放在import语句之后，类定义之前</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * A {@code Card} object represents a playing card, such</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * as &quot;Queen of Hearts&quot;. A card has a suit (Diamond, Heart,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Spade or Club) and a value (1 = Ace, 2...10, 11 = Jack,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 12 = Queen, 13 = King)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Card</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：没有必要在每一行的开始用星号*。然而，大部分IDE提供了自动添加星号*，并且当注释行改变时，自动重新排列这些星号的功能。</p></blockquote><h4 id="方法注释" tabindex="-1"><a class="header-anchor" href="#方法注释"><span>方法注释</span></a></h4><p>常用标记</p><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td>@param 变量描述</td><td>一个方法的所有@param标记必须放在一起。<br>这个描述可以占据多行，可以使用HTML标记</td></tr><tr><td>@return 描述</td><td><br>这个描述可以跨越多行，可以使用HTML标记</td></tr><tr><td>@throws 类描述</td><td>用于表示这个方法有可能抛出异常</td></tr></tbody></table><ul><li><code>@param 变量描述</code>，对当前方法的“param”（参数）部分添加一个条目。这个描述可以占据多行，并可以使用HTML标记。一个方法的所有@param标记必须放在一起</li><li><code>@return 描述</code>，对当前方法添加“return”（返回）部分。这个描述可以跨越多行，并可以使用HTML标记</li><li><code>@throws 类描述</code>，用于表示这个方法有可能抛出异常</li></ul><p>举例</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Raises the salary of an employee.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> byPercent</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> the percentage by which to raise the salary (e.g. 10 means 10%)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> the amount of the raise</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> raiseSalary</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> byPercent)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> raise </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> byPercent</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> raise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> raise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="域注释" tabindex="-1"><a class="header-anchor" href="#域注释"><span>域注释</span></a></h4><p>只需要对公有域（通常指的是静态常量）建立文档</p><p>例如</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * The &quot;Hearts&quot; card suit</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> HEARTS </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通用注释" tabindex="-1"><a class="header-anchor" href="#通用注释"><span>通用注释</span></a></h4><p>常用标记</p><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td>@author 姓名</td><td>可以使用多个@author标记，每个@author标记对应一个作者</td></tr><tr><td>@version 文本</td><td>这里的文本可以是对当前版本的任何描述</td></tr><tr><td>@since 文本</td><td>这里的text可以是对引入特性的版本描述。例如，@since version 1.7.1</td></tr><tr><td>@deprecated 文本</td><td>这个标记将对类、方法或变量添加一个不再使用的注释<br>例如：<code>@deprecated Use&lt;code&gt;setVisible (true) &lt;/code&gt; instead</code></td></tr><tr><td>@see 引用</td><td>通过@see和@link标记，可以使用超级链接，链接到javadoc文档的相关部分或外部文档。</td></tr></tbody></table><ul><li><code>@author 姓名</code>，这个标记将产生一个“author”（作者）条目。可以使用多个@author标记，每个@author标记对应一个作者</li><li><code>@version 文本</code>，将产生一个“version”（版本）条目。这里的文本可以是对当前版本的任何描述</li><li>下面的标记可以用于所有的文档注释中</li><li><code>@since 文本</code>，产生一个“since”（始于）条目。这里的text可以是对引入特性的版本描述。例如，@since version 1.7.1</li><li><code>@deprecated 文本</code>，这个标记将对类、方法或变量添加一个不再使用的注释。文本中给出了取代的建议。 <ul><li>例如：<code>@deprecated Use&lt;code&gt;setVisible (true) &lt;/code&gt; instead</code></li></ul></li><li><code>@see 引用</code>，通过@see和@link标记，可以使用超级链接，链接到javadoc文档的相关部分或外部文档 <ul><li>例如：<code>@see com.horstmann.corejava.Employee#raiseSalary(double)</code></li><li>例如：<code>@see &lt;a href=&quot;www.horstmann.com/corejava.html&quot;&gt;The Core Java home page&lt;/a&gt;</code></li><li>例如：<code>@see &quot;Core Java 2 volume 2&quot;</code></li><li>例如：<code>{@link package.class#feature label}</code></li></ul></li></ul><h4 id="包与概述注释" tabindex="-1"><a class="header-anchor" href="#包与概述注释"><span>包与概述注释</span></a></h4><p>可以直接将类、方法和变量的注释放置在Java源文件中，只要用/**...*/文档注释界定就可以了。 但是，要想产生包注释，就需要在每一个包目录中添加一个单独的文件</p><p>有如下两个选择</p><ul><li>(1) 提供一个以package.html命名的HTML文件。在标记<code>&lt;body&gt;...&lt;/body&gt;</code>之间的所有文本都会被抽取出来。</li><li>(2) 提供一个以package-info.java命名的Java文件。这个文件必须包含一个初始的以<code>/**和*/</code>界定的Javadoc注释，跟随在一个包语句之后。它不应该包含更多的代码或注释。</li></ul><h3 id="注释的抽取" tabindex="-1"><a class="header-anchor" href="#注释的抽取"><span>注释的抽取</span></a></h3><p>相关文档</p><ul><li>有关其他的选项，请查阅javadoc实用程序的联机文档，http://docs.oracle.com/javase/8/docs/guides/javadoc</li><li>如果需要进一步的定制，例如，生成非HTML格式的文档，可以提供自定义的doclet，以便生成想要的任何输出形式。显然，这是一种特殊的需求，有关细节内容请查阅http://docs.oracle.com/javase/8/docs/guides/javadoc/doclet/overview.html的联机文档</li></ul><p>假设HTML文件将被存放在目录docDirectory下。执行以下步骤：</p><p>1）切换到包含想要生成文档的源文件目录。如果有嵌套的包要生成文档，例如com.horstmann.corejava，就必须切换到包含子目录com的目录（如果存在overview.html文件的话，这也是它的所在目录）。</p><p>2）如果是一个包，应该运行命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javadoc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docDirectory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nameOfPackage</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或对于多个包生成文档，运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javadoc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docDirectory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nameOfPackage1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nameOfPackage2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果文件在默认包中，就应该运行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javadoc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docDirectory</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果省略了-d docDirectory选项，那HTML文件就会被提取到当前目录下。这样有可能会带来混乱，因此不提倡这种做法。</p>`,106)]))}const r=s(t,[["render",n],["__file","02. 模块系统.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/02.%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 模块系统 简概 在线API文档 String类包含许多方法。而且，在标准库中有几千个类，方法数量更加惊人。 要想记住所有的类和方法是一件不太不可能的事情。因此，学会使用在线API文档十分重要，从中可以查阅到标准类库中的所有类和方法。 API文档是JDK的一部分，它是HTML格式的。让浏览器指向安装JDK的docs/api/index.h...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/02.%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 模块系统 简概 在线API文档 String类包含许多方法。而且，在标准库中有几千个类，方法数量更加惊人。 要想记住所有的类和方法是一件不太不可能的事情。因此，学会使用在线API文档十分重要，从中可以查阅到标准类库中的所有类和方法。 API文档是JDK的一部分，它是HTML格式的。让浏览器指向安装JDK的docs/api/index.h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"模块系统","slug":"模块系统","link":"#模块系统","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[{"level":3,"title":"在线API文档","slug":"在线api文档","link":"#在线api文档","children":[]},{"level":3,"title":"包系统","slug":"包系统","link":"#包系统","children":[]}]},{"level":2,"title":"使用包（import）","slug":"使用包-import","link":"#使用包-import","children":[{"level":3,"title":"类的导入","slug":"类的导入","link":"#类的导入","children":[]},{"level":3,"title":"静态导入","slug":"静态导入","link":"#静态导入","children":[]},{"level":3,"title":"将类放入包中","slug":"将类放入包中","link":"#将类放入包中","children":[]},{"level":3,"title":"包作用域","slug":"包作用域","link":"#包作用域","children":[]}]},{"level":2,"title":"类路径（JAR，Java归档）[此略] 详见书","slug":"类路径-jar-java归档-此略-详见书","link":"#类路径-jar-java归档-此略-详见书","children":[{"level":3,"title":"JAR文件","slug":"jar文件","link":"#jar文件","children":[]},{"level":3,"title":"设置类路径","slug":"设置类路径","link":"#设置类路径","children":[]}]},{"level":2,"title":"文档注释 [此略] 详见书","slug":"文档注释-此略-详见书","link":"#文档注释-此略-详见书","children":[{"level":3,"title":"注释的插入","slug":"注释的插入","link":"#注释的插入","children":[{"level":4,"title":"标记","slug":"标记","link":"#标记","children":[]},{"level":4,"title":"自由格式文本","slug":"自由格式文本","link":"#自由格式文本","children":[]}]},{"level":3,"title":"实战","slug":"实战","link":"#实战","children":[{"level":4,"title":"类注释","slug":"类注释","link":"#类注释","children":[]},{"level":4,"title":"方法注释","slug":"方法注释","link":"#方法注释","children":[]},{"level":4,"title":"域注释","slug":"域注释","link":"#域注释","children":[]},{"level":4,"title":"通用注释","slug":"通用注释","link":"#通用注释","children":[]},{"level":4,"title":"包与概述注释","slug":"包与概述注释","link":"#包与概述注释","children":[]}]},{"level":3,"title":"注释的抽取","slug":"注释的抽取","link":"#注释的抽取","children":[]}]}]}],"git":{},"readingTime":{"minutes":10.87,"words":3261},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/07. 模块库/02. 模块系统.md","excerpt":"\\n<h1>目录</h1>\\n<h1>模块系统</h1>\\n<h2>简概</h2>\\n<h3>在线API文档</h3>\\n<p>String类包含许多方法。而且，在标准库中有几千个类，方法数量更加惊人。</p>\\n<p>要想记住所有的类和方法是一件不太不可能的事情。因此，学会使用在线API文档十分重要，从中可以查阅到标准类库中的所有类和方法。</p>\\n<p>API文档是JDK的一部分，它是HTML格式的。让浏览器指向安装JDK的docs/api/index.html子目录</p>\\n<ul>\\n<li><a href=\\"https://docs.oracle.com/javase/8/docs/api\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Oracle_Java_官网API文档</a>\\n<ul>\\n<li>使用方法：API文档的三个窗格</li>\\n<li>左上方显示了可使用的所有包，选择后对左下方的类进行一个筛选</li>\\n<li>左下方显示了所有类，选择后右侧的文档进行该类的文档显示</li>\\n<li>右侧显示选择类的文档，再点击里面的方法可以看到更详细的信息</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/07. 模块库/02. 模块系统.md","value":{"title":"02. 模块系统","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/07. 模块库/02. 模块系统.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,p as data};
