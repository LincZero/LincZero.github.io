import{_ as s,c as a,e as n,o as l}from"./app-DnpufS1x.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h2><ul><li><p>现在你可能注意到大多数容器对象都可以用 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer">for</a> 遍历：</p><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li></ul></li><li><p>优点</p><ul><li>这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一</li></ul></li><li><p>原理</p><ul><li><p>在后台，for语句在容器对象中调用<a href="https://docs.python.org/3/library/functions.html#iter" target="_blank" rel="noopener noreferrer"><code>iter()</code></a>，该函数返回一个定义了<a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener noreferrer"><code>__next__()</code></a>方法的迭代器对象，它在容器中逐一访问元素</p></li><li><p>没有后续的元素时，<a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener noreferrer"><code>__next__()</code></a>抛出一个 <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener noreferrer">StopIteration</a> 异常通知 <a href="https://docs.python.org/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer">for</a> 语句循环结束</p></li><li><p>你可以是用内建的<a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener noreferrer"><code>__next__()</code></a>函数调用<a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener noreferrer"><code>__next__()</code></a>方法</p></li><li><p>以下是其工作原理的示例：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;abc&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">iterator </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00A1DB50</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;c&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Traceback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  File </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;stdin&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ?</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(it)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">StopIteration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用（给自己的类添加迭代器）</p><ul><li><p>例如</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __iter__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 迭代器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __next__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> StopIteration</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.data[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.index]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rev </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;spam&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> iter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rev)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__main__.Reverse </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00A1DB50</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> char </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rev:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(char)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">m</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h2><ul><li><p>概念</p><ul><li>是创建迭代器的简单而强大的工具</li></ul></li><li><p>写法</p><ul><li><p>它们写起来就像是正规的函数，需要返回数据的时候使用<a href="https://docs.python.org/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a>语句</p></li><li><p>每次 <a href="https://docs.python.org/3/library/functions.html#next" target="_blank" rel="noopener noreferrer">next()</a> 被调用时，生成器回复它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）</p></li><li><p>以下示例演示了生成器可以很简单的创建出来:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data[index]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">for char in reverse(&#39;golf&#39;):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">... </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    print(char)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">f</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">l</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">o</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">g</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>原理</p><ul><li>自动创建了 <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener noreferrer"><strong>iter</strong>()</a> 和 <a href="https://docs.python.org/3/reference/expressions.html#generator.__next__" target="_blank" rel="noopener noreferrer"><strong>next</strong>()</a> 方法，生成器显得如此简洁</li></ul></li></ul>`,7)]))}const p=s(t,[["render",e],["__file","02. 泛型.html.vue"]]),r=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":2,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":2,"title":"生成器","slug":"生成器","link":"#生成器","children":[]}]}],"git":{},"readingTime":{"minutes":1.58,"words":475},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>泛型</h1>\\n<h2>迭代器</h2>\\n<ul>\\n<li>\\n<p>现在你可能注意到大多数容器对象都可以用 <a href=\\"https://docs.python.org/3/reference/compound_stmts.html#for\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">for</a> 遍历：</p>\\n<ul>\\n<li>列表</li>\\n<li>元组</li>\\n<li>字典</li>\\n<li>字符串</li>\\n</ul>\\n</li>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一</li>\\n</ul>\\n</li>\\n<li>\\n<p>原理</p>\\n<ul>\\n<li>\\n<p>在后台，for语句在容器对象中调用<a href=\\"https://docs.python.org/3/library/functions.html#iter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>iter()</code></a>，该函数返回一个定义了<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>方法的迭代器对象，它在容器中逐一访问元素</p>\\n</li>\\n<li>\\n<p>没有后续的元素时，<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>抛出一个 <a href=\\"https://docs.python.org/3/library/exceptions.html#StopIteration\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">StopIteration</a> 异常通知 <a href=\\"https://docs.python.org/3/reference/compound_stmts.html#for\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">for</a> 语句循环结束</p>\\n</li>\\n<li>\\n<p>你可以是用内建的<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>函数调用<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>方法</p>\\n</li>\\n<li>\\n<p>以下是其工作原理的示例：</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" data-title=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> s </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 'abc'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> it </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> iter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(s)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> it</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">iterator </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">object</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> at </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">0x</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">00A1DB50</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> next</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(it)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'a'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> next</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(it)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'b'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> next</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(it)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'c'</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> next</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(it)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#61AFEF\\">Traceback</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (most recent call last):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  File </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"&lt;stdin&gt;\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, line </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">in</span><span style=\\"--shiki-light:white;--shiki-dark:#FFFFFF\\"> ?</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">    next</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(it)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\\">StopIteration</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>使用（给自己的类添加迭代器）</p>\\n<ul>\\n<li>\\n<p>例如</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" data-title=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Reverse</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    \\"\\"\\"Iterator for looping over a sequence backwards.\\"\\"\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __init__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\"> data</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.data </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> data</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.index </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> len</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(data)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __iter__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):\\t\\t\\t\\t\\t\\t\\t</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 迭代器</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    def</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> __next__</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):\\t\\t\\t\\t\\t\\t\\t</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 返回</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        if</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.index </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">==</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">            raise</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\\"> StopIteration</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.index </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.index </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">-</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">        return</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.data[</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">self</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.index]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> rev </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#61AFEF\\"> Reverse</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'spam'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> iter</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(rev)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">__main__.Reverse </span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">object</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> at </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">0x</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">00A1DB50</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;&gt;&gt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> for</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> char </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">in</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> rev:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#D19A66\\">...</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">     print</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(char)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#D19A66\\">...</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">m</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">p</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">s</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","value":{"title":"02. 泛型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","outlink":[],"backlink":[]}}],"links":[]}}}`);export{p as comp,r as data};
