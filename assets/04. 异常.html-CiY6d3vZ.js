import{_ as e,c as t,e as l,a as i,f as a,b as h,o as p,r as k}from"./app-DQC9V0Al.js";const d={};function r(c,s){const n=k("VPIcon");return p(),t("div",null,[s[7]||(s[7]=l('<h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h1><h2 id="标注函数可能有异常-gpt-3-5" tabindex="-1"><a class="header-anchor" href="#标注函数可能有异常-gpt-3-5"><span>标注函数可能有异常 (GPT 3.5)</span></a></h2><p>c++或其他语言是否有该功能：标注可能抛出异常或标注该函数不会抛出异常，并说明应用场景</p><hr><p>在C++中，可以使用<code>noexcept</code>关键字来标注函数是否可能抛出异常。<code>noexcept</code>关键字用于指示一个函数是否抛出异常，如果在函数声明或定义中使用了<code>noexcept</code>，则表示该函数不会抛出异常。如果函数可能会抛出异常，可以不使用<code>noexcept</code>关键字，或者使用<code>noexcept(false)</code>。</p><p>在其他编程语言中，也有类似的功能来标注函数是否会抛出异常或不会抛出异常，例如Java中的<code>throws</code>关键字用于声明一个方法可能会抛出的异常。</p><p>应用场景：</p><ul><li>标注可能抛出异常的函数：当函数中可能会发生异常情况，但又不希望在调用函数时被忽略异常处理时，可以使用标注可能抛出异常的方法。这样可以提醒调用者需要对可能的异常情况进行处理。</li><li>标注不会抛出异常的函数：当函数中不会发生异常情况，并且需要确保调用该函数时不会引发异常时，可以使用标注不会抛出异常的方法。这样可以提高代码的可靠性和稳定性。</li></ul><p>总的来说，使用异常标注功能有助于代码的可读性和维护性，能够明确函数的异常行为，帮助开发人员更好地处理异常情况。</p><hr><p>我记得有的函数不建议抛出异常的，好像是移动构造函数还是什么的</p><hr><p>是的，移动构造函数和移动赋值运算符通常不建议抛出异常。这是因为这两个函数通常在性能敏感的情况下使用，如在容器的元素移动时，抛出异常会导致性能下降。此外，移动操作的目的是尽量避免资源的拷贝，并提升性能，如果移动过程中抛出异常，可能会导致资源未能正确释放，破坏程序的正确性。</p><p>在C++11中，移动构造函数和移动赋值运算符通常会使用移动语义（移动资源所有权而不是拷贝资源），从而提高性能。为了确保这种性能提升，移动操作不建议抛出异常，应该尽量保持异常安全性。</p><p>如果在移动构造函数或移动赋值运算符中确实需要进行可能会抛出异常的操作，可以采用以下几种方式来处理异常：</p><ol><li>在移动操作中进行异常处理，并尽量保证异常不会传播出去。</li><li>在出现异常时，进行资源回滚或清理操作，确保不会造成资源泄漏。</li><li>使用<code>noexcept</code>关键字来标注移动构造函数和移动赋值运算符，表示这些函数不会抛出异常。</li></ol><p>总的来说，为了确保移动操作的高效和安全，建议移动构造函数和移动赋值运算符尽量不抛出异常，以提高程序的性能和稳定性。</p><hr><p>C++没有一个标识，能让外界必须使用try的方式来调用这个函数吗</p><hr><p>在C++中,没有类似于Java中<code>throws</code>关键字的标识,可以强制外部调用者必须使用<code>try-catch</code>块来处理函数可能抛出的异常。C++的异常处理机制是基于<code>try-catch</code>块的,即调用者可以选择是否使用<code>try-catch</code>来捕获异常。如果函数可能会抛出异常,但调用者未使用<code>try-catch</code>块来捕获异常,则程序会在异常发生时终止。这种机制对于强制调用者使用<code>try-catch</code>块并处理异常是没有直接支持的。</p><p>然而,可以通过文档说明或团队规范来强调对于某些函数必须使用<code>try-catch</code>块来处理可能的异常,以确保程序的稳定性和可维护性。在函数的注释或文档中明确说明函数可能抛出的异常类型,并强调调用者必须使用<code>try-catch</code>块来处理这些异常。这种做法虽然不能强制调用者使用<code>try-catch</code>,但可以作为一种约定来提醒调用者该函数可能会抛出异常。</p><p>另外,对于特定的情况,也可以通过自定义异常类或返回值来处理异常情况,而不是使用C++的异常处理机制。这样可以在设计上避免使用异常,从而避免对<code>try-catch</code>块的依赖。</p><blockquote><p>话说在这点上 Go 就比较清晰了，看返回值就这个函数是否需要在函数外承接错误了</p></blockquote><h2 id="异常-1" tabindex="-1"><a class="header-anchor" href="#异常-1"><span>异常</span></a></h2><p>不同语言的类似处理：</p>',26)),i("ul",null,[s[4]||(s[4]=i("li",null,[i("p",null,"goto方法"),i("ul",null,[i("li",null,"略，遇到异常就跳转到资源释放区部分")])],-1)),s[5]||(s[5]=i("li",null,[i("p",null,"C语言"),i("ul",null,[i("li",null,[i("p",null,"Setjmp/Longjmp"),i("p",null,"可以用来实现异常处理和资源释放。setjmp用于捕获当前环境的上下文，而longjmp则用于从setjmp返回，并可以选择性地执行资源释放代码。"),i("p",null,"这种方法可以在异常发生时跳转到函数的末尾执行清理代码，而不需要使用大量的if语句。")])])],-1)),i("li",null,[s[3]||(s[3]=i("p",null,"C++",-1)),i("ul",null,[i("li",null,[s[2]||(s[2]=i("p",null,"RAII (Resource Acquisition Is Initialization)",-1)),i("p",null,[s[0]||(s[0]=a("与智能指针（如std")),h(n,{icon:"unique_ptr或std"}),s[1]||(s[1]=a("shared_ptr）一起使用。当对象被创建时，它会获取资源；当对象被销毁时，它会自动释放资源。"))])])])]),s[6]||(s[6]=l(`<li><p>Java的 try-with-resources/try-catch-finally</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">FileWriter</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> writer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    writer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FileWriter</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;example.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 使用writer对象</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 处理异常</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (writer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            writer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">IOException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 处理关闭资源时的异常</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Python</p><p>上下文管理器 <code>__exit__</code>、<code>__enter__</code>、<code>with</code></p><p><code>__exit__</code>方法定义了退出<code>with</code>语句块时的行为，通常用于释放资源</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __enter__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 获取资源</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __exit__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> exc_type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> exc_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> traceback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 释放资源</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exc_type:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 如果有异常发生，可以选择处理或忽略</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">            print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;An exception occurred: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">exc_type</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">exc_value</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 总是执行资源释放</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> MyResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> resource:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 使用资源</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 上面是自己定义的情况。一般用得比较多的是打开文件的 open with，无需显式调用 close() 方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C#</p><ul><li>using语句，类似于Java的try-with-resources</li></ul></li><li><p>JavaScript</p><ul><li>Promise和async/await</li></ul></li><li><p>Go语言</p><ul><li>函数内处理异常：Go使用defer关键字用于处理函数的资源释放，以及异常处理等（关于defer的更多信息，详见Go语言的 “异常” 部分） Go 追求代码优雅，不使用 try-catch 机制，而是使用 defer+recover 机制 <ul><li>defer关键字：可以在函数返回前执行一段代码，通常用于资源释放。</li><li>recover关键字：允许程序管理恐慌过程。recover() 可以捕获异常，同时使程序恢复正常，停止恐慌过程</li><li>结合 try-defer 模式，可以在发生异常时自动释放资源，而无需在每个判断点重复编写释放代码</li></ul></li><li>函数外处理异常：不使用 “抛出” 异常，由于Go可以多返回值，只需要 “返回” 异常即可</li></ul></li>`,5))])])}const y=e(d,[["render",r],["__file","04. 异常.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/04.%20%E5%BC%82%E5%B8%B8.html","title":"异常","lang":"zh-CN","frontmatter":{"description":"异常 标注函数可能有异常 (GPT 3.5) c++或其他语言是否有该功能：标注可能抛出异常或标注该函数不会抛出异常，并说明应用场景 在C++中，可以使用noexcept关键字来标注函数是否可能抛出异常。noexcept关键字用于指示一个函数是否抛出异常，如果在函数声明或定义中使用了noexcept，则表示该函数不会抛出异常。如果函数可能会抛出异常，可...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/04.%20%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"异常"}],["meta",{"property":"og:description","content":"异常 标注函数可能有异常 (GPT 3.5) c++或其他语言是否有该功能：标注可能抛出异常或标注该函数不会抛出异常，并说明应用场景 在C++中，可以使用noexcept关键字来标注函数是否可能抛出异常。noexcept关键字用于指示一个函数是否抛出异常，如果在函数声明或定义中使用了noexcept，则表示该函数不会抛出异常。如果函数可能会抛出异常，可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"异常","slug":"异常","link":"#异常","children":[{"level":2,"title":"标注函数可能有异常 (GPT 3.5)","slug":"标注函数可能有异常-gpt-3-5","link":"#标注函数可能有异常-gpt-3-5","children":[]},{"level":2,"title":"异常","slug":"异常-1","link":"#异常-1","children":[]}]}],"git":{},"readingTime":{"minutes":6.14,"words":1841},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/04. 异常.md","excerpt":"\\n<h2>标注函数可能有异常 (GPT 3.5)</h2>\\n<p>c++或其他语言是否有该功能：标注可能抛出异常或标注该函数不会抛出异常，并说明应用场景</p>\\n<hr>\\n<p>在C++中，可以使用<code>noexcept</code>关键字来标注函数是否可能抛出异常。<code>noexcept</code>关键字用于指示一个函数是否抛出异常，如果在函数声明或定义中使用了<code>noexcept</code>，则表示该函数不会抛出异常。如果函数可能会抛出异常，可以不使用<code>noexcept</code>关键字，或者使用<code>noexcept(false)</code>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/04. 异常.md","value":{"title":"04. 异常","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/04. 异常.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{y as comp,g as data};
