import{_ as e,c as r,e as i,o as a}from"./app-DnpufS1x.js";const l={};function d(n,t){return a(),r("div",null,t[0]||(t[0]=[i('<h1 id="计算机文件系统" tabindex="-1"><a class="header-anchor" href="#计算机文件系统"><span>计算机文件系统</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="深入ntfs" tabindex="-1"><a class="header-anchor" href="#深入ntfs"><span>深入NTFS</span></a></h1><p>参考</p><ul><li>主要参考：<a href="https://en.wikipedia.org/wiki/NTFS" target="_blank" rel="noopener noreferrer">维基</a> / <a href="https://zh.wikipedia.org/wiki/NTFS" target="_blank" rel="noopener noreferrer">中文维基</a>（该词条挺全的，像个文档似的。感觉这个维基<strong>中文版写得更好</strong>）以及底部的参考文献与外部链接</li><li>微软文档：<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/backup-and-storage/ntfs-reserves-space-for-mft" target="_blank" rel="noopener noreferrer">Windows Server/NTFS如何为去主文件表保留空间（MFT）</a></li></ul><h2 id="概念类" tabindex="-1"><a class="header-anchor" href="#概念类"><span>概念类</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS（中文wiki）</div></div><div class="callout-content"><p></p><p><strong>NTFS（<ruby>新技术文件系统<rt>New Technology File System</rt></ruby>）</strong>，是Microsoft公司开发的专用文件系统，从Windows NT 3.1开始成为Windows NT家族的默认文件系统。（Mac也是用的）</p><p>NTFS 取代 **FAT（<ruby>文件分配表<rt>File Allocation Table</rt></ruby>）**和 **HPFS（<ruby>高性能文件系统<rt>High Performance File System</rt></ruby>）**并进行一系列改进成为更加完善的安全系统，例如增强对元数据的支持，使用更高级的数据结构以提升性能、可靠性和磁盘空间利用率，并附带一系列增强功能，如访问 **ACL（<ruby>控制列表<rt>Access Control List</rt></ruby>）**和文件系统日志。</p><p>其他台式机和服务器操作系统也支持NTFS。Linux和windows提供代码的软件NTFS-system，可用于读写NTFS文件。Mac OS X内核不能对NTFS进行读操作。</p></div></div><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS文件系统</div></div><div class="callout-content"><p></p><p>从 Windows NT 3.1 开始，它是 Windows NT 家族的默认文件系统。 [11] 它取代 文件分配表 (FAT) 作为 Windows 上的首选文件系统，并且在 Linux 和 BSD 中也受支持。 NTFS 读写支持是使用 免费和开源 称为 NTFS3， 内核实现提供的，在Linux 中 中称为NTFS-3G 驱动程序 在BSD 。 [12] [13] 通过使用 convert命令，Windows 可以将 FAT32 /16/12 转换为 NTFS，而无需重写所有文件。 [14] NTFS 使用通常对用户隐藏的几个文件来存储有关存储在驱动器上的其他文件的元数据，这有助于提高读取数据时的速度和性能。 [1] 与 FAT 和 高性能文件系统 (HPFS) 不同，NTFS 支持 访问控制列表 (ACL)、文件系统加密、透明压缩、 稀疏文件 和 文件系统日志 。 NTFS 还支持 卷影复制 以允许在系统运行时对其进行备份，但卷影复制的功能因 Windows 的不同版本而异。</p></div></div><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">日志文件系统</div></div><div class="callout-content"><p></p><p>文件 日志文件系统 是一种 系统 ）的数据结构中记录此类更改的目标来跟踪尚未提交到 文件系统 ，它通过在称为“ 日志 ”（通常是 循环日志 主要部分的更改。 在系统崩溃或电源故障的情况下，此类文件系统可以更快地恢复在线，并且损坏的可能性更低。 [1] [2]</p><p>根据实际实现，日志文件系统可能只跟踪存储的 元数据 ，从而以增加数据损坏的可能性为代价提高性能。 或者，日志文件系统可以跟踪存储的数据和相关的元数据，而一些实现在这方面允许可选择的行为。</p></div></div><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">日志文件系统/基本原理</div></div><div class="callout-content"><p></p><p>存在问题：</p><p>更新文件系统以反映对文件和目录的更改通常需要许多单独的写操作。 这使得写入之间的中断（如电源故障或系统 崩溃 ）有可能使数据结构处于无效的中间状态。</p><p>例如，在 Unix 文件系统上删除文件涉及三个步骤：</p><ol><li>删除其目录条目。</li><li>释放 将inode 到空闲 inode 池中。</li><li>将所有磁盘块返回到空闲磁盘块池。</li></ol><p>可能会产生以下错误：</p><ul><li>如果在步骤 1 之后和步骤 2 之前发生崩溃，则会有一个孤立的 inode，因此会发生<strong>存储泄漏</strong>；</li><li>如果在步骤 2 和步骤 3 之间发生崩溃，则文件之前使用的块不能用于新文件，从而有效降低文件系统的存储容量。 重新安排步骤也无济于事。</li><li>如果第 3 步先于第 1 步，则它们之间的崩溃可能会允许文件的块重新用于新文件，这意味着部分删除的文件将包含另一个文件的部分内容，并且对任一文件的修改都会显示在两个文件中。</li><li>如果第 2 步先于第 1 步，则它们之间的崩溃将导致文件无法访问，尽管文件看似存在。</li></ul><p>检测此类不一致并从中恢复通常需要完整 遍历 其数据结构，例如使用 fsck （文件系统检查程序）等工具。 这通常必须在下一次安装文件系统以进行读写访问之前完成。 如果文件系统很大并且 I/O 带宽相对较小，这可能会花费很长时间，如果它阻止系统的其余部分重新联机，则会导致更长的停机时间。</p><p>修复方案：</p><p>为了防止这种情况，日志文件系统分配了一个特殊的区域——<strong>日志</strong>——它在其中记录了它将提前进行的更改。 崩溃后，恢复只涉及从文件系统读取日志并重放该日志的更改，直到文件系统再次一致。 因此，这些更改被称为 <strong><ruby>原子<rt>不可分割</rt></ruby></strong> 的，因为它们要么成功（最初成功或在恢复期间完全重放），要么根本不重放（被跳过，因为它们在发生崩溃）。</p></div></div><h3 id="wiki目录" tabindex="-1"><a class="header-anchor" href="#wiki目录"><span>wiki目录</span></a></h3><details class="callout" data-callout="wiki" data-callout-fold="-"><summary class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/目录</div><div class="callout-fold"></div></summary><div class="callout-content"><p></p><ul><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%AD%B7%E5%8F%B2" target="_blank" rel="noopener noreferrer">1 历史</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E7%89%88%E6%9C%AC" target="_blank" rel="noopener noreferrer">2 版本</a></li><li>3 功能 <ul><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%80%A7" target="_blank" rel="noopener noreferrer">3.1 可伸缩性</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%97%A5%E5%BF%97" target="_blank" rel="noopener noreferrer">3.2 日志</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E7%A1%AC%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener noreferrer">3.3 硬链接</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8F%AF%E9%80%89%E6%95%B0%E6%8D%AE%E6%B5%81%EF%BC%88ADS%EF%BC%89" target="_blank" rel="noopener noreferrer">3.4 可选数据流（ADS）</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9" target="_blank" rel="noopener noreferrer">3.5 文件压缩</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">3.6 稀疏文件</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8D%B7%E5%BD%B1%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener noreferrer">3.7 卷影复制</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener noreferrer">3.8 事务</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%AE%89%E5%85%A8" target="_blank" rel="noopener noreferrer">3.9 安全</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8A%A0%E5%AF%86" target="_blank" rel="noopener noreferrer">3.10 加密</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E9%99%90%E9%A2%9D" target="_blank" rel="noopener noreferrer">3.11 限额</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E9%87%8D%E8%A7%A3%E6%9E%90%E7%82%B9" target="_blank" rel="noopener noreferrer">3.12 重解析点</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8D%B7%E5%8A%A0%E8%BD%BD%E7%82%B9" target="_blank" rel="noopener noreferrer">3.13 卷加载点</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E7%9B%AE%E5%BD%95%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener noreferrer">3.14 目录连接</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener noreferrer">3.15 符号链接</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%88%86%E5%B1%82%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%EF%BC%88HSM%EF%BC%89" target="_blank" rel="noopener noreferrer">3.16 分层存储管理（HSM）</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%9C%AC%E6%9C%BA%E7%BB%93%E6%9E%84%E5%AD%98%E5%82%A8%EF%BC%88NSS%EF%BC%89" target="_blank" rel="noopener noreferrer">3.17 本机结构存储（NSS）</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%88%86%E5%B8%83%E9%93%BE%E6%8E%A5%E8%B7%9F%E8%B8%AA%EF%BC%88DLT%EF%BC%89" target="_blank" rel="noopener noreferrer">3.18 分布链接跟踪（DLT）</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8D%95%E5%AE%9E%E4%BE%8B%E5%AD%98%E5%82%A8%EF%BC%88SIS%EF%BC%89" target="_blank" rel="noopener noreferrer">3.19 单实例存储（SIS）</a></li></ul></li><li>4 内部实现 <ul><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%88%86%E5%8C%BA%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA" target="_blank" rel="noopener noreferrer">4.1 分区引导扇区</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E4%B8%BB%E6%96%87%E4%BB%B6%E8%A1%A8%EF%BC%88MFT%EF%BC%89" target="_blank" rel="noopener noreferrer">4.2 主文件表（MFT）</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%85%83%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">4.3 元文件</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E4%BB%8EMFT%E5%88%B0%E5%B1%9E%E6%80%A7%E3%80%81%E5%B1%9E%E6%80%A7%E8%A1%A8%E5%92%8C%E6%B5%81" target="_blank" rel="noopener noreferrer">4.4 从MFT到属性、属性表和流</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%B8%B8%E9%A9%BB%E6%96%87%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%B8%B8%E9%A9%BB%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">4.5 常驻文件和非常驻文件</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%9C%BA%E4%BC%9A%E9%94%81" target="_blank" rel="noopener noreferrer">4.6 机会锁</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E6%97%B6%E9%97%B4" target="_blank" rel="noopener noreferrer">4.7 时间</a></li></ul></li><li>5 互操作性 <ul><li><a href="https://zh.wikipedia.org/wiki/NTFS#Microsoft_Windows" target="_blank" rel="noopener noreferrer">5.1 Microsoft Windows</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#Mac_OS_X" target="_blank" rel="noopener noreferrer">5.2 Mac OS X</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#Linux" target="_blank" rel="noopener noreferrer">5.3 Linux</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%85%B6%E4%BB%96" target="_blank" rel="noopener noreferrer">5.4 其他</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F" target="_blank" rel="noopener noreferrer">5.5 调整大小</a></li></ul></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8F%A6%E8%AF%B7%E5%8F%82%E9%98%85" target="_blank" rel="noopener noreferrer">6 另请参阅</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE" target="_blank" rel="noopener noreferrer">7 参考文献</a></li><li><a href="https://zh.wikipedia.org/wiki/NTFS#%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener noreferrer">8 外部链接</a></li></ul></div></details><h2 id="功能类" tabindex="-1"><a class="header-anchor" href="#功能类"><span>功能类</span></a></h2><h3 id="可伸缩性" tabindex="-1"><a class="header-anchor" href="#可伸缩性"><span>可伸缩性</span></a></h3><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><p>这点详见 <a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">wiki/日志文件系统</a> 注意区分：NTFS日志 与 USN日志</p><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/日志</div></div><div class="callout-content"><p></p><p>NTFS是一个<a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">日志文件系统</a>，使用 <strong>NTFS日志（$Logfile）<strong>记录卷更改元数据。这是NTFS一个非常关键的功能（FAT/FAT32不提供此项功能）。 作用是可确保其内部的</strong>复杂数据结构</strong>和<strong>索引</strong>即使在系统崩溃后仍然能保证一致性，而当在卷被重新加载后，可以非常容易地回滚这些关键数据的意外修改。</p><p>（复杂数据结构：如比较重要的如卷分配图、磁盘碎片整理API产生的数据转移操作、MFT（主文件表）记录的更改情况（包括移动MFT记录中存储的变长属性和属性表等）） （索引：在目录和安全描述符中使用）</p><p>**<a href="https://zh.wikipedia.org/wiki/USN%E6%97%A5%E5%BF%97" target="_blank" rel="noopener noreferrer">USN日志</a>（<ruby>更新序列号码日志<rt>Update Sequence Number Journal</rt></ruby>，或称 <ruby>更改日志<rt>Change Journal</rt></ruby>）**是一项系统管理功能（注意不要与NTFS文件系统的日志设计混淆）。 作用为记录卷中所有文件、数据流、目录的内容、属性以及各项安全设置的更改情况。应用程序可以利用日志追踪卷的更改。对于非系统卷，可以选择打开或关闭日志。当添加一个新卷后，默认情况下日志功能处于打开状态。</p></div></div><h2 id="everything" tabindex="-1"><a class="header-anchor" href="#everything"><span>Everything</span></a></h2><blockquote><p>https://www.zhihu.com/question/292538150</p><p>很多国内的，都觉得everything开源，毕竟像 utools、wox、火萤酱 等软件，都内置的everything内核</p><p>但事实上我并没有找到任何有关everything开源的代码，应该是闭源的。 但是官网有针对各类编程语言的API，已经相应的许可协议，可以使用其内核作为应用的一部分</p></blockquote><blockquote><p>https://www.voidtools.com/zh-cn/support/everything/everything_service/</p><p>官网这里面说了其原理：</p><p>Everything 服务可以索引 NTFS 分卷和监控 USN 日志。 这将可以让 Everything 以标准用户方式运行。</p><p>https://www.voidtools.com/zh-cn/support/everything/sdk/</p><p>这个是官方的 Everything SDK，可以用各种语言来使用他</p></blockquote><blockquote><p>https://github.com/search?q=everything</p><p>既然他不开源，那我尝试去看看有没有人实现了类似的功能 这两个有点像，有空再来研究</p><ul><li>https://github.com/yuzhengyang/Everything：探索Everything背后的技术（USN和MFT）</li><li>https://github.com/LeiHao0/Fake-Everything：Everything 的原理猜想与实现</li></ul></blockquote><h2 id="mp3tag" tabindex="-1"><a class="header-anchor" href="#mp3tag"><span>MP3tag</span></a></h2><blockquote><p>https://baike.baidu.com/item/MP3tag/10473015</p><p>原理：Mp3tag可以以文件名批量 <strong>添加媒体元信息</strong>，根据媒体元信息批量重命名文件，执行批量文字替换、导入导出文件信息、创建播放列表等任务</p></blockquote><h2 id="原理类" tabindex="-1"><a class="header-anchor" href="#原理类"><span>原理类</span></a></h2><h3 id="内部实现" tabindex="-1"><a class="header-anchor" href="#内部实现"><span>内部实现</span></a></h3><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/内部实现</div></div><div class="callout-content"><p></p><p>在内部，NTFS使用<a href="https://zh.wikipedia.org/wiki/B%2B%E6%A0%91" target="_blank" rel="noopener noreferrer">B+树</a>索引文件系统数据。这种数据结构的方式实现比较复杂，但能够在大多数情况下提高文件的查找速度。 <a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">文件系统日志</a>用于确保文件的元数据完整，不存在孤立的文件内容。相比于FAT文件系统，NTFS文件系统的可靠性更高。</p><p>NTFS允许对名称（包括文件名称、流名称、索引名称等）使用除了0x0000以外的任意16位值序列进行编码。这意味着支持NTFS支持UTF-16码位，但文件系统并不会检查某个<a href="https://zh.wikipedia.org/w/index.php?title=UTF-16/UCS-2&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">UTF-16</a>序列是否有效（也即允许NTFS内部任意16位整数序列，不受Unicode标准的限制）。</p></div></div><h3 id="分区引导扇区-pbs" tabindex="-1"><a class="header-anchor" href="#分区引导扇区-pbs"><span>分区引导扇区（PBS）</span></a></h3><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/分区引导扇区</div></div><div class="callout-content"><p></p><table><thead><tr><th>字节<br>偏移</th><th>字段长度<br>(字节)</th><th>典型值</th><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>0x00</td><td>3</td><td>0xEB5290</td><td>JMP 指令</td><td>用于命令处理器继续执行引导扇区后的内容</td></tr><tr><td>0x03</td><td>8</td><td><code>NTFS____</code></td><td>OEM 标识</td><td>单词“NTFS”，以及后续四个空格（0x20）<br>用于标记当前分区使用NTFS文件系统</td></tr><tr><td>0x0B</td><td>2</td><td>0x0200</td><td>每扇区字节数</td><td>说明每个扇区的字节数</td></tr><tr><td>0x0D</td><td>1</td><td>0x08</td><td>每簇扇区数</td><td>说明每个簇包含的扇区数</td></tr><tr><td>0x0E</td><td>2</td><td>0x0000</td><td>保留扇区数</td><td>被操作系统保留的扇区数，参考文献中未说明保留扇区的位置</td></tr><tr><td>0x10</td><td>3</td><td>0x000000</td><td>未使用</td><td>该字段的内容始终为零</td></tr><tr><td>0x13</td><td>2</td><td>0x0000</td><td>NTFS 未使用</td><td>该字段的内容始终为零</td></tr><tr><td>0x15</td><td>1</td><td>0xF8</td><td>介质描述符</td><td>参考文件中未说明详细信息</td></tr><tr><td>0x16</td><td>2</td><td>0x0000</td><td>未使用Unused</td><td>该字段的内容始终为零</td></tr><tr><td>0x18</td><td>2</td><td>0x003F</td><td>每磁道扇区数</td><td>说明每个磁道的扇区数</td></tr><tr><td>0x1A</td><td>2</td><td>0x00FF</td><td>磁头数</td><td>该驱动器包含的读写磁头数</td></tr><tr><td>0x1C</td><td>4</td><td>0x0000003F</td><td>隐藏扇区数</td><td>隐藏的扇区数目。参考文献中未说明隐藏扇区位置</td></tr><tr><td>0x20</td><td>4</td><td>0x00000000</td><td>未使用</td><td>NTFS未使用</td></tr><tr><td>0x24</td><td>4</td><td>0x80008000</td><td>未使用</td><td>NTFS未使用</td></tr><tr><td>0x28</td><td>8</td><td>0x00000000007FF54A</td><td>总扇区数</td><td>该分区包含的总扇区数目</td></tr><tr><td>0x30</td><td>8</td><td>0x0000000000000004</td><td>$MFT 簇编号</td><td>$MFT 所在的簇的编号</td></tr><tr><td>0x38</td><td>8</td><td>0x000000000007FF54</td><td>$MFTMirr 簇编号</td><td>$MFT镜像（备份）所在的簇的编号</td></tr><tr><td>0x40</td><td>1</td><td>0xF6</td><td>文件记录段字节数</td><td>每个文件记录段的包含的字节数目。如果该值为负数，则实际值为 2<sup>-value</sup><br>例如值 0xF6 表示记录长度为 2^10（10==-0xf6）</td></tr><tr><td>0x41</td><td>3</td><td>0x000000</td><td>未使用</td><td>NTFS未使用该字段</td></tr><tr><td>0x44</td><td>1</td><td>0x01</td><td>索引缓冲簇数</td><td>每个索引缓冲占据的簇数目，算法和文件记录段相同</td></tr><tr><td>0x45</td><td>3</td><td>0x000000</td><td>未使用</td><td>NTFS未使用该字段</td></tr><tr><td>0x48</td><td>8</td><td>0x1C741BC9741BA514</td><td>卷序列数</td><td>该分区的唯一随机编号，用于确保内容一致性</td></tr><tr><td>0x50</td><td>4</td><td>0x00000000</td><td>校验和</td><td>表中上述所有项目的校验和。文献中未说明校验算法</td></tr><tr><td>0x54</td><td>426</td><td></td><td>启动指令码</td><td>用于加载操作系统其它部分的指令码，该字段位置正是引导扇区前三个字节指向的位置</td></tr><tr><td>0x01FE</td><td>2</td><td>0xAA55</td><td>扇区结束标记</td><td>该字段用于标记一个正常扇区的结束</td></tr></tbody></table><p>操作系统首先通过0x30位置的8个字节找到 $MFT 所在的簇编号，然后将其和每簇扇区数（0x0D位置的1字节）以及每扇区字节数（0x0B位置的2字节）相乘，获得$MFT的字节偏移量。</p></div></div><h3 id="主文件表-mft" tabindex="-1"><a class="header-anchor" href="#主文件表-mft"><span><mark>主文件表（MFT）</mark></span></a></h3><p>NTFS文件系统的核心</p><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/主文件表（MFT）</div></div><div class="callout-content"><p></p><p>在NTFS中，所有文件数据——文件名、创建日期、访问权限，以及内容 —— 都作为 <a href="https://zh.wikipedi%3Ea.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener noreferrer"><strong><ruby>元数据<rt>Metadata</rt></ruby></strong></a> 储存在 **MFT（<ruby>主文件表<rt>Master File Table</rt></ruby>）**中。 其中访问权限使用 **ACL（<ruby>访问控制列表<rt>Access Control List</rt></ruby>）**实现</p><p>这种抽象的实现方式能够大大简化为文件系统添加功能的成本。例如，<strong><ruby>活动目录<rt>Active Directory</rt></ruby></strong> 服务可以很容易在文件系统中为文件添加索引字段。这种设计方式也使得 <strong><a href="https://zh.wikipedia.org/wiki/Everything_(%E8%BD%AF%E4%BB%B6)" target="_blank" rel="noopener noreferrer">Everything</a> 或者 Ultrasearch</strong> 一类的软件可以不依赖于Windows Search实现对文件和文件夹名称的实时搜索。</p><p><strong>MFT（<ruby>主文件表<rt>Master File Table</rt></ruby>）结构</strong> 支持最小化磁盘碎片的算法。一个目录项同时包含“文件名”和“文件ID”，后者是用于在主文件表中标识文件的记录编号。文件ID也包含“重用次数”信息，可用于检测对文件的过期引用。这点设计非常类似于Files-11文件系统的W_FID，和NTFS的其他部分迥然不同。</p></div></div><p>其他参考：<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%8E%A7%E6%96%87%E4%BB%B6%E8%A1%A8/8971573" target="_blank" rel="noopener noreferrer">【百度百科】主控文件表</a></p><h3 id="元文件" tabindex="-1"><a class="header-anchor" href="#元文件"><span><mark>元文件</mark></span></a></h3><p>再次补充：<a href="https://zh.wikipedi%3Ea.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener noreferrer"><strong><ruby>元数据<rt>Metadata</rt></ruby></strong></a> 储存在 **MFT（<ruby>主文件表<rt>Master File Table</rt></ruby>）**中</p><div class="callout" data-callout="wiki"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">NTFS/元文件</div></div><div class="callout-content"><p></p><p>NTFS包含若干用于定义和组织文件系统的文件。总体来说，这些文件中的绝大多数结构和其它用户文件类似（只有“$Volume”比较特殊），但不能被文件系统客户端直接访问。 这些元文件为定义文件、备份文件系统的关键数据、缓存文件系统的更改、管理空闲空间的分配、满足BIOS的要求、跟踪坏扇区单元，以及储存安全信息和磁盘空间使用情况等等多种不同需求提供支持。</p><table><thead><tr><th>区块<br>编号</th><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>0</td><td><code>$MFT</code></td><td>描述卷上的所有文件，包括<strong>文件名</strong>、<strong>时间戳</strong>、流名称<br>和数据流所在的簇的编号列表、索引、安全标识符，<br>以及<strong>文件属性</strong>（如“只读”、“压缩”、“加密”等）。</td></tr><tr><td>1</td><td><code>$MFTMirr</code></td><td>$MFT的最开始的几个关键项的副本，通常是4项（4<a href="https://zh.wikipedia.org/wiki/Kibibyte" target="_blank" rel="noopener noreferrer">KiB</a>）。</td></tr><tr><td>2</td><td><code>$LogFile</code></td><td>文件系统更改的事务日志，用于保护元数据的稳定性。</td></tr><tr><td>3</td><td><code>$Volume</code></td><td><strong>卷的相关信息</strong>，如卷对象标识符、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%B7%E6%A0%87&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">卷标</a>、文件系统版本，以及若干卷标志（包括：“正在加载”、“需要扫描”、“需要调整$LogFile大小”、“在NT4上加载”、“正在更新卷序列号”、“需要升级结构”等）。这些数据不直接在数据流中存储，而是存储于特殊的 MFT 属性中。如果卷对象标识符存在，则将会在一个 $OJBECT_ID 记录中；卷标存储在 $VOLUME_NAME 记录中；其它数据存储在 $VOLUME_INFORMATION 记录中；卷序列号储存在$Boot文件中（请参见下文）。</td></tr><tr><td>4</td><td><code>$AttrDef</code></td><td>所有NTFS项目使用到的<strong>属性的定义表</strong>，包含属性名称、属性编号和属性描述等。</td></tr><tr><td>5</td><td><code>.</code></td><td><a href="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener noreferrer">根目录</a>。目录数据存储在两个名称均为 $I30 的 $INDEX_ROOT 和 $INDEX_ALLOCATIOn 属性中</td></tr><tr><td>6</td><td><code>$Bitmap</code></td><td>一个<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%9B%BE" target="_blank" rel="noopener noreferrer">位图</a>，每一位按顺序指示卷上的对应簇正在被使用（1）或空闲（0）。</td></tr><tr><td>7</td><td><code>$Boot</code></td><td><a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%B7%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">卷引导记录</a>，该文件始终位于卷的第一个簇，其中包含<a href="https://zh.wikipedia.org/w/index.php?title=%E5%BC%95%E5%AF%BC%E4%BB%A3%E7%A0%81&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">引导代码</a>（用于定位并启动<a href="https://zh.wikipedia.org/wiki/NTLDR" target="_blank" rel="noopener noreferrer">NTLDR</a>/<a href="https://zh.wikipedia.org/w/index.php?title=Windows_Vista%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">BOOTMGR</a>）、<a href="https://zh.wikipedia.org/w/index.php?title=BIOS%E5%8F%82%E6%95%B0%E5%9D%97&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">BIOS参数块</a>（其中包含<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8D%B7%E5%BA%8F%E5%88%97%E5%8F%B7&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">卷序列号</a>），以及<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>F</mi><mi>T</mi><mtext>和</mtext></mrow><annotation encoding="application/x-tex">MFT和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">MFT</span><span class="mord cjk_fallback">和</span></span></span></span>MFTMirr所在的簇编号。</td></tr><tr><td>8</td><td><code>$BadClus</code></td><td>包含所有标记为“有<a href="https://zh.wikipedia.org/wiki/%E5%9D%8F%E6%89%87%E5%8C%BA" target="_blank" rel="noopener noreferrer">坏扇区</a>”的簇的一个文件。该文件通常被chkdsk（磁盘扫描）工具使用，用于管理所有簇状态，记录坏扇区，以及标记空白簇。该文件包含两个数据流（无论卷是否有坏道）：一个包含所有坏扇区编号的无名称流（如果卷没有坏扇区则该流长度为零），以及名称为$Bad的流，包含所有包含记录在第一个流中的簇。</td></tr><tr><td>9</td><td><code>$Secure</code></td><td><strong><a href="https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">访问控制列表</a>（ACL）数据库</strong>，NTFS将所有ACL信息集中存储于该数据库（而非每个文件独立存储各自的ACL）以节省磁盘占用并提高执行效率。此部分包含两个索引，分别是：“$SII”——可能是[<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" target="_blank" rel="noopener noreferrer">来源请求]</a><em>安全ID索引</em>，以及“$SDH”——<em>安全描述符哈希</em>。注意大部分ACL列表通常都很长，因此这个部分只是索引，记录的是实际存储ACL数据的$SDS流的位置。[<a href="https://zh.wikipedia.org/wiki/NTFS#cite_note-insidewin2kntfs-1" target="_blank" rel="noopener noreferrer">1]</a></td></tr><tr><td>10</td><td><code>$UpCase</code></td><td><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener noreferrer">Unicode</a>大写字母表，用于确保在Win32和DOS名字空间下大小写不敏感。</td></tr><tr><td>11</td><td><code>$Extend</code></td><td>文件系统目录，用于包含若干操作系统或其它软件所需要的扩展数据，如$Quota、$ObjId、$Reparse、$UsnJrnl等。</td></tr><tr><td>12...23</td><td></td><td>保留为 $MFT 扩展项使用。扩展项目是一系列附加MFT记录，用于描述未在主记录中包含的属性。例如，当卷需要磁盘清理，包含太多流，具有长文件名或者非常复杂的安全设定，以及其它特殊情况时，可能会用到保留项目</td></tr><tr><td>24</td><td><code>$Extend\\$Quota</code></td><td>磁盘限额设置。包含两个索引根目录，名称分别为$O和$Q。</td></tr><tr><td>25</td><td><code>$Extend\\$ObjId</code></td><td><a href="https://zh.wikipedia.org/w/index.php?title=%E5%88%86%E5%B8%83%E9%93%BE%E6%8E%A5%E8%B7%9F%E8%B8%AA&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener noreferrer">分布链接跟踪</a>数据。包含一个索引根目录，名称为$O。</td></tr><tr><td>26</td><td><code>$Extend\\$Reparse</code></td><td>卷上所有<a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E8%A7%A3%E6%9E%90%E7%82%B9" target="_blank" rel="noopener noreferrer">重解析点</a>（如<a href="https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener noreferrer">符号链接</a>）数据。包含一个索引根目录，名称为$R。</td></tr><tr><td><em>27 ...</em></td><td><code>*file.ext*</code></td><td>常规文件系统项目的起始位置。</td></tr></tbody></table><p>Windows对这些元文件的处理方式较为特殊，直接由NTFS.SYS进行处理，因此<strong>难以直接查看</strong>，需要使用特殊工具进行提取。 <strong>从Windows 7开始，NTFS驱动程序完全阻挡了用户访问权限，任何尝试访问元文件的请求都会直接进入<a href="https://zh.wikipedia.org/wiki/%E8%93%9D%E5%B1%8F%E6%AD%BB%E6%9C%BA" target="_blank" rel="noopener noreferrer">蓝屏死机</a>界面</strong>。</p><p>解决方案：</p><ul><li>微软 “OEM支持工具” 中的 “nfi.exe”（NTFS文件扇区信息实用工具）” 是一个可查看这些文件的工具。 例如，要查看 “$MFT” 的内容，只需使用下列命令行：<code>nfi.exe c:\\$MFT</code>。</li><li>另一个绕过操作系统保护限制的方法是使用<a href="https://zh.wikipedia.org/wiki/7-Zip" target="_blank" rel="noopener noreferrer">7-Zip</a>文件管理器工具并输入低级NTFS路径<code>\\\\.x:\\</code>，此时将会出现三个新的文件夹：<code>$extend</code>、<code>$[DELETED]</code>以及<code>[SYSTEM]</code>。 这个操作可以用于任何可移动设备，但如果需要访问当前活动分区，则需要进入离线模式（也即<a href="https://zh.wikipedia.org/wiki/WinRE" target="_blank" rel="noopener noreferrer">WinRE</a>）。</li></ul></div></div><h3 id="从mft到属性、属性表和流" tabindex="-1"><a class="header-anchor" href="#从mft到属性、属性表和流"><span>从MFT到属性、属性表和流</span></a></h3><h3 id="常驻文件和非常驻文件" tabindex="-1"><a class="header-anchor" href="#常驻文件和非常驻文件"><span>常驻文件和非常驻文件</span></a></h3><h3 id="机会锁" tabindex="-1"><a class="header-anchor" href="#机会锁"><span>机会锁</span></a></h3><h3 id="时间" tabindex="-1"><a class="header-anchor" href="#时间"><span>时间</span></a></h3><h3 id="【总结】捋一下" tabindex="-1"><a class="header-anchor" href="#【总结】捋一下"><span>【总结】捋一下</span></a></h3><h2 id="互操作性" tabindex="-1"><a class="header-anchor" href="#互操作性"><span>互操作性</span></a></h2>',42)]))}const s=e(l,[["render",d],["__file","深入NTFS.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%B7%B1%E5%85%A5NTFS.html","title":"计算机文件系统","lang":"zh-CN","frontmatter":{"description":"计算机文件系统 目录 深入NTFS 参考 主要参考：维基 / 中文维基（该词条挺全的，像个文档似的。感觉这个维基中文版写得更好）以及底部的参考文献与外部链接 微软文档：Windows Server/NTFS如何为去主文件表保留空间（MFT） 概念类 概念 NTFS（中文wiki） NTFS（新技术文件系统New Technology File Syst...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Storage/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%B7%B1%E5%85%A5NTFS.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"计算机文件系统"}],["meta",{"property":"og:description","content":"计算机文件系统 目录 深入NTFS 参考 主要参考：维基 / 中文维基（该词条挺全的，像个文档似的。感觉这个维基中文版写得更好）以及底部的参考文献与外部链接 微软文档：Windows Server/NTFS如何为去主文件表保留空间（MFT） 概念类 概念 NTFS（中文wiki） NTFS（新技术文件系统New Technology File Syst..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机文件系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"计算机文件系统","slug":"计算机文件系统","link":"#计算机文件系统","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"深入NTFS","slug":"深入ntfs","link":"#深入ntfs","children":[{"level":2,"title":"概念类","slug":"概念类","link":"#概念类","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"wiki目录","slug":"wiki目录","link":"#wiki目录","children":[]}]},{"level":2,"title":"功能类","slug":"功能类","link":"#功能类","children":[{"level":3,"title":"可伸缩性","slug":"可伸缩性","link":"#可伸缩性","children":[]},{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]}]},{"level":2,"title":"Everything","slug":"everything","link":"#everything","children":[]},{"level":2,"title":"MP3tag","slug":"mp3tag","link":"#mp3tag","children":[]},{"level":2,"title":"原理类","slug":"原理类","link":"#原理类","children":[{"level":3,"title":"内部实现","slug":"内部实现","link":"#内部实现","children":[]},{"level":3,"title":"分区引导扇区（PBS）","slug":"分区引导扇区-pbs","link":"#分区引导扇区-pbs","children":[]},{"level":3,"title":"主文件表（MFT）","slug":"主文件表-mft","link":"#主文件表-mft","children":[]},{"level":3,"title":"元文件","slug":"元文件","link":"#元文件","children":[]},{"level":3,"title":"从MFT到属性、属性表和流","slug":"从mft到属性、属性表和流","link":"#从mft到属性、属性表和流","children":[]},{"level":3,"title":"常驻文件和非常驻文件","slug":"常驻文件和非常驻文件","link":"#常驻文件和非常驻文件","children":[]},{"level":3,"title":"机会锁","slug":"机会锁","link":"#机会锁","children":[]},{"level":3,"title":"时间","slug":"时间","link":"#时间","children":[]},{"level":3,"title":"【总结】捋一下","slug":"【总结】捋一下","link":"#【总结】捋一下","children":[]}]},{"level":2,"title":"互操作性","slug":"互操作性","link":"#互操作性","children":[]}]}],"git":{},"readingTime":{"minutes":17.62,"words":5285},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/深入NTFS.md","excerpt":"\\n<h1>目录</h1>\\n<h1>深入NTFS</h1>\\n<p>参考</p>\\n<ul>\\n<li>主要参考：<a href=\\"https://en.wikipedia.org/wiki/NTFS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">维基</a> / <a href=\\"https://zh.wikipedia.org/wiki/NTFS\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">中文维基</a>（该词条挺全的，像个文档似的。感觉这个维基<strong>中文版写得更好</strong>）以及底部的参考文献与外部链接</li>\\n<li>微软文档：<a href=\\"https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/backup-and-storage/ntfs-reserves-space-for-mft\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Windows Server/NTFS如何为去主文件表保留空间（MFT）</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/深入NTFS.md","value":{"title":"深入NTFS","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Storage/文件系统/深入NTFS.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,p as data};
