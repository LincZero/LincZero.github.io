import{_ as s,e as a,g as e,o as l}from"./app-CbGUE4hV.js";const n={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="docker-容器的数据卷" tabindex="-1"><a class="header-anchor" href="#docker-容器的数据卷"><span>Docker 容器的数据卷</span></a></h1><h2 id="数据卷的概念" tabindex="-1"><a class="header-anchor" href="#数据卷的概念"><span>数据卷的概念</span></a></h2><ul><li>思考 <ul><li>Docker容器删除后，在容器中产生的数据还在吗</li><li>Docker容器和外部机器可以交换文件吗</li><li>容器之间进行数据传输</li></ul></li><li>数据卷 <ul><li>概念：是宿主机里的一个用于挂载到容器的目录或文件，能被挂载到容器里面，容器内部的挂载目录的内容与外部目录内容同步</li><li>特点：数据和容器是多对多关系</li><li>作用：解决以上思考的三个问题 <ul><li>数据持久化</li><li>外部机器和容器间接通信</li><li>容器之间数据交换</li></ul></li></ul></li></ul><h2 id="宿主机的概念" tabindex="-1"><a class="header-anchor" href="#宿主机的概念"><span>宿主机的概念</span></a></h2><p>进入的容器后的环境，也叫宿主机。宿主机外部的Linux系统主机叫外部机器<br> 这里的宿主机其实有点像window下的虚拟机</p><h2 id="配置数据卷" tabindex="-1"><a class="header-anchor" href="#配置数据卷"><span>配置数据卷</span></a></h2><p>【配置数据卷】<br> 创建启动容器时，使用-v参数设置数据卷</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 。。。</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 宿主机目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:容器内目录</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">如：docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=c1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /root/data:/root/data_container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [/bin/bash]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>【注意事项】</p><ul><li>目录必须是绝对路径</li><li>若目录不存在会自动创建</li><li>可挂载多个数据卷</li></ul><p>【配置数据卷容器】</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=c3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /volume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [/bin/bash]          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 创建数据卷容器，这里没有了左侧冒号参数，系统会自动分配一个宿主机数据卷</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=c1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --volumes-from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [/bin/bash]   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 普通容器挂载数据卷容器，这里冒号左右都没指定，默认用同c3一样的目录路径</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name=c2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --volumes-from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> centos:7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [/bin/bash]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const r=s(n,[["render",t],["__file","3. Docker 容器的数据卷.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/Docker/3.%20Docker%20%E5%AE%B9%E5%99%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7.html","title":"Docker 容器的数据卷","lang":"zh-CN","frontmatter":{"description":"Docker 容器的数据卷 数据卷的概念 思考 Docker容器删除后，在容器中产生的数据还在吗 Docker容器和外部机器可以交换文件吗 容器之间进行数据传输 数据卷 概念：是宿主机里的一个用于挂载到容器的目录或文件，能被挂载到容器里面，容器内部的挂载目录的内容与外部目录内容同步 特点：数据和容器是多对多关系 作用：解决以上思考的三个问题 数据持久化...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/Docker/3.%20Docker%20%E5%AE%B9%E5%99%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8D%B7.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Docker 容器的数据卷"}],["meta",{"property":"og:description","content":"Docker 容器的数据卷 数据卷的概念 思考 Docker容器删除后，在容器中产生的数据还在吗 Docker容器和外部机器可以交换文件吗 容器之间进行数据传输 数据卷 概念：是宿主机里的一个用于挂载到容器的目录或文件，能被挂载到容器里面，容器内部的挂载目录的内容与外部目录内容同步 特点：数据和容器是多对多关系 作用：解决以上思考的三个问题 数据持久化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 容器的数据卷\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.37,"words":412},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Docker/Docker/3. Docker 容器的数据卷.md","excerpt":"\\n<h2>数据卷的概念</h2>\\n<ul>\\n<li>思考\\n<ul>\\n<li>Docker容器删除后，在容器中产生的数据还在吗</li>\\n<li>Docker容器和外部机器可以交换文件吗</li>\\n<li>容器之间进行数据传输</li>\\n</ul>\\n</li>\\n<li>数据卷\\n<ul>\\n<li>概念：是宿主机里的一个用于挂载到容器的目录或文件，能被挂载到容器里面，容器内部的挂载目录的内容与外部目录内容同步</li>\\n<li>特点：数据和容器是多对多关系</li>\\n<li>作用：解决以上思考的三个问题\\n<ul>\\n<li>数据持久化</li>\\n<li>外部机器和容器间接通信</li>\\n<li>容器之间数据交换</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Docker/Docker/3. Docker 容器的数据卷.md","value":{"title":"3. Docker 容器的数据卷","path":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Docker/Docker/3. Docker 容器的数据卷.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,p as data};
