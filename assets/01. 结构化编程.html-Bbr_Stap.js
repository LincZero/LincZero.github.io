import{_ as a,c as s,e,o as t}from"./app-CgN_bpaE.js";const l={};function o(i,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="结构化编程" tabindex="-1"><a class="header-anchor" href="#结构化编程"><span>结构化编程</span></a></h1><h2 id="块作用域" tabindex="-1"><a class="header-anchor" href="#块作用域"><span>块作用域</span></a></h2><p>嵌套块重定义变量</p><ul><li>C/C++、js：可以在嵌套的块中重定义一个变量。在内层定义的变量会覆盖在外层定义的变量。</li><li>Java：认为这样有可能会导致程序设计错误，因此在Java中不允许这样做。</li></ul><h2 id="流程控制-for、switch、elif" tabindex="-1"><a class="header-anchor" href="#流程控制-for、switch、elif"><span>流程控制（for、switch、elif）</span></a></h2><h3 id="for循环语句" tabindex="-1"><a class="header-anchor" href="#for循环语句"><span>for循环语句</span></a></h3><ul><li>C语言、Java、js <ul><li><code>for(exg1;exg2;exg3){ }</code>，分号分割不同操作，逗号可分割多个表达式</li></ul></li><li>Python <ul><li><code>for i in list:</code>，<code>for i in range(start,end[,step]):</code></li></ul></li></ul><h3 id="switch条件判断语句" tabindex="-1"><a class="header-anchor" href="#switch条件判断语句"><span>switch条件判断语句</span></a></h3><ul><li>Python <ul><li>没有<code>switch</code>语句，其他语言几乎都有</li></ul></li></ul><h3 id="if-else条件判断语句" tabindex="-1"><a class="header-anchor" href="#if-else条件判断语句"><span>if-else条件判断语句</span></a></h3><ul><li>C语言、Java、js <ul><li><code>if - else if - else</code></li></ul></li><li>python <ul><li><code>if - elif - else</code></li></ul></li></ul><h3 id="高级循环" tabindex="-1"><a class="header-anchor" href="#高级循环"><span>高级循环</span></a></h3><ul><li><p>Java（Java SE 5.0新增）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>			<span class="token comment">// for</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>variable<span class="token operator">:</span>collection<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>			<span class="token comment">// foreach</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> a<span class="token punctuation">)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C++11 foreach</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>for (int i=1; i&lt;=10; i++) statement;			// for
for (double x : prices) cout &lt;&lt; x &lt;&lt; std::endl;	// 只能输出
for (double &amp;x : prices) x = x*0.8;				// 可以改变数组的内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C++ QT</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>foreach (int, QList&lt;int&gt;) { /*process*/ }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Python</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>for i in range(start,end[,step]):				# 基于次数循环
for i in list:									# 基于迭代器循环
sum(i*i for i in range(10)						# exp-for-in 生成器表达式（和列表初始化）
[x^2 for x in range(10)]						# exp-for-in 列表解析
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JavaScript</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>			<span class="token comment">// for</span>
array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// foreach，回调匿名函数</span>
array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/**/</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// foreach，回调箭头函数</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token parameter">e</span><span class="token operator">=&gt;</span>e<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>					<span class="token comment">// filter	[3]		返回布尔，可简写return</span>
array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token operator">*</span>e<span class="token punctuation">}</span><span class="token punctuation">)</span>				<span class="token comment">// map		[1,4,9]	映射</span>
array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> pre<span class="token operator">+</span>next<span class="token punctuation">}</span><span class="token punctuation">)</span>	<span class="token comment">// reduce	6		将返回值重新赋值给pre</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JavaScript Query</p><p>略</p></li></ul><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h2><ul><li>C、Java、Js： <ul><li><code>条件 ? true_exp : false_exp</code></li></ul></li><li>Python： <ul><li><code>true_exp if 条件 else false_exp</code></li></ul></li></ul><h2 id="遍历对象数据类型" tabindex="-1"><a class="header-anchor" href="#遍历对象数据类型"><span>遍历对象数据类型</span></a></h2><ul><li><code>Js遍历对象</code><ul><li>方法上分类 <ul><li><strong>forEach遍历</strong>：<code>Object.keys(obj).forEach((key)=&gt;{})</code></li><li><strong>for..in..遍历</strong>：<code>for(var k in obj) { }</code>（遍历键）</li><li><strong>其他</strong>：<code>Object.getOwnPropertyNames(obj)</code>，高级循环函数等方法</li></ul></li><li>键值对上分类 <ul><li><strong>遍历对象键值对</strong>：遍历键，再循环中引用<code>obj[key]</code>为值</li><li><strong>遍历对象键</strong>：<code>Object.keys（obj）</code>，<code>for(var k in obj) { }</code></li><li><strong>遍历对象值</strong>：<code>Object.values（obj）</code></li></ul></li></ul></li><li><code>Python遍历字典</code><ul><li>键值对上分类 <ul><li><strong>遍历字典键值对</strong>：<code>for k,v in dict.items():</code></li><li><strong>遍历字典键</strong>：<code>for k in dict.keys():</code>，<code>for k in dict:</code></li><li><strong>遍历字典值</strong>：<code>for v in dict.values():</code></li></ul></li></ul></li></ul><h3 id="跳出多重嵌套" tabindex="-1"><a class="header-anchor" href="#跳出多重嵌套"><span>跳出多重嵌套</span></a></h3><p><mark>与C/C++不同</mark>：跳出多重嵌套</p><ul><li><p>Java还提供了一种带标签的break语句，用于跳出多重嵌套的循环语句。有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。</p><p>标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号</p><p>事实上，可以将标签应用到任何语句中，甚至可以应用到if语句或者块语句中。（可能可以用来模拟goto语句，但不建议那样做）</p></li></ul>`,22)]))}const c=a(l,[["render",o],["__file","01. 结构化编程.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 结构化编程 块作用域 嵌套块重定义变量 C/C++、js：可以在嵌套的块中重定义一个变量。在内层定义的变量会覆盖在外层定义的变量。 Java：认为这样有可能会导致程序设计错误，因此在Java中不允许这样做。 流程控制（for、switch、elif） for循环语句 C语言、Java、js for(exg1;exg2;exg3...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 结构化编程 块作用域 嵌套块重定义变量 C/C++、js：可以在嵌套的块中重定义一个变量。在内层定义的变量会覆盖在外层定义的变量。 Java：认为这样有可能会导致程序设计错误，因此在Java中不允许这样做。 流程控制（for、switch、elif） for循环语句 C语言、Java、js for(exg1;exg2;exg3..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"结构化编程","slug":"结构化编程","link":"#结构化编程","children":[{"level":2,"title":"块作用域","slug":"块作用域","link":"#块作用域","children":[]},{"level":2,"title":"流程控制（for、switch、elif）","slug":"流程控制-for、switch、elif","link":"#流程控制-for、switch、elif","children":[{"level":3,"title":"for循环语句","slug":"for循环语句","link":"#for循环语句","children":[]},{"level":3,"title":"switch条件判断语句","slug":"switch条件判断语句","link":"#switch条件判断语句","children":[]},{"level":3,"title":"if-else条件判断语句","slug":"if-else条件判断语句","link":"#if-else条件判断语句","children":[]},{"level":3,"title":"高级循环","slug":"高级循环","link":"#高级循环","children":[]}]},{"level":2,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[]},{"level":2,"title":"遍历对象数据类型","slug":"遍历对象数据类型","link":"#遍历对象数据类型","children":[{"level":3,"title":"跳出多重嵌套","slug":"跳出多重嵌套","link":"#跳出多重嵌套","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/01. 结构化编程.md","excerpt":"\\n<h1>目录</h1>\\n<h1>结构化编程</h1>\\n<h2>块作用域</h2>\\n<p>嵌套块重定义变量</p>\\n<ul>\\n<li>C/C++、js：可以在嵌套的块中重定义一个变量。在内层定义的变量会覆盖在外层定义的变量。</li>\\n<li>Java：认为这样有可能会导致程序设计错误，因此在Java中不允许这样做。</li>\\n</ul>\\n<h2>流程控制（for、switch、elif）</h2>\\n<h3>for循环语句</h3>\\n<ul>\\n<li>C语言、Java、js\\n<ul>\\n<li><code>for(exg1;exg2;exg3){  }</code>，分号分割不同操作，逗号可分割多个表达式</li>\\n</ul>\\n</li>\\n<li>Python\\n<ul>\\n<li><code>for i in list:</code>，<code>for i in range(start,end[,step]):</code></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,r as data};
