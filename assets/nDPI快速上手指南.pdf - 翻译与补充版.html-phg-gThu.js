import{_ as i,c as l,b as p,a as s,d as a,e as t,o,r as c}from"./app-U5mPla4b.js";const r={},d={href:"https://blog.csdn.net/banruoju/article/details/78806533",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/A_lber_t/article/details/89552332",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/ntop/nDPI/blob/dev/doc/guide/nDPI_QuickStartGuide.pdf",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/ntop/nDPI/blob/dev/doc/guide/nDPI_QuickStartGuide.pdf",target:"_blank",rel:"noopener noreferrer"};function m(b,n){const e=c("ExternalLinkIcon");return o(),l("div",null,[n[9]||(n[9]=p('<h1 id="ndpi" tabindex="-1"><a class="header-anchor" href="#ndpi"><span>nDPI</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="ndpi快速上手指南" tabindex="-1"><a class="header-anchor" href="#ndpi快速上手指南"><span>nDPI快速上手指南</span></a></h1><p>参考：</p>',4)),s("ul",null,[s("li",null,[s("a",d,[n[0]||(n[0]=a("nDPI快速上手指南")),t(e)]),n[4]||(n[4]=a(" 或 ")),s("a",u,[n[1]||(n[1]=a("nDPI – 快速入门指南(翻译自官方文档)")),t(e)]),n[5]||(n[5]=a("，这两篇其实都是对官方文档的一个润色翻译，我综合着来看 ")),s("ul",null,[s("li",null,[n[3]||(n[3]=a("nDPI官方文档 ")),s("a",k,[n[2]||(n[2]=a("nDPI- Quick Start Guide")),t(e)])])])])]),s("p",null,[n[7]||(n[7]=a("这是一篇针对nDPI官方文档 ")),s("a",v,[n[6]||(n[6]=a("nDPI- Quick Start Guide")),t(e)]),n[8]||(n[8]=a(" 的翻译，由于文档太老了(13年)，所以部分接口已经发生了变化，本人将基于Version2.0对这些过时的接口进行更新。由于水平有限，翻译的、修补的内容不保证一定准确，各位最好上手之后对照源码细读一遍吧。"))]),n[10]||(n[10]=p(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>nDPI是一个从OpenDPI发展而来的DPI库，现在由ntop组织负责维护。</p><p>为了给你提供一个跨平台DPI的体验，nDPI除了支持Unix平台，还支持Windows(和Mac)。为了使nDPI更加适合应用于流量监控，我们将会持续进行优化，比如一旦发现存在对网络流量监控非必须的、却拖慢了DPI引擎的功能时，可以执行关闭。</p><p>不管使用了哪个端口，nDPI都可以探测到实际的应用层协议。这意味着既可以探测运行在非标准端口上的协议(e.g探测运行在非80端口上的http流量)，又可以探测运行在一个标准端口上的其他协议(e.g探测运行在80端口上的Skype流量)。这是因为现在端口跟协议关联的概念已经被打破。</p><p>在过去的几个月里，我们已经为nDPI增加了以下多个功能：</p><ul><li>一个名为ndpiReader的增强型demo</li><li>可以被编译进kernel成为一个模块，使其更加高效</li><li>从各方面提升了识别速度，目前nDPI在这方面已经远远超过了前代的OpenDPI</li><li>新增了大量的协议支持(目前为止已经支持超过180种协议)，覆盖范围从商业类协议(如SAP和Citrix)到桌面协议(如Dropbox和Spotify)</li><li>可以定义基于端口(端口范围)的协议探测，丰富了传统的仅仅基于端口的探测手段</li><li>为了使nDPI支持探测加密连接，我们增加一个用于SSL的解码器(同时支持客户端和服务端)，用以找出那些使用了加密证书的协议。这使我们可以识别那些以前无法探测到的协议，比如Citrix和AppleiCloud等</li><li>通过基于额外的一些字符串匹配方式，我们可以支持识别一些常见的应用子协议</li></ul><h2 id="ndpi库编译与运行" tabindex="-1"><a class="header-anchor" href="#ndpi库编译与运行"><span>nDPI库编译与运行</span></a></h2><p>在你搭建ntop和nProbe的过程中nDPI就会自动被下载。也可以作为一个独立的DPI库来使用，源代码可以通过gitclone https://github.com/ntop/nDPI.git下载</p><p>nDPI库</p><h3 id="编译-ndpi-源代码" tabindex="-1"><a class="header-anchor" href="#编译-ndpi-源代码"><span>编译 nDPI 源代码</span></a></h3><p>使用nDPI库很简单。编译这个库时需要依赖以下这些工具和组件：</p><ul><li>GNUautotools/libtool</li><li>gawk</li><li>gcc</li><li>libpcap 或 PF_RING (虽然是可选的，但非常建议装上)</li></ul><p>安装方式跟平台以及发行版相关，这里列举了一些：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Ubuntu/Debian</span>
$ <span class="token function">apt-get</span> <span class="token function">install</span> build-essential
$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> autoconf automake autogen libpcap-dev libtool

<span class="token comment"># Fedora/CentOS</span>
$ yum groupinstall <span class="token string">&quot;Development tools&quot;</span>
$ yum <span class="token function">install</span> <span class="token function">git</span> autoconf automake autogen libpcap-devel libtool

<span class="token comment"># MacOSX(using http://brew.sh)</span>
$ brew <span class="token function">install</span> autoconf automake libtool <span class="token function">git</span>

<span class="token comment"># FreeBSD</span>
$ pkg <span class="token function">install</span> autoconf automake libtool gmake <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在装完了依赖的工具之后，你就可以通过以下这组命令来编译nDPI了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./autogen.sh
$ <span class="token function">make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译示例程序-——-ndpireader" tabindex="-1"><a class="header-anchor" href="#编译示例程序-——-ndpireader"><span>编译示例程序 —— ndpiReader</span></a></h3><p>Version2.0版本在工程目录下执行make时，默认就编译了example目录下的ndpiReader</p><h4 id="ndpireader-的命令行选项" tabindex="-1"><a class="header-anchor" href="#ndpireader-的命令行选项"><span>ndpiReader 的命令行选项</span></a></h4><p>以下列出了该demo程序的有效选项以及对应的简单解释</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./ndpiReader <span class="token parameter variable">-h</span>
ndpiReader-i <span class="token operator">&lt;</span>file<span class="token operator">|</span>device<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-f <span class="token operator">&lt;</span>filter<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-s <span class="token punctuation">]</span><span class="token punctuation">[</span>-m<span class="token operator">&lt;</span>duration<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>-p<span class="token operator">&lt;</span>protos<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>-l  <span class="token punctuation">[</span>-q<span class="token punctuation">]</span><span class="token punctuation">[</span>-d<span class="token punctuation">]</span><span class="token punctuation">[</span>-h<span class="token punctuation">]</span><span class="token punctuation">[</span>-t<span class="token punctuation">]</span><span class="token punctuation">[</span>-v <span class="token punctuation">]</span>
<span class="token punctuation">[</span>-n<span class="token operator">&lt;</span>threads<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-w <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-j <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span><span class="token punctuation">]</span>

<span class="token comment"># Usage:</span>
-i<span class="token operator">&lt;</span>file.pcap<span class="token operator">|</span>device<span class="token operator">&gt;</span>                   <span class="token operator">|</span>指定一个需要被识别的pcap文件/文件列表，或者需要被嗅探的
                                                   <span class="token operator">|</span>设备接口/接口列表<span class="token punctuation">(</span>文件列表或接口列表使用<span class="token string">&quot;,&quot;</span>作为分隔符<span class="token punctuation">)</span>
-f<span class="token operator">&lt;</span>BPF filter<span class="token operator">&gt;</span>                            <span class="token operator">|</span>指定一条BPF规则的过滤字串
-s<span class="token operator">&lt;</span>duration<span class="token operator">&gt;</span>                             <span class="token operator">|</span>最大的嗅探时间<span class="token punctuation">(</span>显然只在嗅探接口时生效<span class="token punctuation">)</span>
-m<span class="token operator">&lt;</span>duration<span class="token operator">&gt;</span>                            <span class="token operator">|</span> pcap文件分段解析超时时间<span class="token punctuation">(</span>显然只在解析pcap文件时生效<span class="token punctuation">)</span>
-p<span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>.protos                          <span class="token operator">|</span>指定一个自定义的协议识别配置文件<span class="token punctuation">(</span>eg.protos.txt<span class="token punctuation">)</span>
-l<span class="token operator">&lt;</span>num loops<span class="token operator">&gt;</span>                           <span class="token operator">|</span>指定循环执行嗅探的次数<span class="token punctuation">(</span>仅用于测试<span class="token punctuation">)</span>
-n<span class="token operator">&lt;</span>num threads<span class="token operator">&gt;</span>                       <span class="token operator">|</span>指定线程数量，缺省跟设备接口数量对应
                                                   <span class="token operator">|</span>如果传入的是pcap文件时固定使用单线程
-j<span class="token operator">&lt;</span>file.json<span class="token operator">&gt;</span>                               <span class="token operator">|</span>指定一个输出包内容的json文件
-g<span class="token operator">&lt;</span>id:id<span class="token punctuation">..</span>.<span class="token operator">&gt;</span>                                <span class="token operator">|</span>指定线程-CPU亲和关系映射表
<span class="token parameter variable">-d</span>                                              <span class="token operator">|</span>禁止协议猜测功能
<span class="token parameter variable">-q</span>                                              <span class="token operator">|</span>安静模式，意味着不打印信息
<span class="token parameter variable">-t</span>                                               <span class="token operator">|</span>解析GTP隧道协议
<span class="token parameter variable">-r</span>                                               <span class="token operator">|</span>打印 nDPI版本和git版本
-w<span class="token operator">&lt;</span>path<span class="token operator">&gt;</span>                                  <span class="token operator">|</span>指定测试信息的输出文件
<span class="token parameter variable">-h</span>                                              <span class="token operator">|</span> help信息
-v<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>                                  <span class="token operator">|</span>按级别进一步打印包的详细信息，分为1、2、3级
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="协议文件" tabindex="-1"><a class="header-anchor" href="#协议文件"><span>协议文件</span></a></h3><p><strong>通过基于字符串的匹配方式</strong>，nDPI可以支持识别应用层的子协议。这是因为存在很多像 AppleiCloud/iMessage, WhatsApp 等新出现的子协议，以及其他使用http(s)的协议，这些协议可以通过解码主机SSL证书或http头中的&quot;Host&quot;字段而被识别。</p><p>因此我们决定将一个基于流行的Aho-Corasick 算法的高效字符匹配库嵌入到nDPI中，用于数十万子字符的高效匹配（即在普通硬件上能足够快地支持10Gb的流量）。</p><p>通过使用一个协议文件，你可以在运行时设置自定义的子协议，格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Subprotocols</span>
<span class="token comment"># Format:</span>
<span class="token comment"># host:&quot;&lt;value&gt;&quot;,host:&quot;&lt;value&gt;&quot;,.....@&lt;subproto&gt;</span>
host:<span class="token string">&quot;googlesyndication.com&quot;</span>@Google
host:<span class="token string">&quot;venere.com&quot;</span>@Venere
host:<span class="token string">&quot;kataweb.it&quot;</span>,host:<span class="token string">&quot;repubblica.it&quot;</span>@Repubblica
host:<span class="token string">&quot;ntop&quot;</span>@ntop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以配置基于IP的子协议，格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># IP based Subprotocols</span>
<span class="token comment"># Format:</span>
<span class="token comment"># ip:&lt;value&gt;,ip:&lt;value&gt;,.....@&lt;subproto&gt;</span>
ip:213.75.170.11@CustomProtocol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以配置基于端口的子协议，格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Format:</span>
<span class="token comment"># &lt;tcp|udp&gt;:&lt;port&gt;,&lt;tcp|udp&gt;:&lt;port&gt;,.....@&lt;proto&gt;</span>
tcp:81,tcp:8181@HTTP
udp:5061-5062@SIP
tcp:860,udp:860,tcp:3260,udp:3260@iSCSI
tcp:3000@ntop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在运行 ndpiReader 时加上使用 “-p” 选项，就可以测试你自定义的配置协议了。当然你也可以通过在你的程序中调用nDPI的API <code>ndpi_load_protocols_file()</code> 来测试你的配置。</p><h2 id="示例-——-ndpireader程序" tabindex="-1"><a class="header-anchor" href="#示例-——-ndpireader程序"><span>示例 —— ndpiReader程序</span></a></h2><p>这节中我们将展示一些demo程序 ndpiReader 的使用范例。</p><h3 id="现场捕获模式" tabindex="-1"><a class="header-anchor" href="#现场捕获模式"><span>现场捕获模式</span></a></h3><p>下面这个例子展示了ndpiReader的现场捕获模式，其中“-i”选项用来指定需要进行嗅探的设备接口，“-s” 选项指定了嗅探的时间。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$sudo</span> ./ndpiReader <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-s</span> <span class="token number">20</span>
-----------------------------------------------------------
*NOTE: This is demo app to show *some* nDPI features.
*In this demo we have implemented only some basic features
*just to show you what you can <span class="token keyword">do</span> with the library. Feel
*free to extend it and send us the patches <span class="token keyword">for</span> inclusion
------------------------------------------------------------
UsingnDPI <span class="token punctuation">(</span><span class="token number">2.0</span>.0-838-6607c33<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>
Capturinglive traffic from device eth0<span class="token punctuation">..</span>.
Capturingtraffic up to <span class="token number">5</span> seconds
Runningthread <span class="token number">0</span><span class="token punctuation">..</span>.

nDPIMemory statistics:
nDPIMemory <span class="token punctuation">(</span>once<span class="token punctuation">)</span>: <span class="token number">93.13</span> KB
FlowMemory <span class="token punctuation">(</span>per flow<span class="token punctuation">)</span>: <span class="token number">1.25</span> KB
ActualMemory: <span class="token number">1.49</span> MB
PeakMemory: <span class="token number">1.49</span> MB
Trafficstatistics:
Ethernetbytes: <span class="token number">80367</span> <span class="token punctuation">(</span>includes ethernet CRC/IFC/trailer<span class="token punctuation">)</span>
Discardedbytes: <span class="token number">1200</span>
IPpackets: <span class="token number">236</span> of <span class="token number">256</span> packets total
IPbytes: <span class="token number">74703</span> <span class="token punctuation">(</span>avg pkt size <span class="token number">291</span> bytes<span class="token punctuation">)</span>
Uniqueflows: <span class="token number">165</span>
TCPPackets: <span class="token number">0</span>
UDPPackets: <span class="token number">230</span>
VLANPackets: <span class="token number">4</span>
MPLSPackets: <span class="token number">0</span>
PPPoEPackets: <span class="token number">0</span>
FragmentedPackets: <span class="token number">0</span>
MaxPacket size: <span class="token number">328</span>
PacketLen <span class="token operator">&lt;</span> <span class="token number">64</span>: <span class="token number">28</span>
PacketLen <span class="token number">64</span>-128: <span class="token number">9</span>
PacketLen <span class="token number">128</span>-256: <span class="token number">6</span>
PacketLen <span class="token number">256</span>-1024: <span class="token number">193</span>
PacketLen <span class="token number">1024</span>-1500: <span class="token number">0</span>
PacketLen <span class="token operator">&gt;</span> <span class="token number">1500</span>: <span class="token number">0</span>
nDPIthroughput: <span class="token number">47.22</span> pps / <span class="token number">125.62</span> Kb/sec
Analysisbegin: 01/Jan/1970 08:00:00
Analysisend: 01/Jan/1970 08:00:00
Trafficthroughput: <span class="token number">47.22</span> pps / <span class="token number">125.62</span> Kb/sec
Trafficduration: <span class="token number">4.998</span> sec
Guessedflow protos: <span class="token number">1</span>
Detectedprotocols:
Unknown packets: <span class="token number">194</span> bytes: <span class="token number">69976</span> flows: <span class="token number">143</span>
NetBIOS packets: <span class="token number">19</span> bytes: <span class="token number">2116</span> flows: <span class="token number">8</span>
SSDP packets: <span class="token number">2</span> bytes: <span class="token number">416</span> flows: <span class="token number">2</span>
IGMP packets: <span class="token number">2</span> bytes: <span class="token number">120</span> flows: <span class="token number">2</span>
ICMPV6 packets: <span class="token number">4</span> bytes: <span class="token number">344</span> flows: <span class="token number">1</span>
DHCPV6 packets: <span class="token number">3</span> bytes: <span class="token number">455</span> flows: <span class="token number">3</span>
LLMNR packets: <span class="token number">10</span> bytes: <span class="token number">760</span> flows: <span class="token number">5</span>
Cloudflare packets: <span class="token number">2</span> bytes: <span class="token number">516</span> flows: <span class="token number">1</span>
Protocolstatistics:
Acceptable <span class="token number">4727</span> bytes
Unrated <span class="token number">69976</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件捕获模式" tabindex="-1"><a class="header-anchor" href="#文件捕获模式"><span>文件捕获模式</span></a></h3><p>最简单的创建一个pcap文件的方法是使用tcpdump命令，就像下面这个例子一项：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$sudo</span> tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-w</span> /var/tmp/capture.pcap <span class="token parameter variable">-v</span>
tcpdump:listening on eth0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size 262144bytes
^C248packets captured
252packets received by filter
0packets dropped by kernel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦pcap文件被创建，你就可以像下面这样运行ndpiReader：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$sudo</span> ./ndpiReader <span class="token parameter variable">-i</span> /var/tmp/capture.pcap
-----------------------------------------------------------
*NOTE: This is demo app to show *some* nDPI features.
*In this demo we have implemented only some basic features
*just to show you what you can <span class="token keyword">do</span> with the library. Feel
*free to extend it and send us the patches <span class="token keyword">for</span> inclusion
------------------------------------------------------------
UsingnDPI <span class="token punctuation">(</span><span class="token number">2.0</span>.0-838-6607c33<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">1</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span>
Capturinglive traffic from device eth0<span class="token punctuation">..</span>.
Capturingtraffic up to <span class="token number">5</span> seconds
Runningthread <span class="token number">0</span><span class="token punctuation">..</span>.
nDPIMemory statistics:
nDPIMemory <span class="token punctuation">(</span>once<span class="token punctuation">)</span>: <span class="token number">93.13</span> KB
FlowMemory <span class="token punctuation">(</span>per flow<span class="token punctuation">)</span>: <span class="token number">1.25</span> KB
ActualMemory: <span class="token number">1.49</span> MB
PeakMemory: <span class="token number">1.49</span> MB

Trafficstatistics:
Ethernetbytes: <span class="token number">80650</span> <span class="token punctuation">(</span>includes ethernet CRC/IFC/trailer<span class="token punctuation">)</span>
Discardedbytes: <span class="token number">1020</span>
IPpackets: <span class="token number">231</span> of <span class="token number">248</span> packets total
IPbytes: <span class="token number">75106</span> <span class="token punctuation">(</span>avg pkt size <span class="token number">302</span> bytes<span class="token punctuation">)</span>
Uniqueflows: <span class="token number">164</span>
TCPPackets: <span class="token number">2</span>
UDPPackets: <span class="token number">227</span>
VLANPackets: <span class="token number">1</span>
MPLSPackets: <span class="token number">0</span>
PPPoEPackets: <span class="token number">0</span>
FragmentedPackets: <span class="token number">0</span>
MaxPacket size: <span class="token number">328</span>
PacketLen <span class="token operator">&lt;</span> <span class="token number">64</span>: <span class="token number">19</span>
PacketLen <span class="token number">64</span>-128: <span class="token number">6</span>
PacketLen <span class="token number">128</span>-256: <span class="token number">13</span>
PacketLen <span class="token number">256</span>-1024: <span class="token number">193</span>
PacketLen <span class="token number">1024</span>-1500: <span class="token number">0</span>
PacketLen <span class="token operator">&gt;</span> <span class="token number">1500</span>: <span class="token number">0</span>
nDPIthroughput: <span class="token number">155.03</span> K pps / <span class="token number">412.96</span> Mb/sec
Analysisbegin: <span class="token number">14</span>/Dec/2017 <span class="token number">15</span>:37:39
Analysisend: <span class="token number">14</span>/Dec/2017 <span class="token number">15</span>:37:44
Trafficthroughput: <span class="token number">49.59</span> pps / <span class="token number">135.25</span> Kb/sec
Trafficduration: <span class="token number">4.659</span> sec
Guessedflow protos: <span class="token number">0</span>

Detectedprotocols:
Unknown packets: <span class="token number">200</span> bytes: <span class="token number">71136</span> flows: <span class="token number">146</span>
MDNS packets: <span class="token number">6</span> bytes: <span class="token number">1197</span> flows: <span class="token number">3</span>
NetBIOS packets: <span class="token number">6</span> bytes: <span class="token number">552</span> flows: <span class="token number">3</span>
SSDP packets: <span class="token number">3</span> bytes: <span class="token number">624</span> flows: <span class="token number">2</span>
ICMPV6 packets: <span class="token number">1</span> bytes: <span class="token number">86</span> flows: <span class="token number">1</span>
DHCPV6 packets: <span class="token number">5</span> bytes: <span class="token number">761</span> flows: <span class="token number">5</span>
LLMNR packets: <span class="token number">10</span> bytes: <span class="token number">750</span> flows: <span class="token number">4</span>

Protocolstatistics:
Acceptable <span class="token number">3970</span> bytes
Unrated <span class="token number">71136</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="协议文件-1" tabindex="-1"><a class="header-anchor" href="#协议文件-1"><span>协议文件</span></a></h3><p>为了阐述清楚协议文件的作用，我们现在就来讲解如何识别ntop.org的流量。</p><p>可以像下面这样编辑protos.txt.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$echo</span> <span class="token string">&#39;host:&quot;ntop.org&quot;@nTop&#39;</span> <span class="token operator">&gt;</span> protos.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改完协议文件之后，你就可以像下面这样运行ndpiReader：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$sudo</span> ./ndpiReader <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-s</span> <span class="token number">30</span> <span class="token parameter variable">-p</span> ./protos.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="api-ndpi" tabindex="-1"><a class="header-anchor" href="#api-ndpi"><span>API nDPI</span></a></h2><p>这节中高亮的就是nDPI的API。</p><p>这节中将ndpiReader作为一个基本范例来展示如何初始化nDPI库。首先需要一个编译完成的库以及一个合适的Makefile (i.e就像ndpiReader的Makefile那样)</p><p>为了在你的程序中使用nDPI的API，你除了要include自己的头文件外，还需要添加类似下面这一行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#include&lt;ndpi/ndpi_main.h&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>库可以按照下面的顺序执行初始化：</p><h3 id="_1-创建并初始化一个ndpi核心库探测模块" tabindex="-1"><a class="header-anchor" href="#_1-创建并初始化一个ndpi核心库探测模块"><span>(1) 创建并初始化一个nDPI核心库探测模块</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>structndpi_detection_module_struct <span class="token operator">*</span> module <span class="token operator">=</span><span class="token function">ndpi_init_detection_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注：本API格式在Version2.0版本中较之前版本差异很大。</p><p>这个探测模块中维护了所有支持的协议。</p><p>本API只是注册了所有支持的协议，但并未使能其中任何一个协议</p><h3 id="_2-ndpireader接下来通过一些宏使能了探测模块中的所有协议-显然你可以根据自己的需求来决定使能哪些协议" tabindex="-1"><a class="header-anchor" href="#_2-ndpireader接下来通过一些宏使能了探测模块中的所有协议-显然你可以根据自己的需求来决定使能哪些协议"><span>(2) ndpiReader接下来通过一些宏使能了探测模块中的所有协议(显然你可以根据自己的需求来决定使能哪些协议)</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * @param ndpi_struct 指向当前操作的探测模块
 * @param dbm 调用者实际通过该集合来控制实际需要应用的协议，只有该字段中被置1的对应协议，其协议分析器才真正允许被加载
 */</span>
<span class="token function">NDPI_BITMASK_SET_ALL</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ndpi_set_protocol_detection_bitmask2</span><span class="token punctuation">(</span>
    structndpi_detection_module_struct <span class="token operator">*</span>ndpi_struct<span class="token punctuation">,</span>
    constNDPI_PROTOCOL_BITMASK <span class="token operator">*</span> dbm
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：本API的作用就是使能一个已经初始化的nDPI核心库探测模块中的协议</p><h3 id="_3-为了导入已经存在的协议文件-你还必须调用下面的api" tabindex="-1"><a class="header-anchor" href="#_3-为了导入已经存在的协议文件-你还必须调用下面的api"><span>(3) 为了导入已经存在的协议文件，你还必须调用下面的API</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/*
 * @param ndpi_mod 指向当前操作的探测模块
 * @param path 协议文件的路径
 */</span>
<span class="token function">ndpi_load_protocols_file</span><span class="token punctuation">(</span>structndpi_detection_module_struct <span class="token operator">*</span>ndpi_mod<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-一旦从你的pcap文件或设备接口上捕获到了数据流-就可以调用下面的api来进行分析" tabindex="-1"><a class="header-anchor" href="#_4-一旦从你的pcap文件或设备接口上捕获到了数据流-就可以调用下面的api来进行分析"><span>(4) 一旦从你的pcap文件或设备接口上捕获到了数据流，就可以调用下面的API来进行分析</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/**
 * @param
 *     ndpi_struct 指向传入包所属的探测模块
 *     ndpi_flow 指向传入包所属的数据流
 *     packet 指向传入包的IP头
 *     packetlen IP包的长度
 *     current_tick_l 收到该IP包的时间(ms)
 *     src 指向源用户状态机
 *     dst 指向目的用户状态机
 */</span>
<span class="token function">ndpi_protocolndpi_detection_process_packet</span><span class="token punctuation">(</span>
    structndpi_detection_module_struct <span class="token operator">*</span>ndpi_struct<span class="token punctuation">,</span>
    structndpi_flow_struct <span class="token operator">*</span>flow<span class="token punctuation">,</span>
    constunsigned <span class="token keyword">char</span> <span class="token operator">*</span>packet<span class="token punctuation">,</span>
    constunsigned <span class="token keyword">short</span> packetlen<span class="token punctuation">,</span>
    <span class="token class-name">constu_int64_t</span> current_tick_l<span class="token punctuation">,</span>
    structndpi_id_struct <span class="token operator">*</span>src<span class="token punctuation">,</span>
    structndpi_id_struct <span class="token operator">*</span>dst
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：本API是ndpi核心库处理收到包的入口，通过分析传入的IP包，完成数据流的识别，最后返回是别结果</p><p>如果想了解更深入的信息，我们建议你阅读下面这些文件：</p><ul><li>nDPI/example/pcapReader.c</li><li>nDPI/src/include/ndpi_structs.h</li><li>nDPI/src/include/ndpi_public_functions.h</li><li>nDPI/src/ndpi_main.c</li></ul><p>具体的协议解析器文件都被放在 nDPI/src/protocols 文件夹中。</p><h2 id="开发ndpi自定义协议" tabindex="-1"><a class="header-anchor" href="#开发ndpi自定义协议"><span>开发nDPI自定义协议</span></a></h2><p>在这一节中，我们将展示将你的协议包含在nDPI中的方法。</p><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1"><span>介绍</span></a></h3><p>每个nDPI协议都会作为一个入口函数被实现，在运行时通过nDPI被使用。nDPI有几个协议可以被用来当作这个方面的例子。下面，我们列出了一些主要的概念，如果你打算开发一个nDPI协议，这些是你必须知道的。</p><h3 id="创建新的协议" tabindex="-1"><a class="header-anchor" href="#创建新的协议"><span>创建新的协议</span></a></h3><p>每一个协议都必须在下面的头文件中有一个对应的#define：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">&lt;</span>nDPI source code directory<span class="token operator">&gt;</span><span class="token operator">/</span>src<span class="token operator">/</span>include<span class="token operator">/</span>ndpi_protocols_osdpi<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NDPI_PROTOCOL_MY_PROTOCOL</span>     <span class="token expression"><span class="token number">171</span></span></span>
<span class="token comment">// NDPI_PROTOCOL_MY_PROTOCOL是这个协议的名字，171是这个协议的ID，且必须是独一无二的。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>协议被定义好了之后，你必须创建一个协议源文件，就像：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">&lt;</span>nDPI source code direcotry<span class="token operator">&gt;</span><span class="token operator">/</span>src<span class="token operator">/</span>lib<span class="token operator">/</span>protocols<span class="token operator">/</span>my_protocol<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包括以下内容</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ndpi_utils.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NDPI_PROTOCOL_MY_PROTOCOLS</span></span>
……
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在里面，需要定义一个入口函数，如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ndpi_search_my_protocol</span><span class="token punctuation">(</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi_detection_module_struct</span> <span class="token operator">*</span>ndpi_struct<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">ndpi_flow_struct</span> <span class="token operator">*</span>flow
<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ndpi_packet_struct</span> <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token operator">&amp;</span>flow<span class="token operator">-&gt;</span>packet<span class="token punctuation">;</span>
    <span class="token function">NDPI_LOG</span><span class="token punctuation">(</span>NDPI_PROTOCOL_MY_PROTOCOL<span class="token punctuation">,</span> ndpi_struct<span class="token punctuation">,</span> NDPI_LOG_DEBUG<span class="token punctuation">,</span> <span class="token string">&quot;my protocol detection...\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// skip marked packets by checking if the detection protocol stack</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>packet<span class="token operator">-&gt;</span>detected_protocol_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> ！<span class="token operator">=</span> NDPI_PROTOCOL_MY_PROTOCOL<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">ndpi_check_my_protocol</span><span class="token punctuation">(</span>ndpi_struct<span class="token punctuation">,</span> flow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和一个检测核心函数，用来处理一个流的数据包，包括以下内容：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> ndpi check my <span class="token function">protocol</span><span class="token punctuation">(</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> detection module <span class="token keyword">struct</span> <span class="token operator">*</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> flow <span class="token keyword">struct</span> <span class="token operator">*</span>flow
<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> packet <span class="token keyword">struct</span> <span class="token operator">*</span>packet <span class="token operator">=</span> <span class="token operator">&amp;</span>flow<span class="token operator">-&gt;</span>packet<span class="token punctuation">;</span>
	u int32 t payload len <span class="token operator">=</span> packet<span class="token operator">-&gt;</span>payload packet len<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;Found Protocol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		NDPI <span class="token function">LOG</span><span class="token punctuation">(</span>NDPI PROTOCOL MY PROTOCOL<span class="token punctuation">,</span> ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span> NDPI LOG DEBUG，<span class="token string">&quot;Found my protocol.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		ndpi <span class="token keyword">int</span> my_protocol add <span class="token function">connection</span><span class="token punctuation">(</span>ndpi <span class="token keyword">struct</span>，flow<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	<span class="token comment">/*Exclude Protocol*/</span>
	NDPI <span class="token function">LOG</span><span class="token punctuation">(</span>NDPI PROTOCOL MY PROTOCOL<span class="token punctuation">,</span> ndpi <span class="token keyword">struct</span>，NDPI LOG DEBUG<span class="token punctuation">,</span> <span class="token string">&quot;exclude my protocol.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	NDPI ADD PROTOCOL TO <span class="token function">BITMASK</span><span class="token punctuation">(</span>
		flow<span class="token operator">-&gt;</span>excluded protocol bitmask<span class="token punctuation">,</span>
		NDPI PROTOCOL MY PROTOCOL
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和一个特定的函数用来报告关于协议正确的识别信息，如：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> ndpi <span class="token keyword">int</span> my protocol add <span class="token function">connection</span><span class="token punctuation">(</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> detection module <span class="token keyword">struct</span> <span class="token operator">*</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> flow <span class="token keyword">struct</span> <span class="token operator">*</span>flow<span class="token punctuation">,</span>
	<span class="token class-name">u_int8_t</span> due to correlation
<span class="token punctuation">)</span><span class="token punctuation">{</span>
	ndpi <span class="token keyword">int</span> add <span class="token function">connection</span><span class="token punctuation">(</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span> flow<span class="token punctuation">,</span> NDPI PROTOCOL MY PROTOCOL<span class="token punctuation">,</span> 
		<span class="token comment">/*Choose the type of your protocol*/</span>
		NDPI_CORRELATED_PROTOCOL or NDPI_REAL_PROTOCOL
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加你的协议到ndpi" tabindex="-1"><a class="header-anchor" href="#添加你的协议到ndpi"><span>添加你的协议到nDPI</span></a></h3><p>协议被创建之后，你必须在下面的头文件中声明你的入口函数：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">&lt;</span>nDPI source code directory<span class="token operator">&gt;</span><span class="token operator">/</span>src<span class="token operator">/</span>include<span class="token operator">/</span>ndpi_protocols<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>包括如下内容：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* my protocol entry */</span>
<span class="token keyword">void</span> ndpi search my <span class="token function">protocol</span><span class="token punctuation">(</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> detection module <span class="token keyword">struct</span> <span class="token operator">*</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> flow <span class="token keyword">struct</span> <span class="token operator">*</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个协议必须与一个NDPI_SELECTION_BITMASK相关联。NDPI_SELECTION_BITMASK的完整列表被包含在文件：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">&lt;</span>nDPI source code directory<span class="token operator">&gt;</span><span class="token operator">/</span>src<span class="token operator">/</span>include<span class="token operator">/</span>ndpi_define<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在为你的协议选择了一个确定的位掩码之后，你必须通知nDPI新协议的存在，通过编辑文件：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token operator">&lt;</span>nDPI source code directory<span class="token operator">&gt;</span><span class="token operator">/</span>src<span class="token operator">/</span>lib<span class="token operator">/</span>ndpi_main<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你需要将你的协议添加到如下函数中：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> ndpi set protocol detection <span class="token function">bitmask2</span><span class="token punctuation">(</span>
	<span class="token keyword">struct</span> <span class="token class-name">ndpi</span> detection module <span class="token keyword">struct</span> <span class="token operator">*</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span>
	<span class="token keyword">const</span> NDPI PROTOCOL BITMASK <span class="token operator">*</span> dbm<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">NDPI PROTOCOL MY PROTOCOL</span></span>
	ndpi set bitmask protocol <span class="token function">detection</span><span class="token punctuation">(</span>ndpi <span class="token keyword">struct</span><span class="token punctuation">,</span> detection bitmask<span class="token punctuation">,</span> a<span class="token punctuation">,</span>
                                    	NDPI PROTOCOL MY PROTOCOL<span class="token punctuation">,</span>
                                    	ndpi search my protoco1<span class="token punctuation">,</span>
                                    	NDPI SELECTION BITMASK MY PROTOCOL<span class="token punctuation">,</span>
                                    	SAVE DETECTION BITMASK AS UNKNOW<span class="token punctuation">,</span>
                                    	ADD TO DETECTION BITMASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">/* 更新回调缓冲区索引 */</span>
	a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
ndpi <span class="token keyword">struct</span><span class="token operator">-&gt;</span>callback buffer size <span class="token operator">=</span> a<span class="token punctuation">;</span>
NDPI <span class="token function">LOG</span><span class="token punctuation">(</span>NDPI PROTOCOL UNKNOWN，ndpi <span class="token keyword">struct</span>，NDPI LOG DEBUG<span class="token punctuation">,</span>
         <span class="token string">&quot;callback buffer size is u\\n&quot;</span><span class="token punctuation">,</span> ndpi <span class="token keyword">struct</span><span class="token operator">-&gt;</span>callback buffer size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99))])}const g=i(r,[["render",m],["__file","nDPI快速上手指南.pdf - 翻译与补充版.html.vue"]]),P=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/nDPI/%E5%AE%98%E7%BD%91/nDPI%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.pdf%20-%20%E7%BF%BB%E8%AF%91%E4%B8%8E%E8%A1%A5%E5%85%85%E7%89%88.html","title":"nDPI","lang":"zh-CN","frontmatter":{"description":"nDPI 目录 nDPI快速上手指南 参考： nDPI快速上手指南 或 nDPI – 快速入门指南(翻译自官方文档)，这两篇其实都是对官方文档的一个润色翻译，我综合着来看 nDPI官方文档 nDPI- Quick Start Guide 这是一篇针对nDPI官方文档 nDPI- Quick Start Guide 的翻译，由于文档太老了(13年)，所以...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/nDPI/%E5%AE%98%E7%BD%91/nDPI%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.pdf%20-%20%E7%BF%BB%E8%AF%91%E4%B8%8E%E8%A1%A5%E5%85%85%E7%89%88.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"nDPI"}],["meta",{"property":"og:description","content":"nDPI 目录 nDPI快速上手指南 参考： nDPI快速上手指南 或 nDPI – 快速入门指南(翻译自官方文档)，这两篇其实都是对官方文档的一个润色翻译，我综合着来看 nDPI官方文档 nDPI- Quick Start Guide 这是一篇针对nDPI官方文档 nDPI- Quick Start Guide 的翻译，由于文档太老了(13年)，所以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nDPI\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"nDPI","slug":"ndpi","link":"#ndpi","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"nDPI快速上手指南","slug":"ndpi快速上手指南","link":"#ndpi快速上手指南","children":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"nDPI库编译与运行","slug":"ndpi库编译与运行","link":"#ndpi库编译与运行","children":[{"level":3,"title":"编译 nDPI 源代码","slug":"编译-ndpi-源代码","link":"#编译-ndpi-源代码","children":[]},{"level":3,"title":"编译示例程序 —— ndpiReader","slug":"编译示例程序-——-ndpireader","link":"#编译示例程序-——-ndpireader","children":[{"level":4,"title":"ndpiReader 的命令行选项","slug":"ndpireader-的命令行选项","link":"#ndpireader-的命令行选项","children":[]}]},{"level":3,"title":"协议文件","slug":"协议文件","link":"#协议文件","children":[]}]},{"level":2,"title":"示例 —— ndpiReader程序","slug":"示例-——-ndpireader程序","link":"#示例-——-ndpireader程序","children":[{"level":3,"title":"现场捕获模式","slug":"现场捕获模式","link":"#现场捕获模式","children":[]},{"level":3,"title":"文件捕获模式","slug":"文件捕获模式","link":"#文件捕获模式","children":[]},{"level":3,"title":"协议文件","slug":"协议文件-1","link":"#协议文件-1","children":[]}]},{"level":2,"title":"API nDPI","slug":"api-ndpi","link":"#api-ndpi","children":[{"level":3,"title":"(1) 创建并初始化一个nDPI核心库探测模块","slug":"_1-创建并初始化一个ndpi核心库探测模块","link":"#_1-创建并初始化一个ndpi核心库探测模块","children":[]},{"level":3,"title":"(2) ndpiReader接下来通过一些宏使能了探测模块中的所有协议(显然你可以根据自己的需求来决定使能哪些协议)","slug":"_2-ndpireader接下来通过一些宏使能了探测模块中的所有协议-显然你可以根据自己的需求来决定使能哪些协议","link":"#_2-ndpireader接下来通过一些宏使能了探测模块中的所有协议-显然你可以根据自己的需求来决定使能哪些协议","children":[]},{"level":3,"title":"(3) 为了导入已经存在的协议文件，你还必须调用下面的API","slug":"_3-为了导入已经存在的协议文件-你还必须调用下面的api","link":"#_3-为了导入已经存在的协议文件-你还必须调用下面的api","children":[]},{"level":3,"title":"(4) 一旦从你的pcap文件或设备接口上捕获到了数据流，就可以调用下面的API来进行分析","slug":"_4-一旦从你的pcap文件或设备接口上捕获到了数据流-就可以调用下面的api来进行分析","link":"#_4-一旦从你的pcap文件或设备接口上捕获到了数据流-就可以调用下面的api来进行分析","children":[]}]},{"level":2,"title":"开发nDPI自定义协议","slug":"开发ndpi自定义协议","link":"#开发ndpi自定义协议","children":[{"level":3,"title":"介绍","slug":"介绍-1","link":"#介绍-1","children":[]},{"level":3,"title":"创建新的协议","slug":"创建新的协议","link":"#创建新的协议","children":[]},{"level":3,"title":"添加你的协议到nDPI","slug":"添加你的协议到ndpi","link":"#添加你的协议到ndpi","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.24,"words":3671},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/nDPI/官网/nDPI快速上手指南.pdf - 翻译与补充版.md","excerpt":"\\n<h1>目录</h1>\\n<h1>nDPI快速上手指南</h1>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://blog.csdn.net/banruoju/article/details/78806533\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">nDPI快速上手指南</a> 或 <a href=\\"https://blog.csdn.net/A_lber_t/article/details/89552332\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">nDPI – 快速入门指南(翻译自官方文档)</a>，这两篇其实都是对官方文档的一个润色翻译，我综合着来看\\n<ul>\\n<li>nDPI官方文档 <a href=\\"https://github.com/ntop/nDPI/blob/dev/doc/guide/nDPI_QuickStartGuide.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">nDPI- Quick Start Guide</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,P as data};
