import{_ as s,c as a,e as t,o as e}from"./app-DGYDqQs-.js";const p="/assets/image-20220820140516600-B6mcyNaq.png",l={};function c(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="内部类-这章不看书了-看视频学" tabindex="-1"><a class="header-anchor" href="#内部类-这章不看书了-看视频学"><span>内部类（这章不看书了，看视频学）</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><ul><li><p>概念</p><ul><li>什么是内部类？内部类就是在类里面再定义一个类</li></ul></li><li><p>使用场景</p><ul><li>内部类表示的事物是外部类的一部分</li><li>内部类单独出现没有任何意义</li></ul></li><li><p>访问权限</p><ul><li>内部类可以访问外部类包括私有在内的所有成员</li><li>外部类要访问内部类成员时必须创建对象</li></ul></li><li><p>使用场景举例</p><ul><li><p>例如：汽车的发动机、ArrayList的迭代器、人的心脏</p></li><li><p>汽车的发动机</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/*
 * - 需求：写一个Javabean类描述汽车
 * - 属性：品牌、车龄、颜色、发动机品牌、使用年限
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> carName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carAge<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carColor<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span> <span class="token comment">// 需要依赖车，不会单独定义</span>
    	<span class="token class-name">String</span> engineName<span class="token punctuation">;</span>
        <span class="token keyword">int</span> engineAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>核心类库ArrayList</p><blockquote><p>IDEA &gt; Ctrl+N &gt; 输入ArrayList &gt; 选择ArrayList.java.util</p><p>文件中Ctrl+F10 &gt; 会出现很多类内内容，红色m是方法、黄色f是字段/属性、蓝色C是内部类</p><p>然后可以看到里面有四个内部类，现在我们看内部类 <code>Itr</code> 。</p></blockquote></li></ul></li></ul><h3 id="归纳总结一下" tabindex="-1"><a class="header-anchor" href="#归纳总结一下"><span>归纳总结一下</span></a></h3><p>类的五大成员：属性、方法、构造方法、代码块、<strong>内部类</strong></p><p>类的相对位置可分：外部类、内部类、外部其他类</p><p>内部类的分类：</p><ul><li>成员内部类（不需要自己写，能看懂就行）</li><li>静态内部类（不需要自己写，能看懂就行）</li><li>局部内部类（不需要自己写，能看懂就行）</li><li>匿名内部类**（实际开发用得最多）**</li></ul><h2 id="成员内部类" tabindex="-1"><a class="header-anchor" href="#成员内部类"><span>成员内部类</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><ul><li>概念 <ul><li>写在成员位置的，属于外部类的成员</li></ul></li><li>注意 <ul><li>成员内部类可以被一些修饰符所修饰，比如：private、默认、protected、public、static等</li><li>我们一般说 “成员内部类” ，不指用static修饰的情况，那叫 “静态内部类”</li><li>JDK16之前不能在成员内部类里面定义静态变量</li></ul></li></ul><h3 id="定义内部类" tabindex="-1"><a class="header-anchor" href="#定义内部类"><span>定义内部类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>	<span class="token comment">// 外部类</span>
	string carName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carAge<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carcolor<span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Engine</span> <span class="token punctuation">{</span>  <span class="token comment">// 成员内部类</span>
        string engineName<span class="token punctuation">;</span>
        <span class="token keyword">int</span> engineAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外界调取" tabindex="-1"><a class="header-anchor" href="#外界调取"><span>外界调取</span></a></h3><ul><li><p>方式一：在外部类中编写方法，对外提供内部类的对象</p></li><li><p>方式二：直接创建格式：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">/*private*/</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>					<span class="token comment">// 注意：JDK16之前不能在成员内部类里面定义静态变量</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Inner</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建内部类的方式 2</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 获取普通成员</span>
<span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取内部类。如果内部类是private则不能用该写法</span>

<span class="token comment">// 创建内部类的方式 1</span>
<span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> inner <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 或</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如核心内库中的ArrayList</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Interator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>			<span class="token comment">// 该方法返回ArrayList类里的迭代器(内部类)</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> implement <span class="token class-name">Interator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="成员内部类获取外部类、原理" tabindex="-1"><a class="header-anchor" href="#成员内部类获取外部类、原理"><span>成员内部类获取外部类、原理</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    
    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">// 30</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 20</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 10</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理（内存图）</p><p><img src="`+p+`" alt="image-20220820140516600" loading="lazy"></p><h2 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类"><span>静态内部类</span></a></h2><h3 id="简概-2" tabindex="-1"><a class="header-anchor" href="#简概-2"><span>简概</span></a></h3><p>静态内部类只能访问外部类中的静态变量和静态方法，如果想要访问非静态的需要创建对象。</p><h3 id="定义内部类-1" tabindex="-1"><a class="header-anchor" href="#定义内部类-1"><span>定义内部类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>			<span class="token comment">// 外部类</span>
    <span class="token class-name">String</span> carName<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carAge<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carColor<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Engine</span><span class="token punctuation">{</span>	<span class="token comment">// 静态内部类</span>
        <span class="token class-name">String</span> engineName<span class="token punctuation">;</span>
        <span class="token keyword">int</span> engineAge<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建静态内部类</span>
外部类名<span class="token punctuation">.</span>内部类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类名<span class="token punctuation">.</span>内部类名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用非静态方法的格式</span>
先创建对象再用对象调用
<span class="token comment">// 调用静态方法的格式</span>
外部类名<span class="token punctuation">.</span>内部类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外界调取-1" tabindex="-1"><a class="header-anchor" href="#外界调取-1"><span>外界调取</span></a></h3><ul><li><p>注意事项</p><ul><li><p>静态内部类也是成员内部类中的一种</p></li><li><p>静态内部类只能访问外部类的静态变量和静态方法，如果想要访问非静态的需要创建外部类的对象</p></li></ul></li></ul><p>先复习一下 静态成员变量</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>				<span class="token comment">// 非静态成员变量</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>		<span class="token comment">// 　静态成员变量</span>
    
    <span class="token comment">// 静态内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>			<span class="token comment">// 非静态方法</span>
            <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 非静态成员变量</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 　静态成员变量</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>		<span class="token comment">// 　静态方法</span>
            <span class="token class-name">Outer</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>		<span class="token comment">// 非静态成员变量</span>
            system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 　静态成员变量</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 静态内部类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 静态内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态内部类里的 非静态方法&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态内部类里的 　静态方法&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> oi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 静态内部类</span>
        oi<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 静态内部类里的 非静态方法</span>
        <span class="token comment">// oi.show2();							// 			（强行写也行）</span>
        <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// 静态内部类里的 　静态方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="局部内部类" tabindex="-1"><a class="header-anchor" href="#局部内部类"><span>局部内部类</span></a></h2><h3 id="简概-3" tabindex="-1"><a class="header-anchor" href="#简概-3"><span>简概</span></a></h3><p>概念：将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量。</p><p>没什么用</p><h3 id="定义内部类-2" tabindex="-1"><a class="header-anchor" href="#定义内部类-2"><span>定义内部类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// 局部内部类。和局部变量是类似的，可以使用一些final static等的修饰符</span>
        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外界调取-2" tabindex="-1"><a class="header-anchor" href="#外界调取-2"><span>外界调取</span></a></h3><p>该局部内部类只能在局部里使用，外界用不了</p><p>访问权限</p><ul><li>外界是无法直接使用，需要在方法内部创建对象并使用。</li><li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量。</li></ul><h2 id="匿名内部类【重要】" tabindex="-1"><a class="header-anchor" href="#匿名内部类【重要】"><span><mark>匿名内部类【重要】</mark></span></a></h2><h3 id="简概-4" tabindex="-1"><a class="header-anchor" href="#简概-4"><span>简概</span></a></h3><ul><li><p>概念</p><ul><li>匿名内部类的本质是隐藏了名字的内部类</li></ul></li><li><p>结构 匿名内部类包含三部分，更准确得说应该叫 “匿名内部类的对象”</p><ul><li><p>继承或实现</p></li><li><p>方法重写</p></li><li><p>创建对象</p></li></ul></li><li><p>补充 可以些在成员位置，也可以写在局部位置。</p></li></ul><h3 id="定义内部类-3" tabindex="-1"><a class="header-anchor" href="#定义内部类-3"><span>定义内部类</span></a></h3><p>格式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 格式</span>
<span class="token keyword">new</span> 类名或接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	重写方法<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 例如</span>
<span class="token keyword">new</span> <span class="token class-name">Inter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码与原理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 编写匿名内部类的代码</span>
        <span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;重写的游泳方法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 分析</span>
<span class="token comment">// 1. 下面的Student类实现Swim接口了</span>
<span class="token comment">// 2. 大括号前面的内容删掉，换成Swim，便成了一个匿名内部类</span>
<span class="token comment">// 3. Swim的前面加关键字new、后面加括号，表示创建这个类的对象</span>
        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Swim</span> <span class="token punctuation">{</span>	<span class="token comment">// 你会发现大括号里的内容和匿名内部类是一样的</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;重写的游泳方法&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用举例、原理、应用场景</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// 编写匿名内部类的代码</span>
        <span class="token comment">// 编译时其实会生成相关字节码：Test$1.class（可以在工程文件的out文件里找），这个名字是自动生成的。</span>
        <span class="token comment">// 可以用javap反编译这个字节码，会发现这个文件的内容就是这个匿名类的内容</span>
        <span class="token keyword">new</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;重写了swim方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 应用场景：如果这个类只要用一次，就可以不去重新定义一个类，简化代码</span>
        <span class="token comment">// 然后比如这个类就可以传给接受Animal引用的函数</span>
        <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;重写了eat方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53)]))}const u=s(l,[["render",c],["__file","03. 包含和嵌套、内部类.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/03.%20%E7%B1%BB%E7%9A%84%E9%87%8D%E7%94%A8/03.%20%E5%8C%85%E5%90%AB%E5%92%8C%E5%B5%8C%E5%A5%97%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 内部类（这章不看书了，看视频学） 简概 概念 概念 什么是内部类？内部类就是在类里面再定义一个类 使用场景 内部类表示的事物是外部类的一部分 内部类单独出现没有任何意义 访问权限 内部类可以访问外部类包括私有在内的所有成员 外部类要访问内部类成员时必须创建对象 使用场景举例 例如：汽车的发动机、ArrayList的迭代器、人的心脏 汽车...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/03.%20%E7%B1%BB%E7%9A%84%E9%87%8D%E7%94%A8/03.%20%E5%8C%85%E5%90%AB%E5%92%8C%E5%B5%8C%E5%A5%97%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 内部类（这章不看书了，看视频学） 简概 概念 概念 什么是内部类？内部类就是在类里面再定义一个类 使用场景 内部类表示的事物是外部类的一部分 内部类单独出现没有任何意义 访问权限 内部类可以访问外部类包括私有在内的所有成员 外部类要访问内部类成员时必须创建对象 使用场景举例 例如：汽车的发动机、ArrayList的迭代器、人的心脏 汽车..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"内部类（这章不看书了，看视频学）","slug":"内部类-这章不看书了-看视频学","link":"#内部类-这章不看书了-看视频学","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"归纳总结一下","slug":"归纳总结一下","link":"#归纳总结一下","children":[]}]},{"level":2,"title":"成员内部类","slug":"成员内部类","link":"#成员内部类","children":[{"level":3,"title":"简概","slug":"简概-1","link":"#简概-1","children":[]},{"level":3,"title":"定义内部类","slug":"定义内部类","link":"#定义内部类","children":[]},{"level":3,"title":"外界调取","slug":"外界调取","link":"#外界调取","children":[]},{"level":3,"title":"成员内部类获取外部类、原理","slug":"成员内部类获取外部类、原理","link":"#成员内部类获取外部类、原理","children":[]}]},{"level":2,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[{"level":3,"title":"简概","slug":"简概-2","link":"#简概-2","children":[]},{"level":3,"title":"定义内部类","slug":"定义内部类-1","link":"#定义内部类-1","children":[]},{"level":3,"title":"外界调取","slug":"外界调取-1","link":"#外界调取-1","children":[]}]},{"level":2,"title":"局部内部类","slug":"局部内部类","link":"#局部内部类","children":[{"level":3,"title":"简概","slug":"简概-3","link":"#简概-3","children":[]},{"level":3,"title":"定义内部类","slug":"定义内部类-2","link":"#定义内部类-2","children":[]},{"level":3,"title":"外界调取","slug":"外界调取-2","link":"#外界调取-2","children":[]}]},{"level":2,"title":"匿名内部类【重要】","slug":"匿名内部类【重要】","link":"#匿名内部类【重要】","children":[{"level":3,"title":"简概","slug":"简概-4","link":"#简概-4","children":[]},{"level":3,"title":"定义内部类","slug":"定义内部类-3","link":"#定义内部类-3","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.12,"words":1835},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/03. 类的重用/03. 包含和嵌套、内部类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>内部类（这章不看书了，看视频学）</h1>\\n<h2>简概</h2>\\n<h3>概念</h3>\\n<ul>\\n<li>\\n<p>概念</p>\\n<ul>\\n<li>什么是内部类？内部类就是在类里面再定义一个类</li>\\n</ul>\\n</li>\\n<li>\\n<p>使用场景</p>\\n<ul>\\n<li>内部类表示的事物是外部类的一部分</li>\\n<li>内部类单独出现没有任何意义</li>\\n</ul>\\n</li>\\n<li>\\n<p>访问权限</p>\\n<ul>\\n<li>内部类可以访问外部类包括私有在内的所有成员</li>\\n<li>外部类要访问内部类成员时必须创建对象</li>\\n</ul>\\n</li>\\n<li>\\n<p>使用场景举例</p>\\n<ul>\\n<li>\\n<p>例如：汽车的发动机、ArrayList的迭代器、人的心脏</p>\\n</li>\\n<li>\\n<p>汽车的发动机</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">/*\\n * - 需求：写一个Javabean类描述汽车\\n * - 属性：品牌、车龄、颜色、发动机品牌、使用年限\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Car</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span> carName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> carAge<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> carColor<span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Engine</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 需要依赖车，不会单独定义</span>\\n    \\t<span class=\\"token class-name\\">String</span> engineName<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> engineAge<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p>核心类库ArrayList</p>\\n<blockquote>\\n<p>IDEA &gt; Ctrl+N &gt; 输入ArrayList &gt; 选择ArrayList.java.util</p>\\n<p>文件中Ctrl+F10 &gt; 会出现很多类内内容，红色m是方法、黄色f是字段/属性、蓝色C是内部类</p>\\n<p>然后可以看到里面有四个内部类，现在我们看内部类 <code>Itr</code> 。</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/03. 类的重用/03. 包含和嵌套、内部类.md","value":{"title":"03. 包含和嵌套、内部类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/03. 类的重用/03. 包含和嵌套、内部类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,k as data};
