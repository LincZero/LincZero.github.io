import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-D9ahr8AM.js";const t={},p=e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>API: <code>java.lang.Comparable&lt;T&gt;1.0</code> API: <code>java.util.Arrays 1.2</code> API: <code>java.lang.Integer 1.0</code> API: <code>java.lang.Double 1.0</code></p><h3 id="接口和抽象基类的区别-先看我" tabindex="-1"><a class="header-anchor" href="#接口和抽象基类的区别-先看我"><span><mark>接口和抽象基类的区别</mark>（先看我）</span></a></h3><p>详见对应 “接口和抽象基类的区别” 笔记</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 派生类必须实现该方法，自动地属于public，但在实现接口时，必须把方法声明为public</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现用关键字implements</span>
<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> otherObject<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Employee</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> ohterObject<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span> other<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者结合泛型。在Java SE 5.0中，Comparable接口已经改进为泛型类型</span>
<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> otherObject<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>salary<span class="token punctuation">,</span> other<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// paramter has type T</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者对接口进行扩展</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable2</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">milesPerGallon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="final关键字" tabindex="-1"><a class="header-anchor" href="#final关键字"><span>final关键字</span></a></h3><p>如果存在这样一种通用算法，它能够对两个不同的子类对象进行比较，则应该在超类中提供一个compareTo方法，并将这个方法声明为final。</p><ul><li>Java中 <ul><li>修饰基本数据类型：表示常量，只能被赋值一次，赋值后值无法改变。又分为：静态变量、实例变量和局部变量</li><li>修饰引用类的变量类型：这个变量就不能再修改引用对象</li><li>修饰类：final类不能被继承</li><li>修饰方法：那么该方法不能被子类的方法所覆盖，但可以被继承</li></ul></li><li>C++中 <ul><li>其实用差不多</li></ul></li></ul><h3 id="接口特点" tabindex="-1"><a class="header-anchor" href="#接口特点"><span>接口特点</span></a></h3><p>接口特点</p><ul><li>接口中的所有方法自动地属于public。接口中的域将被自动设为public static final。 在接口中声明方法时，不必提供关键字public。但在实现接口时，必须把方法声明为public。 虽然也能进行标记，但Java语言规范建议不要书写这些多余的关键字</li></ul><p>允许的操作</p><ul><li><p>在接口中还可以定义常量</p></li><li><p>使用instanceof检查一个对象是否属于某个特定类一样，也可以使用instance检查一个对象是否实现了某个特定的接口</p></li><li><p>接口也可以被扩展。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Moveable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Powered</span> <span class="token keyword">extends</span> <span class="token class-name">Moveable</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">milesPerGallon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>不允许的操作</p><ul><li>不能实例化。接口不是类，绝不能含有实例域。不过声明接口的变量是允许的</li><li>不能在接口中实现方法（在Java SE 8之前），但可以包含常量 有些接口只定义了常量，而没有定义方法。例如，标准库中的SwingConstants接口</li></ul><h2 id="版本改进归纳" tabindex="-1"><a class="header-anchor" href="#版本改进归纳"><span>版本改进归纳</span></a></h2><h3 id="归纳" tabindex="-1"><a class="header-anchor" href="#归纳"><span>归纳</span></a></h3><ul><li>JDK7及以前：接口中只能定义抽象方法</li><li>JDK8：接口中可以定义有方法体的方法（默认、静态）</li><li>JDK9：接口中可以定义私有方法（普通的私有方法、静态的私有方法）</li></ul><h3 id="接口中实现方法-java-se-8" tabindex="-1"><a class="header-anchor" href="#接口中实现方法-java-se-8"><span>接口中实现方法（Java SE 8）</span></a></h3><h4 id="静态方法-static" tabindex="-1"><a class="header-anchor" href="#静态方法-static"><span>静态方法 static</span></a></h4><blockquote><h5 id="通常用途" tabindex="-1"><a class="header-anchor" href="#通常用途"><span>通常用途</span></a></h5></blockquote><ul><li>理论上讲，没有任何理由认为这是不合法的。只是这有违于将接口作为抽象规范的初衷。 目前为止，通常的做法都是将静态方法放在伴随类中。 在标准库中，你会看到成对出现的接口和实用工具类，如Collection/Collections或Path/Paths。</li></ul><blockquote><h5 id="使用举例" tabindex="-1"><a class="header-anchor" href="#使用举例"><span>使用举例</span></a></h5></blockquote><ul><li><p>Paths类（历史残留问题） 其中只包含两个工厂方法。可以由一个字符串序列构造一个文件或目录的路径 在Java SE 8中，可以为Path接口增加以下方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Path</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Path</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token class-name">FileSystem</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，Paths类就不再是必要的了 不过整个Java库都以这种方式重构也是不太可能的，但是实现你自己的接口时，不再需要为实用工具方法另外提供一个伴随类。</p></li></ul><h4 id="默认方法-default" tabindex="-1"><a class="header-anchor" href="#默认方法-default"><span>默认方法 default</span></a></h4><blockquote><h5 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h5></blockquote><p>可以为接口方法提供一个默认实现。必须用default修饰符标记这样一个方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> 
    	<span class="token comment">// 默认方法，所有元素是相同的？</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，这个例子中这并没有太大用处，因为Comparable的每一个实际实现都要覆盖这个方法。 不过有些情况下，默认方法可能很有用。</p><p>默认方法可以调用任何其他方法。例如，Collection接口可以定义一个便利方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个抽象方法</span>
    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样实现Collection的程序员就不用操心实现isEmpty方法了。</p><blockquote><h5 id="应用举例" tabindex="-1"><a class="header-anchor" href="#应用举例"><span>应用举例</span></a></h5></blockquote><blockquote><h6 id="默认空方法" tabindex="-1"><a class="header-anchor" href="#默认空方法"><span>默认空方法</span></a></h6></blockquote><p>例如，在第11章会看到，如果希望在发生鼠标点击事件时得到通知，就要实现一个包含5个方法的接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MouseListener</span>
<span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">mouseRelease</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况下，你只需要关心其中的1、2个事件类型。在Java SE 8中，可以把所有方法声明为默认方法，这些默认方法什么也不做。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MouseListener</span>
<span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">mouseRelease</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，实现这个接口的程序员只需要为他们真正关心的事件覆盖相应的监听器</p><blockquote><h6 id="接口演化-源代码兼容-interface-evolution-source-compatible" tabindex="-1"><a class="header-anchor" href="#接口演化-源代码兼容-interface-evolution-source-compatible"><span>接口演化 / 源代码兼容（interface evolution / source compatible）</span></a></h6></blockquote><p>默认方法的一个重要用法是“接口演化”</p><p>以Collection接口为例，这个接口作为Java的一部分已经有很多年了。</p><p>假设很久以前你提供了这样一个类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bag</span> <span class="token keyword">implements</span> <span class="token class-name">Collection</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后来，在Java SE 8中，又为这个接口增加了一个stream方法。</p><p>假设stream方法不是一个默认方法。那么Bag类将不能编译，因为它没有实现这个新方法。 为接口增加一个非默认方法不能保证“源代码兼容”（source compatible） 否则如果程序在一个Bag实例上调用stream方法，就会出现一个AbstractMethodError。</p><blockquote><h5 id="解决默认方法冲突" tabindex="-1"><a class="header-anchor" href="#解决默认方法冲突"><span>解决默认方法冲突</span></a></h5></blockquote><blockquote><h6 id="方法冲突" tabindex="-1"><a class="header-anchor" href="#方法冲突"><span>方法冲突</span></a></h6></blockquote><p>如果先在一个接口中将一个方法定义为默认方法，然后又在超类或另一个接口中定义了同样的方法，会发生什么情况？</p><p>诸如Scala和C++等语言对于解决这种二义性有一些复杂的规则。幸运的是，Java的相应规则要简单得多。规则如下：</p><ol><li><p>超类优先。 如果超类提供了一个具体方法，同名而且有相同参数类型的默认方法会被忽略。</p></li><li><p>接口冲突。 如果一个超接口提供了一个默认方法，另一个接口提供了一个同名而且参数类型（不论是否是默认参数）相同的方法，必须覆盖这个方法来解决冲突。</p><p>例如</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Named</span>  <span class="token comment">// 其中这两个接口都包含了getName方法</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><h6 id="接口冲突的解决方法" tabindex="-1"><a class="header-anchor" href="#接口冲突的解决方法"><span>接口冲突的解决方法</span></a></h6></blockquote><p>类会继承Person和Named接口提供的两个不一致的getName方法。并不是从中选择一个， Java编译器会报告一个错误，让程序员来解决这个二义性。只需要在Student类中提供一个getName方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Named</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果至少有一个接口提供了一个实现，编译器就会报告错误，而程序员就必须解决这个二义性。 当然，如果两个接口都没有为共享方法提供默认实现，那么就与Java SE 8之前的情况一样，这里不存在冲突。实现类可以有两个选择：实现这个方法，或者干脆不实现。如果是后一种情况，这个类本身就是抽象的。</p><h3 id="接口中私有方法-jdk9" tabindex="-1"><a class="header-anchor" href="#接口中私有方法-jdk9"><span>接口中私有方法（JDK9）</span></a></h3><p>可以写接口的私有方法</p><p>JDK9 之前的写法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;start方法执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span> <span class="token string">&quot;end方法执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 相同代码</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日志记录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JDK9 之后</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">&quot;start方法执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span> <span class="token string">&quot;end方法执行...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 接口中普通私有方法</span>
    <span class="token keyword">private</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日志记录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	<span class="token comment">// 接口中静态私有方法</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;日志记录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伴随类-旧方案" tabindex="-1"><a class="header-anchor" href="#伴随类-旧方案"><span>伴随类（旧方案）</span></a></h3><p>历史残留问题： 在Java API中，你会看到很多接口都有相应的伴随类，这个伴随类中实现了相应接口的部分或所有方法， 如Collection/AbstractCollection或MouseListener/MouseAdapter。</p><p>在Java SE 8中，这个技术已经过时。<strong>现在可以直接在接口中实现方法</strong>。</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><h3 id="接口与回调" tabindex="-1"><a class="header-anchor" href="#接口与回调"><span>接口与回调</span></a></h3><ul><li><p>回调（callback）</p><ul><li><p>是一种常见的程序设计模式。在这种模式中，可以指出某个特定事件发生时应该采取的动作</p></li><li><p>例如，可以指出在按下鼠标或选择某个菜单项时应该采取什么行动</p></li></ul></li><li><p>两种实现方法</p><ul><li><p>在很多程序设计语言中，可以提供一个函数名，定时器周期性地调用它。即回调函数，通常传入函数指针实现</p></li><li><p>但是，在Java标准类库中的类采用的是面向对象方法。</p></li></ul></li></ul><h3 id="例子-定时器-actionlistener接口" tabindex="-1"><a class="header-anchor" href="#例子-定时器-actionlistener接口"><span>例子：定时器，ActionListener接口</span></a></h3><p>API: <code>javax.swing.JOptionPane 1.2</code> API: <code>javax.swing.Timer 1.2</code> API: <code>java.awt.Toolkit 1.0</code></p><p>在java.swing包中有一个Timer类，可以使用它在到达给定的时间间隔时发出通告。 在构造定时器时，需要设置一个时间间隔，并告之定时器，当到达时间间隔时需要做些什么操作。</p><p>原理</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 该例中，ActionListener/TimePrinter是观察者或监听器，Timer是被观察者</span>

<span class="token comment">// 接口。这是java.awt.event包的ActionListener接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActionListener</span>  <span class="token comment">// 监听器接口</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 当到达指定的时间间隔时，定时器就调用actionPerformed方法</span>
    <span class="token comment">// 需要注意actionPerformed方法的ActionEvent参数。这个参数提供了事件的相关信息，例如，产生这个事件的源对象。</span>
    <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现接口</span>
<span class="token keyword">class</span> <span class="token class-name">TimePrinter</span> implement <span class="token class-name">ActionListener</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 每隔10秒钟打印一条信息“At the tone，the time is...”，然后响一声</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;At the tone, the time is &quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Toolkit</span><span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用</span>
<span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimePrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Timer</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 可以传入实现了ActionListener接口的类</span>
t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>package timer;
/**
    @version 1.01 2015-05-12
    @author Cay Horstmann
 */

import java.awt.*;
import java.awt.event.*;
import java.uti7.*;
import javax.swing.*;
import javax.swing.Timer;
// to resolve conflict with java.util.Timer

public class TimerTest
{
	public static void main(String[] args)
    {
        ActionListener 1istener = new TimePrinter();
        
        // construct a timer that calls the listener
        //once every 10 seconds
        Timer t = new Timer(10000,listener);
        t.start();
			
        J0ptionPane.showMessageDialog(nu11,&quot;Quit program?&quot;);
        System.exit(O);
	}
}

class TimePrinter implements ActionListener
{
	public void actionPerformed(ActionEvent event)
    {
		System.out.println(&quot;At the tone,the time is &quot; + new Date());
        Toolkit.getDefaultToolkit().beep();
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与c-不同" tabindex="-1"><a class="header-anchor" href="#与c-不同"><span><mark>与C++不同</mark></span></a></h4><p>观察者模式的实现细节上</p><ul><li>C++ <ul><li>观察者/监听器，继承一个观察者基类</li><li>被观察者/触发者，包含一个观察者基类指针</li></ul></li><li>而Java则是 <ul><li>观察者/监听器，接口实现一个观察者基类</li><li>被观察者/触发者，包含一个观察者基类指针</li></ul></li></ul><h3 id="例子-比较器-comparator接口" tabindex="-1"><a class="header-anchor" href="#例子-比较器-comparator接口"><span>例子：比较器，Comparator接口</span></a></h3><p>比较器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 比较器接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span> <span class="token class-name">T</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接口实现。比较器是实现了Comparator接口的类的实例</span>
<span class="token keyword">class</span> <span class="token class-name">LengthComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用1，利用比较器判断</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 具体完成比较时，需要建立一个实例</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>comp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
<span class="token comment">// 调用2，利用比较器进行排序，这里根据字符串长度排序</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> friends <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Peter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paul&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>friends<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// Arrays.sort方法还有第二个版本，用数组和比较器作为参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子-对象克隆-cloneable接口" tabindex="-1"><a class="header-anchor" href="#例子-对象克隆-cloneable接口"><span>例子：对象克隆，Cloneable接口</span></a></h3><p>本节我们会讨论Cloneable接口，这个接口指示一个类提供了一个安全的clone方法。由于克隆并不太常见，而且有关的细节技术性很强，你可能只是想稍做了解，等真正需要时再深入学习。</p><h4 id="区分三种-复制" tabindex="-1"><a class="header-anchor" href="#区分三种-复制"><span>区分三种 “复制”</span></a></h4><ul><li>赋值：原变量和副本都是同一个对象的引用</li><li>浅拷贝：默认的克隆操作是“浅拷贝”，拷贝域就会得到相同子对象的另一个引用。 不过出如果原对象和浅克隆对象共享的子对象是不可变的，那么这种共享就是安全的</li><li>深拷贝：拷贝域的子对象的不和原对象使用同一份拷贝，通常需要循环递归来实现</li></ul><p>赋值与拷贝</p><p>如果希望copy是一个新对象，它的初始状态与original相同，但是之后它们各自会有自己不同的状态，这种情况下就可以使用clone方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 原变量和副本都是同一个对象的引用</span>
<span class="token class-name">Employee</span> original <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Johm Public&quot;</span><span class="token punctuation">,</span> <span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> copy <span class="token operator">=</span> original<span class="token punctuation">;</span>
copy<span class="token punctuation">.</span><span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// oops--also changed original</span>

<span class="token comment">// 原变量和副本不是同一个对象的引用，不过需要注意这里是浅拷贝</span>
<span class="token class-name">Employee</span> copy <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
copy<span class="token punctuation">.</span><span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK--original unchanged</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于每一个类，需要确定：</p><ol><li>默认的clone方法是否满足要求；</li><li>是否可以在可变的子对象上调用clone来修补默认的clone方法；</li><li>是否不该使用clone。</li></ol><p>实际上第3个选项是默认选项。如果选择第1项或第2项，类必须：</p><ol><li>实现Cloneable接口；</li><li>重新定义clone方法，并指定public访问修饰符。</li></ol><h4 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码"><span>完整代码</span></a></h4><p>默认拷贝：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 提高可见性级别为public</span>
    <span class="token keyword">public</span> <span class="token class-name">Empoyee</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 更改返回类型（协变返回类型）</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span>clone<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深度拷贝：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Empoyee</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// call Object.clone()</span>
        <span class="token class-name">Employee</span> cloned <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// clone mutable fields</span>
        cloned<span class="token punctuation">.</span>hireDay <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> hireDay<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> cloned<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的是类代码，完整的整段文件代码详见书 “接口示例 &gt; 对象克隆” 的最后</p><h4 id="clone方法-特殊的保护方法" tabindex="-1"><a class="header-anchor" href="#clone方法-特殊的保护方法"><span>clone方法__特殊的保护方法</span></a></h4><p>保护方法</p><blockquote><p>clone方法是Object的一个protected方法，这说明你的代码不能直接调用这个方法。</p></blockquote><p>原因</p><blockquote><p>这个限制是有原因的 想想看Object类如何实现clone。它对于这个对象一无所知，所以只能逐个域地进行拷贝。如果对象包含子对象的引用，拷贝域就会得到相同子对象的另一个引用，这样一来，原对象和克隆的对象仍然会共享一些信息。 即无法实现深拷贝</p></blockquote><p>特殊的保护方法</p><blockquote><p>并且，可能有人会问：所有子类都能访问受保护方法吗？不是所有类都是Object的子类吗？ 那是因为受保护访问的规则比较微妙（见第5章）。子类只能调用受保护的clone方法来克隆它自己的对象。 <strong>必须重新定义clone为public</strong>才能允许所有方法克隆对象。</p></blockquote><h4 id="clone方法-协变返回类型" tabindex="-1"><a class="header-anchor" href="#clone方法-协变返回类型"><span>clone方法__协变返回类型</span></a></h4><p>备注：在Java SE 1.4之前，clone方法的返回类型总是Object，而现在可以为你的clone方法指定正确的返回类型。 这是<strong>协变返回类型</strong>的一个例子（见第5章）</p><h4 id="cloneable接口-标记接口" tabindex="-1"><a class="header-anchor" href="#cloneable接口-标记接口"><span>Cloneable接口__标记接口</span></a></h4><p>Cloneable接口只是作为一个标记，如果一个对象请求克隆，但没有实现这个接口，就会生成一个受查异常。</p><p>即使clone的默认（浅拷贝）实现能够满足要求，还是需要实现Cloneable接口，将clone重新定义为public，再调用super.clone（）</p><p>如果在一个对象上调用clone，但这个对象的类并没有实现Cloneable接口，Object类的clone方法就会抛出一个<code>CloneNotSupportedException</code>。</p><p>_</p><p>Cloneable接口是Java提供的一组标记接口（tagging interface）之一。（有些程序员称之为记号接口（marker interface））</p><p>标记接口不包含任何方法；它唯一的作用就是允许在类型查询中使用instanceof：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Cloneable</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议你自己的程序中不要使用标记接口</p><h4 id="cloneable接口-异常问题" tabindex="-1"><a class="header-anchor" href="#cloneable接口-异常问题"><span>Cloneable接口__异常问题</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Empoyee</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>即如果在一个对象上调用clone，但这个对象的类并没有实现Cloneable接口，Object类的clone方法就会抛出一个<code>CloneNotSupportedException</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Employee</span> cloned <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment">// this won&#39;t happen, since we are Cloneable</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就允许子类在不支持克隆时选择抛出一个<code>CloneNotSupportedException</code></p><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h4><p>必须当心子类的克隆。例如，一旦为Employee类定义了clone方法，任何人都可以用它来克隆Manager对象。Employee克隆方法能完成工作吗？这取决于Manager类的域。在这里是没有问题的，因为bonus域是基本类型。但是Manager可能会有需要深拷贝或不可克隆的域。不能保证子类的实现者一定会修正clone方法让它正常工作。出于这个原因，在Object类中clone方法声明为protected。</p><p>克隆没有你想象中那么常用。标准库中只有不到5%的类实现了clone。</p><p>所有数组类型都有一个public的clone方法，而不是protected。可以用这个方法建立一个新数组，包含原数组所有元素的副本。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> luckyNumbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cloned <span class="token operator">=</span> luckyNumbers<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cloned<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token comment">// 不会改变 luckyNumbers[5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>卷Ⅱ的第2章将展示另一种克隆对象的机制，其中使用了Java的对象串行化特性。这个机制很容易实现，而且很安全，但效率不高。</p><h2 id="【扩展】结合泛型" tabindex="-1"><a class="header-anchor" href="#【扩展】结合泛型"><span>【扩展】结合泛型</span></a></h2>`,131),l=[p];function c(o,i){return s(),a("div",null,l)}const r=n(t,[["render",c],["__file","01.3 接口类.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.3%20%E6%8E%A5%E5%8F%A3%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 接口 概念 API: java.lang.Comparable<T>1.0 API: java.util.Arrays 1.2 API: java.lang.Integer 1.0 API: java.lang.Double 1.0 接口和抽象基类的区别（先看我） 详见对应 “接口和抽象基类的区别” 笔记 基本使用 final关键字 如...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.3%20%E6%8E%A5%E5%8F%A3%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 接口 概念 API: java.lang.Comparable<T>1.0 API: java.util.Arrays 1.2 API: java.lang.Integer 1.0 API: java.lang.Double 1.0 接口和抽象基类的区别（先看我） 详见对应 “接口和抽象基类的区别” 笔记 基本使用 final关键字 如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"接口","slug":"接口","link":"#接口","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"接口和抽象基类的区别（先看我）","slug":"接口和抽象基类的区别-先看我","link":"#接口和抽象基类的区别-先看我","children":[]},{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"final关键字","slug":"final关键字","link":"#final关键字","children":[]},{"level":3,"title":"接口特点","slug":"接口特点","link":"#接口特点","children":[]}]},{"level":2,"title":"版本改进归纳","slug":"版本改进归纳","link":"#版本改进归纳","children":[{"level":3,"title":"归纳","slug":"归纳","link":"#归纳","children":[]},{"level":3,"title":"接口中实现方法（Java SE 8）","slug":"接口中实现方法-java-se-8","link":"#接口中实现方法-java-se-8","children":[{"level":4,"title":"静态方法 static","slug":"静态方法-static","link":"#静态方法-static","children":[]},{"level":4,"title":"默认方法 default","slug":"默认方法-default","link":"#默认方法-default","children":[]}]},{"level":3,"title":"接口中私有方法（JDK9）","slug":"接口中私有方法-jdk9","link":"#接口中私有方法-jdk9","children":[]},{"level":3,"title":"伴随类（旧方案）","slug":"伴随类-旧方案","link":"#伴随类-旧方案","children":[]}]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[{"level":3,"title":"接口与回调","slug":"接口与回调","link":"#接口与回调","children":[]},{"level":3,"title":"例子：定时器，ActionListener接口","slug":"例子-定时器-actionlistener接口","link":"#例子-定时器-actionlistener接口","children":[{"level":4,"title":"与C++不同","slug":"与c-不同","link":"#与c-不同","children":[]}]},{"level":3,"title":"例子：比较器，Comparator接口","slug":"例子-比较器-comparator接口","link":"#例子-比较器-comparator接口","children":[]},{"level":3,"title":"例子：对象克隆，Cloneable接口","slug":"例子-对象克隆-cloneable接口","link":"#例子-对象克隆-cloneable接口","children":[{"level":4,"title":"区分三种 “复制”","slug":"区分三种-复制","link":"#区分三种-复制","children":[]},{"level":4,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]},{"level":4,"title":"clone方法__特殊的保护方法","slug":"clone方法-特殊的保护方法","link":"#clone方法-特殊的保护方法","children":[]},{"level":4,"title":"clone方法__协变返回类型","slug":"clone方法-协变返回类型","link":"#clone方法-协变返回类型","children":[]},{"level":4,"title":"Cloneable接口__标记接口","slug":"cloneable接口-标记接口","link":"#cloneable接口-标记接口","children":[]},{"level":4,"title":"Cloneable接口__异常问题","slug":"cloneable接口-异常问题","link":"#cloneable接口-异常问题","children":[]},{"level":4,"title":"其他","slug":"其他","link":"#其他","children":[]}]}]},{"level":2,"title":"【扩展】结合泛型","slug":"【扩展】结合泛型","link":"#【扩展】结合泛型","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":14.58,"words":4374},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Java/06. 面向对象/04. 特殊类/01.3 接口类.md","autoDesc":true}');export{r as comp,k as data};
