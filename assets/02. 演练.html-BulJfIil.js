import{_ as a,c as r,b as n,d as s,e as t,a as i,o as c,r as l}from"./app-CdytOEkI.js";const u={},p={href:"https://docs.comfy.org/essentials/custom_node_server_overview",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.comfy.org/essentials/custom_node_server_overview",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.comfy.org/essentials/comms_overview",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.comfy.org/essentials/custom_node_server_overview",target:"_blank",rel:"noopener noreferrer"},h={class:"ab-note drop-shadow"},b={class:"ab-table ab-branch-table"},y={rowspan:"1",col_index:"2",class:"markdown-rendered"},f={href:"https://docs.comfy.org/essentials/custom_node_server_overview#input-types",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.comfy.org/essentials/javascript_overview",target:"_blank",rel:"noopener noreferrer"};function _(x,e){const o=l("ExternalLinkIcon"),d=l("externallinkicon");return c(),r("div",null,[e[26]||(e[26]=n("h1",{id:"演练",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#演练"},[n("span",null,"演练")])],-1)),e[27]||(e[27]=n("p",null,"本页将逐步指导您创建自定义节点的过程。",-1)),e[28]||(e[28]=n("p",null,"该节点会获取一批图像并返回其中一张图像。最初，该节点将返回平均颜色最浅的图像；然后我们将对其进行扩展，使其具有一系列选择标准，最后添加一些客户端代码。",-1)),e[29]||(e[29]=n("p",null,"本页面假设您对 Python 或 Javascript 的了解很少。",-1)),n("p",null,[n("a",p,[e[0]||(e[0]=s("完成本演练后，深入了解服务器端代码")),t(o)]),e[3]||(e[3]=s("、 ")),n("a",m,[e[1]||(e[1]=s("客户端代码")),t(o)]),e[4]||(e[4]=s("或")),n("a",v,[e[2]||(e[2]=s("客户端-服务器通信")),t(o)]),e[5]||(e[5]=s("的细节。"))]),e[30]||(e[30]=i('<h2 id="基本节点" tabindex="-1"><a class="header-anchor" href="#基本节点"><span>基本节点</span></a></h2><h3 id="位置-设置、自定义节点的安装" tabindex="-1"><a class="header-anchor" href="#位置-设置、自定义节点的安装"><span>位置（设置、自定义节点的安装）</span></a></h3><p>（开始这里之前，建议先了解ComfyUI的自定义节点的安装方法（手动安装方法））</p><p>此自定义节点的所有代码都将位于一个目录中。因此，首先 <code>custom_nodes</code> 在您的文件夹中找到该目录 <code>ComfyUI</code>，然后在其中创建一个新目录，命名为（例如）<code>image_selector</code>。此新目录是与新自定义节点相关的所有代码的基础目录。</p><h3 id="python-框架-四个基本内容" tabindex="-1"><a class="header-anchor" href="#python-框架-四个基本内容"><span>Python 框架，四个基本内容</span></a></h3>',5)),n("p",null,[e[7]||(e[7]=s("自定义节点的基本结构将在")),n("a",g,[e[6]||(e[6]=s("后面")),t(o)]),e[8]||(e[8]=s("详细描述。我们从基本必需品开始："))]),e[31]||(e[31]=i(`<div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>class ImageSelector:
    CATEGORY = &quot;example&quot;
    @classmethod    
    def INPUT_TYPES(s):
        return { &quot;required&quot;:  { &quot;images&quot;: (&quot;IMAGE&quot;,), } }
    RETURN_TYPES = (&quot;IMAGE&quot;,)
    FUNCTION = &quot;choose_image&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义节点是一个 Python 类，它必须包含以下四个内容：</p>`,2)),n("div",h,[n("table",b,[n("tbody",null,[e[14]||(e[14]=n("tr",null,[n("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[n("div",null,[n("p",null,"CATEGORY")])]),n("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[n("div",null,[n("p",null,"类别")])]),n("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[n("div",null,[n("p",null,"指定自定义节点在添加新节点菜单中的位置")])])],-1)),n("tr",null,[e[12]||(e[12]=n("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[n("div",null,[n("p",null,"INPUT_TYPES")])],-1)),e[13]||(e[13]=n("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[n("div",null,[n("p",null,"输入类型")])],-1)),n("td",y,[n("div",null,[n("p",null,[e[10]||(e[10]=s("这是一个类方法，定义节点将采取的输入（")),n("a",f,[e[9]||(e[9]=s("稍后")),t(d)]),e[11]||(e[11]=s("请参阅返回的字典的详细信息）"))])])])]),e[15]||(e[15]=n("tr",null,[n("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[n("div",null,[n("p",null,"RETURN_TYPES")])]),n("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[n("div",null,[n("p",null,"返回类型")])]),n("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[n("div",null,[n("p",null,"定义节点将产生的输出")])])],-1)),e[16]||(e[16]=n("tr",null,[n("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[n("div",null,[n("p",null,"FUNCTION")])]),n("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[n("div",null,[n("p",null,"函数")])]),n("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[n("div",null,[n("p",null,"执行节点时将调用的函数的名称")])])],-1))])])]),e[32]||(e[32]=i(`<div class="callout" data-callout="tip"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-inner">Tip</div></div><div class="callout-content"><p></p><p><code>IMAGE</code> 请注意，尽管我们期望接收一批图像并仅返回一张，但输入和输出的数据类型为(单数)。在 Comfy 中，<code>IMAGE</code> 表示图像批次，单个图像被视为大小为 1 的批次。</p></div></div><h4 id="添加主要函数" tabindex="-1"><a class="header-anchor" href="#添加主要函数"><span>添加主要函数</span></a></h4><p>主函数 <code>choose_image</code> 接收 中定义的命名参数 <code>INPUT_TYPES</code>，并返回 <code>tuple</code> 中定义的 <code>RETURN_TYPES</code>。由于我们处理的图像在内部存储为 <code>torch.Tensor</code>，</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>import torch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将函数添加到您的类中。图像的数据类型为 <code>torch.Tensor</code> 形状为 <code>[B,H,W,C]</code>，其中 <code>B</code> 是批处理大小，<code>C</code> 是通道数 - RGB 为 3。如果我们迭代这样的张量，我们将得到一系列 <code>B</code> 形状为的张量 <code>[H,W,C]</code>。该 <code>.flatten()</code> 方法将其转换为长度为的一维张量 <code>H*W*C</code>，<code>torch.mean()</code> 取平均值，并将 <code>.item()</code> 单值张量转换为 Python 浮点数。</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>def choose_image(self, images):
    brightness = list(torch.mean(image.flatten()).item() for image in images)
    brightest = brightness.index(max(brightness))
    result = images[brightest].unsqueeze(0)
    return (result,)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后两行注释如下：</p><ul><li><code>images[brightest]</code>将返回一个形状为的张量 <code>[H,W,C]</code>。<code>unsqueeze</code> 用于在零维度处插入一个（长度为 1）维度，为我们提供 <code>[B,H,W,C]</code>：<code>B=1</code>单个图像。</li><li>在中<code>return (result,)</code>，尾随逗号是至关重要的，以确保您返回一个元组。</li></ul><h3 id="部署节点" tabindex="-1"><a class="header-anchor" href="#部署节点"><span>部署节点</span></a></h3><p>为了让 Comfy 识别新节点，我们需要将目录转换 <code>image_selector</code> 为 Python 模块，通过添加 <code>__init__.py</code>，如下所示：</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>from .image_selector_node import ImageSelector

NODE_CLASS_MAPPINGS = {
    &quot;Image Selector&quot; : ImageSelector,
}

__all__ = [&#39;NODE_CLASS_MAPPINGS&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们只是导出 <code>NODE_CLASS_MAPPINGS</code>，它为每个新的自定义节点提供一个唯一的名称，并映射到类。</p><h3 id="运行comfy" tabindex="-1"><a class="header-anchor" href="#运行comfy"><span>运行Comfy</span></a></h3><p>启动（或重新启动）Comfy 服务器，您应该在自定义节点列表中看到如下一行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">0.0</span> seconds: <span class="token punctuation">[</span>your path<span class="token punctuation">]</span><span class="token punctuation">\\</span>ComfyUI<span class="token punctuation">\\</span>custom_nodes<span class="token punctuation">\\</span>image_selector
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在浏览器中重新加载 Comfy 页面，<code>example</code>在<code>Add Node</code>菜单下，您将找到<code>image_selector</code>。如果没有找到，请查看 Python 控制台输出中的错误！</p><h2 id="添加一些选项" tabindex="-1"><a class="header-anchor" href="#添加一些选项"><span>添加一些选项</span></a></h2><p>该节点可能有点无聊，所以我们可能会添加一些选项；一个小部件，允许您选择最亮的图像，或最红、最蓝或最绿的图像。编辑您的 Python 以添加另一个输入，如下<code>INPUT_TYPES</code>所示：</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>@classmethod    
def INPUT_TYPES(s):
    return { &quot;required&quot;:  { &quot;images&quot;: (&quot;IMAGE&quot;,), 
                            &quot;mode&quot;: ([&quot;brightest&quot;, &quot;reddest&quot;, &quot;greenest&quot;, &quot;bluest&quot;],)} }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更新主函数。我们将使用一个相当简单的“最红”定义，即 <code>R</code>像素的平均值除以所有三种颜色的平均值。所以：</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>def choose_image(self, images, mode):
    batch_size = images.shape[0]
    brightness = list(torch.mean(image.flatten()).item() for image in images)
    if (mode==&quot;brightest&quot;):
        scores = brightness
    else:
        channel = 0 if mode==&quot;reddest&quot; else (1 if mode==&quot;greenest&quot; else 2)
        absolute = list(torch.mean(image[:,:,channel].flatten()).item() for image in images)
        scores = list( absolute[i]/(brightness[i]+1e-8) for i in range(batch_size) )
    best = scores.index(max(scores))
    result = images[best].unsqueeze(0)
    return (result,)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调整-ui" tabindex="-1"><a class="header-anchor" href="#调整-ui"><span>调整 UI</span></a></h2><p>也许我们想要一些视觉反馈，所以让我们发送一条小短信来显示。</p><h3 id="从服务器发送消息" tabindex="-1"><a class="header-anchor" href="#从服务器发送消息"><span>从服务器发送消息</span></a></h3><p>这需要在 Python 代码中添加两行：</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>from server import PromptServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且在方法的末尾<code>choose_image</code>添加一行来向前端发送消息（<code>send_sync</code>采用一个应该是唯一的消息类型和一个字典）</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>PromptServer.instance.send_sync(&quot;example.imageselector.textmessage&quot;, {&quot;message&quot;:f&quot;Picked image {best+1}&quot;})
return (result,)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写客户端扩展" tabindex="-1"><a class="header-anchor" href="#编写客户端扩展"><span>编写客户端扩展</span></a></h3><p>要向客户端添加一些 Javascript，请<code>js</code>在​​自定义节点目录中创建一个子目录，然后修改末尾<code>__init__.py</code> 以通过导出来告知 Comfy <code>WEB_DIRECTORY</code>：</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>WEB_DIRECTORY = &quot;./js&quot;
__all__ = [&#39;NODE_CLASS_MAPPINGS&#39;, &#39;WEB_DIRECTORY&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,31)),n("p",null,[e[18]||(e[18]=s("客户端扩展作为文件保存")),e[19]||(e[19]=n("code",null,".js",-1)),e[20]||(e[20]=s("在")),e[21]||(e[21]=n("code",null,"js",-1)),e[22]||(e[22]=s("子目录中，因此")),e[23]||(e[23]=n("code",null,"image_selector/js/image_selector.js",-1)),e[24]||(e[24]=s("请使用以下代码创建。（有关详细信息，请参阅")),n("a",P,[e[17]||(e[17]=s("客户端编码")),t(o)]),e[25]||(e[25]=s("）。"))]),e[33]||(e[33]=i(`<div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>import { app } from &quot;../../../scripts/app.js&quot;;
import { api } from &quot;../../../scripts/api.js&quot;;

app.registerExtension({
	name: &quot;example.imageselector&quot;,
    async setup() {
        function messageHandler(event) { alert(event.detail.message); }
        api.addEventListener(&quot;example.imageselector.textmessage&quot;, messageHandler);
    },
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们所做的就是注册一个扩展，并在其<code>setup()</code>方法中为我们发送的消息类型添加一个监听器，并读取我们发送的字典（存储在<code>event.detail</code>）</p><p>停止 Comfy 服务器，重新启动，重新加载网页，并运行您的工作流程。</p>`,3))])}const k=a(u,[["render",_],["__file","02. 演练.html.vue"]]),w=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/01.%20%E4%BB%8B%E7%BB%8D/02.%20%E6%BC%94%E7%BB%83.html","title":"演练","lang":"zh-CN","frontmatter":{"description":"演练 本页将逐步指导您创建自定义节点的过程。 该节点会获取一批图像并返回其中一张图像。最初，该节点将返回平均颜色最浅的图像；然后我们将对其进行扩展，使其具有一系列选择标准，最后添加一些客户端代码。 本页面假设您对 Python 或 Javascript 的了解很少。 完成本演练后，深入了解服务器端代码、 客户端代码或客户端-服务器通信的细节。 基本节点...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/01.%20%E4%BB%8B%E7%BB%8D/02.%20%E6%BC%94%E7%BB%83.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"演练"}],["meta",{"property":"og:description","content":"演练 本页将逐步指导您创建自定义节点的过程。 该节点会获取一批图像并返回其中一张图像。最初，该节点将返回平均颜色最浅的图像；然后我们将对其进行扩展，使其具有一系列选择标准，最后添加一些客户端代码。 本页面假设您对 Python 或 Javascript 的了解很少。 完成本演练后，深入了解服务器端代码、 客户端代码或客户端-服务器通信的细节。 基本节点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"演练\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"演练","slug":"演练","link":"#演练","children":[{"level":2,"title":"基本节点","slug":"基本节点","link":"#基本节点","children":[{"level":3,"title":"位置（设置、自定义节点的安装）","slug":"位置-设置、自定义节点的安装","link":"#位置-设置、自定义节点的安装","children":[]},{"level":3,"title":"Python 框架，四个基本内容","slug":"python-框架-四个基本内容","link":"#python-框架-四个基本内容","children":[{"level":4,"title":"添加主要函数","slug":"添加主要函数","link":"#添加主要函数","children":[]}]},{"level":3,"title":"部署节点","slug":"部署节点","link":"#部署节点","children":[]},{"level":3,"title":"运行Comfy","slug":"运行comfy","link":"#运行comfy","children":[]}]},{"level":2,"title":"添加一些选项","slug":"添加一些选项","link":"#添加一些选项","children":[]},{"level":2,"title":"调整 UI","slug":"调整-ui","link":"#调整-ui","children":[{"level":3,"title":"从服务器发送消息","slug":"从服务器发送消息","link":"#从服务器发送消息","children":[]},{"level":3,"title":"编写客户端扩展","slug":"编写客户端扩展","link":"#编写客户端扩展","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.82,"words":1446},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/01. 介绍/02. 演练.md","excerpt":"\\n<p>本页将逐步指导您创建自定义节点的过程。</p>\\n<p>该节点会获取一批图像并返回其中一张图像。最初，该节点将返回平均颜色最浅的图像；然后我们将对其进行扩展，使其具有一系列选择标准，最后添加一些客户端代码。</p>\\n<p>本页面假设您对 Python 或 Javascript 的了解很少。</p>\\n<p><a href=\\"https://docs.comfy.org/essentials/custom_node_server_overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">完成本演练后，深入了解服务器端代码</a>、&nbsp;<a href=\\"https://docs.comfy.org/essentials/custom_node_server_overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">客户端代码</a>或<a href=\\"https://docs.comfy.org/essentials/comms_overview\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">客户端-服务器通信</a>的细节。</p>","autoDesc":true}');export{k as comp,w as data};
