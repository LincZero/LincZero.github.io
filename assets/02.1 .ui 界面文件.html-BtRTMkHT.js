import{_ as t,c as d,a as e,b as n,d as l,e as s,o as r,r as c}from"./app-CbY8iZ9G.js";const o="/assets/image-20210114012744175-DkLEZP88.png",u={},p={href:"https://www.codenong.com/cs105278091/",target:"_blank",rel:"noopener noreferrer"};function v(m,i){const a=c("ExternalLinkIcon");return r(),d("div",null,[i[2]||(i[2]=e('<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="设计模式与界面文件" tabindex="-1"><a class="header-anchor" href="#设计模式与界面文件"><span>设计模式与界面文件</span></a></h1><h2 id="ui文件" tabindex="-1"><a class="header-anchor" href="#ui文件"><span>ui文件</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><ul><li><p>ui文件本质是一种xml文件，其文件头部：<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></p></li><li><p>创建界面文件</p></li><li><p>创建项目时勾选 “Generate form 创建界面”，会自动生成界面文件<code>类名.ui</code>，Forms即界面文件</p></li><li><p>pro文件中会自动多出一行<code>FORMS += 类名.ui</code></p></li></ul><h3 id="设计界面" tabindex="-1"><a class="header-anchor" href="#设计界面"><span>设计界面</span></a></h3><ul><li>左侧是控件列表，可以拖拽或单击新建控件</li><li>正上是布局方式，可以用来设置布局或打破布局</li><li>右上是层次，可以右击添加工具栏和状态栏，可以右键菜单打破布局等</li><li>右下是属性表格</li><li>下面是创建过的action，再次拖拽出来可以共用action</li></ul><h2 id="底层原理深入解析" tabindex="-1"><a class="header-anchor" href="#底层原理深入解析"><span>底层原理深入解析</span></a></h2>',9)),n("p",null,[i[1]||(i[1]=l("参考：")),n("a",p,[i[0]||(i[0]=l("【codenong】深入浅出解析Qt creator的ui文件原理及PIMPL设计")),s(a)])]),i[3]||(i[3]=e(`<h3 id="ui文件的生成文件" tabindex="-1"><a class="header-anchor" href="#ui文件的生成文件"><span>ui文件的生成文件</span></a></h3><ul><li><p>ui文件<strong>构建时生成</strong>.h扩展名的头文件</p><ul><li>Qt Creator中可以在项目目录的筛选中取消勾选 “隐藏生成的文件”，即可以看到生成的.h头文件</li><li>使用ui文件只是简化cpp文件的书写，本质和cpp文件并无什么不同</li></ul></li></ul><h3 id="类的结构和巧妙设计" tabindex="-1"><a class="header-anchor" href="#类的结构和巧妙设计"><span>类的结构和巧妙设计</span></a></h3><ul><li><p>.ui生成的.h文件</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// ...

class Ui_MainWindow
{
    // ...
};

/**定义一个新类 Ui::MainWindow
 * Ui::MainWindow和MainWindow不是同一个类！！！
 * 前者继承于Ui_MainWindow，而后者继承与QMainWindow，后者包含前者的指针
 * 如果在 MainWindow.cpp 中 using namespace ui; 则可能会导致两者混淆
 */
namespace Ui {
    class MainWindow: public Ui_MainWindow {};
}

// ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>包含Ui::MainWindow的主类</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>/**前置声明
 * 这里声明了一个和ui生成文件相同的Ui::MainWindow类
 * 和Ui_MainWindow的情况不同，那里是先有了Ui_MainWindow，再将MainWindow设在Ui的命名空间内
 * 这里还没定义MainWindow，不会将MainWinodw放到Ui命名空间内
 */
QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private:
    // .ui后生成一个.h，里面有一个UI_MainWindow类，Ui::MainWindow继承于UI_MainWindow类
    // 提前声明 + 不include而在cpp才包含 + 使用非指针，是为了解耦合，修改ui文件时不需要重新编译incldue此类的文件。设计模式的思想
    Ui::MainWindow *ui;
};
#endif // MAINWINDOW_H
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="pimpl设计模式" tabindex="-1"><a class="header-anchor" href="#pimpl设计模式"><span>PIMPL设计模式</span></a></h3><ul><li>设计模式内涵 <ul><li>这种设计模式叫<strong>PIMPL</strong>（<strong>p</strong>ointer to <strong>impl</strong>ement）</li><li>即一个私有的成员指针，将指针所指向的类的内部实现数据进行隐藏</li><li>作用 <ul><li>1、降低编译依赖，提高编译速度。</li><li>2、接口与实现分离，隐藏实现细节，降低模块耦合。在本文最后会对PIMPL再进行举例说明。</li></ul></li></ul></li></ul><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><h3 id="用法1-qtdesigner可视化" tabindex="-1"><a class="header-anchor" href="#用法1-qtdesigner可视化"><span>用法1：QtDesigner可视化</span></a></h3><p>用QtDesigner设计师界面打开，然后拖拽控件、调整属性即可</p><p>设计工具栏进入ui设计界面，优点：（就很像Android设计了）</p><ul><li>可视化设计</li><li>有属性表</li><li>可拖拽布局、使用方便</li><li>自动起名（右下角属性栏中的<code>QObject</code>下的<code>objectName</code>属性）</li></ul><h3 id="用法2-结合代码" tabindex="-1"><a class="header-anchor" href="#用法2-结合代码"><span>用法2：结合代码</span></a></h3><p>代码调用ui对象</p><p>窗口cpp中有一个ui指针，通过该ui指针可以调用ui中的object 例如：<code>ui-&gt;actionNew-&gt;setIcon(QIcon(&quot;.source/favicon.ico&quot;));</code></p><p>按钮组与单选复选框</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>ui-&gt;rBtnMan-&gt;setChecked(true);													// 设置默认选中
connect(ui-&gt;rBtnWoman, &amp;QRaidoButton::clicked, [=](){qDebug()&lt;&lt;&quot;Select 2&quot;});	// 按钮组反馈
connect(ui-&gt;cBox, &amp;QCheckBox::stateChanged, [=](int state){qDebug()&lt;&lt;state;});	// 复选框反馈（2是选中，1是半选，0是未选中）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法3-quiloader读取ui文件" tabindex="-1"><a class="header-anchor" href="#用法3-quiloader读取ui文件"><span>用法3：QUiLoader读取ui文件</span></a></h3><p>该用法将ui文件当做资源文件，不常用</p><p>这种方式使用ui文件不会生成ui_*.h文件</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;QtUiTools&gt;					// 提供QUiLoader类，需要：Qt += uitools

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QUiLoader loader;					// ui文件加载器
    QFile file(&quot;:/form/mainwindow.ui&quot;);	// ui文件
    file.open(QFile::ReadOnly);			// 读取ui文件
    QWidget *widget = loader.load(&amp;file);// 加载ui文件并导出QWidget
    file.close();						// 关闭文件
    widget-&gt;show();

    return app.exec();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="常用的属性" tabindex="-1"><a class="header-anchor" href="#常用的属性"><span>常用的属性</span></a></h3><p>右下角是属性栏，最下面是该控件类，从下到上依次是下面类的基类。每个类都有自己的属性</p><blockquote><h4 id="mainwindow" tabindex="-1"><a class="header-anchor" href="#mainwindow"><span>MainWindow</span></a></h4></blockquote><ul><li>windowTitle，窗口标题</li><li>大小 <ul><li>geometry，坐标和宽高尺寸</li><li>minimumSize，最小宽高尺寸</li><li>maximumSize，最大宽高尺寸</li><li>如果都改成一样即固定大小（同css的width、min-width、max-width调成一样值）</li></ul></li><li>边距 <ul><li>Layout...Margin，布局边距，默认是9</li></ul></li></ul><blockquote><h4 id="以qpushbutton为例" tabindex="-1"><a class="header-anchor" href="#以qpushbutton为例"><span>以QPushButton为例</span></a></h4></blockquote><ul><li>QObject，Qt类 <ul><li>objectName，对象名</li></ul></li><li>QWidget，控件类 <ul><li>enable，可使用</li><li>cursor，鼠标悬停样式</li></ul></li><li>QAbstractButton，按钮的抽象基类 <ul><li>text，文字</li><li>icon，图标</li><li>iconSize，图标大小</li><li>shortcut，快捷键</li></ul></li><li>QPushButton，按压式按钮类 <ul><li>...</li></ul></li></ul><p><img src="`+o+'" alt="image-20210114012744175" loading="lazy"></p>',28))])}const b=t(u,[["render",v],["__file","02.1 .ui 界面文件.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/02.1%20.ui%20%E7%95%8C%E9%9D%A2%E6%96%87%E4%BB%B6.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 设计模式与界面文件 ui文件 简概 ui文件本质是一种xml文件，其文件头部：<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?> 创建界面文件 创建项目时勾选 “Generate form 创建界面”，会自动生成界面文件类名.ui，Forms即界面文件 pro文件中会自动多出一行FORMS += 类名.ui 设计界...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/02.1%20.ui%20%E7%95%8C%E9%9D%A2%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 设计模式与界面文件 ui文件 简概 ui文件本质是一种xml文件，其文件头部：<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?> 创建界面文件 创建项目时勾选 “Generate form 创建界面”，会自动生成界面文件类名.ui，Forms即界面文件 pro文件中会自动多出一行FORMS += 类名.ui 设计界..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Qt","slug":"qt","link":"#qt","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"设计模式与界面文件","slug":"设计模式与界面文件","link":"#设计模式与界面文件","children":[{"level":2,"title":"ui文件","slug":"ui文件","link":"#ui文件","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"设计界面","slug":"设计界面","link":"#设计界面","children":[]}]},{"level":2,"title":"底层原理深入解析","slug":"底层原理深入解析","link":"#底层原理深入解析","children":[{"level":3,"title":"ui文件的生成文件","slug":"ui文件的生成文件","link":"#ui文件的生成文件","children":[]},{"level":3,"title":"类的结构和巧妙设计","slug":"类的结构和巧妙设计","link":"#类的结构和巧妙设计","children":[]},{"level":3,"title":"PIMPL设计模式","slug":"pimpl设计模式","link":"#pimpl设计模式","children":[]}]},{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[{"level":3,"title":"用法1：QtDesigner可视化","slug":"用法1-qtdesigner可视化","link":"#用法1-qtdesigner可视化","children":[]},{"level":3,"title":"用法2：结合代码","slug":"用法2-结合代码","link":"#用法2-结合代码","children":[]},{"level":3,"title":"用法3：QUiLoader读取ui文件","slug":"用法3-quiloader读取ui文件","link":"#用法3-quiloader读取ui文件","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"常用的属性","slug":"常用的属性","link":"#常用的属性","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/02.1 .ui 界面文件.md","excerpt":"\\n<h1>目录</h1>\\n<h1>设计模式与界面文件</h1>\\n<h2>ui文件</h2>\\n<h3>简概</h3>\\n<ul>\\n<li>\\n<p>ui文件本质是一种xml文件，其文件头部：<code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</code></p>\\n</li>\\n<li>\\n<p>创建界面文件</p>\\n</li>\\n<li>\\n<p>创建项目时勾选 “Generate form 创建界面”，会自动生成界面文件<code>类名.ui</code>，Forms即界面文件</p>\\n</li>\\n<li>\\n<p>pro文件中会自动多出一行<code>FORMS += 类名.ui</code></p>\\n</li>\\n</ul>","autoDesc":true}');export{b as comp,g as data};
