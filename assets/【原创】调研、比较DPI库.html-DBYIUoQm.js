import{_ as n,c as i,e as p,o as l}from"./app-DQC9V0Al.js";const t={};function o(a,e){return l(),i("div",null,e[0]||(e[0]=[p('<h1 id="ndpi" tabindex="-1"><a class="header-anchor" href="#ndpi"><span>nDPI</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="调研、比较dpi库" tabindex="-1"><a class="header-anchor" href="#调研、比较dpi库"><span>调研、比较DPI库</span></a></h1><h2 id="dpi、opendpi、ndpi" tabindex="-1"><a class="header-anchor" href="#dpi、opendpi、ndpi"><span>DPI、OpenDPI、nDPI</span></a></h2><p>先来看一下与nDPI相关 的一些概念</p><h3 id="dpi" tabindex="-1"><a class="header-anchor" href="#dpi"><span>DPI</span></a></h3><p>DPI是Deep Packet Inspection的缩写，全称深度包检测，是对数据包负载进行实时分析的一类技术的总称，它的其中一种应用是对流量进行分类。</p><p>端口与协议的问题：</p><ol><li>在互联网发展的早期，每一种协议或者应用都和一个端口关联。比如当我们说80端口时，我们指的就是HTTP协议。</li><li>但是，端口和协议的关联并不是强制性的，而只是大家约定的共识。</li><li>后来，许多新出现的协议都没有再和一个固定的端口关联，有的协议为了绕过防火墙的管控，会直接使用HTTP协议来传输。 对于网络的监控和管理来说，识别当前流量中有哪些应用和协议，从而采取进一步动作 —— 记录日志或者阻断连接 —— 就变成了一件非常困难的事情。</li></ol><p>为了识别流量的类型，DPI技术应运而生，它有<strong>三种基本的实现思路</strong>：</p><ol><li><p><strong>基于特征的</strong></p><p>这种方式主要是使用模式匹配来匹配协议中的关键字。比如，通过GET/POST关键字来匹配HTTP协议。</p></li><li><p><strong>基于语义的</strong></p><p>这种方式主要是通过尝试不同的协议规范来解码数据包，从而确定它是哪一种协议。其中又可以分为不同层级，因为有些协议是借助其它协议来传输的。比如，许多P2P协议通常会使用HTTP协议。</p></li><li><p><strong>基于统计的</strong></p><p>这种方式主要是针对加密数据，因为它能被观测到的信息只有数据包数、大小以及建立加密连接时的过程和参数。</p></li></ol><p>基于特征的实现不能很好地应对协议中有编码的情况，从而造成漏报。基于统计的则有很高的误报率。所以，<strong>nDPI采用的是基于语义的实现方式</strong>。</p><h3 id="opendpi" tabindex="-1"><a class="header-anchor" href="#opendpi"><span>OpenDPI</span></a></h3><p>因为nDPI是在OpenDPI的基础上开发的，所以有必要先介绍一下OpenDPI。</p><p>OpenDPI是少有的几个开源DPI库之一，使用的是C语言，现在已经<strong>没有人维护</strong>。它由两个部分组成：</p><ol><li><p><strong>核心部分</strong>。负责处理数据包，解析IP层、tcp/udp层，然后提取出IP地址、端口等基本信息。</p></li><li><p><strong>插件部分</strong>。每个插件就是一个解码器，负责解析对应的协议。</p></li></ol><h3 id="ndpi-1" tabindex="-1"><a class="header-anchor" href="#ndpi-1"><span>nDPI</span></a></h3><p>nDPi是在OpenDPI代码的基础上修改的，它做出了<strong>两个比较大的改动</strong>：</p><ol><li><p>通过端口来猜测真实的协议。这个设计基于一个前提，就是假设大部分协议仍然是和端口有关系的。 当使用和端口关联的协议解码器解码失败时，才会像OpenDPI那样尝试所有其它的解码器，直到解码成功。</p></li><li><p>可以通过配置文件声明端口和协议以及关键字和协议之间的关系。解码时优先使用端口或者关键字对应的解码器。</p></li></ol><p>nDPI的协议<strong>识别流程</strong>如下：</p><ol><li><p>nDPI解码数据包的3层、4层部分。</p></li><li><p>如果有注册了和数据包协议、端口相对应的解码器，首先尝试使用这个解码器。</p></li><li><p>如果没有匹配，会尝试使用已经注册的和数据包协议（比如UDP）相关的所有解码器。当其中任何一个解码器失败时，有两种情况，要么是真的失败了，要么是还需要更多的数据包。当数据包到来时，后一种情况会继续尝试解码。</p></li><li><p>只有有任何一个解码器匹配了，协议识别就会结束。</p></li></ol><p>通常来说，nDPI只要分析了前8个数据包，就能够识别出协议类型。</p><h2 id="其他调研结果" tabindex="-1"><a class="header-anchor" href="#其他调研结果"><span>其他调研结果</span></a></h2><p>开源DPI库非常少，Github上的结果就那么几个：（Star统计截止到23.07.31）反正几乎就只有nDPI是能用的</p><ul><li>有效仓库 <ul><li>ValidikSS/GoodbyeDPI， 9k， DPI实用工具（用于Windows），该软件旨在绕过许多互联网服务提供商的深度数据包检查系统，这些系统会阻止对某些网站的访问。</li><li><strong>ntop/nDPI， 3.3k， 开源DPI软件工具包</strong></li><li>bol-van/zapret，2.2k， 独立（无第三方服务器）DPI 规避工具。可能允许绕过 http(s) 网站阻止或速度整形，抵抗签名 tcp/udp 协议发现。该项目主要针对俄罗斯观众，对抗名为“Roskomnadzor”的俄罗斯监管机构。该项目的一些功能是针对俄罗斯现实的（例如获取 Roskomnadzor 屏蔽的网站列表），但大多数其他功能都是常见的。</li><li>thomasbhatia/OpenDPI， 150， OpenDPI v.3.10（目前已停止维护）</li></ul></li><li>无效仓库，注意有很多名字有 <code>DPI</code> 但实际上是 <code>Dots Per Inch</code> 或其他缩写而不是 <code>Deep Packet Inspection</code> 的项目，这里列几个： <ul><li>LeaVerou/dpi， 746， 这个是屏幕DPI</li><li>strues/retinajs， 4.5k， JavaScript、SCSS、Sass、Less和Stylus助手，用于呈现高分辨率图像变体</li><li>mgth/LittleBigMouse， 2.3k， DPI感知鼠标在屏幕上移动</li><li>cszn/DPIR， 499， 即插即用深度去噪先验图像恢复(IEEE TPAMI 2021) (PyTorch)</li><li>syscl/Enable-HiDPI-OSX</li></ul></li></ul>',25)]))}const s=n(t,[["render",o],["__file","【原创】调研、比较DPI库.html.vue"]]),D=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/nDPI/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E8%B0%83%E7%A0%94%E3%80%81%E6%AF%94%E8%BE%83DPI%E5%BA%93.html","title":"nDPI","lang":"zh-CN","frontmatter":{"description":"nDPI 目录 调研、比较DPI库 DPI、OpenDPI、nDPI 先来看一下与nDPI相关 的一些概念 DPI DPI是Deep Packet Inspection的缩写，全称深度包检测，是对数据包负载进行实时分析的一类技术的总称，它的其中一种应用是对流量进行分类。 端口与协议的问题： 在互联网发展的早期，每一种协议或者应用都和一个端口关联。比如当...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/nDPI/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91%E8%B0%83%E7%A0%94%E3%80%81%E6%AF%94%E8%BE%83DPI%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"nDPI"}],["meta",{"property":"og:description","content":"nDPI 目录 调研、比较DPI库 DPI、OpenDPI、nDPI 先来看一下与nDPI相关 的一些概念 DPI DPI是Deep Packet Inspection的缩写，全称深度包检测，是对数据包负载进行实时分析的一类技术的总称，它的其中一种应用是对流量进行分类。 端口与协议的问题： 在互联网发展的早期，每一种协议或者应用都和一个端口关联。比如当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nDPI\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"nDPI","slug":"ndpi","link":"#ndpi","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"调研、比较DPI库","slug":"调研、比较dpi库","link":"#调研、比较dpi库","children":[{"level":2,"title":"DPI、OpenDPI、nDPI","slug":"dpi、opendpi、ndpi","link":"#dpi、opendpi、ndpi","children":[{"level":3,"title":"DPI","slug":"dpi","link":"#dpi","children":[]},{"level":3,"title":"OpenDPI","slug":"opendpi","link":"#opendpi","children":[]},{"level":3,"title":"nDPI","slug":"ndpi-1","link":"#ndpi-1","children":[]}]},{"level":2,"title":"其他调研结果","slug":"其他调研结果","link":"#其他调研结果","children":[]}]}],"git":{},"readingTime":{"minutes":4.48,"words":1344},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/nDPI/【原创】调研、比较DPI库.md","excerpt":"\\n<h1>目录</h1>\\n<h1>调研、比较DPI库</h1>\\n<h2>DPI、OpenDPI、nDPI</h2>\\n<p>先来看一下与nDPI相关 的一些概念</p>\\n<h3>DPI</h3>\\n<p>DPI是Deep Packet Inspection的缩写，全称深度包检测，是对数据包负载进行实时分析的一类技术的总称，它的其中一种应用是对流量进行分类。</p>\\n<p>端口与协议的问题：</p>\\n<ol>\\n<li>在互联网发展的早期，每一种协议或者应用都和一个端口关联。比如当我们说80端口时，我们指的就是HTTP协议。</li>\\n<li>但是，端口和协议的关联并不是强制性的，而只是大家约定的共识。</li>\\n<li>后来，许多新出现的协议都没有再和一个固定的端口关联，有的协议为了绕过防火墙的管控，会直接使用HTTP协议来传输。\\n对于网络的监控和管理来说，识别当前流量中有哪些应用和协议，从而采取进一步动作 —— 记录日志或者阻断连接 —— 就变成了一件非常困难的事情。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/nDPI/【原创】调研、比较DPI库.md","value":{"title":"【原创】调研、比较DPI库","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/nDPI/【原创】调研、比较DPI库.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,D as data};
