import{_ as s,c as a,e as t,o as p}from"./app-aaiu3veL.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="javascript-异步编程" tabindex="-1"><a class="header-anchor" href="#javascript-异步编程"><span>JavaScript 异步编程</span></a></h1><h2 id="callback函数" tabindex="-1"><a class="header-anchor" href="#callback函数"><span>callback函数</span></a></h2><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>promise</span></a></h2><h2 id="es10-asyn-await" tabindex="-1"><a class="header-anchor" href="#es10-asyn-await"><span>ES10 - asyn - await</span></a></h2><h2 id="踩坑" tabindex="-1"><a class="header-anchor" href="#踩坑"><span>踩坑</span></a></h2><blockquote><h4 id="callback回调函数" tabindex="-1"><a class="header-anchor" href="#callback回调函数"><span>callback回调函数</span></a></h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>调用函数
<span class="token keyword">function</span> <span class="token function">functionA</span><span class="token punctuation">(</span><span class="token parameter">callbake</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">functionA</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
会识别为传入的是一个对象

改法：
<span class="token keyword">function</span> <span class="token function">functionA</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">null</span><span class="token punctuation">,</span> callbake</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">functionA</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

原因好像是因为第一个必须是Error，就算没有也要返回<span class="token keyword">null</span>
便于错误后不调用callback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="promise执行顺序" tabindex="-1"><a class="header-anchor" href="#promise执行顺序"><span>promise执行顺序</span></a></h4></blockquote><p>then里嵌套的then优先级少于该then同级往下！即：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行1</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">// 执行3</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token comment">// 执行4</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 执行2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【总结、比较、原理、写法互转】" tabindex="-1"><a class="header-anchor" href="#【总结、比较、原理、写法互转】"><span>【总结、比较、原理、写法互转】</span></a></h2><h3 id="比较then和aysnc-await" tabindex="-1"><a class="header-anchor" href="#比较then和aysnc-await"><span>比较then和aysnc-await</span></a></h3><p>（以下函数，都优化成能直接在控制台运行，可以方便调试）</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 异步函数A</span>
<span class="token comment">// 输出顺序：</span>
<span class="token comment">//   a0.start -&gt; a0.returnFake -&gt; a0.2s</span>
<span class="token keyword">let</span> <span class="token function-variable function">getPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a0. start&quot;</span><span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a0. 2s&quot;</span><span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;a0. returnTrue&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a0. returnFake&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 函数B调用异步函数A - then方案</span>
<span class="token comment">// 输出顺序:</span>
<span class="token comment">//   b1.start -&gt; a0.start -&gt; a0.returnFake -&gt; b1.return -&gt; a0.2s -&gt; b1.getReturn: a0.returnTrue</span>
<span class="token keyword">let</span> <span class="token function-variable function">b1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b1. start&quot;</span><span class="token punctuation">)</span>					<span class="token comment">// 1</span>
    <span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>                 <span class="token comment">// 外2, 内4</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b1. getReturn: &quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token comment">// 5</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b1. return&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">// 3</span>
<span class="token punctuation">}</span>
<span class="token function">b1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 函数B调用异步函数A - await方案</span>
<span class="token comment">// 输出顺序:</span>
<span class="token comment">//   b2.start -&gt; a0.start -&gt; a0.returnFake -&gt; a0.2s -&gt; b2.getReturn: a0.returnTrue -&gt; b2.return</span>
<span class="token keyword">let</span> <span class="token function-variable function">b2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b2. start&quot;</span><span class="token punctuation">)</span>					<span class="token comment">// 1</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// 外2, 内3</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b2. getReturn: &quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        <span class="token comment">// 4</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b2. return&quot;</span><span class="token punctuation">)</span>                   <span class="token comment">// 5</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b3. start&quot;</span><span class="token punctuation">)</span>					<span class="token comment">// 0.5</span>
	<span class="token function">b2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>										<span class="token comment">// 见上</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b3. over&quot;</span><span class="token punctuation">)</span>						<span class="token comment">// 2.5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="本质是一样的" tabindex="-1"><a class="header-anchor" href="#本质是一样的"><span>本质是一样的</span></a></h3><p>在<strong>同步函数调用Promise函数</strong>的场景中，比较区别：</p><ol><li>setTimeout相当于多了一条线程在工作，与主线程无关，<strong>主线程没有方法获取子线程的返回值</strong></li><li>Promise-Then方案，相当于往子线程<em>传递一个回调函数</em>，回调函数对应的是 <code>then(...)</code> 里面的内容！</li><li>Async-Await方案，相当于往子线程<em>传递一个回调函数</em>，回调函数对应的是 <code>await ...</code> 该行代码的往下的所有内容！</li></ol><p>（当然，在js中，其实这是伪的多线程，只是类比好说明）</p><h3 id="主线程如何获取子线程的返回值" tabindex="-1"><a class="header-anchor" href="#主线程如何获取子线程的返回值"><span>主线程如何获取子线程的返回值？</span></a></h3><p>promise和await方案，都没有真正做到这一点。</p><p>……如果按其他语言的思路，那么就是利用线程之间的共享变量来做到</p><p>当我发现，做不到</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 异步函数A</span>
<span class="token comment">// 输出顺序：</span>
<span class="token comment">//   尝试：待变动 -&gt; 尝试：变动了</span>
<span class="token keyword">let</span> <span class="token function-variable function">promiseChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;尝试：待变动&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            global<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;尝试：变动了&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">promiseChange</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span>

<span class="token comment">// 函数B调用异步函数A - then方案</span>
<span class="token comment">// 输出顺序:</span>
<span class="token comment">//   预期：尝试：待变动 -&gt; 检测：未变动 -&gt; 检测：未变动 -&gt; 尝试：变动了 -&gt; 检测：变动了</span>
<span class="token comment">//   实际：尝试：待变动 -&gt; 检测：未变动 -&gt; 检测：未变动 -&gt; ... -&gt; 尝试：变动了</span>
<span class="token comment">// 失败分析:</span>
<span class="token comment">//   看起来js的 \`delay\` 把setTimeout线程也给一起延时了，可能是因为js的setTimeout不是真正的多线程？</span>
<span class="token keyword">let</span> global <span class="token operator">=</span> <span class="token punctuation">{</span>
	flag<span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">promiseChange</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 10s超时</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>global<span class="token punctuation">.</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;检测：未变动&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;检测：变动了&quot;</span><span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不要擅自帮我修改成then和await方法，假设函数c是一个接受number变量的回调函数，在无法修改函数c参数类型的前提下，我在尝试是否有可能能让c返回一个number变量</p><p>……感觉没什么方法，<strong>同步调用异步</strong> 这一行为，在其他语言中可能我能想一些骚操作能做到。反正js中可能只能老老实实用promise和await了</p>`,25)]))}const i=s(e,[["render",o],["__file","03. 性能 - 异步编程.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/JavaScript/04.%20%E4%BC%98%E5%8C%96/03.%20%E6%80%A7%E8%83%BD%20-%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html","title":"JavaScript 异步编程","lang":"zh-CN","frontmatter":{"description":"JavaScript 异步编程 callback函数 promise ES10 - asyn - await 踩坑 callback回调函数 promise执行顺序 then里嵌套的then优先级少于该then同级往下！即： 【总结、比较、原理、写法互转】 比较then和aysnc-await （以下函数，都优化成能直接在控制台运行，可以方便调试） 本...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/JavaScript/04.%20%E4%BC%98%E5%8C%96/03.%20%E6%80%A7%E8%83%BD%20-%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"JavaScript 异步编程"}],["meta",{"property":"og:description","content":"JavaScript 异步编程 callback函数 promise ES10 - asyn - await 踩坑 callback回调函数 promise执行顺序 then里嵌套的then优先级少于该then同级往下！即： 【总结、比较、原理、写法互转】 比较then和aysnc-await （以下函数，都优化成能直接在控制台运行，可以方便调试） 本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 异步编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"JavaScript 异步编程","slug":"javascript-异步编程","link":"#javascript-异步编程","children":[{"level":2,"title":"callback函数","slug":"callback函数","link":"#callback函数","children":[]},{"level":2,"title":"promise","slug":"promise","link":"#promise","children":[]},{"level":2,"title":"ES10 - asyn - await","slug":"es10-asyn-await","link":"#es10-asyn-await","children":[]},{"level":2,"title":"踩坑","slug":"踩坑","link":"#踩坑","children":[]},{"level":2,"title":"【总结、比较、原理、写法互转】","slug":"【总结、比较、原理、写法互转】","link":"#【总结、比较、原理、写法互转】","children":[{"level":3,"title":"比较then和aysnc-await","slug":"比较then和aysnc-await","link":"#比较then和aysnc-await","children":[]},{"level":3,"title":"本质是一样的","slug":"本质是一样的","link":"#本质是一样的","children":[]},{"level":3,"title":"主线程如何获取子线程的返回值？","slug":"主线程如何获取子线程的返回值","link":"#主线程如何获取子线程的返回值","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.89,"words":868},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/JavaScript/04. 优化/03. 性能 - 异步编程.md","excerpt":"\\n<h2>callback函数</h2>\\n<h2>promise</h2>\\n<h2>ES10 - asyn - await</h2>\\n<h2>踩坑</h2>\\n<blockquote>\\n<h4>callback回调函数</h4>\\n</blockquote>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>调用函数\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">functionA</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">callbake</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">functionA</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n会识别为传入的是一个对象\\n\\n改法：\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">functionA</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> callbake</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token function\\">functionA</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\n原因好像是因为第一个必须是Error，就算没有也要返回<span class=\\"token keyword\\">null</span>\\n便于错误后不调用callback\\n</code></pre></div>","autoDesc":true}');export{i as comp,u as data};
