import{_ as s,c as a,e as t,o as e}from"./app-D2u2UykU.js";const o={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h1><h2 id="重渲染接口替换问题" tabindex="-1"><a class="header-anchor" href="#重渲染接口替换问题"><span>重渲染接口替换问题</span></a></h2><p>详见 AnyBlock 的开发文档</p><h2 id="meta-bind-插件配合兼容问题" tabindex="-1"><a class="header-anchor" href="#meta-bind-插件配合兼容问题"><span>meta bind 插件配合兼容问题</span></a></h2><p>主要在这里发现了一些 render 接口的ctx的细节</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 情况</span>
meta<span class="token operator">-</span>bind<span class="token operator">-</span>button
<span class="token comment">// 这里的 e,t,n 是：stc源码、el、上下文。重渲染情况下，上下文缺失/异常</span>
<span class="token comment">// 类型为 MarkdownPostProcessorContext</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerMarkdownCodeBlockProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;meta-bind-button&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 然后发现重渲染可能会导致这里的ctx和原预想行为不同，导致存在渲染失败的问题</span>

<span class="token doc-comment comment">/**
 * 上下文内容：
 * 代码渲染时上下文：MarkdownPostProcessorContext
 * 阅读模式时上下文：MarkdownPostProcessorContext
 * 重新渲染时上下文：MarkdownPostProcessorContext
 * app.workspace.activeLeaf.view找到模拟上下文 (?)
 * MarkdownPostProcessorContext内容：
 * - (API) docId、sourcePath、frontmatter、addChild、getSectionInfo
 * - (实际还有) containerEl、el、promises
 * 
 * 重渲染的区别：
 * - containerEl: 为重渲染的容器，正常为div.cm-scroller
 * - docId: 有所不同
 * - 多了个displayMode属性
 * - frontmatter: underfined，正常为 <span class="token punctuation">{</span><span class="token punctuation">}</span>
 * - sourcePath: &quot;&quot;，正常为文件名
 *
 *  static render(app: App, markdown: string, el: HTMLElement, sourcePath: string, component: Component): Promise&lt;void&gt;;
 * 声明见：https://github.com/obsidianmd/obsidian-api/blob/23947b58d372ea02225324308e31d36b4aa95869/obsidian.d.ts#L4
 * 可以发现传递内容影响上下文：el-&gt;containerEl，sourcePath-&gt;sourcePath,markdown影响getSectionInfo功能
 */</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;btn-debug1&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span>containerEl<span class="token operator">?.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;cm-scroller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;btn-debug2 rerender-env&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后来发现，是执行 render 之前，要执行 <code>ctx.addChild</code>，就可以解决了</p>`,7)]))}const l=s(o,[["render",p],["__file","实战.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E5%AE%9E%E6%88%98.html","title":"实战","lang":"zh-CN","frontmatter":{"description":"实战 重渲染接口替换问题 详见 AnyBlock 的开发文档 meta bind 插件配合兼容问题 主要在这里发现了一些 render 接口的ctx的细节 后来发现，是执行 render 之前，要执行 ctx.addChild，就可以解决了","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E5%AE%9E%E6%88%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"实战"}],["meta",{"property":"og:description","content":"实战 重渲染接口替换问题 详见 AnyBlock 的开发文档 meta bind 插件配合兼容问题 主要在这里发现了一些 render 接口的ctx的细节 后来发现，是执行 render 之前，要执行 ctx.addChild，就可以解决了"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实战\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"实战","slug":"实战","link":"#实战","children":[{"level":2,"title":"重渲染接口替换问题","slug":"重渲染接口替换问题","link":"#重渲染接口替换问题","children":[]},{"level":2,"title":"meta bind 插件配合兼容问题","slug":"meta-bind-插件配合兼容问题","link":"#meta-bind-插件配合兼容问题","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.04,"words":312},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/实战.md","excerpt":"\\n<h2>重渲染接口替换问题</h2>\\n<p>详见 AnyBlock 的开发文档</p>\\n<h2>meta bind 插件配合兼容问题</h2>\\n<p>主要在这里发现了一些 render 接口的ctx的细节</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 情况</span>\\nmeta<span class=\\"token operator\\">-</span>bind<span class=\\"token operator\\">-</span>button\\n<span class=\\"token comment\\">// 这里的 e,t,n 是：stc源码、el、上下文。重渲染情况下，上下文缺失/异常</span>\\n<span class=\\"token comment\\">// 类型为 MarkdownPostProcessorContext</span>\\n<span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">registerMarkdownCodeBlockProcessor</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"meta-bind-button\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span>t<span class=\\"token punctuation\\">,</span>n<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span> <span class=\\"token operator\\">...</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 然后发现重渲染可能会导致这里的ctx和原预想行为不同，导致存在渲染失败的问题</span>\\n\\n<span class=\\"token doc-comment comment\\">/**\\n * 上下文内容：\\n * 代码渲染时上下文：MarkdownPostProcessorContext\\n * 阅读模式时上下文：MarkdownPostProcessorContext\\n * 重新渲染时上下文：MarkdownPostProcessorContext\\n * app.workspace.activeLeaf.view找到模拟上下文 (?)\\n * MarkdownPostProcessorContext内容：\\n * - (API) docId、sourcePath、frontmatter、addChild、getSectionInfo\\n * - (实际还有) containerEl、el、promises\\n * \\n * 重渲染的区别：\\n * - containerEl: 为重渲染的容器，正常为div.cm-scroller\\n * - docId: 有所不同\\n * - 多了个displayMode属性\\n * - frontmatter: underfined，正常为 <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n * - sourcePath: \\"\\"，正常为文件名\\n *\\n *  static render(app: App, markdown: string, el: HTMLElement, sourcePath: string, component: Component): Promise&lt;void&gt;;\\n * 声明见：https://github.com/obsidianmd/obsidian-api/blob/23947b58d372ea02225324308e31d36b4aa95869/obsidian.d.ts#L4\\n * 可以发现传递内容影响上下文：el-&gt;containerEl，sourcePath-&gt;sourcePath,markdown影响getSectionInfo功能\\n */</span>\\n\\n<span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"btn-debug1\\"</span><span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">,</span> t<span class=\\"token punctuation\\">,</span> n<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>n<span class=\\"token punctuation\\">.</span>containerEl<span class=\\"token operator\\">?.</span>classList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"cm-scroller\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"btn-debug2 rerender-env\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{l as comp,r as data};
