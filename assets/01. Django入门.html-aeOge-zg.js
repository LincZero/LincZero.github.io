import{_ as a,c as s,e,o as t}from"./app-B5WLeZKp.js";const i={};function l(p,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="django" tabindex="-1"><a class="header-anchor" href="#django"><span>Django</span></a></h1><p>参考：https://www.bilibili.com/video/BV1NL41157ph</p><p>当前学习进度：P6 end</p><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="django简概" tabindex="-1"><a class="header-anchor" href="#django简概"><span>Django简概</span></a></h1><ul><li>Python知识点：函数、面向对象。</li><li>前端开发：HTML、CSS、JavaScript、jQuery、BootStrap。</li><li>MySQL数据库。</li><li>Python的Web框架： <ul><li>Flask，自身短小精悍 + 第三方组件。</li><li>Django，内部已集成了很多组件 + 第三方组件。【主要】</li></ul></li></ul><h2 id="项目准备" tabindex="-1"><a class="header-anchor" href="#项目准备"><span>项目准备</span></a></h2><h3 id="安装django" tabindex="-1"><a class="header-anchor" href="#安装django"><span>安装django</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> django
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pip安装时对Python目录的影响</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>c:<span class="token punctuation">\\</span>python39
	- python.exe
	- Scripts
		- pip.exe
		- django-admin.exe		<span class="token comment"># 安装该模块时生成。是辅助创建django项目的工具，会自动创建模板下的文件和文件夹</span>
	- Lib
		- 内置模块
		- site-packages
			- openpyxl
			- python-docx
			- flask
			- django			<span class="token comment"># 安装该模块时生成。是该框架的源码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建项目-startproject" tabindex="-1"><a class="header-anchor" href="#创建项目-startproject"><span>创建项目（startproject）</span></a></h3><p>（虽然start也有创立的意思，但总觉得莫名奇怪）</p><p>django中项目会有一些默认的文件和默认的文件夹。</p><h4 id="方法一-通过终端创建项目" tabindex="-1"><a class="header-anchor" href="#方法一-通过终端创建项目"><span>方法一：通过终端创建项目</span></a></h4><ul><li><p>打开终端。</p></li><li><p>进入某个目录（项目放在哪里）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/Users/wupeiqi/PycharmProjects/gx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行命令创建项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 未配置环境变量时</span>
<span class="token string">&quot;c:\\python39\\Scripts\\django-admin.exe&quot;</span> startproject 项目名称

<span class="token comment"># 举例</span>
/Library/Frameworks/Python.framework/Versions/3.9/bin/django-admin startproject mysite

<span class="token comment"># 如果 c:\\python39\\Scripts 已加入环境系统环境变量</span>
django-admin startproject 项目名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="方法二-pycharm直接创建项目" tabindex="-1"><a class="header-anchor" href="#方法二-pycharm直接创建项目"><span>方法二：Pycharm直接创建项目</span></a></h4><p>注意：好像企业版才有这个功能，社区版不能选择模板（就是没有下图中左侧的那一栏）</p><p>![image-20211124090749083](day15 初识Django.assets/image-20211124090749083.png)</p><h4 id="两种方法的一些区别" tabindex="-1"><a class="header-anchor" href="#两种方法的一些区别"><span>两种方法的一些区别</span></a></h4><p>特殊说明</p><ul><li><p>命令行，创建的项目是标准的。</p></li><li><p>pycharm，在标准的基础上默认给咱们加了点东西。</p><ul><li><p>创建了一个templates目录【删除】</p><table><thead><tr><th>终端创建的模板目录</th><th>Pycharm创建的模板目录</th></tr></thead><tbody><tr><td>![image-20211124085229322](day15 初识Django.assets/image-20211124085229322.png)</td><td>![image-20211124090818003](day15 初识Django.assets/image-20211124090818003.png)</td></tr></tbody></table></li><li><p>settings.py中【删除】 ![image-20211124091443354](day15 初识Django.assets/image-20211124091443354.png)</p></li></ul></li></ul><h4 id="项目目录结构-还未创建app" tabindex="-1"><a class="header-anchor" href="#项目目录结构-还未创建app"><span>项目目录结构（还未创建app）</span></a></h4><p>默认项目的文件介绍：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysite
├── manage.py			<span class="token comment"># 项目的管理，启动项目、创建app、数据管理		【不要修改】【常用】</span>
└── mysite				<span class="token comment"># 与项目同名的文件夹（这个不是app）</span>
    ├── __init__.py
    ├── settings.py		<span class="token comment"># 项目配置								  【常修改】</span>
    ├── urls.py			<span class="token comment"># URL和函数的对应关系					   【常修改】</span>
    ├── asgi.py 		<span class="token comment"># 接收网络请求							【不要修改】</span>
    └── wsgi.py			<span class="token comment"># 接收网络请求							【不要修改】</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建app-startapp" tabindex="-1"><a class="header-anchor" href="#创建app-startapp"><span>创建app（startapp）</span></a></h3><p>（虽然start也有创立的意思，但总觉得莫名奇怪）</p><h4 id="app的概念" tabindex="-1"><a class="header-anchor" href="#app的概念"><span>app的概念</span></a></h4><p>不同于手机应用的app的概念，相当于子工程。也相当于一个python包（还有<code>__init__.py</code>文件）</p><p>举例： （但开发比较简洁时，用不到多app。一般情况下，项目下创建1个app即可。）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>- 项目
	- app，用户管理【表结构、函数、HTML模板、CSS】
	- app，订单管理【表结构、函数、HTML模板、CSS】
	- app，后台管理【表结构、函数、HTML模板、CSS】
	- app，网站   【表结构、函数、HTML模板、CSS】
	- app，API    【表结构、函数、HTML模板、CSS】
	<span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20211124094508905](day15 初识Django.assets/image-20211124094508905.png)</p><h4 id="创建app" tabindex="-1"><a class="header-anchor" href="#创建app"><span>创建app</span></a></h4><p>终端输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 先cd到项目内</span>
python startapp app01  <span class="token comment"># 其中mysite2为新app的名字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="项目目录结构-创建app后" tabindex="-1"><a class="header-anchor" href="#项目目录结构-创建app后"><span>项目目录结构（创建app后）</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mysite2
├── app01				<span class="token comment"># 创建的app</span>
│   ├── __init__.py
│   ├── admin.py        <span class="token comment"># django默认提供了admin后台管理				【不要修改】</span>
│   ├── apps.py         <span class="token comment"># app启动类								【不要修改】</span>
│   ├── migrations      <span class="token comment"># 数据库变更记录							 【不要修改】</span>
│   │   └── __init__.py
│   ├── models.py       <span class="token comment"># 对数据库操作							  【重要】</span>
│   ├── tests.py        <span class="token comment"># 单元测试									【不要修改】</span>
│   └── views.py        <span class="token comment"># 函数									【重要】</span>
├── manage.py			<span class="token comment"># 项目的管理，启动项目、创建app、数据管理		 【不要修改】【常用】</span>
└── mysite				<span class="token comment"># 与项目同名的文件夹（这个不是app）目前这个项目中只有一个app</span>
    ├── __init__.py
    ├── settings.py		<span class="token comment"># 项目配置								  【常修改】</span>
    ├── urls.py			<span class="token comment"># URL和函数的对应关系					   【常修改】</span>
    ├── asgi.py 		<span class="token comment"># 接收网络请求							【不要修改】</span>
    └── wsgi.py			<span class="token comment"># 接收网络请求							【不要修改】</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单加工工程" tabindex="-1"><a class="header-anchor" href="#简单加工工程"><span>简单加工工程</span></a></h3><h4 id="确保app已注册-settings-py" tabindex="-1"><a class="header-anchor" href="#确保app已注册-settings-py"><span>确保app已注册 （settings.py）</span></a></h4><p>运行前要确保app已注册，可在项目名的子文件夹下的 settings.py 文件中检查 INSTALLED_APPS 列表</p><p>字段对应app名见 子app 下的 apps.py 的 App01Config 类的类名</p><p>![image-20211124095619097](day15 初识Django.assets/image-20211124095619097.png)</p><h4 id="编写url和视图函数对应关系-urls-py" tabindex="-1"><a class="header-anchor" href="#编写url和视图函数对应关系-urls-py"><span>编写URL和视图函数对应关系 （urls.py）</span></a></h4><p>默认的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>	<span class="token comment"># 默认</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20211124095850778](day15 初识Django.assets/image-20211124095850778.png)</p><h4 id="编写视图函数-views-py" tabindex="-1"><a class="header-anchor" href="#编写视图函数-views-py"><span>编写视图函数 （views.py）</span></a></h4><p>![image-20211124100027337](day15 初识Django.assets/image-20211124100027337.png)</p><h3 id="启动服务器-runserver" tabindex="-1"><a class="header-anchor" href="#启动服务器-runserver"><span>启动服务器（runserver ）</span></a></h3><p>启动会修改代码还会自动重启服务器</p><h4 id="方法一-命令行启动" tabindex="-1"><a class="header-anchor" href="#方法一-命令行启动"><span>方法一：命令行启动</span></a></h4><div class="language-sehll line-numbers-mode" data-ext="sehll" data-title="sehll"><pre class="language-sehll"><code>python manage.py runserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="方法二-pycharm启动" tabindex="-1"><a class="header-anchor" href="#方法二-pycharm启动"><span>方法二：Pycharm启动</span></a></h4><p>![image-20211124100320461](day15 初识Django.assets/image-20211124100320461.png)</p><h2 id="项目加工" tabindex="-1"><a class="header-anchor" href="#项目加工"><span>项目加工</span></a></h2><h3 id="_4-1-再写一个页面" tabindex="-1"><a class="header-anchor" href="#_4-1-再写一个页面"><span>4.1 再写一个页面</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- url -&gt; 函数
- 函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20211124101708419](day15 初识Django.assets/image-20211124101708419.png)</p><h3 id="_4-2-templates模板" tabindex="-1"><a class="header-anchor" href="#_4-2-templates模板"><span>4.2 templates模板</span></a></h3><p>![image-20211124102815510](day15 初识Django.assets/image-20211124102815510.png)</p><h3 id="_4-3-静态文件" tabindex="-1"><a class="header-anchor" href="#_4-3-静态文件"><span>4.3 静态文件</span></a></h3><p>在开发过程中一般将：</p><ul><li>图片</li><li>CSS</li><li>js</li></ul><p>都会当做静态文件处理。</p><h4 id="_4-3-1-static目录" tabindex="-1"><a class="header-anchor" href="#_4-3-1-static目录"><span>4.3.1 static目录</span></a></h4><p>在app目录下创建static文件夹。</p><p>![image-20211124103828667](day15 初识Django.assets/image-20211124103828667.png)</p><h4 id="_4-3-2-引用静态文件" tabindex="-1"><a class="header-anchor" href="#_4-3-2-引用静态文件"><span>4.3.2 引用静态文件</span></a></h4><p>![image-20211124103947169](day15 初识Django.assets/image-20211124103947169.png)</p><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2><p>本质上：在HTML中写一些占位符，由数据对这些占位符进行替换和处理。</p><p>![image-20211124113409740](day15 初识Django.assets/image-20211124113409740.png)</p><h2 id="案例-伪联通新闻中心" tabindex="-1"><a class="header-anchor" href="#案例-伪联通新闻中心"><span>案例：伪联通新闻中心</span></a></h2><p>![image-20211124115145293](day15 初识Django.assets/image-20211124115145293.png)</p><p>![image-20211124115155394](day15 初识Django.assets/image-20211124115155394.png)</p><p>![image-20211124115209067](day15 初识Django.assets/image-20211124115209067.png)</p><p>![image-20211124115218937](day15 初识Django.assets/image-20211124115218937.png)</p><h2 id="请求和响应" tabindex="-1"><a class="header-anchor" href="#请求和响应"><span>请求和响应</span></a></h2><p>![image-20211124142250396](day15 初识Django.assets/image-20211124142250396.png)</p><p>关于重定向：</p><p>![image-20211124142033257](day15 初识Django.assets/image-20211124142033257.png)</p><h2 id="案例-用户登录" tabindex="-1"><a class="header-anchor" href="#案例-用户登录"><span>案例：用户登录</span></a></h2><p>![image-20211124151119553](day15 初识Django.assets/image-20211124151119553.png)</p><p>![image-20211124151127364](day15 初识Django.assets/image-20211124151127364.png)</p><p>![image-20211124151135563](day15 初识Django.assets/image-20211124151135563.png)</p><h2 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h2><ul><li><p>MySQL数据库 + pymysql</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> pymysql

<span class="token comment"># 1.连接MySQL</span>
conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">&quot;root123&quot;</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">&#39;unicom&#39;</span><span class="token punctuation">)</span>
cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>cursor<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCursor<span class="token punctuation">)</span>

<span class="token comment"># 2.发送指令</span>
cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;insert into admin(username,password,mobile) values(&#39;wupeiqi&#39;,&#39;qwe123&#39;,&#39;15155555555&#39;)&quot;</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 3.关闭</span>
cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Django开发操作数据库更简单，内部提供了ORM框架。 ![image-20211124151748712](day15 初识Django.assets/image-20211124151748712.png)</p></li></ul><h3 id="_7-1-安装第三方模块" tabindex="-1"><a class="header-anchor" href="#_7-1-安装第三方模块"><span>7.1 安装第三方模块</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install mysqlclient
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>![image-20211124152339567](day15 初识Django.assets/image-20211124152339567.png)</p><h3 id="_7-2-orm" tabindex="-1"><a class="header-anchor" href="#_7-2-orm"><span>7.2 ORM</span></a></h3><p>ORM可以帮助我们做两件事：</p><ul><li><p>创建、修改、删除数据库中的表（不用你写SQL语句）。 【无法创建数据库】</p></li><li><p>操作表中的数据（不用写SQL语句）。</p></li></ul><h4 id="_1-自己创建数据库" tabindex="-1"><a class="header-anchor" href="#_1-自己创建数据库"><span>1. 自己创建数据库</span></a></h4><ul><li><p>启动MySQL服务</p></li><li><p>自带工具创建数据库</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>create database gx_day15 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>![image-20211124153042996](day15 初识Django.assets/image-20211124153042996.png)</p><h4 id="_2-django连接数据库" tabindex="-1"><a class="header-anchor" href="#_2-django连接数据库"><span>2. django连接数据库</span></a></h4><p>在settings.py文件中进行配置和修改。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.mysql&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;gx_day15&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 数据库名字</span>
        <span class="token string">&#39;USER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PASSWORD&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root123&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;HOST&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 那台机器安装了MySQL</span>
        <span class="token string">&#39;PORT&#39;</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![image-20211124154030823](day15 初识Django.assets/image-20211124154030823.png)</p><h4 id="_3-django操作表" tabindex="-1"><a class="header-anchor" href="#_3-django操作表"><span>3.django操作表</span></a></h4><ul><li>创建表</li><li>删除表</li><li>修改表</li></ul><p>创建表：在models.py文件中</p><p>![image-20211124154658774](day15 初识Django.assets/image-20211124154658774.png)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> app01_userinfo<span class="token punctuation">(</span>
    id <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    age <span class="token keyword">int</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>python3.9 manage.py makemigrations
python3.9 manage.py migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：app需要提前注册。</p><p>![image-20211124155407018](day15 初识Django.assets/image-20211124155407018.png)</p><p>在表中新增列时，由于已存在列中可能已有数据，所以新增列必须要指定新增列对应的数据：</p><ul><li><p>1，手动输入一个值。</p></li><li><p>设置默认值</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>age = models.IntegerField(default=2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>允许为空</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>data = models.IntegerField(null=True, blank=True)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>以后在开发中如果想要对表结构进行调整：</p><ul><li><p>在models.py文件中操作类即可。</p></li><li><p>命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>python3.9 manage.py makemigrations
python3.9 manage.py migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-表中的数据" tabindex="-1"><a class="header-anchor" href="#_4-表中的数据"><span>4.表中的数据</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token comment"># #### 1.新建 ####</span>
<span class="token comment"># Department.objects.create(title=&quot;销售部&quot;)</span>
<span class="token comment"># Department.objects.create(title=&quot;IT部&quot;)</span>
<span class="token comment"># Department.objects.create(title=&quot;运营部&quot;)</span>
<span class="token comment"># UserInfo.objects.create(name=&quot;武沛齐&quot;, password=&quot;123&quot;, age=19)</span>
<span class="token comment"># UserInfo.objects.create(name=&quot;朱虎飞&quot;, password=&quot;666&quot;, age=29)</span>
<span class="token comment"># UserInfo.objects.create(name=&quot;吴阳军&quot;, password=&quot;666&quot;)</span>

<span class="token comment"># #### 2.删除 ####</span>
<span class="token comment"># UserInfo.objects.filter(id=3).delete()</span>
<span class="token comment"># Department.objects.all().delete()</span>

<span class="token comment"># #### 3.获取数据 ####</span>
<span class="token comment"># 3.1 获取符合条件的所有数据</span>
<span class="token comment"># data_list = [对象,对象,对象]  QuerySet类型</span>
<span class="token comment"># data_list = UserInfo.objects.all()</span>
<span class="token comment"># for obj in data_list:</span>
<span class="token comment">#     print(obj.id, obj.name, obj.password, obj.age)</span>

<span class="token comment"># data_list = [对象,]</span>
<span class="token comment"># data_list = UserInfo.objects.filter(id=1)</span>
<span class="token comment"># print(data_list)</span>
<span class="token comment"># 3.1 获取第一条数据【对象】</span>
<span class="token comment"># row_obj = UserInfo.objects.filter(id=1).first()</span>
<span class="token comment"># print(row_obj.id, row_obj.name, row_obj.password, row_obj.age)</span>


<span class="token comment"># #### 4.更新数据 ####</span>
<span class="token comment"># UserInfo.objects.all().update(password=999)</span>
<span class="token comment"># UserInfo.objects.filter(id=2).update(age=999)</span>
<span class="token comment"># UserInfo.objects.filter(name=&quot;朱虎飞&quot;).update(age=999)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例-用户管理" tabindex="-1"><a class="header-anchor" href="#案例-用户管理"><span>案例：用户管理</span></a></h2><h3 id="_1-展示用户列表" tabindex="-1"><a class="header-anchor" href="#_1-展示用户列表"><span>1. 展示用户列表</span></a></h3><ul><li>url</li><li>函数 <ul><li>获取所有用户信息</li><li>HTML渲染</li></ul></li></ul><h3 id="_2-添加用户" tabindex="-1"><a class="header-anchor" href="#_2-添加用户"><span>2.添加用户</span></a></h3><ul><li>url</li><li>函数 <ul><li>GET，看到页面，输入内容。</li><li>POST，提交 -&gt; 写入到数据库。</li></ul></li></ul><h3 id="_3-删除用户" tabindex="-1"><a class="header-anchor" href="#_3-删除用户"><span>3.删除用户</span></a></h3><ul><li>url</li><li>函数</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://127.0.0.1:8000/info/delete/?nid=1
http://127.0.0.1:8000/info/delete/?nid=2
http://127.0.0.1:8000/info/delete/?nid=3

def 函数(request):
	nid = reuqest.GET.get(&quot;nid&quot;)
	UserInfo.objects.filter(id=nid).delete()
	return HttpResponse(&quot;删除成功&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,123)]))}const c=a(i,[["render",l],["__file","01. Django入门.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/04.%20Py-Django/%E6%94%B9/01.%20Django%E5%85%A5%E9%97%A8.html","title":"Django","lang":"zh-CN","frontmatter":{"description":"Django 参考：https://www.bilibili.com/video/BV1NL41157ph 当前学习进度：P6 end 目录 Django简概 Python知识点：函数、面向对象。 前端开发：HTML、CSS、JavaScript、jQuery、BootStrap。 MySQL数据库。 Python的Web框架： Flask，自身短小精...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/04.%20Py-Django/%E6%94%B9/01.%20Django%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Django"}],["meta",{"property":"og:description","content":"Django 参考：https://www.bilibili.com/video/BV1NL41157ph 当前学习进度：P6 end 目录 Django简概 Python知识点：函数、面向对象。 前端开发：HTML、CSS、JavaScript、jQuery、BootStrap。 MySQL数据库。 Python的Web框架： Flask，自身短小精..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Django","slug":"django","link":"#django","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"Django简概","slug":"django简概","link":"#django简概","children":[{"level":2,"title":"项目准备","slug":"项目准备","link":"#项目准备","children":[{"level":3,"title":"安装django","slug":"安装django","link":"#安装django","children":[]},{"level":3,"title":"创建项目（startproject）","slug":"创建项目-startproject","link":"#创建项目-startproject","children":[{"level":4,"title":"方法一：通过终端创建项目","slug":"方法一-通过终端创建项目","link":"#方法一-通过终端创建项目","children":[]},{"level":4,"title":"方法二：Pycharm直接创建项目","slug":"方法二-pycharm直接创建项目","link":"#方法二-pycharm直接创建项目","children":[]},{"level":4,"title":"两种方法的一些区别","slug":"两种方法的一些区别","link":"#两种方法的一些区别","children":[]},{"level":4,"title":"项目目录结构（还未创建app）","slug":"项目目录结构-还未创建app","link":"#项目目录结构-还未创建app","children":[]}]},{"level":3,"title":"创建app（startapp）","slug":"创建app-startapp","link":"#创建app-startapp","children":[{"level":4,"title":"app的概念","slug":"app的概念","link":"#app的概念","children":[]},{"level":4,"title":"创建app","slug":"创建app","link":"#创建app","children":[]},{"level":4,"title":"项目目录结构（创建app后）","slug":"项目目录结构-创建app后","link":"#项目目录结构-创建app后","children":[]}]},{"level":3,"title":"简单加工工程","slug":"简单加工工程","link":"#简单加工工程","children":[{"level":4,"title":"确保app已注册 （settings.py）","slug":"确保app已注册-settings-py","link":"#确保app已注册-settings-py","children":[]},{"level":4,"title":"编写URL和视图函数对应关系 （urls.py）","slug":"编写url和视图函数对应关系-urls-py","link":"#编写url和视图函数对应关系-urls-py","children":[]},{"level":4,"title":"编写视图函数 （views.py）","slug":"编写视图函数-views-py","link":"#编写视图函数-views-py","children":[]}]},{"level":3,"title":"启动服务器（runserver ）","slug":"启动服务器-runserver","link":"#启动服务器-runserver","children":[{"level":4,"title":"方法一：命令行启动","slug":"方法一-命令行启动","link":"#方法一-命令行启动","children":[]},{"level":4,"title":"方法二：Pycharm启动","slug":"方法二-pycharm启动","link":"#方法二-pycharm启动","children":[]}]}]},{"level":2,"title":"项目加工","slug":"项目加工","link":"#项目加工","children":[{"level":3,"title":"4.1 再写一个页面","slug":"_4-1-再写一个页面","link":"#_4-1-再写一个页面","children":[]},{"level":3,"title":"4.2 templates模板","slug":"_4-2-templates模板","link":"#_4-2-templates模板","children":[]},{"level":3,"title":"4.3 静态文件","slug":"_4-3-静态文件","link":"#_4-3-静态文件","children":[{"level":4,"title":"4.3.1 static目录","slug":"_4-3-1-static目录","link":"#_4-3-1-static目录","children":[]},{"level":4,"title":"4.3.2 引用静态文件","slug":"_4-3-2-引用静态文件","link":"#_4-3-2-引用静态文件","children":[]}]}]},{"level":2,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[]},{"level":2,"title":"案例：伪联通新闻中心","slug":"案例-伪联通新闻中心","link":"#案例-伪联通新闻中心","children":[]},{"level":2,"title":"请求和响应","slug":"请求和响应","link":"#请求和响应","children":[]},{"level":2,"title":"案例：用户登录","slug":"案例-用户登录","link":"#案例-用户登录","children":[]},{"level":2,"title":"数据库操作","slug":"数据库操作","link":"#数据库操作","children":[{"level":3,"title":"7.1 安装第三方模块","slug":"_7-1-安装第三方模块","link":"#_7-1-安装第三方模块","children":[]},{"level":3,"title":"7.2 ORM","slug":"_7-2-orm","link":"#_7-2-orm","children":[{"level":4,"title":"1. 自己创建数据库","slug":"_1-自己创建数据库","link":"#_1-自己创建数据库","children":[]},{"level":4,"title":"2. django连接数据库","slug":"_2-django连接数据库","link":"#_2-django连接数据库","children":[]},{"level":4,"title":"3.django操作表","slug":"_3-django操作表","link":"#_3-django操作表","children":[]},{"level":4,"title":"4.表中的数据","slug":"_4-表中的数据","link":"#_4-表中的数据","children":[]}]}]},{"level":2,"title":"案例：用户管理","slug":"案例-用户管理","link":"#案例-用户管理","children":[{"level":3,"title":"1. 展示用户列表","slug":"_1-展示用户列表","link":"#_1-展示用户列表","children":[]},{"level":3,"title":"2.添加用户","slug":"_2-添加用户","link":"#_2-添加用户","children":[]},{"level":3,"title":"3.删除用户","slug":"_3-删除用户","link":"#_3-删除用户","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.5,"words":1950},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/04. Py-Django/改/01. Django入门.md","excerpt":"\\n<p>参考：https://www.bilibili.com/video/BV1NL41157ph</p>\\n<p>当前学习进度：P6 end</p>\\n<h1>目录</h1>\\n<h1>Django简概</h1>\\n<ul>\\n<li>Python知识点：函数、面向对象。</li>\\n<li>前端开发：HTML、CSS、JavaScript、jQuery、BootStrap。</li>\\n<li>MySQL数据库。</li>\\n<li>Python的Web框架：\\n<ul>\\n<li>Flask，自身短小精悍 + 第三方组件。</li>\\n<li>Django，内部已集成了很多组件 +  第三方组件。【主要】</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,o as data};
