import{_ as s,c as a,e as t,o as e}from"./app-Bf7apqQc.js";const p={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="注解与反射" tabindex="-1"><a class="header-anchor" href="#注解与反射"><span>注解与反射</span></a></h1><h1 id="contents" tabindex="-1"><a class="header-anchor" href="#contents"><span>CONTENTS</span></a></h1><h1 id="反射-java-reflection" tabindex="-1"><a class="header-anchor" href="#反射-java-reflection"><span>反射 Java.Reflection</span></a></h1><p>参考：https://www.bilibili.com/video/BV1p4411P7V3（进度：p7 end）</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li>Java反射机制概述</li><li>理解Class类并获取Class实例</li><li>类的加载与ClassLoader</li><li>创建<strong>运行时类</strong>的对象</li><li>获取<strong>运行时类</strong>的完整结构</li><li>调用<strong>运行时类</strong>的指定结构</li></ul><p>其他</p><p>可以获取注解（与注解配合）</p><p>JVM（Java虚拟机）</p><p>Hook</p><h2 id="静态-vs-动态语言" tabindex="-1"><a class="header-anchor" href="#静态-vs-动态语言"><span>静态 VS 动态语言</span></a></h2><ul><li>动态语言 <ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。 通俗点说就是在运行时代码可以根据某些条件改变自身结构。</li><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul></li><li>静态语言 <ul><li>与动态语言相对应的，运行时结构不可变的语言就是</li><li>主要静态语言：Java、C、C++等</li><li><strong>Java不是动态语言，但Java可以称之为 “准动态语言” <strong>。 即Java有一定的动态性，我们可以==利用</strong>反射机制</strong>获得类似动态语言的特性==。Java的动态性让编程的时候更加灵活！</li></ul></li></ul><h2 id="java反射" tabindex="-1"><a class="header-anchor" href="#java反射"><span>Java反射</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><ul><li><p>大概原理</p><ul><li><p>Reflection (反射) 是Java被视为动态语言的关键，反射机制允许程序在<strong>执行期</strong>借助于 <code>Reflection API</code> 取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个<code>Class类型的对象</code>（一个类只有一个Class对象），<strong>这个对象就包含了完整的类的结构信息</strong>。 我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射</p><blockquote><ul><li>正常方式：引入需要的&quot;包类”名称 ==&gt; 通过new实例化 ==&gt; 取得实例化对象</li><li>反射方式：实例化对象 ==&gt; getClass()方法 ==&gt; 得到完整的“包类”名称</li></ul></blockquote></li></ul></li><li><p>功能</p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li><li>......</li></ul></li><li><p>优点</p><ul><li>可以实现动态创建对象和编译，体现出很大的灵活性</li></ul></li><li><p>缺点</p><ul><li>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</li></ul></li><li><p>反射主要API</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span>
    <span class="token comment">// 代表一个类。\`Class\` 是 Reflection API 中的一个核心类</span>
    
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span>
    <span class="token comment">// 代表类的方法</span>

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Field</span>
    <span class="token comment">// 代表类的成员变量</span>
    
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Constructor</span>
    <span class="token comment">// 代表类的构造器</span>
    
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="获得反射对象" tabindex="-1"><a class="header-anchor" href="#获得反射对象"><span>获得反射对象</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 什么叫反射</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>
        <span class="token comment">// 通过反射获取类的Class对象</span>
        <span class="token comment">// 一个类在内存中只有一个Class对象</span>
        <span class="token comment">// 一个类被加载后，类的整个结构都会被封装在Class对象中</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.kuang.reflection,User&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实体类: pojo, entity</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="得到class类的几种方式" tabindex="-1"><a class="header-anchor" href="#得到class类的几种方式"><span>得到<code>Class类</code>的几种方式</span></a></h3><p>对象&quot;照镜子&quot;后可以得到的信息：</p><ul><li>某个类的属性</li><li>方法和构造器</li><li>某个类到底实现了哪些接口</li></ul><p>对于每个类而言，JRE都为其保留一个不变的Class类型的对象。 一个Class对象包含了特定某个结构（classlinterfacelenum/annotation/primitive type/void/[]）的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li><mark>Class类是Reflection的根源</mark>，针对任何你想动态加载、运行的类，<strong>唯有先获得相应的Class对象</strong></li></ul><h4 id="class类的常用方法" tabindex="-1"><a class="header-anchor" href="#class类的常用方法"><span>Class类的常用方法</span></a></h4><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassforName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newlnstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体(类，接口，数组类或void)的名称</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[]getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class.. T)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">|</span> 方法名                                   <span class="token operator">|</span> 功能说明                                                  <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token keyword">static</span> <span class="token class-name">ClassforName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span>        <span class="token operator">|</span> 返回指定类名name的<span class="token class-name">Class</span>对象                               <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Object</span> <span class="token function">newlnstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">|</span> 调用缺省构造函数，返回<span class="token class-name">Class</span>对象的一个实例                 <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token operator">|</span> 返回此<span class="token class-name">Class</span>对象所表示的实体<span class="token punctuation">(</span>类，接口，数组类或<span class="token keyword">void</span><span class="token punctuation">)</span>的名称 <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Class</span> <span class="token function">getSuperClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token operator">|</span> 返回当前<span class="token class-name">Class</span>对象的父类的<span class="token class-name">Class</span>对象                        <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getinterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token operator">|</span> 获取当前<span class="token class-name">Class</span>对象的接口                                   <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">|</span> 返回该类的类加载器                                        <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">|</span> 返回一个包含某些<span class="token class-name">Constructor</span>对象的数组                     <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Method</span> <span class="token function">getMothed</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">|</span> 返回一个<span class="token class-name">Method</span>对象，此对象的形参类型为paramType           <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token operator">|</span> 返回<span class="token class-name">Field</span>对象的一个数组                                   <span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取class类的实例" tabindex="-1"><a class="header-anchor" href="#获取class类的实例"><span>获取Class类的实例</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1. 若已知具体的类，通过类的class属性获取。该方法最为安全可靠，程序性能最高。</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 已知某个类的实例，调用该实例的getClass()方法获取Class对象</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 已知一个类的全类名，且该类在类路径下。可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</span>
<span class="token class-name">Class</span> clazz<span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;demo01.Student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. 内置基本数据类型 (不是每个类都有) 可以直接用类名.Type</span>

<span class="token comment">// 5. 还可以利用ClassLoader我们之后讲解</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 测试class类的创建方式有哪些</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> classNotFoundException <span class="token punctuation">{</span>
		<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这个人是: &quot;</span><span class="token operator">+</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		
        <span class="token comment">// 方式一∶通过对象获得</span>
		<span class="token class-name">Class</span> c1 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getclass</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 方式二: forName获得</span>
		<span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com. kuang.reflection.student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 方式三： 通过类名.class获得</span>
        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 方式四： 基本内置类型的包装类都有一个Type属性</span>
        <span class="token class-name">Class</span> c4 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">;</span>
        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// int</span>
        
        <span class="token comment">// 获得父类类型</span>
        <span class="token class-name">Class</span> c5 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class com.kuang.reflection.Person</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 类</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> student <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">&quot;学生&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">&quot;老师&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h1><p>参考：《Java 核心技术》</p><p>API: <code>java.lang.Class 1.0</code> API: <code>java.lang.reflect.Constructor 1.1</code></p><h2 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h2><ul><li>反射库 <ul><li>反射库（reflection library）提供了一个非常丰富且精心设计的工具集</li><li>应用 <ul><li>这项功能被大量地应用于JavaBeans中</li><li>使用反射，Java可以<strong>支持Visual Basic</strong>用户习惯使用的工具</li><li>特别是在<strong>设计或运行中添加新类时</strong>，能够快速地应用开发工具动态地<strong>查询新添加类的能力</strong></li><li>视觉上加速程序加载速度 在启动时，包含main方法的类被加载。它会加载所有需要的类。这些被加载的类又要加载它们需要的类，以此类推。 对于一个大型的应用程序来说，这将会消耗很多时间，用户会因此感到不耐烦。可以使用下面这个技巧给用户一种启动速度比较快的幻觉。 不过，要确保包含main方法的类没有显式地引用其他的类。 首先，显示一个启动画面；然后，通过调用Class.forName手工地加载其他的类</li></ul></li></ul></li><li>反射机制 <ul><li>能够分析类能力的程序称为反射（reflective）</li><li>（没懂）使用它的主要人员是工具构造者，而不是应用程序员。如果仅对设计应用程序感兴趣，而对构造工具不感兴趣，可以跳过</li></ul></li></ul><h3 id="与c-不同" tabindex="-1"><a class="header-anchor" href="#与c-不同"><span><mark>与C++不同</mark></span></a></h3><p>反射机制</p><ul><li>Java和C++一些相似的方法 <ul><li>java的 <code>newInstance方法</code> 对应C++中 <code>虚拟构造器</code> 的习惯用法。但有所不同 <ul><li>C++中的虚拟构造器不是一种语言特性，需要由专门的库支持</li></ul></li><li>java的 <code>Class类</code> 与C++中的 <code>type_info类</code> 相似，java的 <code>getClass方法</code> 与C++中的 <code>typeid</code> 运算符等价 <ul><li>C++的type_info没Java的Class强大。只能以字符串的形式显示一个类型的名字，而不能创建那个类型的对象</li></ul></li></ul></li><li>C++本身没有自带的反射机制。至于虚拟构造器和type_info我也没用过、不懂</li></ul><h2 id="class类" tabindex="-1"><a class="header-anchor" href="#class类"><span>Class类</span></a></h2><p>在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p><p>然而，可以通过专门的Java类访问这些信息。保存这些信息的类被称为Class，这个名字很容易让人混淆。</p><h3 id="本质是泛型类" tabindex="-1"><a class="header-anchor" href="#本质是泛型类"><span>本质是泛型类</span></a></h3><p>补充：如同Enum类一样，Class类实际上是一个泛型类。</p><p>例如，Employee.class的类型是 <code>Class&lt;Employee&gt;</code></p><p>没有说明这个问题的原因是：它将已经抽象的概念更加复杂化了。在大多数实际问题中，可以忽略类型参数，而使用原始的Class类。</p><h3 id="获取class类" tabindex="-1"><a class="header-anchor" href="#获取class类"><span><mark>获取Class类</mark></span></a></h3><h4 id="getclass" tabindex="-1"><a class="header-anchor" href="#getclass"><span>getClass()</span></a></h4><ul><li><p>根据实例 Object类中的 getClass() 方法将会返回一个Class类型的实例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Empolyee</span> e<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">Class</span> cl <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 类似于Python中的 e.__class__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="forname-无论何时使用这个方法-都应该提供一个异常处理器" tabindex="-1"><a class="header-anchor" href="#forname-无论何时使用这个方法-都应该提供一个异常处理器"><span>forName() <mark>（无论何时使用这个方法，都应该提供一个异常处理器）</mark></span></a></h4><ul><li><p>根据包名字符串 可以调用静态方法forName获得类名对应的Class对象。如果类名保存在字符串中，并可在运行中改变，就可以使用这个方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token string">&quot;java.util.Random&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 报错则抛出一个checked exception（已检查异常）</span>
<span class="token comment">// 无论何时使用这个方法，都应该提供一个异常处理器（exception handler）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="t-class" tabindex="-1"><a class="header-anchor" href="#t-class"><span>T.class</span></a></h4><ul><li><p>根据类型 如果T是任意的Java类型（或void关键字），T.class将代表匹配的类对象</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span> cl1 <span class="token operator">=</span> <span class="token class-name">Random</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cl2 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cl3 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="class的基本方法" tabindex="-1"><a class="header-anchor" href="#class的基本方法"><span>Class的基本方法</span></a></h3><h4 id="getname-返回类名" tabindex="-1"><a class="header-anchor" href="#getname-返回类名"><span>getName; 返回类名</span></a></h4><p>最常用的Class方法是getName。这个方法将返回类的名字</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果类在一个包里，包的名字也作为类名的一部分</span>

<span class="token comment">// 类似于Python中的 e.__class__.__name__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不同于getName()方法？？？</p><ul><li><code>getName;</code>：返回类的名字</li><li><code>getName()</code>：返回项目的名称</li></ul><h4 id="newinstance-创建实例" tabindex="-1"><a class="header-anchor" href="#newinstance-创建实例"><span>newInstance() 创建实例</span></a></h4><p>可以用来动态地创建一个类的实例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建了一个与e具有相同类类型的实例</span>
							<span class="token comment">// 如果这个类没有默认的构造器，就会抛出一个异常</span>

<span class="token comment">// 将forName与newInstance配合起来使用</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;java.util.Random&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> m <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 但如果需要以这种方式向希望按名称创建的类的构造器提供参数，就不要使用上面那条语句，而必须使用Constructor类中的newInstance方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="class的比较" tabindex="-1"><a class="header-anchor" href="#class的比较"><span>Class的比较</span></a></h3><p>虚拟机为每个类型管理一个Class对象。因此，可以利用==运算符实现两个类对象比较的操作。例如</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="利用反射分析类" tabindex="-1"><a class="header-anchor" href="#利用反射分析类"><span>利用反射分析类</span></a></h2><p>API：<code>java.lang.Class 1.0</code> API：<code>java.lang.reflect.Field 1.1</code> API：<code>java.lang.reflect.Method 1.1</code> API：<code>java.lang.reflect.Constructor 1.1</code> API：<code>java.lang.reflect.Modifier 1.1</code></p><h3 id="field、method、constructor" tabindex="-1"><a class="header-anchor" href="#field、method、constructor"><span>Field、Method、Constructor</span></a></h3><p>反射机制最重要的内容——检查类的结构</p><p>java.lang.reflect包中有三个类Field、Method和Constructor分别用于描述<strong>类的域、方法和构造器</strong></p><p>Class类中的 <code>getFields、getMethods、getConstructors</code> 方法将分别返回类提供的<strong>public域、方法和构造器数组</strong></p><h3 id="他们的方法" tabindex="-1"><a class="header-anchor" href="#他们的方法"><span>他们的方法</span></a></h3><h4 id="getname" tabindex="-1"><a class="header-anchor" href="#getname"><span>getName()</span></a></h4><p>这三个类都有一个叫做 getName 的方法，用来<strong>返回项目的名称</strong></p><h4 id="gettype" tabindex="-1"><a class="header-anchor" href="#gettype"><span>getType()</span></a></h4><p>Field类有一个 getType 方法，用来<strong>返回描述域所属类型的Class对象</strong></p><p>Method和Constructor类有能够报告参数类型的方法，Method类还有一个可以报告返回类型的方法。</p><h4 id="getmodifiers" tabindex="-1"><a class="header-anchor" href="#getmodifiers"><span>getModifiers()</span></a></h4><p>这三个类还有一个叫做 getModifiers 的方法，<strong>它将返回一个整型数值，用不同的位开关描述public和static这样的修饰符使用状况</strong></p><p>还可以利用java.lang.reflect包中的Modifier类的静态方法分析getModifiers返回的整型数值：如下</p><ul><li><h5 id="ispublic-、isprivate-、isfinal" tabindex="-1"><a class="header-anchor" href="#ispublic-、isprivate-、isfinal"><span>isPublic()、isPrivate()、isFinal()</span></a></h5><ul><li>可以使用Modifier类中的isPublic、isPrivate或isFinal判断方法或构造器是否是public、private或final。</li></ul></li><li><h5 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString()</span></a></h5><ul><li>可以利用Modifier.toString方法将修饰符打印出来</li></ul></li></ul><h4 id="其他-getdeclaredfiled-getdeclatedmethods" tabindex="-1"><a class="header-anchor" href="#其他-getdeclaredfiled-getdeclatedmethods"><span>其他：getDeclaredFiled() / getDeclatedMethods()</span></a></h4><p>可以获得一个类的某个字段或方法</p><h3 id="一个demo示例" tabindex="-1"><a class="header-anchor" href="#一个demo示例"><span>一个demo示例</span></a></h3><p>功能：提醒用户输入类名，然后输出类中所有的方法和构造器的签名</p><h4 id="程序-reflection-reflectiontest-java" tabindex="-1"><a class="header-anchor" href="#程序-reflection-reflectiontest-java"><span>程序 reflection/ReflectionTest.java</span></a></h4><p>其实这个程序应该用模板字符串来写的，字符串分散来写太不直观了</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">reflection</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 这个程序使用反射去打印一个类的所有特征
 * <span class="token keyword">@version</span> 1.1 2004-02-21
 * <span class="token keyword">@author</span> Cay Horstmann
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 从用户的终端输入中读取类名</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argslength<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> name <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Syste</span><span class="token punctuation">,</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter class name (e.g. java.util.Date):&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            name <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 获取类信息（Class, 父类的Class, 修饰符）</span>
            <span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span> supercl <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> modifiers <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 打印类名</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>modifiers<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;class &quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 打印父类名称（如果不为Object类的话）</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>supercl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> supercl <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; extends &quot;</span>
                                                                           <span class="token operator">+</span> supercl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n{n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printConstructors</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PrintMethods</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">printFields</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 找不到类的异常</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 打印类的所有结构
     * <span class="token keyword">@param</span> <span class="token parameter">cl</span> a class
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span> cl<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> c<span class="token operator">:</span> constructors<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">String</span> na<span class="token punctuation">,</span>e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> modifiers <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>modifiers <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Syste</span><span class="token punctuation">,</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 打印参数类型</span>
            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>paramTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>para<span class="token punctuation">,</span><span class="token class-name">Types</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 打印类的所有的方法
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span> cl<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclatedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> methods<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Class</span> retType <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印修改器，返回类型和方法名</span>
            <span class="token class-name">String</span> modifiers <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>modifiers <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>retType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印参数类型</span>
            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> jMparamTypes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;);&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 打印一个类中所有的字段
     * <span class="token keyword">@param</span> <span class="token parameter">cl</span> a class
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFields</span><span class="token punctuation">(</span><span class="token class-name">Class</span> cl<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f<span class="token operator">:</span>fields<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Class</span> type <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> modifiers <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getDeclatedMethods</p><h4 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 输入：</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Double</span>
    
<span class="token comment">// 输出：</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Double</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Number</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Double</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Double</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 其他方法</span>
        
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 其他字段</span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="利用反射分析对象-运行时" tabindex="-1"><a class="header-anchor" href="#利用反射分析对象-运行时"><span>利用反射分析对象（运行时）</span></a></h2><p>API：<code>java.lang.reflect.AccessibleObject 1.2</code> API：<code>java.lang.Class 1.1</code> API：<code>java.lang.reflect.Field 1.1</code></p><p>作用：</p><p>在编写程序时，如果知道想要查看的域名和类型，查看指定的域是一件很容易的事情。 而利用反射机制可以查看在编译时还不清楚的对象域。</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><h4 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span>get()</span></a></h4><p>查看对象域的关键方法是Field类中的get方法</p><p><code>f.get(obj)</code> 将返回一个对象，其值为obj域的当前值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> harry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Harry Hacker&quot;</span><span class="token punctuation">,</span> <span class="token number">35000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1989</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> cl <span class="token operator">=</span> harry<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 获取Class类：Employee_Class</span>
<span class="token class-name">Field</span> f <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 获取Employee类的Name字段</span>
<span class="token class-name">Object</span> v <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>harry<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// harry对象的name字段的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setaccessible" tabindex="-1"><a class="header-anchor" href="#setaccessible"><span>setAccessible()</span></a></h4><p>AccessibleObject类中的一个方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/* 【访问权限问题】
 * 实际上，上面这段代码存在一个问题。由于name是一个私有域，所以get方法将会抛出一个IllegalAccessException
 * 除非拥有访问权限，否则Java安全机制只允许查看任意对象有哪些域，而不允许读取它们的值。
 * 反射机制的默认行为受限于Java的访问控制
 */</span>

<span class="token comment">/* 【解决方案】
 * 然而，如果一个Java程序没有受到安全管理器的控制，就可以覆盖访问控制。
 * 为了达到这个目的，需要调用Field、Method或Constructor对象的setAccessible方法。
 * setAccessible方法是AccessibleObject类中的一个方法，它是Field、Method和Constructor类的公共超类。
 * 例如：
 */</span>

f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 设置为可访问权限，现在可以去调用 f.get(harry)了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="getdouble" tabindex="-1"><a class="header-anchor" href="#getdouble"><span>getDouble()</span></a></h4><p>get方法还有一个需要解决的问题。name域是一个String，因此把它作为Object返回没有什么问题。但是，假定我们想要查看salary域。它属于double类型，而Java中数值类型不是对象。要想解决这个问题，可以使用Field类中的getDouble方法，也可以调用get方法，此时，反射机制将会自动地将这个域值打包到相应的对象包装器中，这里将打包成Double。</p><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set()</span></a></h4><p>当然，可以获得就可以设置。调用f.set（obj，value）可以将obj对象的f域设置成新值。</p><h3 id="一个demo示例-1" tabindex="-1"><a class="header-anchor" href="#一个demo示例-1"><span>一个demo示例</span></a></h3><p>使用toString方法可以查看任意对象的内部信息，有点类似于Python的<code>__str__</code>魔术方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayLIst</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> squares <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> squares<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* print:
java.util.ArrayList[
	elementData=class java.lang.Object[]{
        java.lang.Interger[value=1][][],
        java.lang.Inter[value=4][][],
        java.lang.Interger[value=9][][],
        java.lang.Interger[value=16][][],
        java.lang.Interger[value=35][][],
        null,
        null,
        null,
        null
    },size=5
][modCount=5][][]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用通用的toString方法实现自己类中的toString方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 这是一种公认的提供toString方法的手段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个可供任意类使用的通用toString方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>@略，详见书
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用反射编写泛型数组代码" tabindex="-1"><a class="header-anchor" href="#使用反射编写泛型数组代码"><span>使用反射编写泛型数组代码</span></a></h2><p>java.lang.reflect包中的Array类允许动态地创建数组。</p><p>例如，将这个特性应用到Array类中的copyOf方法实现中</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// array is full</span>
a <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何编写这样一个通用的方法呢？</p><p>@略</p><h2 id="调用任意方法" tabindex="-1"><a class="header-anchor" href="#调用任意方法"><span>调用任意方法</span></a></h2><p>API：<code>java.lang.reflect.Method 1.1</code></p><h3 id="与c-不同-1" tabindex="-1"><a class="header-anchor" href="#与c-不同-1"><span><mark>与C++不同</mark></span></a></h3><ul><li>C和C++ <ul><li>可以从<strong>函数指针</strong>执行任意函数。</li></ul></li><li>Java <ul><li>从表面上看，Java没有提供方法指针，即将一个方法的存储地址传给另外一个方法，以便第二个方法能够随后调用它。</li><li>代替方案 <ul><li>事实上，Java的设计者曾说过：方法指针是很危险的，并且常常会带来隐患。他们认为Java提供的**接口（interface）**是一种更好的解决方案。</li><li>然而，<strong>反射机制</strong>允许你调用任意方法。</li></ul></li></ul></li><li>J++/C# <ul><li>微软公司为自己的非标准Java语言J++（以及后来的C#）增加了另一种被称为**委托（delegate）**的方法指针类型， 它与Java中的Method类不同。Java中内部类比委托更加有用。</li></ul></li></ul><h3 id="getmethod" tabindex="-1"><a class="header-anchor" href="#getmethod"><span>getMethod()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> m2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>harry<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Method</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">Method</span> m1 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> m2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;raiseSalary&quot;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><blockquote><p>可以使用method对象实现C（或C#中的委派）语言中函数指针的所有操作。同C一样，这种程序设计风格并不太简便，出错的可能性也比较大。如果在调用方法的时候提供了一个错误的参数，那么invoke方法将会抛出一个异常。</p></blockquote><p>@略，详见书</p>`,127)]))}const i=s(p,[["render",l],["__file","02. 反射 Java.Reflection.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/04.%20%E4%BC%98%E5%8C%96/%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8F%8D%E5%B0%84/02.%20%E5%8F%8D%E5%B0%84%20Java.Reflection.html","title":"注解与反射","lang":"zh-CN","frontmatter":{"description":"注解与反射 CONTENTS 反射 Java.Reflection 参考：https://www.bilibili.com/video/BV1p4411P7V3（进度：p7 end） 目录 Java反射机制概述 理解Class类并获取Class实例 类的加载与ClassLoader 创建运行时类的对象 获取运行时类的完整结构 调用运行时类的指定结构 其...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/04.%20%E4%BC%98%E5%8C%96/%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8F%8D%E5%B0%84/02.%20%E5%8F%8D%E5%B0%84%20Java.Reflection.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"注解与反射"}],["meta",{"property":"og:description","content":"注解与反射 CONTENTS 反射 Java.Reflection 参考：https://www.bilibili.com/video/BV1p4411P7V3（进度：p7 end） 目录 Java反射机制概述 理解Class类并获取Class实例 类的加载与ClassLoader 创建运行时类的对象 获取运行时类的完整结构 调用运行时类的指定结构 其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解与反射\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"注解与反射","slug":"注解与反射","link":"#注解与反射","children":[]},{"level":1,"title":"CONTENTS","slug":"contents","link":"#contents","children":[]},{"level":1,"title":"反射 Java.Reflection","slug":"反射-java-reflection","link":"#反射-java-reflection","children":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"静态 VS 动态语言","slug":"静态-vs-动态语言","link":"#静态-vs-动态语言","children":[]},{"level":2,"title":"Java反射","slug":"java反射","link":"#java反射","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"获得反射对象","slug":"获得反射对象","link":"#获得反射对象","children":[]},{"level":3,"title":"得到Class类的几种方式","slug":"得到class类的几种方式","link":"#得到class类的几种方式","children":[{"level":4,"title":"Class类的常用方法","slug":"class类的常用方法","link":"#class类的常用方法","children":[]},{"level":4,"title":"获取Class类的实例","slug":"获取class类的实例","link":"#获取class类的实例","children":[]}]}]}]},{"level":1,"title":"反射","slug":"反射","link":"#反射","children":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[{"level":3,"title":"与C++不同","slug":"与c-不同","link":"#与c-不同","children":[]}]},{"level":2,"title":"Class类","slug":"class类","link":"#class类","children":[{"level":3,"title":"本质是泛型类","slug":"本质是泛型类","link":"#本质是泛型类","children":[]},{"level":3,"title":"获取Class类","slug":"获取class类","link":"#获取class类","children":[{"level":4,"title":"getClass()","slug":"getclass","link":"#getclass","children":[]},{"level":4,"title":"forName()  （无论何时使用这个方法，都应该提供一个异常处理器）","slug":"forname-无论何时使用这个方法-都应该提供一个异常处理器","link":"#forname-无论何时使用这个方法-都应该提供一个异常处理器","children":[]},{"level":4,"title":"T.class","slug":"t-class","link":"#t-class","children":[]}]},{"level":3,"title":"Class的基本方法","slug":"class的基本方法","link":"#class的基本方法","children":[{"level":4,"title":"getName;  返回类名","slug":"getname-返回类名","link":"#getname-返回类名","children":[]},{"level":4,"title":"newInstance()  创建实例","slug":"newinstance-创建实例","link":"#newinstance-创建实例","children":[]}]},{"level":3,"title":"Class的比较","slug":"class的比较","link":"#class的比较","children":[]}]},{"level":2,"title":"利用反射分析类","slug":"利用反射分析类","link":"#利用反射分析类","children":[{"level":3,"title":"Field、Method、Constructor","slug":"field、method、constructor","link":"#field、method、constructor","children":[]},{"level":3,"title":"他们的方法","slug":"他们的方法","link":"#他们的方法","children":[{"level":4,"title":"getName()","slug":"getname","link":"#getname","children":[]},{"level":4,"title":"getType()","slug":"gettype","link":"#gettype","children":[]},{"level":4,"title":"getModifiers()","slug":"getmodifiers","link":"#getmodifiers","children":[]},{"level":4,"title":"其他：getDeclaredFiled() / getDeclatedMethods()","slug":"其他-getdeclaredfiled-getdeclatedmethods","link":"#其他-getdeclaredfiled-getdeclatedmethods","children":[]}]},{"level":3,"title":"一个demo示例","slug":"一个demo示例","link":"#一个demo示例","children":[{"level":4,"title":"程序  reflection/ReflectionTest.java","slug":"程序-reflection-reflectiontest-java","link":"#程序-reflection-reflectiontest-java","children":[]},{"level":4,"title":"输入输出","slug":"输入输出","link":"#输入输出","children":[]}]}]},{"level":2,"title":"利用反射分析对象（运行时）","slug":"利用反射分析对象-运行时","link":"#利用反射分析对象-运行时","children":[{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[{"level":4,"title":"get()","slug":"get","link":"#get","children":[]},{"level":4,"title":"setAccessible()","slug":"setaccessible","link":"#setaccessible","children":[]},{"level":4,"title":"getDouble()","slug":"getdouble","link":"#getdouble","children":[]},{"level":4,"title":"set()","slug":"set","link":"#set","children":[]}]},{"level":3,"title":"一个demo示例","slug":"一个demo示例-1","link":"#一个demo示例-1","children":[]}]},{"level":2,"title":"使用反射编写泛型数组代码","slug":"使用反射编写泛型数组代码","link":"#使用反射编写泛型数组代码","children":[]},{"level":2,"title":"调用任意方法","slug":"调用任意方法","link":"#调用任意方法","children":[{"level":3,"title":"与C++不同","slug":"与c-不同-1","link":"#与c-不同-1","children":[]},{"level":3,"title":"getMethod()","slug":"getmethod","link":"#getmethod","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.17,"words":4851},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/04. 优化/注解、反射/02. 反射 Java.Reflection.md","excerpt":"\\n<h1>CONTENTS</h1>\\n<h1>反射 Java.Reflection</h1>\\n<p>参考：https://www.bilibili.com/video/BV1p4411P7V3（进度：p7 end）</p>\\n<h2>目录</h2>\\n<ul>\\n<li>Java反射机制概述</li>\\n<li>理解Class类并获取Class实例</li>\\n<li>类的加载与ClassLoader</li>\\n<li>创建<strong>运行时类</strong>的对象</li>\\n<li>获取<strong>运行时类</strong>的完整结构</li>\\n<li>调用<strong>运行时类</strong>的指定结构</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/04. 优化/注解、反射/02. 反射 Java.Reflection.md","value":{"title":"02. 反射 Java.Reflection","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/04. 优化/注解、反射/02. 反射 Java.Reflection.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,u as data};
