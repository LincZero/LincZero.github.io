import{_ as a,c as t,e as s,b as n,o as r,r as l}from"./app-DEUP2Tjk.js";const h={};function k(p,i){const e=l("Mermaid");return r(),t("div",null,[i[0]||(i[0]=s(`<h1 id="codemirror-官网引导-系统指南-guide" tabindex="-1"><a class="header-anchor" href="#codemirror-官网引导-系统指南-guide"><span>CodeMirror 官网引导 - 系统指南（Guide）</span></a></h1><p>https://codemirror.net/docs/guide/</p><h2 id="架构概述" tabindex="-1"><a class="header-anchor" href="#架构概述"><span>架构概述</span></a></h2><h3 id="模块化-modularity" tabindex="-1"><a class="header-anchor" href="#模块化-modularity"><span>模块化（Modularity）</span></a></h3><p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p><p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p><ul><li><a href="https://codemirror.net/docs/ref/#state" target="_blank" rel="noopener noreferrer"><code>@codemirror/state</code></a>，它定义了表示<a href="https://codemirror.net/docs/ref/#state.EditorState" target="_blank" rel="noopener noreferrer">编辑器状态</a>和 对该状态的<a href="https://codemirror.net/docs/ref/#state.Transaction" target="_blank" rel="noopener noreferrer">更改</a>的数据结构。</li><li><a href="https://codemirror.net/docs/ref/#view" target="_blank" rel="noopener noreferrer"><code>@codemirror/view</code></a>，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的<a href="https://codemirror.net/docs/ref/#view.EditorView" target="_blank" rel="noopener noreferrer">显示组件。</a></li><li><a href="https://codemirror.net/docs/ref/#commands" target="_blank" rel="noopener noreferrer"><code>@codemirror/commands</code></a>，为它们定义了很多编辑命令和一些<a href="https://codemirror.net/docs/ref/#commands.defaultKeymap" target="_blank" rel="noopener noreferrer">键绑定</a>。</li></ul><p>这就是一个最小可行的编辑器的样子：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">EditorState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/state&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">EditorView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">keymap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/view&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">defaultKeymap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/commands&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> startState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EditorState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  doc</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">keymap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">defaultKeymap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> view</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EditorView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  state</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> startState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您在编辑器中期望的许多东西，例如<a href="https://codemirror.net/docs/ref/#view.lineNumbers" target="_blank" rel="noopener noreferrer">行号间距</a>或<a href="https://codemirror.net/docs/ref/#h_undo_history" target="_blank" rel="noopener noreferrer">撤消历史记录</a>，都是作为通用核心的扩展实现的，需要显式添加到要启用的配置中。为了便于入门，该<a href="https://codemirror.net/docs/ref/#codemirror" target="_blank" rel="noopener noreferrer"><code>codemirror</code></a>包引入了基线编辑器所需的大部分内容（语言包除外）。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">EditorView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">basicSetup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;codemirror&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">javascript</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/lang-javascript&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> view</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> EditorView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">basicSetup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">javascript</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  parent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些包作为<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener noreferrer">ES6 模块</a>分发。这意味着如果没有某种捆绑器（将模块化程序打包到单个大 JavaScript 文件中）或模块加载器，目前运行该库是不切实际的。如果您不熟悉捆绑，我建议您查看<a href="https://rollupjs.org/" target="_blank" rel="noopener noreferrer">rollup</a>或 <a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">Webpack</a>。</p><h3 id="功能核心-命令式外壳-functional-core-imperative-shell" tabindex="-1"><a class="header-anchor" href="#功能核心-命令式外壳-functional-core-imperative-shell"><span>功能核心，命令式外壳（Functional Core, Imperative Shell）</span></a></h3><p>指导 CodeMirror 架构的一种态度是，<strong>功能</strong>性（纯）代码创造新的价值而不是产生副作用，它比<strong>命令式</strong>代码更容易使用。 但是浏览器 DOM 显然是<strong>命令式</strong>的，与 CodeMirror 集成的许多系统一样。</p><p>为了解决这个矛盾，库的状态表示是严格函数式的——<a href="https://codemirror.net/docs/ref/#state.Text" target="_blank" rel="noopener noreferrer">文档</a>和 <a href="https://codemirror.net/docs/ref/#state.EditorState" target="_blank" rel="noopener noreferrer">状态</a>数据结构是不可变的，对它们的操作是纯函数，而<a href="https://codemirror.net/docs/ref/#view.EditorView" target="_blank" rel="noopener noreferrer">视图组件</a>和命令接口将它们包装在一个命令式接口中。</p><p>这意味着即使编辑器移动到新状态，旧状态值也会保持不变。在处理状态更改时，同时拥有旧状态和新状态通常非常有用。这也意味着直接更改状态值，或以命令方式编写附加<a href="https://codemirror.net/docs/ref/#state.StateField" target="_blank" rel="noopener noreferrer">状态字段等</a>扩展不会达到您希望的效果（并且可能只会破坏事物）。</p><p>TypeScript 接口试图通过将数组和对象属性标记为<code>readonly</code>. 当使用普通的旧 JavaScript 时，可能更难记住这一点。但作为一般规则，除非在文档中明确描述，否则不支持在库创建的对象中重新分配属性。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EditorState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">doc</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// BAD WRONG NO GOOD CODE:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">doc</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &lt;- DON&#39;T DO THIS</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态和更新-state-and-updates" tabindex="-1"><a class="header-anchor" href="#状态和更新-state-and-updates"><span>状态和更新（State and Updates）</span></a></h3><p><a href="https://redux.js.org/" target="_blank" rel="noopener noreferrer">该库以受Redux</a>或 <a href="https://guide.elm-lang.org/architecture/" target="_blank" rel="noopener noreferrer">Elm</a>等方法启发的方式处理更新 。除了少数例外（如组合和拖放处理）， <a href="https://codemirror.net/docs/ref/#view.EditorView" target="_blank" rel="noopener noreferrer">视图</a>的状态完全由其<a href="https://codemirror.net/docs/ref/#view.EditorView.state" target="_blank" rel="noopener noreferrer"><code>state</code></a>属性中的<a href="https://codemirror.net/docs/ref/#state.EditorState" target="_blank" rel="noopener noreferrer"><code>EditorState</code></a>值决定。</p><p><a href="https://codemirror.net/docs/ref/#state.EditorState.update" target="_blank" rel="noopener noreferrer">通过创建</a>描述对文档、选择或其他状态<a href="https://codemirror.net/docs/ref/#state.StateField" target="_blank" rel="noopener noreferrer">字段</a>的更改的 <a href="https://codemirror.net/docs/ref/#state.Transaction" target="_blank" rel="noopener noreferrer">事务</a>，该状态的更改发生在功能代码中 。然后可以 <a href="https://codemirror.net/docs/ref/#view.EditorView.dispatch" target="_blank" rel="noopener noreferrer">分派</a>这样的事务，它告诉视图更新其状态，此时它将其 DOM 表示与新状态同步。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// (Assume view is an EditorView instance holding the document &quot;123&quot;.)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> transaction</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">changes</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">insert</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;0123&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// At this point the view still shows the old state.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// And now it shows the new state.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>典型用户交互期间的数据流如下所示：</p>`,23)),n(e,{id:"mermaid-75",code:"eJxLL0osyFDwCeJy8fd9sqv7ye5tCrq6dgolRYl5xYnJJZn5eWB+Xmp5fHFJYkkqmFeWmVoOZsA1cQEA2iwbLA=="}),i[1]||(i[1]=s(`<p>视图监听事件。当 DOM 事件进入时，它（或绑定到键的命令，或由扩展注册的事件处理程序）将它们转换为状态事务并分发它们。这建立了一个新的状态。当新状态被提供给视图时，它会自行更新。</p><h3 id="扩展-extension" tabindex="-1"><a class="header-anchor" href="#扩展-extension"><span>扩展（Extension）</span></a></h3><h3 id="文档偏移-document-offsets" tabindex="-1"><a class="header-anchor" href="#文档偏移-document-offsets"><span>文档偏移（Document offsets）</span></a></h3><h2 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h2><h3 id="文件变更-document-changes" tabindex="-1"><a class="header-anchor" href="#文件变更-document-changes"><span>文件变更（Document-changes）</span></a></h3><h3 id="选择-selection" tabindex="-1"><a class="header-anchor" href="#选择-selection"><span>选择（selection）</span></a></h3><h3 id="配置-configuration" tabindex="-1"><a class="header-anchor" href="#配置-configuration"><span>配置（Configuration）</span></a></h3><h3 id="处理-transactions-机翻是交易" tabindex="-1"><a class="header-anchor" href="#处理-transactions-机翻是交易"><span>处理（Transactions 机翻是交易？）</span></a></h3><p>使用状态 <a href="https://codemirror.net/docs/ref/#state.EditorState.update" target="_blank" rel="noopener noreferrer"><code>update</code></a>方法创建的交易结合了许多效果（都是可选的）：</p><ul><li>它可以应用<a href="https://codemirror.net/docs/ref/#state.TransactionSpec.changes" target="_blank" rel="noopener noreferrer">文档更改</a>。</li><li>它可以显式移动 <a href="https://codemirror.net/docs/ref/#state.TransactionSpec.selection" target="_blank" rel="noopener noreferrer">选择</a>。请注意，当有文档更改但没有明确的新选择时，选择将 通过这些更改隐式<a href="https://codemirror.net/docs/ref/#state.EditorSelection.map" target="_blank" rel="noopener noreferrer">映射。</a></li><li>它可以设置一个<a href="https://codemirror.net/docs/ref/#state.TransactionSpec.scrollIntoView" target="_blank" rel="noopener noreferrer">标志</a>，指示视图将（主要）选择头滚动到视图中。</li><li>它可以有任意数量的 <a href="https://codemirror.net/docs/ref/#state.TransactionSpec.annotations" target="_blank" rel="noopener noreferrer">注解</a>，用于存储描述（整个）交易的额外元数据。例如，<a href="https://codemirror.net/docs/ref/#state.Transaction%5EuserEvent" target="_blank" rel="noopener noreferrer"><code>userEvent</code></a> 注释可用于识别为某些常见操作（如键入或粘贴）生成的事务。</li><li>它可以有<a href="https://codemirror.net/docs/ref/#state.TransactionSpec.effects" target="_blank" rel="noopener noreferrer">effects</a>，这是独立的附加效果，通常在某些扩展的状态上（例如折叠代码或启动自动完成）。</li><li>它可以通过提供一组<a href="https://codemirror.net/docs/ref/#state.StateEffect%5Ereconfigure" target="_blank" rel="noopener noreferrer">全新</a>的扩展或<a href="https://codemirror.net/docs/ref/#state.Compartment.reconfigure" target="_blank" rel="noopener noreferrer">替换</a>配置的 特定<a href="https://codemirror.net/docs/ref/#state.Compartment" target="_blank" rel="noopener noreferrer">部分</a>来影响状态的配置。</li></ul><p>要完全重置状态（例如加载新文档），建议创建新状态而不是事务。这将确保不会出现不需要的状态（例如撤消历史事件）。</p><h2 id="the-view" tabindex="-1"><a class="header-anchor" href="#the-view"><span>The View</span></a></h2><h3 id="视口-viewport" tabindex="-1"><a class="header-anchor" href="#视口-viewport"><span>视口（Viewport）</span></a></h3><h3 id="更新周期-update-cycle" tabindex="-1"><a class="header-anchor" href="#更新周期-update-cycle"><span>更新周期（Update-cycle）</span></a></h3><h3 id="dom结构-dom-structure" tabindex="-1"><a class="header-anchor" href="#dom结构-dom-structure"><span>DOM结构（Dom-structure）</span></a></h3><h3 id="风格和主题-styles-and-themes" tabindex="-1"><a class="header-anchor" href="#风格和主题-styles-and-themes"><span>风格和主题（Styles-and-themes）</span></a></h3><h3 id="命令-commands" tabindex="-1"><a class="header-anchor" href="#命令-commands"><span>命令（Commands）</span></a></h3><h2 id="扩展cm-extending-codemirror" tabindex="-1"><a class="header-anchor" href="#扩展cm-extending-codemirror"><span>扩展CM（Extending-codemirror）</span></a></h2><p>有许多不同的方法可以扩展 CodeMirror，并且为给定的用例选择正确的方法并不总是显而易见的。本节介绍编写编辑器扩展需要熟悉的各种概念。</p><h3 id="状态字段-state-fields" tabindex="-1"><a class="header-anchor" href="#状态字段-state-fields"><span>状态字段（State-fields）</span></a></h3><p>（可参考：[OB-状态字段](../Plugin_Obsidian/01. Obsidian插件开发.md/###状态字段 <code>StateField</code> - OB) ）</p><p>扩展通常需要在状态中存储额外的信息。撤消<a href="https://codemirror.net/docs/ref/#commands.history" target="_blank" rel="noopener noreferrer">历史</a>需要存储可撤消的更改，代码<a href="https://codemirror.net/docs/ref/#h_folding" target="_blank" rel="noopener noreferrer">折叠</a>扩展需要跟踪已折叠的内容，等等。</p><p>为此，扩展可以定义额外的<a href="https://codemirror.net/docs/ref/#state.StateField" target="_blank" rel="noopener noreferrer">状态字段</a>。存在于纯功能<a href="https://codemirror.net/docs/ref/#state.EditorState" target="_blank" rel="noopener noreferrer">状态</a>数据结构中的状态字段必须存储不可变值。</p><p>状态字段使用类似于<a href="https://redux.js.org/basics/reducers/" target="_blank" rel="noopener noreferrer">reducer</a>的东西与状态的其余部分保持同步。每次状态更新时，都会用字段的当前值和交易调用一个函数，它应该返回字段的新值。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">EditorState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">StateField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/state&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> countDocChanges</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> StateField</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定义一个状态字段 —— countDocChanges</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> tr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">docChanged</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EditorState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> countDocChanges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 根据该状态字段 创建一个编辑器状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">changes</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">from</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">insert</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}}).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 更新状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">countDocChanges</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) 						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 打印状态字段</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您通常会希望使用<a href="https://codemirror.net/docs/ref/#state.Annotation" target="_blank" rel="noopener noreferrer">注释</a>或 <a href="https://codemirror.net/docs/ref/#state.StateEffect" target="_blank" rel="noopener noreferrer">效果</a>来传达您的状态字段正在发生的事情。</p><p>尝试避免采取将状态放入实际状态字段的步骤可能很诱人——声明一个状态有点冗长，并且为每个状态更改触发整个事务可能感觉有点重量级。但在几乎所有情况下，将您的状态绑定到编辑器范围的状态更新周期中是一个<em>非常</em>好的主意，因为它使保持所有内容同步变得容易得多。</p><h3 id="影响视图-affecting-the-view" tabindex="-1"><a class="header-anchor" href="#影响视图-affecting-the-view"><span>影响视图（Affecting-the-view）</span></a></h3><p><a href="https://codemirror.net/docs/ref/#view.ViewPlugin" target="_blank" rel="noopener noreferrer">视图插件</a>为扩展提供了一种在视图中运行命令式组件的方法。这对于事件处理程序、添加和管理 DOM 元素以及执行依赖于当前视口的操作等非常有用。</p><p>这个简单的插件<strong>在编辑器的角落显示文档大小</strong>。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ViewPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;@codemirror/view&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> docSizePlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ViewPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fromClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dom</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建一个dom元素</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cssText</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &quot;position: absolute; inset-block-start: 2px; inset-inline-end: 5px&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">textContent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// 用来显示文档的长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">docChanged</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">textContent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				// 视图刷新时更新文档的长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  destroy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">dom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图插件通常不应保持（非派生）状态。它们最适合作为对保存在编辑器状态中的数据的浅层视图。</p><p>当状态被重新配置时，不属于新配置的视图插件将被销毁（这就是为什么，如果他们对编辑器进行了更改，他们应该定义一个<code>destroy</code>方法来撤消这些更改）。</p><p>当视图插件崩溃时，它会自动禁用以避免关闭整个视图。</p><h3 id="装饰文档-decorating-the-document" tabindex="-1"><a class="header-anchor" href="#装饰文档-decorating-the-document"><span><s>装饰文档（Decorating-the-document）</s></span></a></h3><p><mark>（详见 Decoration 专题）</mark></p><p>如果没有另行通知，CodeMirror 会将文档绘制为纯文本。<em>修饰</em>是一种机制，扩展可以通过这种机制影响文档的外观。它们有四种类型：</p><ul><li><a href="https://codemirror.net/docs/ref/#view.Decoration%5Emark" target="_blank" rel="noopener noreferrer">标记装饰</a>将样式或 DOM 属性添加到给定范围内的文本。</li><li><a href="https://codemirror.net/docs/ref/#view.Decoration%5Ewidget" target="_blank" rel="noopener noreferrer">小部件装饰</a>在文档中的给定位置插入一个 DOM 元素。</li><li><a href="https://codemirror.net/docs/ref/#view.Decoration%5Ereplace" target="_blank" rel="noopener noreferrer">替换装饰</a>隐藏部分文档或用给定的 DOM 节点替换它。</li><li><a href="https://codemirror.net/docs/ref/#view.Decoration%5Eline" target="_blank" rel="noopener noreferrer">线条装饰</a>可以将属性添加到线条的环绕元素。</li></ul><p>装饰是通过 <a href="https://codemirror.net/docs/ref/#view.EditorView%5Edecorations" target="_blank" rel="noopener noreferrer">facet</a>提供的。每次更新视图时，此方面的内容都用于设置可见内容的样式。</p><p>装饰保存在<a href="https://codemirror.net/docs/ref/#state.RangeSet" target="_blank" rel="noopener noreferrer">sets</a>中，这也是不可变的数据结构。此类集合可以 跨更改<a href="https://codemirror.net/docs/ref/#state.RangeSet.map" target="_blank" rel="noopener noreferrer">映射</a>（调整其内容的位置以补偿更改）或 在更新时<a href="https://codemirror.net/docs/ref/#state.RangeSetBuilder" target="_blank" rel="noopener noreferrer">重建</a>，具体取决于用例。</p><p>提供装饰的方式有两种</p><ul><li>直接</li><li>通过将范围集值放在构面中（通常通过 从字段<a href="https://codemirror.net/docs/ref/#state.StateField%5Edefine%5Econfig.provide" target="_blank" rel="noopener noreferrer">派生</a>），或间接地，通过提供从视图到范围集的函数。</li></ul><p>只有直接提供的装饰集可能会影响编辑器的垂直块结构，但只有间接（indirectly）提供的装饰集才能读取编辑器的视口。例如，如果你想只装饰 可见内容（<a href="https://codemirror.net/docs/ref/#view.EditorView.visibleRanges" target="_blank" rel="noopener noreferrer">visible content</a>），这可能很有用。 此限制的原因是视口是从块结构计算的，因此在读取视口之前必须知道这一点。</p><h3 id="扩展架构-extension-architecture" tabindex="-1"><a class="header-anchor" href="#扩展架构-extension-architecture"><span>扩展架构（Extension-architecture）</span></a></h3><p>要创建给定的编辑器功能，您通常需要组合不同类型的扩展：用于保持状态的状态字段、用于提供样式的基本主题、用于管理输入和输出的视图插件、一些命令，可能是用于配置的方面.</p><p>一种常见的模式是导出一个函数，该函数返回使您的功能正常工作所需的扩展值。使它成为一个函数，即使它（还）不接受参数也是一个好主意——它使得以后添加配置选项成为可能，而不会破坏向后兼容性。</p><p>由于扩展可以引入其他扩展，因此考虑多次包含您的扩展时会发生什么会很有用。对于某些类型的扩展，例如键盘映射，只做多次它正在做的事情是合适的。但通常那样会很浪费，甚至会破坏某些东西。</p><p>通常可以通过重复删除相同的扩展值来多次使用扩展，只要做正确的事情——如果你确保只创建一次静态扩展值（主题、状态字段、视图插件等），并且总是从你的扩展构造函数返回相同的实例，你只会在编辑器中得到它们的一个副本。</p><p>但是当您的扩展允许配置时，您的其他逻辑可能需要访问它。当扩展的不同实例有不同的配置时，你会怎么做？</p><p>有时，这只是一个错误。但通常可以定义协调它们的策略。方面为此工作得很好。您可以将配置放在模块私有的方面，并使其 <a href="https://codemirror.net/docs/ref/#state.Facet%5Edefine%5Econfig.combine" target="_blank" rel="noopener noreferrer">组合</a>功能协调配置或在不可能时抛出错误。然后需要访问当前配置的代码可以读取该方面。</p><p>有关此方法的说明，请参见<a href="https://codemirror.net/examples/zebra" target="_blank" rel="noopener noreferrer">斑马条纹</a>示例。</p>`,51))])}const o=a(h,[["render",k],["__file","02. CodeMirror 官网引导.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html","title":"CodeMirror 官网引导 - 系统指南（Guide）","lang":"zh-CN","frontmatter":{"description":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"CodeMirror 官网引导 - 系统指南（Guide）"}],["meta",{"property":"og:description","content":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CodeMirror 官网引导 - 系统指南（Guide）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"CodeMirror 官网引导 - 系统指南（Guide）","slug":"codemirror-官网引导-系统指南-guide","link":"#codemirror-官网引导-系统指南-guide","children":[{"level":2,"title":"架构概述","slug":"架构概述","link":"#架构概述","children":[{"level":3,"title":"模块化（Modularity）","slug":"模块化-modularity","link":"#模块化-modularity","children":[]},{"level":3,"title":"功能核心，命令式外壳（Functional Core, Imperative Shell）","slug":"功能核心-命令式外壳-functional-core-imperative-shell","link":"#功能核心-命令式外壳-functional-core-imperative-shell","children":[]},{"level":3,"title":"状态和更新（State and Updates）","slug":"状态和更新-state-and-updates","link":"#状态和更新-state-and-updates","children":[]},{"level":3,"title":"扩展（Extension）","slug":"扩展-extension","link":"#扩展-extension","children":[]},{"level":3,"title":"文档偏移（Document offsets）","slug":"文档偏移-document-offsets","link":"#文档偏移-document-offsets","children":[]}]},{"level":2,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[{"level":3,"title":"文件变更（Document-changes）","slug":"文件变更-document-changes","link":"#文件变更-document-changes","children":[]},{"level":3,"title":"选择（selection）","slug":"选择-selection","link":"#选择-selection","children":[]},{"level":3,"title":"配置（Configuration）","slug":"配置-configuration","link":"#配置-configuration","children":[]},{"level":3,"title":"处理（Transactions 机翻是交易？）","slug":"处理-transactions-机翻是交易","link":"#处理-transactions-机翻是交易","children":[]}]},{"level":2,"title":"The View","slug":"the-view","link":"#the-view","children":[{"level":3,"title":"视口（Viewport）","slug":"视口-viewport","link":"#视口-viewport","children":[]},{"level":3,"title":"更新周期（Update-cycle）","slug":"更新周期-update-cycle","link":"#更新周期-update-cycle","children":[]},{"level":3,"title":"DOM结构（Dom-structure）","slug":"dom结构-dom-structure","link":"#dom结构-dom-structure","children":[]},{"level":3,"title":"风格和主题（Styles-and-themes）","slug":"风格和主题-styles-and-themes","link":"#风格和主题-styles-and-themes","children":[]},{"level":3,"title":"命令（Commands）","slug":"命令-commands","link":"#命令-commands","children":[]}]},{"level":2,"title":"扩展CM（Extending-codemirror）","slug":"扩展cm-extending-codemirror","link":"#扩展cm-extending-codemirror","children":[{"level":3,"title":"状态字段（State-fields）","slug":"状态字段-state-fields","link":"#状态字段-state-fields","children":[]},{"level":3,"title":"影响视图（Affecting-the-view）","slug":"影响视图-affecting-the-view","link":"#影响视图-affecting-the-view","children":[]},{"level":3,"title":"装饰文档（Decorating-the-document）","slug":"装饰文档-decorating-the-document","link":"#装饰文档-decorating-the-document","children":[]},{"level":3,"title":"扩展架构（Extension-architecture）","slug":"扩展架构-extension-architecture","link":"#扩展架构-extension-architecture","children":[]}]}]}],"git":{},"readingTime":{"minutes":10.7,"words":3209},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","excerpt":"\\n<p>https://codemirror.net/docs/guide/</p>\\n<h2>架构概述</h2>\\n<h3>模块化（Modularity）</h3>\\n<p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p>\\n<p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p>\\n<ul>\\n<li><a href=\\"https://codemirror.net/docs/ref/#state\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/state</code></a>，它定义了表示<a href=\\"https://codemirror.net/docs/ref/#state.EditorState\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">编辑器状态</a>和 对该状态的<a href=\\"https://codemirror.net/docs/ref/#state.Transaction\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">更改</a>的数据结构。</li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#view\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/view</code></a>，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的<a href=\\"https://codemirror.net/docs/ref/#view.EditorView\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">显示组件。</a></li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#commands\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/commands</code></a>，为它们定义了很多编辑命令和一些<a href=\\"https://codemirror.net/docs/ref/#commands.defaultKeymap\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">键绑定</a>。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","value":{"title":"02. CodeMirror 官网引导","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,c as data};
