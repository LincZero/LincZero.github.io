import{_ as s,c as a,b as t,o as e}from"./app-DyeLIyox.js";const o={};function p(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h1><h2 id="字符类型-1" tabindex="-1"><a class="header-anchor" href="#字符类型-1"><span>字符类型</span></a></h2><p>Go像C的Char那样的字符类型，但可以用byte类型保存 (等价uint8)，如果是中文等更大的字集则可以用更大的无符号整形来存储。</p><p>Go的字符使用的是utf-8编码，查看 utf-8 编码表：http://www.mytju.com/classcode/tools/encode_utf8.asp</p><p>（这里需要注意C的char类型可以是有符号也可以是无符号的，虽然C99中定义成有符号的，但具体还是要根据编译器而定，更类似int8_t而非uint8_t。而Go这里是约定用uint8来表示的）</p><p>定义+赋值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> c1 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span>		<span class="token comment">// 97</span>
<span class="token keyword">var</span> c2 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;6&#39;</span>		<span class="token comment">// 54</span>
<span class="token keyword">var</span> c3 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;(&#39;</span> <span class="token operator">+</span> <span class="token number">20</span>	<span class="token comment">// 40 + 20</span>
<span class="token keyword">var</span> c4 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span>		<span class="token comment">// 报错，溢出，对应的10进制unicode为20013</span>
<span class="token keyword">var</span> c4 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span>		<span class="token comment">// 正确</span>

<span class="token comment">// 字符类型本质上是整数，直接打印则出来的是数字，也可以直接参数运算</span>
<span class="token comment">// 赋值的话，字母 数字 标点 汉字等会转Unicode码值码然后再赋值 (其中unicode的0~127范围和ascii码是一样的)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印：需要使用格式化输出</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> c5 <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;对应字符：%c&quot;</span><span class="token punctuation">,</span> c5<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h2><p>两个特殊点：</p><ul><li>Go语言字符类型不存在，所以这里的字符串本质上是整形串。不过比整形类型好点的是直接打印出来是字符串</li><li>在Go里字符串居然是基本数据类型，其他语言基本不属于</li><li>字符串不可变 (这点和Python中的&quot;不可变&quot;的意思是一样的)，内存不可变，但可以让指针指向另一内存</li></ul><p>定义</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;你好世界&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>

<span class="token keyword">var</span> s3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token char">&#39;abc&quot;abc&#39;</span>	<span class="token comment">// 不合法</span>
<span class="token keyword">var</span> s3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;abc\\&quot;abc&quot;</span>	<span class="token comment">// 合法</span>
<span class="token keyword">var</span> s3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">\`abc&quot;a
bc\`</span>							<span class="token comment">// 合法，反引号的使用类似Js，或类似Python raw string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 赋值。注意Go的字符串是不可变的</span>
<span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;cba&quot;</span> 		<span class="token comment">// 合法</span>
s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;t&quot;</span> 	<span class="token comment">// 不合法</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>

<span class="token comment">// 拼接</span>
<span class="token keyword">var</span> s5 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;def&quot;</span>
s5 <span class="token operator">+=</span> <span class="token string">&quot;g&quot;</span> <span class="token operator">+</span> <span class="token comment">// 需要注意，由于go的自动加分号特性，这里的加号【必须】在上一行的末尾处</span>
	<span class="token string">&quot;hijk&quot;</span>	<span class="token comment">// (与其他语言不同：Google C++、Python PEP8、Airbnb Js、Oracle Java等其他语言不强制，但都是这么建议的)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（更多方法详见 “模块库/字符串库”）</p>`,17)]))}const i=s(o,[["render",p],["__file","03_字符类型.html.vue"]]),r=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03_%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html","title":"字符类型","lang":"zh-CN","frontmatter":{"description":"字符类型 字符类型 Go像C的Char那样的字符类型，但可以用byte类型保存 (等价uint8)，如果是中文等更大的字集则可以用更大的无符号整形来存储。 Go的字符使用的是utf-8编码，查看 utf-8 编码表：http://www.mytju.com/classcode/tools/encode_utf8.asp （这里需要注意C的char类型可...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/03_%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"字符类型"}],["meta",{"property":"og:description","content":"字符类型 字符类型 Go像C的Char那样的字符类型，但可以用byte类型保存 (等价uint8)，如果是中文等更大的字集则可以用更大的无符号整形来存储。 Go的字符使用的是utf-8编码，查看 utf-8 编码表：http://www.mytju.com/classcode/tools/encode_utf8.asp （这里需要注意C的char类型可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[{"level":2,"title":"字符类型","slug":"字符类型-1","link":"#字符类型-1","children":[]},{"level":2,"title":"字符串类型","slug":"字符串类型","link":"#字符串类型","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.96,"words":587},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/02_数据+算法/03_字符类型.md","excerpt":"\\n<h2>字符类型</h2>\\n<p>Go像C的Char那样的字符类型，但可以用byte类型保存 (等价uint8)，如果是中文等更大的字集则可以用更大的无符号整形来存储。</p>\\n<p>Go的字符使用的是utf-8编码，查看 utf-8 编码表：http://www.mytju.com/classcode/tools/encode_utf8.asp</p>\\n<p>（这里需要注意C的char类型可以是有符号也可以是无符号的，虽然C99中定义成有符号的，但具体还是要根据编译器而定，更类似int8_t而非uint8_t。而Go这里是约定用uint8来表示的）</p>\\n<p>定义+赋值：</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">var</span> c1 <span class=\\"token builtin\\">byte</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'a'</span>\\t\\t<span class=\\"token comment\\">// 97</span>\\n<span class=\\"token keyword\\">var</span> c2 <span class=\\"token builtin\\">byte</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'6'</span>\\t\\t<span class=\\"token comment\\">// 54</span>\\n<span class=\\"token keyword\\">var</span> c3 <span class=\\"token builtin\\">byte</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'('</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">20</span>\\t<span class=\\"token comment\\">// 40 + 20</span>\\n<span class=\\"token keyword\\">var</span> c4 <span class=\\"token builtin\\">byte</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'中'</span>\\t\\t<span class=\\"token comment\\">// 报错，溢出，对应的10进制unicode为20013</span>\\n<span class=\\"token keyword\\">var</span> c4 <span class=\\"token builtin\\">int</span> <span class=\\"token operator\\">=</span> <span class=\\"token char\\">'中'</span>\\t\\t<span class=\\"token comment\\">// 正确</span>\\n\\n<span class=\\"token comment\\">// 字符类型本质上是整数，直接打印则出来的是数字，也可以直接参数运算</span>\\n<span class=\\"token comment\\">// 赋值的话，字母 数字 标点 汉字等会转Unicode码值码然后再赋值 (其中unicode的0~127范围和ascii码是一样的)</span>\\n</code></pre></div>","autoDesc":true}`);export{i as comp,r as data};
