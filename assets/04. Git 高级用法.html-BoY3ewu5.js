import{_ as i,c as t,e as s,o as l}from"./app-CAfWfcmi.js";const a={};function n(r,e){return l(),t("div",null,e[0]||(e[0]=[s(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span>Git</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="git-高级用法" tabindex="-1"><a class="header-anchor" href="#git-高级用法"><span>Git 高级用法</span></a></h1><p>包括合并、分支、多人协作等</p><h2 id="翻译问题" tabindex="-1"><a class="header-anchor" href="#翻译问题"><span>翻译问题</span></a></h2><blockquote><p>参考：<a href="https://linux.cn/article-7877-1.html" target="_blank" rel="noopener noreferrer">复刻：为 fork 的中文翻译定名</a>，<a href="https://cloud.tencent.com/developer/article/1458028" target="_blank" rel="noopener noreferrer">GitHub中文帮助文档上线：统一术语翻译，Fork成“分叉”</a></p><p>另外几个常见的翻译：</p><ul><li><strong>Repository</strong>：此前有人称其为仓库，有人翻译为版本库，有人则翻译成项目。现在统一称为 “仓库”</li><li><strong>Fork</strong>：翻译一直很有争议，因此通常不翻译。有翻译成分叉、也有翻译成分支的。 Linux中国翻译组（LCTT）的译者dongfengweixiao曾提议将Fork译作 “复刻”，词义和读音两方面都比较契合。现在官方将其翻译成“分叉”</li><li><strong>Issue</strong>：通常情况下选择不翻译，现在统一称作 “议题”</li><li><strong>Blame</strong>：考虑了中外的文化差异导致的理解偏差，被翻译成 “追溯”，</li><li><strong>Fetch</strong>：翻译成 “获取”</li><li><strong>Pull</strong>：翻译成 “拉取”</li></ul></blockquote><h2 id="commit规范、commit-message、change-log" tabindex="-1"><a class="header-anchor" href="#commit规范、commit-message、change-log"><span>Commit规范、Commit message、Change log</span></a></h2><p>参考：</p><ul><li>https://zhuanlan.zhihu.com/p/182553920</li><li>https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</li></ul><p>commit message格式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="type-必须" tabindex="-1"><a class="header-anchor" href="#type-必须"><span>type(必须)</span></a></h3><p>用于说明git commit的类别，只允许使用下面的标识。</p><table><thead><tr><th>类别</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新功能（feature）</td></tr><tr><td>fix/to</td><td>修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。<br>- fix：产生diff并自动修复此问题。适合于一次提交直接修复问题<br>- to：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</td></tr><tr><td>docs</td><td>文档（documentation）</td></tr><tr><td>style</td><td>格式（不影响代码运行的变动）</td></tr><tr><td>refactor</td><td>重构（即不是新增功能，也不是修改bug的代码变动）</td></tr><tr><td>perf</td><td>优化相关，比如提升性能、体验</td></tr><tr><td>test</td><td>增加测试</td></tr><tr><td>chore</td><td>构建过程或辅助工具的变动。</td></tr><tr><td>revert</td><td>回滚到上一个版本</td></tr><tr><td>merge</td><td>代码合并</td></tr><tr><td>sync</td><td>同步主线或分支的Bug</td></tr></tbody></table><h3 id="scope-可选" tabindex="-1"><a class="header-anchor" href="#scope-可选"><span>scope(可选)</span></a></h3><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p>例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用*代替。</p><h3 id="subject-必须" tabindex="-1"><a class="header-anchor" href="#subject-必须"><span>subject(必须)</span></a></h3><p>subject是commit目的的简短描述，不超过50个字符。</p><p>建议使用中文（感觉中国人用中文描述问题能更清楚一些）。</p><ul><li>结尾不加句号或其他标点符号。</li><li>根据以上规范git commit message将是如下的格式：</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fix(DAO):用户查询缺少username属性 </span></span>
<span class="line"><span>feat(Controller):用户查询接口开发</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是我们梳理的git commit规范，那么我们这样规范git commit到底有哪些好处呢？</p><ul><li>便于程序员对提交历史进行追溯，了解发生了什么情况。</li><li>一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。</li><li>格式化的commit message才可以用于自动化输出Change log。</li></ul><h2 id="brach" tabindex="-1"><a class="header-anchor" href="#brach"><span>Brach</span></a></h2><h2 id="先来说一下github-com界面" tabindex="-1"><a class="header-anchor" href="#先来说一下github-com界面"><span>先来说一下github.com界面</span></a></h2><h3 id="顶部左" tabindex="-1"><a class="header-anchor" href="#顶部左"><span>顶部左</span></a></h3><h4 id="issues" tabindex="-1"><a class="header-anchor" href="#issues"><span>Issues</span></a></h4><p>提出bug、功能请求等</p><h4 id="pull-requests-拉取请求-合并代码" tabindex="-1"><a class="header-anchor" href="#pull-requests-拉取请求-合并代码"><span>Pull requests 拉取请求（合并代码）</span></a></h4><p>合并用的，要先Fork !!!</p><p>设置里有相关的设置，默认设置为：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 允许合并提交</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 允许？？合并</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 允许？？合并</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 始终建议更新拉取请求分支</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 允许自动合并</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 自动删除头部分支</label></li></ul><p>这里有一张很好的图：</p><p>![How to Pull Request](04.%20Git 高级用法.assets/How to Pull Request.jpg)</p><h4 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>Actions</span></a></h4><h4 id="projects" tabindex="-1"><a class="header-anchor" href="#projects"><span>Projects</span></a></h4><h4 id="wiki" tabindex="-1"><a class="header-anchor" href="#wiki"><span>Wiki</span></a></h4><p>类似于说明文档的东西</p><h4 id="security" tabindex="-1"><a class="header-anchor" href="#security"><span>Security</span></a></h4><h4 id="insights" tabindex="-1"><a class="header-anchor" href="#insights"><span>Insights</span></a></h4><h4 id="setting" tabindex="-1"><a class="header-anchor" href="#setting"><span>Setting</span></a></h4><p>设置</p><h3 id="顶部右" tabindex="-1"><a class="header-anchor" href="#顶部右"><span>顶部右</span></a></h3><h4 id="pin" tabindex="-1"><a class="header-anchor" href="#pin"><span>Pin</span></a></h4><h4 id="unwatch" tabindex="-1"><a class="header-anchor" href="#unwatch"><span>Unwatch</span></a></h4><h4 id="fork" tabindex="-1"><a class="header-anchor" href="#fork"><span>Fork</span></a></h4><p>这里有一张很好的图：</p><p>![How to Pull Request](04.%20Git 高级用法.assets/How to Pull Request.jpg)</p><p>区分 Fork &amp; Braches</p><ul><li><p>Fork，直译：分流支流</p><ul><li><p>“流”，有上流和下流，上流是原仓库，<s>下流是我的……</s> 呸，下流是克隆下来仓库</p></li><li><p>用来将某个仓库克隆到你的账户之下，从而可以对其进行修改、衍生，也可以比较方便的将你的修改推回到原来的仓库（所谓的上游）。</p></li><li><p>Fork更准确的中文翻译是什么？</p><blockquote><p>参考：<a href="https://linux.cn/article-7877-1.html" target="_blank" rel="noopener noreferrer">复刻：为 fork 的中文翻译定名</a>，<a href="https://cloud.tencent.com/developer/article/1458028" target="_blank" rel="noopener noreferrer">GitHub中文帮助文档上线：统一术语翻译，Fork成“分叉”</a></p><p>主要翻译成：</p><ul><li><strong><ruby>复刻<rt>Fork</rt></ruby></strong> (中文维基同款)</li><li><strong><ruby>派生<rt>Fork</rt></ruby></strong> (git软件包里蒋新的翻译)</li><li><strong><ruby>分叉<rt>Fork</rt></ruby></strong> (Github中文帮助文档的翻译)</li></ul></blockquote></li><li><p>在 GitHub 上评价一个项目（仓库）是否流行，其中一个重要指标就是其复刻数</p><blockquote><p>在 GitHub 上参与一个开源项目的程度有三个阶段：</p><ul><li><strong>star（点赞）</strong>，如果你觉得某个项目不错，可以为其点赞（star）</li><li><strong>watch（关注）</strong>，如果你希望进一步关注这个项目的进展，可以关注（watch）它</li><li><strong>fork（复刻）</strong>，如果你还想进一步为这个项目做一些贡献，可以复刻（fork）它到你自己的账户下，做出了修改之后通过 Pull-Request（PR）方式将你的改动推回给原仓库（上游），如果被接纳就会进入到原仓库之中</li></ul></blockquote></li></ul></li><li><p>Branch，直译：分支分叉</p></li></ul><h4 id="starred" tabindex="-1"><a class="header-anchor" href="#starred"><span>Starred</span></a></h4><h2 id="追踪问题" tabindex="-1"><a class="header-anchor" href="#追踪问题"><span>追踪问题</span></a></h2><h3 id="追踪中删除" tabindex="-1"><a class="header-anchor" href="#追踪中删除"><span>追踪中删除</span></a></h3><p>当你删除一个已经存在的文件并修改<code>.gitignore</code>来忽略该文件后，如果文件再次产生，它将不会被自动同步到仓库。</p><p>但是，你需要确保已正确地将文件从Git历史中删除。仅从工作目录中删除文件并不足以将其从Git历史中删除。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 文件名</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;删除 文件名&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看所有追踪的文件" tabindex="-1"><a class="header-anchor" href="#查看所有追踪的文件"><span>查看所有追踪的文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls-files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="根据-ignore删除追踪的文件" tabindex="-1"><a class="header-anchor" href="#根据-ignore删除追踪的文件"><span>根据.ignore删除追踪的文件</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls-files</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ci</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --exclude-standard</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cached</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除所有不存在的追踪文件" tabindex="-1"><a class="header-anchor" href="#删除所有不存在的追踪文件"><span>删除所有不存在的追踪文件</span></a></h3><p>这里不需要加 <code>--cached</code>，该选项主要用于从Git索引中删除文件，而在工作目录中保留该文件。</p><p>其实上一个例子也可以不加的，可能会更好</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls-files</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --deleted</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -z</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xargs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="实战中遇到的问题-管理编译产物" tabindex="-1"><a class="header-anchor" href="#实战中遇到的问题-管理编译产物"><span>实战中遇到的问题：管理编译产物</span></a></h3><p>GPT：</p><p>Q：如果我有一个文件夹，需要存放release的html项目。而用vue框架build出来的dist文件夹里，.js文件的命名是随机的。 如果我使用git管理，在多次迭代中是否会产生大量的冗余的追踪文件</p><p>A：如果您使用Git来管理包含随机命名的<code>.js</code>文件的项目，确实有可能在多次迭代中产生大量冗余的追踪文件。这是因为在每次构建过程中，随机命名的<code>.js</code>文件可能会被视为新文件并被添加到Git仓库中。这将导致旧版本的文件依然存在于Git历史记录中，从而增加了仓库的大小。</p><p>为了避免这种情况，您可以采用以下几种策略：</p><ol><li><strong>不要将构建产物（如<code>dist</code>文件夹）添加到Git仓库</strong>：在<code>.gitignore</code>文件中添加<code>dist/</code>，以避免将<code>dist</code>文件夹添加到版本控制。您可以将构建产物部署到其他存储或托管服务，例如使用CI/CD（持续集成/持续部署）管道。</li><li><strong>在每次构建之前清理<code>dist</code>目录</strong>：在每次运行构建命令之前，确保先清理<code>dist</code>目录。这样，您可以确保只有当前构建产生的文件存在于<code>dist</code>目录中。大多数构建工具（如Webpack）都提供了自动清理目标目录的功能。</li><li><strong>定期清理Git历史记录</strong>：虽然这并不能完全解决问题，但定期清理Git历史记录可以帮助减小仓库大小。使用<code>git filter-branch</code>、<code>git rebase</code>或<code>BFG Repo-Cleaner</code>等工具可以从历史记录中删除不再需要的文件。请注意，这些操作可能会重写Git历史记录，因此在执行这些操作时要格外小心，确保您了解它们的影响。</li></ol><p>建议您采用第一种策略（不将构建产物添加到Git仓库），因为这是最符合实践的方法。这样，您可以专注于源代码的版本控制，而将构建产物部署到其他适当的托管服务。</p><p>Q：第二种策略会清除git的追踪文件？你确定？</p><p>A：抱歉，我在先前的回答中的表述不够准确。第二种策略（在每次构建之前清理<code>dist</code>目录）并不能直接解决Git冗余追踪文件的问题。在每次构建之前清理<code>dist</code>目录可以确保当前构建产生的文件不会与之前的构建产物混淆，但它不能自动从Git历史中删除这些文件。</p><p>实际上，最佳实践是不要将构建产物（如<code>dist</code>文件夹）添加到Git仓库。您应该遵循第一种策略，即在<code>.gitignore</code>文件中添加<code>dist/</code>，以避免将<code>dist</code>文件夹添加到版本控制。这将确保Git仓库中不会产生大量冗余追踪文件。</p><p>另外，您可以使用CI/CD（持续集成/持续部署）流程，将构建产物部署到其他存储或托管服务，而不是将它们包含在Git仓库中。</p><p><strong>最后</strong></p><p>emmm由于公司一向使用svn管理web的构建产物，无可更改。我最后决定：使用压缩包代替。 也许可能有的版本管理系统有的并不具备二进制文件的压缩存储功能，但管他呢，硬盘空间肯定是不缺那么一点点的，能让自己提交时少看点乱七八糟的文件，让自己更加舒服还是最重要的。</p><h2 id="git嵌套问题" tabindex="-1"><a class="header-anchor" href="#git嵌套问题"><span>Git嵌套问题</span></a></h2><p>这种情况有很多，最简单的就是记录下别人的git链接。</p><p>但问题在于：被嵌套的git库不公开怎么办？</p><ul><li>情况一：我的 stable diffusion 是开源git，而内部又有多个git开源模型 <ul><li>不过这种情况下，两个git管理的范围其实没重叠，外部git是避开了内部git的位置</li></ul></li><li>情况二：我的 pressvue 有个git，内部的多个文件夹的笔记有各自的git <ul><li>0</li></ul></li></ul>`,82)]))}const d=i(a,[["render",n],["__file","04. Git 高级用法.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/05.%20%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86/%E7%89%88%E6%9C%AC%E4%B8%8E%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/Git/04.%20Git%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html","title":"Git","lang":"zh-CN","frontmatter":{"description":"Git 目录 Git 高级用法 包括合并、分支、多人协作等 翻译问题 参考：复刻：为 fork 的中文翻译定名，GitHub中文帮助文档上线：统一术语翻译，Fork成“分叉” 另外几个常见的翻译： Repository：此前有人称其为仓库，有人翻译为版本库，有人则翻译成项目。现在统一称为 “仓库” Fork：翻译一直很有争议，因此通常不翻译。有翻译成分...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/05.%20%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86/%E7%89%88%E6%9C%AC%E4%B8%8E%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/Git/04.%20Git%20%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"Git 目录 Git 高级用法 包括合并、分支、多人协作等 翻译问题 参考：复刻：为 fork 的中文翻译定名，GitHub中文帮助文档上线：统一术语翻译，Fork成“分叉” 另外几个常见的翻译： Repository：此前有人称其为仓库，有人翻译为版本库，有人则翻译成项目。现在统一称为 “仓库” Fork：翻译一直很有争议，因此通常不翻译。有翻译成分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Git","slug":"git","link":"#git","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"Git 高级用法","slug":"git-高级用法","link":"#git-高级用法","children":[{"level":2,"title":"翻译问题","slug":"翻译问题","link":"#翻译问题","children":[]},{"level":2,"title":"Commit规范、Commit message、Change log","slug":"commit规范、commit-message、change-log","link":"#commit规范、commit-message、change-log","children":[{"level":3,"title":"type(必须)","slug":"type-必须","link":"#type-必须","children":[]},{"level":3,"title":"scope(可选)","slug":"scope-可选","link":"#scope-可选","children":[]},{"level":3,"title":"subject(必须)","slug":"subject-必须","link":"#subject-必须","children":[]}]},{"level":2,"title":"Brach","slug":"brach","link":"#brach","children":[]},{"level":2,"title":"先来说一下github.com界面","slug":"先来说一下github-com界面","link":"#先来说一下github-com界面","children":[{"level":3,"title":"顶部左","slug":"顶部左","link":"#顶部左","children":[{"level":4,"title":"Issues","slug":"issues","link":"#issues","children":[]},{"level":4,"title":"Pull requests 拉取请求（合并代码）","slug":"pull-requests-拉取请求-合并代码","link":"#pull-requests-拉取请求-合并代码","children":[]},{"level":4,"title":"Actions","slug":"actions","link":"#actions","children":[]},{"level":4,"title":"Projects","slug":"projects","link":"#projects","children":[]},{"level":4,"title":"Wiki","slug":"wiki","link":"#wiki","children":[]},{"level":4,"title":"Security","slug":"security","link":"#security","children":[]},{"level":4,"title":"Insights","slug":"insights","link":"#insights","children":[]},{"level":4,"title":"Setting","slug":"setting","link":"#setting","children":[]}]},{"level":3,"title":"顶部右","slug":"顶部右","link":"#顶部右","children":[{"level":4,"title":"Pin","slug":"pin","link":"#pin","children":[]},{"level":4,"title":"Unwatch","slug":"unwatch","link":"#unwatch","children":[]},{"level":4,"title":"Fork","slug":"fork","link":"#fork","children":[]},{"level":4,"title":"Starred","slug":"starred","link":"#starred","children":[]}]}]},{"level":2,"title":"追踪问题","slug":"追踪问题","link":"#追踪问题","children":[{"level":3,"title":"追踪中删除","slug":"追踪中删除","link":"#追踪中删除","children":[]},{"level":3,"title":"查看所有追踪的文件","slug":"查看所有追踪的文件","link":"#查看所有追踪的文件","children":[]},{"level":3,"title":"根据.ignore删除追踪的文件","slug":"根据-ignore删除追踪的文件","link":"#根据-ignore删除追踪的文件","children":[]},{"level":3,"title":"删除所有不存在的追踪文件","slug":"删除所有不存在的追踪文件","link":"#删除所有不存在的追踪文件","children":[]},{"level":3,"title":"实战中遇到的问题：管理编译产物","slug":"实战中遇到的问题-管理编译产物","link":"#实战中遇到的问题-管理编译产物","children":[]}]},{"level":2,"title":"Git嵌套问题","slug":"git嵌套问题","link":"#git嵌套问题","children":[]}]}],"git":{},"readingTime":{"minutes":8.63,"words":2588},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/Git/04. Git 高级用法.md","excerpt":"\\n<h1>目录</h1>\\n<h1>Git 高级用法</h1>\\n<p>包括合并、分支、多人协作等</p>\\n<h2>翻译问题</h2>\\n<blockquote>\\n<p>参考：<a href=\\"https://linux.cn/article-7877-1.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">复刻：为 fork 的中文翻译定名</a>，<a href=\\"https://cloud.tencent.com/developer/article/1458028\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub中文帮助文档上线：统一术语翻译，Fork成“分叉”</a></p>\\n<p>另外几个常见的翻译：</p>\\n<ul>\\n<li><strong>Repository</strong>：此前有人称其为仓库，有人翻译为版本库，有人则翻译成项目。现在统一称为 “仓库”</li>\\n<li><strong>Fork</strong>：翻译一直很有争议，因此通常不翻译。有翻译成分叉、也有翻译成分支的。\\nLinux中国翻译组（LCTT）的译者dongfengweixiao曾提议将Fork译作 “复刻”，词义和读音两方面都比较契合。现在官方将其翻译成“分叉”</li>\\n<li><strong>Issue</strong>：通常情况下选择不翻译，现在统一称作 “议题”</li>\\n<li><strong>Blame</strong>：考虑了中外的文化差异导致的理解偏差，被翻译成 “追溯”，</li>\\n<li><strong>Fetch</strong>：翻译成 “获取”</li>\\n<li><strong>Pull</strong>：翻译成 “拉取”</li>\\n</ul>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/Git/04. Git 高级用法.md","value":{"title":"04. Git 高级用法","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/Git/04. Git 高级用法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,o as data};
