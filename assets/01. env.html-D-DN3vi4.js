import{_ as i,e as n,g as o,o as s}from"./app-EuS-Ookm.js";const l={};function a(t,e){return s(),n("div",null,e[0]||(e[0]=[o(`<h1 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span>env</span></a></h1><h2 id="环境准备大概流程" tabindex="-1"><a class="header-anchor" href="#环境准备大概流程"><span>环境准备大概流程</span></a></h2><p>首先要说明的是，各种IDE以及操作系统环境下，环境准备流程略有不同。</p><p>一个首先的建议是，去各种IDE官网上去寻找他们的配置教程页，如 CLion、VS、VSCode 等都有。</p><p>针对于各种具体IDE的配置方式放在下一章节中，本章节仅大概讲述他们的共同特征，共同的大致流程，以让大家了解其依赖和配置的本质。<br> （尤其是Linux的纯命令行方式、VSCode、Github/Gitlab Workflows的方式，都比较接近于底层。）</p><h3 id="_1-ide软件" tabindex="-1"><a class="header-anchor" href="#_1-ide软件"><span>(1) IDE软件</span></a></h3><p>下载你需要使用的IDE软件 (如 <code>CLion</code>、<code>VS</code>、<code>VSCode</code> 等)</p><h3 id="_2-安装编译工具" tabindex="-1"><a class="header-anchor" href="#_2-安装编译工具"><span>(2) 安装编译工具</span></a></h3><p><strong>安装技巧</strong></p><ul><li>有些IDE软件 (如VS等)，在下载的时候可以可选编译工具。如果有可以跳过这一步。</li><li>有些IDE软件 (如CLion等)，你添加工具链时，旁边会有个“下载”按钮，也能告诉你要在什么地方下载。也能简化这一步的流程。</li><li>有些IDE软件 (如VSCode)，软件本体不捆绑太多的东西，很多环境都需要手动安装。</li></ul><p><strong>安装编译工具</strong></p><ul><li>主要需要的工具有： <ul><li><code>GUN/linux</code>、<a href="https://jb.gg/clion-mingw" target="_blank" rel="noopener noreferrer"><code>MinGW-W64</code></a>、<a href="https://visualstudio.microsoft.com/zh-hans/vs/" target="_blank" rel="noopener noreferrer"><code>VisualStudio</code></a> (通常是编译必须的一些环境，包括标准和扩展包等。windows用后两者)</li><li>gcc/g++ (满足编译单c/c++文件或简单的多文件需求)</li><li>gbd (推荐选, 如果你还需要调试、断点追踪等功能)</li><li>cmake (推荐选, 如果你需要一些 <code>CMakeList.txt</code> 或 <code>Makefile</code> 等处理项目间依赖的东西时)</li><li>vcpkg (推荐选, 包管理和依赖工具，也能配合cmake使用)</li></ul></li><li>安装助手、一些集成环境 <ul><li><strong>msys2和cygwin</strong>： 可以<strong>帮忙安装的是构建工具</strong>，也基本都能安装: xmake/cmake、ninja、gcc、g++、gdb。或msyc直接安装的 <code>MinGW工具链</code> 这种会同时包括 gcc/g++/gdb，也能提高工具准备的效率</li><li><strong>vcpkg</strong>： 可以<strong>帮忙安装的是第三方库/包依赖</strong></li><li>(当然，无论是构建工具还是第三方库，你都可以可以不使用安装助手，自行安装。例如可以去cmake官网手动下载cmake。然后有一些IDE也会帮你捆绑安装对应的内容)</li></ul></li></ul><p><strong>安装方式</strong></p><ul><li>Linux和Windows的有所不同。这里以 Winodws VScode 安装 MinGW 为例</li><li>Winodws现代会推荐使用 <a href="https://www.msys2.org/" target="_blank" rel="noopener noreferrer"><code>msys2</code></a> 来安装 <code>MinGW</code>，以前会使用 <code>Cygwin</code> 或其他 (虽然 cygwin 有个界面)<br> 这两用起来逻辑大差不差<br> msys2 它提供了 GCC、MinGW-w64 以及其他有用的 C++ 工具和库的最新原生版本</li><li>具体安装方法见Vscode官方说明：<a href="https://vscode.js.cn/docs/cpp/config-mingw" target="_blank" rel="noopener noreferrer">使用 MinGW 的 GCC</a></li></ul><h3 id="_3-环境变量与检查环境" tabindex="-1"><a class="header-anchor" href="#_3-环境变量与检查环境"><span>(3) 环境变量与检查环境</span></a></h3><p>用以下命令分别检查 gcc (或clang) 是否安装和配置到位：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gcc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">g++</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdb</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ninja</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有插件到，可以看看是不是没有添加到环境变量</p><h2 id="多ide共享环境" tabindex="-1"><a class="header-anchor" href="#多ide共享环境"><span>多IDE共享环境</span></a></h2><p>有时候，我们可以让多个IDE共享一些环境。</p><p>(1) 先检查环境变量是否存在该环境，如 <code>gdb --version</code></p><p>(2) 如果cmd检测到环境变量存在，但IDE无法自动检测到</p><ul><li>关闭IDE新开，或用管理员权限新开试试（如果刚添加的环境变量，需要新开软件才能检测到）</li><li>不然就手动在配置中写路径（一般不会）。linux/cmd可以用 <code>where gdb</code>、Windows PowerShell可以用 <code>Get-Command gdb</code> 检测路径</li></ul><p>(3) 如果环境变量中没有该环境，但你使用的某个IDE可以检测到。</p><p>（有的IDE装的环境只有自己能检测得到（没有添加到环境变量中，而是直接指定固定路径）<br> 可以去该IDE的设置中查看一下有没有相关的路径</p><p>有的软件 (VS、CLion) 安装时有捆绑的环境，但配置中又不给你说明环境在哪。这时可以去上网查一下。<br> 如CLion通常的存储位置：</p><ul><li>工具集: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\</code></li><li>CMake: <code>G:\\&lt;CLion安装路径&gt;\\bin\\cmake\\win\\x64\\bin\\cmake.exe</code></li><li>构建工具: <code>G:\\&lt;CLion安装路径&gt;\\bin\\ninja\\win\\x64\\ninja.exe</code></li><li>C编译器: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\bin\\gcc.exe</code></li><li>C++编译器: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\bin\\g++.exe</code></li><li>捆绑的GDB: <code>G:\\&lt;CLion安装路径&gt;\\bin\\gdb\\win\\x64\\bin\\gdb.exe</code></li></ul>`,27)]))}const c=i(l,[["render",a],["__file","01. env.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/01.%20env.html","title":"env","lang":"zh-CN","frontmatter":{"description":"env 环境准备大概流程 首先要说明的是，各种IDE以及操作系统环境下，环境准备流程略有不同。 一个首先的建议是，去各种IDE官网上去寻找他们的配置教程页，如 CLion、VS、VSCode 等都有。 针对于各种具体IDE的配置方式放在下一章节中，本章节仅大概讲述他们的共同特征，共同的大致流程，以让大家了解其依赖和配置的本质。 （尤其是Linux的纯命...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/01.%20env.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"env"}],["meta",{"property":"og:description","content":"env 环境准备大概流程 首先要说明的是，各种IDE以及操作系统环境下，环境准备流程略有不同。 一个首先的建议是，去各种IDE官网上去寻找他们的配置教程页，如 CLion、VS、VSCode 等都有。 针对于各种具体IDE的配置方式放在下一章节中，本章节仅大概讲述他们的共同特征，共同的大致流程，以让大家了解其依赖和配置的本质。 （尤其是Linux的纯命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"env\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.66,"words":1099},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/01. env.md","excerpt":"\\n<h2>环境准备大概流程</h2>\\n<p>首先要说明的是，各种IDE以及操作系统环境下，环境准备流程略有不同。</p>\\n<p>一个首先的建议是，去各种IDE官网上去寻找他们的配置教程页，如 CLion、VS、VSCode 等都有。</p>\\n<p>针对于各种具体IDE的配置方式放在下一章节中，本章节仅大概讲述他们的共同特征，共同的大致流程，以让大家了解其依赖和配置的本质。<br>\\n（尤其是Linux的纯命令行方式、VSCode、Github/Gitlab Workflows的方式，都比较接近于底层。）</p>\\n<h3>(1) IDE软件</h3>\\n<p>下载你需要使用的IDE软件 (如 <code>CLion</code>、<code>VS</code>、<code>VSCode</code> 等)</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/01. env.md","value":{"title":"01. env","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/01. env.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,r as data};
