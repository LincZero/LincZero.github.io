import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,a as n,b as s,d as l,e as t}from"./app-C7SjGLJX.js";const c={},r=t(`<h1 id="npm的封装上传" tabindex="-1"><a class="header-anchor" href="#npm的封装上传"><span>npm的封装上传</span></a></h1><h2 id="简单流程" tabindex="-1"><a class="header-anchor" href="#简单流程"><span>简单流程</span></a></h2><p>参考：https://juejin.cn/post/7017706309709463583</p><h3 id="_1-注册npm" tabindex="-1"><a class="header-anchor" href="#_1-注册npm"><span>(1) 注册npm</span></a></h3><p>首先需要在npm官网注册帐号并登录，官网为 https://www.npmjs.com/</p><p>此步略</p><h3 id="_2-准备本地库" tabindex="-1"><a class="header-anchor" href="#_2-准备本地库"><span>(2) 准备本地库</span></a></h3><h4 id="项目文件夹" tabindex="-1"><a class="header-anchor" href="#项目文件夹"><span>项目文件夹</span></a></h4><p>创建文件夹，我命名为firstnpm。</p><h4 id="初始化npm" tabindex="-1"><a class="header-anchor" href="#初始化npm"><span>初始化npm</span></a></h4><p>然后执行 <code>npm init -y</code></p><ul><li>其中<code>-y</code>表示，遇到选择都选择yes</li><li>当然也可以不 <code>-y</code>，那么选项：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> init
package name: <span class="token punctuation">(</span><span class="token string">&quot;folderName&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建的文件名，也是发布之后的报名。在npm中必须唯一</span>
version: <span class="token punctuation">(</span><span class="token number">1.0</span>.0<span class="token punctuation">)</span>              <span class="token comment"># 版本号  </span>
description:                  <span class="token comment"># 描述</span>
entry point: <span class="token punctuation">(</span>index.js<span class="token punctuation">)</span>       <span class="token comment"># 暴露文件</span>
<span class="token builtin class-name">test</span> command: 
<span class="token function">git</span> repository: 
keywords: 
author: 
license: <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span> GPL3
About to <span class="token function">write</span> to <span class="token punctuation">..</span>.<span class="token punctuation">\\</span>package.json: <span class="token punctuation">{</span>
    <span class="token punctuation">..</span>.                       <span class="token comment"># 执行完后，会生成一个 \`package.json\` 文件</span>
<span class="token punctuation">}</span>                             <span class="token comment"># 里面的内容就是刚刚交互式填的内容</span>
Is this OK? <span class="token punctuation">(</span>yes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>不过这种交互式指引，哪怕不对也可以后期轻松修改，前期 <code>-y</code> 其实就好</li></ul><h4 id="准备依赖包-可选" tabindex="-1"><a class="header-anchor" href="#准备依赖包-可选"><span>准备依赖包 (可选)</span></a></h4><p>如果在我们包里面需要引入别的包</p><p>例如：引入一个 lodash 包，执行 <code>npm init lodash -S</code> -S表示在生产环境中引入并写入package.josn：</p><p>[# package.josn]</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;lodash&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;^4.17.21&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="准备入口函数的暴露" tabindex="-1"><a class="header-anchor" href="#准备入口函数的暴露"><span>准备入口函数的暴露</span></a></h4><p>用 Comman JS 暴露，例如：</p><p>[# index.js]</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;loadsh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">myChunk</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> myChunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-上传npm" tabindex="-1"><a class="header-anchor" href="#_3-上传npm"><span>(3) 上传npm</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> adduser  <span class="token comment"># 先登录，在vscode里他会让我打开浏览器来登录</span>
Username: <span class="token punctuation">..</span>.
Password: <span class="token punctuation">..</span>.

$ <span class="token function">npm</span> publish  <span class="token comment"># 上传 (注意不要重名、npm账号可能需要邮箱验证)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上传成功后，可以在npm中搜索到</p><h2 id="typescript-发布" tabindex="-1"><a class="header-anchor" href="#typescript-发布"><span>TypeScript 发布</span></a></h2>`,25),d={href:"https://cloud.tencent.com/developer/article/2192280",target:"_blank",rel:"noopener noreferrer"},u=t(`<h3 id="_1-编译为js、及提供类型文件" tabindex="-1"><a class="header-anchor" href="#_1-编译为js、及提供类型文件"><span>(1) 编译为js、及提供类型文件</span></a></h3><p>如果项目是基于TS的话，虽然可以使用，但是会提示 无法找到模块“nmgwap-time-formatting”的声明文件。那接下来继续改造，使其兼容TS</p><p>[# package.json]</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 指示.d.ts的位置</span>
  <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc&quot;</span> <span class="token comment">// tsc是一个typescript编译器</span>
                   <span class="token comment">// 如果找不到，可全局安装：npm install -g typescript，</span>
                   <span class="token comment">// 然后验证：tsc --version</span>
                   <span class="token comment">// 有的资源让写 &quot;tsc -p .&quot;，就是让把生成结果放在本地路径的意思</span>
                   <span class="token comment">// 执行该命令后，所有ts文件都会被编译成三个文件：.d.ts、.js、.js.map</span>
    <span class="token string-property property">&quot;prepublishOnly&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run build&quot;</span> <span class="token comment">// 这个可以在运行publish之前自动执行，不用每次自己build那么麻烦</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 type 的内容</p><ul><li><code>type&quot;: &quot;module&quot;</code>：表示该包是 ES 模块 <ul><li>引入方式：<code>import { member } from &#39;module-name&#39;;</code></li></ul></li><li><code>type&quot;: &quot;commonjs&quot;</code>：表示该包是 CommonJS 模块 <ul><li>引入方式：<code>const module = require(&#39;module-name&#39;);</code></li></ul></li></ul><h3 id="_2-编写-tsconfig-js" tabindex="-1"><a class="header-anchor" href="#_2-编写-tsconfig-js"><span>(2) 编写 tsconfig.js</span></a></h3><p>有时可能编译失败，我们需要额外添加 tsconfig.js 文件。并且这个文件还会告诉我们编译后的文件放在哪</p><p>[# tsconfig.js]</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESNext&quot;</span><span class="token punctuation">,</span> <span class="token comment">// commonjs, ESNext</span>
    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;DOM&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ES5&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ES6&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ES7&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;dom.iterable&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;declaration&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span>    <span class="token comment">// 要编译的.ts位置</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>    <span class="token comment">// .ts编译输出的.js位置</span>
    <span class="token comment">// &quot;&quot;: &quot;&quot;, // .ts编译输出的.d.ts位置</span>
    <span class="token comment">// &quot;strict&quot;: true,</span>
    <span class="token property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;**/*.ts&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 module 的内容：</p><ul><li>有效值: &quot;CommonJS&quot;, &quot;AMD&quot;, &quot;System&quot;, &quot;UMD&quot;, &quot;ES6&quot;, &quot;ES2015&quot;, &quot;ES2020&quot;, &quot;ESNext&quot;, &quot;None&quot;, &quot;ES2022&quot;, &quot;Node16&quot;, &quot;NodeNext&quot;, &quot;Preserve&quot;</li></ul><p>复习一下：</p><table><thead><tr><th>特点</th><th>CommonJS (require)</th><th>ES 模块 (import from)</th></tr></thead><tbody><tr><td>加载时机</td><td>运行时</td><td>编译时</td></tr><tr><td>模块类型</td><td>对象</td><td>代码块</td></tr><tr><td>语法</td><td><code>const module = require(&#39;module-name&#39;);</code></td><td><code>import { member } from &#39;module-name&#39;;</code></td></tr><tr><td>导出方式</td><td><code>module.exports = value;</code></td><td><code>export const value = ...;</code></td></tr><tr><td>循环依赖</td><td>支持</td><td>不支持直接循环依赖</td></tr><tr><td>动态导入</td><td>支持</td><td>支持 <code>import()</code></td></tr></tbody></table><h3 id="_3-编写-gitignore-或-npmignore" tabindex="-1"><a class="header-anchor" href="#_3-编写-gitignore-或-npmignore"><span>(3) 编写 .gitignore 或 .npmignore</span></a></h3><p>如果是ts编译后，理应上传.js和.d.ts就足够了，上传ts源文件其实没什么必要。特别是如果你需要必源.ts的情况下</p><p>[# .npmignore]</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token operator">*</span><span class="token punctuation">.</span>ts
<span class="token comment">// 或者如果是某个特定的文件夹</span>
src<span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这两个文件不要冲突</p><h2 id="esm-cjs" tabindex="-1"><a class="header-anchor" href="#esm-cjs"><span>ESM &amp;&amp; CJS</span></a></h2><p>前面是ESM写法，如果要改成CJS：</p><ul><li>package.json，type: module/commonjs</li><li>tsconfig.json，module: &quot;ESNext/CommonJS&quot;</li></ul><h2 id="纯ts库" tabindex="-1"><a class="header-anchor" href="#纯ts库"><span>纯ts库</span></a></h2><p>https://www.npmjs.com/package/@ruan-cat/utils</p><h2 id="其他构建方法" tabindex="-1"><a class="header-anchor" href="#其他构建方法"><span>其他构建方法</span></a></h2><p>ts有很多编译工具，如 tsc、tsest、tsup、rollup、vite、webpack 等，我该如何选择？</p><h3 id="typescript-构建工具对比" tabindex="-1"><a class="header-anchor" href="#typescript-构建工具对比"><span>TypeScript 构建工具对比</span></a></h3><table><thead><tr><th>构建工具</th><th>主要特点</th><th>适用场景</th><th>配置文件</th></tr></thead><tbody><tr><td>vite</td><td>基于原生 ESM 的开发服务器，热模块替换极快<br>底层使用 rollup 进行打包</td><td>Vue、React 等前端框架项目，快速开发体验</td><td>vite.config.js</td></tr><tr><td>rollup</td><td>模块打包器，擅长库的打包</td><td>打包库，生成高质量的模块</td><td>rollup.config.js</td></tr><tr><td>tsup</td><td>支持 TypeScript<br>底层使用 esbuild 进行打包</td><td>快速打包，生成现代化 JavaScript</td><td>tsup.config.ts</td></tr><tr><td>webpack</td><td>以前的VueCLI底层使用Webpack</td><td></td><td>webpack.config.js</td></tr><tr><td>tsc</td><td>TypeScript 官方编译器，功能基础，速度较快</td><td>小型项目，快速编译</td><td>tsconfig.json</td></tr><tr><td>ts-jest</td><td>Jest 的 TypeScript 版本，用于测试</td><td>TypeScript 项目的单元测试</td><td></td></tr><tr><td>vitest</td><td></td><td></td><td></td></tr></tbody></table><ul><li>rollup中文文档：https://www.rollupjs.com/</li></ul><h2 id="【扩展】建设自己的npm私库" tabindex="-1"><a class="header-anchor" href="#【扩展】建设自己的npm私库"><span>【扩展】建设自己的npm私库</span></a></h2><p>恰如可以自己创建自己的git私库 (如gitlab)，npm也可以创建自己的npm私库。</p><p>原理应该都差不多，略</p><h2 id="仅个人吐槽" tabindex="-1"><a class="header-anchor" href="#仅个人吐槽"><span>(仅个人吐槽)</span></a></h2><blockquote><p>吐槽：</p><p>配置项太脑壳疼了，我是很久以前vue2时代学的前端，webpack是我当时认为最恶心的东西没有之一，给我搞吐了 现在重新搞……一堆esbuild、rollup、tsup、vite搞得我再次头痛</p><p>个人相关项目：见我基于vuepress-theme-hope的个人网站去引用自制插件markdown-it-any-block的过程</p></blockquote><p>群里大佬给的建议：</p><blockquote><p>纯ts包，见 https://www.npmjs.com/package/@ruan-cat/utils 写ts发布js，见 https://github.com/lint-md/prettier-plugin</p><p>库不建议用tsc打包，简单点的场景用tsup tsup比较方便的一点就是会给你自动设后缀名，然后你只要设package.json就行了</p></blockquote>`,36);function m(k,h){const a=p("ExternalLinkIcon");return o(),i("div",null,[r,n("p",null,[s("参考："),n("a",d,[s("手把手教你发布兼容TS的JS库到npmjs上"),l(a)])]),u])}const g=e(c,[["render",m],["__file","npm的封装上传.html.vue"]]),q=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/FrontEnd/npm%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8A%E4%BC%A0.html","title":"npm的封装上传","lang":"zh-CN","frontmatter":{"description":"npm的封装上传 简单流程 参考：https://juejin.cn/post/7017706309709463583 (1) 注册npm 首先需要在npm官网注册帐号并登录，官网为 https://www.npmjs.com/ 此步略 (2) 准备本地库 项目文件夹 创建文件夹，我命名为firstnpm。 初始化npm 然后执行 npm init -...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/FrontEnd/npm%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%8A%E4%BC%A0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"npm的封装上传"}],["meta",{"property":"og:description","content":"npm的封装上传 简单流程 参考：https://juejin.cn/post/7017706309709463583 (1) 注册npm 首先需要在npm官网注册帐号并登录，官网为 https://www.npmjs.com/ 此步略 (2) 准备本地库 项目文件夹 创建文件夹，我命名为firstnpm。 初始化npm 然后执行 npm init -..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"npm的封装上传\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"npm的封装上传","slug":"npm的封装上传","link":"#npm的封装上传","children":[{"level":2,"title":"简单流程","slug":"简单流程","link":"#简单流程","children":[{"level":3,"title":"(1) 注册npm","slug":"_1-注册npm","link":"#_1-注册npm","children":[]},{"level":3,"title":"(2) 准备本地库","slug":"_2-准备本地库","link":"#_2-准备本地库","children":[{"level":4,"title":"项目文件夹","slug":"项目文件夹","link":"#项目文件夹","children":[]},{"level":4,"title":"初始化npm","slug":"初始化npm","link":"#初始化npm","children":[]},{"level":4,"title":"准备依赖包 (可选)","slug":"准备依赖包-可选","link":"#准备依赖包-可选","children":[]},{"level":4,"title":"准备入口函数的暴露","slug":"准备入口函数的暴露","link":"#准备入口函数的暴露","children":[]}]},{"level":3,"title":"(3) 上传npm","slug":"_3-上传npm","link":"#_3-上传npm","children":[]}]},{"level":2,"title":"TypeScript 发布","slug":"typescript-发布","link":"#typescript-发布","children":[{"level":3,"title":"(1) 编译为js、及提供类型文件","slug":"_1-编译为js、及提供类型文件","link":"#_1-编译为js、及提供类型文件","children":[]},{"level":3,"title":"(2) 编写 tsconfig.js","slug":"_2-编写-tsconfig-js","link":"#_2-编写-tsconfig-js","children":[]},{"level":3,"title":"(3) 编写 .gitignore 或 .npmignore","slug":"_3-编写-gitignore-或-npmignore","link":"#_3-编写-gitignore-或-npmignore","children":[]}]},{"level":2,"title":"ESM && CJS","slug":"esm-cjs","link":"#esm-cjs","children":[]},{"level":2,"title":"纯ts库","slug":"纯ts库","link":"#纯ts库","children":[]},{"level":2,"title":"其他构建方法","slug":"其他构建方法","link":"#其他构建方法","children":[{"level":3,"title":"TypeScript 构建工具对比","slug":"typescript-构建工具对比","link":"#typescript-构建工具对比","children":[]}]},{"level":2,"title":"【扩展】建设自己的npm私库","slug":"【扩展】建设自己的npm私库","link":"#【扩展】建设自己的npm私库","children":[]},{"level":2,"title":"(仅个人吐槽)","slug":"仅个人吐槽","link":"#仅个人吐槽","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.54,"words":1362},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/03. 多项目管理/03. 库或包管理/FrontEnd/npm的封装上传.md","excerpt":"\\n<h2>简单流程</h2>\\n<p>参考：https://juejin.cn/post/7017706309709463583</p>\\n<h3>(1) 注册npm</h3>\\n<p>首先需要在npm官网注册帐号并登录，官网为 https://www.npmjs.com/</p>\\n<p>此步略</p>\\n<h3>(2) 准备本地库</h3>\\n<h4>项目文件夹</h4>\\n<p>创建文件夹，我命名为firstnpm。</p>\\n<h4>初始化npm</h4>\\n<p>然后执行 <code>npm init -y</code></p>\\n<ul>\\n<li>其中<code>-y</code>表示，遇到选择都选择yes</li>\\n<li>当然也可以不 <code>-y</code>，那么选项：<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">npm</span> init\\npackage name: <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"folderName\\"</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 创建的文件名，也是发布之后的报名。在npm中必须唯一</span>\\nversion: <span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1.0</span>.0<span class=\\"token punctuation\\">)</span>              <span class=\\"token comment\\"># 版本号  </span>\\ndescription:                  <span class=\\"token comment\\"># 描述</span>\\nentry point: <span class=\\"token punctuation\\">(</span>index.js<span class=\\"token punctuation\\">)</span>       <span class=\\"token comment\\"># 暴露文件</span>\\n<span class=\\"token builtin class-name\\">test</span> command: \\n<span class=\\"token function\\">git</span> repository: \\nkeywords: \\nauthor: \\nlicense: <span class=\\"token punctuation\\">(</span>ISC<span class=\\"token punctuation\\">)</span> GPL3\\nAbout to <span class=\\"token function\\">write</span> to <span class=\\"token punctuation\\">..</span>.<span class=\\"token punctuation\\">\\\\</span>package.json: <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">..</span>.                       <span class=\\"token comment\\"># 执行完后，会生成一个 `package.json` 文件</span>\\n<span class=\\"token punctuation\\">}</span>                             <span class=\\"token comment\\"># 里面的内容就是刚刚交互式填的内容</span>\\nIs this OK? <span class=\\"token punctuation\\">(</span>yes<span class=\\"token punctuation\\">)</span>\\n</code></pre></div></li>\\n<li>不过这种交互式指引，哪怕不对也可以后期轻松修改，前期 <code>-y</code> 其实就好</li>\\n</ul>","autoDesc":true}');export{g as comp,q as data};
