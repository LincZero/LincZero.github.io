import{_ as s,c as a,e as p,o as t}from"./app-Bf7apqQc.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="信号" tabindex="-1"><a class="header-anchor" href="#信号"><span>信号</span></a></h1><h2 id="工作场景、解决痛点" tabindex="-1"><a class="header-anchor" href="#工作场景、解决痛点"><span>工作场景、解决痛点</span></a></h2><p>上面说的进程间通信，都是常规状态下的工作模式。<strong>对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。</strong></p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><p>信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。</p><h3 id="信号类型" tabindex="-1"><a class="header-anchor" href="#信号类型"><span>信号类型</span></a></h3><p>所有信号：</p><p>在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分别代表不同的意义。我们可以通过 <code>kill -l</code> 命令，查看所有的信号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">kill</span> <span class="token parameter variable">-l</span>
 <span class="token number">1</span><span class="token punctuation">)</span> SIGHUP       <span class="token number">2</span><span class="token punctuation">)</span> SIGINT       <span class="token number">3</span><span class="token punctuation">)</span> SIGQUIT      <span class="token number">4</span><span class="token punctuation">)</span> SIGILL       <span class="token number">5</span><span class="token punctuation">)</span> SIGTRAP
 <span class="token number">6</span><span class="token punctuation">)</span> SIGABRT      <span class="token number">7</span><span class="token punctuation">)</span> SIGBUS       <span class="token number">8</span><span class="token punctuation">)</span> SIGFPE       <span class="token number">9</span><span class="token punctuation">)</span> SIGKILL     <span class="token number">10</span><span class="token punctuation">)</span> SIGUSR1
<span class="token number">11</span><span class="token punctuation">)</span> SIGSEGV     <span class="token number">12</span><span class="token punctuation">)</span> SIGUSR2     <span class="token number">13</span><span class="token punctuation">)</span> SIGPIPE     <span class="token number">14</span><span class="token punctuation">)</span> SIGALRM     <span class="token number">15</span><span class="token punctuation">)</span> SIGTERM
<span class="token number">16</span><span class="token punctuation">)</span> SIGSTKFLT   <span class="token number">17</span><span class="token punctuation">)</span> SIGCHLD     <span class="token number">18</span><span class="token punctuation">)</span> SIGCONT     <span class="token number">19</span><span class="token punctuation">)</span> SIGSTOP     <span class="token number">20</span><span class="token punctuation">)</span> SIGTSTP
<span class="token number">21</span><span class="token punctuation">)</span> SIGTTIN     <span class="token number">22</span><span class="token punctuation">)</span> SIGTTOU     <span class="token number">23</span><span class="token punctuation">)</span> SIGURG      <span class="token number">24</span><span class="token punctuation">)</span> SIGXCPU     <span class="token number">25</span><span class="token punctuation">)</span> SIGXFSZ
<span class="token number">26</span><span class="token punctuation">)</span> SIGVTALRM   <span class="token number">27</span><span class="token punctuation">)</span> SIGPROF     <span class="token number">28</span><span class="token punctuation">)</span> SIGWINCH    <span class="token number">29</span><span class="token punctuation">)</span> SIGIO       <span class="token number">30</span><span class="token punctuation">)</span> SIGPWR
<span class="token number">31</span><span class="token punctuation">)</span> SIGSYS      <span class="token number">34</span><span class="token punctuation">)</span> SIGRTMIN    <span class="token number">35</span><span class="token punctuation">)</span> SIGRTMIN+1  <span class="token number">36</span><span class="token punctuation">)</span> SIGRTMIN+2  <span class="token number">37</span><span class="token punctuation">)</span> SIGRTMIN+3
<span class="token number">38</span><span class="token punctuation">)</span> SIGRTMIN+4  <span class="token number">39</span><span class="token punctuation">)</span> SIGRTMIN+5  <span class="token number">40</span><span class="token punctuation">)</span> SIGRTMIN+6  <span class="token number">41</span><span class="token punctuation">)</span> SIGRTMIN+7  <span class="token number">42</span><span class="token punctuation">)</span> SIGRTMIN+8
<span class="token number">43</span><span class="token punctuation">)</span> SIGRTMIN+9  <span class="token number">44</span><span class="token punctuation">)</span> SIGRTMIN+10 <span class="token number">45</span><span class="token punctuation">)</span> SIGRTMIN+11 <span class="token number">46</span><span class="token punctuation">)</span> SIGRTMIN+12 <span class="token number">47</span><span class="token punctuation">)</span> SIGRTMIN+13
<span class="token number">48</span><span class="token punctuation">)</span> SIGRTMIN+14 <span class="token number">49</span><span class="token punctuation">)</span> SIGRTMIN+15 <span class="token number">50</span><span class="token punctuation">)</span> SIGRTMAX-14 <span class="token number">51</span><span class="token punctuation">)</span> SIGRTMAX-13 <span class="token number">52</span><span class="token punctuation">)</span> SIGRTMAX-12
<span class="token number">53</span><span class="token punctuation">)</span> SIGRTMAX-11 <span class="token number">54</span><span class="token punctuation">)</span> SIGRTMAX-10 <span class="token number">55</span><span class="token punctuation">)</span> SIGRTMAX-9  <span class="token number">56</span><span class="token punctuation">)</span> SIGRTMAX-8  <span class="token number">57</span><span class="token punctuation">)</span> SIGRTMAX-7
<span class="token number">58</span><span class="token punctuation">)</span> SIGRTMAX-6  <span class="token number">59</span><span class="token punctuation">)</span> SIGRTMAX-5  <span class="token number">60</span><span class="token punctuation">)</span> SIGRTMAX-4  <span class="token number">61</span><span class="token punctuation">)</span> SIGRTMAX-3  <span class="token number">62</span><span class="token punctuation">)</span> SIGRTMAX-2
<span class="token number">63</span><span class="token punctuation">)</span> SIGRTMAX-1  <span class="token number">64</span><span class="token punctuation">)</span> SIGRTMAX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="信号举例" tabindex="-1"><a class="header-anchor" href="#信号举例"><span>信号举例</span></a></h3><p>信号事件的来源主要有：</p><ul><li><p>硬件来源（如键盘 Cltr+C ）</p><ul><li><p>运行在 shell 终端的进程，我们可以通过键盘输入某些组合键的时候，给进程发送信号。例如：</p><p>Ctrl+C 产生 <code>SIGINT</code> 信号，表示终止该进程；</p><p>Ctrl+Z 产生 <code>SIGTSTP</code> 信号，表示停止该进程，但还未结束；</p></li></ul></li><li><p>软件来源（如 kill 命令）</p><ul><li>如果进程在后台运行，可以通过 <code>kill</code> 命令的方式给进程发送信号，但前提需要知道运行中的进程 PID 号，例如： kill -9 1050 ，表示给 PID 为 1050 的进程发送 <code>SIGKILL</code> 信号，用来立即结束该进程；</li></ul></li></ul><h3 id="信号处理" tabindex="-1"><a class="header-anchor" href="#信号处理"><span>信号处理</span></a></h3><p>信号是进程间通信机制中 <strong>唯一的异步通信机制</strong>，因为可以在任何时候发送信号给某一进程，一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。</p><ol><li><strong>执行默认操作</strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM 信号，就是终止进程的意思。</li><li><strong>捕捉信号</strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</li><li><strong>忽略信号</strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 <code>SIGKILL</code> 和 <code>SEGSTOP</code>，它们用于在任何时候中断或结束某一进程。</li></ol>`,15)]))}const l=s(e,[["render",o],["__file","05. 信号.html.vue"]]),i=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/02.%20%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/05.%20%E4%BF%A1%E5%8F%B7.html","title":"信号","lang":"zh-CN","frontmatter":{"description":"信号 工作场景、解决痛点 上面说的进程间通信，都是常规状态下的工作模式。对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。 原理 信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。 信号类型 所有信号： 在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/02.%20%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/05.%20%E4%BF%A1%E5%8F%B7.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"信号"}],["meta",{"property":"og:description","content":"信号 工作场景、解决痛点 上面说的进程间通信，都是常规状态下的工作模式。对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。 原理 信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。 信号类型 所有信号： 在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"信号\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"信号","slug":"信号","link":"#信号","children":[{"level":2,"title":"工作场景、解决痛点","slug":"工作场景、解决痛点","link":"#工作场景、解决痛点","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"信号类型","slug":"信号类型","link":"#信号类型","children":[]},{"level":3,"title":"信号举例","slug":"信号举例","link":"#信号举例","children":[]},{"level":3,"title":"信号处理","slug":"信号处理","link":"#信号处理","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.35,"words":704},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/05. 信号.md","excerpt":"\\n<h2>工作场景、解决痛点</h2>\\n<p>上面说的进程间通信，都是常规状态下的工作模式。<strong>对于异常情况下的工作模式，就需要用「信号」的方式来通知进程。</strong></p>\\n<h2>原理</h2>\\n<p>信号跟信号量虽然名字相似度 66.66%，但两者用途完全不一样，就好像 Java 和 JavaScript 的区别。</p>\\n<h3>信号类型</h3>\\n<p>所有信号：</p>\\n<p>在 Linux 操作系统中， 为了响应各种各样的事件，提供了几十种信号，分别代表不同的意义。我们可以通过 <code>kill -l</code> 命令，查看所有的信号：</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">kill</span> <span class=\\"token parameter variable\\">-l</span>\\n <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> SIGHUP       <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span> SIGINT       <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span> SIGQUIT      <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span> SIGILL       <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span> SIGTRAP\\n <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span> SIGABRT      <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">)</span> SIGBUS       <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">)</span> SIGFPE       <span class=\\"token number\\">9</span><span class=\\"token punctuation\\">)</span> SIGKILL     <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> SIGUSR1\\n<span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> SIGSEGV     <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">)</span> SIGUSR2     <span class=\\"token number\\">13</span><span class=\\"token punctuation\\">)</span> SIGPIPE     <span class=\\"token number\\">14</span><span class=\\"token punctuation\\">)</span> SIGALRM     <span class=\\"token number\\">15</span><span class=\\"token punctuation\\">)</span> SIGTERM\\n<span class=\\"token number\\">16</span><span class=\\"token punctuation\\">)</span> SIGSTKFLT   <span class=\\"token number\\">17</span><span class=\\"token punctuation\\">)</span> SIGCHLD     <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">)</span> SIGCONT     <span class=\\"token number\\">19</span><span class=\\"token punctuation\\">)</span> SIGSTOP     <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span> SIGTSTP\\n<span class=\\"token number\\">21</span><span class=\\"token punctuation\\">)</span> SIGTTIN     <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">)</span> SIGTTOU     <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">)</span> SIGURG      <span class=\\"token number\\">24</span><span class=\\"token punctuation\\">)</span> SIGXCPU     <span class=\\"token number\\">25</span><span class=\\"token punctuation\\">)</span> SIGXFSZ\\n<span class=\\"token number\\">26</span><span class=\\"token punctuation\\">)</span> SIGVTALRM   <span class=\\"token number\\">27</span><span class=\\"token punctuation\\">)</span> SIGPROF     <span class=\\"token number\\">28</span><span class=\\"token punctuation\\">)</span> SIGWINCH    <span class=\\"token number\\">29</span><span class=\\"token punctuation\\">)</span> SIGIO       <span class=\\"token number\\">30</span><span class=\\"token punctuation\\">)</span> SIGPWR\\n<span class=\\"token number\\">31</span><span class=\\"token punctuation\\">)</span> SIGSYS      <span class=\\"token number\\">34</span><span class=\\"token punctuation\\">)</span> SIGRTMIN    <span class=\\"token number\\">35</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+1  <span class=\\"token number\\">36</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+2  <span class=\\"token number\\">37</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+3\\n<span class=\\"token number\\">38</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+4  <span class=\\"token number\\">39</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+5  <span class=\\"token number\\">40</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+6  <span class=\\"token number\\">41</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+7  <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+8\\n<span class=\\"token number\\">43</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+9  <span class=\\"token number\\">44</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+10 <span class=\\"token number\\">45</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+11 <span class=\\"token number\\">46</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+12 <span class=\\"token number\\">47</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+13\\n<span class=\\"token number\\">48</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+14 <span class=\\"token number\\">49</span><span class=\\"token punctuation\\">)</span> SIGRTMIN+15 <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-14 <span class=\\"token number\\">51</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-13 <span class=\\"token number\\">52</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-12\\n<span class=\\"token number\\">53</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-11 <span class=\\"token number\\">54</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-10 <span class=\\"token number\\">55</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-9  <span class=\\"token number\\">56</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-8  <span class=\\"token number\\">57</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-7\\n<span class=\\"token number\\">58</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-6  <span class=\\"token number\\">59</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-5  <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-4  <span class=\\"token number\\">61</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-3  <span class=\\"token number\\">62</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-2\\n<span class=\\"token number\\">63</span><span class=\\"token punctuation\\">)</span> SIGRTMAX-1  <span class=\\"token number\\">64</span><span class=\\"token punctuation\\">)</span> SIGRTMAX\\n</code></pre></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/05. 信号.md","value":{"title":"05. 信号","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/05. 信号.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{l as comp,i as data};
