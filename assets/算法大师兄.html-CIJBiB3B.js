import{_ as i,c as n,e,o as t}from"./app-7Hf1q1UN.js";const a="/assets/image-20240217141214769-DMPFpxdh.png",p="/assets/image-20240217141138347-DIoJHwWi.png",s="/assets/image-20240217141450248-B0PqsoL0.png",o="/assets/image-20240217141650000-Ck0kKN3Y.png",r="/assets/image-20240217150011199-BRWvDBf_.png",c="/assets/image-20240217145948617-Ba1RMCKN.png",m="/assets/image-20240217150354041-Ao6rfbNk.png",g="/assets/image-20240217150525225-CUoAsoJe.png",u="/assets/image-20240218193525231-Bme09VsM.png",h="/assets/image-20240218193852720-BeCAlFF5.png",d="/assets/image-20240218194310547-XItxdsXc.png",_={};function b(D,l){return t(),n("div",null,l[0]||(l[0]=[e('<h1 id="算法大师兄" tabindex="-1"><a class="header-anchor" href="#算法大师兄"><span>算法大师兄</span></a></h1><p>参考：</p><ul><li>https://space.bilibili.com/1784235102，这里主要记的是《合集 · 热血编程》系列</li><li>https://space.bilibili.com/319521269，主要参考《合集 · 夜深人静写算法》、《合集 · 面试离谱题集》</li></ul><h2 id="一分钟记住所有算法" tabindex="-1"><a class="header-anchor" href="#一分钟记住所有算法"><span>一分钟记住所有算法</span></a></h2><ol><li>顺序表。顺序表和顺序表相关的算法主要有： <ul><li>线性枚举</li><li>前缀</li><li>双指针</li><li>二分枚举</li><li>三分枚举</li><li>离散化</li><li>排序：冒泡排序、选择排序、插入排序、快速排序、希尔排序、归并排序、堆排序、基数排序、计数排序</li><li>模拟</li><li>贪心</li></ul></li><li>链表 <ul><li>单向链表</li><li>双向链表</li></ul></li><li>栈 <ul><li>后进先出栈（LIFO栈，Last Input, First Output）</li><li>单调栈</li></ul></li><li>队列 <ul><li>先进先出队列（FIFO队列，First Input, First Output）</li><li>双端队列</li><li>单调队列</li></ul></li><li>字符串 <ul><li>kmp</li><li>字典树</li><li>马拉车</li><li>AC自动机</li><li>后缀数组</li><li>BM</li></ul></li><li>树 <ul><li>二叉树</li><li>二叉搜索树</li><li>AVL树</li><li>线段树</li><li>霍夫曼树</li><li>堆</li><li>红黑树</li><li>伸展树</li><li>左偏树</li><li>Treap</li><li>B+树</li><li>树链剖分</li></ul></li><li>图 <ul><li>二分图</li><li>最短路</li><li>最小生成树</li><li>最近公共祖先</li><li>深度优先搜索</li><li>强连通分量</li><li>双连通分量</li><li>2-sat（读two-sat）</li><li>欧拉回路</li><li>哈米尔顿回路</li><li>迭代加深</li><li>广度优先搜索</li><li>拓扑排序</li><li>A*</li><li>稳定婚姻</li><li>双向广搜</li><li>差分约束</li><li>并查集</li><li>哈希表</li><li>跳跃表</li><li>树状数组</li><li>最大流</li></ul></li><li>动态规划（DP，Dynamic Programming） <ul><li>递归</li><li>线性DP</li><li>记忆化搜索</li><li>背包问题</li><li>树形DP</li><li>区间DP</li><li>数位DP</li><li>状压DP</li></ul></li><li>其他网友补充 <ul><li>图卷积、遗传算法、蚁群算法、粒子群算法、随机森林、XGBOOST、LightGBM、退火</li><li>斐波那契堆，cdq分治，kd树，扩展欧几里得，线性规划（单纯形算法）。还有计算机几何的一些算法（比如求求凸包直径的旋转卡壳）</li><li>重链剖分，长链剖分，实链剖分，Splay树，link cut tree，间隔打表，插头dp</li></ul></li></ol><h2 id="枚举算法的优化" tabindex="-1"><a class="header-anchor" href="#枚举算法的优化"><span>枚举算法的优化</span></a></h2><p><a href="https://leetcode.cn/problems/count-increasing-quadruplets/" target="_blank" rel="noopener noreferrer">2552. 统计上升四元组</a></p><p><img src="'+a+'" alt="image-20240217141214769" loading="lazy"></p><blockquote><p>即找类似 1324 这样的四元组，ijkl</p></blockquote><p>版本一：O(n^4)：</p><p><img src="'+p+'" alt="image-20240217141138347" loading="lazy"></p><p>版本二：O(n^3)：先找位于中间k和j，再往外找i和l</p><p><img src="'+s+'" alt="image-20240217141450248" loading="lazy"></p><p>版本三：O(n^2)，看不太懂，等学完其他再回来看</p><blockquote><p>cnt记录类似132的三元组（利用空间，加速时间）。找类似 1324 这样的四元组，ijkl。</p><p>先定jl，再找ik。j，枚举第二个数再枚举第一个数</p><p>评论区好像说：</p><ul><li>树状数组随便弄就行</li><li>有说能用归并排序统计二元组然后标记看作一个整体进行枚举或者离散化再来统计（可加前缀和优化）</li><li>有低于n^2的做法，线段树</li><li>用类似于KMP算法的原理解题，把已经获取到的4个数先缓存起来</li></ul></blockquote><p><img src="'+o+'" alt="image-20240217141650000" loading="lazy"></p><h1 id="英雄哪里出来-合集·面试离谱题集" tabindex="-1"><a class="header-anchor" href="#英雄哪里出来-合集·面试离谱题集"><span>英雄哪里出来 - 合集·面试离谱题集</span></a></h1><h2 id="_01-两数之和-如何不断优化你的代码效率" tabindex="-1"><a class="header-anchor" href="#_01-两数之和-如何不断优化你的代码效率"><span>(01) 两数之和，如何不断优化你的代码效率？</span></a></h2><p>https://leetcode.cn/problems/two-sum/</p><p><img src="'+r+'" alt="image-20240217150011199" loading="lazy"></p><p>方案一，暴力枚举，O(n^2)，500ms</p><p><img src="'+c+'" alt="image-20240217145948617" loading="lazy"></p><p>方案二，二分查找，但需要数组有序，这里用了一个vector（排序可能需要O(NlogN)，后续二分logN），12ms</p><p><img src="'+m+'" alt="image-20240217150354041" loading="lazy"></p><p>方案三：代码太长了，换用map，直接给桶排</p><p>方案三点一：Map是红黑树，增删改查复杂度O(logN)，反而更慢，8ms</p><p><img src="'+g+'" alt="image-20240217150525225" loading="lazy"></p><p>方案三点二：应使用unordered_map，变成哈希表，时间复杂度O(1)，但还是12ms。然后变成从后往前找，就4ms了</p><h2 id="_15-三数之和" tabindex="-1"><a class="header-anchor" href="#_15-三数之和"><span>(15) 三数之和</span></a></h2><p>方法一，暴力枚举，O(n^3)</p><p><img src="'+u+'" alt="image-20240218193525231" loading="lazy"></p><p>方法二，Map</p><p><img src="'+h+'" alt="image-20240218193852720" loading="lazy"></p><p>方法三，双指针</p><p><img src="'+d+'" alt="image-20240218194310547" loading="lazy"></p>',35)]))}const A=i(_,[["render",b],["__file","算法大师兄.html.vue"]]),y=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%A4%A7%E5%B8%88%E5%85%84.html","title":"算法大师兄","lang":"zh-CN","frontmatter":{"description":"算法大师兄 参考： https://space.bilibili.com/1784235102，这里主要记的是《合集 · 热血编程》系列 https://space.bilibili.com/319521269，主要参考《合集 · 夜深人静写算法》、《合集 · 面试离谱题集》 一分钟记住所有算法 顺序表。顺序表和顺序表相关的算法主要有： 线性枚举 前缀...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E5%A4%A7%E5%B8%88%E5%85%84.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"算法大师兄"}],["meta",{"property":"og:description","content":"算法大师兄 参考： https://space.bilibili.com/1784235102，这里主要记的是《合集 · 热血编程》系列 https://space.bilibili.com/319521269，主要参考《合集 · 夜深人静写算法》、《合集 · 面试离谱题集》 一分钟记住所有算法 顺序表。顺序表和顺序表相关的算法主要有： 线性枚举 前缀..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法大师兄\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"算法大师兄","slug":"算法大师兄","link":"#算法大师兄","children":[{"level":2,"title":"一分钟记住所有算法","slug":"一分钟记住所有算法","link":"#一分钟记住所有算法","children":[]},{"level":2,"title":"枚举算法的优化","slug":"枚举算法的优化","link":"#枚举算法的优化","children":[]}]},{"level":1,"title":"英雄哪里出来 - 合集·面试离谱题集","slug":"英雄哪里出来-合集·面试离谱题集","link":"#英雄哪里出来-合集·面试离谱题集","children":[{"level":2,"title":"(01) 两数之和，如何不断优化你的代码效率？","slug":"_01-两数之和-如何不断优化你的代码效率","link":"#_01-两数之和-如何不断优化你的代码效率","children":[]},{"level":2,"title":"(15) 三数之和","slug":"_15-三数之和","link":"#_15-三数之和","children":[]}]}],"git":{},"readingTime":{"minutes":3.26,"words":979},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法大师兄.md","excerpt":"\\n<p>参考：</p>\\n<ul>\\n<li>https://space.bilibili.com/1784235102，这里主要记的是《合集 · 热血编程》系列</li>\\n<li>https://space.bilibili.com/319521269，主要参考《合集 · 夜深人静写算法》、《合集 · 面试离谱题集》</li>\\n</ul>\\n<h2>一分钟记住所有算法</h2>\\n<ol>\\n<li>顺序表。顺序表和顺序表相关的算法主要有：\\n<ul>\\n<li>线性枚举</li>\\n<li>前缀</li>\\n<li>双指针</li>\\n<li>二分枚举</li>\\n<li>三分枚举</li>\\n<li>离散化</li>\\n<li>排序：冒泡排序、选择排序、插入排序、快速排序、希尔排序、归并排序、堆排序、基数排序、计数排序</li>\\n<li>模拟</li>\\n<li>贪心</li>\\n</ul>\\n</li>\\n<li>链表\\n<ul>\\n<li>单向链表</li>\\n<li>双向链表</li>\\n</ul>\\n</li>\\n<li>栈\\n<ul>\\n<li>后进先出栈（LIFO栈，Last Input, First Output）</li>\\n<li>单调栈</li>\\n</ul>\\n</li>\\n<li>队列\\n<ul>\\n<li>先进先出队列（FIFO队列，First Input, First Output）</li>\\n<li>双端队列</li>\\n<li>单调队列</li>\\n</ul>\\n</li>\\n<li>字符串\\n<ul>\\n<li>kmp</li>\\n<li>字典树</li>\\n<li>马拉车</li>\\n<li>AC自动机</li>\\n<li>后缀数组</li>\\n<li>BM</li>\\n</ul>\\n</li>\\n<li>树\\n<ul>\\n<li>二叉树</li>\\n<li>二叉搜索树</li>\\n<li>AVL树</li>\\n<li>线段树</li>\\n<li>霍夫曼树</li>\\n<li>堆</li>\\n<li>红黑树</li>\\n<li>伸展树</li>\\n<li>左偏树</li>\\n<li>Treap</li>\\n<li>B+树</li>\\n<li>树链剖分</li>\\n</ul>\\n</li>\\n<li>图\\n<ul>\\n<li>二分图</li>\\n<li>最短路</li>\\n<li>最小生成树</li>\\n<li>最近公共祖先</li>\\n<li>深度优先搜索</li>\\n<li>强连通分量</li>\\n<li>双连通分量</li>\\n<li>2-sat（读two-sat）</li>\\n<li>欧拉回路</li>\\n<li>哈米尔顿回路</li>\\n<li>迭代加深</li>\\n<li>广度优先搜索</li>\\n<li>拓扑排序</li>\\n<li>A*</li>\\n<li>稳定婚姻</li>\\n<li>双向广搜</li>\\n<li>差分约束</li>\\n<li>并查集</li>\\n<li>哈希表</li>\\n<li>跳跃表</li>\\n<li>树状数组</li>\\n<li>最大流</li>\\n</ul>\\n</li>\\n<li>动态规划（DP，Dynamic Programming）\\n<ul>\\n<li>递归</li>\\n<li>线性DP</li>\\n<li>记忆化搜索</li>\\n<li>背包问题</li>\\n<li>树形DP</li>\\n<li>区间DP</li>\\n<li>数位DP</li>\\n<li>状压DP</li>\\n</ul>\\n</li>\\n<li>其他网友补充\\n<ul>\\n<li>图卷积、遗传算法、蚁群算法、粒子群算法、随机森林、XGBOOST、LightGBM、退火</li>\\n<li>斐波那契堆，cdq分治，kd树，扩展欧几里得，线性规划（单纯形算法）。还有计算机几何的一些算法（比如求求凸包直径的旋转卡壳）</li>\\n<li>重链剖分，长链剖分，实链剖分，Splay树，link cut tree，间隔打表，插头dp</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法大师兄.md","value":{"title":"算法大师兄","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法大师兄.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{A as comp,y as data};
