import{_ as l,c as s,e,o as a}from"./app-DEUP2Tjk.js";const t={};function n(h,i){return a(),s("div",null,i[0]||(i[0]=[e(`<h1 id="sql语句" tabindex="-1"><a class="header-anchor" href="#sql语句"><span>SQL语句</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="tcl事务控制语言" tabindex="-1"><a class="header-anchor" href="#tcl事务控制语言"><span>TCL事务控制语言</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><ul><li>事务 <ul><li>事务（transaction），是一个完整的业务逻辑单元，不可再分</li></ul></li><li>应用场景 <ul><li>举例：A向B转账10000，则需要执行两条updata语句。这两条语句必须同时成功或同时失败，不允许一条成功一条失败</li></ul></li><li>TCL与DML <ul><li>和事务相关的语句只有DML语句</li><li>因为这三个语句都和数据相关，而事务的存在是为了保证数据的完整性、安全性</li><li>假设所有的业务都能使用1条DML语句搞定，则不需要事务机制</li></ul></li><li>事务的原理 <ul><li>(1) 开启事务机制</li><li>(2) 执行语句（语句执行成功后悔把执行记录到操作历史中，并不会真正修改硬盘上的数据）</li><li>(3) 重复多次步骤2</li><li>(4) 提交事务或者回滚事务（这步才会真正修改硬盘上的数据）</li></ul></li><li>事务的四大特性：ACID <ul><li>A：原子性：（Atomicity）事务是最小的工作单元，不可再分</li><li>C：一致性：（Consistency)事务必须保证多条DML语句同时成功或同时失败</li><li>I：隔离性（Isolation）事务A与事务B之间具有隔离</li><li>D：持久性（Durability）持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束</li></ul></li></ul><h2 id="事务使用" tabindex="-1"><a class="header-anchor" href="#事务使用"><span>事务使用</span></a></h2><p>MySQL事务默认情况下是自动提交：只要执行任意一条DML语句则提交一次</p><p>关闭自动提交：<code>start transaction;</code></p><p>演示 - 准备表</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">drop</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> t_user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> primary key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    username </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示 - 没关闭自动提交的情况</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user(username) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;zs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); 	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 插入（自动COMMIT了，无法回滚）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 数据更新了</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;									</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 回滚（此处无法回滚，因为前面提交了）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 数据不变</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示 - 关闭自动提交的情况</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 开启事务并关闭自动提交</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user(username) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ls&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 插入（没有COMMIT，可以回滚）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 数据更新了</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- commit;									-- 此时可以手动提交，然后后面就无法回滚了</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;									</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 回滚</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user;						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 数据变回原来的情况</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commit-提交" tabindex="-1"><a class="header-anchor" href="#commit-提交"><span>COMMIT（提交）</span></a></h3><p>略，见事务使用</p><h3 id="rollback-回滚" tabindex="-1"><a class="header-anchor" href="#rollback-回滚"><span>ROLLBACK（回滚）</span></a></h3><p>略，见事务使用</p><h3 id="savepoint-保存点" tabindex="-1"><a class="header-anchor" href="#savepoint-保存点"><span>SAVEPOINT（保存点）</span></a></h3><p>作用：回滚时会回滚到保存点</p><h2 id="隔离级别与演示" tabindex="-1"><a class="header-anchor" href="#隔离级别与演示"><span>隔离级别与演示</span></a></h2><h3 id="四个隔离级别" tabindex="-1"><a class="header-anchor" href="#四个隔离级别"><span>四个隔离级别</span></a></h3><p>隔离性补充——四个隔离级别（隔离性存在隔离级别，理论上隔离级别包含4个）</p><ul><li>第一级别：<code>读未提交</code>（<em>read uncommited</em>） <ul><li>对方事务还没提交，我们当前事务可以读取到对方未提交的数据（缓存中、还未持久化的数据）</li><li>存在的问题：<code>脏读</code>（dirty read）现象（表示读到了脏的数据、不稳定数据）</li></ul></li><li>第二级别：<code>读已提交</code>（<em>read committed</em>） <ul><li>对方事务提交之后的数据我方可以读取到</li><li>解决了问题：脏读现象</li><li>存在的问题：不可重复读（这个名字有点歧义，其实是表示读不到以前的数据）</li></ul></li><li>第三级别：<code>可重复读</code>（<em>repeatable read</em>） <ul><li>解决了问题：不可重复读</li><li>存在的问题：读取到的数据是假</li></ul></li><li>第四级别：<code>序列化读/串行化读</code>（<em>serializable</em>） <ul><li>解决了问题：所有问题</li><li>存在的问题：效率低，需要事务排队</li></ul></li><li>其他补充 <ul><li>Oracle数据库默认的隔离级别：读已提交</li><li>MySQL数据库默认的隔离级别：可重复读</li></ul></li></ul><h3 id="演示、实验" tabindex="-1"><a class="header-anchor" href="#演示、实验"><span>演示、实验</span></a></h3><h4 id="读未提交-read-uncommited" tabindex="-1"><a class="header-anchor" href="#读未提交-read-uncommited"><span>读未提交（<em>read uncommited</em>）</span></a></h4><p>准备</p><ul><li>打开两个窗口分别登陆上数据库</li><li><code>set global transaction isolation level read uncommited</code>，设置全局事务隔离级别为<code>读未提交</code></li><li><code>select @@global.tx_isolation;</code>，查看事务隔离级别（不行就把tx_isolation换成transaction_isolation）</li><li>两个窗口都<code>start transaction;</code>，均设置为自动提交事务</li></ul><p>演示</p><ul><li>A：<code>select * from t_user;</code>，读到7条数据</li><li>B：<code>insert into t_user(name) values(&#39;SMITH&#39;);</code>，插入一条数据（未提交）</li><li>A：<code>select * from t_user;</code>，读到8条数据</li></ul><h4 id="读已提交-read-committed" tabindex="-1"><a class="header-anchor" href="#读已提交-read-committed"><span>读已提交（<em>read committed</em>）</span></a></h4><p>准备</p><ul><li>打开两个窗口分别登陆上数据库</li><li><code>set global transaction isolation level read commited</code>，设置全局事务隔离级别为<code>读已提交</code></li><li><code>select @@global.tx_isolation;</code>，查看事务隔离级别（不行就把tx_isolation换成transaction_isolation）</li><li>两个窗口都<code>start transaction;</code>，均设置为自动提交事务</li></ul><p>演示</p><ul><li>A：<code>select * from t_user;</code>，读到7条数据</li><li>B：<code>insert into t_user(name) values(&#39;SMITH&#39;);</code>，插入一条数据（未提交）</li><li>A：<code>select * from t_user;</code>，读到7条数据</li><li>B：<code>commit;</code>，提交</li><li>A：<code>select * from t_user;</code>，读到8条数据</li></ul><h4 id="可重复读-repeatable-read" tabindex="-1"><a class="header-anchor" href="#可重复读-repeatable-read"><span>可重复读（<em>repeatable read</em>）</span></a></h4><p>准备</p><ul><li>打开两个窗口分别登陆上数据库</li><li><code>set global transaction isolation level repeatable read</code>，设置全局事务隔离级别为<code>可重复读</code></li><li><code>select @@global.tx_isolation;</code>，查看事务隔离级别（不行就把tx_isolation换成transaction_isolation）</li><li>两个窗口都<code>start transaction;</code>，均设置为自动提交事务</li></ul><p>演示</p><ul><li>A：<code>select * from t_user;</code>，读到7条数据</li><li>B：<code>insert into t_user(name) values(&#39;SMITH&#39;);</code>，插入一条数据（未提交）</li><li>B：<code>commit;</code>，提交</li><li>A：<code>select * from t_user;</code>，读到7条数据</li></ul><h4 id="串行化读-serializable" tabindex="-1"><a class="header-anchor" href="#串行化读-serializable"><span>串行化读（<em>serializable</em>）</span></a></h4><p>准备</p><ul><li>打开两个窗口分别登陆上数据库</li><li><code>set global transaction isolation level serializable</code>，设置全局事务隔离级别为<code>串行化读</code></li><li><code>select @@global.tx_isolation;</code>，查看事务隔离级别（不行就把tx_isolation换成transaction_isolation）</li><li>两个窗口都<code>start transaction;</code>，均设置为自动提交事务</li></ul><p>演示</p><ul><li>A：<code>select * from t_user;</code>，读到7条数据</li><li>B：<code>insert into t_user(name) values(&#39;SMITH&#39;);</code>，插入一条数据（未提交）</li><li>A：<code>select * from t_user;</code>，光标在此闪烁停顿。当B进行COMMIT后，这里才会显示，显示的是8条数据</li></ul>`,45)]))}const d=l(t,[["render",n],["__file","05. TCL事务控制语言.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/SQL%E8%AF%AD%E5%8F%A5/05.%20TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80.html","title":"SQL语句","lang":"zh-CN","frontmatter":{"description":"SQL语句 目录 TCL事务控制语言 简概 事务 事务（transaction），是一个完整的业务逻辑单元，不可再分 应用场景 举例：A向B转账10000，则需要执行两条updata语句。这两条语句必须同时成功或同时失败，不允许一条成功一条失败 TCL与DML 和事务相关的语句只有DML语句 因为这三个语句都和数据相关，而事务的存在是为了保证数据的完整...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/SQL%E8%AF%AD%E5%8F%A5/05.%20TCL%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"SQL语句"}],["meta",{"property":"og:description","content":"SQL语句 目录 TCL事务控制语言 简概 事务 事务（transaction），是一个完整的业务逻辑单元，不可再分 应用场景 举例：A向B转账10000，则需要执行两条updata语句。这两条语句必须同时成功或同时失败，不允许一条成功一条失败 TCL与DML 和事务相关的语句只有DML语句 因为这三个语句都和数据相关，而事务的存在是为了保证数据的完整..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL语句\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"SQL语句","slug":"sql语句","link":"#sql语句","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"TCL事务控制语言","slug":"tcl事务控制语言","link":"#tcl事务控制语言","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":2,"title":"事务使用","slug":"事务使用","link":"#事务使用","children":[{"level":3,"title":"COMMIT（提交）","slug":"commit-提交","link":"#commit-提交","children":[]},{"level":3,"title":"ROLLBACK（回滚）","slug":"rollback-回滚","link":"#rollback-回滚","children":[]},{"level":3,"title":"SAVEPOINT（保存点）","slug":"savepoint-保存点","link":"#savepoint-保存点","children":[]}]},{"level":2,"title":"隔离级别与演示","slug":"隔离级别与演示","link":"#隔离级别与演示","children":[{"level":3,"title":"四个隔离级别","slug":"四个隔离级别","link":"#四个隔离级别","children":[]},{"level":3,"title":"演示、实验","slug":"演示、实验","link":"#演示、实验","children":[{"level":4,"title":"读未提交（read uncommited）","slug":"读未提交-read-uncommited","link":"#读未提交-read-uncommited","children":[]},{"level":4,"title":"读已提交（read committed）","slug":"读已提交-read-committed","link":"#读已提交-read-committed","children":[]},{"level":4,"title":"可重复读（repeatable read）","slug":"可重复读-repeatable-read","link":"#可重复读-repeatable-read","children":[]},{"level":4,"title":"串行化读（serializable）","slug":"串行化读-serializable","link":"#串行化读-serializable","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":4.61,"words":1384},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/05. TCL事务控制语言.md","excerpt":"\\n<h1>目录</h1>\\n<h1>TCL事务控制语言</h1>\\n<h2>简概</h2>\\n<ul>\\n<li>事务\\n<ul>\\n<li>事务（transaction），是一个完整的业务逻辑单元，不可再分</li>\\n</ul>\\n</li>\\n<li>应用场景\\n<ul>\\n<li>举例：A向B转账10000，则需要执行两条updata语句。这两条语句必须同时成功或同时失败，不允许一条成功一条失败</li>\\n</ul>\\n</li>\\n<li>TCL与DML\\n<ul>\\n<li>和事务相关的语句只有DML语句</li>\\n<li>因为这三个语句都和数据相关，而事务的存在是为了保证数据的完整性、安全性</li>\\n<li>假设所有的业务都能使用1条DML语句搞定，则不需要事务机制</li>\\n</ul>\\n</li>\\n<li>事务的原理\\n<ul>\\n<li>(1) 开启事务机制</li>\\n<li>(2) 执行语句（语句执行成功后悔把执行记录到操作历史中，并不会真正修改硬盘上的数据）</li>\\n<li>(3) 重复多次步骤2</li>\\n<li>(4) 提交事务或者回滚事务（这步才会真正修改硬盘上的数据）</li>\\n</ul>\\n</li>\\n<li>事务的四大特性：ACID\\n<ul>\\n<li>A：原子性：（Atomicity）事务是最小的工作单元，不可再分</li>\\n<li>C：一致性：（Consistency)事务必须保证多条DML语句同时成功或同时失败</li>\\n<li>I：隔离性（Isolation）事务A与事务B之间具有隔离</li>\\n<li>D：持久性（Durability）持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/05. TCL事务控制语言.md","value":{"title":"05. TCL事务控制语言","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/05. TCL事务控制语言.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,o as data};
