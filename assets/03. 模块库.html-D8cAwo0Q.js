import{_ as s,c as a,b as t,o as p}from"./app-CcItmy2w.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模块库" tabindex="-1"><a class="header-anchor" href="#模块库"><span>模块库</span></a></h1><h2 id="基本包-java-lang" tabindex="-1"><a class="header-anchor" href="#基本包-java-lang"><span>基本包（<code>java.lang</code>）</span></a></h2><p>当使用的类不是定义在基本java.lang包中时，一定要使用import指示字将相应的包加载进来</p><h3 id="string-api" tabindex="-1"><a class="header-anchor" href="#string-api"><span>String API</span></a></h3><p>API：<code>java.lang.String 1.0</code>（包含了50多个方法）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 其他</span>
<span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 返回给定位置的代码单元（除非对底层的代码单元感兴趣，否则不要使用）</span>
<span class="token keyword">int</span> <span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 返回从给定位置开始的码点</span>
<span class="token keyword">int</span> <span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> cpCount<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 返回从startIndex开始，cpCount个码数</span>
<span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 按字典顺序，看字符串若位于other前则负数，之后正数，相等为0</span>
<span class="token class-name">IntStream</span> <span class="token function">codePoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 将字符串码点作为一个流返回，调用toArray将它们放在一个数组中</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codePoints<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// offset开始的count个码点构造一个新字符串</span>

<span class="token comment">// 布尔类</span>
<span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>												<span class="token comment">// 是否为空</span>
<span class="token keyword">boolean</span> <span class="token function">blank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>												<span class="token comment">// 是否为空或由空格组成</span>
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 两字符是否相等，不忽略/忽略大小写</span>
<span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//</span>
<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 前缀/后缀</span>
<span class="token keyword">boolean</span> <span class="token function">endWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">//</span>

<span class="token comment">// 序列/个数类</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 从cp开始，返回匹配到的序列，不存在则返回-1</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 从最后开始匹配</span>
<span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastindexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">lastindexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> cp<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">//</span>
<span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>													<span class="token comment">// 返回字符串代码单元的个数</span>
<span class="token keyword">int</span> <span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 返回字符串片段中码点的个数</span>

<span class="token comment">// 返回新字符串系列</span>
<span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> oldString<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 返回新字符串，用newString替换oldString</span>
<span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// 返回新字符串，子串</span>
<span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">//</span>
<span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">// 返回新字符串，全小写/全小写</span>
<span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>											<span class="token comment">//</span>
<span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>													<span class="token comment">// 返回新字符串，删除头尾空格或空白</span>
<span class="token class-name">String</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">CHarSequence</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 返回新字符串，用给定的定界符连接所有元素</span>
<span class="token class-name">String</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// 返回新字符串，将当前字符串重复count次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展包" tabindex="-1"><a class="header-anchor" href="#扩展包"><span>扩展包</span></a></h2><h3 id="java-util-scanner" tabindex="-1"><a class="header-anchor" href="#java-util-scanner"><span>java.util.Scanner</span></a></h3><h3 id="java-util-random-1-0" tabindex="-1"><a class="header-anchor" href="#java-util-random-1-0"><span>java.util.Random 1.0</span></a></h3>`,11)]))}const i=s(e,[["render",o],["__file","03. 模块库.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/03.%20%E6%A8%A1%E5%9D%97%E5%BA%93.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 模块库 基本包（java.lang） 当使用的类不是定义在基本java.lang包中时，一定要使用import指示字将相应的包加载进来 String API API：java.lang.String 1.0（包含了50多个方法） 扩展包 java.util.Scanner java.util.Random 1.0","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/03.%20%E6%A8%A1%E5%9D%97%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 模块库 基本包（java.lang） 当使用的类不是定义在基本java.lang包中时，一定要使用import指示字将相应的包加载进来 String API API：java.lang.String 1.0（包含了50多个方法） 扩展包 java.util.Scanner java.util.Random 1.0"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"模块库","slug":"模块库","link":"#模块库","children":[{"level":2,"title":"基本包（java.lang）","slug":"基本包-java-lang","link":"#基本包-java-lang","children":[{"level":3,"title":"String API","slug":"string-api","link":"#string-api","children":[]}]},{"level":2,"title":"扩展包","slug":"扩展包","link":"#扩展包","children":[{"level":3,"title":"java.util.Scanner","slug":"java-util-scanner","link":"#java-util-scanner","children":[]},{"level":3,"title":"java.util.Random 1.0","slug":"java-util-random-1-0","link":"#java-util-random-1-0","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/07. 模块库/03. 模块库.md","excerpt":"\\n<h1>目录</h1>\\n<h1>模块库</h1>\\n<h2>基本包（<code>java.lang</code>）</h2>\\n<p>当使用的类不是定义在基本java.lang包中时，一定要使用import指示字将相应的包加载进来</p>\\n<h3>String API</h3>\\n<p>API：<code>java.lang.String 1.0</code>（包含了50多个方法）</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 其他</span>\\n<span class=\\"token keyword\\">char</span> <span class=\\"token function\\">charAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回给定位置的代码单元（除非对底层的代码单元感兴趣，否则不要使用）</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">codePointAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> index<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回从给定位置开始的码点</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">offsetByCodePoints</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> startIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> cpCount<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t<span class=\\"token comment\\">// 返回从startIndex开始，cpCount个码数</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">compareTo</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 按字典顺序，看字符串若位于other前则负数，之后正数，相等为0</span>\\n<span class=\\"token class-name\\">IntStream</span> <span class=\\"token function\\">codePoints</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 将字符串码点作为一个流返回，调用toArray将它们放在一个数组中</span>\\n<span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> codePoints<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> offset<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t<span class=\\"token comment\\">// offset开始的count个码点构造一个新字符串</span>\\n\\n<span class=\\"token comment\\">// 布尔类</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">empty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 是否为空</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">blank</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 是否为空或由空格组成</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Object</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 两字符是否相等，不忽略/忽略大小写</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">equalsIgnoreCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> other<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">startsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> prefix<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 前缀/后缀</span>\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">endWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> suffix<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n\\n<span class=\\"token comment\\">// 序列/个数类</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 从cp开始，返回匹配到的序列，不存在则返回-1</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> cp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> cp<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> fromIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lastIndexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 从最后开始匹配</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lastIndexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> fromIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lastindexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> cp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lastindexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> cp<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> fromIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回字符串代码单元的个数</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">codePointCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> startIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> endIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t<span class=\\"token comment\\">// 返回字符串片段中码点的个数</span>\\n\\n<span class=\\"token comment\\">// 返回新字符串系列</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">CharSequence</span> oldString<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">CharSequence</span> newString<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// 返回新字符串，用newString替换oldString</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">substring</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> beginIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回新字符串，子串</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">substring</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> beginIndex<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> endIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回新字符串，全小写/全小写</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toUpperCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">//</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">trim</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">strip</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回新字符串，删除头尾空格或空白</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">CHarSequence</span> delimiter<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">CharSequence</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> elements<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// 返回新字符串，用给定的定界符连接所有元素</span>\\n<span class=\\"token class-name\\">String</span> <span class=\\"token function\\">repeat</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> count<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 返回新字符串，将当前字符串重复count次</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,u as data};
