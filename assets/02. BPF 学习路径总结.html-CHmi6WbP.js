import{_ as i,c as s,e as l,a as r,b as n,d as o,o as p,r as a}from"./app-BbZLQaG4.js";const b={},f={href:"https://ebpf.io/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.amazon.com/Linux-Observability-BPF-Programming-Performance/dp/1492050202",target:"_blank",rel:"noopener noreferrer"},d={href:"https://item.jd.com/72110825905.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://pan.baidu.com/s/10gYYVXOdTX4HQ-_dQfWfOQ",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://www.brendangregg.com/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://item.jd.com/64536164411.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://item.jd.com/11755695.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.brendangregg.com/systems-performance-2nd-edition-book.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.amazon.com/Linux-Observability-BPF-Programming-Performance/dp/1492050202",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.brendangregg.com/bpf-performance-tools-book.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/iovisor/bcc/tree/master/tools",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/iovisor/bpftrace/tree/master/tools",target:"_blank",rel:"noopener noreferrer"},A={href:"https://elixir.bootlin.com/linux/v5.8/source/samples/bpf",target:"_blank",rel:"noopener noreferrer"},y={href:"https://elixir.bootlin.com/linux/v5.8/source/tools/testing/selftests/bpf",target:"_blank",rel:"noopener noreferrer"},C={href:"https://ebpf.io/summit-2020",target:"_blank",rel:"noopener noreferrer"},D={href:"https://cloud.tencent.com/developer/article/1698426",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/DavadDi/bpf_study",target:"_blank",rel:"noopener noreferrer"},T={href:"https://ebpf.io/",target:"_blank",rel:"noopener noreferrer"},N={href:"http://arthurchiao.art/blog/ebpf-and-k8s-zh/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/DavadDi/bpf_study/blob/master/BPF-and-Kubernetes-Little-Helper-Minions-for-Scaling-Microservices/Aug19_eBPF_and_Kubernetes_Little_Helper_Minions_for_Scaling_Microservices_Daniel_Borkmann.pdf",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/DavadDi/bpf_study/blob/master/how-to-make-linux-microservice-aware-with-cilium-ebpf/index.md",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/DavadDi/bpf_study/blob/master/how-to-make-linux-microservice-aware-with-cilium-ebpf/bpf_-_turning_linux_into_a_microservices-aware_operating_system.pdf",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.collabora.com/news-and-blog/blog/2019/04/05/an-ebpf-overview-part-1-introduction/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.collabora.com/news-and-blog/blog/2019/04/15/an-ebpf-overview-part-2-machine-and-bytecode/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.collabora.com/news-and-blog/blog/2019/04/26/an-ebpf-overview-part-3-walking-up-the-software-stack/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.collabora.com/news-and-blog/blog/2019/05/06/an-ebpf-overview-part-4-working-with-embedded-systems/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://www.collabora.com/news-and-blog/blog/2019/05/14/an-ebpf-overview-part-5-tracing-user-processes/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/DavadDi/bpf_study/blob/master/the-art-of-writing-ebpf-programs-a-primer/index.md",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.aquasec.com/intro-ebpf-tracing-containers",target:"_blank",rel:"noopener noreferrer"},H={href:"http://www.brendangregg.com/ebpf.html",target:"_blank",rel:"noopener noreferrer"},R={href:"https://lwn.net/Articles/740157/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/iovisor",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/iovisor/bpf-docs",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.infradead.org/~mchehab/kernel_docs/bpf/index.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.zcfy.cc/article/dive-into-bpf-a-list-of-reading-material",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/zoidbergwill/awesome-ebpf",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/icopy-site/awesome-cn/blob/master/docs/awesome/awesome-ebpf.md",target:"_blank",rel:"noopener noreferrer"},$={href:"https://docs.cilium.io/en/v1.8/bpf/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://arthurchiao.art/blog/cilium-bpf-xdp-reference-guide-zh/",target:"_blank",rel:"noopener noreferrer"},c={href:"https://lwn.net/Kernel/Index/#Berkeley_Packet_Filter",target:"_blank",rel:"noopener noreferrer"},ee={href:"http://blogs.oracle.com/linux/notes-on-bpf-1",target:"_blank",rel:"noopener noreferrer"},re={href:"https://github.com/iovisor/bcc/blob/master/docs/kernel-versions.md",target:"_blank",rel:"noopener noreferrer"},ne={href:"http://blogs.oracle.com/linux/notes-on-bpf-2",target:"_blank",rel:"noopener noreferrer"},te={href:"http://blogs.oracle.com/linux/notes-on-bpf-3",target:"_blank",rel:"noopener noreferrer"},oe={href:"http://blogs.oracle.com/linux/notes-on-bpf-4",target:"_blank",rel:"noopener noreferrer"},le={href:"http://blogs.oracle.com/linux/notes-on-bpf-5",target:"_blank",rel:"noopener noreferrer"},ie={href:"http://blogs.oracle.com/linux/notes-on-bpf-6",target:"_blank",rel:"noopener noreferrer"},se={href:"https://blogs.oracle.com/linux/the-power-of-xdp",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://blogs.oracle.com/linux/notes-on-bpf-7",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://blogs.oracle.com/linux/taming-tracepoints-in-the-linux-kernel",target:"_blank",rel:"noopener noreferrer"},be={href:"https://github.com/xdp-project/xdp-tutorial",target:"_blank",rel:"noopener noreferrer"},fe={href:"http://arthurchiao.art/blog/understanding-ebpf-datapath-in-cilium-zh/",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://github.com/DavadDi/bpf_study/blob/master/Understanding-the-eBPF-Datapath-in-Cilium/eBPF-and-the-Cilium-Datapath.pdf",target:"_blank",rel:"noopener noreferrer"};function de(Be,e){const t=a("ExternalLinkIcon");return p(),s("div",null,[e[118]||(e[118]=l('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="bpf-学习路径总结" tabindex="-1"><a class="header-anchor" href="#bpf-学习路径总结"><span>BPF 学习路径总结</span></a></h1><h2 id="为什么要学习-bpf" tabindex="-1"><a class="header-anchor" href="#为什么要学习-bpf"><span>为什么要学习 BPF</span></a></h2>',4)),r("p",null,[e[1]||(e[1]=n("可以先从 ")),r("a",f,[e[0]||(e[0]=n("ebpf.io")),o(t)]),e[2]||(e[2]=n(" 网站获取一个简单的了解，首页内容翻译如下。"))]),e[119]||(e[119]=l('<p>Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程序，而无需改变内核源代码或加载内核模块。</p><p>通过使Linux内核可编程，基础架构软件可以利用现有的层，使其更加智能，功能更加丰富，而不会继续给系统增加额外的复杂度，也不会影响执行效率和安全性。</p><p>eBPF 开发了全新一代的软件，能够对 Linux 内核的行为进行重新编程，甚至在传统上完全独立的多个子系统中应用逻辑。</p><p>BPF 技术目前主要用于以下场景：</p><ol><li><p>追踪和性能分析（Tracing &amp; Profiling）</p><p>将 eBPF 程序附加到跟踪点以及内核和用户应用探针点的能力，使得应用程序和系统本身的运行时行为具有前所未有的可见性。通过赋予应用程序和系统两方面的检测能力，可以将两种视图结合起来，从而获得强大而独特的洞察力来排除系统性能问题。先进的统计数据结构允许以高效的方式提取有意义的可见性数据，而不需要像类似系统那样，通常需要导出大量的采样数据。</p></li><li><p>观测和监控（Obervability &amp; Monitoring）</p><p>eBPF 不依赖于操作系统暴露的静态计数器和测量，而是实现了自定义指标的收集和内核内聚合，并基于广泛的可能来源生成可见性事件。这扩展了实现的可见性深度，并通过只收集所需的可见性数据，以及在事件源处生成直方图和类似的数据结构，而不是依赖样本的导出，大大降低了整体系统的开销。</p></li><li><p>网络（Network）</p><p>可编程性和效率的结合使得 eBPF 自然而然地满足了网络解决方案的所有数据包处理要求。eBPF 的可编程性使其能够在不离开 Linux内核的包处理上下文的情况下，添加额外的协议解析器，并轻松编程任何转发逻辑以满足不断变化的需求。JIT 编译器提供的效率使其执行性能接近于本地编译的内核代码。</p></li><li><p>安全（Security）</p><p>在看到和理解所有系统调用的基础上，将其与所有网络操作的数据包和套接字级视图相结合，可以采用革命性的新方法来确保系统的安全。虽然系统调用过滤、网络级过滤和进程上下文跟踪等方面通常由完全独立的系统处理，但 eBPF 允许将所有方面的可视性和控制结合起来，以创建在更多上下文上运行的、具有更好控制水平的安全系统。</p></li></ol><p>在追踪方面细分为了两类：</p><ul><li>追踪和性能分析</li><li>观测和监控</li></ul><p>这两者的区别主要在于数据的搜集和聚合是否在内测层面进行的，观测和监控主要是侧重于在内核导出指标、直方图或相关事件。</p><h2 id="bpf-应该怎么学习" tabindex="-1"><a class="header-anchor" href="#bpf-应该怎么学习"><span>BPF 应该怎么学习</span></a></h2><h3 id="书籍" tabindex="-1"><a class="header-anchor" href="#书籍"><span>书籍</span></a></h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>如果是想系统学习 BPF 技术，我的建议是先阅读相关的书籍，得到一个整体的认识，然后分方向单独深入。</p><p>目前 BPF 的书籍主要有以下两本：</p>',13)),r("ul",null,[r("li",null,[r("p",null,[r("a",u,[e[3]||(e[3]=n("《Linux Observability with BPF》")),o(t)]),e[5]||(e[5]=n("。中文：当前图书已经翻译成中文，京东地址：")),r("a",d,[e[4]||(e[4]=n("《Linux内核观测技术BPF》")),o(t)]),e[6]||(e[6]=n("。"))]),e[10]||(e[10]=r("p",null,"图书全名为：《Linux Observability with BPF: Advanced Programming for Performance Analysis and Networking》。",-1)),r("p",null,[e[8]||(e[8]=n("早期该书的电子版可以在 sysdig 官网下载，国内可以在")),r("a",B,[e[7]||(e[7]=n("此处下载")),o(t)]),e[9]||(e[9]=n("：链接: 提取码: bebt。"))]),e[11]||(e[11]=r("p",null,"本书两位作者合著：",-1)),e[12]||(e[12]=r("ul",null,[r("li",null,"[美] 大卫·卡拉维拉（David Calavera）Netlify 的 CTO，曾是 Docker 的维护者以及 Runc、Go 和 BCC 工具及其他开源项目的贡献者"),r("li",null,"[意] 洛伦佐·丰塔纳（Lorenzo Fontana）Sysdig 开源团队的成员，主要负责CNCF的 Falco 项目，该项目通过内核模块和 eBPF 实现了容器运行时安全和异常检测功能。")],-1))]),r("li",null,[r("p",null,[r("a",g,[e[13]||(e[13]=n("《BPF Performance Tools》 ")),o(t)]),e[14]||(e[14]=n("。中文：该书的中文版本已经出版在售，中文名为 《BPF之巅：洞悉Linux系统和应用性能》， JD 购买地址：https://item.jd.com/12769029.html"))]),r("p",null,[e[16]||(e[16]=n("图书全名为：《")),r("a",m,[e[15]||(e[15]=n("BPF Performance Tools: Linux System and Application Observability")),o(t)]),e[17]||(e[17]=n("》"))]),r("p",null,[e[20]||(e[20]=n("作者为大名鼎鼎的性能大师 ")),r("a",P,[e[18]||(e[18]=n("Brendan Gregg")),o(t)]),e[21]||(e[21]=n("，该书目前还没有中文版，如果购买英文版，可以从")),r("a",F,[e[19]||(e[19]=n("外文书店")),o(t)]),e[22]||(e[22]=n("代购，2-3 周可以收到。"))]),r("p",null,[e[25]||(e[25]=n("他还写过一本性能优化的畅销书 《Systems Performance: Enterprise and the Cloud》，中文翻译版本为 ")),r("a",E,[e[23]||(e[23]=n("《性能之巅：洞悉系统、企业与云计算》")),o(t)]),e[26]||(e[26]=n("。该书的第二版作者还在修订中，可参见：《")),r("a",k,[e[24]||(e[24]=n("Systems Performance: Enterprise and the Cloud, Second Edition (2020)")),o(t)]),e[27]||(e[27]=n("》。"))]),e[28]||(e[28]=r("p",null,"Brendan Gregg 的博客地址为： http://www.brendangregg.com/，里面有关于性能优化的诸多宝藏，值得仔细学习和研究。",-1))])]),e[120]||(e[120]=r("h4",{id:"图书心得",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#图书心得"},[r("span",null,"图书心得")])],-1)),r("ul",null,[r("li",null,[r("p",null,[r("a",w,[e[29]||(e[29]=n("《Linux Observability with BPF》")),o(t)])]),e[30]||(e[30]=l("<p>中文和英文版都在 180 页左右，整体的思路清晰，相关的技术面面俱到，如果定位是整体理解（而不是实践练习），整本书阅读一天内可以完成，能够实现快速对于 BPF 技术的整体了解，但是本书对于涉及的内容介绍基本上还是停留在基础知识介绍，基本上无深入知识介绍，<strong>作为入门级别的书籍再合适不过</strong>。主要内容包括以下方面：</p><ul><li>BPF 基础知识 <ul><li>BPF 的历史及架构；</li><li>BPF 的程序类型和验证器：按照重要性依次介绍了各种程序类型；</li><li>BPF Map： BPF Map 类型，常见操作和以及 Map 相关虚拟系统；</li></ul></li><li>BPF Trace <ul><li>BPF Trace：Trace 的基础知识（kprobe、tracepoint、usdt等）和几个 BCC 使用的样例；</li><li>BPF 相关工具（BPFTool &amp; BPFTrace &amp; kubectl-trace &amp; eBPF Exportor）；</li></ul></li><li>BPF Network <ul><li>Linux 网络和 BPF：涵盖数据包过滤和 cls_bpf 相关内容；</li><li>XDP：由于 XDP 在网络数据处理的特殊地位，单独成章，对于 XDP 进行了简单介绍和一个简单的原理实现，以及如何使用 BCC 进行 XDP 相关的验证；</li></ul></li><li>安全 <ul><li>主要是 Seccomp（基于传统的 cBPF）和 LSM 钩子两个方面的内容，主要是简单的介绍，内容不多；</li></ul></li><li>真实的用户案例 <ul><li>国外几大公司 Sysdig 、Floowmill 等在 BPF 的技术实践。</li></ul></li></ul>",2))]),r("li",null,[r("p",null,[r("a",h,[e[31]||(e[31]=n("《BPF Performance Tools》 ")),o(t)])]),e[32]||(e[32]=l("<p>本书英文版 839 页，主要涉及的 BPF 技术的基础、BPF Trace 基础基础知识、<strong>BPF 技术 Trace 方面的各种实践</strong>，<strong>本书无 BPF 在网络、安全上的详细介绍</strong>。本书的<strong>介绍侧重于基础知识和在 Trace 层面的实践</strong>，可以理解为 《Systems Performance: Enterprise and the Cloud》图书的修订版本，重点引入了 BPF 技术的实践。</p><p>全书主题分成四个部分：</p><ol><li><p>技术</p><p>在第一部分主要涉及的是 BPF 相关的技术和如何使用的总览。</p><ul><li>BPF 技术介绍</li><li>👍 技术背景</li><li>性能分析总览</li><li>BCC 工具介绍</li><li>BPFTrace 工具介绍</li></ul><p>这个部分的内容介绍，重点在 <code>技术背景</code> 章节，介绍的了 Trace 相关的技术点及实现原理，总结的非常简练和准确，值得多阅读几遍； BCC 和 BPFTrace 工具的介绍更多是从原理和使用层面介绍，详细的知识可以从两者的 github 网址学习到，贵在章节内容总结的有图有条理，可以快速对于整体架构有个快速的认知。</p></li><li><p>使用 BPF 工具</p><p>本章节主要是介绍了各种性能分析维度（CPU/Mem/Network/System等）的背景知识、传统工具和BPF 工具使用。</p><p>这个章节可以理解是 《Systems Performance: Enterprise and the Cloud》的缩减（背景知识、传统工具）和BPF 工具的补充，但是也增加了一些多的内容比如安全、容器和虚拟化的内容。</p><p>这部分的内容有方法论、基础知识和使用实践，可以作为日常问题排查的参考工具书。</p></li><li><p>附加主题</p><p>作为 BPF 性能工具的补充，还有一些是使用 BPF 各种过程中的小知识、技巧和常见的问题。</p></li><li><p>附录</p><p>虽然是作为附录的内容，但是却是我们学习深入技术点的重要参考，主要是 bpftrace 工具的一览表、BCC Tools 开发、使用原生的 C 编写 BPF 和 BPF 指令集等。</p><p>这部分的内容面对的是希望对于 BPF 技术更加深入了解和希望参与到 BCC 工具开发的研发人员。</p></li></ol>",3))])]),e[121]||(e[121]=r("h3",{id:"bpf-学习样例",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#bpf-学习样例"},[r("span",null,"BPF 学习样例")])],-1)),r("p",null,[e[35]||(e[35]=n("如果是 BCC 的样例可以参考 ")),r("a",x,[e[33]||(e[33]=n("tools")),o(t)]),e[36]||(e[36]=n(" 目录下的全部文件； BPFTrace 也可以参考 ")),r("a",v,[e[34]||(e[34]=n("tools")),o(t)]),e[37]||(e[37]=n(" 目录。"))]),r("p",null,[e[40]||(e[40]=n("内核中的 BPF 样例参见 ")),r("a",A,[e[38]||(e[38]=n("samples/bpf")),o(t)]),e[41]||(e[41]=n(" 和 ")),r("a",y,[e[39]||(e[39]=n("testing/bpf")),o(t)]),e[42]||(e[42]=n("，这部分的代码都是原生的 C 代码，比较适合对于 BPF 技术原理进一步深入的同学。"))]),e[122]||(e[122]=r("p",null,"如果是一开始学习 BPF，我个人的建议是：",-1)),r("ol",null,[e[46]||(e[46]=r("li",null,"先大体了解 BPF 技术的发展历史、优点、限制；",-1)),e[47]||(e[47]=r("li",null,"使用 BCC 工具在环境中进行实践，并且初步了解相关工具的的运作机制；",-1)),e[48]||(e[48]=r("li",null,"参考 BCC 样例，用原生的 C 代码进行实践并编写；",-1)),r("li",null,[e[44]||(e[44]=n("通过 KubeCon 会议或者 ")),r("a",C,[e[43]||(e[43]=n("BPF Summit")),o(t)]),e[45]||(e[45]=n(" 峰会学习当前主要的进展并学习跟进最新的进展；"))])]),r("p",null,[e[50]||(e[50]=n("学习方式也可以参考的大卫李的一篇文章 ")),r("a",D,[e[49]||(e[49]=n("Linux超能力BPF技术介绍及学习分享")),o(t)]),e[51]||(e[51]=n("，写的内容也比较齐全，可以参考"))]),e[123]||(e[123]=r("h2",{id:"bpf资料汇总",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#bpf资料汇总"},[r("span",null,"BPF资料汇总")])],-1)),r("p",null,[e[53]||(e[53]=n("如果有好的文章或者思路分析，可以到我的 ")),r("a",L,[e[52]||(e[52]=n("GitHub Repo")),o(t)]),e[54]||(e[54]=n(" 提交 Issue，地址：https://github.com/DavadDi/bpf_study。"))]),e[124]||(e[124]=r("h3",{id:"介绍系列",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#介绍系列"},[r("span",null,"介绍系列")])],-1)),r("ul",null,[r("li",null,[e[56]||(e[56]=n("👍 ")),r("a",T,[e[55]||(e[55]=n("https://ebpf.io")),o(t)]),e[57]||(e[57]=n(" 官方维护的站点，上面的资料还是比较完整和权威的"))]),r("li",null,[e[60]||(e[60]=n("👍👍 [")),r("a",N,[e[58]||(e[58]=n("译] 大规模微服务利器：eBPF + Kubernetes（KubeCon, 2020）")),o(t)]),e[61]||(e[61]=n(" BPF Maintainer Daniel 的大作，非常详细，本文内容的时间跨度有 8 年，覆盖了 eBPF 发展的整个历史，非常值得一读。")),r("a",S,[e[59]||(e[59]=n("pdf")),o(t)])]),r("li",null,[e[64]||(e[64]=n("👍 [")),r("a",M,[e[62]||(e[62]=n("译] 如何基于 Cilium 和 eBPF 打造可感知微服务的 Linux（2019）")),o(t)]),e[65]||(e[65]=n()),r("a",O,[e[63]||(e[63]=n("pdf")),o(t)])]),r("li",null,[e[71]||(e[71]=n("An eBPF overview 系列 ")),r("ul",null,[r("li",null,[r("a",z,[e[66]||(e[66]=n("part 1: Introduction")),o(t)])]),r("li",null,[r("a",X,[e[67]||(e[67]=n("part 2: Machine & bytecode")),o(t)])]),r("li",null,[r("a",G,[e[68]||(e[68]=n("part 3: Walking up the software stack")),o(t)])]),r("li",null,[r("a",K,[e[69]||(e[69]=n("part 4: Working with embedded systems")),o(t)])]),r("li",null,[r("a",V,[e[70]||(e[70]=n("part 5: Tracing user processes")),o(t)])])])]),r("li",null,[r("a",j,[e[72]||(e[72]=n("The art of writing eBPF programs: a primer")),o(t)])]),r("li",null,[r("a",I,[e[73]||(e[73]=n("A Deep Dive into eBPF: The Technology that Powers Tracee")),o(t)])]),r("li",null,[r("a",H,[e[74]||(e[74]=n("Linux Extended BPF (eBPF) Tracing Tools")),o(t)]),e[75]||(e[75]=n(" Brendan Gregg"))]),r("li",null,[r("a",R,[e[76]||(e[76]=n("A thorough introduction to eBPF")),o(t)])]),r("li",null,[r("a",J,[e[77]||(e[77]=n("iovisor")),o(t)]),e[79]||(e[79]=n("/")),r("strong",null,[r("a",Q,[e[78]||(e[78]=n("bpf-docs")),o(t)])])]),e[80]||(e[80]=r("li",null,[n("【视频】Linux 内核之旅的视频，偏基础一些 "),r("ul",null,[r("li",null,"高效入门eBPF https://www.bilibili.com/video/BV1LX4y157Gp/"),r("li",null,"BPF C编程入门 https://www.bilibili.com/video/BV1f54y1h74r/")])],-1))]),e[125]||(e[125]=r("h3",{id:"深入系列",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#深入系列"},[r("span",null,"深入系列")])],-1)),r("ul",null,[r("li",null,[r("a",W,[e[81]||(e[81]=n("Linux 内核 BPF 文档")),o(t)])]),e[117]||(e[117]=r("li",null,"bpf 归档的邮件列表 https://lore.kernel.org/bpf/， 完整列表 http://vger.kernel.org/vger-lists.html",-1)),r("li",null,[e[86]||(e[86]=n("👍 ")),r("a",Z,[e[82]||(e[82]=n("Dive into BPF: a list of reading material")),o(t)]),e[87]||(e[87]=n("，中文参见")),r("a",q,[e[83]||(e[83]=n("这里")),o(t)]),e[88]||(e[88]=n(", 基于这个文档有作者整理了一个更加清晰的分类 ")),r("a",U,[e[84]||(e[84]=n("zoidbergwill/awesome-ebpf")),o(t)]),e[89]||(e[89]=n(" 和 ")),r("a",Y,[e[85]||(e[85]=n("**awesome-ebpf **")),o(t)]),e[90]||(e[90]=n("- 中文"))]),r("li",null,[e[93]||(e[93]=n("👍👍 ")),r("a",$,[e[91]||(e[91]=n("Cillum BPF and XDP Reference Guide")),o(t)]),e[94]||(e[94]=n(" [")),r("a",_,[e[92]||(e[92]=n("译] Cilium：BPF 和 XDP 参考指南（2019） ")),o(t)])]),r("li",null,[r("a",c,[e[95]||(e[95]=n("lwn.net#Berkeley_Packet_Filter")),o(t)]),e[96]||(e[96]=n(" lwn.net 网站中与 BPF 相关的主题文章，对于了解 BPF 的历史非常有帮助"))]),r("li",null,[e[109]||(e[109]=n("👍👍 Oracle Blog 系列教程，深入浅出，是深入学习的必学教程 ")),r("ul",null,[r("li",null,[r("a",ee,[e[97]||(e[97]=n("BPF program types")),o(t)]),e[99]||(e[99]=n("，配合 ")),r("a",re,[e[98]||(e[98]=n("eBPF features by Linux version")),o(t)]),e[100]||(e[100]=n(" 效果更好"))]),r("li",null,[r("a",ne,[e[101]||(e[101]=n("BPF helper functions for those programs")),o(t)])]),r("li",null,[r("a",te,[e[102]||(e[102]=n("BPF userspace communication")),o(t)])]),r("li",null,[r("a",oe,[e[103]||(e[103]=n("BPF program build environment")),o(t)])]),r("li",null,[r("a",le,[e[104]||(e[104]=n("BPF bytecodes and verifier")),o(t)])]),r("li",null,[r("a",ie,[e[105]||(e[105]=n("BPF Packet Transformation")),o(t)])]),r("li",null,[r("a",se,[e[106]||(e[106]=n("The Power of XDP")),o(t)])]),r("li",null,[r("a",pe,[e[107]||(e[107]=n("Notes on BPF (7) - BPF, tc and Generic Segmentation Offload")),o(t)])]),r("li",null,[r("a",ae,[e[108]||(e[108]=n("Taming Tracepoints in the Linux Kernel")),o(t)])])])]),r("li",null,[e[111]||(e[111]=n("👍 ")),r("a",be,[e[110]||(e[110]=n("xdp-tutorial")),o(t)]),e[112]||(e[112]=n(" 里面有详细的 xdp 的源码，是学习 xdp 的好地方"))]),r("li",null,[e[115]||(e[115]=n("👍 [")),r("a",fe,[e[113]||(e[113]=n("译] 深入理解 Cilium 的 eBPF 收发包路径（datapath）（KubeCon, 2019）")),o(t)]),e[116]||(e[116]=n()),r("a",ue,[e[114]||(e[114]=n("pdf")),o(t)])])]),e[126]||(e[126]=r("h3",{id:"linux-资源",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#linux-资源"},[r("span",null,"Linux 资源")])],-1)),e[127]||(e[127]=r("ul",null,[r("li",null,"在线内核源码 https://elixir.bootlin.com/")],-1))])}const me=i(b,[["render",de],["__file","02. BPF 学习路径总结.html.vue"]]),Pe=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/02.%20BPF%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%80%BB%E7%BB%93.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 BPF 学习路径总结 为什么要学习 BPF 可以先从 ebpf.io 网站获取一个简单的了解，首页内容翻译如下。 Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/02.%20BPF%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 BPF 学习路径总结 为什么要学习 BPF 可以先从 ebpf.io 网站获取一个简单的了解，首页内容翻译如下。 Linux 内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"BPF 学习路径总结","slug":"bpf-学习路径总结","link":"#bpf-学习路径总结","children":[{"level":2,"title":"为什么要学习 BPF","slug":"为什么要学习-bpf","link":"#为什么要学习-bpf","children":[]},{"level":2,"title":"BPF 应该怎么学习","slug":"bpf-应该怎么学习","link":"#bpf-应该怎么学习","children":[{"level":3,"title":"书籍","slug":"书籍","link":"#书籍","children":[{"level":4,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":4,"title":"图书心得","slug":"图书心得","link":"#图书心得","children":[]}]},{"level":3,"title":"BPF 学习样例","slug":"bpf-学习样例","link":"#bpf-学习样例","children":[]}]},{"level":2,"title":"BPF资料汇总","slug":"bpf资料汇总","link":"#bpf资料汇总","children":[{"level":3,"title":"介绍系列","slug":"介绍系列","link":"#介绍系列","children":[]},{"level":3,"title":"深入系列","slug":"深入系列","link":"#深入系列","children":[]},{"level":3,"title":"Linux 资源","slug":"linux-资源","link":"#linux-资源","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.92,"words":3277},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/02. BPF 学习路径总结.md","excerpt":"\\n<h1>目录</h1>\\n<h1>BPF 学习路径总结</h1>\\n<h2>为什么要学习 BPF</h2>\\n<p>可以先从 <a href=\\"https://ebpf.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ebpf.io</a> 网站获取一个简单的了解，首页内容翻译如下。</p>\\n<p>Linux  内核一直是实现监控/可观察性、网络和安全性的理想场所。不幸的是，这往往是不切实际的，因为它需要改变内核源代码或加载内核模块，并导致层层抽象叠加。eBPF 是一项革命性的技术，它可以在 Linux 内核中运行沙盒程序，而无需改变内核源代码或加载内核模块。</p>","autoDesc":true}');export{me as comp,Pe as data};
