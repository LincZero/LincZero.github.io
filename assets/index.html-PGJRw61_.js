import{_ as t,e as i,g as s,o as a}from"./app-EuS-Ookm.js";const n="/assets/7236e385c5ea4c43d124e91f996bf9ff-COQxzcKk.jpg",o="/assets/273e61ec30d8b11d6c703e13fe94a7d3-zp5IsMy5.jpg",l="/assets/08a8365b9aeef3e4d935162e3def693a-BHsyFbv6.jpg",r="/assets/dc17aec88508c8db99a378522869c6c2-Dag0jw8K.jpg",d="/assets/8a305282577ae71231f1e956f7ac0415-Dnw-POrA.jpg",c="/assets/8582bc37a3df1f5f89f9a143e61bba2f-b7ld4Sgh.jpg",p={};function g(m,e){return a(),i("div",null,e[0]||(e[0]=[s('<h1 id="跨技术栈-通用的设计模式" tabindex="-1"><a class="header-anchor" href="#跨技术栈-通用的设计模式"><span>跨技术栈/通用的设计模式</span></a></h1><p>Design Patterns Across Stacks（跨技术栈设计模式实现手册）</p><p>该笔记集合聚焦于跨编程语言、框架和技术架构的设计模式与核心概念，聚焦同一技术/设计在不同语言中的实现</p><p>用处：</p><ul><li><strong>更能理解设计模式的本质核心，这种核心与语言和语法是无关的</strong><br> 它通过对比不同技术栈（如 C/C++、Java、Python、TypeScript/JavaScript 等）对同一设计思想（如面向对象、信号槽、数据驱动、MVVM 等）的实现方式，揭示技术共性与差异，帮助开发者理解设计模式的本质，并快速在不同技术生态中迁移核心思想。</li><li><strong>学习不同语言的倾向性/思维</strong><br> 一方面，不同语言由于自身的语言设计 (垃圾回收，编译/解释，是否静态类型等)、以及应用点 (网页，高性能等)。都会有一切倾向性，导致某些设计模式会用得更多。<br> 我们研究这种差异的同时，对各种语言的侧重点能有所学习</li><li><strong>某语言没有另一语言的某某特性?</strong><br> 某些不擅长这种设计模式的语言，是否也能像其他语言那样做到某一点<br> 有时经常会说某语言没有另一语言的某某特性，然后可能借助某些第三方库去实现。例如C++没有反射，C没有面向对象的一些设计。 <ul><li>有可能这是<strong>实用的、很好的借鉴</strong>（经常就会说某个语言弄了一个很好用的东西，其他语言纷纷跟进加入）</li><li>也有可能这是没意义的（语言自身在某一领域缺陷太严重，强行模仿只能是邯郸学步、东施效颦），这能帮助我们体会到不同语言/框架/应用点上的<strong>倾向性/设计缺陷</strong></li><li>但哪怕没有意义，这也是一个对于要模拟的和被模拟的两种语言，以及设计模式本身都是<strong>很好的学习</strong></li><li>有时用A语言时总是会想念B语言的X特性，但其实A语言是用Y特性来代替X特性，也能得到一样的效果。<strong>写法和解决方案是多样的</strong></li></ul></li><li><strong>更广泛的设计模式</strong><br> 我发现在实际开发当中，会碰到越来越多的以前没学到过的设计。我当初是特意去学习了设计模式的，然后过了很多种。但后来总会在其他语言/框架中碰到新的设计模式，或者说有时平常习以为常的写法突然多了个设计模式的名字</li></ul><p>主要考察语言：</p><p>这里可能会经常比较的是：Vue 和 C系、前端和后端</p><h2 id="内容特点" tabindex="-1"><a class="header-anchor" href="#内容特点"><span>内容特点</span></a></h2><ul><li>横向对比：同一设计模式在不同语言/框架中的代码示例与原理分析</li><li>技术本质：脱离具体框架/语言/语法，聚焦设计思路与适用场景</li><li>应用场景：结合实际案例（如 GUI 开发、Web 应用、系统架构）说明实现选择</li><li>扩展参考：附相关技术文档、开源项目链接与演进历史</li></ul><h2 id="来表情包点" tabindex="-1"><a class="header-anchor" href="#来表情包点"><span>来表情包点</span></a></h2><div class="ab-note drop-shadow"><div class="ab-items ab-card ab-lay-vfall"><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+n+'" alt="" loading="lazy"></p></div></div></div><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+o+'" alt="" loading="lazy"></p></div></div></div><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+l+'" alt="" loading="lazy"></p></div></div></div><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+r+'" alt="" loading="lazy"></p></div></div></div><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+d+'" alt="" loading="lazy"></p></div></div></div><div class="ab-items-item"><div class="ab-items-title markdown-rendered"><div><p><img src="'+c+'" alt="" loading="lazy"></p></div></div></div></div></div>',11)]))}const E=t(p,[["render",g],["__file","index.html.vue"]]),A=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B7%A8%E6%8A%80%E6%9C%AF%E6%A0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"跨技术栈/通用的设计模式","lang":"zh-CN","frontmatter":{"create_time":"2025-01-25T00:00:00.000Z","Author":"LincZero","description":"跨技术栈/通用的设计模式 Design Patterns Across Stacks（跨技术栈设计模式实现手册） 该笔记集合聚焦于跨编程语言、框架和技术架构的设计模式与核心概念，聚焦同一技术/设计在不同语言中的实现 用处： 更能理解设计模式的本质核心，这种核心与语言和语法是无关的 它通过对比不同技术栈（如 C/C++、Java、Python、TypeS...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B7%A8%E6%8A%80%E6%9C%AF%E6%A0%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"跨技术栈/通用的设计模式"}],["meta",{"property":"og:description","content":"跨技术栈/通用的设计模式 Design Patterns Across Stacks（跨技术栈设计模式实现手册） 该笔记集合聚焦于跨编程语言、框架和技术架构的设计模式与核心概念，聚焦同一技术/设计在不同语言中的实现 用处： 更能理解设计模式的本质核心，这种核心与语言和语法是无关的 它通过对比不同技术栈（如 C/C++、Java、Python、TypeS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨技术栈/通用的设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/跨技术栈设计模式/README.md","excerpt":"\\n<p>Design Patterns Across Stacks（跨技术栈设计模式实现手册）</p>\\n<p>该笔记集合聚焦于跨编程语言、框架和技术架构的设计模式与核心概念，聚焦同一技术/设计在不同语言中的实现</p>\\n<p>用处：</p>\\n<ul>\\n<li><strong>更能理解设计模式的本质核心，这种核心与语言和语法是无关的</strong><br>\\n它通过对比不同技术栈（如 C/C++、Java、Python、TypeScript/JavaScript 等）对同一设计思想（如面向对象、信号槽、数据驱动、MVVM 等）的实现方式，揭示技术共性与差异，帮助开发者理解设计模式的本质，并快速在不同技术生态中迁移核心思想。</li>\\n<li><strong>学习不同语言的倾向性/思维</strong><br>\\n一方面，不同语言由于自身的语言设计 (垃圾回收，编译/解释，是否静态类型等)、以及应用点 (网页，高性能等)。都会有一切倾向性，导致某些设计模式会用得更多。<br>\\n我们研究这种差异的同时，对各种语言的侧重点能有所学习</li>\\n<li><strong>某语言没有另一语言的某某特性?</strong><br>\\n某些不擅长这种设计模式的语言，是否也能像其他语言那样做到某一点<br>\\n有时经常会说某语言没有另一语言的某某特性，然后可能借助某些第三方库去实现。例如C++没有反射，C没有面向对象的一些设计。\\n<ul>\\n<li>有可能这是<strong>实用的、很好的借鉴</strong>（经常就会说某个语言弄了一个很好用的东西，其他语言纷纷跟进加入）</li>\\n<li>也有可能这是没意义的（语言自身在某一领域缺陷太严重，强行模仿只能是邯郸学步、东施效颦），这能帮助我们体会到不同语言/框架/应用点上的<strong>倾向性/设计缺陷</strong></li>\\n<li>但哪怕没有意义，这也是一个对于要模拟的和被模拟的两种语言，以及设计模式本身都是<strong>很好的学习</strong></li>\\n<li>有时用A语言时总是会想念B语言的X特性，但其实A语言是用Y特性来代替X特性，也能得到一样的效果。<strong>写法和解决方案是多样的</strong></li>\\n</ul>\\n</li>\\n<li><strong>更广泛的设计模式</strong><br>\\n我发现在实际开发当中，会碰到越来越多的以前没学到过的设计。我当初是特意去学习了设计模式的，然后过了很多种。但后来总会在其他语言/框架中碰到新的设计模式，或者说有时平常习以为常的写法突然多了个设计模式的名字</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/跨技术栈设计模式/README.md","value":{"title":"设计模式/","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/跨技术栈设计模式/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{E as comp,A as data};
