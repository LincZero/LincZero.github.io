import{_ as l,c as o,e as p,a,d as s,b as e,o as i,r as u}from"./app-CeShosDK.js";const c={},r={href:"https://cn.vuejs.org/guide/extras/render-function.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://en.wikipedia.org/wiki/Cross-site_scripting",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/api/built-in-directives.html#v-bind",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes#%E5%B8%83%E5%B0%94%E5%80%BC%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/en-US/docs/Glossary/Truthy",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/en-US/docs/Glossary/Falsy",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3",target:"_blank",rel:"noopener noreferrer"},f={href:"https://cn.vuejs.org/api/application.html#app-config-globalproperties",target:"_blank",rel:"noopener noreferrer"},q={href:"https://cn.vuejs.org/guide/essentials/computed.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers",target:"_blank",rel:"noopener noreferrer"},M={href:"https://cn.vuejs.org/guide/essentials/forms.html#modifiers",target:"_blank",rel:"noopener noreferrer"};function V(D,n){const t=u("ExternalLinkIcon");return i(),o("div",null,[n[53]||(n[53]=p('<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h1><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。 所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p><p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。 结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>',5)),a("p",null,[n[1]||(n[1]=s("如果你对 ")),n[2]||(n[2]=a("strong",null,"虚拟 DOM",-1)),n[3]||(n[3]=s(" 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持")),a("a",r,[n[0]||(n[0]=s("直接手写渲染函数")),e(t)]),n[4]||(n[4]=s("而不采用模板。 但请注意，这将不会享受到和模板同等级别的编译时优化。"))]),n[54]||(n[54]=p(`<h2 id="文本插值-mustache-语法" tabindex="-1"><a class="header-anchor" href="#文本插值-mustache-语法"><span>文本插值（“Mustache”语法）</span></a></h2><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Message: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="原始-html-v-html" tabindex="-1"><a class="header-anchor" href="#原始-html-v-html"><span>原始 HTML（v-html）</span></a></h2><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using text interpolation: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawHtml<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们遇到了一个新的概念。这里看到的 <code>v-html</code> attribute 被称为一个<strong>指令</strong>。 指令由 <code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。 这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code>rawHtml</code> 属性保持同步。</p><p><code>span</code> 的内容将会被替换为 <code>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。 注意，你不能使用 <code>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。 在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p><p>[|安全警告]</p>`,8)),a("p",null,[n[6]||(n[6]=s("在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 ")),a("a",d,[n[5]||(n[5]=s("XSS 漏洞")),e(t)]),n[7]||(n[7]=s("。 请仅在内容安全可信时再使用 ")),n[8]||(n[8]=a("code",null,"v-html",-1)),n[9]||(n[9]=s("，并且")),n[10]||(n[10]=a("strong",null,"永远不要",-1)),n[11]||(n[11]=s("使用用户提供的 HTML 内容。"))]),n[55]||(n[55]=a("h2",{id:"attribute-绑定",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#attribute-绑定"},[a("span",null,"Attribute 绑定")])],-1)),a("p",null,[n[14]||(n[14]=s("双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 ")),a("a",v,[n[12]||(n[12]=a("code",null,"v-bind",-1)),n[13]||(n[13]=s(" 指令")),e(t)]),n[15]||(n[15]=s("："))]),n[56]||(n[56]=p(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p><p>因为 v-bind 非常常用，我们提供了特定的简写语法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;dynamicId&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="布尔型-attribute" tabindex="-1"><a class="header-anchor" href="#布尔型-attribute"><span>布尔型 Attribute</span></a></h3><p>[|笔者]：（这个好像是新增的）</p>`,6)),a("p",null,[a("a",k,[n[16]||(n[16]=s("布尔型 attribute")),e(t)]),n[18]||(n[18]=s(" 依据 true / false 值来决定 attribute 是否应该存在于该元素上。")),a("a",g,[n[17]||(n[17]=a("code",null,"disabled",-1)),e(t)]),n[19]||(n[19]=s(" 就是最常见的例子之一。"))]),n[57]||(n[57]=p(`<p><code>v-bind</code> 在这种场景下的行为略有不同：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isButtonDisabled<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2)),a("p",null,[n[22]||(n[22]=s("当 ")),n[23]||(n[23]=a("code",null,"isButtonDisabled",-1)),n[24]||(n[24]=s(" 为")),a("a",m,[n[20]||(n[20]=s("真值")),e(t)]),n[25]||(n[25]=s("或一个空字符串 (即 ")),n[26]||(n[26]=a("code",null,'<button disabled="">',-1)),n[27]||(n[27]=s(") 时，元素会包含这个 ")),n[28]||(n[28]=a("code",null,"disabled",-1)),n[29]||(n[29]=s(" attribute。 而当其为其他")),a("a",b,[n[21]||(n[21]=s("假值")),e(t)]),n[30]||(n[30]=s("时 attribute 将被")),n[31]||(n[31]=a("strong",null,"忽略",-1)),n[32]||(n[32]=s("。"))]),n[58]||(n[58]=p(`<h3 id="动态绑定多个值" tabindex="-1"><a class="header-anchor" href="#动态绑定多个值"><span>动态绑定多个值</span></a></h3><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>objectOfAttrs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
const objectOfAttrs = {
  id: &#39;container&#39;,
  class: &#39;wrapper&#39;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-javascript-表达式" tabindex="-1"><a class="header-anchor" href="#使用-javascript-表达式"><span>使用 JavaScript 表达式</span></a></h2><p>Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> ok <span class="token operator">?</span> <span class="token string">&#39;YES&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;NO&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>div <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;\`list-\${id}\`&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript 表达式可以被使用在如下场景上：</p><ul><li>在文本插值中 (双大括号)</li><li>在任何 Vue 指令 (以 <code>v-</code> 开头的特殊 attribute) attribute 的值中</li></ul><h3 id="仅支持表达式" tabindex="-1"><a class="header-anchor" href="#仅支持表达式"><span>仅支持表达式</span></a></h3><p>每个绑定仅支持<strong>单一表达式</strong>，也就是一段能够被求值的 JavaScript 代码。 一个简单的判断方法是<strong>是否可以合法地写在 <code>return</code> 后面</strong>。</p><p>因此，下面的例子都是<strong>无效</strong>的：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 这是一个语句，而非表达式 --&gt;</span>
{{ var a = 1 }}

<span class="token comment">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span>
{{ if (ok) { return message } }}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h3><p>可以在绑定的表达式中使用一个组件暴露的方法：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toTitleDate(date)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ formatDate(date) }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[|TIP] 绑定在表达式中的方法在组件每次更新时都会被重新调用，因此<strong>不</strong>应该产生任何副作用，比如改变数据或触发异步操作。</p><h3 id="受限的全局访问" tabindex="-1"><a class="header-anchor" href="#受限的全局访问"><span>受限的全局访问</span></a></h3>`,16)),a("p",null,[n[34]||(n[34]=s("模板中的表达式将被沙盒化，仅能够访问到")),a("a",h,[n[33]||(n[33]=s("有限的全局对象列表")),e(t)]),n[35]||(n[35]=s("。 该列表中会暴露常用的内置全局对象，比如 ")),n[36]||(n[36]=a("code",null,"Math",-1)),n[37]||(n[37]=s(" 和 ")),n[38]||(n[38]=a("code",null,"Date",-1)),n[39]||(n[39]=s("。"))]),a("p",null,[n[41]||(n[41]=s("没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 ")),n[42]||(n[42]=a("code",null,"window",-1)),n[43]||(n[43]=s(" 上的属性。然而，你也可以自行在 ")),a("a",f,[n[40]||(n[40]=a("code",null,"app.config.globalProperties",-1)),e(t)]),n[44]||(n[44]=s(" 上显式地添加它们，供所有的 Vue 表达式使用。"))]),n[59]||(n[59]=p(`<h2 id="指令-directives" tabindex="-1"><a class="header-anchor" href="#指令-directives"><span>指令 Directives</span></a></h2><p>指令是带有 <code>v-</code> 前缀的特殊 attribute</p><h3 id="参数-arguments" tabindex="-1"><a class="header-anchor" href="#参数-arguments"><span>参数 Arguments</span></a></h3><p>略</p><h3 id="动态参数" tabindex="-1"><a class="header-anchor" href="#动态参数"><span>动态参数</span></a></h3><p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!--
注意，参数表达式有一些约束，
参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[attributeName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。 举例来说，如果你的组件实例有一个数据属性 <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定就等价于 <code>v-bind:href</code>。</p><p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[eventName]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，当 <code>eventName</code> 的值是 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 就等价于 <code>v-on:focus</code>。</p><h4 id="动态参数值的限制" tabindex="-1"><a class="header-anchor" href="#动态参数值的限制"><span>动态参数值的限制</span></a></h4><p>动态参数中表达式的值应当是一个字符串，或者是 <code>null</code>。特殊值 <code>null</code> 意为显式移除该绑定。其他非字符串的值会触发警告。</p><h4 id="动态参数语法的限制" tabindex="-1"><a class="header-anchor" href="#动态参数语法的限制"><span>动态参数语法的限制</span></a></h4><p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[&#39;foo&#39;</span> <span class="token attr-name">+</span> <span class="token attr-name">bar]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16)),a("p",null,[n[46]||(n[46]=s("如果你需要传入一个复杂的动态参数，我们推荐使用")),a("a",q,[n[45]||(n[45]=s("计算属性")),e(t)]),n[47]||(n[47]=s("替换复杂的表达式，也是 Vue 最基础的概念之一，我们很快就会讲到。"))]),n[60]||(n[60]=p(`<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[someAttr]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板<strong>不</strong>受此限制。</p><h4 id="修饰符-modifiers" tabindex="-1"><a class="header-anchor" href="#修饰符-modifiers"><span>修饰符 Modifiers</span></a></h4><p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。 例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onSubmit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6)),a("p",null,[n[50]||(n[50]=s("之后在讲到 ")),a("a",x,[n[48]||(n[48]=a("code",null,"v-on",-1)),e(t)]),n[51]||(n[51]=s(" 和 ")),a("a",M,[n[49]||(n[49]=a("code",null,"v-model",-1)),e(t)]),n[52]||(n[52]=s(" 的功能时，你将会看到其他修饰符的例子。"))]),n[61]||(n[61]=p(`<p>最后，在这里你可以直观地看到完整的指令语法：</p><p><img src="https://cn.vuejs.org/assets/directive.69c37117.png" alt="" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>新总结</p><ul><li><p>数据单向绑定</p><ul><li><p>Mustache 语法</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>v-html</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>v-text</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>message<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>数据双向绑定</p><ul><li><p>v-model</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>属性单向绑定</p><ul><li><p>v-bind</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dynamicId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>函数绑定</p><ul><li><p>v-on</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleIncrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleIncrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>旧笔记的总结</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 4种数据绑定-----------------------------------------&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>								// 数据绑定  {{}}、v-html、v-text
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>				// 双向绑定  v-model
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleIncrement<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>		// 函数绑定  v-on:方法、@方法
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{done: item.done}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>			// 属性绑定  v-bind:属性、:属性
    
    <span class="token comment">&lt;!-- 2种流程语法-------------------------------------------&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>mess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>							// 显示隐藏  v-if、v-else-if、v-else、v-show
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in items<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item.mess}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>		// 循环指令  v-for; item in shuzu、item in obj取v
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>数据绑定的补充，插值语法
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>                   // Mustache语法，可运算
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>                      // 编译内容
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span><span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>                      // 不编译内容
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>                        // 解析再显  v-cloak 斗篷，解决js卡顿时用户能看到{{}}的问题
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>            // 禁用改变  v-once 只改变一次（不让数据驱动视图）
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-pre</span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>             // 禁用编译  v-pre 文本显示

双向绑定的补充
    多种表单的的绑定
        绑定文本框                           // 返回内容
        绑定单选框                           // （多个绑定同一个变量）返回选中值
        绑定复选框单选                       // 返回布尔
        绑定复选框多选                       // （多个绑定同一个变量）返回数组
        绑定Select单选                      // 返回Value
    修饰符
        v-model.lazy                       // 懒绑定，让input事件更新数据 转换为 回车/失焦时更新数据
        v-model.number                     // 把内容自动转换为数字
        v-model.trim                       // 删除两侧空格

属性绑定的补充，对象语法和数组语法
    对象语 法，后接对象                      :class=&quot;{active: true, line: false}&quot;  :style=&quot;{font-size: &#39;50px&#39;}&quot;
    数组语法，后接数组                      :class=[actice, &#39;line&#39;]               :style=&quot;[{}， {}]&quot;
    也可以接返回对象/数组的函数              :class=&quot;getClasses()&quot;

方法绑定的补充，&#39;()&#39;的省略与修饰符
    括号省略
        方法无参时                          // 可省略&#39;()&#39;
        方法有参时                          // 不省略&#39;()&#39;时传递undefine，省略&#39;()&#39;时传递浏览器生成的event时间对象
        event值                            // 也可用&#39;($event)&#39;手动传递，这个值挺有用的：如：event.target.value
    修饰符
        .stop                              // 阻止事件冒泡（嵌套事件监听），Ex：@click.stop=&#39;&#39;
        .prevent                           // 阻止默认行为（后接函数以外），Ex：@submit.prevent，@click.stop.prevent=&#39;&#39;
        .(键值/别名)                        // 监听指定键盘键帽（键别名/键值）Ex：@keyup.enter=&#39;onEnter&#39;，@keydown.13=&#39;onEnter&#39;
        .native                            // （在组件内才会用到）
        .once                              // 只触发一次回调，Ex：@click.once=&#39;doThis&#39;

if补充
    v-if/v-else-if/v-else(整体删减))、v-show(display隐藏)
    Virtual Dom对Dom的复用问题

for补充    
    v-for; (item, index) in shuzu、（value, key, index） in obj
    Virtual Dom对Dom的复用问题。这里建议加key:item
        能更好复用。如数组内插入元素后，原来的dom不会修改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9))])}const A=l(c,[["render",V],["__file","01. 基本语法.html.vue"]]),j=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/02.%20%E5%9F%BA%E7%A1%80/01.%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html","title":"Vue","lang":"zh-CN","frontmatter":{"description":"Vue 目录 模板语法 Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。 所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。 在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。 结合响应式系统，当应用状态变更时，Vue 能...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/02.%20%E5%9F%BA%E7%A1%80/01.%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Vue"}],["meta",{"property":"og:description","content":"Vue 目录 模板语法 Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。 所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。 在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。 结合响应式系统，当应用状态变更时，Vue 能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cn.vuejs.org/assets/directive.69c37117.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue\\",\\"image\\":[\\"https://cn.vuejs.org/assets/directive.69c37117.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[{"level":2,"title":"文本插值（“Mustache”语法）","slug":"文本插值-mustache-语法","link":"#文本插值-mustache-语法","children":[]},{"level":2,"title":"原始 HTML（v-html）","slug":"原始-html-v-html","link":"#原始-html-v-html","children":[]},{"level":2,"title":"Attribute 绑定","slug":"attribute-绑定","link":"#attribute-绑定","children":[{"level":3,"title":"布尔型 Attribute","slug":"布尔型-attribute","link":"#布尔型-attribute","children":[]},{"level":3,"title":"动态绑定多个值","slug":"动态绑定多个值","link":"#动态绑定多个值","children":[]}]},{"level":2,"title":"使用 JavaScript 表达式","slug":"使用-javascript-表达式","link":"#使用-javascript-表达式","children":[{"level":3,"title":"仅支持表达式","slug":"仅支持表达式","link":"#仅支持表达式","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":3,"title":"受限的全局访问","slug":"受限的全局访问","link":"#受限的全局访问","children":[]}]},{"level":2,"title":"指令 Directives","slug":"指令-directives","link":"#指令-directives","children":[{"level":3,"title":"参数 Arguments","slug":"参数-arguments","link":"#参数-arguments","children":[]},{"level":3,"title":"动态参数","slug":"动态参数","link":"#动态参数","children":[{"level":4,"title":"动态参数值的限制","slug":"动态参数值的限制","link":"#动态参数值的限制","children":[]},{"level":4,"title":"动态参数语法的限制","slug":"动态参数语法的限制","link":"#动态参数语法的限制","children":[]},{"level":4,"title":"修饰符 Modifiers","slug":"修饰符-modifiers","link":"#修饰符-modifiers","children":[]}]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.78,"words":2635},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/02. 基础/01. 基本语法.md","excerpt":"\\n<h1>目录</h1>\\n<h1>模板语法</h1>\\n<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。\\n所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。\\n结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\\n<p>如果你对 <strong>虚拟 DOM</strong> 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持<a href=\\"https://cn.vuejs.org/guide/extras/render-function.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">直接手写渲染函数</a>而不采用模板。\\n但请注意，这将不会享受到和模板同等级别的编译时优化。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/02. 基础/01. 基本语法.md","value":{"title":"01. 基本语法","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/02. 基础/01. 基本语法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{A as comp,j as data};
