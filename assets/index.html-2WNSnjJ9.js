import{_ as p,c as l,e as i,o as s}from"./app-BDGujT_T.js";const t="/assets/b752a4f8dcaab8ed4d941ebcc6f606c5-DLPswMEQ.png",a="/assets/d3279ad754257977f98e702cb156e9cf-CVUQAxNE.png",n="/assets/025ddcaabece1f4b5823dfb1fb7340ef-CaePm4Ko.png",o="/assets/ed14c96417e08b4f916e0cd23d12b7bd-t0VXh3zr.png",r="/assets/392c54cfb9ec47f5191008aa1d27d6b5-C5AFgRZJ.png",d="/assets/0ea3960fef48d4cbaeb4bec4345301e7-BtANDhRs.png",c="/assets/83d7f363643353c92d252e34f1d4f687-Djc1x8rl.png",g="/assets/30c2c70721c12f9c140358fbdc5f2282-BfVFLCRk.png",h="/assets/f8909edef2f3949f8945bb99380baab3-DMhRDtU_.png",B="/assets/31485046f1303b57d8aaeaab103ea7ab-CuqxWKTN.png",k="/assets/d528bae6fcec2357ba2eb8f324ad9fd5-C_O18dMQ.png",E="/assets/dbb57b8d6071d011d05eeadd93269e13-Bb2CkvXa.png",u={};function m(y,e){return s(),l("div",null,e[0]||(e[0]=[i('<h1 id="什么是一致性哈希-未" tabindex="-1"><a class="header-anchor" href="#什么是一致性哈希-未"><span>什么是一致性哈希？(未)</span></a></h1><p>大家好，我是小林。</p><p>在逛牛客网的面经的时候，发现有位同学在面微信的时候，被问到这个问题：</p><p>第一个问题就是：<strong>一致性哈希是什么，使用场景，解决了什么问题？</strong></p><p>这个问题还挺有意思的，所以今天就来聊聊这个。</p><p>发车！</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><blockquote><p>一句话就是：如何分配请求 -&gt; 负载均衡，如何负载均衡 -&gt; 一致性哈希</p></blockquote><p>大多数网站背后肯定不是只有一台服务器提供服务，因为单机的并发量和数据量都是有限的，所以都会用多台服务器构成集群来对外提供服务。</p><p>但是问题来了，现在有那么多个节点（后面统称服务器为节点，因为少一个字），要如何分配客户端的请求呢？</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p>其实这个问题就是「负载均衡问题」。解决负载均衡问题的算法很多，不同的负载均衡算法，对应的就是不同的分配策略，适应的业务场景也不同。</p><p>最简单的方式，引入一个中间的负载均衡层，让它将外界的请求「轮流」的转发给内部的集群。比如集群有 3 个节点，外界请求有 3 个，那么每个节点都会处理 1 个请求，达到了分配请求的目的。</p><p><img src="'+a+'" alt="img" loading="lazy"></p><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案"><span>方案</span></a></h2><h3 id="方案一-加权轮训-缺点明显-不用" tabindex="-1"><a class="header-anchor" href="#方案一-加权轮训-缺点明显-不用"><span>方案一：加权轮训 (缺点明显，不用)</span></a></h3><ul><li><p>方案一：加权轮询</p><ul><li><p>算法</p><ul><li><p>考虑到每个节点的硬件配置有所区别，我们可以引入权重值，将硬件配置更好的节点的权重值设高，然后根据各个节点的权重值，按照一定比重分配在不同的节点上，让硬件配置更好的节点承担更多的请求，这种算法叫做<strong>加权轮询</strong>。</p><p>加权轮询算法使用场景是建立在每个节点存储的数据都是相同的前提。所以，每次读数据的请求，访问任意一个节点都能得到结果。</p></li></ul></li><li><p>缺点、局限性</p><ul><li>但是，加权轮询算法是无法应对「分布式系统（数据分片的系统）」的，因为分布式系统中，每个节点存储的数据是不同的。</li></ul></li></ul></li><li><p>方案二：？？？</p><ul><li><p>寻找方案二的思路</p><ul><li><p>当我们想提高系统的容量，就会将数据水平切分到不同的节点来存储，也就是将数据分布到了不同的节点。比如 <strong>一个分布式 KV（key-valu） 缓存系统，某个 key 应该到哪个或者哪些节点上获得，应该是确定的</strong>，不是说任意访问一个节点都可以得到缓存结果的。</p><p>因此，我们要想一个能应对分布式系统的负载均衡算法。</p></li></ul></li></ul></li></ul><h3 id="方案二-哈希算法-无法扩容缩容-不用" tabindex="-1"><a class="header-anchor" href="#方案二-哈希算法-无法扩容缩容-不用"><span>方案二：哈希算法 (无法扩容缩容，不用)</span></a></h3><p>提前总结：</p><ul><li>方案二：普通哈希算法 <ul><li>缺点：如果节点数量发生了变化，也就是在对系统做扩容或者缩容时，必须迁移改变了映射关系的数据</li></ul></li></ul><p>有的同学可能很快就想到了：<strong>哈希算法</strong>。因为对同一个关键字进行哈希计算，每次计算都是相同的值，这样就可以将某个 key 确定到一个节点了，可以满足分布式系统的负载均衡需求。</p><p>哈希算法最简单的做法就是进行取模运算，比如分布式系统中有 3 个节点，基于 <code>hash(key) % 3</code> 公式对数据进行了映射。</p><p>如果客户端要获取指定 key 的数据，通过下面的公式可以定位节点：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) % 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果经过上面这个公式计算后得到的值是 0，就说明该 key 需要去第一个节点获取。</p><p>但是有一个很致命的问题，<strong>如果节点数量发生了变化，也就是在对系统做扩容或者缩容时，必须迁移改变了映射关系的数据</strong>，否则会出现查询不到数据的问题。</p><p>举个例子，假设我们有一个由 A、B、C 三个节点组成分布式 KV 缓存系统，基于计算公式 <code>hash(key) % 3</code> 将数据进行了映射，每个节点存储了不同的数据：</p><p><img src="'+n+'" alt="img" loading="lazy"></p><p>现在有 3 个查询 key 的请求，分别查询 key-01，key-02，key-03 的数据，这三个 key 分别经过 hash() 函数计算后的值为 hash( key-01) = 6、hash( key-02) = 7、hash(key-03) = 8，然后再对这些值进行取模运算。</p><p>通过这样的哈希算法，每个 key 都可以定位到对应的节点。</p><p><img src="'+o+'" alt="img" loading="lazy"></p><p>当 3 个节点不能满足业务需求了，这时我们增加了一个节点，节点的数量从 3 变化为 4，意味取模哈希函数中基数的变化，这样会导致<strong>大部分映射关系改变</strong>，如下图：</p><p><img src="'+r+'" alt="img" loading="lazy"></p><p>比如，之前的 hash(key-01) % <code>3</code> = 0，就变成了 hash(key-01) % <code>4</code> = 2，查询 key-01 数据时，寻址到了节点 C，而 key-01 的数据是存储在节点 A 上的，不是在节点 C，所以会查询不到数据。</p><p>同样的道理，如果我们对分布式系统进行缩容，比如移除一个节点，也会因为取模哈希函数中基数的变化，可能出现查询不到数据的问题。</p><p>要解决这个问题的办法，就需要我们进行<strong>迁移数据</strong>，比如节点的数量从 3 变化为 4 时，要基于新的计算公式 hash(key) % 4 ，重新对数据和节点做映射。</p><p>假设总数据条数为 M，哈希算法在面对节点数量变化时，<strong>最坏情况下所有数据都需要迁移，所以它的数据迁移规模是 O(M)</strong>，这样数据的迁移成本太高了。</p><p>所以，我们应该要重新想一个新的算法，来避免分布式系统在扩容或者缩容时，发生过多的数据迁移。</p><h3 id="方案三-用一致性哈希算法" tabindex="-1"><a class="header-anchor" href="#方案三-用一致性哈希算法"><span>方案三：用一致性哈希算法</span></a></h3><p>使用一致性哈希算法有什么问题？</p><p>一致性哈希算法就很好地解决了分布式系统在扩容或者缩容时，发生过多的数据迁移的问题。</p><p>一致哈希算法也用了取模运算，但与哈希算法不同的是，哈希算法是对节点的数量进行取模运算，而<strong>一致哈希算法是对 2^32 进行取模运算，是一个固定的值</strong>。</p><p>我们可以把一致哈希算法是对 2^32 进行取模运算的结果值组织成一个圆环，就像钟表一样，钟表的圆可以理解成由 60 个点组成的圆，而此处我们把这个圆想象成由 2^32 个点组成的圆，这个圆环被称为<strong>哈希环</strong>，如下图：</p><p><img src="'+d+'" alt="img" loading="lazy"></p><p>一致性哈希要进行两步哈希：</p><ul><li>第一步：对存储节点进行哈希计算，也就是对存储节点做哈希映射，比如根据节点的 IP 地址进行哈希；</li><li>第二步：当对数据进行存储或访问时，对数据进行哈希映射；</li></ul><p>所以，<strong>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上</strong>。</p><p>问题来了，对「数据」进行哈希映射得到一个结果要怎么找到存储该数据的节点呢？</p><p>答案是，映射的结果值往<strong>顺时针的方向的找到第一个节点</strong>，就是存储该数据的节点。</p><p>举个例子，有 3 个节点经过哈希计算，映射到了如下图的位置：</p><p><img src="'+c+'" alt="img" loading="lazy"></p><p>接着，对要查询的 key-01 进行哈希计算，确定此 key-01 映射在哈希环的位置，然后从这个位置往顺时针的方向找到第一个节点，就是存储该 key-01 数据的节点。</p><p>比如，下图中的 key-01 映射的位置，往顺时针的方向找到第一个节点就是节点 A。</p><p><img src="'+g+'" alt="img" loading="lazy"></p><p>所以，当需要对指定 key 的值进行读写的时候，要通过下面 2 步进行寻址：</p><ul><li>首先，对 key 进行哈希计算，确定此 key 在环上的位置；</li><li>然后，从这个位置沿着顺时针方向走，遇到的第一节点就是存储 key 的节点。</li></ul><p>知道了一致哈希寻址的方式，我们来看看，如果增加一个节点或者减少一个节点会发生大量的数据迁移吗？</p><p>假设节点数量从 3 增加到了 4，新的节点 D 经过哈希计算后映射到了下图中的位置：</p><p><img src="'+h+'" alt="img" loading="lazy"></p><p>你可以看到，key-01、key-03 都不受影响，只有 key-02 需要被迁移节点 D。</p><p>假设节点数量从 3 减少到了 2，比如将节点 A 移除：</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>你可以看到，key-02 和 key-03 不会受到影响，只有 key-01 需要被迁移节点 B。</p><p>因此，<strong>在一致哈希算法中，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响</strong>。</p><p>上面这些图中 3 个节点映射在哈希环还是比较分散的，所以看起来请求都会「均衡」到每个节点。</p><p>但是<strong>一致性哈希算法并不保证节点能够在哈希环上分布均匀</strong>，这样就会带来一个问题，会有大量的请求集中在一个节点上。</p><p>比如，下图中 3 个节点的映射位置都在哈希环的右半边：</p><p><img src="'+k+'" alt="img" loading="lazy"></p><p>这时候有一半以上的数据的寻址都会找节点 A，也就是访问请求主要集中的节点 A 上，这肯定不行的呀，说好的负载均衡呢，这种情况一点都不均衡。</p><p>另外，在这种节点分布不均匀的情况下，进行容灾与扩容时，哈希环上的相邻节点容易受到过大影响，容易发生雪崩式的连锁反应。</p><p>比如，上图中如果节点 A 被移除了，当节点 A 宕机后，根据一致性哈希算法的规则，其上数据应该全部迁移到相邻的节点 B 上，这样，节点 B 的数据量、访问量都会迅速增加很多倍，一旦新增的压力超过了节点 B 的处理能力上限，就会导致节点 B 崩溃，进而形成雪崩式的连锁反应。</p><p>所以，<strong>一致性哈希算法虽然减少了数据迁移量，但是存在节点分布不均匀的问题</strong>。</p><h2 id="如何通过虚拟节点提高均衡度" tabindex="-1"><a class="header-anchor" href="#如何通过虚拟节点提高均衡度"><span>如何通过虚拟节点提高均衡度？</span></a></h2><p>要想解决节点能在哈希环上分配不均匀的问题，就是要有大量的节点，节点数越多，哈希环上的节点分布的就越均匀。</p><p>但问题是，实际中我们没有那么多节点。所以这个时候我们就加入<strong>虚拟节点</strong>，也就是对一个真实节点做多个副本。</p><p>具体做法是，<strong>不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</strong></p><p>比如对每个节点分别设置 3 个虚拟节点：</p><ul><li>对节点 A 加上编号来作为虚拟节点：A-01、A-02、A-03</li><li>对节点 B 加上编号来作为虚拟节点：B-01、B-02、B-03</li><li>对节点 C 加上编号来作为虚拟节点：C-01、C-02、C-03</li></ul><p>引入虚拟节点后，原本哈希环上只有 3 个节点的情况，就会变成有 9 个虚拟节点映射到哈希环上，哈希环上的节点数量多了 3 倍。</p><p><img src="'+E+'" alt="img" loading="lazy"></p><p>你可以看到，<strong>节点数量多了后，节点在哈希环上的分布就相对均匀了</strong>。这时候，如果有访问请求寻址到「A-01」这个虚拟节点，接着再通过「A-01」虚拟节点找到真实节点 A，这样请求就能访问到真实节点 A 了。</p><p>上面为了方便你理解，每个真实节点仅包含 3 个虚拟节点，这样能起到的均衡效果其实很有限。而在实际的工程中，虚拟节点的数量会大很多，比如 Nginx 的一致性哈希算法，每个权重为 1 的真实节点就含有160 个虚拟节点。</p><p>另外，虚拟节点除了会提高节点的均衡度，还会提高系统的稳定性。<strong>当节点变化时，会有不同的节点共同分担系统的变化，因此稳定性更高</strong>。</p><p>比如，当某个节点被移除时，对应该节点的多个虚拟节点均会移除，而这些虚拟节点按顺时针方向的下一个虚拟节点，可能会对应不同的真实节点，即这些不同的真实节点共同分担了节点变化导致的压力。</p><p>而且，有了虚拟节点后，还可以为硬件配置更好的节点增加权重，比如对权重更高的节点增加更多的虚拟机节点即可。</p><p>因此，<strong>带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景</strong>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>不同的负载均衡算法适用的业务场景也不同的。</p><ol><li><p>轮询</p><ul><li>轮询这类的策略只能适用与每个节点的数据都是相同的场景，访问任意节点都能请求到数据。但是不适用分布式系统，因为分布式系统意味着数据水平切分到了不同的节点上，访问数据的时候，一定要寻址存储该数据的节点。</li></ul></li><li><p>哈希（存在缺陷，需要改进）</p><ul><li>哈希算法虽然能建立数据和节点的映射关系，但是每次在节点数量发生变化的时候，最坏情况下所有数据都需要迁移，这样太麻烦了，所以不适用节点数量变化的场景。</li></ul></li><li><p>一致性哈希（存在缺陷，需要改进）</p><ul><li><p>为了减少迁移的数据量，就出现了一致性哈希算法。</p><p>一致性哈希是指将「存储节点」和「数据」都映射到一个首尾相连的哈希环上，如果增加或者移除一个节点，仅影响该节点在哈希环上顺时针相邻的后继节点，其它数据也不会受到影响。</p><p>但是一致性哈希算法不能够均匀的分布节点，会出现大量请求都集中在一个节点的情况，在这种情况下进行容灾与扩容时，容易出现雪崩的连锁反应。</p></li></ul></li><li><p>虚拟节点</p><ul><li><p>为了解决一致性哈希算法不能够均匀的分布节点的问题，就需要引入虚拟节点，对一个真实节点做多个副本。不再将真实节点映射到哈希环上，而是将虚拟节点映射到哈希环上，并将虚拟节点映射到实际节点，所以这里有「两层」映射关系。</p><p>引入虚拟节点后，可以会提高节点的均衡度，还会提高系统的稳定性。所以，带虚拟节点的一致性哈希方法不仅适合硬件配置不同的节点的场景，而且适合节点规模会发生变化的场景。</p></li></ul></li></ol><p>完！</p>',90)]))}const b=p(u,[["render",m],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/09.%20%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F/04.%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/","title":"什么是一致性哈希？(未)","lang":"zh-CN","frontmatter":{"description":"什么是一致性哈希？(未) 大家好，我是小林。 在逛牛客网的面经的时候，发现有位同学在面微信的时候，被问到这个问题： 第一个问题就是：一致性哈希是什么，使用场景，解决了什么问题？ 这个问题还挺有意思的，所以今天就来聊聊这个。 发车！ 使用场景 一句话就是：如何分配请求 -> 负载均衡，如何负载均衡 -> 一致性哈希 大多数网站背后肯定不是只有一台服务器提...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/09.%20%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F/04.%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"什么是一致性哈希？(未)"}],["meta",{"property":"og:description","content":"什么是一致性哈希？(未) 大家好，我是小林。 在逛牛客网的面经的时候，发现有位同学在面微信的时候，被问到这个问题： 第一个问题就是：一致性哈希是什么，使用场景，解决了什么问题？ 这个问题还挺有意思的，所以今天就来聊聊这个。 发车！ 使用场景 一句话就是：如何分配请求 -> 负载均衡，如何负载均衡 -> 一致性哈希 大多数网站背后肯定不是只有一台服务器提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是一致性哈希？(未)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"什么是一致性哈希？(未)","slug":"什么是一致性哈希-未","link":"#什么是一致性哈希-未","children":[{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"方案","slug":"方案","link":"#方案","children":[{"level":3,"title":"方案一：加权轮训 (缺点明显，不用)","slug":"方案一-加权轮训-缺点明显-不用","link":"#方案一-加权轮训-缺点明显-不用","children":[]},{"level":3,"title":"方案二：哈希算法 (无法扩容缩容，不用)","slug":"方案二-哈希算法-无法扩容缩容-不用","link":"#方案二-哈希算法-无法扩容缩容-不用","children":[]},{"level":3,"title":"方案三：用一致性哈希算法","slug":"方案三-用一致性哈希算法","link":"#方案三-用一致性哈希算法","children":[]}]},{"level":2,"title":"如何通过虚拟节点提高均衡度？","slug":"如何通过虚拟节点提高均衡度","link":"#如何通过虚拟节点提高均衡度","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{},"readingTime":{"minutes":13.28,"words":3984},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/09. 网络系统/04. 一致性哈希/README.md","excerpt":"\\n<p>大家好，我是小林。</p>\\n<p>在逛牛客网的面经的时候，发现有位同学在面微信的时候，被问到这个问题：</p>\\n<p>第一个问题就是：<strong>一致性哈希是什么，使用场景，解决了什么问题？</strong></p>\\n<p>这个问题还挺有意思的，所以今天就来聊聊这个。</p>\\n<p>发车！</p>\\n<h2>使用场景</h2>\\n<blockquote>\\n<p>一句话就是：如何分配请求 -&gt; 负载均衡，如何负载均衡 -&gt; 一致性哈希</p>\\n</blockquote>\\n<p>大多数网站背后肯定不是只有一台服务器提供服务，因为单机的并发量和数据量都是有限的，所以都会用多台服务器构成集群来对外提供服务。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/09. 网络系统/04. 一致性哈希/README.md","value":{"title":"09. 网络系统/","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/09. 网络系统/04. 一致性哈希/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{b as comp,_ as data};
