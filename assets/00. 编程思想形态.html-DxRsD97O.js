import{_ as e,e as h,g as n,o as s}from"./app-DeGPQmv-.js";const r={};function i(d,a){return s(),h("div",null,a[0]||(a[0]=[n('<h1 id="_00-编程的思想形态" tabindex="-1"><a class="header-anchor" href="#_00-编程的思想形态"><span>00. 编程的思想形态</span></a></h1><h2 id="代码易读性" tabindex="-1"><a class="header-anchor" href="#代码易读性"><span>代码易读性</span></a></h2><h3 id="注释-注释符" tabindex="-1"><a class="header-anchor" href="#注释-注释符"><span>注释(注释符)</span></a></h3><h3 id="书写风格类" tabindex="-1"><a class="header-anchor" href="#书写风格类"><span>书写风格类</span></a></h3><h4 id="语言风格" tabindex="-1"><a class="header-anchor" href="#语言风格"><span>语言风格*</span></a></h4><h4 id="书写风格" tabindex="-1"><a class="header-anchor" href="#书写风格"><span>书写风格*</span></a></h4><h4 id="命名风格-与关键字" tabindex="-1"><a class="header-anchor" href="#命名风格-与关键字"><span>命名风格（与关键字）*</span></a></h4><h2 id="代码易用性" tabindex="-1"><a class="header-anchor" href="#代码易用性"><span>代码易用性</span></a></h2><h3 id="头文件" tabindex="-1"><a class="header-anchor" href="#头文件"><span>头文件</span></a></h3><h3 id="dir-和help-语法" tabindex="-1"><a class="header-anchor" href="#dir-和help-语法"><span>dir()和help()语法</span></a></h3><h2 id="交互" tabindex="-1"><a class="header-anchor" href="#交互"><span>交互</span></a></h2><h3 id="控制台-i-o" tabindex="-1"><a class="header-anchor" href="#控制台-i-o"><span>控制台 I/O</span></a></h3><h3 id="文件-i-o" tabindex="-1"><a class="header-anchor" href="#文件-i-o"><span>文件 I/O</span></a></h3><h3 id="脚本型-i-o-依赖于宿主软件的行为" tabindex="-1"><a class="header-anchor" href="#脚本型-i-o-依赖于宿主软件的行为"><span>脚本型 I/O（依赖于宿主软件的行为）</span></a></h3><h3 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h3><h2 id="代码管理-结构化编程思想-逻辑控制" tabindex="-1"><a class="header-anchor" href="#代码管理-结构化编程思想-逻辑控制"><span>代码管理 &gt; 结构化编程思想（逻辑控制）</span></a></h2><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for"><span>for</span></a></h3><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>while</span></a></h3><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>if</span></a></h3><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch"><span>switch</span></a></h3><h3 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h3><h3 id="跳转-break和continue" tabindex="-1"><a class="header-anchor" href="#跳转-break和continue"><span>跳转（break和continue）</span></a></h3><h3 id="异常捕捉" tabindex="-1"><a class="header-anchor" href="#异常捕捉"><span>异常捕捉</span></a></h3><h2 id="动态联结思想-自由存储空间" tabindex="-1"><a class="header-anchor" href="#动态联结思想-自由存储空间"><span>动态联结思想 &gt; 自由存储空间</span></a></h2><h3 id="oop思想" tabindex="-1"><a class="header-anchor" href="#oop思想"><span>OOP思想</span></a></h3><h3 id="class类与对象" tabindex="-1"><a class="header-anchor" href="#class类与对象"><span>Class类与对象</span></a></h3><h2 id="封装思想-函数式编程" tabindex="-1"><a class="header-anchor" href="#封装思想-函数式编程"><span>封装思想 &gt; 函数式编程</span></a></h2><h3 id="自带函数" tabindex="-1"><a class="header-anchor" href="#自带函数"><span>自带函数</span></a></h3><h2 id="封装思想-面向对象编程" tabindex="-1"><a class="header-anchor" href="#封装思想-面向对象编程"><span>封装思想 &gt; 面向对象编程</span></a></h2><h2 id="封装思想-模块系统" tabindex="-1"><a class="header-anchor" href="#封装思想-模块系统"><span>封装思想 &gt; 模块系统</span></a></h2><h3 id="内置模块-无需下载-无需显式导入" tabindex="-1"><a class="header-anchor" href="#内置模块-无需下载-无需显式导入"><span>内置模块（无需下载，无需显式导入）</span></a></h3><h3 id="自带模块-标准库模块-无需下载-需显式导入" tabindex="-1"><a class="header-anchor" href="#自带模块-标准库模块-无需下载-需显式导入"><span>自带模块 / 标准库模块（无需下载，需显式导入）</span></a></h3><h3 id="第三方模块-需要下载-需显式导入" tabindex="-1"><a class="header-anchor" href="#第三方模块-需要下载-需显式导入"><span>第三方模块（需要下载，需显式导入）</span></a></h3><h3 id="自定义模块-需自己编写-需显式导入" tabindex="-1"><a class="header-anchor" href="#自定义模块-需自己编写-需显式导入"><span>自定义模块（需自己编写，需显式导入）</span></a></h3><h3 id="【专题模块】" tabindex="-1"><a class="header-anchor" href="#【专题模块】"><span>【专题模块】</span></a></h3><h2 id="封装思想-泛型编程" tabindex="-1"><a class="header-anchor" href="#封装思想-泛型编程"><span>封装思想 &gt; 泛型编程</span></a></h2><h2 id="异步思想" tabindex="-1"><a class="header-anchor" href="#异步思想"><span>异步思想</span></a></h2><h3 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>Promise</span></a></h3><h3 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await"><span>async - await</span></a></h3>',39)]))}const c=e(r,[["render",i],["__file","00. 编程思想形态.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/%E9%80%9A%E7%94%A8%E6%A1%86%E6%9E%B6/06.%20%E5%B0%81%E8%A3%85%20-%20%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/00.%20%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%BD%A2%E6%80%81.html","title":"00. 编程的思想形态","lang":"zh-CN","frontmatter":{"description":"00. 编程的思想形态 代码易读性 注释(注释符) 书写风格类 语言风格* 书写风格* 命名风格（与关键字）* 代码易用性 头文件 dir()和help()语法 交互 控制台 I/O 文件 I/O 脚本型 I/O（依赖于宿主软件的行为） GUI 代码管理 > 结构化编程思想（逻辑控制） for while if switch 三目运算符 跳转（brea...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/%E9%80%9A%E7%94%A8%E6%A1%86%E6%9E%B6/06.%20%E5%B0%81%E8%A3%85%20-%20%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/00.%20%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E5%BD%A2%E6%80%81.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"00. 编程的思想形态"}],["meta",{"property":"og:description","content":"00. 编程的思想形态 代码易读性 注释(注释符) 书写风格类 语言风格* 书写风格* 命名风格（与关键字）* 代码易用性 头文件 dir()和help()语法 交互 控制台 I/O 文件 I/O 脚本型 I/O（依赖于宿主软件的行为） GUI 代码管理 > 结构化编程思想（逻辑控制） for while if switch 三目运算符 跳转（brea..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"00. 编程的思想形态\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.8,"words":241},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/通用框架/06. 封装 - 泛型编程/00. 编程思想形态.md","excerpt":"\\n<h2>代码易读性</h2>\\n<h3>注释(注释符)</h3>\\n<h3>书写风格类</h3>\\n<h4>语言风格*</h4>\\n<h4>书写风格*</h4>\\n<h4>命名风格（与关键字）*</h4>\\n<h2>代码易用性</h2>\\n<h3>头文件</h3>\\n<h3>dir()和help()语法</h3>\\n<h2>交互</h2>\\n<h3>控制台 I/O</h3>\\n<h3>文件 I/O</h3>\\n<h3>脚本型 I/O（依赖于宿主软件的行为）</h3>\\n<h3>GUI</h3>\\n<h2>代码管理 &gt; 结构化编程思想（逻辑控制）</h2>\\n<h3>for</h3>\\n<h3>while</h3>\\n<h3>if</h3>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/通用框架/06. 封装 - 泛型编程/00. 编程思想形态.md","value":{"title":"00. 编程思想形态","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/通用框架/06. 封装 - 泛型编程/00. 编程思想形态.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,p as data};
