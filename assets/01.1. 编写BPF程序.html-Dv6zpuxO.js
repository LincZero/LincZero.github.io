import{_ as o,c as l,b as p,a,d as s,e as t,o as c,r as i}from"./app-BETEO2EF.js";const r="/assets/bcc-internals-Dgrm4JBO.png",u={},d={href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/iovisor/bpftrace",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/iovisor/bpftrace",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/iovisor/bpftrace/blob/master/docs/tutorial_one_liners.md",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/DavadDi/linux-observability-with-bpf/tree/master/code/chapter-2/hello_world",target:"_blank",rel:"noopener noreferrer"};function h(g,n){const e=i("ExternalLinkIcon");return c(),l("div",null,[n[16]||(n[16]=p('<h1 id="epbf" tabindex="-1"><a class="header-anchor" href="#epbf"><span>ePBF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="编写-bpf-程序" tabindex="-1"><a class="header-anchor" href="#编写-bpf-程序"><span>编写 BPF 程序</span></a></h1><p>对于大多数开发者而言，更多的是基于 BPF 技术之上编写解决我们日常遇到的各种问题，当前 BCC 和 BPFTrace 两个项目在观测和性能分析上已经有了诸多灵活且功能强大的<strong>工具箱</strong>，完全可以满足我们日常使用。</p>',4)),a("ul",null,[a("li",null,[a("a",d,[n[0]||(n[0]=s("BCC")),t(e)]),n[1]||(n[1]=s(" 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程序；"))]),a("li",null,[a("a",k,[n[2]||(n[2]=s("BPFTrace")),t(e)]),n[3]||(n[3]=s(" 采用类似于 awk 语言快速编写 eBPF 程序；"))])]),n[17]||(n[17]=p('<p><strong>更早期</strong>的工具则是使用 C 语言来编写 BPF 程序，使用 LLVM clang 编译成 BPF 代码，这对于普通使用者上手有不少门槛当前仅限于对于 eBPF 技术更加深入的学习场景。</p><h2 id="bcc-版本-helloworld" tabindex="-1"><a class="header-anchor" href="#bcc-版本-helloworld"><span>BCC 版本 HelloWorld</span></a></h2><p>[title(BCC 整体架构)]</p><p>​ <img src="'+r+`" alt="bcc-internals" style="zoom:80%;"></p><p>使用 BCC 前端绑定语言 Python 编写的 Hello World 版本：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python3</span>

<span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF

<span class="token comment"># This may not work for 4.17 on x64, you need replace kprobe__sys_clone with kprobe____x64_sys_clone</span>
prog <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
	int kprobe__sys_clone(void *ctx) {
		bpf_trace_printk(&quot;Hello, World!\\\\n&quot;);
		return 0;
	}
&quot;&quot;&quot;</span>

b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>text<span class="token operator">=</span>prog<span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token number">0x04</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>trace_print<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序前需要安装过 bcc 相关工具包，当运行正常的时候我们发现每当 <code>sys_clone</code> 系统调用时，运行的控制台上就会打印 “Hello, World!”，在打印文字前面还包含了调用程序的进程名称，进程 ID 等信息；</p><blockquote><p>如果运行报错，可能是缺少头文件，一般安装 kernel-devel 包即可。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># python ./hello.py</span>
         kubelet<span class="token operator">-</span><span class="token number">8349</span>  <span class="token punctuation">[</span><span class="token number">006</span><span class="token punctuation">]</span> d<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">33637334.829981</span><span class="token punctuation">:</span> <span class="token punctuation">:</span> Hello<span class="token punctuation">,</span> World!
         kubelet<span class="token operator">-</span><span class="token number">8349</span>  <span class="token punctuation">[</span><span class="token number">006</span><span class="token punctuation">]</span> d<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">33637334.838594</span><span class="token punctuation">:</span> <span class="token punctuation">:</span> Hello<span class="token punctuation">,</span> World!
         kubelet<span class="token operator">-</span><span class="token number">8349</span>  <span class="token punctuation">[</span><span class="token number">006</span><span class="token punctuation">]</span> d<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">33637334.843788</span><span class="token punctuation">:</span> <span class="token punctuation">:</span> Hello<span class="token punctuation">,</span> World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bpftrace" tabindex="-1"><a class="header-anchor" href="#bpftrace"><span>BPFTrace</span></a></h2>`,10)),a("p",null,[n[7]||(n[7]=s("BPFTrace 是基于 BPF 和 BCC 的开源项目，与 BCC 不同的是其提供了更高层次的抽象，可以使用类似 AWK 脚本语言来编写基于 BPF 的跟踪或者性能排查工具，更加易于入门和编写，该工具的主要灵感来自于 Solaris 的 D 语言。BPFTrace 更方便与编写单行的程序。BPFTrace 与 BCC 一样也是 IO Visor 组织下的项目，仓库参见 ")),a("a",v,[n[4]||(n[4]=s("bpftrace")),t(e)]),n[8]||(n[8]=s("。更加深入的学习资料参见：")),a("a",m,[n[5]||(n[5]=s("Reference Guide")),t(e)]),n[9]||(n[9]=s(" 和 ")),a("a",b,[n[6]||(n[6]=s("One-Liner Tutorial")),t(e)]),n[10]||(n[10]=s("。"))]),n[18]||(n[18]=p(`<p>BPFTrace 使用 LLVM 将脚本编译成 BPF 二进制码，后续使用 BCC 与 Linux 内核进行交互。从功能层面上讲，BPFTrace 的定制性和灵活性不如 BCC，但是比 BCC 工具更加易于理解和使用，降低了 BPF 技术的使用门槛。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 统计进程调用 sys_enter 的次数</span>
<span class="token comment">#bpftrace -e &#39;tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }&#39;</span>
Attaching <span class="token number">1</span> probe<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">^</span>C

@<span class="token punctuation">[</span>bpftrace<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">6</span>
@<span class="token punctuation">[</span>systemd<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">24</span>
@<span class="token punctuation">[</span>snmp<span class="token operator">-</span><span class="token keyword">pass</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">96</span>
@<span class="token punctuation">[</span>sshd<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">125</span>

<span class="token comment"># 统计内核中函数堆栈的次数</span>
<span class="token comment"># bpftrace -e &#39;profile:hz:99 { @[kstack] = count(); }&#39;</span>
Attaching <span class="token number">1</span> probe<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">^</span>C

<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
@<span class="token punctuation">[</span>
filemap_map_pages<span class="token operator">+</span><span class="token number">181</span>
__handle_mm_fault<span class="token operator">+</span><span class="token number">2905</span>
handle_mm_fault<span class="token operator">+</span><span class="token number">250</span>
__do_page_fault<span class="token operator">+</span><span class="token number">599</span>
async_page_fault<span class="token operator">+</span><span class="token number">69</span>
<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">12</span>
<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
@<span class="token punctuation">[</span>
cpuidle_enter_state<span class="token operator">+</span><span class="token number">164</span>
do_idle<span class="token operator">+</span><span class="token number">390</span>
cpu_startup_entry<span class="token operator">+</span><span class="token number">111</span>
start_secondary<span class="token operator">+</span><span class="token number">423</span>
secondary_startup_64<span class="token operator">+</span><span class="token number">165</span>
<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">22122</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="c-语言原生方式" tabindex="-1"><a class="header-anchor" href="#c-语言原生方式"><span>C 语言原生方式</span></a></h2><p>采用 LLVM Clang 的方式编译会涉及到内核编译环境搭建，而且还需要自己编译 Makefile 等操作，属于高级用户使用：</p><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/bpf.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SEC</span><span class="token expression"><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>bpf_trace_printk<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token keyword">int</span> fmt_size<span class="token punctuation">,</span>
                               <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>BPF_FUNC_trace_printk<span class="token punctuation">;</span>

<span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_enter_execve&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">bpf_prog</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, BPF World!&quot;</span><span class="token punctuation">;</span>
  <span class="token function">bpf_trace_printk</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> _license<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;license&quot;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;GPL&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div></div><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;bpf_load.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">load_bpf_file</span><span class="token punctuation">(</span><span class="token string">&quot;bpf_program.o&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The kernel didn&#39;t load the BPF program\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">read_trace_pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div></div><p>Makefile 文件（部分）</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>build<span class="token operator">:</span> $<span class="token punctuation">{</span>BPFCODE<span class="token punctuation">.</span>c<span class="token punctuation">}</span> $<span class="token punctuation">{</span>BPFLOADER<span class="token punctuation">}</span>
	$<span class="token punctuation">(</span>CLANG<span class="token punctuation">)</span> <span class="token operator">-</span>O2 <span class="token operator">-</span>target bpf <span class="token operator">-</span>c $<span class="token punctuation">(</span>BPFCODE<span class="token operator">:</span><span class="token operator">=</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> $<span class="token punctuation">(</span>CCINCLUDE<span class="token punctuation">)</span> <span class="token operator">-</span>o $<span class="token punctuation">{</span>BPFCODE<span class="token operator">:</span><span class="token operator">=</span><span class="token punctuation">.</span>o<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 clang 编译中的选型 <code>-target bpf</code> 表明我们将代码编译成 bpf 的字节码。</p>`,9)),a("p",null,[n[12]||(n[12]=s("完整的程序参见：")),a("a",B,[n[11]||(n[11]=s("hello_world")),t(e)]),n[13]||(n[13]=s("；更多的样例代码可以参见对应内核中 ")),n[14]||(n[14]=a("code",null,"kernel-src/samples/bpf/",-1)),n[15]||(n[15]=s(" 下的样例代码。"))])])}const f=o(u,[["render",h],["__file","01.1. 编写BPF程序.html.vue"]]),y=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/01.1.%20%E7%BC%96%E5%86%99BPF%E7%A8%8B%E5%BA%8F.html","title":"ePBF","lang":"zh-CN","frontmatter":{"description":"ePBF 目录 编写 BPF 程序 对于大多数开发者而言，更多的是基于 BPF 技术之上编写解决我们日常遇到的各种问题，当前 BCC 和 BPFTrace 两个项目在观测和性能分析上已经有了诸多灵活且功能强大的工具箱，完全可以满足我们日常使用。 BCC 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/01.1.%20%E7%BC%96%E5%86%99BPF%E7%A8%8B%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"ePBF"}],["meta",{"property":"og:description","content":"ePBF 目录 编写 BPF 程序 对于大多数开发者而言，更多的是基于 BPF 技术之上编写解决我们日常遇到的各种问题，当前 BCC 和 BPFTrace 两个项目在观测和性能分析上已经有了诸多灵活且功能强大的工具箱，完全可以满足我们日常使用。 BCC 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ePBF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"ePBF","slug":"epbf","link":"#epbf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"编写 BPF 程序","slug":"编写-bpf-程序","link":"#编写-bpf-程序","children":[{"level":2,"title":"BCC 版本 HelloWorld","slug":"bcc-版本-helloworld","link":"#bcc-版本-helloworld","children":[]},{"level":2,"title":"BPFTrace","slug":"bpftrace","link":"#bpftrace","children":[]},{"level":2,"title":"C 语言原生方式","slug":"c-语言原生方式","link":"#c-语言原生方式","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.06,"words":918},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/01.1. 编写BPF程序.md","excerpt":"\\n<h1>目录</h1>\\n<h1>编写 BPF 程序</h1>\\n<p>对于大多数开发者而言，更多的是基于 BPF 技术之上编写解决我们日常遇到的各种问题，当前 BCC 和 BPFTrace 两个项目在观测和性能分析上已经有了诸多灵活且功能强大的<strong>工具箱</strong>，完全可以满足我们日常使用。</p>\\n<ul>\\n<li><a href=\\"https://github.com/iovisor/bcc\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BCC</a> 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程序；</li>\\n<li><a href=\\"https://github.com/iovisor/bpftrace\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BPFTrace</a> 采用类似于 awk 语言快速编写 eBPF 程序；</li>\\n</ul>","autoDesc":true}');export{f as comp,y as data};
