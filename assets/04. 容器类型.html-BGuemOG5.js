import{_ as a,c as s,a as t,o as p}from"./app-G9P12kHM.js";const e={};function o(c,n){return p(),s("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="容器类型" tabindex="-1"><a class="header-anchor" href="#容器类型"><span>容器类型</span></a></h1><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><mark>与C/C++不同</mark>：数组定义</p><ul><li><p>Java可以使用两种风格的定义方式</p><ul><li><p>区别</p><ul><li>数组长度不要求是常量</li><li>创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充</li></ul></li><li><p>定义</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>					<span class="token comment">// 风格1，Java风格，将类型和变量名分开了，更受Java程序员的喜爱</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>					<span class="token comment">// 风格2，C风格</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// new</span>

<span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">// 初始化一个匿名的数组，自动计数</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 可以在不创建新变量的情况下重新初始化一个数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">// 简写形式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Cpp的定义</p><ul><li><p>区别</p><ul><li>数组长度要求是常量（stl中的vector等类则支持变长）</li><li>需要<code>= {0}</code>自动填补后，所有元素才会初始化为0，否则内存随机、非常危险</li></ul></li><li><p>定义</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int a[4] = {1,2,3};			// 一般方法 + 自动填补
int a[] = {1,2,3,4};		// 自动计数
int a {1,2,3,4};			// 大括号初始化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>补充：</p><blockquote><p>在Java中，允许数组长度为0。在编写一个结果为数组的方法时，如果碰巧结果为空，则这种语法形式就显得非常有用。此时可以创建一个长度为0的数组</p><p>注意，数组长度为0与null不同。</p></blockquote><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><h4 id="arrays-copyof-拷贝数组" tabindex="-1"><a class="header-anchor" href="#arrays-copyof-拷贝数组"><span>Arrays.copyOf 拷贝数组</span></a></h4><p>API: <code>java.util.Arrays 1.2</code></p><p>如果直接拷贝赋值，则结果是拷贝的地址</p><p>若需要拷贝值，则需要使用Arrays类的copyOf方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> copiedNumbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果第二个参数比第一个参数的长度更大，则多余的元素被赋值为0/false/null</span>
<span class="token comment">// 如果第二个参数比第一个参数的长度更小，则截断</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arrays-sort-排序" tabindex="-1"><a class="header-anchor" href="#arrays-sort-排序"><span>Arrays.sort 排序</span></a></h4><p>API: <code>java.util.Arrays 1.2</code></p><p>用的是快速排序算法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h2><p>和C/C++相似，没有多维数组，只有一维数组。多维数组被解释为“数组的数组。”</p><p>使用多个下标访问数组元素，它适用于表示表格或更加复杂的排列形式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> balances<span class="token punctuation">;</span>
balances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// x行y列，double是一个包含x个指针的数组，每个元素再包含y个元素</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> magicSquare <span class="token operator">=</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">1.2</span><span class="token number">.3</span><span class="token number">.4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for each循环语句不能自动处理二维数组的每一个元素，需要使用两个嵌套的循环</p><h3 id="不规则数组" tabindex="-1"><a class="header-anchor" href="#不规则数组"><span>不规则数组</span></a></h3><p>即数组每一行都有不同的长度</p>`,26)]))}const i=a(e,[["render",o],["__file","04. 容器类型.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 容器类型 数组 定义 与C/C++不同：数组定义 Java可以使用两种风格的定义方式 区别 数组长度不要求是常量 创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充 定义 Cpp的定义 区别 数组长度要求是常量（stl中的vector等类则支持变长） 需要= {0...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/Pkmer-Math/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 容器类型 数组 定义 与C/C++不同：数组定义 Java可以使用两种风格的定义方式 区别 数组长度不要求是常量 创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充 定义 Cpp的定义 区别 数组长度要求是常量（stl中的vector等类则支持变长） 需要= {0..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"容器类型","slug":"容器类型","link":"#容器类型","children":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[{"level":4,"title":"Arrays.copyOf  拷贝数组","slug":"arrays-copyof-拷贝数组","link":"#arrays-copyof-拷贝数组","children":[]},{"level":4,"title":"Arrays.sort  排序","slug":"arrays-sort-排序","link":"#arrays-sort-排序","children":[]}]}]},{"level":2,"title":"多维数组","slug":"多维数组","link":"#多维数组","children":[{"level":3,"title":"不规则数组","slug":"不规则数组","link":"#不规则数组","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.22,"words":666},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/04. 容器类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>容器类型</h1>\\n<h2>数组</h2>\\n<h3>定义</h3>\\n<p><mark>与C/C++不同</mark>：数组定义</p>\\n<ul>\\n<li>\\n<p>Java可以使用两种风格的定义方式</p>\\n<ul>\\n<li>\\n<p>区别</p>\\n<ul>\\n<li>数组长度不要求是常量</li>\\n<li>创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充</li>\\n</ul>\\n</li>\\n<li>\\n<p>定义</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a<span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 风格1，Java风格，将类型和变量名分开了，更受Java程序员的喜爱</span>\\n<span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 风格2，C风格</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// new</span>\\n\\n<span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// 初始化一个匿名的数组，自动计数</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 可以在不创建新变量的情况下重新初始化一个数组</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// 简写形式</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>Cpp的定义</p>\\n<ul>\\n<li>\\n<p>区别</p>\\n<ul>\\n<li>数组长度要求是常量（stl中的vector等类则支持变长）</li>\\n<li>需要<code>= {0}</code>自动填补后，所有元素才会初始化为0，否则内存随机、非常危险</li>\\n</ul>\\n</li>\\n<li>\\n<p>定义</p>\\n<div class=\\"language-c++\\" data-ext=\\"c++\\" data-title=\\"c++\\"><pre class=\\"language-c++\\"><code>int a[4] = {1,2,3};\\t\\t\\t// 一般方法 + 自动填补\\nint a[] = {1,2,3,4};\\t\\t// 自动计数\\nint a {1,2,3,4};\\t\\t\\t// 大括号初始化\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{i as comp,u as data};
