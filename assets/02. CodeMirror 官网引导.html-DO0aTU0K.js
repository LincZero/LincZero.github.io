import{_ as i,c as l,e as a,a as e,b as t,d as s,o as d,r}from"./app-DGYDqQs-.js";const u={},c={href:"https://codemirror.net/docs/ref/#state",target:"_blank",rel:"noopener noreferrer"},k={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},m={href:"https://codemirror.net/docs/ref/#state.Transaction",target:"_blank",rel:"noopener noreferrer"},f={href:"https://codemirror.net/docs/ref/#view",target:"_blank",rel:"noopener noreferrer"},v={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},g={href:"https://codemirror.net/docs/ref/#commands",target:"_blank",rel:"noopener noreferrer"},b={href:"https://codemirror.net/docs/ref/#commands.defaultKeymap",target:"_blank",rel:"noopener noreferrer"},h={href:"https://codemirror.net/docs/ref/#view.lineNumbers",target:"_blank",rel:"noopener noreferrer"},y={href:"https://codemirror.net/docs/ref/#h_undo_history",target:"_blank",rel:"noopener noreferrer"},w={href:"https://codemirror.net/docs/ref/#codemirror",target:"_blank",rel:"noopener noreferrer"},x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},E={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://codemirror.net/docs/ref/#state.Text",target:"_blank",rel:"noopener noreferrer"},S={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},D={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},j={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},q={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://guide.elm-lang.org/architecture/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},A={href:"https://codemirror.net/docs/ref/#view.EditorView.state",target:"_blank",rel:"noopener noreferrer"},O={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},P={href:"https://codemirror.net/docs/ref/#state.EditorState.update",target:"_blank",rel:"noopener noreferrer"},N={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},F={href:"https://codemirror.net/docs/ref/#state.Transaction",target:"_blank",rel:"noopener noreferrer"},B={href:"https://codemirror.net/docs/ref/#view.EditorView.dispatch",target:"_blank",rel:"noopener noreferrer"},J={href:"https://codemirror.net/docs/ref/#state.EditorState.update",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.changes",target:"_blank",rel:"noopener noreferrer"},L={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.selection",target:"_blank",rel:"noopener noreferrer"},R={href:"https://codemirror.net/docs/ref/#state.EditorSelection.map",target:"_blank",rel:"noopener noreferrer"},I={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.scrollIntoView",target:"_blank",rel:"noopener noreferrer"},W={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.annotations",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://codemirror.net/docs/ref/#state.Transaction%5EuserEvent",target:"_blank",rel:"noopener noreferrer"},z={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.effects",target:"_blank",rel:"noopener noreferrer"},U={href:"https://codemirror.net/docs/ref/#state.StateEffect%5Ereconfigure",target:"_blank",rel:"noopener noreferrer"},K={href:"https://codemirror.net/docs/ref/#state.Compartment.reconfigure",target:"_blank",rel:"noopener noreferrer"},H={href:"https://codemirror.net/docs/ref/#state.Compartment",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://codemirror.net/docs/ref/#commands.history",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://codemirror.net/docs/ref/#h_folding",target:"_blank",rel:"noopener noreferrer"},X={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},$={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},_={href:"https://redux.js.org/basics/reducers/",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://codemirror.net/docs/ref/#state.Annotation",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://codemirror.net/docs/ref/#state.StateEffect",target:"_blank",rel:"noopener noreferrer"},en={href:"https://codemirror.net/docs/ref/#view.ViewPlugin",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Emark",target:"_blank",rel:"noopener noreferrer"},on={href:"https://codemirror.net/docs/ref/#view.Decoration%5Ewidget",target:"_blank",rel:"noopener noreferrer"},an={href:"https://codemirror.net/docs/ref/#view.Decoration%5Ereplace",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Eline",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://codemirror.net/docs/ref/#view.EditorView%5Edecorations",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://codemirror.net/docs/ref/#state.RangeSet",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://codemirror.net/docs/ref/#state.RangeSet.map",target:"_blank",rel:"noopener noreferrer"},un={href:"https://codemirror.net/docs/ref/#state.RangeSetBuilder",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://codemirror.net/docs/ref/#state.StateField%5Edefine%5Econfig.provide",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://codemirror.net/docs/ref/#view.EditorView.visibleRanges",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://codemirror.net/docs/ref/#state.Facet%5Edefine%5Econfig.combine",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://codemirror.net/examples/zebra",target:"_blank",rel:"noopener noreferrer"};function vn(gn,n){const o=r("ExternalLinkIcon"),p=r("Mermaid");return d(),l("div",null,[n[134]||(n[134]=a('<h1 id="codemirror-官网引导-系统指南-guide" tabindex="-1"><a class="header-anchor" href="#codemirror-官网引导-系统指南-guide"><span>CodeMirror 官网引导 - 系统指南（Guide）</span></a></h1><p>https://codemirror.net/docs/guide/</p><h2 id="架构概述" tabindex="-1"><a class="header-anchor" href="#架构概述"><span>架构概述</span></a></h2><h3 id="模块化-modularity" tabindex="-1"><a class="header-anchor" href="#模块化-modularity"><span>模块化（Modularity）</span></a></h3><p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p><p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p>',6)),e("ul",null,[e("li",null,[e("a",c,[n[0]||(n[0]=e("code",null,"@codemirror/state",-1)),t(o)]),n[3]||(n[3]=s("，它定义了表示")),e("a",k,[n[1]||(n[1]=s("编辑器状态")),t(o)]),n[4]||(n[4]=s("和 对该状态的")),e("a",m,[n[2]||(n[2]=s("更改")),t(o)]),n[5]||(n[5]=s("的数据结构。"))]),e("li",null,[e("a",f,[n[6]||(n[6]=e("code",null,"@codemirror/view",-1)),t(o)]),n[8]||(n[8]=s("，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的")),e("a",v,[n[7]||(n[7]=s("显示组件。")),t(o)])]),e("li",null,[e("a",g,[n[9]||(n[9]=e("code",null,"@codemirror/commands",-1)),t(o)]),n[11]||(n[11]=s("，为它们定义了很多编辑命令和一些")),e("a",b,[n[10]||(n[10]=s("键绑定")),t(o)]),n[12]||(n[12]=s("。"))])]),n[135]||(n[135]=a(`<p>这就是一个最小可行的编辑器的样子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/state&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>EditorView<span class="token punctuation">,</span> keymap<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/view&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>defaultKeymap<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/commands&quot;</span>

<span class="token keyword">let</span> startState <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>keymap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>defaultKeymap<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EditorView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> startState<span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),e("p",null,[n[16]||(n[16]=s("您在编辑器中期望的许多东西，例如")),e("a",h,[n[13]||(n[13]=s("行号间距")),t(o)]),n[17]||(n[17]=s("或")),e("a",y,[n[14]||(n[14]=s("撤消历史记录")),t(o)]),n[18]||(n[18]=s("，都是作为通用核心的扩展实现的，需要显式添加到要启用的配置中。为了便于入门，该")),e("a",w,[n[15]||(n[15]=e("code",null,"codemirror",-1)),t(o)]),n[19]||(n[19]=s("包引入了基线编辑器所需的大部分内容（语言包除外）。"))]),n[136]||(n[136]=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorView<span class="token punctuation">,</span> basicSetup<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;codemirror&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>javascript<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/lang-javascript&quot;</span>

<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EditorView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>basicSetup<span class="token punctuation">,</span> <span class="token function">javascript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("p",null,[n[23]||(n[23]=s("这些包作为")),e("a",x,[n[20]||(n[20]=s("ES6 模块")),t(o)]),n[24]||(n[24]=s("分发。这意味着如果没有某种捆绑器（将模块化程序打包到单个大 JavaScript 文件中）或模块加载器，目前运行该库是不切实际的。如果您不熟悉捆绑，我建议您查看")),e("a",E,[n[21]||(n[21]=s("rollup")),t(o)]),n[25]||(n[25]=s("或 ")),e("a",C,[n[22]||(n[22]=s("Webpack")),t(o)]),n[26]||(n[26]=s("。"))]),n[137]||(n[137]=e("h3",{id:"功能核心-命令式外壳-functional-core-imperative-shell",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#功能核心-命令式外壳-functional-core-imperative-shell"},[e("span",null,"功能核心，命令式外壳（Functional Core, Imperative Shell）")])],-1)),n[138]||(n[138]=e("p",null,[s("指导 CodeMirror 架构的一种态度是，"),e("strong",null,"功能"),s("性（纯）代码创造新的价值而不是产生副作用，它比"),e("strong",null,"命令式"),s("代码更容易使用。 但是浏览器 DOM 显然是"),e("strong",null,"命令式"),s("的，与 CodeMirror 集成的许多系统一样。")],-1)),e("p",null,[n[30]||(n[30]=s("为了解决这个矛盾，库的状态表示是严格函数式的——")),e("a",M,[n[27]||(n[27]=s("文档")),t(o)]),n[31]||(n[31]=s("和 ")),e("a",S,[n[28]||(n[28]=s("状态")),t(o)]),n[32]||(n[32]=s("数据结构是不可变的，对它们的操作是纯函数，而")),e("a",D,[n[29]||(n[29]=s("视图组件")),t(o)]),n[33]||(n[33]=s("和命令接口将它们包装在一个命令式接口中。"))]),e("p",null,[n[35]||(n[35]=s("这意味着即使编辑器移动到新状态，旧状态值也会保持不变。在处理状态更改时，同时拥有旧状态和新状态通常非常有用。这也意味着直接更改状态值，或以命令方式编写附加")),e("a",j,[n[34]||(n[34]=s("状态字段等")),t(o)]),n[36]||(n[36]=s("扩展不会达到您希望的效果（并且可能只会破坏事物）。"))]),n[139]||(n[139]=a(`<p>TypeScript 接口试图通过将数组和对象属性标记为<code>readonly</code>. 当使用普通的旧 JavaScript 时，可能更难记住这一点。但作为一般规则，除非在文档中明确描述，否则不支持在库创建的对象中重新分配属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// BAD WRONG NO GOOD CODE:</span>
state<span class="token punctuation">.</span>doc <span class="token operator">=</span> Text<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- DON&#39;T DO THIS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态和更新-state-and-updates" tabindex="-1"><a class="header-anchor" href="#状态和更新-state-and-updates"><span>状态和更新（State and Updates）</span></a></h3>`,3)),e("p",null,[e("a",q,[n[37]||(n[37]=s("该库以受Redux")),t(o)]),n[42]||(n[42]=s("或 ")),e("a",T,[n[38]||(n[38]=s("Elm")),t(o)]),n[43]||(n[43]=s("等方法启发的方式处理更新 。除了少数例外（如组合和拖放处理）， ")),e("a",V,[n[39]||(n[39]=s("视图")),t(o)]),n[44]||(n[44]=s("的状态完全由其")),e("a",A,[n[40]||(n[40]=e("code",null,"state",-1)),t(o)]),n[45]||(n[45]=s("属性中的")),e("a",O,[n[41]||(n[41]=e("code",null,"EditorState",-1)),t(o)]),n[46]||(n[46]=s("值决定。"))]),e("p",null,[e("a",P,[n[47]||(n[47]=s("通过创建")),t(o)]),n[51]||(n[51]=s("描述对文档、选择或其他状态")),e("a",N,[n[48]||(n[48]=s("字段")),t(o)]),n[52]||(n[52]=s("的更改的 ")),e("a",F,[n[49]||(n[49]=s("事务")),t(o)]),n[53]||(n[53]=s("，该状态的更改发生在功能代码中 。然后可以 ")),e("a",B,[n[50]||(n[50]=s("分派")),t(o)]),n[54]||(n[54]=s("这样的事务，它告诉视图更新其状态，此时它将其 DOM 表示与新状态同步。"))]),n[140]||(n[140]=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// (Assume view is an EditorView instance holding the document &quot;123&quot;.)</span>
<span class="token keyword">let</span> transaction <span class="token operator">=</span> view<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">changes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;0123&quot;</span>
<span class="token comment">// At this point the view still shows the old state.</span>
view<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span>
<span class="token comment">// And now it shows the new state.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>典型用户交互期间的数据流如下所示：</p>`,2)),t(p,{id:"mermaid-75",code:"eJxLL0osyFDwCeJy8fd9sqv7ye5tCrq6dgolRYl5xYnJJZn5eWB+Xmp5fHFJYkkqmFeWmVoOZsA1cQEA2iwbLA=="}),n[141]||(n[141]=a('<p>视图监听事件。当 DOM 事件进入时，它（或绑定到键的命令，或由扩展注册的事件处理程序）将它们转换为状态事务并分发它们。这建立了一个新的状态。当新状态被提供给视图时，它会自行更新。</p><h3 id="扩展-extension" tabindex="-1"><a class="header-anchor" href="#扩展-extension"><span>扩展（Extension）</span></a></h3><h3 id="文档偏移-document-offsets" tabindex="-1"><a class="header-anchor" href="#文档偏移-document-offsets"><span>文档偏移（Document offsets）</span></a></h3><h2 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h2><h3 id="文件变更-document-changes" tabindex="-1"><a class="header-anchor" href="#文件变更-document-changes"><span>文件变更（Document-changes）</span></a></h3><h3 id="选择-selection" tabindex="-1"><a class="header-anchor" href="#选择-selection"><span>选择（selection）</span></a></h3><h3 id="配置-configuration" tabindex="-1"><a class="header-anchor" href="#配置-configuration"><span>配置（Configuration）</span></a></h3><h3 id="处理-transactions-机翻是交易" tabindex="-1"><a class="header-anchor" href="#处理-transactions-机翻是交易"><span>处理（Transactions 机翻是交易？）</span></a></h3>',8)),e("p",null,[n[56]||(n[56]=s("使用状态 ")),e("a",J,[n[55]||(n[55]=e("code",null,"update",-1)),t(o)]),n[57]||(n[57]=s("方法创建的交易结合了许多效果（都是可选的）："))]),e("ul",null,[e("li",null,[n[59]||(n[59]=s("它可以应用")),e("a",G,[n[58]||(n[58]=s("文档更改")),t(o)]),n[60]||(n[60]=s("。"))]),e("li",null,[n[63]||(n[63]=s("它可以显式移动 ")),e("a",L,[n[61]||(n[61]=s("选择")),t(o)]),n[64]||(n[64]=s("。请注意，当有文档更改但没有明确的新选择时，选择将 通过这些更改隐式")),e("a",R,[n[62]||(n[62]=s("映射。")),t(o)])]),e("li",null,[n[66]||(n[66]=s("它可以设置一个")),e("a",I,[n[65]||(n[65]=s("标志")),t(o)]),n[67]||(n[67]=s("，指示视图将（主要）选择头滚动到视图中。"))]),e("li",null,[n[70]||(n[70]=s("它可以有任意数量的 ")),e("a",W,[n[68]||(n[68]=s("注解")),t(o)]),n[71]||(n[71]=s("，用于存储描述（整个）交易的额外元数据。例如，")),e("a",Z,[n[69]||(n[69]=e("code",null,"userEvent",-1)),t(o)]),n[72]||(n[72]=s(" 注释可用于识别为某些常见操作（如键入或粘贴）生成的事务。"))]),e("li",null,[n[74]||(n[74]=s("它可以有")),e("a",z,[n[73]||(n[73]=s("effects")),t(o)]),n[75]||(n[75]=s("，这是独立的附加效果，通常在某些扩展的状态上（例如折叠代码或启动自动完成）。"))]),e("li",null,[n[79]||(n[79]=s("它可以通过提供一组")),e("a",U,[n[76]||(n[76]=s("全新")),t(o)]),n[80]||(n[80]=s("的扩展或")),e("a",K,[n[77]||(n[77]=s("替换")),t(o)]),n[81]||(n[81]=s("配置的 特定")),e("a",H,[n[78]||(n[78]=s("部分")),t(o)]),n[82]||(n[82]=s("来影响状态的配置。"))])]),n[142]||(n[142]=a('<p>要完全重置状态（例如加载新文档），建议创建新状态而不是事务。这将确保不会出现不需要的状态（例如撤消历史事件）。</p><h2 id="the-view" tabindex="-1"><a class="header-anchor" href="#the-view"><span>The View</span></a></h2><h3 id="视口-viewport" tabindex="-1"><a class="header-anchor" href="#视口-viewport"><span>视口（Viewport）</span></a></h3><h3 id="更新周期-update-cycle" tabindex="-1"><a class="header-anchor" href="#更新周期-update-cycle"><span>更新周期（Update-cycle）</span></a></h3><h3 id="dom结构-dom-structure" tabindex="-1"><a class="header-anchor" href="#dom结构-dom-structure"><span>DOM结构（Dom-structure）</span></a></h3><h3 id="风格和主题-styles-and-themes" tabindex="-1"><a class="header-anchor" href="#风格和主题-styles-and-themes"><span>风格和主题（Styles-and-themes）</span></a></h3><h3 id="命令-commands" tabindex="-1"><a class="header-anchor" href="#命令-commands"><span>命令（Commands）</span></a></h3><h2 id="扩展cm-extending-codemirror" tabindex="-1"><a class="header-anchor" href="#扩展cm-extending-codemirror"><span>扩展CM（Extending-codemirror）</span></a></h2><p>有许多不同的方法可以扩展 CodeMirror，并且为给定的用例选择正确的方法并不总是显而易见的。本节介绍编写编辑器扩展需要熟悉的各种概念。</p><h3 id="状态字段-state-fields" tabindex="-1"><a class="header-anchor" href="#状态字段-state-fields"><span>状态字段（State-fields）</span></a></h3><p>（可参考：[OB-状态字段](../Plugin_Obsidian/01. Obsidian插件开发.md/###状态字段 <code>StateField</code> - OB) ）</p>',11)),e("p",null,[n[85]||(n[85]=s("扩展通常需要在状态中存储额外的信息。撤消")),e("a",Y,[n[83]||(n[83]=s("历史")),t(o)]),n[86]||(n[86]=s("需要存储可撤消的更改，代码")),e("a",Q,[n[84]||(n[84]=s("折叠")),t(o)]),n[87]||(n[87]=s("扩展需要跟踪已折叠的内容，等等。"))]),e("p",null,[n[90]||(n[90]=s("为此，扩展可以定义额外的")),e("a",X,[n[88]||(n[88]=s("状态字段")),t(o)]),n[91]||(n[91]=s("。存在于纯功能")),e("a",$,[n[89]||(n[89]=s("状态")),t(o)]),n[92]||(n[92]=s("数据结构中的状态字段必须存储不可变值。"))]),e("p",null,[n[94]||(n[94]=s("状态字段使用类似于")),e("a",_,[n[93]||(n[93]=s("reducer")),t(o)]),n[95]||(n[95]=s("的东西与状态的其余部分保持同步。每次状态更新时，都会用字段的当前值和交易调用一个函数，它应该返回字段的新值。"))]),n[143]||(n[143]=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorState<span class="token punctuation">,</span> StateField<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/state&quot;</span>

<span class="token keyword">let</span> countDocChanges <span class="token operator">=</span> StateField<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>						<span class="token comment">// 定义一个状态字段 —— countDocChanges</span>
  <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> tr<span class="token punctuation">.</span>docChanged <span class="token operator">?</span> value <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> value <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">extensions</span><span class="token operator">:</span> countDocChanges<span class="token punctuation">}</span><span class="token punctuation">)</span>	<span class="token comment">// 根据该状态字段 创建一个编辑器状态</span>
state <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">changes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>state	<span class="token comment">// 更新状态</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>countDocChanges<span class="token punctuation">)</span><span class="token punctuation">)</span> 						<span class="token comment">// 打印状态字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),e("p",null,[n[98]||(n[98]=s("您通常会希望使用")),e("a",nn,[n[96]||(n[96]=s("注释")),t(o)]),n[99]||(n[99]=s("或 ")),e("a",sn,[n[97]||(n[97]=s("效果")),t(o)]),n[100]||(n[100]=s("来传达您的状态字段正在发生的事情。"))]),n[144]||(n[144]=e("p",null,[s("尝试避免采取将状态放入实际状态字段的步骤可能很诱人——声明一个状态有点冗长，并且为每个状态更改触发整个事务可能感觉有点重量级。但在几乎所有情况下，将您的状态绑定到编辑器范围的状态更新周期中是一个"),e("em",null,"非常"),s("好的主意，因为它使保持所有内容同步变得容易得多。")],-1)),n[145]||(n[145]=e("h3",{id:"影响视图-affecting-the-view",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#影响视图-affecting-the-view"},[e("span",null,"影响视图（Affecting-the-view）")])],-1)),e("p",null,[e("a",en,[n[101]||(n[101]=s("视图插件")),t(o)]),n[102]||(n[102]=s("为扩展提供了一种在视图中运行命令式组件的方法。这对于事件处理程序、添加和管理 DOM 元素以及执行依赖于当前视口的操作等非常有用。"))]),n[146]||(n[146]=a(`<p>这个简单的插件<strong>在编辑器的角落显示文档大小</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ViewPlugin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/view&quot;</span>

<span class="token keyword">const</span> docSizePlugin <span class="token operator">=</span> ViewPlugin<span class="token punctuation">.</span><span class="token function">fromClass</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> view<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个dom元素</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span>
      <span class="token string">&quot;position: absolute; inset-block-start: 2px; inset-inline-end: 5px&quot;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>textContent <span class="token operator">=</span> view<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>length					<span class="token comment">// 用来显示文档的长度</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>docChanged<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>textContent <span class="token operator">=</span> update<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>length				<span class="token comment">// 视图刷新时更新文档的长度</span>
  <span class="token punctuation">}</span>

  <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图插件通常不应保持（非派生）状态。它们最适合作为对保存在编辑器状态中的数据的浅层视图。</p><p>当状态被重新配置时，不属于新配置的视图插件将被销毁（这就是为什么，如果他们对编辑器进行了更改，他们应该定义一个<code>destroy</code>方法来撤消这些更改）。</p><p>当视图插件崩溃时，它会自动禁用以避免关闭整个视图。</p><h3 id="装饰文档-decorating-the-document" tabindex="-1"><a class="header-anchor" href="#装饰文档-decorating-the-document"><span><s>装饰文档（Decorating-the-document）</s></span></a></h3><p><mark>（详见 Decoration 专题）</mark></p><p>如果没有另行通知，CodeMirror 会将文档绘制为纯文本。<em>修饰</em>是一种机制，扩展可以通过这种机制影响文档的外观。它们有四种类型：</p>`,8)),e("ul",null,[e("li",null,[e("a",tn,[n[103]||(n[103]=s("标记装饰")),t(o)]),n[104]||(n[104]=s("将样式或 DOM 属性添加到给定范围内的文本。"))]),e("li",null,[e("a",on,[n[105]||(n[105]=s("小部件装饰")),t(o)]),n[106]||(n[106]=s("在文档中的给定位置插入一个 DOM 元素。"))]),e("li",null,[e("a",an,[n[107]||(n[107]=s("替换装饰")),t(o)]),n[108]||(n[108]=s("隐藏部分文档或用给定的 DOM 节点替换它。"))]),e("li",null,[e("a",rn,[n[109]||(n[109]=s("线条装饰")),t(o)]),n[110]||(n[110]=s("可以将属性添加到线条的环绕元素。"))])]),e("p",null,[n[112]||(n[112]=s("装饰是通过 ")),e("a",pn,[n[111]||(n[111]=s("facet")),t(o)]),n[113]||(n[113]=s("提供的。每次更新视图时，此方面的内容都用于设置可见内容的样式。"))]),e("p",null,[n[117]||(n[117]=s("装饰保存在")),e("a",ln,[n[114]||(n[114]=s("sets")),t(o)]),n[118]||(n[118]=s("中，这也是不可变的数据结构。此类集合可以 跨更改")),e("a",dn,[n[115]||(n[115]=s("映射")),t(o)]),n[119]||(n[119]=s("（调整其内容的位置以补偿更改）或 在更新时")),e("a",un,[n[116]||(n[116]=s("重建")),t(o)]),n[120]||(n[120]=s("，具体取决于用例。"))]),n[147]||(n[147]=e("p",null,"提供装饰的方式有两种",-1)),e("ul",null,[n[124]||(n[124]=e("li",null,"直接",-1)),e("li",null,[n[122]||(n[122]=s("通过将范围集值放在构面中（通常通过 从字段")),e("a",cn,[n[121]||(n[121]=s("派生")),t(o)]),n[123]||(n[123]=s("），或间接地，通过提供从视图到范围集的函数。"))])]),e("p",null,[n[126]||(n[126]=s("只有直接提供的装饰集可能会影响编辑器的垂直块结构，但只有间接（indirectly）提供的装饰集才能读取编辑器的视口。例如，如果你想只装饰 可见内容（")),e("a",kn,[n[125]||(n[125]=s("visible content")),t(o)]),n[127]||(n[127]=s("），这可能很有用。 此限制的原因是视口是从块结构计算的，因此在读取视口之前必须知道这一点。"))]),n[148]||(n[148]=e("h3",{id:"扩展架构-extension-architecture",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#扩展架构-extension-architecture"},[e("span",null,"扩展架构（Extension-architecture）")])],-1)),n[149]||(n[149]=e("p",null,"要创建给定的编辑器功能，您通常需要组合不同类型的扩展：用于保持状态的状态字段、用于提供样式的基本主题、用于管理输入和输出的视图插件、一些命令，可能是用于配置的方面.",-1)),n[150]||(n[150]=e("p",null,"一种常见的模式是导出一个函数，该函数返回使您的功能正常工作所需的扩展值。使它成为一个函数，即使它（还）不接受参数也是一个好主意——它使得以后添加配置选项成为可能，而不会破坏向后兼容性。",-1)),n[151]||(n[151]=e("p",null,"由于扩展可以引入其他扩展，因此考虑多次包含您的扩展时会发生什么会很有用。对于某些类型的扩展，例如键盘映射，只做多次它正在做的事情是合适的。但通常那样会很浪费，甚至会破坏某些东西。",-1)),n[152]||(n[152]=e("p",null,"通常可以通过重复删除相同的扩展值来多次使用扩展，只要做正确的事情——如果你确保只创建一次静态扩展值（主题、状态字段、视图插件等），并且总是从你的扩展构造函数返回相同的实例，你只会在编辑器中得到它们的一个副本。",-1)),n[153]||(n[153]=e("p",null,"但是当您的扩展允许配置时，您的其他逻辑可能需要访问它。当扩展的不同实例有不同的配置时，你会怎么做？",-1)),e("p",null,[n[129]||(n[129]=s("有时，这只是一个错误。但通常可以定义协调它们的策略。方面为此工作得很好。您可以将配置放在模块私有的方面，并使其 ")),e("a",mn,[n[128]||(n[128]=s("组合")),t(o)]),n[130]||(n[130]=s("功能协调配置或在不可能时抛出错误。然后需要访问当前配置的代码可以读取该方面。"))]),e("p",null,[n[132]||(n[132]=s("有关此方法的说明，请参见")),e("a",fn,[n[131]||(n[131]=s("斑马条纹")),t(o)]),n[133]||(n[133]=s("示例。"))])])}const hn=i(u,[["render",vn],["__file","02. CodeMirror 官网引导.html.vue"]]),yn=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html","title":"CodeMirror 官网引导 - 系统指南（Guide）","lang":"zh-CN","frontmatter":{"description":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"CodeMirror 官网引导 - 系统指南（Guide）"}],["meta",{"property":"og:description","content":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CodeMirror 官网引导 - 系统指南（Guide）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"CodeMirror 官网引导 - 系统指南（Guide）","slug":"codemirror-官网引导-系统指南-guide","link":"#codemirror-官网引导-系统指南-guide","children":[{"level":2,"title":"架构概述","slug":"架构概述","link":"#架构概述","children":[{"level":3,"title":"模块化（Modularity）","slug":"模块化-modularity","link":"#模块化-modularity","children":[]},{"level":3,"title":"功能核心，命令式外壳（Functional Core, Imperative Shell）","slug":"功能核心-命令式外壳-functional-core-imperative-shell","link":"#功能核心-命令式外壳-functional-core-imperative-shell","children":[]},{"level":3,"title":"状态和更新（State and Updates）","slug":"状态和更新-state-and-updates","link":"#状态和更新-state-and-updates","children":[]},{"level":3,"title":"扩展（Extension）","slug":"扩展-extension","link":"#扩展-extension","children":[]},{"level":3,"title":"文档偏移（Document offsets）","slug":"文档偏移-document-offsets","link":"#文档偏移-document-offsets","children":[]}]},{"level":2,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[{"level":3,"title":"文件变更（Document-changes）","slug":"文件变更-document-changes","link":"#文件变更-document-changes","children":[]},{"level":3,"title":"选择（selection）","slug":"选择-selection","link":"#选择-selection","children":[]},{"level":3,"title":"配置（Configuration）","slug":"配置-configuration","link":"#配置-configuration","children":[]},{"level":3,"title":"处理（Transactions 机翻是交易？）","slug":"处理-transactions-机翻是交易","link":"#处理-transactions-机翻是交易","children":[]}]},{"level":2,"title":"The View","slug":"the-view","link":"#the-view","children":[{"level":3,"title":"视口（Viewport）","slug":"视口-viewport","link":"#视口-viewport","children":[]},{"level":3,"title":"更新周期（Update-cycle）","slug":"更新周期-update-cycle","link":"#更新周期-update-cycle","children":[]},{"level":3,"title":"DOM结构（Dom-structure）","slug":"dom结构-dom-structure","link":"#dom结构-dom-structure","children":[]},{"level":3,"title":"风格和主题（Styles-and-themes）","slug":"风格和主题-styles-and-themes","link":"#风格和主题-styles-and-themes","children":[]},{"level":3,"title":"命令（Commands）","slug":"命令-commands","link":"#命令-commands","children":[]}]},{"level":2,"title":"扩展CM（Extending-codemirror）","slug":"扩展cm-extending-codemirror","link":"#扩展cm-extending-codemirror","children":[{"level":3,"title":"状态字段（State-fields）","slug":"状态字段-state-fields","link":"#状态字段-state-fields","children":[]},{"level":3,"title":"影响视图（Affecting-the-view）","slug":"影响视图-affecting-the-view","link":"#影响视图-affecting-the-view","children":[]},{"level":3,"title":"装饰文档（Decorating-the-document）","slug":"装饰文档-decorating-the-document","link":"#装饰文档-decorating-the-document","children":[]},{"level":3,"title":"扩展架构（Extension-architecture）","slug":"扩展架构-extension-architecture","link":"#扩展架构-extension-architecture","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.7,"words":3209},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","excerpt":"\\n<p>https://codemirror.net/docs/guide/</p>\\n<h2>架构概述</h2>\\n<h3>模块化（Modularity）</h3>\\n<p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p>\\n<p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p>\\n<ul>\\n<li><a href=\\"https://codemirror.net/docs/ref/#state\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/state</code></a>，它定义了表示<a href=\\"https://codemirror.net/docs/ref/#state.EditorState\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">编辑器状态</a>和 对该状态的<a href=\\"https://codemirror.net/docs/ref/#state.Transaction\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">更改</a>的数据结构。</li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#view\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/view</code></a>，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的<a href=\\"https://codemirror.net/docs/ref/#view.EditorView\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">显示组件。</a></li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#commands\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/commands</code></a>，为它们定义了很多编辑命令和一些<a href=\\"https://codemirror.net/docs/ref/#commands.defaultKeymap\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">键绑定</a>。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","value":{"title":"02. CodeMirror 官网引导","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{hn as comp,yn as data};
