import{_ as l,e as s,g as a,o as i}from"./app-EuS-Ookm.js";const n={};function t(o,e){return i(),s("div",null,e[0]||(e[0]=[a('<h1 id="handless" tabindex="-1"><a class="header-anchor" href="#handless"><span>Handless</span></a></h1><p>Headless这个术语很常见：像 Headless CMS、Headless Backend、无头浏览器、爬虫的无头模式</p><p>take from deepseek</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>“无头”（Headless）是技术领域的一个术语。</p><ul><li><strong>核心含义</strong>是：“<em>剥离前端界面或用户交互层</em>，专注于核心功能或后端能力，并<em>通过接口（API）对外</em>提供服务”。</li><li>这种设计模式强调 <strong>解耦</strong> 和 <strong>灵活性</strong>，使系统能够适应多种场景。</li></ul><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><p>以下是不同领域中“无头”概念的具体表现：</p><h3 id="无头内容管理系统-headless-cms" tabindex="-1"><a class="header-anchor" href="#无头内容管理系统-headless-cms"><span>无头内容管理系统（Headless CMS）</span></a></h3><p>内容管理系统 (CMS, Content Management System)</p><ul><li>传统CMS <ul><li>通常包含内容管理后台 + 前端页面渲染（如主题模板），前后端耦合。</li><li>举例：如WordPress</li></ul></li><li>Headless CMS <ul><li>只保留内容管理后台，通过REST/GraphQL API提供内容数据，不负责前端渲染。<br> 开发者可自由选择前端技术（React、Vue等），将内容分发到网站、APP、IoT设备等任意平台。</li><li>举例：如Strapi、Contentful</li></ul></li><li>优势 <ul><li>内容与展示分离，支持多终端统一管理，技术栈灵活。</li></ul></li></ul><h3 id="无头后端-headless-backend" tabindex="-1"><a class="header-anchor" href="#无头后端-headless-backend"><span>无头后端（Headless Backend）</span></a></h3><ul><li>传统后端 <ul><li>通常与前端逻辑耦合（如服务端渲染），接口设计可能受前端需求限制。</li></ul></li><li>Headless Backend <ul><li>专注于提供纯粹的API服务（如微服务架构），<strong>不预设前端逻辑</strong>。</li><li>举例：一个电商后端仅提供 “商品查询” “订单创建” 等API，前端可自由组合调用</li></ul></li><li>优势 <ul><li>后端独立演进，适配多种客户端（Web、移动端、第三方系统）</li></ul></li></ul><h3 id="无头浏览器-headless-browser" tabindex="-1"><a class="header-anchor" href="#无头浏览器-headless-browser"><span>无头浏览器（Headless Browser）</span></a></h3><ul><li>传统浏览器 <ul><li>需要图形界面（GUI）进行用户交互。</li><li>举例：如Chrome、Firefox</li></ul></li><li>无头浏览器 <ul><li>以命令行或程序化方式运行，无需GUI</li><li>常用于： <ul><li>自动化测试：快速执行页面操作、截图、性能检测。</li><li>网页爬虫：渲染JavaScript动态内容（传统爬虫无法处理）。</li><li>服务器端渲染（SSR）：预生成页面内容。</li></ul></li><li>举例：如Puppeteer、Playwright</li></ul></li><li>优势 <ul><li>节省资源（无GUI开销），适合批量化、自动化场景。</li></ul></li></ul><h3 id="爬虫的无头模式" tabindex="-1"><a class="header-anchor" href="#爬虫的无头模式"><span>爬虫的无头模式</span></a></h3><ul><li>普通爬虫 <ul><li>直接请求HTML页面，但无法执行JavaScript或处理动态内容。</li></ul></li><li>无头模式爬虫 <ul><li>结合无头浏览器，模拟真实用户行为（点击、滚动、表单提交），获取动态渲染后的完整页面数据。</li><li>举例：典型工具：Selenium（配合Headless Chrome）、Scrapy + Splash。</li></ul></li><li>挑战 <ul><li>资源消耗较高，可能被反爬机制识别。(?不是反过来吗)</li></ul></li></ul><h3 id="其他无头系统" tabindex="-1"><a class="header-anchor" href="#其他无头系统"><span>其他无头系统</span></a></h3><ul><li>Headless Commerce：电商后端仅提供商品、订单等API，前端可自由定制（如Shopify的无头方案）。</li><li>Headless Linux服务器：不安装图形界面，仅通过命令行管理，资源占用更低。</li></ul><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><p>核心价值</p><ul><li>解耦：前后端独立开发、部署、扩展。</li><li>灵活性：适配多终端、多场景，避免重复开发。</li><li>效率：专注于核心功能，减少冗余代码和资源消耗。</li></ul><p>场景</p><ul><li>需要<strong>跨平台</strong>内容分发（如CMS）。</li><li>追求<strong>技术栈自由</strong>（如前后端分离架构）。</li><li><strong>自动化</strong>任务（如测试、爬虫）。</li><li><strong>资源受限</strong>环境（如服务器无GUI）。</li></ul><p>通过“无头”设计，系统更像一个“可插拔”的服务模块，而非捆绑特定前端的整体，更符合现代分布式和模块化开发的趋势。</p>',25)]))}const r=l(n,[["render",t],["__file","Handless.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/05.%20Utils/BaaS/Handless.html","title":"Handless","lang":"zh-CN","frontmatter":{"description":"Handless Headless这个术语很常见：像 Headless CMS、Headless Backend、无头浏览器、爬虫的无头模式 take from deepseek 介绍 “无头”（Headless）是技术领域的一个术语。 核心含义是：“剥离前端界面或用户交互层，专注于核心功能或后端能力，并通过接口（API）对外提供服务”。 这种设计模式...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/05.%20Utils/BaaS/Handless.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Handless"}],["meta",{"property":"og:description","content":"Handless Headless这个术语很常见：像 Headless CMS、Headless Backend、无头浏览器、爬虫的无头模式 take from deepseek 介绍 “无头”（Headless）是技术领域的一个术语。 核心含义是：“剥离前端界面或用户交互层，专注于核心功能或后端能力，并通过接口（API）对外提供服务”。 这种设计模式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Handless\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.82,"words":845},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md","excerpt":"\\n<p>Headless这个术语很常见：像 Headless CMS、Headless Backend、无头浏览器、爬虫的无头模式</p>\\n<p>take from deepseek</p>\\n<h2>介绍</h2>\\n<p>“无头”（Headless）是技术领域的一个术语。</p>\\n<ul>\\n<li><strong>核心含义</strong>是：“<em>剥离前端界面或用户交互层</em>，专注于核心功能或后端能力，并<em>通过接口（API）对外</em>提供服务”。</li>\\n<li>这种设计模式强调 <strong>解耦</strong> 和 <strong>灵活性</strong>，使系统能够适应多种场景。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"浏览器前端的通用后端","link":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.html"}],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md","value":{"title":"Handless","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md","outlink":[],"backlink":["MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md"]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","value":{"title":"浏览器前端的通用后端","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md"}]}}}');export{r as comp,p as data};
