import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-yixEWCFr.js";const t={},p=e(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模块系统" tabindex="-1"><a class="header-anchor" href="#模块系统"><span>模块系统</span></a></h1><h2 id="为什么要模块化" tabindex="-1"><a class="header-anchor" href="#为什么要模块化"><span>为什么要模块化</span></a></h2><h3 id="模块化-vs-旧模块化" tabindex="-1"><a class="header-anchor" href="#模块化-vs-旧模块化"><span>模块化 vs 旧模块化</span></a></h3><p>为什么要模块化？</p><p><code>&lt;script&gt;</code>标签引入js脚本：全局变量同名冲突问题、引用脚本顺序问题</p><p>解决方案</p><ul><li>解决方案v1：匿名函数闭包，但变量变得不可引用，代码不可复用</li><li>解决方案v2：匿名函数闭合的同时，返回一个值给对象实例</li><li>解决方案v3：模块化规范ES6 √</li></ul><p>常用的模块化规范</p><ul><li>CommonJS</li><li>AMD</li><li>CMD</li><li>ES6的Modules（不再需要闭包，文件就是模块）</li></ul><h3 id="模块化进化史" tabindex="-1"><a class="header-anchor" href="#模块化进化史"><span>模块化进化史</span></a></h3><blockquote><h4 id="_1-最早全写在js" tabindex="-1"><a class="header-anchor" href="#_1-最早全写在js"><span>(1) 最早全写在js</span></a></h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>

<span class="token comment">// 原始写法</span>
<span class="token comment">// 缺点：耦合度高，不方便管理。Global被污染，容易命名冲突</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="_2-对象封装【namespace模型】" tabindex="-1"><a class="header-anchor" href="#_2-对象封装【namespace模型】"><span>(2) 对象封装【Namespace模型】</span></a></h4></blockquote><p>（划分私有命名空间）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myapp <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">foo</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token function-variable function">bar</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
myapp<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解决：把变量的范围局限在对象里面</span>
<span class="token comment">// 优点：减少Global变量数目</span>
<span class="token comment">// 缺点：对象里的属性和方法很容易被修改掉，不安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="_3-匿名闭包、立即执行函数【iiff模型】" tabindex="-1"><a class="header-anchor" href="#_3-匿名闭包、立即执行函数【iiff模型】"><span>(3) 匿名闭包、立即执行函数【IIFF模型】</span></a></h4></blockquote><p>（划分私有命名空间）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">222</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> bar <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解决：匿名函数闭包（将add的私有化到calculator中）</span>
<span class="token comment">// 优点：可以保护好里面的属性和方法</span>
<span class="token comment">// 缺点：不可调用内部函数、变量，无复用性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="_4-改进-使用模块作为出口" tabindex="-1"><a class="header-anchor" href="#_4-改进-使用模块作为出口"><span>(4) 改进：使用模块作为出口</span></a></h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// ——————File_A：</span>
<span class="token keyword">var</span> modeleA<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">222</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> bar <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ——————File_B：</span>
modeleA<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 222</span>
modeleA<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>  <span class="token comment">// underfined</span>

<span class="token comment">// 模块化基本封装，模块化雏形</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块化规范" tabindex="-1"><a class="header-anchor" href="#模块化规范"><span>模块化规范</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>服务器端规范
    【CommonJS】√   Nodejs、webpack     遵循CommonJS规范

浏览器端规范
    【AMD】         RequireJS   遵循AMD规范
    【CMD】         SeaJS       遵循CMD规范

ALL
    【ES6 module】√
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>模块化核心：导入和导出</p></li><li><p>模块功能</p><ul><li>暴露部分接口给外部</li><li>划分作用域</li></ul></li><li><p>具体实现</p><ul><li><p>CommonJS</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>前端三大框架</p><ul><li>Angular <ul><li>09年诞生</li><li>让开发单页更方便</li><li>主要为前端带来 MVVM 开发模式，即数据驱动视图，不操作 DOM</li></ul></li><li>React <ul><li>Facebook开发</li><li>组件化</li></ul></li><li>Vue <ul><li>Vue作者：尤雨溪（华裔），早期由个人开发</li></ul></li></ul></li><li><p>js模块化</p><ul><li><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>js本身不支持模块化
require
exports
Node.js
node中对js进行了特殊的模块化支持 CommonJS

php可以直接&#39;require&#39;, &#39;include&#39;
可以使用API来进行文件与文件之间的依赖加载

浏览器也可以像node模块一样编程
&#39;&lt;script&gt;&#39;
require.js  AMD
sea.js      CMD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="使用-commonjs" tabindex="-1"><a class="header-anchor" href="#使用-commonjs"><span>使用 - CommonJS</span></a></h2><p>环境</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CommonJS要在webpack里写（webpack依赖于node）
不然没有底层的东西去解析这个结构
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>导出</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// multiple:</span>
    module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>  <span class="token comment">// exports.foo = &#39;foo&#39;</span>
    module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token string">&#39;app&#39;</span>  <span class="token comment">// exports.app = &#39;app&#39;</span>
    <span class="token comment">// 或</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
        foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// foo: foo,  // foo,</span>
        app <span class="token operator">=</span> <span class="token string">&#39;app&#39;</span>  <span class="token comment">// app: app   // app</span>
    <span class="token punctuation">}</span>

<span class="token comment">// Single:</span>
    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> aaa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./aaa.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> flag <span class="token operator">=</span> aaa<span class="token punctuation">.</span>flag
<span class="token keyword">var</span> sum <span class="token operator">=</span> aaa<span class="token punctuation">.</span>sum
<span class="token comment">// 或</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span> sum<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./aaa.js&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-es6" tabindex="-1"><a class="header-anchor" href="#使用-es6"><span>使用 - ES6</span></a></h2><p>载入（html里载入）</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aaa.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
// html里导入，加module类型就不会有命名冲突

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// ES6的类</span>
<span class="token comment">// 或</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>
    flag<span class="token punctuation">,</span>  <span class="token comment">// flag: flag,</span>
    sum    <span class="token comment">// sum: sum</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token comment">// 只能有一个，无须加名字</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入（js里引用）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>flag<span class="token punctuation">,</span>sum<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./aaa.js&#39;</span>
<span class="token comment">// 或</span>
<span class="token keyword">import</span> flag <span class="token keyword">from</span> <span class="token string">&#39;./aaa.js&#39;</span>
<span class="token comment">// 或（全部导入） </span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> aaa <span class="token keyword">from</span> <span class="token string">&#39;./aaa.js&#39;</span>   <span class="token comment">// 用aaa.flag调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="模块与导包" tabindex="-1"><a class="header-anchor" href="#模块与导包"><span>模块与导包</span></a></h3><p>（原生不支持模块化，Nodejs(ES6)提供支持）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;express&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,43),l=[p];function i(o,c){return s(),a("div",null,l)}const d=n(t,[["render",i],["__file","01. 模块系统.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/JavaScript/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"description":"JavaScript 目录 模块系统 为什么要模块化 模块化 vs 旧模块化 为什么要模块化？ <script>标签引入js脚本：全局变量同名冲突问题、引用脚本顺序问题 解决方案 解决方案v1：匿名函数闭包，但变量变得不可引用，代码不可复用 解决方案v2：匿名函数闭合的同时，返回一个值给对象实例 解决方案v3：模块化规范ES6 √ 常用的模块化规范 C...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/JavaScript/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JavaScript 目录 模块系统 为什么要模块化 模块化 vs 旧模块化 为什么要模块化？ <script>标签引入js脚本：全局变量同名冲突问题、引用脚本顺序问题 解决方案 解决方案v1：匿名函数闭包，但变量变得不可引用，代码不可复用 解决方案v2：匿名函数闭合的同时，返回一个值给对象实例 解决方案v3：模块化规范ES6 √ 常用的模块化规范 C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"模块系统","slug":"模块系统","link":"#模块系统","children":[{"level":2,"title":"为什么要模块化","slug":"为什么要模块化","link":"#为什么要模块化","children":[{"level":3,"title":"模块化 vs 旧模块化","slug":"模块化-vs-旧模块化","link":"#模块化-vs-旧模块化","children":[]},{"level":3,"title":"模块化进化史","slug":"模块化进化史","link":"#模块化进化史","children":[]}]},{"level":2,"title":"模块化规范","slug":"模块化规范","link":"#模块化规范","children":[]},{"level":2,"title":"使用 - CommonJS","slug":"使用-commonjs","link":"#使用-commonjs","children":[]},{"level":2,"title":"使用 - ES6","slug":"使用-es6","link":"#使用-es6","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"模块与导包","slug":"模块与导包","link":"#模块与导包","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/JavaScript/07. 模块库/01. 模块系统.md","autoDesc":true}');export{d as comp,v as data};
