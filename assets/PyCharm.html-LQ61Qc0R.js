import{_ as e,c as i,e as a,o as l}from"./app-BDGujT_T.js";const s="/assets/setPyCharmRun-rLl-0BZ5.png",n="/assets/image-20220423015544407-DhO0H5Hk.png",d="/assets/image-20220425064348080-vU4wCvb1.png",r="/assets/image-20220426050840868-DyZao61X.png",h="/assets/image-20220426051023579-BXkEzqqD.png",o="/assets/image-20220521103829193-BMavIg96.png",p={};function c(k,t){return l(),i("div",null,t[0]||(t[0]=[a(`<h1 id="pycharm" tabindex="-1"><a class="header-anchor" href="#pycharm"><span>PyCharm</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="pycharm-1" tabindex="-1"><a class="header-anchor" href="#pycharm-1"><span>PyCharm</span></a></h1><h2 id="运行与调试" tabindex="-1"><a class="header-anchor" href="#运行与调试"><span>运行与调试</span></a></h2><h3 id="进入venv的方法" tabindex="-1"><a class="header-anchor" href="#进入venv的方法"><span>进入venv的方法</span></a></h3><p>两行代码：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> venv/scripts</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">activate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以在终端中：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xxx.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该方法不能进入调试，最好使用 设置run时使用虚拟环境 的方法</p><h3 id="设置run时使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#设置run时使用虚拟环境"><span>设置run时使用虚拟环境</span></a></h3><p>其实就是设置run时，自动使用venv/Scripts中的python.exe</p><p><img src="`+s+'" alt="setPyCharmRun" loading="lazy"></p><p>或者，将在setting &gt; Project xxx 里改</p><p><img src="'+n+'" alt="image-20220423015544407" loading="lazy"></p><h4 id="四种解释器环境" tabindex="-1"><a class="header-anchor" href="#四种解释器环境"><span>四种解释器环境</span></a></h4><p>Add Python Interpreter 有四个选项</p><table><thead><tr><th>选项</th><th>翻译</th><th>大小</th><th>作用</th></tr></thead><tbody><tr><td>Virtualenv Environment</td><td>虚拟环境</td><td>虚拟环境<br>6MB左右</td><td>默认路径：<code>工程路径\\venv</code>，<br>基于解释器路径：<code>任一python.exe路径</code></td></tr><tr><td>Conda Environment</td><td>Conda环境</td><td>虚拟环境<br>100MB左右</td><td>默认路径：<code>Anaconda安装路径\\envs\\项目名</code>，<br>exe路径：<code>Anaconda安装路径\\Scripts\\conda.exe</code></td></tr><tr><td>System Interpreter</td><td>系统解释器</td><td>系统环境</td><td>默认路径：<code>MicrosoftVS安装路径\\SDK_and_Tools\\……\\python.exe</code></td></tr><tr><td>Pipenv Enviroment</td><td>Pip虚拟环境</td><td>虚拟环境</td><td>基于解释器路径：<code>任一python.exe路径</code>，<br>exe路径：<code>可能是Pipenv.exe吧？没用过不清楚</code></td></tr></tbody></table><p>补充</p><blockquote><p>其中，<code>任一python.exe路径</code>，可以是</p><ul><li>Anaconda安装路径\\python.exe</li><li>MicrosoftVS安装路径\\SDK_and_Tools\\Python37_64\\python.exe</li><li>C:\\Program Files\\python\\python.exe</li></ul></blockquote><p>选择</p><blockquote><p>虽然没有都用过，但是选项1将虚拟环境放在工程内部，分享起来是比较方便的。而且默认没东西，比较快，（选项二有点慢，而且会混杂一些东西）</p></blockquote><h2 id="界面窗口" tabindex="-1"><a class="header-anchor" href="#界面窗口"><span>界面窗口</span></a></h2><h3 id="编辑框窗口" tabindex="-1"><a class="header-anchor" href="#编辑框窗口"><span>编辑框窗口</span></a></h3><p>Override的方法在左边会有一个提示</p><p><img src="'+d+'" alt="image-20220425064348080" loading="lazy"></p><h3 id="其他窗口" tabindex="-1"><a class="header-anchor" href="#其他窗口"><span>其他窗口</span></a></h3><p>左下角悬浮后能打开一些窗口，像常用的比如：</p><blockquote><table><thead><tr><th>Project</th><th>项目结构</th></tr></thead><tbody><tr><td>Structure</td><td>当前文件的结构（类 - 对象/成员）</td></tr><tr><td>Run</td><td>调试窗口</td></tr><tr><td>TODO</td><td>找到所有有TODO注释的代码</td></tr><tr><td>Terminal</td><td>终端，略</td></tr><tr><td>Python Console</td><td>Python终端，略</td></tr><tr><td>Event Log</td><td></td></tr><tr><td>Favorites</td><td></td></tr></tbody></table></blockquote><p><img src="'+r+'" alt="image-20220426050840868" loading="lazy"></p><p>PyCharm窗口上面有四个选项：全部展开、全部折叠、设置、隐藏</p><ul><li>设置：可以将窗口移动到其他区域，用受拖拽不行</li><li>隐藏，隐藏后可以在左下角中重新召唤出来，也可以点旁边的那个旋转了90度的小标签</li></ul><p><img src="'+h+'" alt="image-20220426051023579" loading="lazy"></p><h4 id="structure-结构窗口" tabindex="-1"><a class="header-anchor" href="#structure-结构窗口"><span>Structure 结构窗口</span></a></h4><p>其中工具栏有五个控件，依次是：<br> （个人习惯只选择）</p><ul><li>按定义顺序排序 or 按字母排序 (选中)</li><li>是否显示继承的内容（继承的部分是灰色）</li><li>是否要显示变量成员（否则就进显示方法成员）</li><li>在导航中选中后，在代码窗口自动定位</li><li>在代码窗口选中后，在导航中自动定位</li></ul><p>小图标含义</p><ul><li><p>图标主体</p><table><thead><tr><th>标志</th><th>英文</th><th>翻译</th><th>含义</th></tr></thead><tbody><tr><td>黄色 V</td><td>Variable</td><td>变量</td><td>变量</td></tr><tr><td>蓝色 C</td><td>Class</td><td>类</td><td>类</td></tr><tr><td>粉色 F</td><td>Function</td><td>函数</td><td>函数</td></tr><tr><td>红色 m</td><td>Method</td><td>方法</td><td>类方法</td></tr><tr><td>紫色 p</td><td>Property</td><td>属性</td><td>类方法 (@property)</td></tr><tr><td>黄色 f</td><td>Field</td><td>字段</td><td>类变量</td></tr><tr><td>黄色 p</td><td>Parameter</td><td></td><td></td></tr></tbody></table></li><li><p>左上角</p><ul><li>黄色锁：private，私有成员</li><li>灰色钥匙：protected，保护成员（单下划线保护，双下划线私有，但感觉单下划线居多）</li><li>红色锁：伪私有</li><li>绿色解锁：public（但一般不显示）</li><li>蓝色圆：特殊函数，例如<code>__dict__()</code></li></ul></li><li><p>右上角</p><ul><li>右箭头。@property会造成</li><li>左箭头。@xxx.setter会造成</li></ul></li></ul><p><img src="'+o+'" alt="image-20220521103829193" loading="lazy"></p><h4 id="todo-面板窗口" tabindex="-1"><a class="header-anchor" href="#todo-面板窗口"><span>TODO 面板窗口</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># @</span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">TODO</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">: Fix ME!!!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>和普通注释的样式和有所不同，会<mark>金色高亮</mark></p><p>PyCharm中，左下角TODO或双Shift搜索TODO，可以弹出TODO窗口</p><p>TODO窗口可以查看所有有TODO注释的代码</p><h2 id="keyshot" tabindex="-1"><a class="header-anchor" href="#keyshot"><span>KeyShot</span></a></h2><p>运行快捷键：Shift+F10</p><h2 id="skill" tabindex="-1"><a class="header-anchor" href="#skill"><span>Skill</span></a></h2><p>按住Ctrl再指向变量等，会出现提示（这个变量的所属类等等）</p><p>按住Ctrl再单击类，可跳转过去看类方法</p>',49)]))}const m=e(p,[["render",c],["__file","PyCharm.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/IDE%20Tools/IDESoft/PyCharm.html","title":"PyCharm","lang":"zh-CN","frontmatter":{"description":"PyCharm 目录 PyCharm 运行与调试 进入venv的方法 两行代码： 然后就可以在终端中： 该方法不能进入调试，最好使用 设置run时使用虚拟环境 的方法 设置run时使用虚拟环境 其实就是设置run时，自动使用venv/Scripts中的python.exe setPyCharmRun 或者，将在setting > Project xxx...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/IDE%20Tools/IDESoft/PyCharm.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"PyCharm"}],["meta",{"property":"og:description","content":"PyCharm 目录 PyCharm 运行与调试 进入venv的方法 两行代码： 然后就可以在终端中： 该方法不能进入调试，最好使用 设置run时使用虚拟环境 的方法 设置run时使用虚拟环境 其实就是设置run时，自动使用venv/Scripts中的python.exe setPyCharmRun 或者，将在setting > Project xxx..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PyCharm\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"PyCharm","slug":"pycharm","link":"#pycharm","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"PyCharm","slug":"pycharm-1","link":"#pycharm-1","children":[{"level":2,"title":"运行与调试","slug":"运行与调试","link":"#运行与调试","children":[{"level":3,"title":"进入venv的方法","slug":"进入venv的方法","link":"#进入venv的方法","children":[]},{"level":3,"title":"设置run时使用虚拟环境","slug":"设置run时使用虚拟环境","link":"#设置run时使用虚拟环境","children":[{"level":4,"title":"四种解释器环境","slug":"四种解释器环境","link":"#四种解释器环境","children":[]}]}]},{"level":2,"title":"界面窗口","slug":"界面窗口","link":"#界面窗口","children":[{"level":3,"title":"编辑框窗口","slug":"编辑框窗口","link":"#编辑框窗口","children":[]},{"level":3,"title":"其他窗口","slug":"其他窗口","link":"#其他窗口","children":[{"level":4,"title":"Structure 结构窗口","slug":"structure-结构窗口","link":"#structure-结构窗口","children":[]},{"level":4,"title":"TODO 面板窗口","slug":"todo-面板窗口","link":"#todo-面板窗口","children":[]}]}]},{"level":2,"title":"KeyShot","slug":"keyshot","link":"#keyshot","children":[]},{"level":2,"title":"Skill","slug":"skill","link":"#skill","children":[]}]}],"git":{},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/IDE Tools/IDESoft/PyCharm.md","excerpt":"\\n<h1>目录</h1>\\n<h1>PyCharm</h1>\\n<h2>运行与调试</h2>\\n<h3>进入venv的方法</h3>\\n<p>两行代码：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">cd</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> venv/scripts</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">activate</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/IDE Tools/IDESoft/PyCharm.md","value":{"title":"PyCharm","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/IDE Tools/IDESoft/PyCharm.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{m as comp,g as data};
