import{_ as a,c as s,e,o as t}from"./app-DdIoB8bt.js";const p={};function l(i,n){return t(),s("div",null,n[0]||(n[0]=[e(`<h1 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h1><h2 id="全局覆盖" tabindex="-1"><a class="header-anchor" href="#全局覆盖"><span>全局覆盖</span></a></h2><p>defoverrides 可选配置项允许您创建全局密钥覆盖，无论使用什么操作来生成这些密钥。它接受成对的列表：</p><ol><li>被替换的输入键列表</li><li>用于替换输入键的输出键列表</li></ol><p>输入和输出列表都接受 0 个或多个修饰键（例如 lctl、rsft）和 1 个非修饰键（例如 1、bspc）。 配置文件中只允许零个或一个解覆盖。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>笔记</td><td>根据您的用例，您可能需要调整 defcfg 中的 override-release-on-activation 。</td></tr></tbody></table><p>例子：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token comment">;; Swap numbers and their symbols with respect to shift</span>
<span class="token punctuation">(</span><span class="token car">defoverrides</span>
  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">lsft</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">lsft</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">;; repeat for all remaining numbers</span>

  <span class="token punctuation">(</span><span class="token car">lsft</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">lsft</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token comment">;; repeat for all remaining numbers</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="包含其他文件" tabindex="-1"><a class="header-anchor" href="#包含其他文件"><span>包含其他文件</span></a></h2><p>include 可选配置项允许您将其他文件包含到配置中。此配置接受单个字符串，即文件路径。文件路径可以是绝对路径或相对路径。该路径将相对于定义的配置文件。</p><p>在撰写本文时，包含只能放置在顶层。包含的文件也不能包含包含本身。</p><p>不存在的文件将被忽略。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token comment">;; This is in the file initially read by kanata, e.g. kanata.kbd</span>
<span class="token punctuation">(</span><span class="token car">include</span> other-file.kbd<span class="token punctuation">)</span>

<span class="token comment">;; This is in the other file</span>
<span class="token punctuation">(</span><span class="token car">defalias</span>
  included-alias XX
  <span class="token comment">;; ...</span>
<span class="token punctuation">)</span>

<span class="token comment">;; This is in the other file</span>
<span class="token punctuation">(</span><span class="token car">deflayer</span> included-layer
  <span class="token comment">;; ...</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特定于平台的配置" tabindex="-1"><a class="header-anchor" href="#特定于平台的配置"><span>特定于平台的配置</span></a></h2><p>如果您将任何顶级配置项放入以平台开头的列表中，它将成为特定于平台的配置，仅对指定平台有效。</p><p>句法：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">platform</span> <span class="token punctuation">(</span><span class="token car">applicable-platforms</span><span class="token punctuation">)</span> ...<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>适用平台的有效值为：</p><ul><li><code>win</code></li><li><code>winiov2</code></li><li><code>wintercept</code></li><li><code>linux</code></li><li><code>macos</code></li></ul><p>例子：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">platform</span> <span class="token punctuation">(</span><span class="token car">macos</span><span class="token punctuation">)</span>
  <span class="token comment">;; Only on macos, use command arrows to jump/delete words</span>
  <span class="token comment">;; because command is used for so many other things</span>
  <span class="token comment">;; and it&#39;s weird that these cases use alt.</span>
  <span class="token punctuation">(</span><span class="token car">defoverrides</span>
    <span class="token punctuation">(</span><span class="token car">lmet</span> bspc<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">lalt</span> bspc<span class="token punctuation">)</span>
    <span class="token punctuation">(</span><span class="token car">lmet</span> left<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">lalt</span> left<span class="token punctuation">)</span>
    <span class="token punctuation">(</span><span class="token car">lmet</span> right<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">lalt</span> right<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token punctuation">(</span><span class="token car">platform</span> <span class="token punctuation">(</span><span class="token car">win</span> winiov2 wintercept<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">defalias</span> run-my-script <span class="token punctuation">(</span><span class="token car">cmd</span> #| something involving powershell |#<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token punctuation">(</span><span class="token car">platform</span> <span class="token punctuation">(</span><span class="token car">macos</span> linux<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">defalias</span> run-my-script <span class="token punctuation">(</span><span class="token car">cmd</span> #| something involving bash |#<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境条件配置" tabindex="-1"><a class="header-anchor" href="#环境条件配置"><span>环境条件配置</span></a></h2><p>句法：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">environment</span> <span class="token punctuation">(</span><span class="token car">env-var-name</span> env-var-value<span class="token punctuation">)</span> ...<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>env-var-name 和 env-var-value 项可以是任意字符串。该名称是读取的环境变量，用于确定是否使用配置。如果环境变量的值（仅在 kanata 启动时设置）与 env-var-value 匹配，则使用该配置；否则它会被忽略。如果环境变量是空字符串并且该变量完全未设置/丢失，则 env-var-value 的空字符串（“”）将使用该配置。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">environment</span> <span class="token punctuation">(</span><span class="token car">LAPTOP</span> lp1<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">defalias</span> met @lp1met<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token punctuation">(</span><span class="token car">environment</span> <span class="token punctuation">(</span><span class="token car">LAPTOP</span> lp2<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">defalias</span> met @lp2met<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前终端进程中设置环境变量：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code># powershell
$env<span class="token lisp-property property">:VAR_NAME</span> = <span class="token string">&quot;var_value&quot;</span>

# bash
VAR_NAME=var_value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入和弦-组合-v2" tabindex="-1"><a class="header-anchor" href="#输入和弦-组合-v2"><span>输入和弦/组合 (v2)</span></a></h2><p>您可以定义单个 defchordsv2 配置项。这使您能够定义全局输入和弦行为。人们可能还会发现此功能在其他项目中被称为“组合”的另一个名称。</p><p>输入和弦使您能够快速连续按下两个或更多键来激活与通常与这些键关联的不同操作。激活和弦时，按下的顺序并不重要；重要的是按下的顺序。当按下属于和弦的所有琴键时，无论按下顺序如何，都会激活该动作。</p><p>defchordsv2 功能的配置如下所示：</p><p>语法示例</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">defchordsv2</span>
  <span class="token punctuation">(</span><span class="token car">participating-keys1</span><span class="token punctuation">)</span> action1 timeout1 release-behaviour1 <span class="token punctuation">(</span><span class="token car">disabled-layers1</span><span class="token punctuation">)</span>
    ...
  <span class="token punctuation">(</span><span class="token car">participating-keysN</span><span class="token punctuation">)</span> actionN timeoutN release-behaviourN <span class="token punctuation">(</span><span class="token car">disabled-layersN</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置由 5 元组组成：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>$参与键</code></td><td>这些是您将在 defsrc 中使用的键名称。每个和弦必须至少定义两个调。每个和弦列表必须是唯一的。</td></tr><tr><td><code>$行动</code></td><td>这些是您在 deflayer 或 defalias 中配置的操作。如果在超时时间内所有参与键都被激活，则该操作将激活。</td></tr><tr><td><code>$超时</code></td><td>如果按下所有参与键，则激活和弦动作的时间（单位：毫秒）；否则按键将由活动层处理。当第一个参与者被按下时，时间开始。</td></tr><tr><td><code>$release-behavior</code></td><td>这必须是首次发布或全部发布； first-release 表示当第一个参与者被释放时，该和弦动作才会被释放，而 all-released 表示只有当所有参与者被释放时，该和弦动作才会被释放。</td></tr><tr><td><code>$disabled-layers</code></td><td>禁用此和弦的图层名称列表。</td></tr></tbody></table><p>输入和弦有一个相关的 defcfg 项：chords-v2-min-idle。当发生任何非和弦激活时，超时从和弦-v2-min-idle 配置的持续时间开始（单位：毫秒）。在此超时到期之前，所有输入将立即跳过和弦处理并由活动图层处理。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>重要的</td><td>选择输入和弦 v2 时，您必须启用并发点击保持。当被和弦激活时，这是为了获得更灵敏的点击保持体验而强制执行的。</td></tr></tbody></table><p>例子：</p><div class="language-lisp line-numbers-mode" data-ext="lisp" data-title="lisp"><pre class="language-lisp"><code><span class="token punctuation">(</span><span class="token car">defcfg</span> concurrent-tap-hold yes<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token car">defchordsv2</span>
  <span class="token punctuation">(</span><span class="token car">a</span> s<span class="token punctuation">)</span>    c                <span class="token number">200</span> all-released  <span class="token punctuation">(</span><span class="token car">non-chord-layer</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">a</span> s d<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">macro</span> h e l l o<span class="token punctuation">)</span> <span class="token number">250</span> first-release <span class="token punctuation">(</span><span class="token car">non-chord-layer</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token car">s</span> d f<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token car">macro</span> b y e<span class="token punctuation">)</span>     <span class="token number">400</span> first-release <span class="token punctuation">(</span><span class="token car">non-chord-layer</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>笔记</td><td>另请参阅 v1 和弦，它们的配置不同并且可以按层定义。</td></tr></tbody></table>`,43)]))}const o=a(p,[["render",l],["__file","04. 进阶.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Kanata/docs/config/04.%20%E8%BF%9B%E9%98%B6.html","title":"进阶","lang":"zh-CN","frontmatter":{"description":"进阶 全局覆盖 defoverrides 可选配置项允许您创建全局密钥覆盖，无论使用什么操作来生成这些密钥。它接受成对的列表： 被替换的输入键列表 用于替换输入键的输出键列表 输入和输出列表都接受 0 个或多个修饰键（例如 lctl、rsft）和 1 个非修饰键（例如 1、bspc）。 配置文件中只允许零个或一个解覆盖。 例子： 包含其他文件 incl...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Kanata/docs/config/04.%20%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"进阶"}],["meta",{"property":"og:description","content":"进阶 全局覆盖 defoverrides 可选配置项允许您创建全局密钥覆盖，无论使用什么操作来生成这些密钥。它接受成对的列表： 被替换的输入键列表 用于替换输入键的输出键列表 输入和输出列表都接受 0 个或多个修饰键（例如 lctl、rsft）和 1 个非修饰键（例如 1、bspc）。 配置文件中只允许零个或一个解覆盖。 例子： 包含其他文件 incl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"进阶","slug":"进阶","link":"#进阶","children":[{"level":2,"title":"全局覆盖","slug":"全局覆盖","link":"#全局覆盖","children":[]},{"level":2,"title":"包含其他文件","slug":"包含其他文件","link":"#包含其他文件","children":[]},{"level":2,"title":"特定于平台的配置","slug":"特定于平台的配置","link":"#特定于平台的配置","children":[]},{"level":2,"title":"环境条件配置","slug":"环境条件配置","link":"#环境条件配置","children":[]},{"level":2,"title":"输入和弦/组合 (v2)","slug":"输入和弦-组合-v2","link":"#输入和弦-组合-v2","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/04. 进阶.md","excerpt":"\\n<h2>全局覆盖</h2>\\n<p>defoverrides 可选配置项允许您创建全局密钥覆盖，无论使用什么操作来生成这些密钥。它接受成对的列表：</p>\\n<ol>\\n<li>被替换的输入键列表</li>\\n<li>用于替换输入键的输出键列表</li>\\n</ol>\\n<p>输入和输出列表都接受 0 个或多个修饰键（例如 lctl、rsft）和 1 个非修饰键（例如 1、bspc）。\\n配置文件中只允许零个或一个解覆盖。</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>笔记</td>\\n<td>根据您的用例，您可能需要调整 defcfg 中的 override-release-on-activation 。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/04. 进阶.md","value":{"title":"04. 进阶","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/04. 进阶.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,d as data};
