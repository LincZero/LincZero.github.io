import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-CNCbztHq.js";const t={},l=e(`<h1 id="数据-算法-泛操作" tabindex="-1"><a class="header-anchor" href="#数据-算法-泛操作"><span>数据+算法 泛操作</span></a></h1><h2 id="数据书写类" tabindex="-1"><a class="header-anchor" href="#数据书写类"><span>数据书写类</span></a></h2><h3 id="声明、定义、赋值、使用" tabindex="-1"><a class="header-anchor" href="#声明、定义、赋值、使用"><span>声明、定义、赋值、使用</span></a></h3><h4 id="概念-相同" tabindex="-1"><a class="header-anchor" href="#概念-相同"><span>概念 (相同)</span></a></h4><p>包括 变量、函数、类 等的定义与声明，不过这里特指 变量</p><ul><li>声明 <ul><li>简明概念：告诉你有个东西存在</li><li>例如：&quot;数学中有个概念是乘法&quot; / &quot;有个浮点数派&quot;</li><li>底层区分：标识符分配名称和类型</li></ul></li><li>定义 <ul><li>简明概念：告诉你这个东西具体是什么</li><li>例如：&quot;乘法的定义是 n*m 等同m的n相加&quot; / &quot;这个派的值是3.1415&quot;</li><li>底层区分：分配内存并填充值 (对于普通变量) 或提供方法体 (对于函数)</li></ul></li><li>使用 <ul><li>简明概念：你去使用这个概念</li><li>例如：&quot;用乘法解决 a*b 的问题&quot; / &quot;使用派去计算圆的直径&quot;</li><li>底层区分：访问标识符对应的地址或内存值</li></ul></li><li>赋值 <ul><li>(变量有此概念，函数与此概念)</li><li>底层区分：修改标识符对应的内存值</li></ul></li><li>初始化 <ul><li>底层区分：为标识符分配内存的同时进行填充，体现为第一次定义 (若声明与定义概念合并，则体现为声明时即初始化值)</li></ul></li></ul><h4 id="自动初始化-声明默认值" tabindex="-1"><a class="header-anchor" href="#自动初始化-声明默认值"><span>自动初始化 (声明默认值)</span></a></h4><ul><li>有默认初始化 <ul><li>Java / Kotlin / Python / Swift / Go <ul><li>基本类型：默认初始化为零值</li><li>对象引用：默认初始化为空 (java为null，kotlin为null，python为None，swift为nil，go为nil)</li></ul></li><li>TypeScript/JavaScript： <ul><li>默认初始化为 undefined</li></ul></li></ul></li><li>强制初始化 <ul><li>Rust <ul><li>强制初始化，否则报错，不存在默认初始化的行为</li></ul></li></ul></li><li>无默认初始化 <ul><li>C/C++（<strong>这一类就只有C/C++了，hhhh。该设计可以追求极致的性能，但程序员容易写出bug</strong>） <ul><li>基本类型：无默认初始化，成员变量也是。使用这些变量是未定义行为，且无物理内存及虚拟内存对应的值是随机的</li><li>全局变量/静态变量：默认初始化为零值</li></ul></li></ul></li></ul><h4 id="合并-定义与声明-的概念-与有无默认值有关" tabindex="-1"><a class="header-anchor" href="#合并-定义与声明-的概念-与有无默认值有关"><span>合并 定义与声明 的概念 (与有无默认值有关)</span></a></h4><p>定义与声明是否分开：（这个概念与 “有无默认值” 是类似的，详见对应节/上一节。若有默认值或强制初始化，则一般合并这两个概念）</p><ul><li>分开</li><li>不分开 (因为有默认值)</li><li>不分开 (因为强制初始化)</li></ul><blockquote><p>Linc：</p><p>其中 Java 有些特殊，我之前在一本书上看过一句话：“Java中不区分定义与声明”，有一定的道理，Java 简化了这些概念。</p><p>在变量定义上如此，在函数定义上亦是如此：Java 中的方法不需要向前声明，其向前声明也并不属于声明和定义分开的概念，在Java中，所有的方法声明都隐式包含了向前声明的概念，因为你可以在方法实现之前调用该方法。</p><p>但是这里有个例外，完整的说法应该是：</p><p>Java 仅在接口 (interface) 中可仅声明，而在类中不可分离</p></blockquote><h3 id="数据存储大小" tabindex="-1"><a class="header-anchor" href="#数据存储大小"><span>数据存储大小</span></a></h3><ul><li><p>Java</p><ul><li>Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。例如整型的范围与运行Java代码的机器无关。 这就解决了软件从一个平台移植到另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题</li></ul></li><li><p>C/C++</p><ul><li>需要针对不同的处理器选择最为高效的整型，这样就有可能造成一个在32位处理器上运行很好的C程序在16位系统上运行却发生整数溢出 仅规定了int在short和long之间这种规定 当然，选择C++有直接定义<code>int8_t int16_t int32_t int64_t</code>的方法 (数字表示的是bit数)，而不使用short、long类型（个人建议） 也可以使用<code>size_t</code>这种在大小会变的类型（32/64位上分别是4/8字节）将性能优先贯彻到底</li></ul></li></ul><h3 id="类型属性" tabindex="-1"><a class="header-anchor" href="#类型属性"><span>类型属性</span></a></h3><p>&quot;类型属性&quot; 这个名字是我杜撰的，暂时先将他理解成一个用于方便说明的引入概念</p><ul><li>变量的类型：有不同的存储大小和拥有方法（可理解成所属不同的类）</li><li>类型的属性：修饰类型的访问权限 (作用域)、修改权限 (是否可变)、生命周期 (程序周期 作用域周期)、单一性/静态性</li></ul><h4 id="不可变变量-究竟是常量-or-变量" tabindex="-1"><a class="header-anchor" href="#不可变变量-究竟是常量-or-变量"><span>不可变变量，究竟是常量 or 变量？</span></a></h4><p>这里有一些概念：</p><ul><li><p>从可变性分类</p><ul><li><p>变量：声明后可修改</p><ul><li><p>变量/可变变量：定义(初始化)后可修改。</p><p>大多数语言正常定义的变量 (除了像rust这种默认变量不可变)，如cpp的普通变量、rust的let mut、kotlin的var</p></li></ul></li><li><p>常量：声明后不可修改，且声明时需要同时进行定义(初始化)</p><ul><li><p>编译期常量：编译期/声明前甚至能知道他的值。</p><p>如c的宏常量，如cpp的constexpr、rust的const、kotlin的const</p></li><li><p>运行期常量：可能声明时才能知道他的值，如用户输入存到const。</p><p>如cpp中声明和定义一起的const、rust的let、kotlin的val</p></li></ul></li></ul></li><li><p>从生命周期分类</p><ul><li><p>静态变/常量：全局生命周期，声明后不可再声明副本。可以是变量/常量</p><p>如cpp的static</p></li><li><p>非静态变/常量</p></li></ul></li></ul><p>特殊补充：</p><ul><li>不可变变量：= 常量（主要指运行期常量），其实就是两种说法，但建议不要用这个概念，这种说法容易造成混淆。 而有的资料会说到这个，注意区分即可</li><li>默认声明：大多数语言默认声明可变，而rust默认声明不可变</li></ul><h4 id="常量折叠-运行期常量-编译期常量-的自动优化" tabindex="-1"><a class="header-anchor" href="#常量折叠-运行期常量-编译期常量-的自动优化"><span>常量折叠，运行期常量 -&gt; 编译期常量 的自动优化</span></a></h4><blockquote><p>只要给运行期常量赋值的右值是一个在编译期就能确定的数，哪怕使用的是运行期常量的写法，这个运行期常量也会被优化成编译期常量，这个说法正确吗？</p></blockquote><blockquote><p>GPT4：</p><p>是的，你的理解是正确的。在Go语言中，如果一个常量的值在编译期间就能确定，那么这个常量就可以被优化成编译期常量。这是因为编译器有能力在编译期间进行计算，并且在生成的机器码中使用计算出的常量值，而不是运行期间的表达式。这种优化可以帮助提高程序的运行效率。</p><p>这个特性在很多编程语言中都存在，被称为常量折叠（Constant Folding）。常量折叠是编译器的一种优化策略，目的是在编译期间就计算出那些可以预计算的表达式的值，从而减少程序运行时的计算量。</p></blockquote><blockquote><p>一个简单的验证方法：</p><p>C++语言中该写法是正确的：const int a = 10; int list[a];，在C中也依然正确吗</p></blockquote><blockquote><p>GPT4</p><p>在C早期版本中 (如C89/90)，这种写法是不正确的。因为它要求数组的大小在编译时就能确定，而 <code>const int a = 10;</code> 事实上在运行时才确定。但在C99及以后的版本中，这种写法是正确的。</p></blockquote><h4 id="各语言-类型属性-的写法差异" tabindex="-1"><a class="header-anchor" href="#各语言-类型属性-的写法差异"><span>各语言 &quot;类型属性&quot; 的写法差异</span></a></h4><p>举例 (int类型为例)</p><table><thead><tr><th>语言</th><th>Java</th><th>Cpp</th><th>Rust</th><th>Go</th><th>Kotlin</th></tr></thead><tbody><tr><td>可变变量</td><td>int a = 10;</td><td>int a = 10;</td><td>let mut a = 10;</td><td>var a int = 10</td><td>var a: Int = 10</td></tr><tr><td>运行期常量 (不可变变量)</td><td>final int B; B = 20;</td><td>const int B = 20;</td><td>let B: i32 = 20;</td><td>const B int = 20</td><td>val B: Int = 20</td></tr><tr><td>编译期常量 (无类型，宏)</td><td>无</td><td><code>#define C 30</code></td><td>无</td><td>const C = 30</td><td>无</td></tr><tr><td>编译期常量 (带类型)</td><td>final int D = 40;</td><td>constexpr int D = 40;</td><td>const D: i32 = 40;</td><td>const d int = 40</td><td>const val D: Int = 40</td></tr><tr><td>静态+可变变量</td><td>static int e = 50;</td><td>static int e = 50;</td><td>static mut e: i32 = 50;</td><td><strong>无</strong></td><td><strong>无</strong> (伴生对象模拟)</td></tr></tbody></table><p><strong>Java</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 可变变量</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 运行期常量</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">B</span><span class="token punctuation">;</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 在Java中，final变量的声明和初始化可以分开，只要确保在使用变量之前已经完成了初始化。在Python、Js、C#、Cpp、Go中，这种做法都不被允许</span>
<span class="token comment">// 编译期常量-无类型</span>
<span class="token comment">// Java中没有对应的概念</span>
<span class="token comment">// 编译期常量-带类型</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token comment">// 静态可变变量</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>C++</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// 可变变量
int a = 10;
// 运行期常量
const int b = 20;
// 编译期常量-无类型
#define C 30
// 编译期常量-带类型
constexpr int D = 40;
// 静态可变变量
static int e = 50;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Rust</strong></p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 可变变量</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 运行期常量</span>
<span class="token keyword">let</span> <span class="token class-name">B</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token comment">// 编译期常量-无类型</span>
<span class="token comment">// Rust中没有对应的概念</span>
<span class="token comment">// 编译期常量-带类型</span>
<span class="token keyword">const</span> <span class="token class-name">D</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token comment">// 静态可变变量</span>
<span class="token keyword">static</span> <span class="token keyword">mut</span> e<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Go</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 可变变量</span>
<span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment">// 运行期常量</span>
<span class="token keyword">const</span> B <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">20</span>
<span class="token comment">// 编译期常量-无类型</span>
<span class="token keyword">const</span> C <span class="token operator">=</span> <span class="token number">30</span>
<span class="token comment">// 编译期常量-带类型</span>
<span class="token keyword">const</span> d <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">40</span>
<span class="token comment">// 静态可变变量</span>
<span class="token comment">// Go中没有对应的概念</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Kotlin</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token comment">// 可变变量</span>
<span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment">// 运行期常量</span>
<span class="token keyword">val</span> B<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">20</span>
<span class="token comment">// 编译期常量-无类型</span>
<span class="token comment">// Kotlin中没有对应的概念</span>
<span class="token comment">// 编译期常量-带类型</span>
<span class="token keyword">const</span> <span class="token keyword">val</span> D<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">40</span>
<span class="token comment">// 静态可变变量</span>
<span class="token comment">// Kotlin中没有对应的概念，但可以用伴生对象来实现类似功能</span>
<span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> e<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">50</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量泛操作" tabindex="-1"><a class="header-anchor" href="#常量泛操作"><span>常量泛操作</span></a></h3><ul><li><p>const关键字</p><ul><li>在C++中用于定义运行期常量</li><li>在Java中是保留的关键字，目前并没有使用。在Java中，必须使用final定义常量</li><li>kotlin和rust的const是编译期常量，而在C++使用constexpr才表示编译期常量</li></ul></li><li><p>final关键字：在Java中用于定义常量。在C++11中被用于禁止继承或禁止虚函数的</p></li></ul><h3 id="变量泛操作" tabindex="-1"><a class="header-anchor" href="#变量泛操作"><span>变量泛操作</span></a></h3><h4 id="声明类型" tabindex="-1"><a class="header-anchor" href="#声明类型"><span>声明类型</span></a></h4><ul><li><code>C、C++、Java</code>：需要先声明</li><li><code>Basic、Python、Php、Js</code>：不显示声明（在使用新名称时创建新的变量）</li></ul><h4 id="骚操作" tabindex="-1"><a class="header-anchor" href="#骚操作"><span>骚操作</span></a></h4><table><thead><tr><th>语言</th><th>C/C++</th><th>Java</th><th>Python</th><th>Go</th><th>操作举例</th></tr></thead><tbody><tr><td>同行批量定义</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td>不支持</td><td><strong>支持</strong></td><td><code>int x, y = 4</code></td></tr><tr><td>解压缩</td><td>不支持</td><td>不支持</td><td><strong>支持</strong>，js的es6有类似</td><td></td><td><code>x,y,z=list</code>或<code>tuple=x,y,z</code></td></tr><tr><td>连等号</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td><strong>支持（原理不同）</strong></td><td></td><td><code>x = y = z = c</code></td></tr><tr><td>表达式广义性</td><td><strong>支持</strong></td><td><strong>支持</strong></td><td>不支持</td><td></td><td><code>x = (y+1) +1</code></td></tr></tbody></table><h4 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h4><ul><li><code>C语言</code>：<code>(type)var</code>，如<code>(int)&#39;12&#39;</code></li><li><code>Python</code>：<code>type(var)</code>，如<code>str(12)</code></li></ul><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>数字</span></a></h3><p>数字类型</p><ul><li>C/C++：分有符号数和无符号数</li><li>Java：没有任何无符号（unsigned）</li><li>Python3：数字的类型更少（四种：int、float、bool、complex（复数）） 其中int为变长类型，理论可以无限大。甚至没有long这种类型（python2依然有long类型）</li></ul><h3 id="布尔" tabindex="-1"><a class="header-anchor" href="#布尔"><span>布尔</span></a></h3><h4 id="有无布尔类型" tabindex="-1"><a class="header-anchor" href="#有无布尔类型"><span>有无布尔类型</span></a></h4><ul><li><code>C语言</code>：没有布尔类型，用1、0表示布尔</li><li><code>Python、java</code>：有布尔类型</li></ul><p>无布尔类型需要注意的点：</p><ul><li>其中在C++中，数值甚至指针可以代替boolean值。值0相当于布尔值false，非0值相当于布尔值true。在Java中则不是这样。 因此，Java程序员不会遇到下述麻烦：<code>if(x=0)</code></li></ul><h4 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h4><ul><li>C/C++：不能保证&gt;&gt;是完成算术移位（扩展符号位）还是逻辑移位（填充0）</li><li>Java：消除了这种不确定性，这与java中没有无符号类型有关。<code>&gt;&gt;</code>用符号位填充高位，<code>&gt;&gt;&gt;</code>用0填充高位</li></ul><h3 id="列表比较" tabindex="-1"><a class="header-anchor" href="#列表比较"><span>列表比较</span></a></h3><ul><li><code>C语言</code>：叫数组，<code>()</code>声明，需要先声明长度</li><li><code>Python</code>：叫列表，<code>[]</code>声明，不需要预定义长度</li><li><code>Matlab</code>：叫矩阵，<code>[]</code>声明</li></ul><p>Python list与C数组的比较</p><ul><li><p>空间效率</p><ul><li>C语言中，创建数组时，首先需要指定数组的容量大小，根据大小来分配内存，也就是说，即使要在数组中存储一个元素，也需要为所有的元素预先的分配内存。故，C语言中数组的空间效率不高</li><li>Python中，列表list属于其的一个高级特性，是对源码中对象(PyListObject）的一个抽象，而因为不同的list存储元素的个数不同，故这里的PyListObject再创立之初就被设置为变长对象。并且，该对象中内置了像插入、删除等方法，可以在运行时动态的调整维护的内存和元素</li><li>总结：C语言数组相较Python List空间效率低，灵活性较差</li></ul></li><li><p>长度</p><ul><li>C语言中，除了动态数组以外，数组都是不可变的</li><li>Python中，对象中封装了插入、删除等方法，所以List是可变的</li></ul></li><li><p>数据类型</p><ul><li>C语言中，数组中的元素只能是同一种类型，在数组初始化时已经确定</li><li>Python中，数组中的元素可以是不同的类型</li></ul></li></ul><h3 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h3><p>Java和C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。</p><h2 id="布尔-1" tabindex="-1"><a class="header-anchor" href="#布尔-1"><span>布尔</span></a></h2><p>布尔运算的输出结果：</p><p>C语言没有bool，过去C++和C一样没有布尔类型，将非零值解释为true，将零解释为false</p><p>ANSI/ISO C++标准后C++的新增布尔类型</p><p>即在过去是0,1（或非零数），ANSI/ISO C++标准后是true和false</p><p>至于其他语言，Java、Python、JavaScript都有bool类型</p><ul><li>Java和JavaScript用ture和false表示</li><li>Python用关键字<code>True</code>和<code>False</code>表示</li></ul><h2 id="符号" tabindex="-1"><a class="header-anchor" href="#符号"><span>符号</span></a></h2><h3 id="逗号和分号的使用" tabindex="-1"><a class="header-anchor" href="#逗号和分号的使用"><span>逗号和分号的使用</span></a></h3><p>关于句末的分号这里不再提及，具体见前，这里只提及分割作用</p><ul><li><code>C语言</code>：分号和逗号分割for表达式、逗号分割数组（严格意义上分号是终止符而不是分隔符）</li><li><code>Python</code>：空格分割for表达式、逗号分割列表元组字典</li></ul><h3 id="括号的使用" tabindex="-1"><a class="header-anchor" href="#括号的使用"><span>括号的使用</span></a></h3><ul><li><code>C语言</code>：<code>[]</code>是索引，<code>()</code>声明数组，<code>{}</code>用于缩进</li><li><code>Python</code>：<code>[]</code>是索引，<code>[]</code>声明列表，<code>()</code>声明元组，<code>{}</code>声明字典和集合</li></ul><h3 id="逻辑运算符的使用" tabindex="-1"><a class="header-anchor" href="#逻辑运算符的使用"><span>逻辑运算符的使用</span></a></h3><ul><li><code>C语言、Java、Js</code>：<code>&amp;&amp;、||、!</code>，C语言有位逻辑符</li><li><code>Python</code>：<code>and、or、not</code></li></ul><h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断"><span>类型判断</span></a></h2><h3 id="普通类型判断" tabindex="-1"><a class="header-anchor" href="#普通类型判断"><span>普通类型判断</span></a></h3><p>Python - 其他</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token keyword">is</span> <span class="token keyword">in</span> <span class="token builtin">list</span>
x <span class="token keyword">is</span> <span class="token boolean">None</span>
x <span class="token operator">==</span> x
<span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">is</span> QDMGraphicsSocket  <span class="token comment"># type方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>x == x
x == nullptr
type(x).name  // 这个是Qt的，type方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举型" tabindex="-1"><a class="header-anchor" href="#枚举型"><span>枚举型</span></a></h3><p>指数枚举值，用&amp;和|来判断（位与、位或）</p><p>&amp;表示包含枚举</p><p>|表示将这两个枚举相加</p><p>各个语言用法都差不多</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> QDMGraphicsEdge<span class="token punctuation">)</span> <span class="token keyword">or</span> item <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Shift加左键 -&gt; 伪装事件：按Shift修饰键时同时自动按Ctrl修饰键</span>
    <span class="token keyword">if</span> event<span class="token punctuation">.</span>modifiers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Qt<span class="token punctuation">.</span>ShiftModifier<span class="token punctuation">:</span>
        event<span class="token punctuation">.</span>ignore<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fake_event <span class="token operator">=</span> QMouseEvent<span class="token punctuation">(</span>QEvent<span class="token punctuation">.</span>MouseButtonPress<span class="token punctuation">,</span> event<span class="token punctuation">.</span>localPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>screenPos<span class="token punctuation">(</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>LeftButton<span class="token punctuation">,</span> event<span class="token punctuation">.</span>buttons<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Qt<span class="token punctuation">.</span>LeftButton
                                 <span class="token punctuation">,</span> event<span class="token punctuation">.</span>modifiers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Qt<span class="token punctuation">.</span>ControlModifier<span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mousePressEvent<span class="token punctuation">(</span>fake_event<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类判断" tabindex="-1"><a class="header-anchor" href="#类判断"><span>类判断</span></a></h3><p>Python</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># &#39;&#39;&#39;</span>
该文件中用了三种判断方法
<span class="token punctuation">(</span>一<span class="token punctuation">)</span>
    <span class="token builtin">type</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> QDMGraphicsSocket  <span class="token comment"># type方法</span>
    直接判断类型
<span class="token punctuation">(</span>二<span class="token punctuation">)</span>    
    <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> QDMGraphicsEdge<span class="token punctuation">)</span>
    可以判断派生类，这里的QDMGraphicsEdge有两个派生类
<span class="token punctuation">(</span>三<span class="token punctuation">)</span>    
    <span class="token builtin">hasattr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">)</span>
    用于判断对象是否包含对应的属性，这里node里有<span class="token punctuation">:</span> 
    grNode、socket <span class="token operator">-</span> grSocket、title_item、content <span class="token operator">-</span> grContent
<span class="token comment"># &#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C++ 有点不同</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// 一般通过是否能够进行类型转化来判断
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,97),i=[l];function o(p,c){return s(),a("div",null,i)}const u=n(t,[["render",o],["__file","01. 泛操作.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html","title":"数据+算法 泛操作","lang":"zh-CN","frontmatter":{"description":"数据+算法 泛操作 数据书写类 声明、定义、赋值、使用 概念 (相同) 包括 变量、函数、类 等的定义与声明，不过这里特指 变量 声明 简明概念：告诉你有个东西存在 例如：\\"数学中有个概念是乘法\\" / \\"有个浮点数派\\" 底层区分：标识符分配名称和类型 定义 简明概念：告诉你这个东西具体是什么 例如：\\"乘法的定义是 n*m 等同m的n相加\\" / \\"这个派...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"数据+算法 泛操作"}],["meta",{"property":"og:description","content":"数据+算法 泛操作 数据书写类 声明、定义、赋值、使用 概念 (相同) 包括 变量、函数、类 等的定义与声明，不过这里特指 变量 声明 简明概念：告诉你有个东西存在 例如：\\"数学中有个概念是乘法\\" / \\"有个浮点数派\\" 底层区分：标识符分配名称和类型 定义 简明概念：告诉你这个东西具体是什么 例如：\\"乘法的定义是 n*m 等同m的n相加\\" / \\"这个派..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据+算法 泛操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"数据+算法 泛操作","slug":"数据-算法-泛操作","link":"#数据-算法-泛操作","children":[{"level":2,"title":"数据书写类","slug":"数据书写类","link":"#数据书写类","children":[{"level":3,"title":"声明、定义、赋值、使用","slug":"声明、定义、赋值、使用","link":"#声明、定义、赋值、使用","children":[{"level":4,"title":"概念 (相同)","slug":"概念-相同","link":"#概念-相同","children":[]},{"level":4,"title":"自动初始化 (声明默认值)","slug":"自动初始化-声明默认值","link":"#自动初始化-声明默认值","children":[]},{"level":4,"title":"合并 定义与声明 的概念 (与有无默认值有关)","slug":"合并-定义与声明-的概念-与有无默认值有关","link":"#合并-定义与声明-的概念-与有无默认值有关","children":[]}]},{"level":3,"title":"数据存储大小","slug":"数据存储大小","link":"#数据存储大小","children":[]},{"level":3,"title":"类型属性","slug":"类型属性","link":"#类型属性","children":[{"level":4,"title":"不可变变量，究竟是常量 or 变量？","slug":"不可变变量-究竟是常量-or-变量","link":"#不可变变量-究竟是常量-or-变量","children":[]},{"level":4,"title":"常量折叠，运行期常量 -> 编译期常量 的自动优化","slug":"常量折叠-运行期常量-编译期常量-的自动优化","link":"#常量折叠-运行期常量-编译期常量-的自动优化","children":[]},{"level":4,"title":"各语言 \\"类型属性\\" 的写法差异","slug":"各语言-类型属性-的写法差异","link":"#各语言-类型属性-的写法差异","children":[]}]},{"level":3,"title":"常量泛操作","slug":"常量泛操作","link":"#常量泛操作","children":[]},{"level":3,"title":"变量泛操作","slug":"变量泛操作","link":"#变量泛操作","children":[{"level":4,"title":"声明类型","slug":"声明类型","link":"#声明类型","children":[]},{"level":4,"title":"骚操作","slug":"骚操作","link":"#骚操作","children":[]},{"level":4,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]}]},{"level":3,"title":"数字","slug":"数字","link":"#数字","children":[]},{"level":3,"title":"布尔","slug":"布尔","link":"#布尔","children":[{"level":4,"title":"有无布尔类型","slug":"有无布尔类型","link":"#有无布尔类型","children":[]},{"level":4,"title":"位运算","slug":"位运算","link":"#位运算","children":[]}]},{"level":3,"title":"列表比较","slug":"列表比较","link":"#列表比较","children":[]},{"level":3,"title":"指针","slug":"指针","link":"#指针","children":[]}]},{"level":2,"title":"布尔","slug":"布尔-1","link":"#布尔-1","children":[]},{"level":2,"title":"符号","slug":"符号","link":"#符号","children":[{"level":3,"title":"逗号和分号的使用","slug":"逗号和分号的使用","link":"#逗号和分号的使用","children":[]},{"level":3,"title":"括号的使用","slug":"括号的使用","link":"#括号的使用","children":[]},{"level":3,"title":"逻辑运算符的使用","slug":"逻辑运算符的使用","link":"#逻辑运算符的使用","children":[]}]},{"level":2,"title":"类型判断","slug":"类型判断","link":"#类型判断","children":[{"level":3,"title":"普通类型判断","slug":"普通类型判断","link":"#普通类型判断","children":[]},{"level":3,"title":"枚举型","slug":"枚举型","link":"#枚举型","children":[]},{"level":3,"title":"类判断","slug":"类判断","link":"#类判断","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.61,"words":3784},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Different/02. 数据+算法/01. 泛操作.md","excerpt":"\\n<h2>数据书写类</h2>\\n<h3>声明、定义、赋值、使用</h3>\\n<h4>概念 (相同)</h4>\\n<p>包括 变量、函数、类 等的定义与声明，不过这里特指 变量</p>\\n<ul>\\n<li>声明\\n<ul>\\n<li>简明概念：告诉你有个东西存在</li>\\n<li>例如：\\"数学中有个概念是乘法\\" / \\"有个浮点数派\\"</li>\\n<li>底层区分：标识符分配名称和类型</li>\\n</ul>\\n</li>\\n<li>定义\\n<ul>\\n<li>简明概念：告诉你这个东西具体是什么</li>\\n<li>例如：\\"乘法的定义是 n*m 等同m的n相加\\" / \\"这个派的值是3.1415\\"</li>\\n<li>底层区分：分配内存并填充值 (对于普通变量) 或提供方法体 (对于函数)</li>\\n</ul>\\n</li>\\n<li>使用\\n<ul>\\n<li>简明概念：你去使用这个概念</li>\\n<li>例如：\\"用乘法解决 a*b 的问题\\" / \\"使用派去计算圆的直径\\"</li>\\n<li>底层区分：访问标识符对应的地址或内存值</li>\\n</ul>\\n</li>\\n<li>赋值\\n<ul>\\n<li>(变量有此概念，函数与此概念)</li>\\n<li>底层区分：修改标识符对应的内存值</li>\\n</ul>\\n</li>\\n<li>初始化\\n<ul>\\n<li>底层区分：为标识符分配内存的同时进行填充，体现为第一次定义 (若声明与定义概念合并，则体现为声明时即初始化值)</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,v as data};
