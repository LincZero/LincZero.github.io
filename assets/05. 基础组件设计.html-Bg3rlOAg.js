import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-HRMkW8Cz.js";const t={},p=e(`<h1 id="基础组件设计" tabindex="-1"><a class="header-anchor" href="#基础组件设计"><span>基础组件设计</span></a></h1><h2 id="手撕线程池以及线程池性能优化分析" tabindex="-1"><a class="header-anchor" href="#手撕线程池以及线程池性能优化分析"><span>手撕线程池以及线程池性能优化分析</span></a></h2><h2 id="内存池与网络的结合-nginx有哪些不一样的处理" tabindex="-1"><a class="header-anchor" href="#内存池与网络的结合-nginx有哪些不一样的处理"><span>内存池与网络的结合，nginx有哪些不一样的处理</span></a></h2><h2 id="内存泄露检测" tabindex="-1"><a class="header-anchor" href="#内存泄露检测"><span>内存泄露检测</span></a></h2><p>2个方案，项目中遇到内存泄漏不用慌</p><h3 id="内存泄露问题" tabindex="-1"><a class="header-anchor" href="#内存泄露问题"><span>内存泄露问题</span></a></h3><p>通常是作为C/C++程序员会遇到的一个问题（其他语言也有但不是重点）</p><ul><li>malloc、free；new、delete</li><li>日志打印</li></ul><p>内存泄露问题</p><ol><li>确定是否有内存泄露 <ul><li>htop猜测有内存泄露</li></ul></li><li>确定在哪个地方有内存泄露</li></ol><p>一些自动检测内存泄露的工具，可能也是下面这些原理。但会更高级，可能有些优化，例如还能知道哪些malloc是全局的并不需要释放</p><h3 id="方案一-重载malloc、free" tabindex="-1"><a class="header-anchor" href="#方案一-重载malloc、free"><span>方案一：重载malloc、free</span></a></h3><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> global_memCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// man malloc 可以快速查看其原型</span>
    global_memCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;[+]%s:%d, size: %ld\\n&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 可改进：每次创建时，将地址及相应的位置写入文件，释放时删除。那么最后可以知道哪的文件哪一行所创建的内存没有被释放！</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">_free</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> line<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    global_memCount<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;[-]%s:%d\\n&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">malloc</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token function">_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">free</span><span class="token expression"><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token function">_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>局限性：</p><ul><li>适用于文件比较少</li><li>适用于用的都是自己的函数。如果调用库后，不能比较清楚知道是自己的代码还是库的代码有内存泄露（因为宏不能替换库里的函数）</li></ul><h3 id="方案二-hook方法" tabindex="-1"><a class="header-anchor" href="#方案二-hook方法"><span>方案二：hook方法</span></a></h3><p>hook方法主要使用的是：dlsym</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 步骤一：</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>malloc_t<span class="token punctuation">)</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>free_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

malloc_t malloc_f <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
free_t free_t <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

<span class="token comment">// 步骤二</span>
<span class="token keyword">int</span> enable_malloc_hook <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>enable_malloc_hook<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        enable_malloc_hook <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">void</span><span class="token operator">*</span> caller <span class="token operator">=</span> <span class="token function">__builtin_return_address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译器自带的一个函数，但返回的地址需要用其他工具来看在哪个文件和行数：aadr2line -f -e ./public_memleak -a</span>
        <span class="token comment">// 文件写入和记录等</span>
        enable_malloc_hook <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token function">malloc_f</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">free_f</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 步骤三</span>
<span class="token keyword">void</span> <span class="token function">init_hook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    malloc_f <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>RTLD_NEXT<span class="token punctuation">,</span> <span class="token string">&quot;malloc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原理：找到malloc函数的地址，并替换之</span>
    free_f <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>RTLD_NEXT<span class="token punctuation">,</span> <span class="token string">&quot;free&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dlopen、dlsym、dlerror，主机是查符号表找到函数起始地址，用新的指针替换之？</p><h3 id="gdb" tabindex="-1"><a class="header-anchor" href="#gdb"><span>gdb</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># gdb backtrace</span>
$ gdb ./public_memleak
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">97</span>		<span class="token comment"># 加断点</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">101</span> 
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">65</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">72</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r			<span class="token comment"># 运行</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c			<span class="token comment"># 单步调试</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="死锁检测" tabindex="-1"><a class="header-anchor" href="#死锁检测"><span>死锁检测</span></a></h2><p>死锁检测方案，为你的项目一个小组件预防死锁</p><h2 id="红黑树、最小堆、时间轮、跳表多种方式实现定时器" tabindex="-1"><a class="header-anchor" href="#红黑树、最小堆、时间轮、跳表多种方式实现定时器"><span>红黑树、最小堆、时间轮、跳表多种方式实现定时器</span></a></h2><h2 id="从6个方面看分布式锁实现-豁然开朗" tabindex="-1"><a class="header-anchor" href="#从6个方面看分布式锁实现-豁然开朗"><span>从6个方面看分布式锁实现，豁然开朗</span></a></h2><h2 id="高并发编程-原子操作与cpu缓存一致性" tabindex="-1"><a class="header-anchor" href="#高并发编程-原子操作与cpu缓存一致性"><span>高并发编程 - 原子操作与cpu缓存一致性</span></a></h2><h2 id="linux服务器通信协议如何设计-xml-json-protobuf" tabindex="-1"><a class="header-anchor" href="#linux服务器通信协议如何设计-xml-json-protobuf"><span>Linux服务器通信协议如何设计-xml-json-protobuf</span></a></h2>`,27),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(t,[["render",l],["__file","05. 基础组件设计.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/05.%20%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1.html","title":"基础组件设计","lang":"zh-CN","frontmatter":{"description":"基础组件设计 手撕线程池以及线程池性能优化分析 内存池与网络的结合，nginx有哪些不一样的处理 内存泄露检测 2个方案，项目中遇到内存泄漏不用慌 内存泄露问题 通常是作为C/C++程序员会遇到的一个问题（其他语言也有但不是重点） malloc、free；new、delete 日志打印 内存泄露问题 确定是否有内存泄露 htop猜测有内存泄露 确定在哪...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/05.%20%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"基础组件设计"}],["meta",{"property":"og:description","content":"基础组件设计 手撕线程池以及线程池性能优化分析 内存池与网络的结合，nginx有哪些不一样的处理 内存泄露检测 2个方案，项目中遇到内存泄漏不用慌 内存泄露问题 通常是作为C/C++程序员会遇到的一个问题（其他语言也有但不是重点） malloc、free；new、delete 日志打印 内存泄露问题 确定是否有内存泄露 htop猜测有内存泄露 确定在哪..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础组件设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"基础组件设计","slug":"基础组件设计","link":"#基础组件设计","children":[{"level":2,"title":"手撕线程池以及线程池性能优化分析","slug":"手撕线程池以及线程池性能优化分析","link":"#手撕线程池以及线程池性能优化分析","children":[]},{"level":2,"title":"内存池与网络的结合，nginx有哪些不一样的处理","slug":"内存池与网络的结合-nginx有哪些不一样的处理","link":"#内存池与网络的结合-nginx有哪些不一样的处理","children":[]},{"level":2,"title":"内存泄露检测","slug":"内存泄露检测","link":"#内存泄露检测","children":[{"level":3,"title":"内存泄露问题","slug":"内存泄露问题","link":"#内存泄露问题","children":[]},{"level":3,"title":"方案一：重载malloc、free","slug":"方案一-重载malloc、free","link":"#方案一-重载malloc、free","children":[]},{"level":3,"title":"方案二：hook方法","slug":"方案二-hook方法","link":"#方案二-hook方法","children":[]},{"level":3,"title":"gdb","slug":"gdb","link":"#gdb","children":[]}]},{"level":2,"title":"死锁检测","slug":"死锁检测","link":"#死锁检测","children":[]},{"level":2,"title":"红黑树、最小堆、时间轮、跳表多种方式实现定时器","slug":"红黑树、最小堆、时间轮、跳表多种方式实现定时器","link":"#红黑树、最小堆、时间轮、跳表多种方式实现定时器","children":[]},{"level":2,"title":"从6个方面看分布式锁实现，豁然开朗","slug":"从6个方面看分布式锁实现-豁然开朗","link":"#从6个方面看分布式锁实现-豁然开朗","children":[]},{"level":2,"title":"高并发编程 - 原子操作与cpu缓存一致性","slug":"高并发编程-原子操作与cpu缓存一致性","link":"#高并发编程-原子操作与cpu缓存一致性","children":[]},{"level":2,"title":"Linux服务器通信协议如何设计-xml-json-protobuf","slug":"linux服务器通信协议如何设计-xml-json-protobuf","link":"#linux服务器通信协议如何设计-xml-json-protobuf","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.28,"words":683},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/10. 面试/C++架构/05. 基础组件设计.md","autoDesc":true}');export{d as comp,k as data};
