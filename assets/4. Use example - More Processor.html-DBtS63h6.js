import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-Bmv5Ekr9.js";const p={},e=t(`<p>The first three chapters introduce the various selectors, focusing on the list text to tree structure of the graph</p><h1 id="processor-class" tabindex="-1"><a class="header-anchor" href="#processor-class"><span>Processor class</span></a></h1><p>[list2mermaid]</p><ul><li>text--TextProcessor--&gt;text</li><li>text--RenderProcessor--&gt;element</li><li>element--DecorateProcessor--&gt;element</li></ul><h1 id="more-processor-decorate-processor" tabindex="-1"><a class="header-anchor" href="#more-processor-decorate-processor"><span>More Processor（Decorate Processor）</span></a></h1><h2 id="block-name" tabindex="-1"><a class="header-anchor" href="#block-name"><span>Block Name</span></a></h2><p><strong>This is quite useful and high frequency</strong>，and I gave you a grammar candy: start with <code>#</code> Give the block a name, and you can automatically identify the type of the modified block. It can easily be:</p><ul><li>Add to table: Center table title</li><li>Add to code: filename</li></ul><h4 id="table-heading" tabindex="-1"><a class="header-anchor" href="#table-heading"><span>Table heading</span></a></h4><p>[2table|#table heading]</p><ul><li>1| 2</li><li>3| 4</li></ul><h4 id="code-file-name" tabindex="-1"><a class="header-anchor" href="#code-file-name"><span>code file name</span></a></h4><p><strong>According to the reason, the file name should be the same color as the code block. If the color is different, I will adjust it in the css file.</strong> find <code>--pre-background-color</code> ，at css file the fifth line，just change the color value. （Tried using js to get code block color again, but failed）</p><p>[#main.cpp]</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World! \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ohter-block-name" tabindex="-1"><a class="header-anchor" href="#ohter-block-name"><span>ohter block name</span></a></h4><p>[#quote block name]</p><blockquote><p>111 222</p></blockquote><p>[#list block name]</p><ul><li>1 <ul><li>2 <ul><li>3</li></ul></li><li>2</li></ul></li></ul><h2 id="fold" tabindex="-1"><a class="header-anchor" href="#fold"><span>fold</span></a></h2><p>This is the code I used to force the list2table effect with dataviewjs before writing anyblock. The content is long, so here to demonstrate</p><p>[fold]</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span><span class="token operator">+</span><span class="token string">&quot;toTable&quot;</span> <span class="token comment">// 不能合并</span>
<span class="token keyword">const</span> files <span class="token operator">=</span> app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">getMarkdownFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> lines <span class="token operator">=</span> files
	<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 本篇笔记</span>
		<span class="token keyword">return</span> file<span class="token punctuation">.</span>path <span class="token operator">==</span> dv<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span>path
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 转列表</span>
		<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">cachedRead</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  
		<span class="token keyword">const</span> lines <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> lines
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">linesTmp</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lines <span class="token operator">=</span> linesTmp<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 先搜索关键词</span>
	<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			index <span class="token operator">=</span> i
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 获取参数</span>
	<span class="token keyword">const</span> args <span class="token operator">=</span> lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span>
	

	<span class="token comment">// 先不考虑异常缩进了</span>
	<span class="token keyword">let</span> levelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> contentArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s(.*?)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			contentArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			levelArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\\s(.*?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 再弄成正确的层次关系，暂时先只考虑三层</span>
	<span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastLevel <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>levelArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 是否不为第一个数据</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			lastLevel <span class="token operator">=</span> <span class="token number">0</span>
			lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
	lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tableData<span class="token punctuation">)</span>
	dv<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> tableData<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="overflow-folding" tabindex="-1"><a class="header-anchor" href="#overflow-folding"><span>Overflow folding</span></a></h2><p>Like many blogs, there are overflow collapses of code blocks. AnyBlock also has this processor, whether it&#39;s a block of code or something else. <strong>Notes are useful when writing down long blocks of code</strong> （@todo This does not match the light pattern, and does not necessarily match the user&#39;s code block background）</p><p>[overfold]</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>keyword<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">&quot;%&quot;</span><span class="token operator">+</span><span class="token string">&quot;toTable&quot;</span> <span class="token comment">// 不能合并</span>
<span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>files<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">getMarkdownFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>lines<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>files
	<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 本篇笔记</span>
		<span class="token keyword">return</span> file<span class="token punctuation">.</span>path <span class="token operator">==</span> dv<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span>path
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>async<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=&gt;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>  <span class="token comment">// 转列表</span>
		<span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>content<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">await</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">cachedRead</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  
		<span class="token keyword">const</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>lines<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>lines
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>linesTmp<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lines <span class="token operator">=</span> linesTmp<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 先搜索关键词</span>
	<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			index <span class="token operator">=</span> i
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 获取参数</span>
	<span class="token keyword">const</span> args <span class="token operator">=</span> lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span>
	

	<span class="token comment">// 先不考虑异常缩进了</span>
	<span class="token keyword">let</span> levelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> contentArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s(.*?)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			contentArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			levelArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\\s(.*?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 再弄成正确的层次关系，暂时先只考虑三层</span>
	<span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastLevel <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>levelArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 是否不为第一个数据</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			lastLevel <span class="token operator">=</span> <span class="token number">0</span>
			lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
	lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tableData<span class="token punctuation">)</span>
	dv<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> tableData<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[list2table|overfold]</p><ul><li>&lt; 大类型| 解析方法 | 解析方法zh | 渲染方法 | 渲染方法zh | 可转md/html</li><li>tree <ul><li>ul-list| ul树 （一叉多层树） <ul><li>2ut/2mdut | 转表格（规范） | md/html</li></ul></li><li>li-list| li树 （一叉多层树） <ul><li>2lt/mdlt | 转列表格 | html</li></ul></li><li>ab-tree | 二层树 也叫 &quot;消除最高级&quot; （一叉二层树） <ul><li>2timeline | 转时间线 | mermaid</li><li>2tab | 转标签栏 | html</li><li>2chat | 转对话</li></ul></li><li>tree-list | 树列表 （多叉多层树） <ul><li>2table/2mdtable | 转树表格 | html</li><li>2mermaid | 转流程图 | mermaid/html</li><li>2mindmap | 转思维导图 | html</li><li>2tree | 长得像树的树状图 | html</li><li>2xuri | 旭日图 | html</li><li>2brace | 括弧分类图 | html</li></ul></li></ul></li><li>other <ul><li>title | 标题级（语法糖） <ul><li>2list+list2xxx | (组合使用，下面提供了几种语法糖)</li><li>2tab</li><li>2table</li><li>2mindmap</li></ul></li><li>code | 一定代码 <ul><li>2doctable | 转表格（文档生成） | html</li><li>json | 这个不能转树，只能说转可折叠渲染</li></ul></li><li>common | 通用 <ul><li>text | 纯文本 | md</li><li>md | md渲染 | md</li></ul></li><li>render| 渲染 （理论上为 &quot;渲染修饰器&quot; 但该功能没做） <ul><li>flod | (折叠类)可折叠 | md+</li><li>hide | (折叠类)默认折叠 | md+</li><li>heimu| (折叠类)黑幕遮挡 | html</li><li>limit()/part() | (折叠类)限高折叠 | html</li><li>scroll()| (折叠类)限高滚动 | html</li><li>title()| 增加块标题（代码块可能会很常用）</li></ul></li></ul></li></ul><h2 id="scroll" tabindex="-1"><a class="header-anchor" href="#scroll"><span>Scroll</span></a></h2><p>The default is to scroll beyond 460px，The processor can also accept arguments，<code>scroll(How much more becomes a roll)</code>，Parameters do not need to be added <code>px</code></p><p>[scroll]</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token string">&quot;%&quot;</span><span class="token operator">+</span><span class="token string">&quot;toTable&quot;</span> <span class="token comment">// 不能合并</span>
<span class="token keyword">const</span> files <span class="token operator">=</span> app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">getMarkdownFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> lines <span class="token operator">=</span> files
	<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 本篇笔记</span>
		<span class="token keyword">return</span> file<span class="token punctuation">.</span>path <span class="token operator">==</span> dv<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span>path
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 转列表</span>
		<span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span>vault<span class="token punctuation">.</span><span class="token function">cachedRead</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  
		<span class="token keyword">const</span> lines <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> lines
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">linesTmp</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> lines <span class="token operator">=</span> linesTmp<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 先搜索关键词</span>
	<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			index <span class="token operator">=</span> i
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 获取参数</span>
	<span class="token keyword">const</span> args <span class="token operator">=</span> lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span>
	

	<span class="token comment">// 先不考虑异常缩进了</span>
	<span class="token keyword">let</span> levelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> contentArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s(.*?)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			contentArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*?-\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			levelArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\\s(.*?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span><span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 再弄成正确的层次关系，暂时先只考虑三层</span>
	<span class="token keyword">let</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">let</span> lastLevel <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>levelArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">.</span>length<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 是否不为第一个数据</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
			<span class="token punctuation">}</span>
			lastLevel <span class="token operator">=</span> <span class="token number">0</span>
			lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">1</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>levelArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>lastLevel<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 是否新起一行</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span><span class="token punctuation">{</span>
				tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
				lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
				lastLevel <span class="token operator">=</span> <span class="token number">2</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;^^&quot;</span><span class="token punctuation">)</span>
				lastArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>contentArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	tableData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lastArr<span class="token punctuation">)</span>
	lastArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tableData<span class="token punctuation">)</span>
	dv<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> tableData<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="black-curtain" tabindex="-1"><a class="header-anchor" href="#black-curtain"><span>black curtain</span></a></h2><p>It is similar to the dark screen effect of Mengniang Encyclopedia</p><p>[X|addClass(ab-deco-heimu)]</p><blockquote><p>This is a piece of content that cannot be seen directly ... ...</p></blockquote><h2 id="add-class-add-div" tabindex="-1"><a class="header-anchor" href="#add-class-add-div"><span>add class / add div</span></a></h2><p><code>addClass</code> (Adds a class name to the current block)、<code>addDiv</code> (Append a parent element and append a class name to the parent element) This can be used to add a custom style to the block (like an <code>ad</code> plugin) that can be extended by users who know CSS</p><h1 id="custom-processor" tabindex="-1"><a class="header-anchor" href="#custom-processor"><span>Custom processor</span></a></h1><p>A few processor configurations are recommended to know how to use them. id and name are arbitrary. Let me show you</p><p>[2table]</p><ul><li>Registry matching name| The register is replaced with</li><li>quote| add([!quote])|quote</li><li>fold | add([!note]-|qutoe)</li><li><code>/mindmap(.*?)/</code>| rootlist(%1)|mindmap</li></ul><p><code>%n</code> ndicates that the n TH match in the regular is replaced at this position In the example of the map above，<code>mindmap(name)</code> will being <code>rootlist(name)|mindmap</code></p><p>The functionality is relatively simple and less powerful than adding processors in code. But by combining registries, you can still make nice customization</p><h1 id="more" tabindex="-1"><a class="header-anchor" href="#more"><span>More</span></a></h1><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h2><p>[Xcode|FAQ]</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Q：Midjourney是什么？https://www.midjourney.com/

A：一个**AI 生成算图工具**，只需*输入文字*就会自动产生图像，Midjourney目前架设在Discord频道上，因此需要有Discord帐号才能使用。

Q：Discord是什么？https://discord.com/

A：一款专为社群设计的免费通讯社交软体，类似于LINE或Slack，但功能更为强大，自带机器人与各种程式功能，能够在上面发开自己工具，有网页版与手机版App。.

Q：Midjourney是软件吗？需要安装吗？

A：不用，Midjourney并不是软件，也不用安装，它是一个架设在Discord之下的工具，使用方式只需要在Discord输入文字即可，所以与你电脑本身效能无关，运算中关闭Midjourney也没问题，因为真正运算图片的是云端电脑。.

Q：要如何进入Midjourney？

A：目前Midjourney还在Beta封测阶段，需有邀请码才能进入.

Q：如何获得邀请码？

A：目前有2种方式，官网申请，朋友邀请

【官网申请】https://www.midjourney.com这个网址是官方网站，点选「Apply for the Beta」，填写表格即可，如果通过申请官方就会寄邀请码到你信箱，审核时间不一定，有可能很久

【朋友邀请】已经订阅10美金或30美金的使用者会获得5个邀请码，有邀请码的人可以产生邀请链接给其他人，你可以使用这些邀请链接进入Midjourney频道，目前已知一个邀请连结只能给一个人使用，所以如果邀请连结公开，通常这个连结很快会被抢走，后面再点连结的人自然就无法邀请进入，因此建议邀请连结都私下传送。另外特别注意，目前产生邀请码有24小时的时效性，如果这个连结超过24小时没人使用，会自动失效，建议要邀请人的时候再产生邀请吗。

需要【朋友邀请】的可以私信我，有少量码出

Q：已经在Midjourney频道的人可以邀请我进入吗?

A：不行，官方把这个功能锁起来，只能透过邀请连结进入.

Q：如果愿意直接付费，是否也要等邀请码才能购买呢？

A：对，要先有邀请码才能进Midjourney，进Midjourney后才能购买.

Q：想问Midjourney跟Disco Diffusion的差别？

A：运算速度跟运算成果，我觉得都是Midjourney比较好，不需要安装程式码等复杂操作，比较好上手，Disco Diffusion目前最大优势是可以算动画，希望Midjourney之后能追加这功能。.

Q：等不到Midjourney邀请码怎么办？

A：或许可以尝试看看Disco Diffusion，至少它不用排队，或者找我邀请你加入Midjourney
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","4. Use example - More Processor.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Work/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3/obsidian-any-block/docs/en/4.%20Use%20example%20-%20More%20Processor.html","title":"Processor class","lang":"zh-CN","frontmatter":{"description":"The first three chapters introduce the various selectors, focusing on the list text to tree structure of the graph Processor class [list2mermaid] text--TextProcessor-->text text...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Work/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3/obsidian-any-block/docs/en/4.%20Use%20example%20-%20More%20Processor.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Processor class"}],["meta",{"property":"og:description","content":"The first three chapters introduce the various selectors, focusing on the list text to tree structure of the graph Processor class [list2mermaid] text--TextProcessor-->text text..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Processor class\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Processor class","slug":"processor-class","link":"#processor-class","children":[]},{"level":1,"title":"More Processor（Decorate Processor）","slug":"more-processor-decorate-processor","link":"#more-processor-decorate-processor","children":[{"level":2,"title":"Block Name","slug":"block-name","link":"#block-name","children":[{"level":4,"title":"Table heading","slug":"table-heading","link":"#table-heading","children":[]},{"level":4,"title":"code file name","slug":"code-file-name","link":"#code-file-name","children":[]},{"level":4,"title":"ohter block name","slug":"ohter-block-name","link":"#ohter-block-name","children":[]}]},{"level":2,"title":"fold","slug":"fold","link":"#fold","children":[]},{"level":2,"title":"Overflow folding","slug":"overflow-folding","link":"#overflow-folding","children":[]},{"level":2,"title":"Scroll","slug":"scroll","link":"#scroll","children":[]},{"level":2,"title":"black curtain","slug":"black-curtain","link":"#black-curtain","children":[]},{"level":2,"title":"add class / add div","slug":"add-class-add-div","link":"#add-class-add-div","children":[]}]},{"level":1,"title":"Custom processor","slug":"custom-processor","link":"#custom-processor","children":[]},{"level":1,"title":"More","slug":"more","link":"#more","children":[{"level":2,"title":"FAQ","slug":"faq","link":"#faq","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.69,"words":2307},"filePathRelative":"MdNote_Work/产品文档/obsidian-any-block/docs/en/4. Use example - More Processor.md","autoDesc":true}');export{k as comp,d as data};
