import{_ as i,e as n,g as e,o as a}from"./app-CbGUE4hV.js";const t={};function o(c,l){return a(),n("div",null,l[0]||(l[0]=[e('<h1 id="面试八股文" tabindex="-1"><a class="header-anchor" href="#面试八股文"><span>面试八股文</span></a></h1><h2 id="c-11" tabindex="-1"><a class="header-anchor" href="#c-11"><span>C++11</span></a></h2><h3 id="function、lambda、bind之间的关系" tabindex="-1"><a class="header-anchor" href="#function、lambda、bind之间的关系"><span>function、lambda、bind之间的关系</span></a></h3><ul><li>std::function模板 <ul><li>是什么？| 是一个抽象了函数参数以及函数返回值的类模板</li><li>抽象 <ul><li>把任意函数包装成一个对象，该对象可以保存、传递、复制</li><li>动态绑定，只需修改该对象（赋值不同的fucntion对象），实现类似多态的效果</li></ul></li><li>用途 <ul><li>保存普通函数，类的静态成员函数</li><li>保存仿函数</li><li>保存类成员函数</li></ul></li></ul></li><li>仿函数（函数对象） <ul><li>是什么？| 重载了操作符<code>()</code>的类</li><li>特征 <ul><li>可以有状态 ，通过变量进行存储状态</li><li>有状态的函数对象称之为闭包</li></ul></li></ul></li><li>Lambda表达式 <ul><li>是什么？| 一种方便创建匿名函数对象的语法糖</li><li>构成 <ul><li>[] 捕获列表 <ul><li>值捕获：默认只读不可改。mutable可读可写，并不会修改外部变量的值</li><li>引用捕获：可读可写，会修改外部变量的值</li><li>[] 指定函数可以访问的外部变量</li><li>本质：外部变量将转变为类的成员变量</li></ul></li><li>() 参数列表</li><li>-&gt; 指定返回值。可省略，因为有类型推导</li><li>{} 函数体</li></ul></li></ul></li></ul><h3 id="左值引用和右值引用的区别-右值引用的意义" tabindex="-1"><a class="header-anchor" href="#左值引用和右值引用的区别-右值引用的意义"><span>左值引用和右值引用的区别？右值引用的意义？</span></a></h3><ul><li><p>表达式</p><ul><li><p>泛左值</p><ul><li>左值</li><li>将亡值</li></ul></li><li><p>右值</p><ul><li>纯右值</li><li>将亡值</li></ul></li></ul></li><li><p>左值引用</p><ul><li>非常量：引用左值</li><li>常量：也能引用右值</li></ul></li><li><p>右值引用</p><ul><li>引用右值</li></ul></li><li><p>（从动机上猜测原因：肯定希望能引用就引用，因为能减少拷贝。而常量左值引用不可以修改内容，也就能无需地址。但非常量引用能修改地址，怕你强行引用做出危险操作）</p></li><li><p>用处：避免对象拷贝</p></li></ul><h3 id="c-11的智能指针种类以及使用场景" tabindex="-1"><a class="header-anchor" href="#c-11的智能指针种类以及使用场景"><span>C++11的智能指针种类以及使用场景？</span></a></h3><h3 id="c-11-override-final-关键字的作用" tabindex="-1"><a class="header-anchor" href="#c-11-override-final-关键字的作用"><span>C++11 override, final 关键字的作用？</span></a></h3><h3 id="c-11-类型推导" tabindex="-1"><a class="header-anchor" href="#c-11-类型推导"><span>C++11 类型推导</span></a></h3><h3 id="c-11-用过什么新特性" tabindex="-1"><a class="header-anchor" href="#c-11-用过什么新特性"><span>C++11 用过什么新特性？</span></a></h3>',10)]))}const d=i(t,[["render",o],["__file","08. C__11.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/08.%20C__11.html","title":"面试八股文","lang":"zh-CN","frontmatter":{"description":"面试八股文 C++11 function、lambda、bind之间的关系 std::function模板 是什么？| 是一个抽象了函数参数以及函数返回值的类模板 抽象 把任意函数包装成一个对象，该对象可以保存、传递、复制 动态绑定，只需修改该对象（赋值不同的fucntion对象），实现类似多态的效果 用途 保存普通函数，类的静态成员函数 保存仿函数 ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/08.%20C__11.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"面试八股文"}],["meta",{"property":"og:description","content":"面试八股文 C++11 function、lambda、bind之间的关系 std::function模板 是什么？| 是一个抽象了函数参数以及函数返回值的类模板 抽象 把任意函数包装成一个对象，该对象可以保存、传递、复制 动态绑定，只需修改该对象（赋值不同的fucntion对象），实现类似多态的效果 用途 保存普通函数，类的静态成员函数 保存仿函数 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试八股文\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.59,"words":477},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/08. C++11.md","excerpt":"\\n<h2>C++11</h2>\\n<h3>function、lambda、bind之间的关系</h3>\\n<ul>\\n<li>std::function模板\\n<ul>\\n<li>是什么？| 是一个抽象了函数参数以及函数返回值的类模板</li>\\n<li>抽象\\n<ul>\\n<li>把任意函数包装成一个对象，该对象可以保存、传递、复制</li>\\n<li>动态绑定，只需修改该对象（赋值不同的fucntion对象），实现类似多态的效果</li>\\n</ul>\\n</li>\\n<li>用途\\n<ul>\\n<li>保存普通函数，类的静态成员函数</li>\\n<li>保存仿函数</li>\\n<li>保存类成员函数</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>仿函数（函数对象）\\n<ul>\\n<li>是什么？| 重载了操作符<code>()</code>的类</li>\\n<li>特征\\n<ul>\\n<li>可以有状态 ，通过变量进行存储状态</li>\\n<li>有状态的函数对象称之为闭包</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>Lambda表达式\\n<ul>\\n<li>是什么？| 一种方便创建匿名函数对象的语法糖</li>\\n<li>构成\\n<ul>\\n<li>[] 捕获列表\\n<ul>\\n<li>值捕获：默认只读不可改。mutable可读可写，并不会修改外部变量的值</li>\\n<li>引用捕获：可读可写，会修改外部变量的值</li>\\n<li>[] 指定函数可以访问的外部变量</li>\\n<li>本质：外部变量将转变为类的成员变量</li>\\n</ul>\\n</li>\\n<li>() 参数列表</li>\\n<li>-&gt; 指定返回值。可省略，因为有类型推导</li>\\n<li>{} 函数体</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/08. C++11.md","value":{"title":"08. C++11","path":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/08. C++11.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,p as data};
