import{_ as t,c as l,e as d,o as n}from"./app-CcegWvWz.js";const i={};function o(r,e){return n(),l("div",null,e[0]||(e[0]=[d('<h1 id="数据内存管理思想" tabindex="-1"><a class="header-anchor" href="#数据内存管理思想"><span>数据内存管理思想</span></a></h1><h2 id="数据的属性性质" tabindex="-1"><a class="header-anchor" href="#数据的属性性质"><span>数据的属性性质</span></a></h2><h3 id="持续性-存储方案-4种" tabindex="-1"><a class="header-anchor" href="#持续性-存储方案-4种"><span>持续性（存储方案）（4种）</span></a></h3><p>描述了数据保存在内存中的时间</p><table><thead><tr><th>持续性（存储方案）</th><th>持续性说明</th><th>定义方法</th></tr></thead><tbody><tr><td><strong>自动存储</strong>持续性</td><td>执行完函数或代码块时，内存被释放</td><td>函数中定义（包括函数参数）的变量<br>声明为<code>static</code>则例外</td></tr><tr><td><strong>静态存储</strong>持续性</td><td>程序整个运行过程中都存在</td><td>全局声明、<code>static</code>声明</td></tr><tr><td><strong>线程存储</strong>持续性（C++11）</td><td>声明周期与所属线程一样长</td><td></td></tr><tr><td><strong>动态存储</strong>持续性</td><td>new运算符分配的内存一直存在，直到delete运算符将其释放或程序结束<br>有时被称为<code>自动存储空间</code>（<em>free store</em>）或<code>堆</code>（<em>heap</em>）（定位new除外）<br>其内存管理更复杂，难以跟踪新分配内存的位置</td><td><code>new - delete</code>或<code>new[] - delete[]</code></td></tr></tbody></table><h3 id="属性性质-作用域-scope" tabindex="-1"><a class="header-anchor" href="#属性性质-作用域-scope"><span>属性性质 &gt; 作用域（<em>scope</em>）</span></a></h3><p>描述了名称在文件（翻译单元）的多大范围内可见</p><table><thead><tr><th>作用域</th><th>说明</th><th>定义方式</th></tr></thead><tbody><tr><td><strong>局部</strong>作用域</td><td>只在定义它的代码块可用</td><td>在代码块（包括函数参数）内定义</td></tr><tr><td><strong>全局</strong>作用域（也叫文件作用域）</td><td>在定义位置到文件结尾之间可用</td><td>在文件中定义</td></tr><tr><td><strong>函数原型</strong>作用域（<em>function prototype scope</em>）</td><td>只在包含参数列表的括号内可以（可理解为占位符）</td><td>函数原型的定义</td></tr></tbody></table><h4 id="局部作用域的覆盖-隐藏性" tabindex="-1"><a class="header-anchor" href="#局部作用域的覆盖-隐藏性"><span>局部作用域的覆盖/隐藏性</span></a></h4><ul><li>局部变量隐藏全局变量 <ul><li>局部变量名与外部变量名相同时，我们说新的定义隐藏了（hide）以前的定义</li><li>在代码块内新定义可见，旧定义暂时不可见。当程序离开代码块时，原来的定义又重新可见</li></ul></li><li>仍然使用全局变量版本 <ul><li>当定义了与外部变量名同名的局部变量后仍然想使用全局变量版本的变量，可使用<code>作用域解析运算符::</code></li></ul></li></ul><h4 id="文件的-自动变量" tabindex="-1"><a class="header-anchor" href="#文件的-自动变量"><span>文件的“自动变量”</span></a></h4><p>好像可以用auto来隐藏外面导入的变量，不太记得了，有没有记错？</p><h4 id="作用域、潜在作用域、声明区域-补充" tabindex="-1"><a class="header-anchor" href="#作用域、潜在作用域、声明区域-补充"><span>作用域、潜在作用域、声明区域 补充</span></a></h4><ul><li>三者 <ul><li><strong>声明区域</strong>（<em>declaration region</em>）：是可以在其中进行声明的区域 <ul><li>例：可以在函数外面声明全局变量，即全局变量的声明区域为其声明所在的文件</li></ul></li><li><strong>潜在作用域</strong>（<em>potential scope</em>）：从<strong>声明点</strong>开始到<strong>声明区域的结尾</strong>（包括不可见的区域）</li><li><strong>作用域</strong>（<em>scope</em>）：变量对程序而言可见的范围</li></ul></li><li>关系 <ul><li>一般而言：声明区域 &gt; 潜在作用域 &gt;= 作用域</li><li>潜在作用域与作用域区分 <ul><li>如局部变量隐藏全局变量时的语句块，语句块内部是对应的全局变量的<strong>潜在作用域</strong>而不是<strong>作用域</strong></li><li>虽然仍然能使用作用域解析运算符使用，但并不是常规的变量的作用域</li></ul></li></ul></li></ul><h3 id="属性性质-链接性-linkage" tabindex="-1"><a class="header-anchor" href="#属性性质-链接性-linkage"><span>属性性质 &gt; 链接性（<em>linkage</em>）</span></a></h3><p>描述了名称如何在不同单元间共享</p><table><thead><tr><th>链接性</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td><strong>外部</strong>链接性</td><td>可在文件间共享</td><td>全局的非<code>static</code>声明</td></tr><tr><td><strong>内部</strong>链接性</td><td>只能由一个文件中的函数共享</td><td><code>static</code>声明的变量、或使用<code>匿名名称空间</code>声明</td></tr><tr><td><strong>没有</strong>链接性</td><td>不能共享</td><td>自动变量名</td></tr></tbody></table><ul><li>注：具有外部链接性的变量，可在其他文件中使用关键字<code>extern</code>声明来使用它</li><li>注：还有另一种形式的链接性：叫<strong>语言</strong>链接性。并不是指变量的链接性，而是指语言所使用的链接性 <ul><li>这里的“链接性”，更像是指语言使用什么方法去翻译函数名如： <ul><li><code>C语言链接性</code>（<em>C language linkage</em>） <ul><li>例如：将函数名<code>spiff</code>翻译成<code>_spiff</code></li><li>（C语言没有名称修饰）</li></ul></li><li><code>C++语言链接性</code>（<em>C++ language linkage</em>） <ul><li>例如：将函数名<code>spiff(int)</code>转换为<code>_spoff_i</code></li><li>例如：将函数名<code>spiff(double,double)</code>转换为<code>_spiff_d_d</code></li><li>（C++有名称修饰）</li></ul></li></ul></li><li>因为C++的<code>名称修饰</code>所带来的影响，使C++的语言链接性与C不同。这导致了一些问题：（详见名称修饰所带来的影响） <ul><li>C++使用C的库文件中预编译的函数时，可能找不到（C语言不允许函数重载，并没有名称修饰）</li><li>解决方案：用函数原型来指出要使用的约定：</li><li><code>extern &quot;C&quot; void spiff(int);</code>，使用C语言链接性 查找函数名</li><li><code>extern void spoff(int);</code>，默认使用C++语言链接性 查找函数名</li><li><code>extern &quot;C++&quot; void spoff(int);</code>，显示使用C++语言链接性 查找函数名</li></ul></li></ul></li></ul><h4 id="限制链接性的方法" tabindex="-1"><a class="header-anchor" href="#限制链接性的方法"><span><strong>限制链接性的方法</strong></span></a></h4><p>有的名称是外部或内部链接性，但并不意味着可以直接访问</p><p>可能会需要通过一些方式（如名称空间、作用域解析符、句点或箭头运算符）才能访问到</p><table><thead><tr><th>需要访问的内容</th><th>访问手段的<strong>限制</strong></th></tr></thead><tbody><tr><td>普通的外部链接变量</td><td>使用<code>extern</code>声明后访问</td></tr><tr><td>被当局部变量隐藏的全局变量</td><td>使用<code>作用域解析运算符::</code>访问</td></tr><tr><td>名称空间</td><td>使用<code>名称空间名</code>+<code>作用域解析运算符::</code>，或<code>using声明</code>访问（3种方式）</td></tr><tr><td>结构体成员</td><td>使用<code>句点运算符</code>，或<code>箭头运算符</code>（指针时）访问</td></tr><tr><td>类数据成员或成员方法</td><td><strong>在类声明文件的类作用域中</strong>：可直接访问<br><strong>在类实现文件中</strong>：用作用域解析运算符访问<code>公有</code>和<code>私有</code>函数<br><strong>在公有派生类中</strong>：用作用域解析运算符访问<code>公有</code>和<code>保护</code>成员<br><strong>在类实现文件的成员函数中</strong>：可直接访问<br><strong>在类实现文件的非成员友元函数中</strong>：可直接访问<br><strong>在客户文件中</strong>：通过实例对象与<code>句点运算符</code>，或<code>箭头运算符</code>（指针时）访问</td></tr><tr><td>类实现代码以外访问类私有成员</td><td>通过<code>友元</code>访问（<code>友元函数</code>或<code>友元类</code>）</td></tr></tbody></table><h4 id="导入的方式共享" tabindex="-1"><a class="header-anchor" href="#导入的方式共享"><span><strong>导入的方式共享</strong></span></a></h4><p>链接性主要是描述名称在不同单元间如何共享，而使用导入的方式（在C++通过预编译的方式实现）则不受此限制</p><p>（但本质是通过预编译的方式无视链接性合并两个文件）</p><p>如<code>#include 头文件名</code></p><h2 id="数据的底层情况" tabindex="-1"><a class="header-anchor" href="#数据的底层情况"><span>数据的底层情况</span></a></h2><h3 id="底层本质" tabindex="-1"><a class="header-anchor" href="#底层本质"><span>底层本质</span></a></h3><table><thead><tr><th>持续性</th><th>存储区域</th><th>底层本质与表现</th></tr></thead><tbody><tr><td><strong>静态存储</strong></td><td>全局/静态区域</td><td>在编译期就为其<strong>分配内存</strong>（声明为const例外），在程序结束时<strong>释放</strong></td></tr><tr><td><strong>（const全局变量）</strong></td><td>只读数据段</td><td>第一次使用时为其<strong>分配内存</strong>，在程序结束时<strong>释放</strong></td></tr><tr><td><strong>自动存储</strong></td><td>栈</td><td>栈中内存随函数的开始和结束而<strong>增减</strong>，并遵守LIFO（先进后出）</td></tr><tr><td><strong>动态存储</strong></td><td>自由存储区/堆</td><td>new时<strong>分配内存</strong>，delete或程序结束时<strong>释放</strong></td></tr><tr><td><strong>线程存储</strong></td><td></td><td></td></tr></tbody></table><h3 id="编译器使用的内存-内存四区" tabindex="-1"><a class="header-anchor" href="#编译器使用的内存-内存四区"><span>编译器使用的内存（内存四区）</span></a></h3><ul><li>内存四区 <ul><li>栈区</li><li>堆区</li><li>全局区（/静态区）</li><li>代码区</li></ul></li><li>通常，编译器使用三块独立的内存 <ul><li>一块用于静态变量（可能再细分）（全局/静态存储区）</li><li>一块用于自动变量（栈）</li><li>一块用于动态存储（堆）</li></ul></li></ul><p>所有到底是四区还是三区？</p><h3 id="栈与堆" tabindex="-1"><a class="header-anchor" href="#栈与堆"><span>栈与堆</span></a></h3><h4 id="函数调用与结束时的栈" tabindex="-1"><a class="header-anchor" href="#函数调用与结束时的栈"><span>函数调用与结束时的栈</span></a></h4><ul><li>程序使用两个指针来跟踪栈，一个指向栈底（栈开始的位置），一个指向栈顶（下一个可用的内存单元）</li><li>遵循<code>LIFO</code>（后进先出）原则</li><li>注意：当函数结束时，栈顶指针被重新设置。这时传入栈的数值实际没有被删除，只是不再被标记了</li></ul><h4 id="栈、堆-与虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#栈、堆-与虚拟地址空间"><span>栈、堆，与虚拟地址空间</span></a></h4><ul><li>Linux进程的虚拟地址空间设计：（地址从下往上增大）</li></ul><table><thead><tr><th style="text-align:center;">虚拟地址空间</th><th>补充说明</th></tr></thead><tbody><tr><td style="text-align:center;">内核虚拟内存</td><td>【顶部区域】不允许应用程序读写和调用，必须通过调用内核来执行这些操作</td></tr><tr><td style="text-align:center;">用户<strong>栈</strong><br>（往下增长）</td><td>运行时创建<br>【动态大小】每次调用函数栈增长，函数返回时栈会收缩</td></tr><tr><td style="text-align:center;">↕</td><td></td></tr><tr><td style="text-align:center;">共享库的内存映射区域<br>（往上增长）</td><td>【动态大小】存放像C标准库和数学库这样共享库代码和数据的地方</td></tr><tr><td style="text-align:center;">↑</td><td></td></tr><tr><td style="text-align:center;">运行时<strong>堆</strong><br>（往上增长）</td><td>运行时由malloc创建<br>【动态大小】调用malloc和free这样的C标准库函数时可动态扩展和收缩</td></tr><tr><td style="text-align:center;">读/写数据</td><td>从hello可执行文件加载进来的程序代码和数据</td></tr><tr><td style="text-align:center;">只读的代码和数据</td><td>【开始区域】从hello可执行文件加载进来的程序代码和数据</td></tr></tbody></table><h4 id="栈、堆-与内存泄露" tabindex="-1"><a class="header-anchor" href="#栈、堆-与内存泄露"><span>栈、堆，与内存泄露</span></a></h4><p>内存泄露</p><ul><li>根本原因：使用new运算符在自由存储空间（或堆）上创建变量后若没有调用delete</li><li>直接原因：即使指向该内存的<strong>指针</strong>因为作用域规则和对象周期的原因<strong>被释放</strong>，在<strong>堆上</strong>分配的变量或<strong>内存</strong>也将<strong>继续存在</strong>，即导致了内存泄露</li><li>严重后果：被泄露的内存将在程序的整个生命周期内都不可用。这些内存被分配出去但却再也无法收回</li><li>极端后果：内存泄露严重，以至于应用程序可用的内存被耗尽，出现<code>内存耗尽错误</code>，程序崩溃</li><li>避免手段：同时使用new和delete运算符，而C++<code>智能指针</code>有助于自动完成这种任务</li></ul><h2 id="数据的储存方式-具体方案" tabindex="-1"><a class="header-anchor" href="#数据的储存方式-具体方案"><span>数据的储存方式（具体方案）</span></a></h2><ul><li>上面的持续性、作用域、链接性并非可以任意组合，有的组合是没有的 <ul><li>比如：<strong>作用域</strong>为<strong>代码块</strong>或<strong>函数原型作用域</strong>时，<strong>链接性</strong>必然是<strong>无</strong></li></ul></li></ul><p>注：这里没有写new、动态、类变量、函数、线程存储</p><table><thead><tr><th>存储描述</th><th>持续性</th><th>作用域</th><th>链接性</th><th>如何声明</th></tr></thead><tbody><tr><td>自动</td><td>自动</td><td>代码块</td><td>无</td><td>在代码块中</td></tr><tr><td>寄存器</td><td>自动</td><td>代码块</td><td>无</td><td>在代码块中，使用关键字<code>register</code></td></tr><tr><td>静态，无链接性</td><td>静态</td><td>代码块</td><td>无</td><td>在代码块中，使用关键字<code>static</code></td></tr><tr><td>静态，外部链接性</td><td>静态</td><td>文件</td><td>外部</td><td>不再任何函数内</td></tr><tr><td>静态，内部链接性</td><td>静态</td><td>文件</td><td>内部</td><td>不再任何函数内，使用关键字<code>static</code></td></tr><tr><td>动态new</td><td>动态</td><td>代码块/文件</td><td>无/内部/外部</td><td><code>new - delete</code>或<code>new[] - delete[]</code></td></tr><tr><td>线程存储</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面具体介绍每种具体方案</p><h3 id="自动变量" tabindex="-1"><a class="header-anchor" href="#自动变量"><span>自动变量</span></a></h3><ul><li><p>简概</p><ul><li>是一个局部变量，其作用域为包括它的代码块</li></ul></li><li><p>定义</p><ul><li>在<strong>函数内部定义</strong>的<strong>常规变量</strong>使用自动存储空间，被称为<code>自动变量</code>（<em>automatic variable</em>）</li><li>auto补充：在C++11中，<code>auto</code>用于自动类型推断，但在此之前其含义用于显示指出变量为自动存储</li></ul></li><li><p>存储</p><ul><li>栈中，后进先出（<em>LIFO</em>），在程序执行过程中，栈将不断地增大和缩小</li><li>在所属函数被调用时自动产生（被分配内存），在该函数结束时自动消亡（释放内存）</li></ul></li><li><p>初始化（旧版本问题）</p><ul><li>传统的<code>K&amp;R C</code>，不允许初始化自动数组和结构，值允许初始化静态数组和结构</li><li><code>ANSI C</code>和<code>C++</code>，允许对这两种数组和结构进行初始化</li></ul></li></ul><h3 id="寄存器变量" tabindex="-1"><a class="header-anchor" href="#寄存器变量"><span>寄存器变量</span></a></h3><ul><li>简概 <ul><li>最初C语言用于将一个自动变量存储于CPU寄存器，以提高访问变量的速度</li><li>其只能用于原本就是自动的变量（这样设计的原因可能是要让它视情况销毁，而不要一直留在寄存器中占用内存）</li></ul></li><li>用法 <ul><li>用<code>register</code>声明，如：<code>register int count_fast;</code></li></ul></li><li>使用场景 <ul><li>现在几乎没有任何用处 <ul><li>硬件越来越复杂：还有多级缓存</li><li>编译器越来越智能：当某一变量用得多了，编译器可自动对其做特殊处理，而不需要手动去注明</li></ul></li><li>使用它的唯一原因 <ul><li>指出程序员想使用一个自动变量，当<code>auto</code>用</li></ul></li></ul></li></ul><h3 id="静态存储" tabindex="-1"><a class="header-anchor" href="#静态存储"><span>静态存储</span></a></h3><ul><li>使用：两种方法 <ul><li>全局静态存储：在函数外面定义</li><li>局部静态存储：在声明变量时使用关键字<code>static</code></li></ul></li><li>初始化 <ul><li>如果没有显式初始化静态变量，则进行零初始化（可以简单理解为设置为0）</li><li>但这里的零指对于标量类型，会转换为合适的类型。比如： <ul><li>指针的零初始化：会被初始化相应的内部表示（0可以表示空指针，但内部可能采用非0表示）</li><li>结构成员的零初始化：其填充位会被设置为零</li></ul></li></ul></li><li>初始化的类型 <ul><li><code>静态初始化</code>：<code>零初始化</code>和<code>常量表达式初始化</code>的统称（C++新增关键字<code>constexpr</code>可增加创建常量表达式的方式）</li><li><code>动态初始化</code>：变量将在编译后初始化</li></ul></li><li>补充：批量声明静态变量的方法 <ul><li>可以使用<code>匿名名称空间</code></li></ul></li></ul><h3 id="自由存储空间-动态联编" tabindex="-1"><a class="header-anchor" href="#自由存储空间-动态联编"><span>自由存储空间（动态联编）</span></a></h3><p>使用new和delete运算符，管理一个内存池</p><h4 id="自由存储空间-简概-与c不同" tabindex="-1"><a class="header-anchor" href="#自由存储空间-简概-与c不同"><span>自由存储空间 - 简概（与C不同）</span></a></h4><ul><li><p>指针使用注意项、new方式使用指针</p><ul><li><p>C++创建指针时，计算机分配用来存储地址的内存，但<strong>不会</strong>分配用来存储指针所指向的数据的内存</p><p>即不能给<strong>未有地址</strong>指向的指针的解除引用值赋值，像这样：<code>long * pi_val; *pi_val = 1;</code>会报错</p></li><li><p>但使用<code>new</code>运算符<strong>可以</strong>立即返回指针一个<strong>未命名地址空间</strong>，这种情况下只能通过指针来访问该内存</p></li></ul></li><li><p>内存的分配与释放</p><ul><li>分配：<code>malloc</code>、<code>new</code>、<code>new[]</code>、<code>new()</code>、<code>new()[]</code>这种函数被称为<code>分配函数</code>（<em>alloction function</em>），它们位于全局名称空间中</li><li>释放：<code>delete</code>、<code>delete[]</code>这种函数被称为<code>释放函数</code>（<em>deallocation function</em>） <ul><li>使用内存后要将内存还给内存池，归还或释放（free）的内存可供程序的其他部分使用</li></ul></li></ul></li><li><p>C语言和C++方法区别</p><ul><li>C语言：使用库函数<code>malloc()</code>来分配内存</li><li>C++：<code>new</code>或<code>new[]</code>运算符分配内存</li></ul></li><li><p><strong>注意规则</strong></p><ul><li><p><strong>不要</strong>使用<code>delete</code>来释放不是<code>new</code>分配的内存</p><ul><li><p>后果：<mark><strong>一定</strong>要配对地使用<code>new</code>和<code>delete</code></mark>，否则将发生<mark>内存泄露</mark>（memory leak）</p><p>也就是说，被分配的内存再也无法使用了。如果内存泄露严重，则程序将由于不断寻找更多内存而终止</p></li><li><p>举例：<strong>不能</strong>使用delete来释放声明变量所获得的内存</p></li><li><p>其他补充：然而对空指针使用delete是安全的</p></li></ul></li><li><p><strong>不要</strong>使用<code>delete</code>释放同一个内存块两侧</p><ul><li>后果：这样做的结果将是不确定的，意味着什么情况都可能发生</li></ul></li><li><p>如果使用<code>new[]</code>为数组分配内存，则应使用<code>delete[]</code>来释放</p></li><li><p>如果使用<code>new</code>为一个实体分配内存，则应使用<code>delete</code>来释放</p></li><li><p>释放内存<strong>不会</strong>删除指针本身，可以继续将该指针重新分配一个新的内存块</p></li><li><p><strong>不要</strong>创建两个指向同一内存块的指针，这将增加错误地删除同一个内存块两侧的可能性</p></li></ul></li></ul><h4 id="定位new运算符" tabindex="-1"><a class="header-anchor" href="#定位new运算符"><span>定位new运算符</span></a></h4><p>定位（<em>placement</em>）new运算符，能指定要使用的位置</p><ul><li>使用 <ul><li>先包含头文件new：<code>#include &lt;new&gt;</code></li><li>写法举例：<code>char buffer[50]; p = new(buffer) chaff; ap = new(buffer) int[20];</code></li></ul></li><li>定位new与new的区别 <ul><li>定位new不跟踪哪些内存单元已经被使用，也不查找未使用的内存块<br> 所以通常需要先创建一块可用的内存区域（如使用定长数组来声明一块区域）再使用定位new，<mark>否则可能会覆盖原有的一些数据（坑）</mark></li><li>当定位new不是指向堆（一般情况下都不指向堆），而指向全局/静态内存区或者栈中<br> 则不应该对其使用<code>delete</code>/<code>delete[]</code>，<code>delete</code>只能对堆区域使用，<mark>否则可能会引起程序崩溃（大坑）</mark></li></ul></li></ul><h4 id="【功能拓展】new-x-动态数组-字符串" tabindex="-1"><a class="header-anchor" href="#【功能拓展】new-x-动态数组-字符串"><span>【功能拓展】new x 动态数组 / 字符串</span></a></h4><ul><li><p><strong>内存创建和释放</strong></p><ul><li><p>创建通用格式：<code>typeName * pointer_name = new typeName</code></p><p>例：<code>int * pn = new int</code>，会分配一个适合存储int的内存并返回其地址</p></li><li><p>释放通用格式：<code>delete pointer_name</code></p></li></ul></li><li><p><strong>创建和释放动态数组（new方式）</strong>（用武之地）</p><ul><li>创建通用格式：<code>type_name * pointer_name = new type_name [num_elements]</code><br> 例：<code>int * pn = new int [10]</code>、字符串：<code>char * ps = new char [10]</code></li></ul></li><li><p>释放通用格式：<code>delete [] pointer_name</code><br> （程序在new时就会跟踪分配的内存量，delete时不需要再次输入也不能输出。但这里的内存量不公用，即不能使用<code>sizeof</code>运算符来确定）<br> 例：<code>delte [] psome</code></p></li><li><p><strong>使用动态数组</strong></p><ul><li>可以把指针当数组名用，<code>pointer_name[n]</code>访问序列为n的元素</li></ul></li></ul><h4 id="【功能拓展】new-x-动态结构" tabindex="-1"><a class="header-anchor" href="#【功能拓展】new-x-动态结构"><span>【功能拓展】new x 动态结构</span></a></h4><p>（类与结构非常方式，这里的技术也适用于类）</p><ul><li>使用 <ul><li>创建实例：和创建动态数组一样，例<code>inflatable * ps = new inflatable;</code></li><li>访问成员：不能直接使用句点运算符使用（没有名称，只有地址） <ul><li>可以使用箭头成员运算符<code>-&gt;</code>，例<code>ps -&gt; price</code></li><li>也可以先接触引用为<code>结构体本身</code>再使用句点运算符，例<code>(*ps).price</code></li><li>两种方法完全<strong>等价</strong></li></ul></li></ul></li></ul><h4 id="【总结】什么时候不delete" tabindex="-1"><a class="header-anchor" href="#【总结】什么时候不delete"><span><mark><strong>【总结】什么时候不delete</strong></mark></span></a></h4><p>一般来说new完都需要delete，否则内存泄露，只有以下情况例外</p><ul><li>delete过一次 <ul><li>QT的对象树机制中，QObject对象不需要手动delete</li><li>智能指针、智能引用</li></ul></li><li>定位new</li><li>程序结束，系统释放</li></ul><hr><p>其他补充</p><ul><li>容易忘记delete：构造函数中new完要及时或在析构函数中delete</li><li>容易多次delete：析构函数中delete构造函数的new，当关闭程序时可能会多析构一次</li><li>delete对象指针会自动调用析构函数</li></ul><h3 id="线程存储-c-新增" tabindex="-1"><a class="header-anchor" href="#线程存储-c-新增"><span>线程存储（C++新增）</span></a></h3><p>略</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>',73)]))}const a=t(i,[["render",o],["__file","02. 数据内存管理思想.html.vue"]]),s=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/04.%20%E4%BC%98%E5%8C%96/02.%20%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%9D%E6%83%B3.html","title":"数据内存管理思想","lang":"zh-CN","frontmatter":{"description":"数据内存管理思想 数据的属性性质 持续性（存储方案）（4种） 描述了数据保存在内存中的时间 属性性质 > 作用域（scope） 描述了名称在文件（翻译单元）的多大范围内可见 局部作用域的覆盖/隐藏性 局部变量隐藏全局变量 局部变量名与外部变量名相同时，我们说新的定义隐藏了（hide）以前的定义 在代码块内新定义可见，旧定义暂时不可见。当程序离开代码块时...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/04.%20%E4%BC%98%E5%8C%96/02.%20%E6%95%B0%E6%8D%AE%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%80%9D%E6%83%B3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"数据内存管理思想"}],["meta",{"property":"og:description","content":"数据内存管理思想 数据的属性性质 持续性（存储方案）（4种） 描述了数据保存在内存中的时间 属性性质 > 作用域（scope） 描述了名称在文件（翻译单元）的多大范围内可见 局部作用域的覆盖/隐藏性 局部变量隐藏全局变量 局部变量名与外部变量名相同时，我们说新的定义隐藏了（hide）以前的定义 在代码块内新定义可见，旧定义暂时不可见。当程序离开代码块时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据内存管理思想\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"数据内存管理思想","slug":"数据内存管理思想","link":"#数据内存管理思想","children":[{"level":2,"title":"数据的属性性质","slug":"数据的属性性质","link":"#数据的属性性质","children":[{"level":3,"title":"持续性（存储方案）（4种）","slug":"持续性-存储方案-4种","link":"#持续性-存储方案-4种","children":[]},{"level":3,"title":"属性性质 > 作用域（scope）","slug":"属性性质-作用域-scope","link":"#属性性质-作用域-scope","children":[{"level":4,"title":"局部作用域的覆盖/隐藏性","slug":"局部作用域的覆盖-隐藏性","link":"#局部作用域的覆盖-隐藏性","children":[]},{"level":4,"title":"文件的“自动变量”","slug":"文件的-自动变量","link":"#文件的-自动变量","children":[]},{"level":4,"title":"作用域、潜在作用域、声明区域 补充","slug":"作用域、潜在作用域、声明区域-补充","link":"#作用域、潜在作用域、声明区域-补充","children":[]}]},{"level":3,"title":"属性性质 > 链接性（linkage）","slug":"属性性质-链接性-linkage","link":"#属性性质-链接性-linkage","children":[{"level":4,"title":"限制链接性的方法","slug":"限制链接性的方法","link":"#限制链接性的方法","children":[]},{"level":4,"title":"导入的方式共享","slug":"导入的方式共享","link":"#导入的方式共享","children":[]}]}]},{"level":2,"title":"数据的底层情况","slug":"数据的底层情况","link":"#数据的底层情况","children":[{"level":3,"title":"底层本质","slug":"底层本质","link":"#底层本质","children":[]},{"level":3,"title":"编译器使用的内存（内存四区）","slug":"编译器使用的内存-内存四区","link":"#编译器使用的内存-内存四区","children":[]},{"level":3,"title":"栈与堆","slug":"栈与堆","link":"#栈与堆","children":[{"level":4,"title":"函数调用与结束时的栈","slug":"函数调用与结束时的栈","link":"#函数调用与结束时的栈","children":[]},{"level":4,"title":"栈、堆，与虚拟地址空间","slug":"栈、堆-与虚拟地址空间","link":"#栈、堆-与虚拟地址空间","children":[]},{"level":4,"title":"栈、堆，与内存泄露","slug":"栈、堆-与内存泄露","link":"#栈、堆-与内存泄露","children":[]}]}]},{"level":2,"title":"数据的储存方式（具体方案）","slug":"数据的储存方式-具体方案","link":"#数据的储存方式-具体方案","children":[{"level":3,"title":"自动变量","slug":"自动变量","link":"#自动变量","children":[]},{"level":3,"title":"寄存器变量","slug":"寄存器变量","link":"#寄存器变量","children":[]},{"level":3,"title":"静态存储","slug":"静态存储","link":"#静态存储","children":[]},{"level":3,"title":"自由存储空间（动态联编）","slug":"自由存储空间-动态联编","link":"#自由存储空间-动态联编","children":[{"level":4,"title":"自由存储空间 - 简概（与C不同）","slug":"自由存储空间-简概-与c不同","link":"#自由存储空间-简概-与c不同","children":[]},{"level":4,"title":"定位new运算符","slug":"定位new运算符","link":"#定位new运算符","children":[]},{"level":4,"title":"【功能拓展】new x 动态数组 / 字符串","slug":"【功能拓展】new-x-动态数组-字符串","link":"#【功能拓展】new-x-动态数组-字符串","children":[]},{"level":4,"title":"【功能拓展】new x 动态结构","slug":"【功能拓展】new-x-动态结构","link":"#【功能拓展】new-x-动态结构","children":[]},{"level":4,"title":"【总结】什么时候不delete","slug":"【总结】什么时候不delete","link":"#【总结】什么时候不delete","children":[]}]},{"level":3,"title":"线程存储（C++新增）","slug":"线程存储-c-新增","link":"#线程存储-c-新增","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]}]}],"git":{},"readingTime":{"minutes":15.13,"words":4540},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/02. 数据内存管理思想.md","excerpt":"\\n<h2>数据的属性性质</h2>\\n<h3>持续性（存储方案）（4种）</h3>\\n<p>描述了数据保存在内存中的时间</p>\\n<table>\\n<thead>\\n<tr>\\n<th>持续性（存储方案）</th>\\n<th>持续性说明</th>\\n<th>定义方法</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>自动存储</strong>持续性</td>\\n<td>执行完函数或代码块时，内存被释放</td>\\n<td>函数中定义（包括函数参数）的变量<br>声明为<code>static</code>则例外</td>\\n</tr>\\n<tr>\\n<td><strong>静态存储</strong>持续性</td>\\n<td>程序整个运行过程中都存在</td>\\n<td>全局声明、<code>static</code>声明</td>\\n</tr>\\n<tr>\\n<td><strong>线程存储</strong>持续性（C++11）</td>\\n<td>声明周期与所属线程一样长</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><strong>动态存储</strong>持续性</td>\\n<td>new运算符分配的内存一直存在，直到delete运算符将其释放或程序结束<br>有时被称为<code>自动存储空间</code>（<em>free store</em>）或<code>堆</code>（<em>heap</em>）（定位new除外）<br>其内存管理更复杂，难以跟踪新分配内存的位置</td>\\n<td><code>new - delete</code>或<code>new[] - delete[]</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/02. 数据内存管理思想.md","value":{"title":"02. 数据内存管理思想","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/04. 优化/02. 数据内存管理思想.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,s as data};
