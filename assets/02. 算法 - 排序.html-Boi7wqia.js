import{_ as t,c as n,e as a,b as s,o as i,r as p}from"./app-Dnpl954R.js";const r={};function h(d,l){const e=p("Mermaid");return i(),n("div",null,[l[0]||(l[0]=a('<h1 id="排序" tabindex="-1"><a class="header-anchor" href="#排序"><span>排序</span></a></h1><h2 id="十大排序算法" tabindex="-1"><a class="header-anchor" href="#十大排序算法"><span>十大排序算法</span></a></h2><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h3><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h3><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h3><h4 id="反向冒泡" tabindex="-1"><a class="header-anchor" href="#反向冒泡"><span>反向冒泡</span></a></h4><h4 id="真插入排序-可链表优化" tabindex="-1"><a class="header-anchor" href="#真插入排序-可链表优化"><span>真插入排序 (可链表优化)</span></a></h4><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h3><p>归并排序的扩展 —— 小和问题和逆序对问题</p><p>这两个问题都很经典</p><h4 id="题-小和问题" tabindex="-1"><a class="header-anchor" href="#题-小和问题"><span>题（小和问题）</span></a></h4><p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。</p><p>例子：[1,3,4,2,5] 1左边比1小的数，没有 3左边比3小的数，1 4左边比4小的数，1+3=4 2左边比2小的数，1 5左边比5小的数，1+3+4+2=10</p><p>整个数组的小和为 1+1+3+1+1+3+4+2=16</p><ul><li>暴力解法：全部便利，O(n^2)，但一看就知道有很多额外的比较，浪费了很多信息</li><li>O(nlogn)算法：1的右边有几个比他大，就产生几个1，后面同理。这里有个步骤是求：某个数右边有多少个比他大的数，此时就可以使用归并排序 <ul><li>详细过程：先看最后的结果吧：134和25两个部分，此时左侧的局部小和 和 右侧的局部小和，都已经知道了，此时只需要看这两个部分之间产生的小和就可以了。此时就可以使用归并排序</li><li>注意要点，归并merge时，也需要排序，另外需要先拷贝右组的数据（这样才能知道右侧有多少个数比左侧小）</li></ul></li></ul><h4 id="题-逆序对问题" tabindex="-1"><a class="header-anchor" href="#题-逆序对问题"><span>题（逆序对问题）</span></a></h4><p>在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对，请打印所有逆序对。</p><p>例子：[3,2,4,5,0]</p><h3 id="快速排序-快排" tabindex="-1"><a class="header-anchor" href="#快速排序-快排"><span>快速排序（快排）</span></a></h3><h4 id="题-荷兰国旗问题" tabindex="-1"><a class="header-anchor" href="#题-荷兰国旗问题"><span>题（荷兰国旗问题）</span></a></h4><p>荷兰国旗问题</p><ul><li>问题一 <ul><li>给定一个数组arr，和一个数num，请把小于等于num的数放在数组的左边，大于num的数放在数组的右边。 要求额外空间复杂度O(1)，时间复杂度O(N)</li><li>个人做题：O(1) 就不能用额外数组了，而空间O(1)的排序算法基本都要时间O(n^2)，所以这题不全排。感觉简单比较然后排就行了，双指针两端往中间移吧，遍历一遍就行，比较简单</li><li>答案：左侧为“小于等于区”，然后有一个小区等于区指针，有一个当前遍历指针。比我想的简洁一点</li></ul></li><li>问题二 (荷兰国旗问题，因为荷兰国旗是三色国旗) <ul><li>给定一个数组arr，和一个数num，请把小于num的数放在数组的左边，等于num的数放在数组的中间，大于num的数放在数组的右边。 要求额外空间复杂度0(1)，时间复杂度O(N)</li><li>个人做题：四指针？</li><li>答案：同上，左侧是小于区指针，右侧大于区指针，还有一个遍历中指针。共三指针</li></ul></li></ul><h4 id="快排1-0" tabindex="-1"><a class="header-anchor" href="#快排1-0"><span>快排1.0</span></a></h4><p>类似荷兰国旗问题</p><p>也是分治，但与归并有些不同</p><ul><li>特点是可以找一个中间数</li><li>从大到小，而不是从小到大。可以理解为反向的归并排序 <ul><li>快排：第一步后，[A数组]+[B数组]，A的所有数均小于等于B的所有数</li><li>归并：最后步前：[A数组]+[B数组]，A和B分别内部有序，但A和B无整体大小关系</li></ul></li></ul><h4 id="快排2-0" tabindex="-1"><a class="header-anchor" href="#快排2-0"><span>快排2.0</span></a></h4><p>分三遍，小于、等于、大于，比1.0版本快一些</p><h4 id="快排3-0" tabindex="-1"><a class="header-anchor" href="#快排3-0"><span>快排3.0</span></a></h4><p>随机选一个数，避免进入最坏情况</p><h4 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度"><span>复杂度</span></a></h4><p>空间复杂度 O(log(n))，这个是求概率出来的</p><p>最差是log(N)。以快排三为例，最好情况是每次都次都选中间的数且该数不用移动，那么这就是一棵二叉树 （当然，这里是不用递归的情况的空间复杂度，要改递归为迭代，自行压栈）</p><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h3><h4 id="堆结构" tabindex="-1"><a class="header-anchor" href="#堆结构"><span>堆结构</span></a></h4><p>这里的“堆结构”不等于“堆内存”，是指完全二叉树结构，完全二叉树的“完全”指的是需要按铺满的顺序来铺每一层（例如不能右边还没就将新的元素放左边）</p><p>我们可以用堆结构来表示一个数组。例如 0123456 变成二叉树就是：（以此铺满，铺完一层再一层）</p>',37)),s(e,{id:"mermaid-196",code:"eJxLL0osyFAIceIy0NW1MwSTRlyGQNIYTJpwGQFJUzBpxgUA6VEI+g=="}),l[1]||(l[1]=a('<p>分类</p><ul><li>大根堆：每个子树的头节点都是最大值</li><li>小根堆：同理</li></ul><p>注意堆排序的地位远远没堆结构好</p><h4 id="大根堆方法-——-heap-insert" tabindex="-1"><a class="header-anchor" href="#大根堆方法-——-heap-insert"><span>大根堆方法 —— Heap Insert</span></a></h4><p>往堆中插入一个元素（也是如何将一个数组变成一个大根堆的方法）</p><ol><li>新增元素时，先正常铺放在新的位置</li><li>然后不断与父进行比较交换，直到不比父更大或来到根节点处。</li></ol><p>即 —— 新元素先放底部，然后不断上移至合适的位置</p><h4 id="大根堆方法-——-heap-ify" tabindex="-1"><a class="header-anchor" href="#大根堆方法-——-heap-ify"><span>大根堆方法 —— Heap Ify</span></a></h4><p>弹出最大的数字</p><ol><li>拿出顶部节点，并缩小堆大小并将最后一个数据放在根部，形成heapSize--的一个堆</li><li>重新排序。从头节点开始，与左或右中更大的一个数字比较，并交换。不断重复这个过程。</li></ol><p>这个过程和HeapInsert是相反的，</p><p>即 —— 被临时放在头节点的元素，不断下移至合适的位置</p><hr><p>如果弹出任意一个节点的数字，也是同理的。将被弹出的节点看作一棵子树来处理</p><h4 id="大根堆方法-——-heap-set" tabindex="-1"><a class="header-anchor" href="#大根堆方法-——-heap-set"><span>大根堆方法 —— Heap Set</span></a></h4><p>设置某个元素为另一个值</p><p>这个过程是 Heap Insert 和 Heap Ify 的结合。看这个数是变大了还是变小了。变大则往上，变小则往下</p><p>堆结构中最重要的操作就是 Heap Insert 和 Heap Ify，其他操作都是这两变化来的</p><h4 id="复杂度-1" tabindex="-1"><a class="header-anchor" href="#复杂度-1"><span>复杂度</span></a></h4><p>时间复杂度：完全二叉树，高度是 log(n) 级别</p><ul><li>那么新增和减少所走的路径自然也是 log(n)</li><li>而全排序，就是n个元素的增加，就是 nlog(n)</li></ul><p>数组 -&gt; 堆 -&gt; 数组，那么就先依次 Heap Insert 数组，再依次 Heap Ify 根节点(最大数)</p><p>（弹幕：二叉树的冒泡，太形象了）</p><h4 id="整体排序" tabindex="-1"><a class="header-anchor" href="#整体排序"><span>整体排序</span></a></h4><p>假如不是一个数组转大根堆，一个元素一个元素地加。而是整体的一个完全二叉树，直接排序，应该怎么做？</p><ol><li>最底部两层的多个子树变成大根堆</li><li>然后扩展到倒数第三层，此时只有头节点大小不一定对，做个Heap Ify就行</li></ol><p>时间复杂度：O(n) ，这个复杂度可以用举例法+错位相减来验证</p><h4 id="题-几乎有序数组-使用小尺寸小根堆" tabindex="-1"><a class="header-anchor" href="#题-几乎有序数组-使用小尺寸小根堆"><span>题 (几乎有序数组，使用小尺寸小根堆)</span></a></h4><p>堆排序扩展题目：</p><blockquote><p>已知一个<strong>几乎有序</strong>的数组，几乎有序是指，如果把数组排好顺序的话，每个元素移动的距离可以不超过k，并且k相对于数组来说比较小。 请选择一个合适的排序算法针对这个数据进行排序。</p></blockquote><p>答案：</p><blockquote><p>假如K=6，那么我们可以做一个HeapSize==6的小根堆。然后沿着数组往右Insert和Ify就行！</p><p>最后复杂度 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>log</mi><mo>⁡</mo><mi>K</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*\\log K) = O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><p>这个和求 TopN 的算法有点像，复杂度也是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p></blockquote><p>实现：</p><blockquote><p>在Java中，直接用 <code>PriorityQueue&lt;Integer&gt;</code> 就好</p></blockquote><p>扩容问题：</p><blockquote><p>例如一开始有100个空间，扩容后会分配200空间并将这100个空间复制过去。</p><p>扩容一次的消耗是O(n) (分配完还要复制一遍内存)，扩容次数是O(log(n))，总消耗O(nlog(n))，平均每元素扩容代价O(log(n))。这不会影响最终的复杂度</p><p>当然，也可以提前分别空间，避免扩容代价</p></blockquote><p>为什么需要手写堆</p><blockquote><p>例如我们要修改堆的某个元素，像上面的 Heap Set 方法一样，然后你需要用非常轻微的代价去重新调整堆。</p><p>库不一定会支持这种东西，这个时候就需要手写</p></blockquote><h3 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序"><span>计数排序</span></a></h3><p>全部范围多大，就准备多少个数字</p><h3 id="基数排序-桶排" tabindex="-1"><a class="header-anchor" href="#基数排序-桶排"><span>基数排序 (桶排)</span></a></h3><p>相较于计数排序，特点是多次进桶，以桶的数量非常少。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mtext>桶</mtext><msup><mtext>数</mtext><mtext>进出桶次数</mtext></msup></mrow><annotation encoding="application/x-tex">N = 桶数^{进出桶次数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord cjk_fallback">桶</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">进出桶次数</span></span></span></span></span></span></span></span></span></span></span></span></p><p>例如 先个位数字进桶，再十位数字进桶 ……，如果都是三位数，则一共三次进出桶，就排完了 注意要先比较低位再比较高位</p><p>局限：要比较的数字需要有 “进制” 这种东西</p><h4 id="代码实现细节-前缀和" tabindex="-1"><a class="header-anchor" href="#代码实现细节-前缀和"><span>代码实现细节 (前缀和)</span></a></h4><blockquote><p>入桶时是数组到桶里，出桶时是桶回到数组里，出桶时如何保证出桶的数字放在正确的位置上？</p><p>把 词频数组 变成 <strong>前缀和</strong>数组，从右往左出桶。 例如 062 个位桶出桶时，记录了小于等于2的数为4，此时将他放在序号3，并将前缀和减一。 此时 061 个位桶出桶时，记录了小于等于2的数还有3，此时将他放在序号2，并将前缀和减一。</p></blockquote><p>很妙，文字可能没法说明白，得看图</p><blockquote><p>这个前缀和的精髓，就是出桶时，不需要管其他的片，每个数就能放在对应的位置上了。如果不用前缀和的话，就是这样的：</p><p>例如 062 出桶，你得先看2前面是1，个位数1有2个数，而个位数2有2个数，加起来是4个数，然后再放在序号3上</p><p>其实先用没前缀和的方式写一遍，再优化成前缀和方案，会比较好理解</p></blockquote><h3 id="其他排序" tabindex="-1"><a class="header-anchor" href="#其他排序"><span>其他排序</span></a></h3><p>排序算法有很多，最重要的是前面那些，其他不是很重要</p><h4 id="希尔排序-多轮插入排序" tabindex="-1"><a class="header-anchor" href="#希尔排序-多轮插入排序"><span>希尔排序（多轮插入排序）</span></a></h4><h4 id="鸡尾酒排序" tabindex="-1"><a class="header-anchor" href="#鸡尾酒排序"><span>鸡尾酒排序</span></a></h4><h4 id="综合排序-——-小范围优化" tabindex="-1"><a class="header-anchor" href="#综合排序-——-小范围优化"><span>综合排序 —— 小范围优化</span></a></h4><ul><li>例如在大样本状态下，可能用快排/归并。时间复杂度 O(nlog(n))</li><li>但小样本状态下，可能用插入排序。时间复杂度 O(n^2)</li></ul><p>这种优化后的排序，叫综合排序</p><p>充分利用 O(nlog(n)) 和 O(n^2) 排序各自的优势</p><h4 id="综合排序-——-稳定性优化" tabindex="-1"><a class="header-anchor" href="#综合排序-——-稳定性优化"><span>综合排序 —— 稳定性优化</span></a></h4><p>像Java的Array.sort方法：</p><ul><li>如果你元素是基础类型，就给你用快排（更快但无稳定性）</li><li>如果你是复合类型，就给你用归并排序（稳定性）</li></ul><p>充分利用稳定性的排序</p><p>各个语言的库的排序算法几乎都是一个缝合了非常多东西的综合排序</p><h2 id="解题思维总结-排序算法总结" tabindex="-1"><a class="header-anchor" href="#解题思维总结-排序算法总结"><span><strong>解题思维总结</strong> / 排序算法总结</span></a></h2><h3 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h3><blockquote><table><thead><tr><th></th><th>大致操作</th><th>特点</th><th>时间复杂度</th><th>空间复杂度</th><th>稳定性</th><th>时间最差</th><th>时间最好</th></tr></thead><tbody><tr><td>冒泡排序 (反向)</td><td><strong>minValue往前</strong>。从右往左进行邻居交换</td><td></td><td>O(n^2)</td><td>O(1)</td><td>是</td><td></td><td></td></tr><tr><td>选择排序</td><td><strong>找minIndex</strong>，然后与第一个元素交换</td><td></td><td>O(n^2)，但<strong>交换次数更低</strong></td><td>O(1)</td><td><strong>否</strong> (但少了交换)</td><td></td><td></td></tr><tr><td>插入排序</td><td>范围从小到大进行有序，类似打牌，邻居交换/最后交换</td><td></td><td>O(n^2)</td><td>O(1)</td><td>是</td><td></td><td>O(N)</td></tr><tr><td>归并排序</td><td><strong>两数组合并</strong>。mergeSort，合并两个有序数组</td><td>分治递归</td><td>O(nlog(n))</td><td>O(N)</td><td>是 (小和问题 否)</td><td></td><td></td></tr><tr><td>快速排序 (随机快排)</td><td><strong>两数组各治</strong>。拆分两个数组，数组左均&lt;数组右</td><td>分治递归</td><td>O(nlog(n))</td><td>均O(logN)</td><td><strong>否</strong></td><td>O(n^2)</td><td></td></tr><tr><td>堆排序</td><td><strong>维护大/小根堆</strong></td><td></td><td>O(nlog(n))</td><td>O(1) (不转回数组)</td><td><strong>否</strong></td><td></td><td></td></tr><tr><td>计数排序</td><td>仅记录每个桶有多少个</td><td>不基于比较</td><td>O(n)</td><td></td><td>是</td><td></td><td></td></tr><tr><td>基数排序 (桶排)</td><td>多次进桶和出桶</td><td>不基于比较</td><td>O(n)</td><td></td><td>是</td><td></td><td></td></tr></tbody></table></blockquote><h3 id="分类与评价" tabindex="-1"><a class="header-anchor" href="#分类与评价"><span>分类与评价</span></a></h3><ul><li>O(n^2) 类 <ul><li>冒泡排序：略</li><li>选择排序：优于冒泡排序，虽然查看和比较复杂度相等，但交换次数少了</li><li>插入排序：优于选择/冒泡排序，因为虽然都是O(n^2)，但最好情况可以到O(n)。复杂度与数据状态有关 反向冒泡和插入排序会有些像</li></ul></li><li>O(nlog(n)) 类 <ul><li>与之前不同，时间复杂度进入了 O(nlog(n))。为什么以前的差？因为以前的算法浪费了大量比较行为： <ul><li>例如“选择排序”比较了N个数才确定了最小的位置，然后序号1的位置上又进行了N-1轮比较，这两轮比较是完全独立的，大量的信息被丢弃了</li><li>而 O(nlog(n)) 算法没有浪费比较行为，例如 归并行为的最后一轮 的二乘以一，的</li></ul></li><li>归并排序：见上</li><li>快速排序：主要是你要取一个数，有最差情况，但那个数是随机取的，如果每次都取到最小/大的数则会很慢，但一般很难进最差情况</li></ul></li><li>非<strong>基于比较</strong>排序 <ul><li>与之前的不同，不基于比较了。适用面很窄，只有在特定的数据状况下才能用</li><li>基数排序</li></ul></li></ul><h3 id="选用" tabindex="-1"><a class="header-anchor" href="#选用"><span><strong>选用</strong></span></a></h3><ul><li>首选快排，虽然都是O(nlogn)，但在常数(实验)指标下，快排是最快的</li><li>如果限制空间，则堆排</li><li>如果限制稳定性，则归并</li></ul><h3 id="常见的坑" tabindex="-1"><a class="header-anchor" href="#常见的坑"><span>常见的坑</span></a></h3><p>是否会有更优的解法？</p><ul><li>是否有 “基于比较” 的排序算法，时间复杂度低于 NlogN？否</li><li>是否有 “基于比较” 的排序算法，时间复杂度 NlogN 的同时，还能做到空间复杂度低于 O(N) 且具有稳定性？否</li></ul><p>然后就会一些坑：</p><ol><li>归并排序的额外空间复杂度可以变成O(1)吗？ <ul><li>可以但是非常难，也没有什么用，不需要掌握，有兴趣可以搜 “归并排序内部缓存法”</li><li>而且这会丧失稳定性，还不如用堆排序</li></ul></li><li>“原地归并排序” 的帖子都是垃圾 <ul><li>这能把空间复杂度变成O(1)</li><li>但会让归并排序的时间复杂度变成O(N^2)，这还不如用插入排序</li></ul></li><li>快速排序可以做到稳定性吗？ <ul><li>可以，但是非常难，不需要掌握。论文搜 “01 stable sort”（这里的01指01标准，要么0要么1，要么放左边要么放右边，大概是这种意思）</li><li>但会让快排空间复杂度变成O(N)，那为什么不用归并排序呢</li><li>有一道题目，是奇数放在数组左边，偶数放在数组右边，还要求原始的相对次序不变，要求时间O(nlog(n))，空间O(1)。很难，碰到这个问题，可以怼面试官。这类似于将 “01 stable sort”，非常难</li></ul></li><li>上面这几个改进都不重要 <ul><li>因为目前没有找到时间复杂度0(N*logN)，额外空间复杂度0(1)，又稳定的排序。</li></ul></li></ol><h3 id="解题思维总结" tabindex="-1"><a class="header-anchor" href="#解题思维总结"><span>解题思维总结</span></a></h3><ul><li><strong>加入一个新数/一组计算过的数后，重新计算是否足够麻烦</strong><ul><li>是否有重复比较？[1234]+[5678] 拼接后排序，最少比较一次，不应该再比较n^8次</li><li>是否能归并？</li><li>例如：求小和问题中，假如已经求完了并排序完数组A，与小和SumA。此时假如给你排序后的数组B和小和SumB。要求得到新的数组C和小和SumC，是否能够不重新计算</li><li>通常会使用双指针来归并</li></ul></li><li>A+B的几种情况 <ul><li>已有数组A，新增数组B，B整体大于A（B元素均比A元素大）。这更类似于快速排序</li><li>已有有序数组A <ul><li>新增元素b，用二分找位置，则合并复杂度O(log(n))</li><li>新增有序数组B。这更类似于归并排序，新操作合并复杂度为O(n)</li></ul></li><li>已有有序堆A <ul><li>新增元素b。这更类似于堆排序，新操作合并复杂度O(log(n))</li><li>新增同高的有序堆B。也是堆排序，新操作合并复杂度O(log(n))（方法为拿一个数放在头节点然后做HeapIfy就好）</li></ul></li></ul></li><li>小局部排序到大局部 / 大局部到小局部 <ul><li>分别猜最后一步和第一步</li></ul></li></ul>',75))])}const c=t(r,[["render",h],["__file","02. 算法 - 排序.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/02.%20%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html","title":"排序","lang":"zh-CN","frontmatter":{"description":"排序 十大排序算法 冒泡排序 选择排序 插入排序 反向冒泡 真插入排序 (可链表优化) 归并排序 归并排序的扩展 —— 小和问题和逆序对问题 这两个问题都很经典 题（小和问题） 在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。 例子：[1,3,4,2,5] 1左边比1小的数，没有 3左边比3小的数，1 4左边比...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/02.%20%E7%AE%97%E6%B3%95%20-%20%E6%8E%92%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"排序"}],["meta",{"property":"og:description","content":"排序 十大排序算法 冒泡排序 选择排序 插入排序 反向冒泡 真插入排序 (可链表优化) 归并排序 归并排序的扩展 —— 小和问题和逆序对问题 这两个问题都很经典 题（小和问题） 在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。 例子：[1,3,4,2,5] 1左边比1小的数，没有 3左边比3小的数，1 4左边比..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"排序","slug":"排序","link":"#排序","children":[{"level":2,"title":"十大排序算法","slug":"十大排序算法","link":"#十大排序算法","children":[{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[{"level":4,"title":"反向冒泡","slug":"反向冒泡","link":"#反向冒泡","children":[]},{"level":4,"title":"真插入排序 (可链表优化)","slug":"真插入排序-可链表优化","link":"#真插入排序-可链表优化","children":[]}]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[{"level":4,"title":"题（小和问题）","slug":"题-小和问题","link":"#题-小和问题","children":[]},{"level":4,"title":"题（逆序对问题）","slug":"题-逆序对问题","link":"#题-逆序对问题","children":[]}]},{"level":3,"title":"快速排序（快排）","slug":"快速排序-快排","link":"#快速排序-快排","children":[{"level":4,"title":"题（荷兰国旗问题）","slug":"题-荷兰国旗问题","link":"#题-荷兰国旗问题","children":[]},{"level":4,"title":"快排1.0","slug":"快排1-0","link":"#快排1-0","children":[]},{"level":4,"title":"快排2.0","slug":"快排2-0","link":"#快排2-0","children":[]},{"level":4,"title":"快排3.0","slug":"快排3-0","link":"#快排3-0","children":[]},{"level":4,"title":"复杂度","slug":"复杂度","link":"#复杂度","children":[]}]},{"level":3,"title":"堆排序","slug":"堆排序","link":"#堆排序","children":[{"level":4,"title":"堆结构","slug":"堆结构","link":"#堆结构","children":[]},{"level":4,"title":"大根堆方法 —— Heap Insert","slug":"大根堆方法-——-heap-insert","link":"#大根堆方法-——-heap-insert","children":[]},{"level":4,"title":"大根堆方法 —— Heap Ify","slug":"大根堆方法-——-heap-ify","link":"#大根堆方法-——-heap-ify","children":[]},{"level":4,"title":"大根堆方法 —— Heap Set","slug":"大根堆方法-——-heap-set","link":"#大根堆方法-——-heap-set","children":[]},{"level":4,"title":"复杂度","slug":"复杂度-1","link":"#复杂度-1","children":[]},{"level":4,"title":"整体排序","slug":"整体排序","link":"#整体排序","children":[]},{"level":4,"title":"题 (几乎有序数组，使用小尺寸小根堆)","slug":"题-几乎有序数组-使用小尺寸小根堆","link":"#题-几乎有序数组-使用小尺寸小根堆","children":[]}]},{"level":3,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":3,"title":"基数排序 (桶排)","slug":"基数排序-桶排","link":"#基数排序-桶排","children":[{"level":4,"title":"代码实现细节 (前缀和)","slug":"代码实现细节-前缀和","link":"#代码实现细节-前缀和","children":[]}]},{"level":3,"title":"其他排序","slug":"其他排序","link":"#其他排序","children":[{"level":4,"title":"希尔排序（多轮插入排序）","slug":"希尔排序-多轮插入排序","link":"#希尔排序-多轮插入排序","children":[]},{"level":4,"title":"鸡尾酒排序","slug":"鸡尾酒排序","link":"#鸡尾酒排序","children":[]},{"level":4,"title":"综合排序 —— 小范围优化","slug":"综合排序-——-小范围优化","link":"#综合排序-——-小范围优化","children":[]},{"level":4,"title":"综合排序 —— 稳定性优化","slug":"综合排序-——-稳定性优化","link":"#综合排序-——-稳定性优化","children":[]}]}]},{"level":2,"title":"解题思维总结 / 排序算法总结","slug":"解题思维总结-排序算法总结","link":"#解题思维总结-排序算法总结","children":[{"level":3,"title":"表","slug":"表","link":"#表","children":[]},{"level":3,"title":"分类与评价","slug":"分类与评价","link":"#分类与评价","children":[]},{"level":3,"title":"选用","slug":"选用","link":"#选用","children":[]},{"level":3,"title":"常见的坑","slug":"常见的坑","link":"#常见的坑","children":[]},{"level":3,"title":"解题思维总结","slug":"解题思维总结","link":"#解题思维总结","children":[]}]}]}],"git":{},"readingTime":{"minutes":13.58,"words":4073},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/02. 算法 - 排序.md","excerpt":"\\n<h2>十大排序算法</h2>\\n<h3>冒泡排序</h3>\\n<h3>选择排序</h3>\\n<h3>插入排序</h3>\\n<h4>反向冒泡</h4>\\n<h4>真插入排序 (可链表优化)</h4>\\n<h3>归并排序</h3>\\n<p>归并排序的扩展 —— 小和问题和逆序对问题</p>\\n<p>这两个问题都很经典</p>\\n<h4>题（小和问题）</h4>\\n<p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组 的小和。</p>\\n<p>例子：[1,3,4,2,5]\\n1左边比1小的数，没有\\n3左边比3小的数，1\\n4左边比4小的数，1+3=4\\n2左边比2小的数，1\\n5左边比5小的数，1+3+4+2=10</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/02. 算法 - 排序.md","value":{"title":"02. 算法 - 排序","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/02. 算法 - 排序.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,m as data};
