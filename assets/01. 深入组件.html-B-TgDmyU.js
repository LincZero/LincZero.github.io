import{_ as o,c as l,a as s,b as a,d as e,e as p,o as i,r as u}from"./app-CevDx19p.js";const c={},r={href:"https://cn.vuejs.org/guide/extras/web-components.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://cn.vuejs.org/guide/scaling-up/sfc.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.vuejs.org/examples/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/guide/components/registration.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.vuejs.org/guide/essentials/component-basics.html#dom-template-parsing-caveats",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits",target:"_blank",rel:"noopener noreferrer"},b={href:"https://cn.vuejs.org/guide/typescript/composition-api.html#typing-component-props",target:"_blank",rel:"noopener noreferrer"},f={href:"https://cn.vuejs.org/guide/essentials/component-basics.html",target:"_blank",rel:"noopener noreferrer"};function E(B,n){const t=u("ExternalLinkIcon");return i(),l("div",null,[n[25]||(n[25]=s("h2",{id:"组件基础",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#组件基础"},[s("span",null,"组件基础")])],-1)),n[26]||(n[26]=s("p",null,"组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构",-1)),s("p",null,[n[1]||(n[1]=a("这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。如果你想知道 Vue 组件与原生 Web Components 之间的关系，可以")),s("a",r,[n[0]||(n[0]=a("阅读此章节")),e(t)]),n[2]||(n[2]=a("。"))]),n[27]||(n[27]=s("h3",{id:"定义一个组件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#定义一个组件"},[s("span",null,"定义一个组件")])],-1)),s("p",null,[n[4]||(n[4]=a("当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 ")),n[5]||(n[5]=s("code",null,".vue",-1)),n[6]||(n[6]=a(" 文件中，这被叫做")),s("a",d,[n[3]||(n[3]=a("单文件组件")),e(t)]),n[7]||(n[7]=a(" (简称 SFC)："))]),n[28]||(n[28]=p(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>You clicked me {{ count }} times.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当不使用构建步骤时，一个 Vue 组件以一个包含 Vue 特定选项的 JavaScript 对象来定义：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>import { ref } from &#39;vue&#39;

export default {
  setup() {
    const count = ref(0)
    return { count }
  },
  template: \`
    &lt;button @click=&quot;count++&quot;&gt;
      You clicked me {{ count }} times.
    &lt;/button&gt;\`
  // 或者 \`template: &#39;#my-template-element&#39;\`
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的模板是一个<strong>内联的 JavaScript 字符串</strong>，Vue 将会在运行时编译它。你也可以使用 ID 选择器来指向一个元素 (通常是原生的 <code>&lt;template&gt;</code> 元素)，Vue 将会使用其内容作为模板来源。</p><p>上面的例子中定义了一个组件，并在一个 <code>.js</code> 文件里默认导出了它自己，但你也可以通过具名导出在一个文件中导出多个组件。</p><h3 id="使用组件" tabindex="-1"><a class="header-anchor" href="#使用组件"><span>使用组件</span></a></h3><p>TIP</p>`,7)),s("blockquote",null,[s("p",null,[n[9]||(n[9]=a("我们会在接下来的指引中使用 SFC 语法，无论你是否使用构建步骤，组件相关的概念都是相同的。")),s("a",k,[n[8]||(n[8]=a("示例")),e(t)]),n[10]||(n[10]=a("一节中展示了两种场景中的组件使用情况。"))])]),n[29]||(n[29]=p(`<p>要使用一个子组件，我们需要在父组件中导入它。假设我们把计数器组件放在了一个叫做 <code>ButtonCounter.vue</code> 的文件中，这个组件将会以默认导出的形式被暴露给外部。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> ButtonCounter <span class="token keyword">from</span> <span class="token string">&#39;./ButtonCounter.vue&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here is a child component!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ButtonCounter</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过 <code>&lt;script setup&gt;</code>，导入的组件都在模板中直接可用。</li><li>当然，你也可以全局地注册一个组件，使得它在当前应用中的任何组件上都可以使用，而不需要额外再导入。</li></ol>`,3)),s("p",null,[n[12]||(n[12]=a("关于组件的全局注册和局部注册两种方式的利弊，我们放在了")),s("a",v,[n[11]||(n[11]=a("组件注册")),e(t)]),n[13]||(n[13]=a("这一章节中专门讨论。"))]),n[30]||(n[30]=p(`<p>组件可以被重用任意多次：</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here is a child component!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ButtonCounter</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ButtonCounter</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ButtonCounter</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会注意到，每当点击这些按钮时，每一个组件都维护着自己的状态，是不同的 <code>count</code>。 这是因为每当你使用一个组件，就创建了一个新的<strong>实例</strong>。</p><p>在单文件组件中，推荐为子组件使用 <code>PascalCase</code> 的标签名，以此来和原生的 HTML 元素作区分。 虽然原生 HTML 标签名是不区分大小写的，但 Vue 单文件组件是可以在编译中区分大小写的。我们也可以使用 <code>/&gt;</code> 来关闭一个标签。</p><p>如果你是直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，模板的编译需要遵从浏览器中 HTML 的解析行为。在这种情况下，你应该需要使用 <code>kebab-case</code> 形式并显式地关闭这些组件的标签。</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 如果是在 DOM 中书写该模板 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),s("p",null,[n[15]||(n[15]=a("请看 ")),s("a",g,[n[14]||(n[14]=a("DOM 模板解析注意事项")),e(t)]),n[16]||(n[16]=a("了解更多细节。"))]),n[31]||(n[31]=s("h3",{id:"传递-props",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#传递-props"},[s("span",null,"传递 props")])],-1)),n[32]||(n[32]=s("p",null,"如果我们正在构建一个博客，我们可能需要一个表示博客文章的组件。我们希望所有的博客文章分享相同的视觉布局，但有不同的内容。要实现这样的效果自然必须向组件中传递数据，例如每篇文章标题和内容，这就会使用到 props。",-1)),s("p",null,[n[18]||(n[18]=a("Props 是一种特别的 attributes，你可以在组件上声明注册。要传递给博客文章组件一个标题，我们必须在组件的 props 列表上声明它。这里要用到 ")),s("a",m,[n[17]||(n[17]=s("code",null,"defineProps",-1)),e(t)]),n[19]||(n[19]=a(" 宏："))]),n[33]||(n[33]=p(`<div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- BlogPost.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defineProps</code> 是一个仅 <code>&lt;script setup&gt;</code> 中可用的==<strong>编译宏命令</strong>==，并不需要显式地导入。声明的 props 会自动暴露给模板。<code>defineProps</code> 会返回一个对象，其中包含了可以传递给组件的所有 props：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[21]||(n[21]=a("TypeScript 用户请参考：")),s("a",b,[n[20]||(n[20]=a("为组件 props 标注类型")),e(t)])]),n[34]||(n[34]=p(`<p>如果你没有使用 <code>&lt;script setup&gt;</code>，props 必须以 <code>props</code> 选项的方式声明，props 对象会作为 <code>setup()</code> 函数的第一个参数被传入：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个组件可以有任意多的 props，默认情况下，所有 prop 都接受任意类型的值。</p><p>当一个 prop 被注册后，可以像这样以自定义 attribute 的形式传递数据给它：</p><h3 id="typescript-为组件-props-标注类型" tabindex="-1"><a class="header-anchor" href="#typescript-为组件-props-标注类型"><span>TypeScript - 为组件 props 标注类型</span></a></h3><h2 id="深入组件" tabindex="-1"><a class="header-anchor" href="#深入组件"><span>深入组件</span></a></h2>`,6)),s("blockquote",null,[s("p",null,[n[23]||(n[23]=a("此章节假设你已经看过了")),s("a",f,[n[22]||(n[22]=a("组件基础")),e(t)]),n[24]||(n[24]=a("。若你还不了解组件是什么，请先阅读该章节。"))])]),n[35]||(n[35]=s("p",null,"一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。",-1))])}const y=o(c,[["render",E],["__file","01. 深入组件.html.vue"]]),V=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/03.%20%E7%BB%84%E4%BB%B6/01.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{"description":"组件基础 组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构 这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。如果你想知道 Vue 组件与原生 W...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/03.%20%E7%BB%84%E4%BB%B6/01.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"组件基础 组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构 这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。如果你想知道 Vue 组件与原生 W..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"组件基础","slug":"组件基础","link":"#组件基础","children":[{"level":3,"title":"定义一个组件","slug":"定义一个组件","link":"#定义一个组件","children":[]},{"level":3,"title":"使用组件","slug":"使用组件","link":"#使用组件","children":[]},{"level":3,"title":"传递 props","slug":"传递-props","link":"#传递-props","children":[]},{"level":3,"title":"TypeScript - 为组件 props 标注类型","slug":"typescript-为组件-props-标注类型","link":"#typescript-为组件-props-标注类型","children":[]}]},{"level":2,"title":"深入组件","slug":"深入组件","link":"#深入组件","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.68,"words":1404},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/03. 组件/01. 深入组件.md","excerpt":"<h2>组件基础</h2>\\n<p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构</p>\\n<p>这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。Vue 同样也能很好地配合原生 Web Component。如果你想知道 Vue 组件与原生 Web Components 之间的关系，可以<a href=\\"https://cn.vuejs.org/guide/extras/web-components.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">阅读此章节</a>。</p>","autoDesc":true}');export{y as comp,V as data};
