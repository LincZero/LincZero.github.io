import{_ as s,c as a,e as l,o as e}from"./app-DEUP2Tjk.js";const t="/assets/image-20200820113719634-DoueCupl.png",n="/assets/11223-B1FAtBkz.png",h={};function d(p,i){return e(),a("div",null,i[0]||(i[0]=[l('<h1 id="网络杂记" tabindex="-1"><a class="header-anchor" href="#网络杂记"><span>网络杂记</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="网页加载" tabindex="-1"><a class="header-anchor" href="#网页加载"><span>网页加载</span></a></h1><h2 id="domcontentloaded和load的区别" tabindex="-1"><a class="header-anchor" href="#domcontentloaded和load的区别"><span>DOMContentLoaded和Load的区别</span></a></h2><p>参考文章</p><h3 id="带着问题" tabindex="-1"><a class="header-anchor" href="#带着问题"><span>带着问题</span></a></h3><p><img src="https://images2015.cnblogs.com/blog/746387/201704/746387-20170407181151019-499554025.png" alt="img" loading="lazy"></p><p><img src="'+t+'" alt="image-20200820113719634" loading="lazy"></p><ul><li><p>我们一再强调将css放在头部，将js文件放在尾部，这样有利于优化页面的性能，为什么这种方式能够优化性能？</p></li><li><p>在用jquery的时候，我们一般都会将函数调用写在ready方法内，这是什么原理？</p></li></ul><h3 id="一些概念" tabindex="-1"><a class="header-anchor" href="#一些概念"><span>一些概念</span></a></h3><h4 id="下载-加载" tabindex="-1"><a class="header-anchor" href="#下载-加载"><span>下载/加载</span></a></h4><blockquote><p>略</p></blockquote><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h4><blockquote><p>浏览器会对这个 html 文件进行编译，转化成类似下面的结构（这里把 head 中的其他标签省略了）。</p></blockquote><img src="https://user-gold-cdn.xitu.io/2018/6/22/1642575e52011397?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" style="zoom:67%;"><blockquote><p>浏览器会对转化后的数据结构自上而下进行分析：</p><ul><li><p>首先开启下载线程，对所有的资源进行优先级排序下载（注意，这里仅仅是下载）</p></li><li><p>同时主线程会对文档进行解析</p><ul><li>遇到 script 标签时，首先阻塞后续内容的解析，同时检查该script是否已经下载下来，如果已下载，便执行代码。</li><li>遇到 link 标签时，不会阻塞后续内容的解析（比如 DOM 构建），检查 link 资源是否已下载，如果已下载，则构建 cssom。</li><li>遇到 DOM 标签时，执行 DOM 构建，将该 DOM 元素添加到文档树中。</li></ul></li></ul><p>有一点要注意的是，在 body 中第一个 script 资源下载完成之前，浏览器会进行首次渲染，将该 script 标签前面的 DOM 树和 CSSOM 合并成一棵 Render 树，渲染到页面中。<strong>这是页面从白屏到首次渲染的时间节点，比较关键</strong>。</p></blockquote><h4 id="dom构建" tabindex="-1"><a class="header-anchor" href="#dom构建"><span>DOM构建</span></a></h4><blockquote><p>DOM 构建的意思是，将文档中的所有 DOM 元素构建成一个树型结构。</p><p>注意，DOM 构建是自上而下进行构建的，会受到 js 执行的干扰。</p></blockquote><h4 id="css构建" tabindex="-1"><a class="header-anchor" href="#css构建"><span>CSS构建</span></a></h4><blockquote><p>将文档中的所有 css 资源合并</p></blockquote><h4 id="render-树" tabindex="-1"><a class="header-anchor" href="#render-树"><span>render 树</span></a></h4><blockquote><p>将 DOM 树和 CSS 合并成一棵渲染树，render 树在合适的时机会被渲染到页面中。（比如遇到 script 时, 该 script 还没有下载到本地时）。</p></blockquote><h3 id="加载与页面的首次渲染" tabindex="-1"><a class="header-anchor" href="#加载与页面的首次渲染"><span>加载与页面的首次渲染</span></a></h3><p>当我们输入一个页面地址时，发生了哪些事情呢？</p><blockquote><ol><li><p>浏览器首先下载该地址所对应的 html 页面。</p></li><li><p>浏览器解析 html 页面的 DOM 结构。</p></li><li><p>开启下载线程对文档中的所有资源按优先级排序下载。</p></li><li><p>主线程继续解析文档，到达 head 节点 ，head 里的外部资源无非是外链样式表和外链 js</p><blockquote><p>发现有外链 css 或者外链 js，如果是外链 js ，则停止解析后续内容，等待该资源下载，下载完后立刻执行。如果是外链 css，继续解析后续内容。</p></blockquote></li><li><p>解析到 body</p><blockquote><p>只有 DOM 元素</p><ul><li>这种情况比较简单了，DOM 树构建完，页面首次渲染。</li></ul><p>有 DOM 元素、外链 js。</p><ul><li>当解析到外链 js 的时候，该 js 尚未下载到本地，则 js 之前的 DOM 会被渲染到页面上，同时 js 会阻止后面 DOM 的构建，即后面的 DOM 节点并不会添加到文档的 DOM 树中。所以，js 执行完之前，我们在页面上看不到该 js 后面的 DOM 元素。</li></ul><p>有 DOM 元素、外链 css</p><ul><li>外链 css 不会影响 css 后面的 DOM 构建，但是会阻碍渲染。简单点说，外链 css 加载完之前，页面还是白屏。</li></ul><p>有 DOM 元素、外链 js、外链 css</p><ul><li>外链 js 和外链 css 的顺序会影响页面渲染，这点尤为重要。当 body 中 js 之前的外链 css 未加载完之前，页面是不会被渲染的。</li><li>当body中 js 之前的 外链 css 加载完之后，js 之前的 DOM 树和 css 合并渲染树，页面渲染出该 js 之前的 DOM 结构。</li></ul></blockquote></li><li><p>文档解析完毕，页面重新渲染。当页面引用的所有 js 同步代码执行完毕，触发 DOMContentLoaded 事件。</p></li><li><p>html 文档中的图片资源，js 代码中有异步加载的 css、js 、图片资源都加载完毕之后，load 事件触发。</p></li></ol></blockquote><blockquote><p>当我们在浏览器地址输入URL时，浏览器会发送请求到服务器，服务器将请求的HTML文档发送回浏览器，浏览器将文档下载下来后，便开始从上到下解析，解析完成之后，会生成DOM。如果页面中有css，会根据css的内容形成CSSOM，然后DOM和CSSOM会生成一个渲染树，最后浏览器会根据渲染树的内容计算出各个节点在页面中的确切大小和位置，并将其绘制在浏览器上</p></blockquote><p><img src="'+n+`" alt="11223" loading="lazy"></p><p>测试代码</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./c1.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./c3.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 如果此时 j1.js 尚未下载到本地，则首次渲染，此时的 DOM 树 只有 div1 ，所以页面上只会显示 div1，样式是 c1.css 和 c3.css 的并集。--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 如果此时 j1.js 已经下载到本地，则先执行 j1.js，页面不会渲染，所以此时仍然是白屏。--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!--下面的 js 阻塞了 DOM 树的构建，所以下面的 div2 没有在文档的 DOM 树中。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://test.com:9000/mine/load/case2/j1.js</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- j1.js 执行完毕，继续 DOM 解析，div2 被构建在文档 DOM 树中，此时页面上有了div2 元素，样式仍然是 c1.css 和 c3.css 的并集 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> rel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;stylesheet&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> href</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./c4.css&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- c4.css 加载完毕，重新构建render树，样式变成了 c1.css、c3.css 和 c4.css 的并集 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 利用 performance 统计 load 加载时间。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onload</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">performance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">timing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loadEventStart</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> performance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">timing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">fetchStart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="资源的加载" tabindex="-1"><a class="header-anchor" href="#资源的加载"><span>资源的加载</span></a></h3><h4 id="head资源的加载" tabindex="-1"><a class="header-anchor" href="#head资源的加载"><span>head资源的加载</span></a></h4><blockquote><ul><li>head 中 js 资源加载都会停止后面 DOM 的构建，但是不影响后面资源的下载。</li><li>css资源不会阻碍后面 DOM 的构建，但是会阻碍页面的首次渲染。</li></ul></blockquote><h4 id="body资源的加载" tabindex="-1"><a class="header-anchor" href="#body资源的加载"><span>body资源的加载</span></a></h4><blockquote><ul><li>body 中 js 资源加载都会停止后面 DOM 的构建，但是不影响后面资源的下载。</li><li>css 资源不会阻碍后面 DOM 的构建，但是会阻碍页面的首次渲染。</li></ul></blockquote><h3 id="两种load的触发" tabindex="-1"><a class="header-anchor" href="#两种load的触发"><span>两种Load的触发</span></a></h3><h4 id="domcontentloaded" tabindex="-1"><a class="header-anchor" href="#domcontentloaded"><span>DOMContentLoaded</span></a></h4><p>MDN的解释</p><blockquote><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。</p></blockquote><p>即</p><blockquote><p>顾名思义，就是dom内容加载完毕</p><p>直截了当地结论是，DOMContentLoaded 事件在 <strong>html文档加载完毕，并且 html 所引用的内联 js、以及外链 js 的同步代码都执行完毕后触发</strong>。</p><p>意思是HTML<strong>下载、解析</strong>完毕之后就触发。</p></blockquote><h4 id="load" tabindex="-1"><a class="header-anchor" href="#load"><span>load</span></a></h4><p>MDN的解释</p><blockquote><p><strong>load</strong> 应该仅用于检测一个完全加载的页面 当一个资源及其依赖资源已完成加载时，将触发load事件。</p></blockquote><p>即</p><blockquote><p>意思是页面的html、css、js、图片等资源都已经加载完之后才会触发 load 事件。</p><p>当页面 DOM 结构中的 js、css、图片，以及 js 异步加载的 js、css 、图片都加载完成之后，才会触发 load 事件。</p><p>注意：</p><ul><li>页面中引用的js 代码如果有异步加载的 js、css、图片，是会影响 load 事件触发的。</li><li>video、audio、flash 不会影响 load 事件触发。</li></ul></blockquote><h3 id="浏览器对同一域名下的资源并发下载线程数" tabindex="-1"><a class="header-anchor" href="#浏览器对同一域名下的资源并发下载线程数"><span>浏览器对同一域名下的资源并发下载线程数</span></a></h3><blockquote><p>chrome浏览器对<strong>同一域名</strong>下的下载并发不超过 6 个</p><p>超过 6 个的话，剩余的将会在队列中等待</p><p>这就是为什么我们要将资源收敛到不同的域名下，也是为了充分利用该机制，最大程度的并发下载所需资源，尽快的完成页面的渲染。</p></blockquote><h3 id="performance性能统计" tabindex="-1"><a class="header-anchor" href="#performance性能统计"><span>performance性能统计</span></a></h3><p>另外，load 事件与 DOMContentLoaded 事件触发所花费的时间，可以利用 performance 这个对象的一些属性进行统计，时间精确到纳秒级。一些大公司的性能统计也主要利用这个对象的数据进行上报。</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/21/164221df201228c8?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" loading="lazy"></p><table><thead><tr><th>参数</th><th>值</th></tr></thead><tbody><tr><td>connectStart</td><td>HTTP（TCP）开始建立连接的时间。如果是持久连接，则和 fetchStart 的时间相等<br>注意，如果在传输层发生了错误且重新建立连接，这里显示的是新建立连接的开始时间</td></tr><tr><td>connectEnd</td><td>完成建立连接的时间</td></tr><tr><td>domComplete</td><td>DOM 树解析完成，并且资源准备就绪的时间<br>Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</td></tr><tr><td>domContentLoadedEventEnd</td><td>DOM 解析完成后，网页内资源加载完成的时间（如 JS、css 加载执行完毕）</td></tr><tr><td>domContentLoadedEventStart</td><td>DOM 解析完成后，网页内资源加载开始的时间在 DOMContentLoaded 事件抛出前发生</td></tr><tr><td>loadEventStart</td><td>load 事件触发，也即 load 回调函数开始执行的时间。注意：如果没有绑定 load 事件，值为 0</td></tr><tr><td>loadEventEnd</td><td>load 事件的回调函数执行完毕的时间</td></tr><tr><td>...</td><td>...</td></tr></tbody></table><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h1><h2 id="因特网-万维网-互联网什么区别" tabindex="-1"><a class="header-anchor" href="#因特网-万维网-互联网什么区别"><span>因特网，万维网，互联网什么区别？</span></a></h2><p>https://zhuanlan.zhihu.com/p/104150541</p><h3 id="范围" tabindex="-1"><a class="header-anchor" href="#范围"><span>范围</span></a></h3><p>首先说一下范围：互联网 &gt; 因特网 &gt; 万维网</p><h3 id="什么是互联网-internet-注意-i-小写" tabindex="-1"><a class="header-anchor" href="#什么是互联网-internet-注意-i-小写"><span>什么是互联网（internet 注意 i 小写）？</span></a></h3><p>凡是能彼此通信的设备组成的网络就叫互联网，可以看出，这里互联网的范围很广。</p><h3 id="什么是因特网-internet-注意-i-大写" tabindex="-1"><a class="header-anchor" href="#什么是因特网-internet-注意-i-大写"><span>什么是因特网（Internet 注意 I 大写）？</span></a></h3><p>是网络与网络之间所串连成的庞大网络，这些网络以一组标准的网络TCP/IP协议族相连</p><p>下图展示的是TCP/IP协议族： <img src="https://pic4.zhimg.com/80/v2-93b8d74ede8e42bf56924db2703175af_720w.jpg" alt="img" loading="lazy"></p><h3 id="什么是万维网-world-wide-web" tabindex="-1"><a class="header-anchor" href="#什么是万维网-world-wide-web"><span>什么是万维网（World Wide Web）？</span></a></h3><p>万维网是文件、图片、多媒体和其他资源的集合，资源通过超链接互相连接形成网络，并使用统一资源标志符（URL）标识。HTTP是万维网的主要访问协议。 其实大家平常使用的浏览器根据维基百科上的解释，可以称为：<strong>万维网浏览器软件</strong>，如chrome,firefox</p><h3 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结"><span>区别总结</span></a></h3><p>目前由于因特网的广泛使用，因此互联网有时直接指代因特网，但是我们可以从英语名字中看出不同，互联网：internet，因特网：Internet。广义上的互联网是很大的，两台电脑组成的网络也能称为互联网，但是不能称为因特网。 万维网也称为Web，是因特网中的一项服务（web服务），除了万维网，因特网还包括了许多其他服务，例如：电子邮件服务，FTP，Telnet等等。</p>`,65)]))}const o=s(h,[["render",d],["__file","网络杂记.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E6%9D%82%E8%AE%B0.html","title":"网络杂记","lang":"zh-CN","frontmatter":{"description":"网络杂记 目录 网页加载 DOMContentLoaded和Load的区别 参考文章 带着问题 img image-20200820113719634 我们一再强调将css放在头部，将js文件放在尾部，这样有利于优化页面的性能，为什么这种方式能够优化性能？ 在用jquery的时候，我们一般都会将函数调用写在ready方法内，这是什么原理？ 一些概念 下...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E6%9D%82%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"网络杂记"}],["meta",{"property":"og:description","content":"网络杂记 目录 网页加载 DOMContentLoaded和Load的区别 参考文章 带着问题 img image-20200820113719634 我们一再强调将css放在头部，将js文件放在尾部，这样有利于优化页面的性能，为什么这种方式能够优化性能？ 在用jquery的时候，我们一般都会将函数调用写在ready方法内，这是什么原理？ 一些概念 下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://images2015.cnblogs.com/blog/746387/201704/746387-20170407181151019-499554025.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络杂记\\",\\"image\\":[\\"https://images2015.cnblogs.com/blog/746387/201704/746387-20170407181151019-499554025.png\\",\\"https://user-gold-cdn.xitu.io/2018/6/21/164221df201228c8?imageView2/0/w/1280/h/960/ignore-error/1\\",\\"https://pic4.zhimg.com/80/v2-93b8d74ede8e42bf56924db2703175af_720w.jpg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"网络杂记","slug":"网络杂记","link":"#网络杂记","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"网页加载","slug":"网页加载","link":"#网页加载","children":[{"level":2,"title":"DOMContentLoaded和Load的区别","slug":"domcontentloaded和load的区别","link":"#domcontentloaded和load的区别","children":[{"level":3,"title":"带着问题","slug":"带着问题","link":"#带着问题","children":[]},{"level":3,"title":"一些概念","slug":"一些概念","link":"#一些概念","children":[{"level":4,"title":"下载/加载","slug":"下载-加载","link":"#下载-加载","children":[]},{"level":4,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":4,"title":"DOM构建","slug":"dom构建","link":"#dom构建","children":[]},{"level":4,"title":"CSS构建","slug":"css构建","link":"#css构建","children":[]},{"level":4,"title":"render 树","slug":"render-树","link":"#render-树","children":[]}]},{"level":3,"title":"加载与页面的首次渲染","slug":"加载与页面的首次渲染","link":"#加载与页面的首次渲染","children":[]},{"level":3,"title":"资源的加载","slug":"资源的加载","link":"#资源的加载","children":[{"level":4,"title":"head资源的加载","slug":"head资源的加载","link":"#head资源的加载","children":[]},{"level":4,"title":"body资源的加载","slug":"body资源的加载","link":"#body资源的加载","children":[]}]},{"level":3,"title":"两种Load的触发","slug":"两种load的触发","link":"#两种load的触发","children":[{"level":4,"title":"DOMContentLoaded","slug":"domcontentloaded","link":"#domcontentloaded","children":[]},{"level":4,"title":"load","slug":"load","link":"#load","children":[]}]},{"level":3,"title":"浏览器对同一域名下的资源并发下载线程数","slug":"浏览器对同一域名下的资源并发下载线程数","link":"#浏览器对同一域名下的资源并发下载线程数","children":[]},{"level":3,"title":"performance性能统计","slug":"performance性能统计","link":"#performance性能统计","children":[]}]}]},{"level":1,"title":"其他","slug":"其他","link":"#其他","children":[{"level":2,"title":"因特网，万维网，互联网什么区别？","slug":"因特网-万维网-互联网什么区别","link":"#因特网-万维网-互联网什么区别","children":[{"level":3,"title":"范围","slug":"范围","link":"#范围","children":[]},{"level":3,"title":"什么是互联网（internet 注意 i 小写）？","slug":"什么是互联网-internet-注意-i-小写","link":"#什么是互联网-internet-注意-i-小写","children":[]},{"level":3,"title":"什么是因特网（Internet 注意 I 大写）？","slug":"什么是因特网-internet-注意-i-大写","link":"#什么是因特网-internet-注意-i-大写","children":[]},{"level":3,"title":"什么是万维网（World Wide Web）？","slug":"什么是万维网-world-wide-web","link":"#什么是万维网-world-wide-web","children":[]},{"level":3,"title":"区别总结","slug":"区别总结","link":"#区别总结","children":[]}]}]}],"git":{},"readingTime":{"minutes":8.88,"words":2665},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络杂记.md","excerpt":"\\n<h1>目录</h1>\\n<h1>网页加载</h1>\\n<h2>DOMContentLoaded和Load的区别</h2>\\n<p>参考文章</p>\\n<h3>带着问题</h3>\\n<p><img src=\\"https://images2015.cnblogs.com/blog/746387/201704/746387-20170407181151019-499554025.png\\" alt=\\"img\\" loading=\\"lazy\\"></p>\\n<p></p>\\n<ul>\\n<li>\\n<p>我们一再强调将css放在头部，将js文件放在尾部，这样有利于优化页面的性能，为什么这种方式能够优化性能？</p>\\n</li>\\n<li>\\n<p>在用jquery的时候，我们一般都会将函数调用写在ready方法内，这是什么原理？</p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络杂记.md","value":{"title":"网络杂记","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络杂记.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,k as data};
