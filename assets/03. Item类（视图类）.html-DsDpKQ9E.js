import{_ as o,e as a,g as t,f as s,j as i,h as d,r as n,o as r}from"./app-DPU1xou8.js";const c={};function m(u,e){const l=n("VPIcon");return r(),a("div",null,[e[2]||(e[2]=t('<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="item类-视图类" tabindex="-1"><a class="header-anchor" href="#item类-视图类"><span>Item类（视图类）</span></a></h1><h2 id="item-views-项目视图-model-based" tabindex="-1"><a class="header-anchor" href="#item-views-项目视图-model-based"><span>Item Views，项目视图（Model-Based）</span></a></h2><p>Item Views与Item Widgets很像，但前者需要基于数据库而后者不需要</p><ul><li><strong>List View</strong>，清单视图</li><li><strong>Tree View</strong>，树形视图</li><li><strong>Table View</strong>，表视图</li><li><strong>Column View</strong>，列视图</li><li><strong>Undo View</strong></li></ul><h2 id="item-widgets-项目控件-item-based" tabindex="-1"><a class="header-anchor" href="#item-widgets-项目控件-item-based"><span>Item Widgets，项目控件（Item-Based）</span></a></h2><p>Item Views与Item Widgets很像，但前者需要基于数据库而后者不需要</p><ul><li><strong>List Widget</strong>，列表控件 <ul><li>使用1：添加一项（每项是一个<code>QListWidgetItem</code>） <ul><li>(1) 先创建一个项，<code>QListWidgetItem * item = new QListWidgetItem(&quot;First Item&quot;);</code></li><li>(2) 将项放入List Widget，<code>ui-&gt;listWidget-&gt;addItem(item);</code></li><li>其他：项设置水平居中，<code>item-&gt;setTextAlignment(Qt::AlignHCenter);</code></li></ul></li><li>使用2：添加多项（<code>QString List</code>或<code>QList&lt;QString&gt;</code>） <ul><li>(1) 创建一个列表，<code>QStringList list; list &lt;&lt; &quot;First&quot; &lt;&lt; &quot;Seconed&quot; &lt;&lt; &quot;Thrid&quot;;</code></li><li>(2) 将列表放入List Widget，<code>ui-&gt;listWidget-&gt;addItems(list);</code></li><li>其他：但该方法不能做居中</li></ul></li></ul></li><li><strong>Tree Widget</strong>，树控件 <ul><li>使用：（每项是一个<code>QTreeWidgetItem</code>） <ul><li>(1) 设置水平头，<code>ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt;&quot;英雄&quot;&lt;&lt;&quot;介绍&quot;);</code></li><li>(2) 创建树节点（根/子节点），<code>QTreeWidgetItem * parItem = new QTreeWidgetItem(QString()&lt;&lt;&quot;力量&quot;);</code></li><li>(3) 加载根节点，<code>ui-&gt;treeWidget-&gt;addTopLevelItem(liItem);</code></li><li>(4) 追加子节点，<code>liItem-&gt;addChild(subItem);</code></li></ul></li></ul></li><li><strong>Table Widget</strong>，表格控件 <ul><li>使用：（每一项是一个<code>QTableWidgetItem</code>） <ul><li>(1) 设置列数，<code>ui-&gt;tableWidget-&gt;setColumnCount(3);</code></li><li>(2) 设置水平表头，<code>ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;&quot;姓名&quot;&lt;&lt;&quot;性别&quot;&lt;&lt;&quot;年龄&quot;);</code></li><li>(3) 设置行数，<code>ui-&gt;tableWidget-&gt;setRowCount(5);</code></li><li>(4) 设置内容，<code>ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(&quot;亚瑟&quot;));</code></li></ul></li></ul></li></ul><h2 id="模型-视图结构-见另一章" tabindex="-1"><a class="header-anchor" href="#模型-视图结构-见另一章"><span>模型/视图结构（见另一章）</span></a></h2><p>略，见另一章</p><h2 id="item拖拽、界面中存储数据、qt-userrole的使用" tabindex="-1"><a class="header-anchor" href="#item拖拽、界面中存储数据、qt-userrole的使用"><span>Item拖拽、界面中存储数据、Qt::UserRole的使用</span></a></h2><h3 id="item拖拽" tabindex="-1"><a class="header-anchor" href="#item拖拽"><span>Item拖拽</span></a></h3><p>参考NodeEditor程序</p><h3 id="界面中存储数据" tabindex="-1"><a class="header-anchor" href="#界面中存储数据"><span>界面中存储数据</span></a></h3><p>详见 https://blog.csdn.net/sajdhfkjidkgjo/article/details/104685538/</p><p>常见接口</p><p>Qt中，可以通过绝大部分已有的接口来存数数据、获取数据。例如：</p><ul><li>存储数据 <ul><li>setData()</li><li>setItemData()</li><li>setUserData()</li></ul></li><li>获取数据： <ul><li>data()</li><li>itemData()</li><li>userData()</li></ul></li></ul><p>常用的基本就这些，当然，还有其他的一些接口</p><h3 id="qt-userrole的使用" tabindex="-1"><a class="header-anchor" href="#qt-userrole的使用"><span>Qt::UserRole的使用</span></a></h3><p>详见 https://blog.csdn.net/sajdhfkjidkgjo/article/details/104685538/</p><blockquote><h4 id="单独存储" tabindex="-1"><a class="header-anchor" href="#单独存储"><span>单独存储</span></a></h4></blockquote>',23)),s("p",null,[e[0]||(e[0]=i("通过setData()，我们可以单独存储用户数据，使用Qt")),d(l,{icon:"UserRole、Qt"}),e[1]||(e[1]=i("UserRole + 1……"))]),e[3]||(e[3]=t('<blockquote><h4 id="整体存储" tabindex="-1"><a class="header-anchor" href="#整体存储"><span>整体存储</span></a></h4></blockquote><p>也可以通过setData()进行整体存储，这时候只需要使用Qt::UserRole即可，把用户数据当成一个结构体来存储。</p><blockquote><h4 id="setitemdata-和itemdata" tabindex="-1"><a class="header-anchor" href="#setitemdata-和itemdata"><span>setItemData()和itemData()</span></a></h4></blockquote><ul><li></li></ul><blockquote><h4 id="setuserdata-和userdata" tabindex="-1"><a class="header-anchor" href="#setuserdata-和userdata"><span>setUserData()和userData()</span></a></h4></blockquote><ul><li></li></ul>',6))])}const p=o(c,[["render",m],["__file","03. Item类（视图类）.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/02.%20QtGUI%E7%B1%BB/01.%20Widget/02.%20%E6%8E%A7%E4%BB%B6%E7%B1%BB/03.%20Item%E7%B1%BB%EF%BC%88%E8%A7%86%E5%9B%BE%E7%B1%BB%EF%BC%89.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 Item类（视图类） Item Views，项目视图（Model-Based） Item Views与Item Widgets很像，但前者需要基于数据库而后者不需要 List View，清单视图 Tree View，树形视图 Table View，表视图 Column View，列视图 Undo View Item Widgets，项目控件...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/02.%20QtGUI%E7%B1%BB/01.%20Widget/02.%20%E6%8E%A7%E4%BB%B6%E7%B1%BB/03.%20Item%E7%B1%BB%EF%BC%88%E8%A7%86%E5%9B%BE%E7%B1%BB%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 Item类（视图类） Item Views，项目视图（Model-Based） Item Views与Item Widgets很像，但前者需要基于数据库而后者不需要 List View，清单视图 Tree View，树形视图 Table View，表视图 Column View，列视图 Undo View Item Widgets，项目控件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.74,"words":523},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/01. Widget/02. 控件类/03. Item类（视图类）.md","excerpt":"\\n<h1>目录</h1>\\n<h1>Item类（视图类）</h1>\\n<h2>Item Views，项目视图（Model-Based）</h2>\\n<p>Item Views与Item Widgets很像，但前者需要基于数据库而后者不需要</p>\\n<ul>\\n<li><strong>List View</strong>，清单视图</li>\\n<li><strong>Tree View</strong>，树形视图</li>\\n<li><strong>Table View</strong>，表视图</li>\\n<li><strong>Column View</strong>，列视图</li>\\n<li><strong>Undo View</strong></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/01. Widget/02. 控件类/03. Item类（视图类）.md","value":{"title":"03. Item类（视图类）","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/01. Widget/02. 控件类/03. Item类（视图类）.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
