import{_ as s,c as a,b as t,o as p}from"./app-Ci64BYEV.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型"><span>复合类型</span></a></h1><h2 id="结构体-struct" tabindex="-1"><a class="header-anchor" href="#结构体-struct"><span>结构体 (Struct)</span></a></h2><h3 id="三种类型" tabindex="-1"><a class="header-anchor" href="#三种类型"><span>三种类型</span></a></h3><p>结构体（ struct ）可以由各种不同类型组成。使用 struct 关键字来创建。struct 是 structure 的缩写。 结构体可以作为另一个结构体的字段。结构体是可以嵌套的。</p><p>有三种类型：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 1. 经典的 C 语言风格结构体（C struct）</span>
<span class="token keyword">struct</span> 结构体名称 <span class="token punctuation">{</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 单元结构体（unit struct），不带字段，在泛型中很有用。</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Unit</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 元组结构体（tuple struct），事实上就是具名元组而已。</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面主要以C风格结构体为例</p><h3 id="_1-c风格结构体" tabindex="-1"><a class="header-anchor" href="#_1-c风格结构体"><span>(1) C风格结构体</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> 结构体名称 <span class="token punctuation">{</span>
    字段<span class="token number">1</span><span class="token punctuation">:</span> 数据类型<span class="token punctuation">,</span>
    字段<span class="token number">2</span><span class="token punctuation">:</span> 数据类型<span class="token punctuation">,</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建、初始化" tabindex="-1"><a class="header-anchor" href="#创建、初始化"><span>创建、初始化</span></a></h4><p>其实就是对 结构体中的各个元素进行赋值</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> 实例名称 <span class="token operator">=</span> 结构体名称 <span class="token punctuation">{</span>
    field1<span class="token punctuation">:</span> value1<span class="token punctuation">,</span>
    field2<span class="token punctuation">:</span> value2
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">struct</span> <span class="token type-definition class-name">Study</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    target<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
    spend<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        target<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;全面掌握Go语言微服务落地，代码级一次性解决微服务和分布式系统。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        spend<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
<span class="token class-name">Study</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token string">&quot;全面掌握Go语言微服务落地，代码级一次性解决微服务和分布式系统。&quot;</span><span class="token punctuation">,</span> spend<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问实例属性" tabindex="-1"><a class="header-anchor" href="#访问实例属性"><span>访问实例属性</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>实例名称<span class="token punctuation">.</span>属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 从0到Go语言微服务架构师</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="修改结构体实例" tabindex="-1"><a class="header-anchor" href="#修改结构体实例"><span>修改结构体实例</span></a></h4><p>结构体实例默认是不可修改的，如果想修改结构体实例，声明时使用mut关键字。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> s2 <span class="token operator">=</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    target<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;全面掌握Go语言微服务落地，代码级一次性解决微服务和分布式系统。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    spend<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
s2<span class="token punctuation">.</span>spend <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 修改</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出</span>
<span class="token class-name">Study</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token string">&quot;全面掌握Go语言微服务落地，代码级一次性解决微服务和分布式系统。&quot;</span><span class="token punctuation">,</span> spend<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体做参数" tabindex="-1"><a class="header-anchor" href="#结构体做参数"><span>结构体做参数</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">Study</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span>
        <span class="token string">&quot;name is :{} target is {} spend is{}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>target<span class="token punctuation">,</span> s<span class="token punctuation">.</span>spend
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体作为返回值" tabindex="-1"><a class="header-anchor" href="#结构体作为返回值"><span>结构体作为返回值</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">get_instance</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> spend<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">,</span>
        target<span class="token punctuation">,</span>
        spend<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token function">get_instance</span><span class="token punctuation">(</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;学习Go语言语法，并且完成一个单体服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出：</span>
<span class="token class-name">Study</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token string">&quot;学习Go语言语法，并且完成一个单体服务&quot;</span><span class="token punctuation">,</span> spend<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体方法" tabindex="-1"><a class="header-anchor" href="#结构体方法"><span>结构体方法</span></a></h3><h4 id="普通方法" tabindex="-1"><a class="header-anchor" href="#普通方法"><span>普通方法</span></a></h4><p><strong>方法（method）是依附于对象的函数</strong>。这些方法通过关键字 self 来访问对象中的数据和其他。方法在 impl 代码块中定义。</p><p>与函数的区别</p><ul><li>函数：可以直接调用，同一个程序不能出现 2 个相同的函数签名的函数，应为函数不归属任何 owner。</li><li>方法：<strong>归属某一个 owner</strong>，不同的 owner 可以有相同的方法签名。</li></ul><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> 结构体 <span class="token punctuation">{</span>							<span class="token comment">// &quot;impl&quot; 是 &quot;implement&quot; 的缩写。意思是 “实现”的意思。</span>
    <span class="token keyword">fn</span> 方法名<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> 参数列表<span class="token punctuation">)</span> 返回值 <span class="token punctuation">{</span>	<span class="token comment">// &quot;self&quot; 是 &quot;自己&quot; 的意思。 </span>
        							  <span class="token comment">// &amp;self 表示当前结构体的实例。&amp;self 也是结构体普通方法固定的第一个参数，其他参数可选。</span>
        <span class="token comment">// 方法体</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构体方法的作用域仅限于结构体内部。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">get_spend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>spend<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;spend {}&quot;</span><span class="token punctuation">,</span> s3<span class="token punctuation">.</span><span class="token function">get_spend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 spend 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token comment">// 定义</span>
<span class="token keyword">fn</span> 方法名<span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 数据类型<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> 返回值类型 <span class="token punctuation">{</span>	<span class="token comment">// 与普通方法的区别：没有 &amp;self 作为第一个参数</span>
	<span class="token comment">// 方法体</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用</span>
结构体名称<span class="token punctuation">::</span>方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">impl</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
    <span class="token punctuation">...</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">get_instance_another</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> spend<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Study</span> <span class="token punctuation">{</span>
            name<span class="token punctuation">,</span>
            target<span class="token punctuation">,</span>
            spend<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">Study</span><span class="token punctuation">::</span><span class="token function">get_instance_another</span><span class="token punctuation">(</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;学习Go语言语法，并且完成一个单体服务&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">5</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-单元结构体-unit-type" tabindex="-1"><a class="header-anchor" href="#_2-单元结构体-unit-type"><span>(2) 单元结构体 (unit type)</span></a></h3><p>unit type 是一个类型，有且仅有一个值：</p><p>()，单元类型()类似 c/c++/java 语言中的 void</p><ul><li>当一个函数并不需要返回值的时候，其他语言返回void</li><li>rust 则返回()</li></ul><p>但语法层面上，void 仅仅只是一个类型，该类型没有任何值；而单元类型()既是一个类型，同时又是该类型的值。</p><h3 id="_3-元祖结构体" tabindex="-1"><a class="header-anchor" href="#_3-元祖结构体"><span>(3) 元祖结构体</span></a></h3><h4 id="实例化" tabindex="-1"><a class="header-anchor" href="#实例化"><span>实例化</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> pair <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h4><p>访问元组结构体的字段</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;pair 包含 {:?} and {:?}&quot;</span><span class="token punctuation">,</span> pair<span class="token number">.0</span><span class="token punctuation">,</span> pair<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出：</span>
pair 包含<span class="token string">&quot;从0到Go语言微服务架构师&quot;</span> and <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解构" tabindex="-1"><a class="header-anchor" href="#解构"><span>解构</span></a></h4><p>解构一个元组结构体</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token punctuation">(</span>study<span class="token punctuation">,</span> spend<span class="token punctuation">)</span> <span class="token operator">=</span> pair<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;pair 包含 {:?} and {:?}&quot;</span><span class="token punctuation">,</span> study<span class="token punctuation">,</span> spend<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出：内容同上</span>
pair 包含<span class="token string">&quot;从0到Go语言微服务架构师&quot;</span> and <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举-enum" tabindex="-1"><a class="header-anchor" href="#枚举-enum"><span>枚举 (Enum)</span></a></h2><p>枚举 enum 关键字允许创建一个从数个不同取值中选其一的枚举类型（enumeration）。任何一个在 struct 中合法的取值在 enum 中也合法。</p><p>在日常生活中很常见。比如：1 年有 12 个月，1 周有 7 天。</p><h3 id="枚举的定义" tabindex="-1"><a class="header-anchor" href="#枚举的定义"><span>枚举的定义</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> 枚举名称<span class="token punctuation">{</span>
    variant1<span class="token punctuation">,</span>
    variant2<span class="token punctuation">,</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用枚举" tabindex="-1"><a class="header-anchor" href="#使用枚举"><span>使用枚举</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>枚举名称<span class="token punctuation">::</span>variant
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>			<span class="token comment">// #[derive(Debug)] 注解的作用，就是让 派生自Debug。</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">RoadMap</span> <span class="token punctuation">{</span>
    <span class="token class-name">Go</span>语言极简一本通<span class="token punctuation">,</span>
    <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲<span class="token punctuation">,</span>
    从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token class-name">RoadMap</span><span class="token punctuation">::</span>从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;level---{:?}&quot;</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="option-枚举" tabindex="-1"><a class="header-anchor" href="#option-枚举"><span>Option 枚举</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
   <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 用于返回一个值</span>
   <span class="token class-name">None</span>          <span class="token comment">// 用于返回 null,用None来代替。</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Option 枚举<strong>经常用在函数中的返回值</strong>，它可以表示有返回值，也可以用于表示没有返回值。如果有返回值。</p><p>可以使用返回 Some(data)，如果函数没有返回值，可以返回 None。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">getDiscount</span><span class="token punctuation">(</span>price<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> price <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token punctuation">{</span>
        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">None</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>  	<span class="token comment">// 输出 Some(true)</span>
<span class="token comment">// let p=6;		// 输出 None</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">getDiscount</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match-语句" tabindex="-1"><a class="header-anchor" href="#match-语句"><span>match 语句</span></a></h3><p>判断一个枚举变量的值，唯一操作符就是 match。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">print_road_map</span><span class="token punctuation">(</span>r<span class="token punctuation">:</span><span class="token class-name">RoadMap</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">match</span> r <span class="token punctuation">{</span>
        <span class="token class-name">RoadMap</span><span class="token punctuation">::</span><span class="token class-name">Go</span>语言极简一本通<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">RoadMap</span><span class="token punctuation">::</span><span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token class-name">RoadMap</span><span class="token punctuation">::</span>从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">print_road_map</span><span class="token punctuation">(</span><span class="token class-name">RoadMap</span><span class="token punctuation">::</span><span class="token class-name">Go</span>语言极简一本通<span class="token punctuation">)</span><span class="token punctuation">;</span>			  <span class="token comment">// 输出 Go语言极简一本通</span>
<span class="token function">print_road_map</span><span class="token punctuation">(</span><span class="token class-name">RoadMap</span><span class="token punctuation">::</span><span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 Go语言微服务架构核心22讲</span>
<span class="token function">print_road_map</span><span class="token punctuation">(</span><span class="token class-name">RoadMap</span><span class="token punctuation">::</span>从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 输出 从0到Go语言微服务架构师</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带数据类型的枚举" tabindex="-1"><a class="header-anchor" href="#带数据类型的枚举"><span>带数据类型的枚举</span></a></h3><p>（不知道能怎么用）</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">enum</span> 枚举名称 <span class="token punctuation">{</span>
    <span class="token function">variant1</span><span class="token punctuation">(</span>数据类型<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">variant2</span><span class="token punctuation">(</span>数据类型<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">enum</span> <span class="token type-definition class-name">StudyRoadMap</span> <span class="token punctuation">{</span>
    <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> level3 <span class="token operator">=</span> <span class="token class-name">StudyRoadMap</span><span class="token punctuation">::</span><span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">match</span> level3 <span class="token punctuation">{</span>
    <span class="token class-name">StudyRoadMap</span><span class="token punctuation">::</span><span class="token class-name">Name</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//输出 &quot;从0到Go语言微服务架构师&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合-collections-未" tabindex="-1"><a class="header-anchor" href="#集合-collections-未"><span>集合 (Collections) - 未</span></a></h2><p>Rust 语言标准库提供了通用的数据结构的实现。包括：</p><ul><li>向量 （Vector）</li><li>哈希表（ HashMap ）</li><li>哈希集合（ HashSet ）</li></ul><h3 id="向量-vector" tabindex="-1"><a class="header-anchor" href="#向量-vector"><span>向量 (Vector)</span></a></h3><p>Rust 在标准库中定义了结构体 Vec 用于表示一个向量。向量和数组很相似，只是数组长度是编译时就确定了，定义后就不能改变了，那要么改数组，让他支持可变长度，显然 Rust 没有这么做，它用向量这个数据结构，也是在内存中开辟一段连续的内存空间来存储元素。</p><p>特点：</p><ul><li>向量中的元素都是相同类型元素的集合。</li><li>长度可变，运行时可以增加和减少。</li><li>使用索引查找元素。（索引从 0 开始）</li><li>添加元素时，添加到向量尾部。</li><li>向量的内存在堆上，长度可动态变化。</li></ul><h4 id="创建向量" tabindex="-1"><a class="header-anchor" href="#创建向量"><span>创建向量</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 静态方法用于创建一个结构体 <span class="token class-name">Vec</span> 的实例。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>let mut 向量的变量名称 = Vec::new();</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token macro property">vec!</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 宏来简化向量的创建。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>let 向量的变量名称 = vec![val1,val2,...]</p><h4 id="向量的使用方法" tabindex="-1"><a class="header-anchor" href="#向量的使用方法"><span>向量的使用方法</span></a></h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>new()</td><td>创建一个空的向量的实例</td></tr><tr><td>push()</td><td>将某个值 T 添加到向量的末尾</td></tr><tr><td>remove()</td><td>删除并返回指定的下标元素</td></tr><tr><td>contains()</td><td>判断向量是否包含某个值</td></tr><tr><td>len()</td><td>返回向量中的元素个数</td></tr></tbody></table><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用 Vec 结构的 new() 静态方法来创建向量。</span>
v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//通过push方法添加元素数据。并且追加到向量尾部。</span>
v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;len :{}&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过len方法获取向量中的元素个数。</span>


<span class="token keyword">let</span> <span class="token keyword">mut</span> v2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 通过vect!宏创建向量时，向量的数据类型由第一个元素自动推断出来。</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> x<span class="token operator">=</span>v2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// remove()方法移除并返回向量中指定的下标索引处的元素，将其后面的所有元素移到向左移动一位。</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 Go语言极简一本通</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 [&quot;Go语言微服务核心架构22讲&quot;, &quot;从0到Go语言微服务架构师&quot;]</span>

<span class="token comment">//contains() 用于判断向量是否包含某个值。如果值在向量中存在则返回 true，否则返回 false。</span>
<span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;找到了&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//访问向量中的某个元素,使用索引</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出 Go语言极简一本通</span>

<span class="token comment">//遍历向量</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> v <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;充电项目: {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出</span>
充电项目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言极简一本通
充电项目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务核心架构<span class="token number">22</span>讲
充电项目<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="哈希表-hashmap" tabindex="-1"><a class="header-anchor" href="#哈希表-hashmap"><span>哈希表 (HashMap)</span></a></h3><p>HashMap 就是键值对集合。键是不能重复的，值是可以重复的。</p><p>使用 HashMap 结构体之前需要显式导入 std::collections 模块。</p><h4 id="创建-hashmap" tabindex="-1"><a class="header-anchor" href="#创建-hashmap"><span>创建 HashMap</span></a></h4><p>使用 new()方法来创建。</p><p>let mut 变量名称 = HashMap::new();</p><p>这个哈希表只有当我们添加了元素之后才能正常使用。因为现在还没指定的数据类型。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>insert()</td><td>插入/更新一个键值对到哈希表中，如果数据已经存在则返回旧值，如果不存在则返回 None</td></tr><tr><td>len()</td><td>返回哈希表中键值对的个数</td></tr><tr><td>get()</td><td>根据键从哈希表中获取相应的值</td></tr><tr><td>iter()</td><td>返回哈希表键值对的无序迭代器，迭代器元素类型为 (&amp;’a K, &amp;’a V)</td></tr><tr><td>contains_key</td><td>如果哈希表中存在指定的键则返回 true 否则返回 false</td></tr><tr><td>remove()</td><td>从哈希表中删除并返回指定的键值对</td></tr></tbody></table><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>collections<span class="token punctuation">::</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> process <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> process<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 {&quot;Go语言极简一本通&quot;: 1, &quot;Go语言微服务核心架构22讲&quot;: 2, &quot;从0到Go语言微服务架构师&quot;: 3}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;len {}&quot;</span><span class="token punctuation">,</span>menu<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出  3</span>


<span class="token comment">// get() 方法用于根据键从哈希表中获取相应的值。</span>
<span class="token keyword">match</span> process<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token class-name">Some</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;HashMap v:{}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token class-name">None</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;找不到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出 HashMap v:3</span>

<span class="token comment">//迭代哈希表 iter()</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;k: {} v: {}&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出</span>
k<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务核心架构<span class="token number">22</span>讲 v<span class="token punctuation">:</span> <span class="token number">2</span>
k<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师 v<span class="token punctuation">:</span> <span class="token number">3</span>
k<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言极简一本通 v<span class="token punctuation">:</span> <span class="token number">1</span>

<span class="token comment">// contains_key() 方法用于判断哈希表中是否包含指定的 键值对。如果包含指定的键，那么会返回相应的值的引用，否则返回 None。</span>
<span class="token keyword">if</span> process<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;找到了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出 找到了</span>

<span class="token comment">// remove() 用于从哈希表中删除指定的键值对。如果键值对存在则返回删除的键值对，返回的数据格式为 (&amp;&#39;a K, &amp;&#39;a V)。如果键值对不存在则返回 None</span>

<span class="token keyword">let</span> x<span class="token operator">=</span>process<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出</span>
<span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="哈希集合-hashset" tabindex="-1"><a class="header-anchor" href="#哈希集合-hashset"><span>哈希集合 (HashSet)</span></a></h3><p>Hashset 是相同数据类型的集合，它是没有重复值的。如果集合中已经存在相同的值，则会插入失败。</p><h4 id="创建-hashset" tabindex="-1"><a class="header-anchor" href="#创建-hashset"><span>创建 Hashset</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> 变量名称 <span class="token operator">=</span> <span class="token class-name">HashSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

常用方法如下
方法 	描述
<span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	插入一个值到集合中 如果集合已经存在值则插入失败
<span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	返回集合中的元素个数
<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	根据指定的值获取集合中相应值的一个引用
<span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	返回集合中所有元素组成的无序迭代器 迭代器元素的类型为 <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">T</span>
contains_key 	判断集合是否包含指定的值
<span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	从结合中删除指定的值

<span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 用于插入一个值到集合中。

<span class="token keyword">let</span> <span class="token keyword">mut</span> studySet <span class="token operator">=</span> <span class="token class-name">HashSet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studySet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studySet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
studySet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> studySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 {&quot;从0到Go语言微服务架构师&quot;, &quot;Go语言微服务核心架构22讲&quot;, &quot;Go语言极简一本通&quot;}</span>

studySet<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> studySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出 {&quot;从0到Go语言微服务架构师&quot;, &quot;Go语言微服务核心架构22讲&quot;, &quot;Go语言极简一本通&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="len-方法集合中元素的个数。" tabindex="-1"><a class="header-anchor" href="#len-方法集合中元素的个数。"><span>len() 方法集合中元素的个数。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;len:{}&quot;</span><span class="token punctuation">,</span>studySet<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 len:3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="iter-方法用于返回集合中所有元素组成的无序迭代器。" tabindex="-1"><a class="header-anchor" href="#iter-方法用于返回集合中所有元素组成的无序迭代器。"><span>iter() 方法用于返回集合中所有元素组成的无序迭代器。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> studySet<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;hashSet-充电项目: {}&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出</span>
hashSet<span class="token operator">-</span>充电项目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言极简一本通
hashSet<span class="token operator">-</span>充电项目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务核心架构<span class="token number">22</span>讲
hashSet<span class="token operator">-</span>充电项目<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="get-方法用于获取集合中指定值的一个引用。" tabindex="-1"><a class="header-anchor" href="#get-方法用于获取集合中指定值的一个引用。"><span>get() 方法用于获取集合中指定值的一个引用。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">match</span> studySet<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;没找到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Some</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;studySet中找到:{}&quot;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出 studySet中找到:从0到Go语言微服务架构师</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="contains-方法用于判断集合是否包含指定的值。" tabindex="-1"><a class="header-anchor" href="#contains-方法用于判断集合是否包含指定的值。"><span>contains() 方法用于判断集合是否包含指定的值。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">if</span> studySet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;包含 Go语言微服务核心架构22讲&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出 包含 Go语言微服务核心架构22讲</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="remove-方法用于从集合中删除指定的值。如果该值在集合中-则返回-true-如果不存在则返回-false。" tabindex="-1"><a class="header-anchor" href="#remove-方法用于从集合中删除指定的值。如果该值在集合中-则返回-true-如果不存在则返回-false。"><span>remove() 方法用于从集合中删除指定的值。如果该值在集合中，则返回 true，如果不存在则返回 false。</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>studySet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>studySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 {&quot;Go语言微服务核心架构22讲&quot;, &quot;从0到Go语言微服务架构师&quot;}</span>

studySet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;golang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>studySet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 {&quot;Go语言微服务核心架构22讲&quot;, &quot;从0到Go语言微服务架构师&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,112)]))}const i=s(e,[["render",o],["__file","06. 复合类型.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/06.%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B.html","title":"复合类型","lang":"zh-CN","frontmatter":{"description":"复合类型 结构体 (Struct) 三种类型 结构体（ struct ）可以由各种不同类型组成。使用 struct 关键字来创建。struct 是 structure 的缩写。 结构体可以作为另一个结构体的字段。结构体是可以嵌套的。 有三种类型： 下面主要以C风格结构体为例 (1) C风格结构体 定义 创建、初始化 其实就是对 结构体中的各个元素进行赋...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/06.%20%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"复合类型"}],["meta",{"property":"og:description","content":"复合类型 结构体 (Struct) 三种类型 结构体（ struct ）可以由各种不同类型组成。使用 struct 关键字来创建。struct 是 structure 的缩写。 结构体可以作为另一个结构体的字段。结构体是可以嵌套的。 有三种类型： 下面主要以C风格结构体为例 (1) C风格结构体 定义 创建、初始化 其实就是对 结构体中的各个元素进行赋..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"复合类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"复合类型","slug":"复合类型","link":"#复合类型","children":[{"level":2,"title":"结构体 (Struct)","slug":"结构体-struct","link":"#结构体-struct","children":[{"level":3,"title":"三种类型","slug":"三种类型","link":"#三种类型","children":[]},{"level":3,"title":"(1) C风格结构体","slug":"_1-c风格结构体","link":"#_1-c风格结构体","children":[{"level":4,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":4,"title":"创建、初始化","slug":"创建、初始化","link":"#创建、初始化","children":[]},{"level":4,"title":"访问实例属性","slug":"访问实例属性","link":"#访问实例属性","children":[]},{"level":4,"title":"修改结构体实例","slug":"修改结构体实例","link":"#修改结构体实例","children":[]}]},{"level":3,"title":"结构体做参数","slug":"结构体做参数","link":"#结构体做参数","children":[]},{"level":3,"title":"结构体作为返回值","slug":"结构体作为返回值","link":"#结构体作为返回值","children":[]},{"level":3,"title":"结构体方法","slug":"结构体方法","link":"#结构体方法","children":[{"level":4,"title":"普通方法","slug":"普通方法","link":"#普通方法","children":[]},{"level":4,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]}]},{"level":3,"title":"(2) 单元结构体 (unit type)","slug":"_2-单元结构体-unit-type","link":"#_2-单元结构体-unit-type","children":[]},{"level":3,"title":"(3) 元祖结构体","slug":"_3-元祖结构体","link":"#_3-元祖结构体","children":[{"level":4,"title":"实例化","slug":"实例化","link":"#实例化","children":[]},{"level":4,"title":"访问","slug":"访问","link":"#访问","children":[]},{"level":4,"title":"解构","slug":"解构","link":"#解构","children":[]}]}]},{"level":2,"title":"枚举 (Enum)","slug":"枚举-enum","link":"#枚举-enum","children":[{"level":3,"title":"枚举的定义","slug":"枚举的定义","link":"#枚举的定义","children":[]},{"level":3,"title":"使用枚举","slug":"使用枚举","link":"#使用枚举","children":[]},{"level":3,"title":"Option 枚举","slug":"option-枚举","link":"#option-枚举","children":[]},{"level":3,"title":"match 语句","slug":"match-语句","link":"#match-语句","children":[]},{"level":3,"title":"带数据类型的枚举","slug":"带数据类型的枚举","link":"#带数据类型的枚举","children":[]}]},{"level":2,"title":"集合 (Collections) - 未","slug":"集合-collections-未","link":"#集合-collections-未","children":[{"level":3,"title":"向量 (Vector)","slug":"向量-vector","link":"#向量-vector","children":[{"level":4,"title":"创建向量","slug":"创建向量","link":"#创建向量","children":[]},{"level":4,"title":"向量的使用方法","slug":"向量的使用方法","link":"#向量的使用方法","children":[]}]},{"level":3,"title":"哈希表 (HashMap)","slug":"哈希表-hashmap","link":"#哈希表-hashmap","children":[{"level":4,"title":"创建 HashMap","slug":"创建-hashmap","link":"#创建-hashmap","children":[]}]},{"level":3,"title":"哈希集合 (HashSet)","slug":"哈希集合-hashset","link":"#哈希集合-hashset","children":[{"level":4,"title":"创建 Hashset","slug":"创建-hashset","link":"#创建-hashset","children":[]},{"level":4,"title":"len() 方法集合中元素的个数。","slug":"len-方法集合中元素的个数。","link":"#len-方法集合中元素的个数。","children":[]},{"level":4,"title":"iter() 方法用于返回集合中所有元素组成的无序迭代器。","slug":"iter-方法用于返回集合中所有元素组成的无序迭代器。","link":"#iter-方法用于返回集合中所有元素组成的无序迭代器。","children":[]},{"level":4,"title":"get() 方法用于获取集合中指定值的一个引用。","slug":"get-方法用于获取集合中指定值的一个引用。","link":"#get-方法用于获取集合中指定值的一个引用。","children":[]},{"level":4,"title":"contains() 方法用于判断集合是否包含指定的值。","slug":"contains-方法用于判断集合是否包含指定的值。","link":"#contains-方法用于判断集合是否包含指定的值。","children":[]},{"level":4,"title":"remove() 方法用于从集合中删除指定的值。如果该值在集合中，则返回 true，如果不存在则返回 false。","slug":"remove-方法用于从集合中删除指定的值。如果该值在集合中-则返回-true-如果不存在则返回-false。","link":"#remove-方法用于从集合中删除指定的值。如果该值在集合中-则返回-true-如果不存在则返回-false。","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.58,"words":3773},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/06. 复合类型.md","excerpt":"\\n<h2>结构体 (Struct)</h2>\\n<h3>三种类型</h3>\\n<p>结构体（ struct ）可以由各种不同类型组成。使用 struct 关键字来创建。struct 是 structure 的缩写。\\n结构体可以作为另一个结构体的字段。结构体是可以嵌套的。</p>\\n<p>有三种类型：</p>\\n<div class=\\"language-rust\\" data-ext=\\"rs\\" data-title=\\"rs\\"><pre class=\\"language-rust\\"><code><span class=\\"token comment\\">// 1. 经典的 C 语言风格结构体（C struct）</span>\\n<span class=\\"token keyword\\">struct</span> 结构体名称 <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">...</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 2. 单元结构体（unit struct），不带字段，在泛型中很有用。</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token type-definition class-name\\">Unit</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 3. 元组结构体（tuple struct），事实上就是具名元组而已。</span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token type-definition class-name\\">Pair</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">i32</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,u as data};
