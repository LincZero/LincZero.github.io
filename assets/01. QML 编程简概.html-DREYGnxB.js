import{_ as n,c as h,e as l,a as i,f as t,b as e,o as r,r as p}from"./app-Dwsnbiv5.js";const k={};function d(c,s){const a=p("Mermaid");return r(),h("div",null,[s[8]||(s[8]=l('<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="qml-编程简概" tabindex="-1"><a class="header-anchor" href="#qml-编程简概"><span>QML 编程简概</span></a></h1><p>参考：</p><ul><li><a href="http://c.biancheng.net/view/3877.html" target="_blank" rel="noopener noreferrer">【C语言中文网】学习QML还是C++？</a></li><li>QML文档： <ul><li>个人博客：https://robinsea.github.io/2020/09/16/QmlBook/quick_starter/README/</li></ul></li></ul><h2 id="简概-qt-quick项目" tabindex="-1"><a class="header-anchor" href="#简概-qt-quick项目"><span>简概 - Qt Quick项目</span></a></h2><h3 id="qml与qtquick" tabindex="-1"><a class="header-anchor" href="#qml与qtquick"><span>QML与QtQuick</span></a></h3>',7)),i("ul",null,[i("li",null,[s[6]||(s[6]=i("p",null,"QML",-1)),i("ul",null,[s[4]||(s[4]=i("li",null,[i("p",null,"概念"),i("ul",null,[i("li",null,[t("QML（Qt Meta Language，Qt元语言）是一种用来描述应用程序界面的"),i("strong",null,"声明式脚本语言"),t("（这是标记语言吧）。自Qt4.7引用")])])],-1)),s[5]||(s[5]=i("li",null,[i("p",null,"优点"),i("ul",null,[i("li",null,"良好的易读性。以可视化组件及其交互和相互关联的方式来描述界面，使组件能在动态行为中互相连接")])],-1)),i("li",null,[s[3]||(s[3]=i("p",null,"原理",-1)),i("ul",null,[s[2]||(s[2]=i("li",null,[i("p",null,"通过Qt QML引擎在程序运行时解析并运行的")],-1)),i("li",null,[s[0]||(s[0]=i("p",null,"(旧) 编译器通道",-1)),e(a,{id:"mermaid-81",code:"eJxLL0osyFDwCeJy1PAK1g/09dHU1bXj8kmtSC3SD0gsKk4tin+xvvfZ5qkv1q8Fkk872p7NmwBS4pyfkpqemhf/ZPfi5wsan0+Z/6wDLO5fUJKZm1kF1Pdkz4ynPdNAYpy++SUZ8Z7FqTlAnlNlSWoyUHP807XTX3Q1ATVj1+PlGQLT4lhcnJqblFMZ/2Jx68vW3qd7Jz1buBhFhXN+bkFmTmJJZn5efGheZkn8s43tz/dMe9o79WlrMxcA44JmWQ=="})]),i("li",null,[s[1]||(s[1]=i("p",null,"(新) 编译器通道",-1)),e(a,{id:"mermaid-87",code:"eJxLL0osyFDwCeJy1PAK1g/09dHU1bXj8kmtSC3SD0gsKk4tin+xvvfZ5qkv1q8Fkk872p7NmwBS4pyfkpqemhf/ZPfi5wsan0+Z/6wDLM7pVFmSmgyUjH+6dvqLriagJFjYyzMETDsWF6fmJuVUxr9Y3Pqytffp3knPFi7GYRpIvXN+bkFmTmJJZn5efGheZkn8s43tz/dMe9o79WlrMxcAdbNX0A=="})])])])])]),s[7]||(s[7]=l("<li><p>Qt Quick</p><ul><li>概念 <ul><li>是Qt为QML提供的一套类库，由QML标准类型和功能组成</li><li>包括可视化类型、交互类型、动画类型、模型和视图、粒子系统和渲染效果等</li></ul></li><li>优点 <ul><li>易于使用，在编程时只需要一条import语句就能访问这些功能</li><li>易于开发UI界面</li></ul></li></ul></li><li><p>比较 QML C++</p><ul><li>并列称为Qt的首选编程语言</li></ul></li>",2))]),s[9]||(s[9]=l(`<h3 id="创建qt-quick工程" tabindex="-1"><a class="header-anchor" href="#创建qt-quick工程"><span>创建Qt Quick工程</span></a></h3><p>详见 简概 &gt; 开发流程 - 创建</p><p>创建 - 选项配置</p><ul><li>其他和普通项目选项差不多，主要注意一个新选项 <ul><li>Define Project Details：选择最低适应的Qt版本</li></ul></li></ul><h3 id="项目基本结构" tabindex="-1"><a class="header-anchor" href="#项目基本结构"><span>项目基本结构</span></a></h3><ul><li>QtQuickTest.pro</li><li>main.cpp</li><li>qml.qrc</li><li>main.qml（该文件视为qrc资源文件）</li></ul><p>pro</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">QT += quick</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">CONFIG += c++11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># You can make your code fail to compile if it uses deprecated APIs.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># In order to do so, uncomment the following line.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">SOURCES += \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">        main.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">RESOURCES += qml.qrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Additional import path used to resolve QML modules in Qt Creator&#39;s code model</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">QML_IMPORT_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Additional import path used to resolve QML modules just for Qt Quick Designer</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">QML_DESIGNER_IMPORT_PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Default rules for deployment.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">qnx: </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">target.path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> /tmp/$\${TARGET}/bin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">else: unix:!android: </span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">target.path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> /opt/$\${TARGET}/bin</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">!isEmpty(target.path): INSTALLS += target</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;QGuiApplication&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;QQmlApplicationEngine&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#if</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QT_VERSION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QT_VERSION_CHECK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QCoreApplication::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Qt::AA_EnableHighDpiScaling);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QGuiApplication </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(argc, argv);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QQmlApplicationEngine engine;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                       // QML引擎</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> QUrl </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QStringLiteral</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;qrc:/main.qml&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                    // 需要加载的qml</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    QObject::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">engine, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QQmlApplicationEngine::objectCreated,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 将引擎结果关联到lambda上</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">                     &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">app, [</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QObject</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> QUrl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">objUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">obj </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> url </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> objUrl)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            QCoreApplication::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                 // 无法加载则退出程序</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }, Qt::QueuedConnection);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    engine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                                   // 用QML引擎加载qml文档</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                                  // 消息循环</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>qml</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* import部分 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import QtQuick </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.12</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// 导入Qt Quick 2.7库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">import QtQuick.Window </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.12</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 导入Qt Quick 窗体库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 对象声明部分 */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Window {							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对象、根对象</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">640</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						// 宽度属性</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    height:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 480</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">						// 高度属性</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    visible:</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// 可见性属性</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    title:</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> qsTr(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 标题属性</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">	MainForm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子对象</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        anchor.fill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">parent</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">        mouseArea.onClicked:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 点击的回调函数</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">            console.log(qsTr(&#39;Clicked</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> on</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> background.</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&#39; + textEdit.text +&#39;&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&#39;))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目分析" tabindex="-1"><a class="header-anchor" href="#项目分析"><span>项目分析</span></a></h3><p>要点如下：</p><ul><li>cpp：<code>#include &lt;QtQml&gt; </code>，包含模块类的定义</li><li>.qml：<code>import QtQml 2.15 </code>，能使用QML类型</li><li>.pro：<code>QT += qml</code>，链接模块</li></ul><h2 id="简概-qt-widgets项目" tabindex="-1"><a class="header-anchor" href="#简概-qt-widgets项目"><span>简概 - Qt Widgets项目</span></a></h2><h3 id="创建-qml-文件" tabindex="-1"><a class="header-anchor" href="#创建-qml-文件"><span>创建 QML 文件</span></a></h3><p>项目右键 &gt; Add new &gt; Qt &gt;</p><ul><li>Qt <ul><li>QML File (Qt Quick 2)，创建<code>.qml</code>QML文件 （需要注意的是，一般会将默认创建的qml放入qrc资源文件，然后可以将.pro 中 DISTFILES 列表中的qml文件删掉）</li><li><s>QtQuick UI File，创建两个文件 <code>xxx.qml</code> <code>xxxFrom.ui.qml</code></s><s>（需要注意的是，一般会将默认创建的qml放入qrc资源文件，然后可以将.pro 中 DISTFILES 列表中的qml文件删掉）</s> （新版Qt Creator把这个选项给删了）</li></ul></li></ul><h3 id="qml-与-ui-qml-区别-现在-ui-qml选项已经被删了" tabindex="-1"><a class="header-anchor" href="#qml-与-ui-qml-区别-现在-ui-qml选项已经被删了"><span><s>.qml 与 .ui.qml 区别</s>（现在.ui.qml选项已经被删了）</span></a></h3><p>简单来说就是后者有助于UI和业务分离，有点类似于这个比喻：（不确定我理解得对不对）</p><blockquote><p>.qml 类似于 .html，你可以在里面写标签和Script，也可以只写标签、另建一个文件写Script .ui.qml 类似于声明了一种新的 .html，你不能在里面写Script</p></blockquote><p>当然我个人的想法是更类似于Vue那种设计的，组件分离 First，UI业务分离 Second，两者都需要分离。</p><details class="callout" data-callout="quote" data-callout-fold="-"><summary class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-inner">https://www.zhihu.com/question/55353497</div><div class="callout-fold"></div></summary><div class="callout-content"><p></p><p>.qml文件，就叫QML文件。.ui.qml文件，叫QtQuick UI文件</p><p>对于<code>.ui.qml</code>文件来说，不支持以下特性：</p><p>（1）JavaScript块代码。 （2）纯表达式之外的其他绑定。 （3）信号处理。 （4）在<a href="https://www.zhihu.com/search?q=%E6%A0%B9%E7%BB%84%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2682313148%7D" target="_blank" rel="noopener noreferrer">根组件</a>之外的其他组件中的状态。 （5）不是从QQuickItem或Item派生的根组件。 （6）引用根组件的<a href="https://www.zhihu.com/search?q=%E7%88%B6%E7%BB%84%E4%BB%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2682313148%7D" target="_blank" rel="noopener noreferrer">父组件</a>。</p><p>在<code>.ui.qml</code>文件中，不支持下列组件类型： （1）Behavior （2）Binding （3）Canvas （4）Shader Effect （5）Timer （6）Transform</p><p>在<code>.ui.qml</code>文件中，支持的方法如下『JavaScript 函数』：</p><p>这 <code>.ui.qml</code>文件的存在是为了帮助 Qt Quick Designer。 例如，普通 QML 文件可以包含 JavaScript 表达式，但 Qt Quick Designer 很难使用这些表达式。 另一方面，普通 QML 并不那么困难，并且更接近于等价于的小部件 <code>.ui</code>文件 - 详细说明用户界面中的一组项目的文档，而不是它们背后的逻辑。</p><p>用处：</p><p>将UI与<a href="https://www.zhihu.com/search?q=%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2682313148%7D" target="_blank" rel="noopener noreferrer">应用程序</a>逻辑分离是一种较好的开发方式。一般来说，设计人员应该使用UI文件(<code>.ui.qml</code>)，而开发人员应该使用相应的实现文件(<code>.qml</code>)来定义编程行为或编写JavaScript代码。通过这种方式，可以使得<a href="https://www.zhihu.com/search?q=%E8%AE%BE%E8%AE%A1%E7%AB%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2682313148%7D" target="_blank" rel="noopener noreferrer">设计端</a>和开发端都可以进行迭代，而不会出现覆盖彼此工作的问题。</p></div></details><details class="callout" data-callout="quote" data-callout-fold="-"><summary class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-inner">https://stackoverflow.com/questions/30652537/what-is-the-use-of-the-ui-qml-files-in-qt5-qml</div><div class="callout-fold"></div></summary><div class="callout-content"><p></p><p>这 <code>.ui.qml</code>文件的存在是为了帮助 Qt Quick Designer。 例如，普通 QML 文件可以包含 JavaScript 表达式，但 Qt Quick Designer 很难使用这些表达式。 另一方面，普通 QML 并不那么困难，并且更接近于等价于的小部件 <code>.ui</code>文件 - 详细说明用户界面中的一组项目的文档，而不是它们背后的逻辑。</p><p>该功能 是几年前在博客上提出的</p><blockquote><p>经典的 Widget Designer 是围绕声明式和命令式逻辑之间的区别构建的。 声明形式是可设计的并存储在 .ui 文件中。</p><p>在 Qml 中，很容易混合声明式代码和命令式代码。 如果您向 Qml 文件添加命令式指令（影响视觉方面），它们不再是纯粹的声明式，并且可视化编辑器中的可视化表示将会中断。 可视化编辑器需要一种方法将可视化描述转换回文本描述。 对于命令式代码，这通常是不可能的，Qt Quick Designer 甚至不会尝试。</p></blockquote><p><a href="http://doc.qt.io/qt-5/qtqml-documents-topic.html" target="_blank" rel="noopener noreferrer">QML 文档 </a>文档指出</p><blockquote><p>从 Qt 5.4 开始，文档也可以有文件扩展名“.ui.qml”。 QML 引擎像处理标准 .qml 文件一样处理这些文件，并忽略扩展名的 .ui 部分。 Qt Creator 将这些文件作为 Qt Quick Designer 的 UI 表单处理。 这些文件只能包含 Qt Creator 定义的 QML 语言的一个子集。</p></blockquote><p><a href="http://doc.qt.io/qtcreator/creator-quick-ui-forms.html" target="_blank" rel="noopener noreferrer">Qt Quick UI 表单 </a></p><blockquote><p>您可以使用 Qt Creator 向导创建文件扩展名为 .ui.qml 的 UI 表单。 UI 表单包含 QML 语言的纯声明子集。 建议您在设计模式下编辑表单。 但是，将项目导出为别名属性是一项仅供商业使用的功能，因此如果您使用 Qt Creator 的开源版本，则必须使用编辑模式来执行此操作。 Qt Creator 通过显示错误消息强制使用支持的 QML 功能。</p><p>不支持以下功能：</p><ul><li>JavaScript 块</li><li>函数定义</li><li>函数调用（qsTr 除外）</li><li>纯表达式以外的其他绑定</li><li>信号处理器</li><li>根项以外的其他项中的状态</li><li>不是从 QQuickItem 或 Item 派生的根项</li></ul><p>不支持以下类型：</p><ul><li>Behavior，行为</li><li>Binding，捆绑</li><li>Canvas，帆布</li><li>Component，零件</li><li>Shader Effect，着色效果</li><li>Timer，计时器</li><li>Transform，转换</li><li>Transition，过渡</li></ul></blockquote></div></details><details class="callout" data-callout="quote" data-callout-fold="-"><summary class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-inner">Qt Assistant：qthelp://org.qt-project.qtqml.5128/qtqml/qtqml-index.html</div><div class="callout-fold"></div></summary><div class="callout-content"><p></p><p>从Qt 5.4开始，文档也可以有扩展名为&quot; .ui.qml &quot;的文件。QML引擎像处理标准的. QML文件一样处理这些文件，而忽略扩展名的.ui部分。Qt Creator将这些文件作为Qt Quick Designer的UI表单处理。这些文件只能包含Qt Creator定义的QML语言的一个子集。</p></div></details><h2 id="qml底层原理" tabindex="-1"><a class="header-anchor" href="#qml底层原理"><span>QML底层原理</span></a></h2><p>参考</p><ul><li><a href="https://link.jianshu.com?t=http://qt-project.org/doc/qt-5.0/qtqml/qtqml-index.html" target="_blank" rel="noopener noreferrer">【Qt官网文档】Qt QML</a></li><li><a href="https://www.jianshu.com/p/3e959cbaff3a" target="_blank" rel="noopener noreferrer">【简书】[翻译] 深入解析QML引擎， 第1部分:QML文件加载</a> （原文 <a href="https://link.jianshu.com?t=http://www.kdab.com/qml-engine-internals-part-1-qml-file-loading/" target="_blank" rel="noopener noreferrer">QML Engine Internals, Part 1: QML File Loading</a>，这个解析QML引擎的文章共4篇）</li><li><a href="https://blog.csdn.net/bootleader/article/details/68937159" target="_blank" rel="noopener noreferrer">【CSDN】Qml运行机制的理解（原创）</a></li><li><a href="https://www.pianshen.com/article/41642047038/" target="_blank" rel="noopener noreferrer">qml 引擎（V8）原理总结</a></li></ul><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理"><span>基本原理</span></a></h3><ul><li>QML生成C++类 <ul><li>QML文件中每个元素都对应于一个C++类。QML引擎在加载QML文件时，会为文件中的所有元素以某种方式创建相应的C++对象</li></ul></li><li>绘制C++对象树 <ul><li>这些元素将被绘制在一个<a href="https://link.jianshu.com?t=http://blog.qt.digia.com/blog/2010/05/18/a-qt-scenegraph/" target="_blank" rel="noopener noreferrer">OpenGL scenegraph</a>中，绘制及事件处理都是由<a href="https://link.jianshu.com?t=http://qt.gitorious.org/qt/qtdeclarative/blobs/master/src/quick/items/qquickview.h#line59" target="_blank" rel="noopener noreferrer">QQuickView</a>控制的</li><li>我们可以利用<a href="https://link.jianshu.com?t=http://www.kdab.com" target="_blank" rel="noopener noreferrer">KDAB</a>的Qt自检工具<a href="https://link.jianshu.com?t=http://www.kdab.com/kdab-products/gammaray/" target="_blank" rel="noopener noreferrer">GammaRay</a>来验证QML文件对应的C++对象树</li><li>![img](01.%20QML 编程简概.assets/438086-2eb1771ce04b1370.png)</li></ul></li><li>用<a href="https://link.jianshu.com?t=http://blog.qt.digia.com/blog/2012/02/07/qml-profiler-update/" target="_blank" rel="noopener noreferrer">QML分析器（QML profiler）</a>来运行并分析</li></ul><h3 id="qml文件加载步骤" tabindex="-1"><a class="header-anchor" href="#qml文件加载步骤"><span>QML文件加载步骤</span></a></h3><p>探寻QML引擎从解析QML文件开始，到形成一棵完整的C++对象树的整个过程</p><p>当加载QML文件时，会执行三个不同的步骤，接下来我们将深入研究这些步骤：</p><ol><li>解析</li><li>编译</li><li>创建</li></ol><h4 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h4><p>首先，QML文件是由QQmlScript::Parser这个解析器来解析的。该解析器内部的绝大多数内容都是由��<a href="https://link.jianshu.com?t=https://qt.gitorious.org/qt/qtdeclarative/source/master:src/qml/qml/parser/qqmljs.g" target="_blank" rel="noopener noreferrer">语法文件</a>自动生成的。我们这个例子的抽象语法树（AST）看起来是这样的：</p><p>![img](01.%20QML 编程简概.assets/438086-608a25f403cf24b7.png)</p><p>这个AST是比较底层的东西，紧接着，它将被转换成更高层级结构的<a href="https://link.jianshu.com?t=http://qt.gitorious.org/qt/qtdeclarative/blobs/master/src/qml/qml/qqmlscript_p.h#line299" target="_blank" rel="noopener noreferrer">对象</a>，<a href="https://link.jianshu.com?t=https://qt.gitorious.org/qt/qtdeclarative/source/master:src/qml/qml/qqmlscript_p.h#line230" target="_blank" rel="noopener noreferrer">属性</a>和<a href="https://link.jianshu.com?t=https://qt.gitorious.org/qt/qtdeclarative/source/master:src/qml/qml/qqmlscript_p.h#line183" target="_blank" rel="noopener noreferrer">值</a>。这是通过使用一个访问器遍历AST来完成的。这一步的对象就和QML中的元素一一对应上了，且对象的属性/值和QML元素的属性/值也一一对应上。我们的例子中Rectangle元素的属性“color”，其对应的值是“lightsteelblue”，它们就是属性/值的关系。即使像onClicked这样的信号处理程序也被看作只是属性/值的关系，属性是onClicked，值就是JavaScript函数体。</p><h4 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h4><p>在理论上，对象，属性和值已经足够用于创建对应的C++对象，并给属性赋上对应的值。但这些对象，属性和值依然过于原始，在创建C++对象之前，还需要进行一些后置处理。这些后置处理是由<a href="https://link.jianshu.com?t=https://qt.gitorious.org/qt/qtdeclarative/source/master:src/qml/qml/qqmlcompiler_p.h#line283" target="_blank" rel="noopener noreferrer">QQmlCompiler</a>来完成的，这对应于QML分析器（QML profiler）输出中看到的编译阶段。该编译器会为QML文件创建了一个QQmlCompiledData对象。 用QQmlCompiledData创建C++对象比直接使用对象、属性和值来创建C++对象快了很多。当多次使用同一个QML文件，该文件也只会编译一次。比如在一个工程中，其他所有的QML文件都会用到的Button.qml，编译时Button.qml只会被编译一次。Button.qml的QQmlCompiledData会一直保存，每次使用该按钮组件时，都会根据这个Button.qml的QQmlCompiledData来创建C++对象。在编译之后，就是创建阶段，这在QML分析器（QML profiler）的输出中可以看到。</p><p>综上所述：解析和编译QML文件都只会做一次，在此之后，都是直接使用QQmlCompiledData对象来快速创建C++对象。</p><h4 id="创建" tabindex="-1"><a class="header-anchor" href="#创建"><span>创建</span></a></h4><p>我不会深入研究QQmlCompiledData的细节，但有一个东西可能会引起你的注意：“QByteArray bytecode”成员变量。实际上，创建C++对象并给它的属性赋值的指令会被编译为了字节码，之后由字节码解析器解析！字节码包含了一堆指令，当这些指令执行时，QQmlCompiledData的其余部分仅是辅助数据。</p><p>在创建阶段，字节码是由<a href="https://link.jianshu.com?t=https://qt.gitorious.org/qt/qtdeclarative/source/master:src/qml/qml/qqmlvme_p.h" target="_blank" rel="noopener noreferrer">QQmlVME</a>类解析的。阅读QQmlVME::run（）这个函数的代码，里面有一个循环用于遍历字节码包含的所有指令，在循环体内部，有一个很大的判定不同指令类型的switch语句。运行带有QML_COMPILER_DUMP=1的例子程序，我们可以看到字节码所包含的每个指令：</p><p>（略）</p><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h4><p>在这篇博文的最后，我们已经揭示了一个QML文件是如何进行解析、处理、编译的，以及VME是如何创建对象的。我希望你已经更加深入地理解了QML引擎。</p><p>下一篇的博文（<a href="https://www.jianshu.com/p/9b277a3ee613" target="_blank" rel="noopener noreferrer">绑定(Bindings)</a>）将进一步探讨属性绑定是如何进行的，敬请关注！</p>`,49))])}const u=n(k,[["render",d],["__file","01. QML 编程简概.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/02.%20QtGUI%E7%B1%BB/02.%20QtQuick/01.%20QML/01.%20QML%20%E7%BC%96%E7%A8%8B%E7%AE%80%E6%A6%82.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 QML 编程简概 参考： 【C语言中文网】学习QML还是C++？ QML文档： 个人博客：https://robinsea.github.io/2020/09/16/QmlBook/quick_starter/README/ 简概 - Qt Quick项目 QML与QtQuick QML 概念 QML（Qt Meta Language，Qt...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/02.%20QtGUI%E7%B1%BB/02.%20QtQuick/01.%20QML/01.%20QML%20%E7%BC%96%E7%A8%8B%E7%AE%80%E6%A6%82.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 QML 编程简概 参考： 【C语言中文网】学习QML还是C++？ QML文档： 个人博客：https://robinsea.github.io/2020/09/16/QmlBook/quick_starter/README/ 简概 - Qt Quick项目 QML与QtQuick QML 概念 QML（Qt Meta Language，Qt..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Qt","slug":"qt","link":"#qt","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"QML 编程简概","slug":"qml-编程简概","link":"#qml-编程简概","children":[{"level":2,"title":"简概 - Qt Quick项目","slug":"简概-qt-quick项目","link":"#简概-qt-quick项目","children":[{"level":3,"title":"QML与QtQuick","slug":"qml与qtquick","link":"#qml与qtquick","children":[]},{"level":3,"title":"创建Qt Quick工程","slug":"创建qt-quick工程","link":"#创建qt-quick工程","children":[]},{"level":3,"title":"项目基本结构","slug":"项目基本结构","link":"#项目基本结构","children":[]},{"level":3,"title":"项目分析","slug":"项目分析","link":"#项目分析","children":[]}]},{"level":2,"title":"简概 - Qt Widgets项目","slug":"简概-qt-widgets项目","link":"#简概-qt-widgets项目","children":[{"level":3,"title":"创建 QML 文件","slug":"创建-qml-文件","link":"#创建-qml-文件","children":[]},{"level":3,"title":".qml 与 .ui.qml 区别（现在.ui.qml选项已经被删了）","slug":"qml-与-ui-qml-区别-现在-ui-qml选项已经被删了","link":"#qml-与-ui-qml-区别-现在-ui-qml选项已经被删了","children":[]}]},{"level":2,"title":"QML底层原理","slug":"qml底层原理","link":"#qml底层原理","children":[{"level":3,"title":"基本原理","slug":"基本原理","link":"#基本原理","children":[]},{"level":3,"title":"QML文件加载步骤","slug":"qml文件加载步骤","link":"#qml文件加载步骤","children":[{"level":4,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":4,"title":"编译","slug":"编译","link":"#编译","children":[]},{"level":4,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":4,"title":"结论","slug":"结论","link":"#结论","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":11.21,"words":3364},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/02. QtQuick/01. QML/01. QML 编程简概.md","excerpt":"\\n<h1>目录</h1>\\n<h1>QML 编程简概</h1>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"http://c.biancheng.net/view/3877.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【C语言中文网】学习QML还是C++？</a></li>\\n<li>QML文档：\\n<ul>\\n<li>个人博客：https://robinsea.github.io/2020/09/16/QmlBook/quick_starter/README/</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>简概 - Qt Quick项目</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/02. QtQuick/01. QML/01. QML 编程简概.md","value":{"title":"01. QML 编程简概","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/02. QtGUI类/02. QtQuick/01. QML/01. QML 编程简概.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,g as data};
