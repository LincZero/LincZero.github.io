import{_ as t,e as r,g as o,o as n}from"./app-EuS-Ookm.js";const l={};function a(i,e){return n(),r("div",null,e[0]||(e[0]=[o('<h1 id="rest-api-restful-api" tabindex="-1"><a class="header-anchor" href="#rest-api-restful-api"><span>REST API (RESTful API)</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>REST API 是一种遵循 REST 架构设计原则的 <a href="https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces" target="_blank" rel="noopener noreferrer">应用编程接口（API ）</a>。REST 是表述性状态传递的英文缩写，涵盖一系列有关如何构建 Web API 的规则和准则。</p><p>REST (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer, 表述性状态转移) 是其全称的首字母缩写。它是<strong>分布式超媒体系统的</strong> <strong>架构风格</strong>，最初由Roy Fielding在2000年的着名<a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank" rel="noopener noreferrer">论文中提出</a>。</p><h3 id="落地举例" tabindex="-1"><a class="header-anchor" href="#落地举例"><span>落地举例</span></a></h3><ul><li><a href="https://coddingtonbear.github.io/obsidian-local-rest-api/#/" target="_blank" rel="noopener noreferrer">obsidian-local-rest-api</a></li><li><a href="https://github.com/aws-amplify/amplify-js" target="_blank" rel="noopener noreferrer">AWS Amplify</a></li><li><a href="https://github.com/nocodb/nocodb" target="_blank" rel="noopener noreferrer">NocoDB</a></li><li>Back4app</li></ul><h2 id="指导原则" tabindex="-1"><a class="header-anchor" href="#指导原则"><span>指导原则</span></a></h2><ol><li><strong>客户端 - 服务器</strong> - 通过将用户接口问题与数据存储问题分开，我们通过简化服务器组件来提高跨多个平台的用户接口的可移植性并提高可伸缩性。</li><li><strong>无状态</strong> - 从客户端到服务器的每个请求都必须包含理解请求所需的所有信息，并且不能利用服务器上任何存储的上下文。因此，会话状态完全保留在客户端上。</li><li><strong>可缓存</strong> - 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。</li><li><strong>统一接口</strong> - 通过将通用性的软件工程原理应用于组件接口，简化了整个系统架构，提高了交互的可见性。为了获得统一的接口，需要多个架构约束来指导组件的行为。REST由四个接口约束定义：资源识别; 通过陈述来处理资源; 自我描述性的信息; 并且，超媒体作为应用程序状态的引擎。</li><li><strong>分层系统</strong> - 分层系统风格允许通过约束组件行为来使体系结构由分层层组成，这样每个组件都不能“看到”超出与它们交互的直接层。</li><li><strong>按需编码（可选）</strong> - REST允许通过以小程序或脚本的形式下载和执行代码来扩展客户端功能。这通过减少预先实现所需的功能数量来简化客户端。</li></ol><h2 id="核心特点" tabindex="-1"><a class="header-anchor" href="#核心特点"><span>核心特点</span></a></h2><p>take from deepseek</p><p>它通过标准的 <strong>HTTP 方法</strong>（如 GET、POST、PUT、DELETE）和 <strong>资源导向的 URL</strong> 来实现客户端与服务器之间的通信。以下是其核心概念和特点：</p><ul><li>资源（Resource） <ul><li>将数据或服务抽象为“资源”（如用户、订单、文章），<strong>每个资源有唯一的标识符</strong>（URI，如 <code>/users/123</code>）。</li><li>资源的表现形式通常是 JSON 或 XML。</li></ul></li><li>HTTP 方法（Verbs） <ul><li>使用标准 HTTP 方法定义操作： <ul><li><strong>GET</strong>：获取资源（如获取用户列表 <code>/users</code>）。</li><li><strong>POST</strong>：创建资源（如新增用户）。</li><li><strong>PUT/PATCH</strong>：更新资源（全量更新或部分更新）。</li><li><strong>DELETE</strong>：删除资源。</li></ul></li></ul></li><li>无状态（Stateless） <ul><li>每个请求<strong>必须包含所有必要信息</strong>，服务器不保存客户端状态（如会话）。会话状态由客户端管理（如通过 Token）。</li></ul></li><li>统一接口（Uniform Interface） <ul><li>一致的交互方式，例如通过 URI 定位资源，通过 HTTP 方法定义操作。</li></ul></li><li>可缓存（Cacheable） <ul><li>服务器可明确标记响应是否可缓存，减少重复请求。</li></ul></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>假设一个博客系统的 API：</p><ul><li><strong>GET</strong> <code>/articles</code> → 返回所有文章列表（JSON 格式）。</li><li><strong>GET</strong> <code>/articles/5</code> → 返回 ID 为 5 的文章。</li><li><strong>POST</strong> <code>/articles</code> → 创建新文章（请求体包含 JSON 数据）。</li><li><strong>PUT</strong> <code>/articles/5</code> → 更新 ID 为 5 的文章。</li><li><strong>DELETE</strong> <code>/articles/5</code> → 删除 ID 为 5 的文章。</li></ul><h3 id="restful-api-的优点" tabindex="-1"><a class="header-anchor" href="#restful-api-的优点"><span>RESTful API 的优点</span></a></h3><ol><li><strong>简单易用</strong><br> 基于 HTTP 标准，开发者和工具（如 Postman）天然支持。</li><li><strong>松耦合</strong><br> 客户端和服务器独立演进，只需维护接口一致。</li><li><strong>可扩展性</strong><br> 支持分布式系统，易于水平扩展。</li><li><strong>跨平台</strong><br> JSON/XML 格式通用，适合 Web、移动端、IoT 等场景。</li></ol><h3 id="对比其他-api-风格" tabindex="-1"><a class="header-anchor" href="#对比其他-api-风格"><span>对比其他 API 风格</span></a></h3><ul><li><strong>SOAP</strong>：基于 XML，严格规范，复杂但适合企业级安全场景。</li><li><strong>GraphQL</strong>：允许客户端自定义返回字段，但需要额外学习成本。</li><li><strong>RPC</strong>（如 gRPC）：基于函数调用思维，性能高，但灵活性较低。</li></ul><h3 id="设计最佳实践" tabindex="-1"><a class="header-anchor" href="#设计最佳实践"><span>设计最佳实践</span></a></h3><ol><li>使用名词复数表示资源（如 <code>/users</code> 而非 <code>/getUser</code>）。</li><li>利用 HTTP 状态码表示结果（如 <code>200 OK</code>、<code>404 Not Found</code>、<code>401 Unauthorized</code>）。</li><li>版本控制 API（如 <code>/api/v1/users</code>）。</li><li>提供清晰的文档（如 Swagger/OpenAPI）。</li></ol><h3 id="常见误解" tabindex="-1"><a class="header-anchor" href="#常见误解"><span>常见误解</span></a></h3><ul><li>误区：任何 HTTP API 都是 RESTful。<br> 纠正：需严格遵循 REST 原则（如资源化、无状态、统一接口）。</li></ul><p><strong>总结</strong>：RESTful API 是构建现代 Web 服务的基石，通过简单的 HTTP 协议和资源模型，实现了高效、灵活的系统间通信。</p>',24)]))}const p=t(l,[["render",a],["__file","REST API.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/REST%20API.html","title":"REST API (RESTful API)","lang":"zh-CN","frontmatter":{"description":"REST API (RESTful API) 介绍 REST API 是一种遵循 REST 架构设计原则的 应用编程接口（API ）。REST 是表述性状态传递的英文缩写，涵盖一系列有关如何构建 Web API 的规则和准则。 REST (REpresentational State Transfer, 表述性状态转移) 是其全称的首字母缩写。它是分布...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/REST%20API.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"REST API (RESTful API)"}],["meta",{"property":"og:description","content":"REST API (RESTful API) 介绍 REST API 是一种遵循 REST 架构设计原则的 应用编程接口（API ）。REST 是表述性状态传递的英文缩写，涵盖一系列有关如何构建 Web API 的规则和准则。 REST (REpresentational State Transfer, 表述性状态转移) 是其全称的首字母缩写。它是分布..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"REST API (RESTful API)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4,"words":1201},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/REST API.md","excerpt":"\\n<h2>介绍</h2>\\n<p>REST API 是一种遵循 REST 架构设计原则的&nbsp;<a href=\\"https://www.redhat.com/zh/topics/api/what-are-application-programming-interfaces\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">应用编程接口（API ）</a>。REST 是表述性状态传递的英文缩写，涵盖一系列有关如何构建 Web API 的规则和准则。</p>\\n<p>REST (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer, 表述性状态转移) 是其全称的首字母缩写。它是<strong>分布式超媒体系统的</strong> <strong>架构风格</strong>，最初由Roy Fielding在2000年的着名<a href=\\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">论文中提出</a>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/REST API.md","value":{"title":"REST API","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/REST API.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,c as data};
