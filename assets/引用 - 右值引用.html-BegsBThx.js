import{_ as r,c as s,e as i,a as l,b as n,d as t,o as d,r as c}from"./app-B8X3OuWx.js";const o={},p={href:"http://c.biancheng.net/view/3737.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/d19fc8447eaa",target:"_blank",rel:"noopener noreferrer"};function h(m,e){const a=c("ExternalLinkIcon");return d(),s("div",null,[e[4]||(e[4]=i('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="右值引用" tabindex="-1"><a class="header-anchor" href="#右值引用"><span>右值引用</span></a></h1><p>C++11参考：</p>',4)),l("ul",null,[e[2]||(e[2]=l("li",null,"《高速上手C++11 14 17.pdf》",-1)),l("li",null,[l("a",p,[e[0]||(e[0]=n("【C语言中文网】C++11")),t(a)]),e[1]||(e[1]=n("（主要参考）"))])]),e[5]||(e[5]=l("p",null,"本篇参考：",-1)),l("ul",null,[l("li",null,[l("a",u,[e[3]||(e[3]=n("【简书】[c++11]我理解的右值引用、移动语义和完美转发")),t(a)])])]),e[6]||(e[6]=i(`<h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要"><span>概要</span></a></h2><p>C++11 标准对 C++ 语言增添了约 140 个新特性。右值引用是最重要的特性之一</p><p>右值引用不难，只不过是一种新的 C++ 语法。真正理解起来有难度的是<strong>基于右值引用引申出的 2 种 C++ 编程技巧，分别为移动语义和完美转发</strong></p><h2 id="c-左值和右值" tabindex="-1"><a class="header-anchor" href="#c-左值和右值"><span>C++左值和右值</span></a></h2><ul><li><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h4><ul><li>字面意思上理解，指的是<strong>以引用传递（而非值传递）的方式使用 C++ 右值</strong></li><li>一个表达式（可以是字面量、变量、对象、函数的返回值等）根据其使用场景不同，分为左值表达式和右值表达式</li><li>确切的说 C++ 中左值和右值的概念是从 C 语言继承过来的</li></ul></li><li><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><ul><li><blockquote><p>值得一提的是，左值的英文简写为“lvalue”，右值的英文简写为“rvalue”。</p><p>很多人认为它们分别是&quot;left value&quot;、&quot;right value&quot; 的缩写，其实不然。</p><p>lvalue 是“loactor value”的缩写，可意为存储在内存中、有明确存储地址（可寻址）的数据。</p><p>rvalue 译为 &quot;read value&quot;，指的是那些可以提供数据值的数据（不一定可以寻址，例如存储于寄存器中的数据）。</p></blockquote></li></ul></li><li><h4 id="区分" tabindex="-1"><a class="header-anchor" href="#区分"><span>区分</span></a></h4><ul><li>通常情况下，判断某个表达式是左值还是右值，最常用的有以下 2 种方法（只适用于大部分场景）</li><li>(1) 可位于赋值号（=）左侧的表达式就是左值；反之，只能位于赋值号右侧的表达式就是右值</li><li>(2) 有名称的、可以获取到存储地址的表达式即为左值；反之则是右值</li></ul></li></ul><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int i=0;// i是左值， 0是右值

class A {
  public:
    int a;
};
A getTemp()
{
    return A();
}
A a = getTemp();   // a是左值  getTemp()的返回值是右值（临时变量）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="左值引用-常量左值引用-右值引用" tabindex="-1"><a class="header-anchor" href="#左值引用-常量左值引用-右值引用"><span>左值引用 / 常量左值引用 / 右值引用</span></a></h2><h3 id="左值引用-普通引用-c-98-03" tabindex="-1"><a class="header-anchor" href="#左值引用-普通引用-c-98-03"><span>左值引用（普通引用&amp;，C++98/03）</span></a></h3><ul><li><p>使用<code>&amp;</code>表示</p></li><li><p>缺点：正常情况下只能操作 C++ 中的左值，无法对右值添加引用</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int num = 10;
int &amp;b = num; 	//正确
int &amp;c = 10; 	//错误
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="常量左值引用-c-98-03" tabindex="-1"><a class="header-anchor" href="#常量左值引用-c-98-03"><span>常量左值引用（C++98/03）</span></a></h3><ul><li><p>其中<code>const &amp;</code>也被称为<code>万能引用</code>，因为能为左值或右值添加引用</p></li><li><p>缺点：无法对右值进行修改（实现移动语义时需要）</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int num = 10;
const int &amp;b = num;	//正确
const int &amp;c = 10;	//正确
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="右值引用-c-11" tabindex="-1"><a class="header-anchor" href="#右值引用-c-11"><span>右值引用（&amp;&amp;，C++11）</span></a></h3><ul><li><blockquote><p>C++标准委员会在选定右值引用符号时，既希望能选用现有 C++ 内部已有的符号，还不能与 C++ 98 /03 标准产生冲突，最终选定了 2 个 &#39;&amp;&#39; 表示右值引用。</p></blockquote></li><li><p>和声明左值引用一样，右值引用也<strong>必须立即进行初始化操作</strong>，且只能使用右值进行初始化</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int num = 10;
//int &amp;&amp; a = num;  //错误，右值引用不能初始化为左值
int &amp;&amp; a = 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><mark>和<strong>常量左值引用</strong>不同的是，右值引用还可以对右值进行修改</mark></p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int &amp;&amp; a = 10;
a = 100;
cout &lt;&lt; a &lt;&lt; endl;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>支持常量右值引用</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>const int&amp;&amp; a = 10;//编译器不会报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h3><blockquote><p>其实，C++11 标准中对右值做了更细致的划分，分别称为</p><ul><li><strong>纯右值（Pure value，简称 pvalue）</strong> C++98/03 标准中的右值（本节中已经做了大篇幅的讲解）</li><li><strong>将亡值（eXpiring value，简称 xvalue ）</strong>。 右值引用相关的表达式（比如某函数返回的 T &amp;&amp; 类型的表达式）</li></ul><p>对于纯右值和将亡值，都属于右值，读者知道即可，不必深究</p></blockquote><h2 id="移动语义、完美转发" tabindex="-1"><a class="header-anchor" href="#移动语义、完美转发"><span>移动语义、完美转发</span></a></h2><p>详见移动构造函数一章</p>`,17))])}const g=r(o,[["render",h],["__file","引用 - 右值引用.html.vue"]]),b=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/08.%20%E6%96%B0%E7%89%B9%E6%80%A7/C__11/%E5%BC%95%E7%94%A8%20-%20%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.html","title":"C++","lang":"zh-CN","frontmatter":{"description":"C++ 目录 右值引用 C++11参考： 《高速上手C++11 14 17.pdf》 【C语言中文网】C++11（主要参考） 本篇参考： 【简书】[c++11]我理解的右值引用、移动语义和完美转发 概要 C++11 标准对 C++ 语言增添了约 140 个新特性。右值引用是最重要的特性之一 右值引用不难，只不过是一种新的 C++ 语法。真正理解起来有难...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/08.%20%E6%96%B0%E7%89%B9%E6%80%A7/C__11/%E5%BC%95%E7%94%A8%20-%20%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ 目录 右值引用 C++11参考： 《高速上手C++11 14 17.pdf》 【C语言中文网】C++11（主要参考） 本篇参考： 【简书】[c++11]我理解的右值引用、移动语义和完美转发 概要 C++11 标准对 C++ 语言增添了约 140 个新特性。右值引用是最重要的特性之一 右值引用不难，只不过是一种新的 C++ 语法。真正理解起来有难..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"C++","slug":"c","link":"#c","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"右值引用","slug":"右值引用","link":"#右值引用","children":[{"level":2,"title":"概要","slug":"概要","link":"#概要","children":[]},{"level":2,"title":"C++左值和右值","slug":"c-左值和右值","link":"#c-左值和右值","children":[]},{"level":2,"title":"左值引用 / 常量左值引用 / 右值引用","slug":"左值引用-常量左值引用-右值引用","link":"#左值引用-常量左值引用-右值引用","children":[{"level":3,"title":"左值引用（普通引用&，C++98/03）","slug":"左值引用-普通引用-c-98-03","link":"#左值引用-普通引用-c-98-03","children":[]},{"level":3,"title":"常量左值引用（C++98/03）","slug":"常量左值引用-c-98-03","link":"#常量左值引用-c-98-03","children":[]},{"level":3,"title":"右值引用（&&，C++11）","slug":"右值引用-c-11","link":"#右值引用-c-11","children":[]},{"level":3,"title":"补充","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"移动语义、完美转发","slug":"移动语义、完美转发","link":"#移动语义、完美转发","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.22,"words":965},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/C++/08. 新特性/C++11/引用 - 右值引用.md","excerpt":"\\n<h1>目录</h1>\\n<h1>右值引用</h1>\\n<p>C++11参考：</p>\\n<ul>\\n<li>《高速上手C++11 14 17.pdf》</li>\\n<li><a href=\\"http://c.biancheng.net/view/3737.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【C语言中文网】C++11</a>（主要参考）</li>\\n</ul>\\n<p>本篇参考：</p>\\n<ul>\\n<li><a href=\\"https://www.jianshu.com/p/d19fc8447eaa\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【简书】[c++11]我理解的右值引用、移动语义和完美转发</a></li>\\n</ul>","autoDesc":true}');export{g as comp,b as data};
