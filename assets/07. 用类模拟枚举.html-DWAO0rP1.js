import{_ as p,c as l,e as o,a,d as s,b as t,o as c,r as i}from"./app-CtMeyR3O.js";const r={},u={href:"https://so.csdn.net/so/search?q=%E7%BC%96%E8%AF%91%E5%99%A8&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},d={href:"https://so.csdn.net/so/search?q=%E6%8A%BD%E8%B1%A1%E7%B1%BB&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k={href:"https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E6%88%90%E5%91%98&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},v={href:"https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"};function m(b,n){const e=i("ExternalLinkIcon");return c(),l("div",null,[n[15]||(n[15]=o(`<h2 id="继承-python-class模拟枚举" tabindex="-1"><a class="header-anchor" href="#继承-python-class模拟枚举"><span>继承 - Python class模拟枚举</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">OpCode2</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot; OP_CODE 类似枚举 &quot;&quot;&quot;</span>
    INPUT <span class="token operator">=</span> <span class="token number">1</span>
    OUTPUT <span class="token operator">=</span> <span class="token number">2</span>
    ADD <span class="token operator">=</span> <span class="token number">3</span>
    SUB <span class="token operator">=</span> <span class="token number">4</span>
    MUL <span class="token operator">=</span> <span class="token number">5</span>


<span class="token keyword">class</span> <span class="token class-name">OpCode</span><span class="token punctuation">(</span>OpCode2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 可以继承</span>
    DIV <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承-c结构体" tabindex="-1"><a class="header-anchor" href="#继承-c结构体"><span>继承 - C结构体</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token comment">//父结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">father</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> f1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> f2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//子结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">son</span>
<span class="token punctuation">{</span>
    <span class="token comment">//子结构体里定义一个父结构体变量，必须放在子结构体里的第一位</span>
    <span class="token keyword">struct</span> <span class="token class-name">father</span> fn<span class="token punctuation">;</span>
    <span class="token comment">//子结构体的扩展变量</span>
    <span class="token keyword">int</span> s1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> s2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承-java枚举-怎么乱七八糟的" tabindex="-1"><a class="header-anchor" href="#继承-java枚举-怎么乱七八糟的"><span><s>继承 - Java枚举</s>（怎么乱七八糟的）</span></a></h2>`,5)),a("p",null,[n[3]||(n[3]=s("Java ")),n[4]||(n[4]=a("code",null,"enum",-1)),n[5]||(n[5]=s("是一种")),a("a",u,[n[0]||(n[0]=s("编译器")),t(e)]),n[6]||(n[6]=s("魔术。 在字节码中，任何")),n[7]||(n[7]=a("code",null,"enum",-1)),n[8]||(n[8]=s("都表示为扩展")),a("a",d,[n[1]||(n[1]=s("抽象类")),t(e)]),n[9]||(n[9]=a("code",null,"java.lang.Enum",-1)),n[10]||(n[10]=s("并具有几个")),a("a",k,[n[2]||(n[2]=s("静态成员")),t(e)]),n[11]||(n[11]=s("的类。"))]),n[16]||(n[16]=a("p",null,"因此，枚举不能扩展任何其他类或枚举：没有多重继承。",-1)),a("p",null,[n[13]||(n[13]=s("类也不能扩展")),a("a",v,[n[12]||(n[12]=s("枚举")),t(e)]),n[14]||(n[14]=s("。 此限制由编译器强制执行"))]),n[17]||(n[17]=o(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>red<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此类尝试扩展它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">SubColor</span> <span class="token keyword">class</span> <span class="token keyword">extends</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
<span class="token comment">// 结果报错</span>
 $ javac <span class="token class-name">SubColor</span><span class="token punctuation">.</span>java  <span class="token class-name">SubColor</span><span class="token punctuation">.</span>java<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">:</span> error<span class="token operator">:</span> cannot inherit from <span class="token keyword">final</span> <span class="token class-name">Color</span>  <span class="token class-name">SubColor</span> <span class="token keyword">class</span> <span class="token keyword">extends</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
                        <span class="token operator">^</span>  <span class="token class-name">SubColor</span><span class="token punctuation">.</span>java<span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">:</span> error<span class="token operator">:</span> <span class="token keyword">enum</span> types are not extensible  <span class="token class-name">SubColor</span> <span class="token keyword">class</span> <span class="token keyword">extends</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token operator">^</span>  <span class="token number">2</span> errors 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Enum</code>既不能扩展也不能扩展。 那么，如何扩展其功能呢？ 关键字是“功能”。 <code>Enum</code>可以实现方法。</p><p>例如，枚举<code>Color</code>可以声明抽象方法<code>draw()</code> ，每个成员都可以重写它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
    red <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    green <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    blue <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const y=p(r,[["render",m],["__file","07. 用类模拟枚举.html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/07.%20%E7%94%A8%E7%B1%BB%E6%A8%A1%E6%8B%9F%E6%9E%9A%E4%B8%BE.html","title":"","lang":"zh-CN","frontmatter":{"description":"继承 - Python class模拟枚举 继承 - C结构体 （怎么乱七八糟的） Java enum是一种编译器魔术。 在字节码中，任何enum都表示为扩展抽象类java.lang.Enum并具有几个静态成员的类。 因此，枚举不能扩展任何其他类或枚举：没有多重继承。 类也不能扩展枚举。 此限制由编译器强制执行 此类尝试扩展它： Enum既不能扩展也不...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/07.%20%E7%94%A8%E7%B1%BB%E6%A8%A1%E6%8B%9F%E6%9E%9A%E4%B8%BE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"继承 - Python class模拟枚举 继承 - C结构体 （怎么乱七八糟的） Java enum是一种编译器魔术。 在字节码中，任何enum都表示为扩展抽象类java.lang.Enum并具有几个静态成员的类。 因此，枚举不能扩展任何其他类或枚举：没有多重继承。 类也不能扩展枚举。 此限制由编译器强制执行 此类尝试扩展它： Enum既不能扩展也不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"继承 - Python class模拟枚举","slug":"继承-python-class模拟枚举","link":"#继承-python-class模拟枚举","children":[]},{"level":2,"title":"继承 - C结构体","slug":"继承-c结构体","link":"#继承-c结构体","children":[]},{"level":2,"title":"继承 - Java枚举（怎么乱七八糟的）","slug":"继承-java枚举-怎么乱七八糟的","link":"#继承-java枚举-怎么乱七八糟的","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.21,"words":363},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/02. 数据+算法/07. 用类模拟枚举.md","excerpt":"<h2>继承 - Python class模拟枚举</h2>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">OpCode2</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\" OP_CODE 类似枚举 \\"\\"\\"</span>\\n    INPUT <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n    OUTPUT <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span>\\n    ADD <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span>\\n    SUB <span class=\\"token operator\\">=</span> <span class=\\"token number\\">4</span>\\n    MUL <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">OpCode</span><span class=\\"token punctuation\\">(</span>OpCode2<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\"># 可以继承</span>\\n    DIV <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span>\\n</code></pre></div>","autoDesc":true}');export{y as comp,E as data};
