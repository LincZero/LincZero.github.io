import{_ as s,c as a,b as e,o as t}from"./app-Ci64BYEV.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h1><p>网上有吐槽 Go 的异常处理不是很好，原因暂时不知</p><p>异常的处理主要使用：</p><ul><li>内置 <ul><li>defer</li><li>recover</li></ul></li><li>errors包 <ul><li>errors.New</li><li>errors.panic</li></ul></li></ul><h2 id="异常-1" tabindex="-1"><a class="header-anchor" href="#异常-1"><span>异常</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>		<span class="token comment">// 能执行成功</span>
    <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>		<span class="token comment">// 会报错：panic: runtime error: integer divide by zero</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">:=</span> num1 <span class="token operator">/</span> num2
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常类型</p><ul><li>特别需要注意：Go有一种异常为 “panic”，翻译过来叫 “恐慌”，有点怪怪的。这种异常可以通过 recover 恢复（类似其他语言的try-catch）</li></ul><h2 id="defer-recover-机制处理错误" tabindex="-1"><a class="header-anchor" href="#defer-recover-机制处理错误"><span>defer + recover 机制处理错误</span></a></h2><h3 id="defer-基本用法-在函数中" tabindex="-1"><a class="header-anchor" href="#defer-基本用法-在函数中"><span>defer 基本用法 (在函数中)</span></a></h3><p><strong>与其他语言不同</strong>：Go特有。</p><p>不同语言的类似处理：</p><ul><li><p>goto方法</p><ul><li>略</li></ul></li><li><p>C语言</p><ul><li><p>Setjmp/Longjmp</p><p>可以用来实现异常处理和资源释放。setjmp用于捕获当前环境的上下文，而longjmp则用于从setjmp返回，并可以选择性地执行资源释放代码。</p><p>这种方法可以在异常发生时跳转到函数的末尾执行清理代码，而不需要使用大量的if语句。</p></li></ul></li><li><p>C++</p><ul><li><p>RAII (Resource Acquisition Is Initialization)</p><p>与智能指针（如std::unique_ptr或std::shared_ptr）一起使用。当对象被创建时，它会获取资源；当对象被销毁时，它会自动释放资源。</p></li></ul></li><li><p>Java的 try-with-resources/try-catch-finally</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用writer对象</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理关闭资源时的异常</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Python</p><p>上下文管理器 <code>__exit__</code>、<code>__enter__</code>、<code>with</code></p><p><code>__exit__</code>方法定义了退出<code>with</code>语句块时的行为，通常用于释放资源</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyResource</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 获取资源</span>
        <span class="token keyword">return</span> self

    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 释放资源</span>
        <span class="token keyword">if</span> exc_type<span class="token punctuation">:</span>
            <span class="token comment"># 如果有异常发生，可以选择处理或忽略</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;An exception occurred: </span><span class="token interpolation"><span class="token punctuation">{</span>exc_type<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>exc_value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token comment"># 总是执行资源释放</span>
        <span class="token comment"># ...</span>

<span class="token keyword">with</span> MyResource<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> resource<span class="token punctuation">:</span>
    <span class="token comment"># 使用资源</span>
    <span class="token comment"># ...</span>
    
<span class="token comment"># 上面是自己定义的情况。一般用得比较多的是打开文件的 open with，无需显式调用 close() 方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C#</p><ul><li>using语句，类似于Java的try-with-resources</li></ul></li><li><p>JavaScript</p><ul><li>Promise和async/await</li></ul></li><li><p>Go语言</p><ul><li>函数内处理异常：Go使用defer关键字用于处理函数的资源释放，以及异常处理等（关于defer的更多信息，详见Go语言的 “异常” 部分） Go 追求代码优雅，不使用 try-catch 机制，而是使用 defer+recover 机制 <ul><li>defer关键字：可以在函数返回前执行一段代码，通常用于资源释放。</li><li>recover关键字：允许程序管理恐慌过程。recover() 可以捕获异常，同时使程序恢复正常，停止恐慌过程</li><li>结合 try-defer 模式，可以在发生异常时自动释放资源，而无需在每个判断点重复编写释放代码</li></ul></li><li>函数外处理异常：不使用 “抛出” 异常，由于Go可以多返回值，只需要 “返回” 异常即可</li></ul></li></ul><h3 id="recover" tabindex="-1"><a class="header-anchor" href="#recover"><span>recover</span></a></h3><p>内置函数 recover</p><p>作用：允许程序管理恐慌过程。<code>recover()</code> 可以捕获异常，同时使程序恢复正常，停止恐慌过程</p><h3 id="defer-recover-处理异常" tabindex="-1"><a class="header-anchor" href="#defer-recover-处理异常"><span>defer + recover 处理异常</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>		<span class="token comment">// 能执行成功</span>
    <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>		<span class="token comment">// 会报错：panic: runtime error: integer divide by zero</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// defer+recover 捕获错误</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>			<span class="token comment">// 这里是一个匿名的立刻执行函数</span>
        err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment">// 如果没有捕获错误，返回值为零值：nil</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;错误捕获了, 异常为:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result <span class="token operator">:=</span> num1 <span class="token operator">/</span> num2
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理和错误处理" tabindex="-1"><a class="header-anchor" href="#异常处理和错误处理"><span>异常处理和错误处理</span></a></h2><blockquote><p>看课看到异常部分时有个弹幕：大哥你这是异常处理不是错误处理，error和panic都没搞清楚。于是我搜了下</p></blockquote><ul><li>其他语言：异常处理是通过 <code>try-catch-finally</code> 这样的结构来实现的。例如，在Java或C#中，你可以使用这些关键字来捕获和处理异常</li><li>Go语言：在某些编程语言中，特别是Go语言，<code>error</code>和<code>panic</code>是两种不同的机制，用于处理不同类型的问题 <ul><li>error：是一个接口类型，用于表示错误情况。当函数执行失败时，它通常会返回一个<code>error</code>对象，调用者可以检查这个对象来确定是否发生了错误，并获取错误的详细信息</li><li>panic：是一个内置函数，用于在发生严重错误时终止程序的执行。这通常用于那些不应该发生的情况，比如内部一致性被破坏、严重的逻辑错误等。当<code>panic</code>被调用时，当前的函数会立即停止执行，跳转到最近的<code>defer</code>语句（如果有的话），然后程序会打印堆栈跟踪信息并退出。</li></ul></li></ul><h2 id="自定义错误-errors包-new" tabindex="-1"><a class="header-anchor" href="#自定义错误-errors包-new"><span>自定义错误 errors包.New()</span></a></h2><p><strong>不同与其他语言</strong>：由于Go有多返回值的特性，并不需要像其他语言那样 “抛出” 异常，而仅需 “返回” 异常。这点不错</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;errors&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">:=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>num1 <span class="token builtin">int</span><span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> num2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token comment">// 抛出自定义异常</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为0&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        result <span class="token operator">:=</span> num1 <span class="token operator">/</span> num2
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="终止程序-errors-panic" tabindex="-1"><a class="header-anchor" href="#终止程序-errors-panic"><span>终止程序 errors.panic</span></a></h2><p>有时程序出现错误时，应该立即终止</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">panic</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 使用</span>
err <span class="token operator">:=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义错误: &quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const l=s(p,[["render",o],["__file","04_异常.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/04_%E4%BC%98%E5%8C%96/04_%E5%BC%82%E5%B8%B8.html","title":"异常","lang":"zh-CN","frontmatter":{"description":"异常 网上有吐槽 Go 的异常处理不是很好，原因暂时不知 异常的处理主要使用： 内置 defer recover errors包 errors.New errors.panic 异常 异常类型 特别需要注意：Go有一种异常为 “panic”，翻译过来叫 “恐慌”，有点怪怪的。这种异常可以通过 recover 恢复（类似其他语言的try-catch） d...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/04_%E4%BC%98%E5%8C%96/04_%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"异常"}],["meta",{"property":"og:description","content":"异常 网上有吐槽 Go 的异常处理不是很好，原因暂时不知 异常的处理主要使用： 内置 defer recover errors包 errors.New errors.panic 异常 异常类型 特别需要注意：Go有一种异常为 “panic”，翻译过来叫 “恐慌”，有点怪怪的。这种异常可以通过 recover 恢复（类似其他语言的try-catch） d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"异常","slug":"异常","link":"#异常","children":[{"level":2,"title":"异常","slug":"异常-1","link":"#异常-1","children":[]},{"level":2,"title":"defer + recover 机制处理错误","slug":"defer-recover-机制处理错误","link":"#defer-recover-机制处理错误","children":[{"level":3,"title":"defer 基本用法 (在函数中)","slug":"defer-基本用法-在函数中","link":"#defer-基本用法-在函数中","children":[]},{"level":3,"title":"recover","slug":"recover","link":"#recover","children":[]},{"level":3,"title":"defer + recover 处理异常","slug":"defer-recover-处理异常","link":"#defer-recover-处理异常","children":[]}]},{"level":2,"title":"异常处理和错误处理","slug":"异常处理和错误处理","link":"#异常处理和错误处理","children":[]},{"level":2,"title":"自定义错误 errors包.New()","slug":"自定义错误-errors包-new","link":"#自定义错误-errors包-new","children":[]},{"level":2,"title":"终止程序 errors.panic","slug":"终止程序-errors-panic","link":"#终止程序-errors-panic","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.49,"words":1348},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/04_优化/04_异常.md","excerpt":"\\n<p>网上有吐槽 Go 的异常处理不是很好，原因暂时不知</p>\\n<p>异常的处理主要使用：</p>\\n<ul>\\n<li>内置\\n<ul>\\n<li>defer</li>\\n<li>recover</li>\\n</ul>\\n</li>\\n<li>errors包\\n<ul>\\n<li>errors.New</li>\\n<li>errors.panic</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>异常</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"fmt\\"</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">div</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span>\\t\\t<span class=\\"token comment\\">// 能执行成功</span>\\n    <span class=\\"token function\\">div</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\t\\t<span class=\\"token comment\\">// 会报错：panic: runtime error: integer divide by zero</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">div</span><span class=\\"token punctuation\\">(</span>num1 <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> num2 <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    result <span class=\\"token operator\\">:=</span> num1 <span class=\\"token operator\\">/</span> num2\\n    fmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{l as comp,u as data};
