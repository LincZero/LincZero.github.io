import{_ as s,c as a,e,o as t}from"./app-BDGujT_T.js";const l={};function n(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="bcc" tabindex="-1"><a class="header-anchor" href="#bcc"><span>BCC</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="用例教程-特殊过滤" tabindex="-1"><a class="header-anchor" href="#用例教程-特殊过滤"><span>用例教程 - 特殊过滤</span></a></h1><p>有些工具具有特殊的过滤功能，主要用例是跟踪容器中运行的进程，但这些机制是通用的，也可以用于其他情况。</p><h2 id="按-cgroup-过滤" tabindex="-1"><a class="header-anchor" href="#按-cgroup-过滤"><span>按 cgroup 过滤</span></a></h2><p>某些工具可以选择通过引用外部管理的固定 BPF 哈希图来按 cgroup 进行过滤。</p><p>命令示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./opensnoop --cgroupmap /sys/fs/bpf/test01</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./execsnoop --cgroupmap /sys/fs/bpf/test01</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./tcpconnect --cgroupmap /sys/fs/bpf/test01</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./tcpaccept --cgroupmap /sys/fs/bpf/test01</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./tcptracer --cgroupmap /sys/fs/bpf/test01</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令将仅显示属于 cgroup 之一的进程的结果，这些 cgroup 的 id 由 <code>bpf_get_current_cgroup_id()</code> 返回，位于固定的 BPF 哈希映射中。</p><p>BPF 哈希映射可以通过以下方式创建：</p><p>要在新的 cgroup 中获取 shell，您可以使用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># systemd-run --pty --unit test bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>shell 将在 cgroup /sys/fs/cgroup/unified/system.slice/test.service 中运行。<br> 可以使用 name_to_handle_at() 系统调用来发现 cgroup id。在examples/cgroupid中，你会找到一个获取cgroup id的程序示例。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cd examples/cgroupid</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># make</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ./cgroupid hex /sys/fs/cgroup/unified/system.slice/test.service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，使用 Docker：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># cd examples/cgroupid</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker build -t cgroupid .</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># docker run --rm --privileged -v /sys/fs/cgroup:/sys/fs/cgroup \\</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	cgroupid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cgroupid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hex</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sys/fs/cgroup/unified/system.slice/test.service</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会将 cgroup id 打印为主机字节序中的十六进制字符串，例如 77 16 00 00 01 00 00 00 。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># FILE=/sys/fs/bpf/test01</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CGROUPID_HEX=&quot;77 16 00 00 01 00 00 00&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># bpftool map update pinned $FILE key hex $CGROUPID_HEX value hex 00 00 00 00 00 00 00 00 any</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，由 systemd-run 启动的 shell 在 BPF 哈希映射中具有其 cgroup id，bcc 工具将显示该 shell 的结果。可以在 BPF 哈希图中添加和删除 Cgroup，而无需重新启动 bcc 工具。<br> 此功能对于在外部项目中集成密件抄送工具非常有用。</p><h2 id="按名称空间挂载过滤" tabindex="-1"><a class="header-anchor" href="#按名称空间挂载过滤"><span>按名称空间挂载过滤</span></a></h2><p>BPF 哈希映射可以通过以下方式创建：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># bpftool map create /sys/fs/bpf/mnt_ns_set type hash key 8 value 4 entries 128 \\</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mnt_ns_set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> flags</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>execsnoop</code> 工具仅过滤 <code>/sys/fs/bpf/mnt_ns_set</code> 中的挂载命名空间：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># tools/execsnoop.py --mntnsmap /sys/fs/bpf/mnt_ns_set</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在新的挂载命名空间中启动终端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># unshare -m bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用上面终端的挂载命名空间 ID 更新哈希映射：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">FILE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/sys/fs/bpf/mnt_ns_set</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ $(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;\\1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">od</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -dAn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-eq</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> HOST_ENDIAN_CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">tac</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  HOST_ENDIAN_CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cat</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NS_ID_HEX</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">printf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%016x&#39; $(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">stat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Lc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;%i&#39; /proc/self/ns/mnt) </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;s/.\\{2\\}/&amp;\\n/g&#39; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOST_ENDIAN_CMD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bpftool</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pinned</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $FILE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hex</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $NS_ID_HEX</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> value</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hex</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 00</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> any</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此终端中执行命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ping kinvolk.io</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您将看到如何在上面启动的 <code>execsnoop</code> 终端上记录呼叫：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># tools/execsnoop.py --mntnsmap /sys/fs/bpf/mnt_ns_set</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[sudo] password </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mvb:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PCOMM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    PPID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   RET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ARGS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ping</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">             8096</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   7970</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/ping</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kinvolk.io</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const k=s(l,[["render",n],["__file","02.2. 用例教程 - 特殊过滤.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/02.2.%20%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B%20-%20%E7%89%B9%E6%AE%8A%E8%BF%87%E6%BB%A4.html","title":"BCC","lang":"zh-CN","frontmatter":{"description":"BCC 目录 用例教程 - 特殊过滤 有些工具具有特殊的过滤功能，主要用例是跟踪容器中运行的进程，但这些机制是通用的，也可以用于其他情况。 按 cgroup 过滤 某些工具可以选择通过引用外部管理的固定 BPF 哈希图来按 cgroup 进行过滤。 命令示例： 上面的命令将仅显示属于 cgroup 之一的进程的结果，这些 cgroup 的 id 由 b...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/02.2.%20%E7%94%A8%E4%BE%8B%E6%95%99%E7%A8%8B%20-%20%E7%89%B9%E6%AE%8A%E8%BF%87%E6%BB%A4.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"BCC"}],["meta",{"property":"og:description","content":"BCC 目录 用例教程 - 特殊过滤 有些工具具有特殊的过滤功能，主要用例是跟踪容器中运行的进程，但这些机制是通用的，也可以用于其他情况。 按 cgroup 过滤 某些工具可以选择通过引用外部管理的固定 BPF 哈希图来按 cgroup 进行过滤。 命令示例： 上面的命令将仅显示属于 cgroup 之一的进程的结果，这些 cgroup 的 id 由 b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BCC\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"BCC","slug":"bcc","link":"#bcc","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"用例教程 - 特殊过滤","slug":"用例教程-特殊过滤","link":"#用例教程-特殊过滤","children":[{"level":2,"title":"按 cgroup 过滤","slug":"按-cgroup-过滤","link":"#按-cgroup-过滤","children":[]},{"level":2,"title":"按名称空间挂载过滤","slug":"按名称空间挂载过滤","link":"#按名称空间挂载过滤","children":[]}]}],"git":{},"readingTime":{"minutes":1.99,"words":596},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.2. 用例教程 - 特殊过滤.md","excerpt":"\\n<h1>目录</h1>\\n<h1>用例教程 - 特殊过滤</h1>\\n<p>有些工具具有特殊的过滤功能，主要用例是跟踪容器中运行的进程，但这些机制是通用的，也可以用于其他情况。</p>\\n<h2>按 cgroup 过滤</h2>\\n<p>某些工具可以选择通过引用外部管理的固定 BPF 哈希图来按 cgroup 进行过滤。</p>\\n<p>命令示例：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># ./opensnoop --cgroupmap /sys/fs/bpf/test01</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># ./execsnoop --cgroupmap /sys/fs/bpf/test01</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># ./tcpconnect --cgroupmap /sys/fs/bpf/test01</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># ./tcpaccept --cgroupmap /sys/fs/bpf/test01</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># ./tcptracer --cgroupmap /sys/fs/bpf/test01</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.2. 用例教程 - 特殊过滤.md","value":{"title":"02.2. 用例教程 - 特殊过滤","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/02.2. 用例教程 - 特殊过滤.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,d as data};
