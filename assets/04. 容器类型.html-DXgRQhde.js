import{_ as s,c as a,e as t,o as p}from"./app-D5EhND04.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="rust容器类型" tabindex="-1"><a class="header-anchor" href="#rust容器类型"><span>Rust容器类型</span></a></h1><h2 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple"><span>元组 (tuple)</span></a></h2><h3 id="性质" tabindex="-1"><a class="header-anchor" href="#性质"><span>性质</span></a></h3><p>Tuple 元组是一个 复合类型 ，可以存储多个不同类型的数据。 Rust 支持元组 tuple 类型。元组使用括号 () 来构造（construct）。函数可以使用元组来返回多个值，因为元组可以拥有任意多个值。</p><p>虽然名字叫 &quot;元组&quot;，不是数组（同类型），声明上也有点像Python的元组（变长、不同类型），但其实更类似于<strong>C的结构体</strong>（定长、不同类型），</p><ul><li>元组是<strong>定长</strong>的。一旦定义，就不能再增长或缩小，长度是固定的。元组的下标从 0 开始</li><li>可以包含<strong>不同的类型</strong></li></ul><p>字符串对象在堆中，而元组在栈中</p><h3 id="定义元组" tabindex="-1"><a class="header-anchor" href="#定义元组"><span>定义元组</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> tuple变量名称<span class="token punctuation">:</span><span class="token punctuation">(</span>数据类型<span class="token number">1</span><span class="token punctuation">,</span>数据类型<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>数据<span class="token number">1</span>，数据<span class="token number">2</span>，<span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tuple变量名称 <span class="token operator">=</span> <span class="token punctuation">(</span>数据<span class="token number">1</span>，数据<span class="token number">2</span>，<span class="token punctuation">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自动推断类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>** 注：tuple 使用一对小括号 () 把所有元素放在一起，元素之间使用逗号 , 分隔。如果显式指定了元组的数据类型，那么数据类型的个数必须和元组的个数相同，否则会报错。**</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;掌握Go语言语法，并且可以完成单体服务应用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><h4 id="访问元素" tabindex="-1"><a class="header-anchor" href="#访问元素"><span>访问元素</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>元组变量<span class="token punctuation">.</span>索引数字
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;掌握Go语言语法，并且可以完成单体服务应用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> t<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 Go语言极简一本通</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> t<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出 掌握Go语言语法，并且可以完成单体服务应用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元组作参数" tabindex="-1"><a class="header-anchor" href="#元组作参数"><span>元组作参数</span></a></h4><p>元组一般是值传递</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> 函数名称<span class="token punctuation">(</span>tuple参数名称<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show_tuple</span><span class="token punctuation">(</span>tuple<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> t<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;掌握Go语言语法，并且可以完成单体服务应用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">show_tuple</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 输出 (&quot;Go语言极简一本通&quot;, &quot;掌握Go语言语法，并且可以完成单体服务应用&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元组解构" tabindex="-1"><a class="header-anchor" href="#元组解构"><span>元组解构</span></a></h4><p>元组 ( tuple )解构 就是在 tuple 中的每一个元素按照顺序一个一个赋值给变量。使用 = ，让右边的 tuple 按照顺序给等号左变的变量一个一个赋值。</p><p>这点有点像Python</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token punctuation">(</span>book<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 输出 Go语言极简一本通</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 输出 掌握Go语言语法，并且可以完成单体服务应用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>数组 是用来存储一系列数据，拥有相同类型 T 的对象的集合，在内存中是连续存储的。使用中括号 [] 来创建，且它们的大小在编译时会被确定。数组下标是从0 开始。数组是在栈中分配的，数组可以<strong>自动被借用</strong>成为 <strong>切片(slice)</strong>。</p><h3 id="声明和初始化" tabindex="-1"><a class="header-anchor" href="#声明和初始化"><span>声明和初始化</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> 变量名<span class="token punctuation">:</span><span class="token punctuation">[</span>数据类型<span class="token punctuation">;</span> 数组长度<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> 值<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// 一般写法</span>
<span class="token keyword">let</span> arr1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> 变量名 <span class="token operator">=</span> <span class="token punctuation">[</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> 值<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>					<span class="token comment">// 类型推导</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> 变量名<span class="token punctuation">:</span><span class="token punctuation">[</span>数据类型<span class="token punctuation">;</span> 数组长度<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">,</span> 数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// 快速初始化，有点类似Cpp的大括号初始化或python的?解析表达式数组</span>
<span class="token keyword">let</span> arr3<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1"><span>方法</span></a></h3><h4 id="获取数组长度-len" tabindex="-1"><a class="header-anchor" href="#获取数组长度-len"><span>获取数组长度 len()</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组"><span>遍历数组</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> arr1 <span class="token punctuation">{</span>
   <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;充电科目: {}\\n&quot;</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
充电科目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言极简一本通
充电科目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
充电科目<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师

<span class="token keyword">for</span> item <span class="token keyword">in</span> arr1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;已参加的充电科目: {}\\n&quot;</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
已参加的充电科目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言极简一本通
已参加的充电科目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
已参加的充电科目<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果修改一个不可变数组，报错如下：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
error<span class="token punctuation">[</span><span class="token constant">E0594</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cannot assign to \`arr2<span class="token punctuation">[</span>_<span class="token punctuation">]</span>\`<span class="token punctuation">,</span> <span class="token keyword">as</span> \`arr2\` is not declared <span class="token keyword">as</span> mutable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想修改这个错误，声明数组的时候，添加 mut 关键字</p><h4 id="数组做参数" tabindex="-1"><a class="header-anchor" href="#数组做参数"><span>数组做参数</span></a></h4><p><strong>值传递</strong> 传递一个数组的副本，副本的修改，不会影响原数组。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>l <span class="token punctuation">{</span>
        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;充电科目: {}&quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 

<span class="token keyword">let</span> <span class="token keyword">mut</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}\\n&quot;</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">show_arr</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}\\n&quot;</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
充电科目<span class="token punctuation">:</span> 
充电科目<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
充电科目<span class="token punctuation">:</span> 从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师
<span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用传递 传递内存的地址给函数，修改数组的任何值都会修改原来的数组。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">modify_arr</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> l <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>l <span class="token punctuation">{</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> arr3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}\\n&quot;</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">modify_arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}\\n&quot;</span><span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出</span>
<span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const u=s(e,[["render",o],["__file","04. 容器类型.html.vue"]]),i=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html","title":"Rust容器类型","lang":"zh-CN","frontmatter":{"description":"Rust容器类型 元组 (tuple) 性质 Tuple 元组是一个 复合类型 ，可以存储多个不同类型的数据。 Rust 支持元组 tuple 类型。元组使用括号 () 来构造（construct）。函数可以使用元组来返回多个值，因为元组可以拥有任意多个值。 虽然名字叫 \\"元组\\"，不是数组（同类型），声明上也有点像Python的元组（变长、不同类型），...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust容器类型"}],["meta",{"property":"og:description","content":"Rust容器类型 元组 (tuple) 性质 Tuple 元组是一个 复合类型 ，可以存储多个不同类型的数据。 Rust 支持元组 tuple 类型。元组使用括号 () 来构造（construct）。函数可以使用元组来返回多个值，因为元组可以拥有任意多个值。 虽然名字叫 \\"元组\\"，不是数组（同类型），声明上也有点像Python的元组（变长、不同类型），..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust容器类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust容器类型","slug":"rust容器类型","link":"#rust容器类型","children":[{"level":2,"title":"元组 (tuple)","slug":"元组-tuple","link":"#元组-tuple","children":[{"level":3,"title":"性质","slug":"性质","link":"#性质","children":[]},{"level":3,"title":"定义元组","slug":"定义元组","link":"#定义元组","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[{"level":4,"title":"访问元素","slug":"访问元素","link":"#访问元素","children":[]},{"level":4,"title":"元组作参数","slug":"元组作参数","link":"#元组作参数","children":[]},{"level":4,"title":"元组解构","slug":"元组解构","link":"#元组解构","children":[]}]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"声明和初始化","slug":"声明和初始化","link":"#声明和初始化","children":[]},{"level":3,"title":"方法","slug":"方法-1","link":"#方法-1","children":[{"level":4,"title":"获取数组长度 len()","slug":"获取数组长度-len","link":"#获取数组长度-len","children":[]},{"level":4,"title":"遍历数组","slug":"遍历数组","link":"#遍历数组","children":[]},{"level":4,"title":"数组做参数","slug":"数组做参数","link":"#数组做参数","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/04. 容器类型.md","excerpt":"\\n<h2>元组 (tuple)</h2>\\n<h3>性质</h3>\\n<p>Tuple 元组是一个 复合类型 ，可以存储多个不同类型的数据。 Rust 支持元组 tuple 类型。元组使用括号 () 来构造（construct）。函数可以使用元组来返回多个值，因为元组可以拥有任意多个值。</p>\\n<p>虽然名字叫 \\"元组\\"，不是数组（同类型），声明上也有点像Python的元组（变长、不同类型），但其实更类似于<strong>C的结构体</strong>（定长、不同类型），</p>\\n<ul>\\n<li>元组是<strong>定长</strong>的。一旦定义，就不能再增长或缩小，长度是固定的。元组的下标从 0 开始</li>\\n<li>可以包含<strong>不同的类型</strong></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/04. 容器类型.md","value":{"title":"04. 容器类型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/04. 容器类型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,i as data};
