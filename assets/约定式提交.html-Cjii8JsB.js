import{_ as s,e as a,g as e,o as n}from"./app-DPU1xou8.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="约定式提交" tabindex="-1"><a class="header-anchor" href="#约定式提交"><span>约定式提交</span></a></h1><h2 id="约定式提交-1" tabindex="-1"><a class="header-anchor" href="#约定式提交-1"><span>约定式提交</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>一种用于给提交信息增加人机可读含义的规范</p><h3 id="为什么使用约定式提交" tabindex="-1"><a class="header-anchor" href="#为什么使用约定式提交"><span>为什么使用约定式提交</span></a></h3><p>根据 Conventional Commits 里的说法：</p><blockquote><ul><li>自动化生成 CHANGELOG</li><li>基于提交的类型，自动决定语义化的版本变更</li><li>向同事、公众与其他利益关系者传达变化的性质</li><li>触发构建和部署流程</li><li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度</li></ul></blockquote><h2 id="angular-的-conventional-commits" tabindex="-1"><a class="header-anchor" href="#angular-的-conventional-commits"><span>Angular 的 Conventional Commits</span></a></h2><p>当然也有其他的规范，但感觉这个比较泛用</p><p>网站：https://www.conventionalcommits.org/zh-hans/v1.0.0/（有中文）</p><p>这是一个<em>社区驱动</em>的项目，旨在为Git提交消息制定标准。<em>Angular遵循这个标准</em>。</p><h3 id="提交结构" tabindex="-1"><a class="header-anchor" href="#提交结构"><span>提交结构</span></a></h3><p>提交说明的结构如下所示：</p><p>原文：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;type&gt;[optional scope]: &lt;description&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[optional body]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[optional footer(s)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译文：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;类型&gt;[可选 范围]: &lt;描述&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选 正文]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选 脚注]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p><ul><li>常用 <ol><li>fix: 类型 为 fix 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）。</li><li>feat: 类型 为 feat 的提交表示在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）。</li><li>BREAKING CHANGE: 在脚注中包含 BREAKING CHANGE: 或 &lt;类型&gt;(范围) 后面有一个 ! 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意 类型 提交的一部分。</li></ol></li><li>除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 <strong>@commitlint/config-conventional</strong>（基于 <strong>Angular 约定</strong>）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。 <ol><li>build: 用于修改项目构建系统，例如修改依赖库、外部接口或者升级 Node 版本等；</li><li>chore: 用于对非业务性代码进行修改，例如修改构建流程或者工具配置等；</li><li>ci: 用于修改持续集成流程，例如修改 Travis、Jenkins 等工作流配置；</li><li>docs: 用于修改文档，例如修改 README 文件、API 文档等；</li><li>style: 用于修改代码的样式，例如调整缩进、空格、空行等；</li><li>refactor: 用于重构代码，例如修改代码结构、变量名、函数名等但不修改功能逻辑；</li><li>perf: 用于优化性能，例如提升代码的性能、减少内存占用等；</li><li>test: 用于修改测试用例，例如添加、删除、修改代码的测试用例等。</li></ol></li><li>脚注中除了 <code>BREAKING CHANGE: &lt;description&gt;</code> ，其它条目应该采用类似 <strong>git trailer format</strong> 这样的惯例。</li></ul><p>其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。 可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 feat(parser): adds ability to parse arrays.。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><h4 id="包含了描述并且脚注中有破坏性变更的提交说明" tabindex="-1"><a class="header-anchor" href="#包含了描述并且脚注中有破坏性变更的提交说明"><span>包含了描述并且脚注中有破坏性变更的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>feat: allow provided config object to extend other configs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: \`extends\` key in config file is now used for extending other config files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="包含了-字符以提醒注意破坏性变更的提交说明" tabindex="-1"><a class="header-anchor" href="#包含了-字符以提醒注意破坏性变更的提交说明"><span>包含了 <code>!</code> 字符以提醒注意破坏性变更的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>feat!: send an email to the customer when a product is shipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="包含了范围和破坏性变更-的提交說明" tabindex="-1"><a class="header-anchor" href="#包含了范围和破坏性变更-的提交說明"><span>包含了范围和破坏性变更 <code>!</code> 的提交說明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>feat(api)!: send an email to the customer when a product is shipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="包含了-和-breaking-change-脚注的提交说明" tabindex="-1"><a class="header-anchor" href="#包含了-和-breaking-change-脚注的提交说明"><span>包含了 <code>!</code> 和 BREAKING CHANGE 脚注的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chore!: drop support for Node 6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: use JavaScript features not available in Node 6.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不包含正文的提交说明" tabindex="-1"><a class="header-anchor" href="#不包含正文的提交说明"><span>不包含正文的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docs: correct spelling of CHANGELOG</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="包含范围的提交说明" tabindex="-1"><a class="header-anchor" href="#包含范围的提交说明"><span>包含范围的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>feat(lang): add polish language</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="包含多行正文和多行脚注的提交说明" tabindex="-1"><a class="header-anchor" href="#包含多行正文和多行脚注的提交说明"><span>包含多行正文和多行脚注的提交说明</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fix: prevent racing of requests</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Introduce a request id and a reference to latest request. Dismiss</span></span>
<span class="line"><span>incoming responses other than from latest request.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Remove timeouts which were used to mitigate the racing issue but are</span></span>
<span class="line"><span>obsolete now.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Reviewed-by: Z</span></span>
<span class="line"><span>Refs: #123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何生成对应的changelog" tabindex="-1"><a class="header-anchor" href="#如何生成对应的changelog"><span>如何生成对应的ChangeLog</span></a></h3><p>见后文</p><ul><li><strong>官方使用效果</strong>：https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog/CHANGELOG.md</li><li>官方开源仓库：https://github.com/conventional-changelog/conventional-changelog</li></ul><h2 id="【补充】个人补充" tabindex="-1"><a class="header-anchor" href="#【补充】个人补充"><span>【补充】个人补充</span></a></h2><p>需要注意，这里并不包括有时我们很常用的 <code>add</code>、<code>remove</code>、<code>change</code> 这种</p><p>另外如果团队没约束或不自动生成 ChangeLog 的情况下还是怎么舒服怎么来吧</p><p>启发：</p><p>另外，我们会发现这约定式提交其实还有一个特点：面向ChangeLog约定。</p><p>搞清楚了这点就会发现他的设计逻辑原理，以及搞清楚这套设定和我们平时弄的有什么实质区别。</p><ul><li><p>自用更关心在自己所认为的添加，而约定式通常将用户关心的内容抽象出来。例如用户最关心的 Top3：</p><ul><li>feat</li><li>fix</li><li>BREAKING CHANGE</li></ul><p>这几个意外的大多是用户没那么关心的。通常也不会被自动收集到ChangeLog中</p></li></ul><h2 id="【扩展】如何通过插件强制约定式提交" tabindex="-1"><a class="header-anchor" href="#【扩展】如何通过插件强制约定式提交"><span>【扩展】如何通过插件强制约定式提交</span></a></h2><p>Husky我见过，其他目前没怎么听过</p><ul><li>Git Hooks</li><li>Husky <ul><li>一个流行的Git hooks管理工具</li></ul></li><li>lint-staged</li><li>Commitizen</li><li>IDE集成工具</li></ul><h2 id="【扩展】如何自动生成-changelog" tabindex="-1"><a class="header-anchor" href="#【扩展】如何自动生成-changelog"><span>【扩展】如何自动生成 ChangeLog</span></a></h2><p>【以下内容来源GPT】</p><p>可以使用一些工作来自动生成 ChangeLog：</p><h3 id="conventional-changelog" tabindex="-1"><a class="header-anchor" href="#conventional-changelog"><span>Conventional Changelog</span></a></h3><p>一个基于Conventional Commits规范的工具，它可以生成结构化的变更日志。通常与<code>standard-version</code>或<code>semantic-release</code>一起使用</p><p>使用方法：</p><blockquote><p><strong>安装依赖</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conventional-changelog-cli</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>生成Changelog</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> conventional-changelog</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> angular</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CHANGELOG.md</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>配置文件</strong>（可选）</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">module.exports</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  preset:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;angular&#39;,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  //</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 其他配置项...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>集成到发布流程</strong></p><p>可以将此步骤集成到CI/CD流程中，自动在每次发布时更新Changelog</p></blockquote><p>使用效果：</p><ul><li><strong>官方使用效果</strong>：https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog/CHANGELOG.md</li><li>官方开源仓库：https://github.com/conventional-changelog/conventional-changelog</li></ul><h3 id="semantic-release" tabindex="-1"><a class="header-anchor" href="#semantic-release"><span>Semantic Release</span></a></h3><p>Semantic Release 是一个持续交付工具，它可以根据你的提交消息自动推断出新的版本号，并自动生成变更日志</p><h3 id="git-release" tabindex="-1"><a class="header-anchor" href="#git-release"><span>Git-Release</span></a></h3><p>对于简单的项目，也可以考虑使用一些轻量级的脚本或工具，如<code>git-release</code>，它可以根据提交信息生成简单的变更日志</p><h3 id="自定义脚本" tabindex="-1"><a class="header-anchor" href="#自定义脚本"><span>自定义脚本</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;# Changelog&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CHANGELOG.md</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --format=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;%H %s%n%an%n%ad%n%b&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --date=short</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">BEGIN { print &quot;## [Unreleased]&quot; &gt;&gt; &quot;CHANGELOG.md&quot; }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">{ if ($1 ~ /^[0-9a-f]{40}$/) { printf(&quot;\\n\\n## [%s]&quot;, $2); next } </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    else if ($1 ~ /^feat/) { printf(&quot;\\n- %s&quot;, $0) } </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    else if ($1 ~ /^fix/) { printf(&quot;\\n- %s&quot;, $0) }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">END { print &quot;\\n&quot; &gt;&gt; &quot;CHANGELOG.md&quot; }</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt;&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">CHANGELOG.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63)]))}const p=s(l,[["render",t],["__file","约定式提交.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/05.%20%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86/%E7%89%88%E6%9C%AC%E4%B8%8E%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4.html","title":"约定式提交","lang":"zh-CN","frontmatter":{"description":"约定式提交 约定式提交 概念 一种用于给提交信息增加人机可读含义的规范 为什么使用约定式提交 根据 Conventional Commits 里的说法： 自动化生成 CHANGELOG 基于提交的类型，自动决定语义化的版本变更 向同事、公众与其他利益关系者传达变化的性质 触发构建和部署流程 让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/05.%20%E5%88%86%E5%8F%91%E7%AE%A1%E7%90%86/%E7%89%88%E6%9C%AC%E4%B8%8E%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"约定式提交"}],["meta",{"property":"og:description","content":"约定式提交 约定式提交 概念 一种用于给提交信息增加人机可读含义的规范 为什么使用约定式提交 根据 Conventional Commits 里的说法： 自动化生成 CHANGELOG 基于提交的类型，自动决定语义化的版本变更 向同事、公众与其他利益关系者传达变化的性质 触发构建和部署流程 让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"约定式提交\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":5.34,"words":1603},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/约定式提交.md","excerpt":"\\n<h2>约定式提交</h2>\\n<h3>概念</h3>\\n<p>一种用于给提交信息增加人机可读含义的规范</p>\\n<h3>为什么使用约定式提交</h3>\\n<p>根据 Conventional Commits 里的说法：</p>\\n<blockquote>\\n<ul>\\n<li>自动化生成 CHANGELOG</li>\\n<li>基于提交的类型，自动决定语义化的版本变更</li>\\n<li>向同事、公众与其他利益关系者传达变化的性质</li>\\n<li>触发构建和部署流程</li>\\n<li>让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度</li>\\n</ul>\\n</blockquote>\\n","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/约定式提交.md","value":{"title":"约定式提交","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/05. 分发管理/版本与分支管理/约定式提交.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,r as data};
