import{_ as a,e as i,g as l,o as n}from"./app-DeGPQmv-.js";const t={};function o(p,e){return n(),i("div",null,e[0]||(e[0]=[l('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="编译详解" tabindex="-1"><a class="header-anchor" href="#编译详解"><span>编译详解</span></a></h1><h2 id="多文件编译" tabindex="-1"><a class="header-anchor" href="#多文件编译"><span>多文件编译</span></a></h2><p>通过依赖自动编译关联文件</p><ul><li>Java的javac编译器：如果熟悉UNIX的“make”工具（或者是Windows中的“nmake”等工具），可以认为<strong>Java编译器内置了“make”功能</strong></li><li>C++：一般是使用makefile，即qmake (QT) 或 cmake (通用) 来辅助变异</li><li>js-es6、python：这种动态语言不需要编译，都是实时import模块的</li></ul><h2 id="项目工程层级" tabindex="-1"><a class="header-anchor" href="#项目工程层级"><span>项目工程层级</span></a></h2><p>与其他语言比较：</p><p>忽略掉 .vscode、.husky、.gitignore、.clang-format、LICENSE、README.md 这一类任意语言及完全可选的文件。</p><ul><li><p>Java</p><ul><li>最普通的java单文件简单，准备主类和main函数即可，java.exe生成字节码</li><li>SE 有复杂固定的项目结构，多种不同格式的文件。可以通过IDE直接创建对应结构的Project</li><li>EE 类似SE，但我不是很熟</li></ul></li><li><p>C++</p><ul><li>C/C++：简单一些，小型项目结构几乎只有头文件和源码，只要准备main函数。gcc / g++ 加一些编译参数即可实现单文件/多文件编译</li><li>大型一点增加了.sln / CMakeList.txt / makefile 这种编译及链接辅助文件</li><li>Qt：也有多种不同格式的文件，但感觉没 Java 繁琐。可以通过IDE直接创建对应结构的Project</li></ul></li><li><p>JavaScript、Python</p><ul><li>也简单，只有一个 package.json 或 requirement.txt 的依赖库文件，甚至main函数不是必须的 (因为这两不需要构建，是纯解释型的)</li><li>Vue这种框架项目复杂一些。可以借助脚手架来创建项目</li></ul></li><li><p>Go</p><ul><li>单文件编译很简单，go build test.go。准备main包和main函数即可。大项目也有一些需要遵循的结构规则 (如每个文件都要有所属的包)</li></ul></li><li><p>Rust：的……</p></li></ul><h2 id="编译生成产物" tabindex="-1"><a class="header-anchor" href="#编译生成产物"><span>编译生成产物</span></a></h2><h3 id="跨平台策略" tabindex="-1"><a class="header-anchor" href="#跨平台策略"><span>跨平台策略</span></a></h3><p>当然，比较影响这方面的是语言的编译跨平台策略</p><ul><li>一次编写，随处编译 (Write Once, Compile Everywhere, WOCE) <ul><li>C/C++、Rust</li></ul></li><li>一次编写，随处运行 (Write Once, Run Anywhere, WORA) <ul><li>Java (字节码形式)：需要目标机器安装Java虚拟机 (JVM)，JVM将字节码转化为机器代码</li><li>Python (脚本形式)：需要目标机器安装Python解释器</li></ul></li><li>其他跨平台策略 <ul><li>HTML/JavaScript/CSS</li><li>.NET Framework/.NET Core：需要目标机器安装.NET运行时环境</li><li>Kotlin/Scala (字节码/js形式)</li><li>GO：可以同时 WOCE 和 WORA 的</li></ul></li></ul><h3 id="生成windows可执行文件" tabindex="-1"><a class="header-anchor" href="#生成windows可执行文件"><span>生成windows可执行文件</span></a></h3><p>某些语言要生成exe还要做其他工作的。而且有些语言并不以总是在使用环境中被以可执行文件运行 (见跨平台策略)</p><p>WOCE型的语言，更容易实现exe的生成 (本来就是要使用可执行文件的)</p><ul><li><p>WOCE</p><ul><li>c/c++：配置工具链，mingw/msvc等，选择好编译环境，然后编译即可</li></ul></li><li><p>WORA</p><ul><li>python：python要额外使用pyinstaller等打包工具</li><li>java：忘了，好像要 Launch4j 和 JSmooth 等打包工具</li></ul></li><li><p>其他</p><ul><li><p>C# .NET：windows似乎要对面另外安 .NET 5、.NET 6 环境这样，就不会另外再打包环境了</p></li><li><p>Go：<code>go build test.go</code>，在windows环境直接就能生成小体积的test.exe，在linux环境估计也是直接生成可执行文件。可以说非常方便了</p><p>Go 似乎是可以同时 WOCE 和 WORA 的。因为Go 语言的运行时（runtime）相对轻量</p></li></ul></li></ul>',18)]))}const r=a(t,[["render",o],["__file","02. 编译详解.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.%20%E7%BC%96%E8%AF%91%E8%AF%A6%E8%A7%A3.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 编译详解 多文件编译 通过依赖自动编译关联文件 Java的javac编译器：如果熟悉UNIX的“make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++：一般是使用makefile，即qmake (QT) 或 cmake (通用) 来辅助变异 js-es6、python：这种动...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/02.%20%E7%BC%96%E8%AF%91%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 编译详解 多文件编译 通过依赖自动编译关联文件 Java的javac编译器：如果熟悉UNIX的“make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++：一般是使用makefile，即qmake (QT) 或 cmake (通用) 来辅助变异 js-es6、python：这种动..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.75,"words":825},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/02. 编译详解.md","excerpt":"\\n<h1>目录</h1>\\n<h1>编译详解</h1>\\n<h2>多文件编译</h2>\\n<p>通过依赖自动编译关联文件</p>\\n<ul>\\n<li>Java的javac编译器：如果熟悉UNIX的“make”工具（或者是Windows中的“nmake”等工具），可以认为<strong>Java编译器内置了“make”功能</strong></li>\\n<li>C++：一般是使用makefile，即qmake (QT) 或 cmake (通用) 来辅助变异</li>\\n<li>js-es6、python：这种动态语言不需要编译，都是实时import模块的</li>\\n</ul>\\n<h2>项目工程层级</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/02. 编译详解.md","value":{"title":"02. 编译详解","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/02. 编译详解.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,c as data};
