import{_ as t,c as p,e as i,a,b as s,d as l,o as c,r as o}from"./app-DEbg6qWK.js";const d="/assets/9655ebb5d7364b1886258a151b408931-Bu6mHrb9.png",u="/assets/29ca84969180494ca27f3de171c824c0-NWxB_dj9.png",r={},k={href:"https://www.jetbrains.com/help/clion/using-cmake-install.html?keymap=secondary_visual_studio",target:"_blank",rel:"noopener noreferrer"},m={href:"https://gitee.com/tang_world/my_oatpp",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1vR4y1u77h",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.cmake.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.cmake.org/HTML/Download.html",target:"_blank",rel:"noopener noreferrer"},g={href:"http://runhello.sh/",target:"_blank",rel:"noopener noreferrer"};function E(_,n){const e=o("ExternalLinkIcon");return c(),p("div",null,[n[21]||(n[21]=i(`<h1 id="构建管理" tabindex="-1"><a class="header-anchor" href="#构建管理"><span>构建管理</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="cmakelists-txt" tabindex="-1"><a class="header-anchor" href="#cmakelists-txt"><span>CMakeLists.txt</span></a></h1><p>LincZero：在这一篇笔记开始之前，首先声明：我个人更倾向与使用小写的CMakeLists指令，所以笔记中会以小写为主</p><h2 id="各语言的关键管理器" tabindex="-1"><a class="header-anchor" href="#各语言的关键管理器"><span>各语言的关键管理器</span></a></h2><p>CMakeLists.txt和Makefile都是用来管理和自动化编译、构建C/C++项目的文件。它们可以指定编译器设置、链接库依赖和构建目标等信息。</p><ul><li><p>Cpp</p><ul><li><p><code>CMakeLists.txt</code>：这是CMake构建系统用的配置文件。CMake是一个跨平台的自动化建构系统，可以产生 Makefile 或其他构建工具所需的配置文件，以在多种平台上构建项目。</p></li><li><p><code>Makefile</code>：这是GNU Make的配置文件。GNU Make是一个普遍用于自动化构建的工具，可以自动决定哪些文件需要被重新编译，哪些文件需要被重新链接，并自动处理这些任务。</p></li><li><p>其他：QT的<code>.pro</code>，其实本质上也会生成make文件，可以使用QMake/CMake</p></li></ul></li><li><p>Python：在Python中使用<code>setup.py</code>文件，用于管理项目的包依赖和构建过程。</p></li><li><p>Node.js/JavaScript：使用<code>package.json</code>文件，管理项目的模块依赖、运行脚本和项目元数据等</p></li><li><p>Java：使用<code>pom.xml</code>（Maven）或 <code>build.gradle</code>（Gradle）文件，进行项目构建和依赖管理</p></li><li><p>Ruby：使用<code>Gemfile</code>（Bundler），进行依赖管理和构建Ruby项目</p></li><li><p>.NET/C#: 使用<code>.csproj</code>、<code>.vbproj</code>或者<code>.fsproj</code>文件，用于指定项目设置、依赖和构建过程</p></li></ul><h2 id="_0" tabindex="-1"><a class="header-anchor" href="#_0"><span>0</span></a></h2><p>参考：https://www.cnblogs.com/ybqjymy/p/13409050.html</p><h3 id="单个源文件" tabindex="-1"><a class="header-anchor" href="#单个源文件"><span>单个源文件</span></a></h3><ul><li>Demo1/ <ul><li>main.cc</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>Demo1<span class="token punctuation">)</span>

<span class="token comment"># 指定生成目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Demo main.cc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同一目录-多个源文件" tabindex="-1"><a class="header-anchor" href="#同一目录-多个源文件"><span>同一目录，多个源文件</span></a></h3><ul><li>Demo2/ <ul><li>main.cc</li><li>MathFunctions.cc</li><li>MathFunctions.h</li></ul></li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>Demo2<span class="token punctuation">)</span>

<span class="token comment"># 指定生成目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Demo main.cc MathFunctions.cc<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>Demo2<span class="token punctuation">)</span>

<span class="token comment"># 查找当前目录下的所有源文件</span>
<span class="token comment"># 并将名称保存到 DIR_SRCS 变量</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. DIR_SRCS<span class="token punctuation">)</span>

<span class="token comment"># 指定生成目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Demo <span class="token punctuation">\${</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多个目录-多个源文件" tabindex="-1"><a class="header-anchor" href="#多个目录-多个源文件"><span>多个目录，多个源文件</span></a></h3><ul><li>Demo3/ <ul><li>main.cc</li><li>math/ <ul><li>MathFunctions.cc</li><li>MathFunctions.h</li><li><strong>(NEW)</strong> CMakeLists.txt</li></ul></li></ul></li></ul><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>Demo3<span class="token punctuation">)</span>

<span class="token comment"># 查找当前目录下的所有源文件</span>
<span class="token comment"># 并将名称保存到 DIR_SRCS 变量</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. DIR_SRCS<span class="token punctuation">)</span>

<span class="token comment"># 添加 math 子目录</span>
<span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token comment"># 这样 math 目录下的 CMakeLists.txt 文件和源代码也会被处理</span>

<span class="token comment"># 指定生成目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Demo main.cc<span class="token punctuation">)</span>

<span class="token comment"># 添加链接库</span>
<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>Demo MathFunctions<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子目录的 CMakeLists.txt</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># 查找当前目录下的所有源文件</span>
<span class="token comment"># 并将名称保存到 DIR_LIB_SRCS 变量</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. DIR_LIB_SRCS<span class="token punctuation">)</span>

<span class="token comment"># 生成链接库</span>
<span class="token keyword">add_library</span> <span class="token punctuation">(</span>MathFunctions <span class="token punctuation">\${</span>DIR_LIB_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义编译选项" tabindex="-1"><a class="header-anchor" href="#自定义编译选项"><span>自定义编译选项</span></a></h3><p>/Demo4</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># CMake 最低版本号要求</span>
<span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">2.8</span><span class="token punctuation">)</span>

<span class="token comment"># 项目信息</span>
<span class="token keyword">project</span> <span class="token punctuation">(</span>Demo4<span class="token punctuation">)</span>

<span class="token comment"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span>
<span class="token keyword">configure_file</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/config.h.in&quot;</span>
	<span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_BINARY_DIR</span><span class="token punctuation">}</span></span>/config.h&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># 是否使用自己的 MathFunctions 库</span>
<span class="token keyword">option</span> <span class="token punctuation">(</span>USE_MYMATH
	<span class="token string">&quot;Use provided math implementation&quot;</span> <span class="token boolean">ON</span><span class="token punctuation">)</span>

<span class="token comment"># 是否加入 MathFunctions 库</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>USE_MYMATH<span class="token punctuation">)</span>
	<span class="token keyword">include_directories</span> <span class="token punctuation">(</span><span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/math&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">add_subdirectory</span> <span class="token punctuation">(</span>math<span class="token punctuation">)</span>
	<span class="token keyword">set</span> <span class="token punctuation">(</span>EXTRA_LIBS <span class="token punctuation">\${</span>EXTRA_LIBS<span class="token punctuation">}</span> MathFunctions<span class="token punctuation">)</span>
<span class="token keyword">endif</span> <span class="token punctuation">(</span>USE_MYMATH<span class="token punctuation">)</span>

<span class="token comment"># 查找当前目录下的所有源文件</span>
<span class="token comment"># 并将名称保存到 DIR_SRCS 变量</span>
<span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>. DIR_SRCS<span class="token punctuation">)</span>

<span class="token comment"># 指定生成目标</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span>Demo <span class="token punctuation">\${</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">target_link_libraries</span> <span class="token punctuation">(</span>Demo <span class="token punctuation">\${</span>EXTRA_LIBS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>……未完</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="install与copy" tabindex="-1"><a class="header-anchor" href="#install与copy"><span>INSTALL与COPY</span></a></h3><ol><li>cmakelist中，copy和INSTALL files的区别和选用</li><li>如果我想要生成一个只有头文件没有源文件的include文件夹应该使用哪种，为什么？</li></ol><hr><ul><li><p>在cmakelist中，copy和INSTALL files的功能很相似，它们都可以将文件从源目录复制到目标目录。主要区别在于他们的使用场景和时机：</p><ul><li>copy命令：会在构建（build）阶段，复制文件或目录到某个具体的位置（但我实测好像在cmake的时候就会复制）</li><li>INSTALL：则是在安装（install）阶段执行的，可以将文件复制到安装目录下，或者制定具体的位置。它通常会结合CPACK相关命令一起使用，用于生成发布包。</li></ul><p>对于开发者来说，通常在开发或调试阶段使用copy命令，而在准备发布软件的时候则使用INSTALL命令。</p></li><li><p>如果想要生成一个只包含了头文件的include文件夹，通常建议是使用INSTALL命令。</p><p>因为只有头文件的库通常是被设计为可以被其他应用或库引用的，所以往往需要安装到一个公共的或者标准的位置，而INSTALL命令在制作软件发布包或者进行软件安装时更为适用。</p><p>但是，如果你只是在开发阶段需要复制头文件，那么使用copy命令也是可行的。</p></li></ul><h3 id="cmake构建系统阶段" tabindex="-1"><a class="header-anchor" href="#cmake构建系统阶段"><span>CMake构建系统阶段</span></a></h3><p>在CMake生成的构建系统中，有几个重要的阶段：</p><ol><li>CMake 配置生成阶段：CMake根据CMakeLists.txt及其子目录中的所有CMakeLists.txt生成Makefile或者其他形式的构建项目文件。</li><li>Make 构建阶段：使用Make或相当于Make的其他工具（如Ninja、Visual Studio）根据CMake生成的项目文件执行编译、链接等操作，生成最终的可执行程序、库文件等。</li><li>Install 阶段：这个阶段是在make构建阶段后面的，使用 <code>make install</code> 或者等效的命令执行。在此阶段，根据CMakeLists.txt中的INSTALL命令，将构建的结果（比如可执行文件、库文件、头文件等）复制或者安装到指定的目标路径，这个目标路径可以是系统的库路径、include路径，也可以是某个自定义的目录。</li></ol><p>因此，INSTALL阶段通常是在程序或库的编译链接后面的，它是把编译结果分发到指定位置的阶段。在搭建开发环境，或者生成程序发布包的时候，往往会执行这个阶段。</p><p>简单精炼总结版：</p><ul><li>CMake：多个CMakeLists.txt -&gt; Makefile等</li><li>Make：Makefile -&gt; 构建结果（可执行文件、库等）</li><li>Install：将构建结果 -&gt; 复制或安装到目标路径</li></ul><h3 id="clion执行install" tabindex="-1"><a class="header-anchor" href="#clion执行install"><span>CLion执行Install</span></a></h3><p>参考：https://blog.csdn.net/qq_30326609/article/details/127995878</p><p>&lt; GPT</p><p>我使用CLion时，如何执行Install阶段，我点击cmake和编译按钮后，库文件.a都生成出来了，但似乎没有执行Install相关的内容</p><hr><p>在CLion中，执行Install阶段的操作一般不会在默认的构建操作中出现，需要通过设置额外的目标来实现。</p><ol><li>首先打开&quot;Run/Debug Configurations&quot;对话框，可以通过&quot;Run&quot;菜单，或者工具栏上的下拉按钮来打开。</li><li>在弹出的对话框中，点击左上角的+号，然后在弹出的菜单中选择&quot;CMake Application&quot;。</li><li>新建的配置默认的Target是&quot;all&quot;，该Target对应的是整个项目的构建。你需要更改Target为&quot;install&quot;，这样这个配置就会执行install阶段。</li><li>完成上述设置后，你可以通过点击右上角的运行按钮，或者在&quot;Run&quot;菜单中选择对应的配置来启动，CLion会自动执行对应的构建和install过程。</li></ol><p>请注意，如果你的CMakeLists.txt中没有设置安装路径，可能会出现权限问题，因为默认可能会安装到系统目录下。你可以通过设置CMAKE_INSTALL_PREFIX变量来制定安装路径，例如：</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>set<span class="token punctuation">(</span>CMAKE_INSTALL_PREFIX <span class="token variable">$</span><span class="token punctuation">{</span>CMAKE_SOURCE_DIR<span class="token punctuation">}</span>/output<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="cmake-install命令" tabindex="-1"><a class="header-anchor" href="#cmake-install命令"><span>cmake install命令</span></a></h4><blockquote><p>install命令才会把这些库添加到环境变量中，与这个有关的变量是：CMAKE_INSTALL_PREFIX。 <strong>CMAKE_INSTALL_PREFIX默认值在linux系统中位置是/usr/local，windows则是C:/Program Files (x86)</strong></p></blockquote><p>install默认点击debug/run的时候并不会触发，需要一点手动操作。</p>`,49)),a("p",null,[n[1]||(n[1]=s("详情可以参考官网install说明：")),a("a",k,[n[0]||(n[0]=s("cmake install clion官网操作说明")),l(e)])]),n[22]||(n[22]=i('<p>对应图像界面位置：</p><p><img src="'+d+'" alt="在这里插入图片描述" loading="lazy"></p><p>下图位置可以设置run/debug的时候自动install，具体操作参考上面给出的官网。 <img src="'+u+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="install中的findpackage" tabindex="-1"><a class="header-anchor" href="#install中的findpackage"><span>install中的findPackage</span></a></h4><p>作用：在环境变量下查找某个包，查找后的包可以用到后面。</p><p>原理：执行FindXXX.cmake程序，这个程序在cmake2.x的时候需要手写，3.x后可以使用自动生成的XXXConfig.cmake来配置找到程序包，XXX是库的名字。</p><h4 id="install中的configure-file" tabindex="-1"><a class="header-anchor" href="#install中的configure-file"><span>install中的configure_file</span></a></h4><p>该命令将 <code>&lt;input&gt;</code> 指定的文件拷贝为<code> &lt;output&gt;</code> 指定的文件，并将 <code>&lt;input&gt;</code> 文件中 @VAR@ 或 ${VAR} 的位置替换为使用 configure_file() 命令的当前 CMakeLists.txt 中变量 VAR 的值。该命令用于外部文件获取 CMakeLists.txt 文件中变量的值。</p><pre><code>configure_file(&lt;input&gt; &lt;output) 中的 &lt;output&gt; 指定的文件名必须是 xxxConfig.cmake 或 xxx-config.cmake（xxx必须为小写）。\n</code></pre><h4 id="cmake-install文件demo" tabindex="-1"><a class="header-anchor" href="#cmake-install文件demo"><span>cmake install文件demo</span></a></h4>',10)),a("p",null,[n[3]||(n[3]=s("完整项目地址：")),a("a",m,[n[2]||(n[2]=s("my_oatpp")),l(e)])]),n[23]||(n[23]=i(`<div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment">#######################################################################################</span>
<span class="token comment"># 生成Target文件，将目标文件 targets 的可导出信息存储在 &lt;export_name&gt; 中（内存），用于生成可导出文件。</span>
install<span class="token punctuation">(</span>
    TARGETS <span class="token variable">$</span><span class="token punctuation">{</span>OATPP_THIS_MODULE_TARGETS<span class="token punctuation">}</span>
    EXPORT <span class="token string">&quot;\${OATPP_MODULE_NAME}Targets&quot;</span>
    ARCHIVE
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_LIBDIR}/oatpp-\${OATPP_MODULE_VERSION}&quot;</span>
        COMPONENT Devel
    LIBRARY
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_LIBDIR}/oatpp-\${OATPP_MODULE_VERSION}&quot;</span>
        COMPONENT Library
    RUNTIME
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_BINDIR}/oatpp-\${OATPP_MODULE_VERSION}&quot;</span>
        COMPONENT Library
    INCLUDES
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_INCLUDEDIR}/oatpp-\${OATPP_MODULE_VERSION}/\${OATPP_MODULE_NAME}&quot;</span>
<span class="token punctuation">)</span>
<span class="token comment"># 安装hpp类型文件到include文件夹下</span>
install<span class="token punctuation">(</span>DIRECTORY <span class="token variable">$</span><span class="token punctuation">{</span>OATPP_DIRS_TO_INSTALL<span class="token punctuation">}</span>
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_INCLUDEDIR}/oatpp-\${OATPP_MODULE_VERSION}/\${OATPP_MODULE_NAME}&quot;</span>
        COMPONENT Devel
        FILES_MATCHING PATTERN <span class="token string">&quot;*.hpp&quot;</span>
<span class="token punctuation">)</span>
<span class="token comment"># 使用生成的导出信息，生成导出目标文件</span>
install<span class="token punctuation">(</span>EXPORT <span class="token string">&quot;\${OATPP_MODULE_NAME}Targets&quot;</span>
        FILE <span class="token string">&quot;\${OATPP_MODULE_NAME}Targets.cmake&quot;</span>
<span class="token target symbol">        NAMESPACE oatpp</span><span class="token punctuation">:</span><span class="token punctuation">:</span>
        DESTINATION <span class="token string">&quot;\${CMAKE_INSTALL_LIBDIR}/cmake/\${OATPP_MODULE_NAME}-\${OATPP_MODULE_VERSION}&quot;</span>
        COMPONENT Devel
<span class="token punctuation">)</span>
<span class="token comment">###################################################</span>
<span class="token comment"># packaging Config</span>
<span class="token keyword">include</span><span class="token punctuation">(</span>CMakePackageConfigHelpers<span class="token punctuation">)</span>

write_basic_package_version_file<span class="token punctuation">(</span><span class="token string">&quot;\${OATPP_MODULE_NAME}ConfigVersion.cmake&quot;</span>
        VERSION <span class="token variable">$</span><span class="token punctuation">{</span>OATPP_MODULE_VERSION<span class="token punctuation">}</span>
        COMPATIBILITY ExactVersion <span class="token comment">## Use exact version matching.</span>
<span class="token punctuation">)</span>

<span class="token comment">## Take module-config.cmake.in file in this direcory as a template</span>

configure_package_config_file<span class="token punctuation">(</span>
            <span class="token string">&quot;\${CMAKE_CURRENT_LIST_DIR}/module-config.cmake.in&quot;</span>
            <span class="token string">&quot;\${OATPP_MODULE_NAME}Config.cmake&quot;</span>
        INSTALL_DESTINATION
            <span class="token string">&quot;\${CMAKE_INSTALL_LIBDIR}/cmake/\${OATPP_MODULE_NAME}-\${OATPP_MODULE_VERSION}&quot;</span>
        PATH_VARS
            OATPP_MODULE_NAME
            OATPP_MODULE_VERSION
            OATPP_MODULE_LIBRARIES
            OATPP_MODULE_LIBDIR
        NO_CHECK_REQUIRED_COMPONENTS_MACRO
<span class="token punctuation">)</span>
<span class="token comment">###################################################</span>

<span class="token comment"># 安装Config文件</span>
install<span class="token punctuation">(</span>
        FILES
            <span class="token string">&quot;\${CMAKE_CURRENT_BINARY_DIR}/\${OATPP_MODULE_NAME}Config.cmake&quot;</span>
            <span class="token string">&quot;\${CMAKE_CURRENT_BINARY_DIR}/\${OATPP_MODULE_NAME}ConfigVersion.cmake&quot;</span>
        DESTINATION
            <span class="token string">&quot;\${CMAKE_INSTALL_LIBDIR}/cmake/\${OATPP_MODULE_NAME}-\${OATPP_MODULE_VERSION}&quot;</span>
        COMPONENT Devel
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战经验-多层cmakelists" tabindex="-1"><a class="header-anchor" href="#实战经验-多层cmakelists"><span>实战经验 - 多层CMakeLists</span></a></h2><h1 id="系统教程" tabindex="-1"><a class="header-anchor" href="#系统教程"><span>系统教程</span></a></h1>`,3)),a("p",null,[n[5]||(n[5]=s("参考：")),a("a",v,[n[4]||(n[4]=s("【Bilibili】从零开始详细介绍CMake")),l(e)]),n[6]||(n[6]=s("，有自动字幕，带md笔记资料，总长01:10:50，进度10p_s/10p"))]),n[24]||(n[24]=a("h2",{id:"准备",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#准备"},[a("span",null,"准备")])],-1)),n[25]||(n[25]=a("h3",{id:"说明",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#说明"},[a("span",null,"说明")])],-1)),n[26]||(n[26]=a("p",null,"cmake的定义是什么 ？-----高级编译配置工具",-1)),n[27]||(n[27]=a("p",null,"当多个人用不同的语言或者编译器开发一个项目，最终要输出一个可执行文件或者共享库（dll，so等等）这时候神器就出现了-----CMake！",-1)),n[28]||(n[28]=a("p",null,"所有操作都是通过编译CMakeLists.txt来完成的—简单",-1)),a("p",null,[n[8]||(n[8]=s("官方网站是 ")),a("a",b,[n[7]||(n[7]=s("www.cmake.org")),l(e)]),n[9]||(n[9]=s("，可以通过访问官方网站获得更多关于 cmake 的信息"))]),n[29]||(n[29]=a("p",null,"学习CMake的目的，为将来处理大型的C/C++/JAVA项目做准备",-1)),n[30]||(n[30]=a("h3",{id:"cmake安装",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#cmake安装"},[a("span",null,"CMake安装")])],-1)),n[31]||(n[31]=a("p",null,"1、绝大多数的linux系统已经安装了CMake",-1)),a("p",null,[n[11]||(n[11]=s("2、Windows或某些没有安装过的linux系统，去")),a("a",h,[n[10]||(n[10]=s("http://www.cmake.org/HTML/Download.htm")),l(e)]),n[12]||(n[12]=s("l 可以下载安装"))]),n[32]||(n[32]=i(`<h3 id="cmake一个helloword" tabindex="-1"><a class="header-anchor" href="#cmake一个helloword"><span>CMake一个HelloWord</span></a></h3><p>1、步骤一，写一个HelloWord</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">main</span><span class="token expression"><span class="token punctuation">.</span>cpp</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot;hello word&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、步骤二，写CMakeLists.txt</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">CMakeLists<span class="token punctuation">.</span>txt</span></span>
<span class="token function">PROJECT</span> <span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
<span class="token function">SET</span><span class="token punctuation">(</span>SRC_LIST main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span>
<span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">&quot;This is BINARY dir &quot;</span> $<span class="token punctuation">{</span>HELLO_BINARY_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">&quot;This is SOURCE dir &quot;</span>$<span class="token punctuation">{</span>HELLO_SOURCE_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello $<span class="token punctuation">{</span>SRC_LIST<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、步骤三、使用cmake，生成makefile文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ cmake <span class="token builtin class-name">.</span> <span class="token comment"># 当前目录用cmake编译</span>

输出：
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span><span class="token comment"># cmake .</span>
CMake Warning <span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token keyword">in</span> CMakeLists.txt:
  Syntax Warning <span class="token keyword">in</span> cmake code at

    /root/cmake/CMakeLists.txt:7:37

  Argument not separated from preceding token by whitespace.
This warning is <span class="token keyword">for</span> project developers.  Use -Wno-dev to suppress it.

-- The C compiler identification is GNU <span class="token number">10.2</span>.1
-- The CXX compiler identification is GNU <span class="token number">10.2</span>.1
-- Check <span class="token keyword">for</span> working C compiler: /usr/bin/cc
-- Check <span class="token keyword">for</span> working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - <span class="token keyword">done</span>
-- Check <span class="token keyword">for</span> working CXX compiler: /usr/bin/c++
-- Check <span class="token keyword">for</span> working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - <span class="token keyword">done</span>
-- This is BINARY <span class="token function">dir</span> /root/cmake
-- This is SOURCE <span class="token function">dir</span> /root/cmake
-- Configuring <span class="token keyword">done</span>
-- Generating <span class="token keyword">done</span>
-- Build files have been written to: /root/cmake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录下就生成了这些文件-CMakeFiles, CMakeCache.txt, cmake_install.cmake 等文件，并且生成了Makefile. 现在不需要理会这些文件的作用，以后你也可以不去理会。最关键的是，它自动生成了Makefile.</p><p>4、步骤4、使用make命令编译</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@localhost cmake<span class="token punctuation">]</span>$ <span class="token function">make</span>
Scanning dependencies of target hello
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Building CXX object CMakeFiles/hello.dir/main.cpp.o
Linking CXX executable hello
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、最终生成了Hello的可执行程序</p><h2 id="【字典】cmakelists常用命令" tabindex="-1"><a class="header-anchor" href="#【字典】cmakelists常用命令"><span>【字典】CMakeLists常用命令</span></a></h2><p>以上一章的HelloWord为例</p><h3 id="项目管理类" tabindex="-1"><a class="header-anchor" href="#项目管理类"><span>项目管理类</span></a></h3><p>一个最简单的demo：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.16</span><span class="token punctuation">)</span>
<span class="token keyword">project</span><span class="token punctuation">(</span>ProjectName1<span class="token punctuation">)</span>
<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">23</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>ppp1 main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="project-指定工程名与语言" tabindex="-1"><a class="header-anchor" href="#project-指定工程名与语言"><span><code>project</code> 指定工程名与语言</span></a></h4><p>可以用来指定工程的名字和支持的语言，默认支持所有语言</p><p>PROJECT (HELLO) 指定了工程的名字，并且支持所有语言—建议</p><p>PROJECT (HELLO CXX) 指定了工程的名字，并且支持语言是C++</p><p>PROJECT (HELLO C CXX) 指定了工程的名字，并且支持语言是C和C++</p><p>该指定隐式定义了两个CMAKE的变量</p><p><code>&lt;projectname&gt;_BINARY_DIR</code>，本例中是 HELLO_BINARY_DIR</p><p><code>&lt;projectname&gt;_SOURCE_DIR</code>，本例中是 HELLO_SOURCE_DIR</p><p>MESSAGE关键字就可以直接使用者两个变量，当前都指向当前的工作目录，后面会讲外部编译</p><p>问题：如果改了工程名，这两个变量名也会改变</p><p>解决：又定义两个预定义变量：PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，这两个变量和HELLO_BINARY_DIR，HELLO_SOURCE_DIR是一致的。所以改了工程名也没有关系</p><h4 id="add-executable-生成可执行文件" tabindex="-1"><a class="header-anchor" href="#add-executable-生成可执行文件"><span><code>add_executable</code> 生成可执行文件</span></a></h4><p>生成可执行文件</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>add_executable<span class="token punctuation">(</span>hello <span class="token variable">$</span><span class="token punctuation">{</span>SRC_LIST<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</p><p>也可以直接写</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>add_executable<span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述例子可以简化的写成</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>PROJECT<span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
add_executable<span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</p><h4 id="add-library-生成静态-动态编译库" tabindex="-1"><a class="header-anchor" href="#add-library-生成静态-动态编译库"><span><code>add_library</code> 生成静态/动态编译库</span></a></h4><p>例如</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>add_library<span class="token punctuation">(</span>TSDB ./TSDB.c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="add-subdirectory-添加子项目" tabindex="-1"><a class="header-anchor" href="#add-subdirectory-添加子项目"><span><code>add_subdirectory</code> 添加子项目</span></a></h4><p>例如</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment"># 添加子项目</span>
add_subdirectory<span class="token punctuation">(</span>src<span class="token punctuation">)</span>
add_subdirectory<span class="token punctuation">(</span>examples<span class="token punctuation">)</span>
add_subdirectory<span class="token punctuation">(</span>tests<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="include-directories-搜索头文件" tabindex="-1"><a class="header-anchor" href="#include-directories-搜索头文件"><span><code>include_directories</code> 搜索头文件</span></a></h4><ul><li><code>include_directories</code>，一般使用</li><li><code>target_include_directories</code>，有时会用</li></ul><p>增加头文件搜索路径，可以用于简化缩短工程内部或系统中的头文件路径</p><p>也可以用于指定在工程的某个外部文件夹中寻找头文件</p><p>例如</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>include_directories<span class="token punctuation">(</span>/usr/<span class="token keyword">include</span>/hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="link-libraries-搜索-链接-库" tabindex="-1"><a class="header-anchor" href="#link-libraries-搜索-链接-库"><span><code>link_libraries</code> 搜索 (链接) 库</span></a></h4><ul><li><code>link_libraries</code></li><li><code>target_link_libraries</code>，一般用的是这个</li></ul><p>例如</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>target_link_libraries<span class="token punctuation">(</span>main libhello.a<span class="token punctuation">)</span> <span class="token comment"># 注意这个只能写在 add_executable 的后面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常用、通用类" tabindex="-1"><a class="header-anchor" href="#常用、通用类"><span>常用、通用类</span></a></h3><h4 id="set-指定变量" tabindex="-1"><a class="header-anchor" href="#set-指定变量"><span><code>set</code> 指定变量</span></a></h4><p>用来显示的指定变量的</p><p>SET(SRC_LIST main.cpp) SRC_LIST变量就包含了main.cpp</p><p>也可以 SET(SRC_LIST main.cpp t1.cpp t2.cpp)</p><h4 id="message-输出自定义信息" tabindex="-1"><a class="header-anchor" href="#message-输出自定义信息"><span><code>message</code> 输出自定义信息</span></a></h4><p>向终端输出用户自定义的信息</p><p>主要包含三种信息：</p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS，输出前缀为—的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul><p>也可以不加这个信息类别，例如：</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># 编译信息</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;Compile Info&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;    Compile Platform&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        Linux&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        Windows&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_SYSTEM_NAME</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;Darwin&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        MacOS&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span>WARNING, <span class="token string">&quot;        Other&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;    Compile ToolChain&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">MINGW</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        MINGW&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">MSVC</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        MSVC&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span>WARNING, <span class="token string">&quot;        Other&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;    Compiler Version&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;MSVC&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        MSVC <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;GNU&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        GCC <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_ID</span><span class="token punctuation">}</span> <span class="token operator">STREQUAL</span> <span class="token string">&quot;Clang&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;        Clang <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">message</span><span class="token punctuation">(</span>WARNING, <span class="token string">&quot;        Other <span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CXX_COMPILER_VERSION</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路径类" tabindex="-1"><a class="header-anchor" href="#路径类"><span>路径类</span></a></h3><h4 id="xxx-source-dir-工程路径、或cmakelists所在路径" tabindex="-1"><a class="header-anchor" href="#xxx-source-dir-工程路径、或cmakelists所在路径"><span><code>XXX_SOURCE_DIR</code> 工程路径、或CMakeLists所在路径</span></a></h4><p><strong>修改</strong>：固定，不可修改</p><p>PROJECT_SOURCE_DIR 或 HELLO_SOURCE_DIR (HELLO是当前项目名)，工程路径，是 “/root/cmake01”</p><h4 id="xxx-binary-dir-执行cmake的路径" tabindex="-1"><a class="header-anchor" href="#xxx-binary-dir-执行cmake的路径"><span><code>XXX_BINARY_DIR</code> 执行cmake的路径</span></a></h4><p><strong>修改</strong>：固定，不可修改</p><p>PROJECT_BINARY_DIR 或 HELLO_BINARY_DIR (HELLO是当前项目名)，编译路径，比如在下面 “外部构建” 的例子中，是 “/root/cmake01/bulid”</p><h4 id="executable-output-path-构建的可执行文件的路径" tabindex="-1"><a class="header-anchor" href="#executable-output-path-构建的可执行文件的路径"><span><code>EXECUTABLE_OUTPUT_PATH</code> 构建的可执行文件的路径</span></a></h4><p><strong>修改</strong>：XXX_OUTPUT_PATH 可以使用 <code>SET</code> 进行设置 重定向</p><h4 id="library-output-path-构建的库文件的路径" tabindex="-1"><a class="header-anchor" href="#library-output-path-构建的库文件的路径"><span><code>LIBRARY_OUTPUT_PATH</code> 构建的库文件的路径</span></a></h4><p><strong>修改</strong>：XXX_OUTPUT_PATH 可以使用 <code>SET</code> 进行设置 重定向</p><h4 id="cmake-install-prefix-cmake路径的前缀" tabindex="-1"><a class="header-anchor" href="#cmake-install-prefix-cmake路径的前缀"><span><code>CMAKE_INSTALL_PREFIX</code> CMake路径的前缀</span></a></h4><p>用处：</p><ul><li><code>CMake Install</code> 命令中，相对路径执行的前缀</li></ul><p><strong>修改</strong>：</p><ul><li><p>默认值：在 /usr/local/</p></li><li><p>CLion默认值及设置：在CLion中可以在设置 &gt; 构建执行部署 &gt; CMake 中看到和设置CMake选项</p><p>默认CMake选项：<code>-G Ninja -DCMAKE_BUILD_TYPE=Debug &quot;-DCMAKE_INSTALL_PREFIX=D:/CLion 2022.2.4/bin/ninja/win/ninja.exe&quot;</code></p><p>可以改这个CMake选项也可以改他下面的缓存变量</p></li><li><p>cmake时设置：cmake -D CMAKE_INSTALL_PREFIX=/usr 在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</p></li><li><p>CMakeLists文件中设置：set(CMAKE_INSTALL_PREFIX &quot;../&quot;)</p></li></ul><h4 id="cmake-include-path-和-cmake-library-path" tabindex="-1"><a class="header-anchor" href="#cmake-include-path-和-cmake-library-path"><span><code>CMAKE_INCLUDE_PATH</code> 和 <code>CMAKE_LIBRARY_PATH</code></span></a></h4><p><strong>修改</strong>：</p><ul><li><p>这两个是环境变量而不是 cmake 变量，cmake中无法修改，但可以在linux的bash中进行设置</p><p>例如使用环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">CMAKE_INCLUDE_PATH</span><span class="token operator">=</span>/usr/include/hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1"><span>其他</span></a></h3><h4 id="set-target-properties" tabindex="-1"><a class="header-anchor" href="#set-target-properties"><span><code>set_target_properties</code></span></a></h4><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><h4 id="install-安装共享库和头文件" tabindex="-1"><a class="header-anchor" href="#install-安装共享库和头文件"><span><code>install</code> 安装共享库和头文件</span></a></h4><h4 id="find-package-寻找库" tabindex="-1"><a class="header-anchor" href="#find-package-寻找库"><span><code>find_package</code> 寻找库</span></a></h4><h4 id="check-header" tabindex="-1"><a class="header-anchor" href="#check-header"><span><code>check_header</code></span></a></h4><p>例如</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token function">check_header</span><span class="token punctuation">(</span><span class="token string">&quot;stdbool.h&quot;</span><span class="token punctuation">)</span>
<span class="token function">check_header</span><span class="token punctuation">(</span><span class="token string">&quot;stdint.h&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="check-function" tabindex="-1"><a class="header-anchor" href="#check-function"><span><code>check_function</code></span></a></h4><p>例如</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token function">check_function</span><span class="token punctuation">(</span><span class="token string">&quot;gettid&quot;</span> <span class="token string">&quot;unistd.h&quot;</span><span class="token punctuation">)</span>
<span class="token function">check_function</span><span class="token punctuation">(</span><span class="token string">&quot;strlcpy&quot;</span> <span class="token string">&quot;string.h&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file-各种文件操作" tabindex="-1"><a class="header-anchor" href="#file-各种文件操作"><span><code>file</code> 各种文件操作</span></a></h4><p>文件操作，根据参数一的不同有多种不同的用法</p><p>例如</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">file</span><span class="token punctuation">(</span>REMOVE_RECURSE <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_BINARY_DIR</span><span class="token punctuation">}</span>/web/<span class="token punctuation">)</span>  	<span class="token comment"># 递归移动?</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>MAKE_DIRECTORY <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_BINARY_DIR</span><span class="token punctuation">}</span>/web/<span class="token punctuation">)</span>  	<span class="token comment"># 创建文件夹</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>COPY <span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/web/release/ DESTINATION <span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_BINARY_DIR</span><span class="token punctuation">}</span>/web/<span class="token punctuation">)</span>  <span class="token comment"># 复制</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE SRCS src/*.cpp src/*.c<span class="token punctuation">)</span>  				<span class="token comment"># 包含文件路径到对应变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="【字典】cmake常用指令" tabindex="-1"><a class="header-anchor" href="#【字典】cmake常用指令"><span>【字典】CMake常用指令</span></a></h2><h3 id="d-cmake-install-prefix" tabindex="-1"><a class="header-anchor" href="#d-cmake-install-prefix"><span>-D CMake_install_prefix</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">-DCMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="d-cmake-build-type" tabindex="-1"><a class="header-anchor" href="#d-cmake-build-type"><span>-D CMake_build_type</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cmake <span class="token parameter variable">-DCMAKE_BUILD_TYPE</span><span class="token operator">=</span>debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门"><span>入门</span></a></h2><h3 id="语法的基本原则" tabindex="-1"><a class="header-anchor" href="#语法的基本原则"><span>语法的基本原则</span></a></h3><ul><li><p>变量使用 <code>\${}</code> 方式取值，但是在 IF 控制语句中是直接使用变量名</p></li><li><p><code>指令(参数 1 参数 2...)</code> 参数使用括弧括起，参数之间使用<strong>空格或分号</strong>分开。 以上面的 ADD_EXECUTABLE 指令为例，如果存在另外一个 func.cpp 源文件</p><p>就要写成：<code>ADD_EXECUTABLE(hello main.cpp func.cpp)</code> 或者 <code>ADD_EXECUTABLE(hello main.cpp;func.cpp)</code></p></li><li><p>指令是<strong>大小写无关</strong>的，参数和变量是大小写相关的。但，推荐你全部使用大写指令（LincZero：我喜欢用小写）</p></li></ul><p>语法注意事项</p><ul><li>SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有<strong>空格</strong>，就必须要加<strong>双引号</strong></li><li>ADD_EXECUTABLE(hello main) 后缀可以不写，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h3 id="内部构建和外部构建" tabindex="-1"><a class="header-anchor" href="#内部构建和外部构建"><span>内部构建和外部构建</span></a></h3><ul><li>上述例子就是内部构建，他生产的临时文件特别多，不方便清理</li><li>外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</li></ul><p>外部构建方式举例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 例子目录，CMakeLists.txt和上面例子一致</span>
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span>$ <span class="token builtin class-name">pwd</span>
/root/cmake
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span>$ ll
total <span class="token number">8</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">198</span> Dec <span class="token number">28</span> <span class="token number">20</span>:59 CMakeLists.txt
-rw-r--r--. <span class="token number">1</span> root root  <span class="token number">76</span> Dec <span class="token number">28</span> 00:18 main.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>建立一个build目录，可以在任何地方，建议在当前目录下</li><li>进入build，运行cmake .. 当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</li><li>在build目录下，运行make来构建工程</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> build
$ <span class="token builtin class-name">cd</span> build/
$ cmake <span class="token punctuation">..</span> <span class="token comment"># 从上一级目录构建</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意外部构建的两个变量</p><ol><li>HELLO_SOURCE_DIR 还是工程路径</li><li>HELLO_BINARY_DIR 编译路径 也就是 /root/cmake/bulid</li></ol><h2 id="多cmakelists管理-——-让hello-world看起来更像一个工程" tabindex="-1"><a class="header-anchor" href="#多cmakelists管理-——-让hello-world看起来更像一个工程"><span>多CMakeLists管理 —— 让Hello World看起来更像一个工程</span></a></h2>`,116)),a("ul",null,[n[16]||(n[16]=a("li",null,"为工程添加一个子目录 src，用来放置工程源代码",-1)),n[17]||(n[17]=a("li",null,"添加一个子目录 doc，用来放置这个工程的文档 hello.txt",-1)),n[18]||(n[18]=a("li",null,"在工程目录添加文本文件 COPYRIGHT, README",-1)),a("li",null,[n[14]||(n[14]=s("在工程目录添加一个 ")),a("a",g,[n[13]||(n[13]=s("runhello.sh")),l(e)]),n[15]||(n[15]=s(" 脚本，用来调用 hello 二进制"))]),n[19]||(n[19]=a("li",null,"将构建后的目标文件放入构建目录的 bin 子目录",-1)),n[20]||(n[20]=a("li",null,"将 doc 目录 的内容以及 COPYRIGHT/README 安装到/usr/share/doc/cmake/",-1))]),n[33]||(n[33]=i(`<h3 id="将目标文件放入构建目录的-bin-子目录" tabindex="-1"><a class="header-anchor" href="#将目标文件放入构建目录的-bin-子目录"><span>将目标文件放入构建目录的 bin 子目录</span></a></h3><p>每个目录下都要有一个CMakeLists.txt说明</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span>$ tree
<span class="token builtin class-name">.</span>
├── build
├── CMakeLists.txt
└── src
    ├── CMakeLists.txt
    └── main.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外层 CMakeLists.txt</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>project<span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
add_subdirectory<span class="token punctuation">(</span>src bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>src下的 CMakeLists.txt</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>add_executable<span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="add-subdirectory-添加子项目-1" tabindex="-1"><a class="header-anchor" href="#add-subdirectory-添加子项目-1"><span><code>add_subdirectory</code> 添加子项目</span></a></h3><p>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><ul><li><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p></li><li><p>EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</p></li><li><p>ADD_SUBDIRECTORY(src bin)</p><p>将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录</p><p>如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录</p></li></ul><h3 id="用-set-更改二进制的保存路径" tabindex="-1"><a class="header-anchor" href="#用-set-更改二进制的保存路径"><span>用 SET 更改二进制的保存路径</span></a></h3><p>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>SET<span class="token punctuation">(</span>EXECUTABLE_OUTPUT_PATH <span class="token variable">$</span><span class="token punctuation">{</span>PROJECT_BINARY_DIR<span class="token punctuation">}</span>/bin<span class="token punctuation">)</span>
SET<span class="token punctuation">(</span>LIBRARY_OUTPUT_PATH <span class="token variable">$</span><span class="token punctuation">{</span>PROJECT_BINARY_DIR<span class="token punctuation">}</span>/lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>思考：加载哪个CMakeLists.txt当中</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h2 id="install-安装" tabindex="-1"><a class="header-anchor" href="#install-安装"><span>Install 安装</span></a></h2><ul><li>一种是从代码编译后直接 make install 安装</li><li>一种是打包时的指定 目录安装。 <ul><li>简单的可以这样指定目录：make install DESTDIR=/tmp/test</li><li>稍微复杂一点可以这样指定目录：./configure –prefix=/usr</li></ul></li></ul><h3 id="如何安装helloword" tabindex="-1"><a class="header-anchor" href="#如何安装helloword"><span>如何安装HelloWord</span></a></h3><p>使用CMAKE一个新的指令：INSTALL</p><p>INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</p><p>使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 目录树结构
<span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span>$ tree
<span class="token builtin class-name">.</span>
├── build
├── CMakeLists.txt
├── COPYRIGHT
├── doc
│   └── hello.txt
├── README
├── runhello.sh
└── src
    ├── CMakeLists.txt
    └── main.cpp

<span class="token number">3</span> directories, <span class="token number">7</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-安装-文件copyright和readme" tabindex="-1"><a class="header-anchor" href="#_1-安装-文件copyright和readme"><span>(1) 安装 文件COPYRIGHT和README</span></a></h3><p>这里安装三个文件到指定路径</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * @param FILES后面 文件
 * @param DESTINATION后
 *   1. 写绝对路径
 *   2. 可以写相对路径，相对路径实际路径是：\${CMAKE_INSTALL_PREFIX}/&lt;DESTINATION 定义的路径&gt;
 */</span>
<span class="token function">install</span><span class="token punctuation">(</span>FILES COPYRIGHT README DESTINATION share<span class="token operator">/</span>doc<span class="token operator">/</span>cmake<span class="token operator">/</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMAKE_INSTALL_PREFIX 问题</p><ul><li>默认值：在 /usr/local/</li><li>cmake时设置：cmake -DCMAKE_INSTALL_PREFIX=/usr 在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</li><li>CMakeLists文件中设置：set(CMAKE_INSTALL_PREFIX &quot;../&quot;)</li></ul><h3 id="_2-安装脚本-runhello-sh" tabindex="-1"><a class="header-anchor" href="#_2-安装脚本-runhello-sh"><span>(2) 安装脚本 runhello.sh</span></a></h3><p>PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>INSTALL<span class="token punctuation">(</span>PROGRAMS runhello.sh DESTINATION bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明：实际安装到的是 /usr/bin</p><h3 id="_3-安装-doc-中的-hello-txt" tabindex="-1"><a class="header-anchor" href="#_3-安装-doc-中的-hello-txt"><span>(3) 安装 doc 中的 hello.txt</span></a></h3><ul><li><p>一、是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</p></li><li><p>二、是直接在工程目录通过</p><p>INSTALL(DIRECTORY doc/ DESTINATION share/doc/cmake)</p></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc/有很大的区别</p><p>目录名不以/结尾：这个目录将被安装为目标路径下的</p><p>目录名以/结尾：将这个目录中的内容安装到目标路径</p><h3 id="安装过程" tabindex="-1"><a class="header-anchor" href="#安装过程"><span>安装过程</span></a></h3><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>cmake <span class="token punctuation">..</span>
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终成果</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">make</span> <span class="token function">install</span>
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target hello
Install the project<span class="token punctuation">..</span>.
-- Install configuration: <span class="token string">&quot;&quot;</span>
-- Installing: /usr/local/share/doc/cmake/COPYRIGHT
-- Installing: /usr/local/share/doc/cmake/README
-- Installing: /usr/local/bin/runhello.sh
-- Installing: /usr/local/share/doc/cmake
-- Installing: /usr/local/share/doc/cmake/hello.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态库和动态库的构建" tabindex="-1"><a class="header-anchor" href="#静态库和动态库的构建"><span>静态库和动态库的构建</span></a></h2><p>任务：</p><p>１，建立一个静态库和动态库，提供 HelloFunc 函数供其他程序编程使用，HelloFunc 向终端输出 Hello World 字符串。</p><p>２，安装头文件与共享库。</p><p>静态库和动态库的区别</p><ul><li><p>扩展名</p><ul><li>静态库：一般为“.a”或“.lib”</li><li>动态库：一般为“.so”或“.dll”</li></ul></li><li><p>是否编译入可执行文件</p><ul><li><p>静态库：是。静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</p></li><li><p>动态库：否。在编译时不会放到连接的目标程序中，即可执行文件无法单独运行</p></li></ul></li></ul><h3 id="构建实例" tabindex="-1"><a class="header-anchor" href="#构建实例"><span>构建实例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost cmake2<span class="token punctuation">]</span>$ tree
<span class="token builtin class-name">.</span>
├── build
├── CMakeLists.txt
└── lib
    ├── CMakeLists.txt
    ├── hello.cpp
    └── hello.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.h中的内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HELLO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Hello_H</span></span>

<span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>hello.cpp中的内容</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目中的cmake内容</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>PROJECT<span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>
ADD_SUBDIRECTORY<span class="token punctuation">(</span>lib bin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>lib中CMakeLists.txt中的内容</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>SET<span class="token punctuation">(</span>LIBHELLO_SRC hello.cpp<span class="token punctuation">)</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello SHARED <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-library" tabindex="-1"><a class="header-anchor" href="#add-library"><span>ADD_LIBRARY</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * @param arg1 hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so
 * @param arg2 SHARED，动态库    STATIC，静态库
 * @param arg3 \${LIBHELLO_SRC} ：源文件
 */</span>
<span class="token function">add_library</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同时构建静态和动态库" tabindex="-1"><a class="header-anchor" href="#同时构建静态和动态库"><span>同时构建静态和动态库</span></a></h3><blockquote><h4 id="同名冲突问题" tabindex="-1"><a class="header-anchor" href="#同名冲突问题"><span>同名冲突问题</span></a></h4></blockquote><p>一般来说，同名的话，只会生成一个</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment"># 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello SHARED <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello STATIC <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="不同名解决冲突" tabindex="-1"><a class="header-anchor" href="#不同名解决冲突"><span>不同名解决冲突</span></a></h4></blockquote><p>一个解决方法是让他们不同名，这样比较简单粗暴</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment"># 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello SHARED <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello_static STATIC <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="set-target-properties-设置输出名以解决冲突" tabindex="-1"><a class="header-anchor" href="#set-target-properties-设置输出名以解决冲突"><span><code>set_target_properties</code> 设置输出名以解决冲突</span></a></h4></blockquote><p>另一种解决方法是使用 <code>SET_TARGET_PROPERTIES</code>，这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><p>同时构建静态和动态库</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>SET<span class="token punctuation">(</span>LIBHELLO_SRC hello.cpp<span class="token punctuation">)</span>

<span class="token comment"># 静态库</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello_static STATIC <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 这里的名字依然是不弄冲突，但下面可以设置输出名来让他们输出名相同</span>
<span class="token comment"># 静态库 - 设置一些属性</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello_static PROPERTIES  OUTPUT_NAME <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1<span class="token punctuation">)</span>

<span class="token comment"># 动态库</span>
ADD_LIBRARY<span class="token punctuation">(</span>hello SHARED <span class="token variable">$</span><span class="token punctuation">{</span>LIBHELLO_SRC<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 动态库 - 设置一些属性</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello PROPERTIES  OUTPUT_NAME <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello PROPERTIES CLEAN_DIRECT_OUTPUT 1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见设置属性</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment"># 输出名，OUTPUT_NAME，对hello_static的重名为hello</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello_static PROPERTIES  OUTPUT_NAME <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 清理同名库，CLEAN_DIRECT_OUTPUT</span>
<span class="token comment"># cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello_static PROPERTIES CLEAN_DIRECT_OUTPUT 1<span class="token punctuation">)</span>

<span class="token comment"># 版本号，VERSION</span>
SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello PROPERTIES VERSION 1.2 SOVERSION 1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态库版本号" tabindex="-1"><a class="header-anchor" href="#动态库版本号"><span>动态库版本号</span></a></h3><p>一般动态库都有一个版本号的关联，静态库没有也不需要</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span>
libhello<span class="token punctuation">.</span>so <span class="token operator">-&gt;</span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span>
libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-&gt;</span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CMakeLists.txt 插入如下</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>SET_TARGET_PROPERTIES<span class="token punctuation">(</span>hello PROPERTIES VERSION 1.2 SOVERSION 1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p><h3 id="install-安装共享库和头文件-1" tabindex="-1"><a class="header-anchor" href="#install-安装共享库和头文件-1"><span><code>install</code> 安装共享库和头文件</span></a></h3><p>本例中我们将 hello 的共享库安装到 <code>&lt;prefix&gt;/lib</code> 目录，</p><p>将 hello.h 安装到 <code>&lt;prefix&gt;/include/hello</code> 目录</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code><span class="token comment"># 头文件，FILES</span>
<span class="token comment"># 文件放到该目录下</span>
install<span class="token punctuation">(</span>FILES hello.h DESTINATION <span class="token keyword">include</span>/hello<span class="token punctuation">)</span>

<span class="token comment"># 二进制，静态库，动态库安装，TARGETS</span>
<span class="token comment"># ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span>
install<span class="token punctuation">(</span>TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * arg1 arg2 &quot;arg3 DESTINATION arg4&quot;xn
 * @param arg1
 *     TARGETS，二进制，静态库，动态库安装
 *     FILES，单纯的文件复制，如头文件
 * @param args2 要被复制文件
 * @param arg3
 *     ARCHIVE，特指静态库
 *     LIBRARY，特指动态库
 *     RUNTIME，特指可执行目标二进制
 * @param arg4 要被复制到的路径，前缀是 \`-DCMAKE_INSTALL_PREFIX\` 的值 (可设置)
 */</span>
<span class="token function">install</span><span class="token punctuation">(</span>
    TARGETS
    hello hello_static
    LIBRARY DESTINATION lib # 这里表示
    ARCHIVE DESTINATION lib
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>安装的时候，指定一下路径，放到系统下：<code>cmake -D CMAKE_INSTALL_PREFIX=/usr ..</code>（这里的-D后面空格可加可不加）</p><h3 id="使用外部共享库和头文件" tabindex="-1"><a class="header-anchor" href="#使用外部共享库和头文件"><span>使用外部共享库和头文件</span></a></h3><p>准备工作，新建一个目录来使用外部共享库和头文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@MiWiFi-R4CM-srv cmake3<span class="token punctuation">]</span>$ tree
<span class="token builtin class-name">.</span>
├── build
├── CMakeLists.txt
└── src
    ├── CMakeLists.txt
    └── main.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hello.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结</p><ul><li>install在 /usr/include/ 后，直接include就能找到头文件</li><li>install在 /usr/lib/ (也可能是/usr/lib64/或/usr/lib32/) 后，直接在CMakeLists中加入 <code>target_link_libraries(main libhello.a)</code> 就能找到库文件</li></ul><h3 id="常见bug解决" tabindex="-1"><a class="header-anchor" href="#常见bug解决"><span>常见bug解决</span></a></h3><blockquote><h4 id="解决-make后头文件找不到的问题" tabindex="-1"><a class="header-anchor" href="#解决-make后头文件找不到的问题"><span>解决：make后头文件找不到的问题</span></a></h4></blockquote><p>PS：include &lt;hello/hello.h&gt; 这样include是可以，这么做的话，就没啥好讲的了</p><p>关键字：INCLUDE_DIRECTORIES 这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</p><p>在CMakeLists.txt中加入头文件搜索路径</p><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>include_directories<span class="token punctuation">(</span>/usr/<span class="token keyword">include</span>/hello<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>感谢：网友：zcc720的提醒</p><p>另一个解决方案是：</p><blockquote><p>我们上面例子中使用了绝对路径 INCLUDE_DIRECTORIES(/usr/include/hello) 来指明include路径的位置</p><p>我们还可以使用另外一种方式，使用环境变量 export CMAKE_INCLUDE_PATH=/usr/include/hello</p></blockquote><blockquote><h4 id="解决-找到引用的函数问题" tabindex="-1"><a class="header-anchor" href="#解决-找到引用的函数问题"><span>解决：找到引用的函数问题</span></a></h4></blockquote><p>报错信息：undefined reference to \`HelloFunc()&#39;</p><p>关键字：LINK_DIRECTORIES 添加非标准的共享库搜索路径</p><p>指定第三方库所在路径，LINK_DIRECTORIES(/home/myproject/libs)</p><p>关键字：TARGET_LINK_LIBRARIES 添加需要链接的共享库</p><p>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</p><p>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</p><p>查看main的链接情况</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@MiWiFi-R4CM-srv bin<span class="token punctuation">]</span>$ ldd main 
	linux-vdso.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>0x00007ffedfda4000<span class="token punctuation">)</span>
	libhello.so <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libhello.so <span class="token punctuation">(</span>0x00007f41c0d8f000<span class="token punctuation">)</span>
	libstdc++.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libstdc++.so.6 <span class="token punctuation">(</span>0x00007f41c0874000<span class="token punctuation">)</span>
	libm.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libm.so.6 <span class="token punctuation">(</span>0x00007f41c0572000<span class="token punctuation">)</span>
	libgcc_s.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libgcc_s.so.1 <span class="token punctuation">(</span>0x00007f41c035c000<span class="token punctuation">)</span>
	libc.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libc.so.6 <span class="token punctuation">(</span>0x00007f41bff8e000<span class="token punctuation">)</span>
	/lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007f41c0b7c000<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链接静态库</p><p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p><h2 id="技巧" tabindex="-1"><a class="header-anchor" href="#技巧"><span>技巧</span></a></h2><h3 id="头文件递归包含" tabindex="-1"><a class="header-anchor" href="#头文件递归包含"><span>头文件递归包含</span></a></h3><p>这里本质上是递归调用：include_directories</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># 递归包含头文件的函数。本质上是递归调用：include_directories</span>
<span class="token keyword">function</span><span class="token punctuation">(</span>include_sub_directories_recursively root_dir<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_DIRECTORY <span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span><span class="token punctuation">)</span>               <span class="token comment"># 当前路径是一个目录吗，是的话就加入到包含目录</span>
        <span class="token comment">#        if (\${root_dir} MATCHES &quot;include&quot;)</span>
        <span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">&quot;include dir: &quot;</span> <span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token comment">#        endif()</span>
    <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">file</span><span class="token punctuation">(</span>GLOB ALL_SUB RELATIVE <span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span> <span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span>/*<span class="token punctuation">)</span> <span class="token comment"># 获得当前目录下的所有文件，让如ALL_SUB列表中</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span>sub <span class="token punctuation">\${</span>ALL_SUB<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_DIRECTORY <span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span>/<span class="token punctuation">\${</span>sub<span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token function">include_sub_directories_recursively</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>root_dir<span class="token punctuation">}</span>/<span class="token punctuation">\${</span>sub<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 对子目录递归调用，包含</span>
        <span class="token keyword">endif</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">endforeach</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">endfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 将目录下的所有头文件包含进PROJECT_BINARY_DIR中</span>
<span class="token function">include_sub_directories_recursively</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">}</span>/src<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="源文件递归包含" tabindex="-1"><a class="header-anchor" href="#源文件递归包含"><span>源文件递归包含</span></a></h3><p>这里本质上是将对应的cpp/c文件全部存储在一个变量里</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token comment"># 将目录下的所有源文件包含进SRCS中</span>
<span class="token keyword">file</span><span class="token punctuation">(</span>GLOB_RECURSE SRCS src/*.cpp src/*.c<span class="token punctuation">)</span>
<span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">\${</span><span class="token variable">PROJECT_NAME</span><span class="token punctuation">}</span> main.cpp <span class="token punctuation">\${</span>SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,121))])}const C=t(r,[["render",E],["__file","CMakeLists.txt.html.vue"]]),I=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/01.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/CMakeLists.txt.html","title":"构建管理","lang":"zh-CN","frontmatter":{"create_time":"20230502 16:44","description":"构建管理 目录 CMakeLists.txt LincZero：在这一篇笔记开始之前，首先声明：我个人更倾向与使用小写的CMakeLists指令，所以笔记中会以小写为主 各语言的关键管理器 CMakeLists.txt和Makefile都是用来管理和自动化编译、构建C/C++项目的文件。它们可以指定编译器设置、链接库依赖和构建目标等信息。 Cpp CM...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/01.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/CMakeLists.txt.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"构建管理"}],["meta",{"property":"og:description","content":"构建管理 目录 CMakeLists.txt LincZero：在这一篇笔记开始之前，首先声明：我个人更倾向与使用小写的CMakeLists指令，所以笔记中会以小写为主 各语言的关键管理器 CMakeLists.txt和Makefile都是用来管理和自动化编译、构建C/C++项目的文件。它们可以指定编译器设置、链接库依赖和构建目标等信息。 Cpp CM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"构建管理","slug":"构建管理","link":"#构建管理","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"CMakeLists.txt","slug":"cmakelists-txt","link":"#cmakelists-txt","children":[{"level":2,"title":"各语言的关键管理器","slug":"各语言的关键管理器","link":"#各语言的关键管理器","children":[]},{"level":2,"title":"0","slug":"_0","link":"#_0","children":[{"level":3,"title":"单个源文件","slug":"单个源文件","link":"#单个源文件","children":[]},{"level":3,"title":"同一目录，多个源文件","slug":"同一目录-多个源文件","link":"#同一目录-多个源文件","children":[]},{"level":3,"title":"多个目录，多个源文件","slug":"多个目录-多个源文件","link":"#多个目录-多个源文件","children":[]},{"level":3,"title":"自定义编译选项","slug":"自定义编译选项","link":"#自定义编译选项","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"INSTALL与COPY","slug":"install与copy","link":"#install与copy","children":[]},{"level":3,"title":"CMake构建系统阶段","slug":"cmake构建系统阶段","link":"#cmake构建系统阶段","children":[]},{"level":3,"title":"CLion执行Install","slug":"clion执行install","link":"#clion执行install","children":[{"level":4,"title":"cmake install命令","slug":"cmake-install命令","link":"#cmake-install命令","children":[]},{"level":4,"title":"install中的findPackage","slug":"install中的findpackage","link":"#install中的findpackage","children":[]},{"level":4,"title":"install中的configure_file","slug":"install中的configure-file","link":"#install中的configure-file","children":[]},{"level":4,"title":"cmake install文件demo","slug":"cmake-install文件demo","link":"#cmake-install文件demo","children":[]}]}]},{"level":2,"title":"实战经验 - 多层CMakeLists","slug":"实战经验-多层cmakelists","link":"#实战经验-多层cmakelists","children":[]}]},{"level":1,"title":"系统教程","slug":"系统教程","link":"#系统教程","children":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":3,"title":"CMake安装","slug":"cmake安装","link":"#cmake安装","children":[]},{"level":3,"title":"CMake一个HelloWord","slug":"cmake一个helloword","link":"#cmake一个helloword","children":[]}]},{"level":2,"title":"【字典】CMakeLists常用命令","slug":"【字典】cmakelists常用命令","link":"#【字典】cmakelists常用命令","children":[{"level":3,"title":"项目管理类","slug":"项目管理类","link":"#项目管理类","children":[{"level":4,"title":"project 指定工程名与语言","slug":"project-指定工程名与语言","link":"#project-指定工程名与语言","children":[]},{"level":4,"title":"add_executable 生成可执行文件","slug":"add-executable-生成可执行文件","link":"#add-executable-生成可执行文件","children":[]},{"level":4,"title":"add_library 生成静态/动态编译库","slug":"add-library-生成静态-动态编译库","link":"#add-library-生成静态-动态编译库","children":[]},{"level":4,"title":"add_subdirectory 添加子项目","slug":"add-subdirectory-添加子项目","link":"#add-subdirectory-添加子项目","children":[]},{"level":4,"title":"include_directories 搜索头文件","slug":"include-directories-搜索头文件","link":"#include-directories-搜索头文件","children":[]},{"level":4,"title":"link_libraries 搜索 (链接) 库","slug":"link-libraries-搜索-链接-库","link":"#link-libraries-搜索-链接-库","children":[]}]},{"level":3,"title":"常用、通用类","slug":"常用、通用类","link":"#常用、通用类","children":[{"level":4,"title":"set 指定变量","slug":"set-指定变量","link":"#set-指定变量","children":[]},{"level":4,"title":"message 输出自定义信息","slug":"message-输出自定义信息","link":"#message-输出自定义信息","children":[]}]},{"level":3,"title":"路径类","slug":"路径类","link":"#路径类","children":[{"level":4,"title":"XXX_SOURCE_DIR 工程路径、或CMakeLists所在路径","slug":"xxx-source-dir-工程路径、或cmakelists所在路径","link":"#xxx-source-dir-工程路径、或cmakelists所在路径","children":[]},{"level":4,"title":"XXX_BINARY_DIR 执行cmake的路径","slug":"xxx-binary-dir-执行cmake的路径","link":"#xxx-binary-dir-执行cmake的路径","children":[]},{"level":4,"title":"EXECUTABLE_OUTPUT_PATH 构建的可执行文件的路径","slug":"executable-output-path-构建的可执行文件的路径","link":"#executable-output-path-构建的可执行文件的路径","children":[]},{"level":4,"title":"LIBRARY_OUTPUT_PATH 构建的库文件的路径","slug":"library-output-path-构建的库文件的路径","link":"#library-output-path-构建的库文件的路径","children":[]},{"level":4,"title":"CMAKE_INSTALL_PREFIX CMake路径的前缀","slug":"cmake-install-prefix-cmake路径的前缀","link":"#cmake-install-prefix-cmake路径的前缀","children":[]},{"level":4,"title":"CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH","slug":"cmake-include-path-和-cmake-library-path","link":"#cmake-include-path-和-cmake-library-path","children":[]}]},{"level":3,"title":"其他","slug":"其他-1","link":"#其他-1","children":[{"level":4,"title":"set_target_properties","slug":"set-target-properties","link":"#set-target-properties","children":[]},{"level":4,"title":"install 安装共享库和头文件","slug":"install-安装共享库和头文件","link":"#install-安装共享库和头文件","children":[]},{"level":4,"title":"find_package 寻找库","slug":"find-package-寻找库","link":"#find-package-寻找库","children":[]},{"level":4,"title":"check_header","slug":"check-header","link":"#check-header","children":[]},{"level":4,"title":"check_function","slug":"check-function","link":"#check-function","children":[]},{"level":4,"title":"file 各种文件操作","slug":"file-各种文件操作","link":"#file-各种文件操作","children":[]}]}]},{"level":2,"title":"【字典】CMake常用指令","slug":"【字典】cmake常用指令","link":"#【字典】cmake常用指令","children":[{"level":3,"title":"-D CMake_install_prefix","slug":"d-cmake-install-prefix","link":"#d-cmake-install-prefix","children":[]},{"level":3,"title":"-D CMake_build_type","slug":"d-cmake-build-type","link":"#d-cmake-build-type","children":[]}]},{"level":2,"title":"入门","slug":"入门","link":"#入门","children":[{"level":3,"title":"语法的基本原则","slug":"语法的基本原则","link":"#语法的基本原则","children":[]},{"level":3,"title":"内部构建和外部构建","slug":"内部构建和外部构建","link":"#内部构建和外部构建","children":[]}]},{"level":2,"title":"多CMakeLists管理 —— 让Hello World看起来更像一个工程","slug":"多cmakelists管理-——-让hello-world看起来更像一个工程","link":"#多cmakelists管理-——-让hello-world看起来更像一个工程","children":[{"level":3,"title":"将目标文件放入构建目录的 bin 子目录","slug":"将目标文件放入构建目录的-bin-子目录","link":"#将目标文件放入构建目录的-bin-子目录","children":[]},{"level":3,"title":"add_subdirectory 添加子项目","slug":"add-subdirectory-添加子项目-1","link":"#add-subdirectory-添加子项目-1","children":[]},{"level":3,"title":"用 SET 更改二进制的保存路径","slug":"用-set-更改二进制的保存路径","link":"#用-set-更改二进制的保存路径","children":[]}]},{"level":2,"title":"Install 安装","slug":"install-安装","link":"#install-安装","children":[{"level":3,"title":"如何安装HelloWord","slug":"如何安装helloword","link":"#如何安装helloword","children":[]},{"level":3,"title":"(1) 安装 文件COPYRIGHT和README","slug":"_1-安装-文件copyright和readme","link":"#_1-安装-文件copyright和readme","children":[]},{"level":3,"title":"(2) 安装脚本 runhello.sh","slug":"_2-安装脚本-runhello-sh","link":"#_2-安装脚本-runhello-sh","children":[]},{"level":3,"title":"(3) 安装 doc 中的 hello.txt","slug":"_3-安装-doc-中的-hello-txt","link":"#_3-安装-doc-中的-hello-txt","children":[]},{"level":3,"title":"安装过程","slug":"安装过程","link":"#安装过程","children":[]}]},{"level":2,"title":"静态库和动态库的构建","slug":"静态库和动态库的构建","link":"#静态库和动态库的构建","children":[{"level":3,"title":"构建实例","slug":"构建实例","link":"#构建实例","children":[]},{"level":3,"title":"ADD_LIBRARY","slug":"add-library","link":"#add-library","children":[]},{"level":3,"title":"同时构建静态和动态库","slug":"同时构建静态和动态库","link":"#同时构建静态和动态库","children":[]},{"level":3,"title":"动态库版本号","slug":"动态库版本号","link":"#动态库版本号","children":[]},{"level":3,"title":"install 安装共享库和头文件","slug":"install-安装共享库和头文件-1","link":"#install-安装共享库和头文件-1","children":[]},{"level":3,"title":"使用外部共享库和头文件","slug":"使用外部共享库和头文件","link":"#使用外部共享库和头文件","children":[]},{"level":3,"title":"常见bug解决","slug":"常见bug解决","link":"#常见bug解决","children":[]}]},{"level":2,"title":"技巧","slug":"技巧","link":"#技巧","children":[{"level":3,"title":"头文件递归包含","slug":"头文件递归包含","link":"#头文件递归包含","children":[]},{"level":3,"title":"源文件递归包含","slug":"源文件递归包含","link":"#源文件递归包含","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":23.06,"words":6919},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/03. 多项目管理/01. 多文件构建系统/CMakeLists.txt.md","excerpt":"\\n<h1>目录</h1>\\n<h1>CMakeLists.txt</h1>\\n<p>LincZero：在这一篇笔记开始之前，首先声明：我个人更倾向与使用小写的CMakeLists指令，所以笔记中会以小写为主</p>\\n<h2>各语言的关键管理器</h2>\\n<p>CMakeLists.txt和Makefile都是用来管理和自动化编译、构建C/C++项目的文件。它们可以指定编译器设置、链接库依赖和构建目标等信息。</p>\\n<ul>\\n<li>\\n<p>Cpp</p>\\n<ul>\\n<li>\\n<p><code>CMakeLists.txt</code>：这是CMake构建系统用的配置文件。CMake是一个跨平台的自动化建构系统，可以产生 Makefile 或其他构建工具所需的配置文件，以在多种平台上构建项目。</p>\\n</li>\\n<li>\\n<p><code>Makefile</code>：这是GNU Make的配置文件。GNU Make是一个普遍用于自动化构建的工具，可以自动决定哪些文件需要被重新编译，哪些文件需要被重新链接，并自动处理这些任务。</p>\\n</li>\\n<li>\\n<p>其他：QT的<code>.pro</code>，其实本质上也会生成make文件，可以使用QMake/CMake</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>Python：在Python中使用<code>setup.py</code>文件，用于管理项目的包依赖和构建过程。</p>\\n</li>\\n<li>\\n<p>Node.js/JavaScript：使用<code>package.json</code>文件，管理项目的模块依赖、运行脚本和项目元数据等</p>\\n</li>\\n<li>\\n<p>Java：使用<code>pom.xml</code>（Maven）或 <code>build.gradle</code>（Gradle）文件，进行项目构建和依赖管理</p>\\n</li>\\n<li>\\n<p>Ruby：使用<code>Gemfile</code>（Bundler），进行依赖管理和构建Ruby项目</p>\\n</li>\\n<li>\\n<p>.NET/C#: 使用<code>.csproj</code>、<code>.vbproj</code>或者<code>.fsproj</code>文件，用于指定项目设置、依赖和构建过程</p>\\n</li>\\n</ul>","autoDesc":true}');export{C as comp,I as data};
