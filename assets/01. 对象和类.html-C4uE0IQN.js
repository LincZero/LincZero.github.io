import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,a as e}from"./app-9z1y9ucS.js";const l={},i=e(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="对象和类" tabindex="-1"><a class="header-anchor" href="#对象和类"><span>对象和类</span></a></h1><h2 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h2><h3 id="基于对象、基于类" tabindex="-1"><a class="header-anchor" href="#基于对象、基于类"><span>基于对象、基于类</span></a></h3><ul><li>基于对象的面向对象语言（<em>object-based</em>）：JavaScript</li><li>基于 类 的面向对象语言：C++、C#、Java、Simula、Smalltalk</li></ul><h3 id="外壳类" tabindex="-1"><a class="header-anchor" href="#外壳类"><span>外壳类</span></a></h3><ul><li>用Java编写的所有代码都位于某个类的内部（包括main函数）</li><li>而C/C++、Python可以有代码在外面</li></ul><h3 id="对象的写法" tabindex="-1"><a class="header-anchor" href="#对象的写法"><span>对象的写法</span></a></h3><ul><li><p><code>C</code>：不是面向对象语言，没有类，但可用结构模拟</p><ul><li><p>举例：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">inflatable</span> <span class="token punctuation">{</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">float</span> volume<span class="token punctuation">;</span><span class="token punctuation">}</span>
inflatable guest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;Ben&#39;</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>Python</code></p><ul><li><p>举例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 构造函数</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

my_dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&#39;willie&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>  <span class="token comment"># 使用</span>
<span class="token comment"># 句点运算符  # 访问类成员/方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>C++</code></p><ul><li><p>举例：</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>class Dog // 声明
{
    private:
    	char name[50];
        int age;
    public:
        Dog (char *, int); // 构造函数
}

Dog::Dog(char * name1, int age1) // 实现
{
    name = name1;
    age = age1;
}

my_dog = Dog(&#39;willie&#39;, 6); // 使用
// 句点运算符  // 访问类成员/方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>Java</code></p><ul><li><p>举例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstSample</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment">// 可以打psvm+tab来自动生成。公共类的main方法</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;We will not use &#39;Hello, World!&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>JavaScript</code>：js的对象概念有所不同：万物皆对象</p></li></ul><h3 id="区别概括" tabindex="-1"><a class="header-anchor" href="#区别概括"><span>区别概括</span></a></h3><ul><li>类的设计不同 <ul><li><code>Python</code>：需分离类文件、客户代码 在不需要分离的情况下，两者可写在一起</li><li><code>C++</code>：需分离类的头文件、类的实现代码、客户代码 在不需要分离的情况下，三者可写在一起</li><li>区别原理：<code>C++</code>不能像<code>Python</code>那样合并类的头文件和实现代码 <ul><li>一来：Python本身就不需要声明头文件 （如果只是为了查看用法，python的<code>dir()</code>和<code>help()</code>方法更方便，而且<code>help()</code>的第一行一般就是类似于原型的声明）</li><li>二来：若是合并，则多个文件引用该类库时，会违反单一定义原则。而Python则没有单一定义的限制</li></ul></li></ul></li><li>构造函数不同 <ul><li><code>Python</code>：使用名为<code>__init__</code>的函数作为构造函数</li><li><code>C++、Java</code>：使用与类名同名的函数作为构造函数</li></ul></li><li>类实例的引用 <ul><li><code>Python</code>（更直观） <ul><li>定义函数时：需要显示标注接受<code>self</code>变量</li><li>引用实例成员时：使用<code>self</code>和句点运算符</li><li>引用实例本身时：使用<code>self</code></li><li>调用函数时：不显示传递实例自身</li></ul></li><li><code>C++</code><ul><li>定义函数时：不需要显示标注接受自身</li><li>引用实例成员时：无需借助<code>self</code></li><li>引用实例本身时：需要借助<code>this</code>指针</li><li>调用函数时：不显示传递实例自身，但可以通过后置类型来标明自身不被更改，如<code>Dog::fn(Dog dog) const</code></li></ul></li></ul></li><li>公有 or 私有 <ul><li><code>C</code>：结构成员默认值为<strong>公有</strong></li><li><code>Python</code>：类默认的成员方法和数据成员均<strong>公有</strong></li><li><code>C++</code>：类默认的成员方法和数据成员均<strong>私有</strong></li></ul></li></ul><h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载"><span>运算符重载</span></a></h3><p>运算符重载</p><ul><li>Java没有提供运算符重载功能。程序员无法重定义+和*运算符，使其应用于BigInteger类的add和multiply运算</li></ul><h3 id="对象指针-java的对象实例本质是指针" tabindex="-1"><a class="header-anchor" href="#对象指针-java的对象实例本质是指针"><span>对象指针，<mark>java的对象实例本质是指针</mark></span></a></h3><p>不可错误地将Java的对象实例理解为C++的引用，而必须要看成C++的对象指针</p><ul><li><p>性质上的区别</p><ul><li><p>在C++中没有空引用，并且引用不能被赋值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// Java</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">Date</span><span class="token operator">*</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// C++</span>
<span class="token comment">// 不同于</span>
<span class="token class-name">Date</span><span class="token operator">&amp;</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// C++，不可空引用、不可被赋值</span>
<span class="token comment">// 不同于</span>
<span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// C++，表示的是值，传参时会传递整个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>存储空间上的区别</p><ul><li><p>所有的Java对象都存储在堆中。当一个对象包含另一个对象变量时，这个变量依然包含着指向另一个堆对象的指针。</p><p>如果使用一个没有初始化的指针，运行系统将会产生一个运行时错误，而不是生成一个随机的结果。同时，不必担心内存管理问题，垃圾收集器将会处理相关的事宜。</p></li></ul></li><li><p>传参时的区别</p><ul><li>不能编写一个交换两个雇员对象的方法，因为交换的只是拷贝进方法中的两个对象实例的地址，而并不能改变外部的两个对象实例的地址</li></ul></li><li><p>this指针</p><ul><li>在Java中，this引用等价于C++的this指针</li></ul></li></ul>`,18),t=[i];function c(o,p){return a(),s("div",null,t)}const r=n(l,[["render",c],["__file","01. 对象和类.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 对象和类 面向对象编程 基于对象、基于类 基于对象的面向对象语言（object-based）：JavaScript 基于 类 的面向对象语言：C++、C#、Java、Simula、Smalltalk 外壳类 用Java编写的所有代码都位于某个类的内部（包括main函数） 而C/C++、Python可以有代码在外面 对象的写法 ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 对象和类 面向对象编程 基于对象、基于类 基于对象的面向对象语言（object-based）：JavaScript 基于 类 的面向对象语言：C++、C#、Java、Simula、Smalltalk 外壳类 用Java编写的所有代码都位于某个类的内部（包括main函数） 而C/C++、Python可以有代码在外面 对象的写法 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"对象和类","slug":"对象和类","link":"#对象和类","children":[{"level":2,"title":"面向对象编程","slug":"面向对象编程","link":"#面向对象编程","children":[{"level":3,"title":"基于对象、基于类","slug":"基于对象、基于类","link":"#基于对象、基于类","children":[]},{"level":3,"title":"外壳类","slug":"外壳类","link":"#外壳类","children":[]},{"level":3,"title":"对象的写法","slug":"对象的写法","link":"#对象的写法","children":[]},{"level":3,"title":"区别概括","slug":"区别概括","link":"#区别概括","children":[]},{"level":3,"title":"运算符重载","slug":"运算符重载","link":"#运算符重载","children":[]},{"level":3,"title":"对象指针，java的对象实例本质是指针","slug":"对象指针-java的对象实例本质是指针","link":"#对象指针-java的对象实例本质是指针","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Different/06. 面向对象/01. 面向对象/01. 对象和类.md","autoDesc":true}');export{r as comp,m as data};
