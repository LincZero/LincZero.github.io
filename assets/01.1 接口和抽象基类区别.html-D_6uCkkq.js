import{_ as s,c as a,e as l,o as n}from"./app-DnpufS1x.js";const e={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="接口类和抽象类的区别" tabindex="-1"><a class="header-anchor" href="#接口类和抽象类的区别"><span>接口类和抽象类的区别</span></a></h1><p>参考：</p><ul><li><p>百度：https://www.baidu.com/baidu?tn=monline_4_dg&amp;ie=utf-8&amp;wd=%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB</p></li><li><p><a href="https://blog.csdn.net/wusuopubupt/article/details/8688219" target="_blank" rel="noopener noreferrer">【CSDN】抽象类和接口的区别、为什么用抽象类</a></p></li></ul><h2 id="抽象基类" tabindex="-1"><a class="header-anchor" href="#抽象基类"><span>抽象基类</span></a></h2><p>目的： 在面向对象领域，抽象类主要用来进行<strong>类型隐藏</strong></p><p>那什么是类型隐藏呢？ 我们可以构造出一个固定的一组行为的抽象描述，但是这组行为却能够有任意个可能的具体实现方式。 这个抽象描述就是抽象类，而这一组任意个可能的具体实现则表现为所有可能的派生类。</p><p>举例：动物是一个抽象类，人、猴子、老虎就是具体实现的派生类。我们就可以用动物类型来隐藏人、猴子和老虎的类型。 ( 参考英语中的doSome方法)</p><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>接口定义：</p><p>Java中的接口是一系列方法的声明，是<strong>一些方法特征的集合</strong>，一个接口<strong>只有方法的特征没有方法的实现</strong>，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）。</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><h3 id="区别-1" tabindex="-1"><a class="header-anchor" href="#区别-1"><span>区别</span></a></h3><ul><li><h4 id="概念上" tabindex="-1"><a class="header-anchor" href="#概念上"><span>概念上</span></a></h4><ul><li><strong>接口不是类</strong>，而是对类的一组需求描述，所以一般不叫 “接口类”。 这点与抽象基类不同，虽然抽象基类也不能被直接实例化。</li></ul></li><li><h4 id="单多继承" tabindex="-1"><a class="header-anchor" href="#单多继承"><span>单多继承</span></a></h4><ul><li>抽象基类：抽象类在Java语言中表示的是一种继承关系，<strong>一个类只能使用一次继承关系</strong>。</li><li>接口　　：<strong>一个类却可以实现多个接口</strong>。也许，这是Java语言的设计者在考虑Java对于<strong>多重继承</strong>的支持方面的一种折中考虑吧。</li></ul></li><li><h4 id="方法默认行为" tabindex="-1"><a class="header-anchor" href="#方法默认行为"><span>方法默认行为</span></a></h4><ul><li>抽象基类： 在抽象类的定义中，我们<strong>可以赋予方法的默认行为</strong>。</li><li>接口　　： 但是在接口的定义中，<strong>方法却不能拥有默认行为</strong>（Java SE 8前）。 为了绕过这个限制，必须使用委托，但是这会 增加一些复杂性，有时会造成很大的麻烦。 或者在Java SE 8后，在接口中添加静态方法。</li></ul></li><li><h4 id="父子关系-选用参考" tabindex="-1"><a class="header-anchor" href="#父子关系-选用参考"><span>父子关系（选用参考）</span></a></h4><ul><li>抽象基类： 对抽象基类的实现我们叫 “<strong>继承</strong>”，抽象类在Java语言中体现了一种继承关系。 父类和派生类之间必须存在**”is a”关系**，即父类和派生类在概念本质上应该是相同的。</li><li>接口　　： 对　接口　的实现一般叫 “<strong>实现</strong>”，接口仅仅是实现了接口定义的契约而已。 父类和派生类之间的关系是**”like a”关系**，并不要求接口的实现者和接口定义在概念本质上是一致的。</li></ul></li><li><h4 id="修改类-选用参考" tabindex="-1"><a class="header-anchor" href="#修改类-选用参考"><span>修改类（选用参考）</span></a></h4><ul><li>抽象基类： 使用抽象类来定义允许多个实现的类型，比使用接口有一个<strong>明显的优势</strong>：抽象类的演化比接口的演化要容易的多。 在后续的发行版中，<strong>如果希望在抽象类中增加一个方法</strong>，只增加一个默认的合理的实现即可，抽象类的所有实现都自动提供了这个新的方法。</li><li>接口　　： 对于接口，这是<strong>行不通</strong>的。虽然可以在骨架实现类中增加一方法的实现来解决部分问题，但这不能解决不从骨架实现类继承的接口实现的问题。 由此，<strong>设计公有的接口要非常谨慎，一旦一个接口被公开且被广泛实现，对它进行修改将是不可能的</strong>。</li><li>所以，使用接口还是抽象类，取决于我们对问题的概念的本质理解和设计的意图。</li></ul></li><li><h4 id="写法上" tabindex="-1"><a class="header-anchor" href="#写法上"><span>写法上</span></a></h4><ul><li><p>抽象基类</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 抽象基类定义用 abstract class</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 继承用关键字 extends</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){...}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接口定义用 interface</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 实现用关键字 implements</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> otherObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Employee</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> other</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Employee) ohterObject;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(salary, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">salary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 或者结合泛型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Employee</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Employee</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> otherObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(salary, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">other</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">salary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对接口进行扩展用关键字 extends</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> milesPerGallon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一起用</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Student</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Named</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {...}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h3><p>相同点</p><ol><li><strong>都不能被实例化</strong>。</li><li><strong>都能包含抽象方法</strong>。</li><li><strong>接口是一种特殊形式的抽象类</strong>。 抽象类与接口紧密相关，然而<strong>接口又比抽象类更抽象</strong>，这主要体现在它们的差别上： <ol><li>类可以实现无限个接口，但仅能从一个抽象（或任何其他类型）类继承，从抽象类派生的类仍可实现接口，从而得出接口是用来解决多重继承问题的。</li><li>抽象类当中可以存在非抽象的方法，可接口不能且它里面的方法只是一个声名必须用public来修饰没有具体实现的方法。</li><li>抽象类中的成员变量可以被不同的修饰符来修饰，可接口中的成员变量默认的都是静态常量（static fainl）。</li><li>这一点也是最重要的一点本质的一点&quot;抽象类是对象的抽象，然接口是一种行为规范&quot;。</li></ol></li></ol><p>例如每个接口可以代表一种最顶层的抽象，可以理解为代表一类东西，如果一个类实现了多个接口，那这个类就有了多种类型，即接口是定义混合类型的理想工具最后：有一种设计模式，就是，默认适配模式，意思就是说，首先定义一个接口，通过抽象类实现这个接口，并实现一些子类不需要一定实现的方法，然后，子类就可以选择是继承接口，实现所有方法，还是直接继承这个抽象类实现具体需要的方法，</p><h2 id="选用" tabindex="-1"><a class="header-anchor" href="#选用"><span>选用</span></a></h2><h3 id="为什么用抽象类-接口" tabindex="-1"><a class="header-anchor" href="#为什么用抽象类-接口"><span>为什么用抽象类/接口</span></a></h3><p>定义成抽象类是为了以后要其子类来继承的，因为父类里有很多方法是无法定义具体的实现的，只能定义一个原型，让子类来分别实现！所以要定义成抽象的！</p><p>简单来说就是 抽象类是在接口和实体类之间的一个桥梁</p><p>使用场景举例：</p><blockquote><p>做一个接口叫做飞行FlyAnimalAction，里面定义一个方法叫做flying，再定义一个方法叫做eat 做一个类叫做蚊子实现接口（多继承），蚊子要实现flying方法，实现自己的eat方法 做一个类叫做苍蝇实现接口（多继承），苍蝇也要实现flying方法，实现自己的eat方法</p><p>你发现所有会飞的动物都要实现这个接口，很麻烦，不如 做一个抽象类FlyAnimal，然后实现上面的接口 在里面实现flying这个方法，因为大部分的飞行动作是一样的，而eat方法则继续写成抽象方法，因为大部分的动物吃东西是不一样的</p><p>下面你再写蚊子类就简单了，可以直接继承这个抽象类，然后实现自己的吃方法就行了 而且苍蝇类的制作也是一样，这个时候抽象类的功能就显示出来了，当然抽象类的功能远远不是这些，只是初期理解到这里就够了</p></blockquote><h3 id="为什么用接口-多重继承问题" tabindex="-1"><a class="header-anchor" href="#为什么用接口-多重继承问题"><span>为什么用接口（多重继承问题）</span></a></h3><p>Q：为什么Java程序设计语言还要不辞辛苦地引入接口概念？抽象基类都能做到抽象基类的功能吗？ A：实际上，接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。</p><ul><li>继承一般不允许多继承 <ul><li>有些程序设计语言允许一个类有多个超类，例如C++。我们将此特性称为多重继承（multiple inheritance）</li><li>Java的设计者选择了不支持多继承，其主要原因是多继承会让语言本身变得非常复杂（如同C++），效率也会降低（如同Eiffel）</li></ul></li><li>多重继承的复杂性 <ul><li>虚基类、控制规则、横向指针类型转换等</li><li>很少有C++程序员使用多继承</li><li>有些程序员建议只对“混合”风格的继承使用多继承。在“混合”风格中，一个主要的基类描述父对象，其他的基类（因此称为混合）扮演辅助的角色。这种风格类似于Java类中从一个基类派生，然后实现若干个辅助接口</li></ul></li></ul><h2 id="与c-c-不同" tabindex="-1"><a class="header-anchor" href="#与c-c-不同"><span><mark>与C/C++不同</mark></span></a></h2><ul><li><p>Java</p><ul><li>Java有抽象基类，也有接口的概念</li><li>在Java程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义</li><li>Java不支持多重继承</li></ul></li><li><p>C++</p><ul><li>C++没有接口这的概念，不区分接口和纯虚基类 仅使用 “纯虚基类+多重继承” 可以完成相同的需求</li></ul></li><li><p>Python</p><ul><li><p>没有纯虚积累或接口，但是可以在基类中抛出一个没有被实现的异常，以迫使使用者去实现接口</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">raise</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NotImplemented</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;This method has to be override in a child class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul>`,30)]))}const k=s(e,[["render",t],["__file","01.1 接口和抽象基类区别.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.1%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB%E5%8C%BA%E5%88%AB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 接口类和抽象类的区别 参考： 百度：https://www.baidu.com/baidu?tn=monline_4_dg&ie=utf-8&wd=%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB 【CSD...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/01.1%20%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E5%9F%BA%E7%B1%BB%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 接口类和抽象类的区别 参考： 百度：https://www.baidu.com/baidu?tn=monline_4_dg&ie=utf-8&wd=%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB 【CSD..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"接口类和抽象类的区别","slug":"接口类和抽象类的区别","link":"#接口类和抽象类的区别","children":[{"level":2,"title":"抽象基类","slug":"抽象基类","link":"#抽象基类","children":[]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[{"level":3,"title":"区别","slug":"区别-1","link":"#区别-1","children":[]},{"level":3,"title":"相同点","slug":"相同点","link":"#相同点","children":[]}]},{"level":2,"title":"选用","slug":"选用","link":"#选用","children":[{"level":3,"title":"为什么用抽象类/接口","slug":"为什么用抽象类-接口","link":"#为什么用抽象类-接口","children":[]},{"level":3,"title":"为什么用接口（多重继承问题）","slug":"为什么用接口-多重继承问题","link":"#为什么用接口-多重继承问题","children":[]}]},{"level":2,"title":"与C/C++不同","slug":"与c-c-不同","link":"#与c-c-不同","children":[]}]}],"git":{},"readingTime":{"minutes":7.98,"words":2395},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/01.1 接口和抽象基类区别.md","excerpt":"\\n<h1>目录</h1>\\n<h1>接口类和抽象类的区别</h1>\\n<p>参考：</p>\\n<ul>\\n<li>\\n<p>百度：https://www.baidu.com/baidu?tn=monline_4_dg&amp;ie=utf-8&amp;wd=%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB</p>\\n</li>\\n<li>\\n<p><a href=\\"https://blog.csdn.net/wusuopubupt/article/details/8688219\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【CSDN】抽象类和接口的区别、为什么用抽象类</a></p>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/01.1 接口和抽象基类区别.md","value":{"title":"01.1 接口和抽象基类区别","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/01.1 接口和抽象基类区别.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
