import{_ as t,e as n,g as l,o}from"./app-HvNDXJEG.js";const i={};function r(a,e){return o(),n("div",null,e[0]||(e[0]=[l('<h1 id="计算机操作单位专题" tabindex="-1"><a class="header-anchor" href="#计算机操作单位专题"><span>计算机操作单位专题</span></a></h1><h2 id="操作单位" tabindex="-1"><a class="header-anchor" href="#操作单位"><span>操作单位</span></a></h2><p>本章中的 “单位” 并不是指 <code>字节</code>、<code>字</code>、<code>比特</code> 这种基本单位，而是侧重于指计算机系统进行某一操作的基本单位</p><p>这些操作可以是 “读写/传输拷贝/创建释放/修改”，研究这些操作的最小单位</p><h2 id="常见的操作单位" tabindex="-1"><a class="header-anchor" href="#常见的操作单位"><span>常见的操作单位</span></a></h2><p>总结如下：</p><ul><li>任务单位 <ul><li>线程： <strong>系统调度</strong>的最小单位、并发执行的最小单位</li><li>进程： <strong>资源分配</strong>的最小单位</li></ul></li><li>存储单位 <ul><li><em>比特</em>：存储的最小单位，但基本不能单独操作。也有认为存储的基本单位是字节的</li><li><em>字节</em>：<strong>寻址</strong>的最小单位。**CPU访问?**的最小单位。在抽象层次上可修改，但物理上很少单独操作</li><li><em>字</em>：<strong>CPU与内存数据交换</strong>的最小单位。与之相关的：系统位数 (64bit/32bit)、结构体的字节对齐 (8Byte/4Byte )</li><li><em>块/CacheLine</em>： <strong>Cache与内存进行数据传输/交换</strong>的最小单位、缓存的最小传输基本单位，利用了空间局部性 (通常为64Byte/128Byte等)</li><li><em>页</em>： <strong>虚拟内存和物理内存映射</strong>的最小单位，页面指环、虚拟内存最小分配和释放单位（其实字节才是内存中最小的分配和释放单位，但操作系统为了提高效率和解决碎片问题，通常会以更大的单位进行内存分配。当一个进程申请内存时，操作系统会分配给它若干个页。即使你只申请了一个字节，操作系统也会分配给你一个完整的页。这有可能产生内存碎片）</li><li><em>段</em>：……</li></ul></li></ul><p>还有一些非计算机的，可能是框架或库的。其实原理都是想通的</p><ul><li><em>行</em>：MySQL<strong>数据库记录</strong>的最小单位</li><li><em>页</em>：MySQL<strong>数据库的读写</strong>的最小单位、<strong>内存和磁盘</strong>进行数据交换的最小单位 (默认16KB)，若以<em>行</em>为单位效率非常低</li><li><em>区</em>：MySQL<strong>为某个索引分配空间</strong>的单位分配（1MB，连续的 64 个 (16KB的) 页会被划为一个区）</li></ul><h2 id="共同点、总结、启发" tabindex="-1"><a class="header-anchor" href="#共同点、总结、启发"><span>共同点、总结、启发</span></a></h2><ul><li>概念 <ul><li>当存在操作OA的最小单位UA时，可能存在一些操作OB的最小单位UB，而单位UB是单位UA的数倍。<br> 即有时一些操作，出于某种目的会操作一个更大的单位而非小单位。</li></ul></li><li>作用（为什么要这样做） <ol><li>减少操作OB的次数：大部分都属于这种</li><li>利用空间局部性或空间相邻性原理：例如 CacheLine、MySQL的索引空间以区为单位。方便检查上下文和顺序I/O</li><li>可直接处理一个大单位：例如字、处理大单位与小单位相比没额外的性能损耗</li></ol></li></ul>',11)]))}const p=t(i,[["render",r],["__file","计算机操作单位专题.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E5%85%B6%E4%BB%96%E6%8A%BD%E8%B1%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E5%8D%95%E4%BD%8D%E4%B8%93%E9%A2%98.html","title":"计算机操作单位专题","lang":"zh-CN","frontmatter":{"description":"计算机操作单位专题 操作单位 本章中的 “单位” 并不是指 字节、字、比特 这种基本单位，而是侧重于指计算机系统进行某一操作的基本单位 这些操作可以是 “读写/传输拷贝/创建释放/修改”，研究这些操作的最小单位 常见的操作单位 总结如下： 任务单位 线程： 系统调度的最小单位、并发执行的最小单位 进程： 资源分配的最小单位 存储单位 比特：存储的最小单...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E5%85%B6%E4%BB%96%E6%8A%BD%E8%B1%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E5%8D%95%E4%BD%8D%E4%B8%93%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"计算机操作单位专题"}],["meta",{"property":"og:description","content":"计算机操作单位专题 操作单位 本章中的 “单位” 并不是指 字节、字、比特 这种基本单位，而是侧重于指计算机系统进行某一操作的基本单位 这些操作可以是 “读写/传输拷贝/创建释放/修改”，研究这些操作的最小单位 常见的操作单位 总结如下： 任务单位 线程： 系统调度的最小单位、并发执行的最小单位 进程： 资源分配的最小单位 存储单位 比特：存储的最小单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计算机操作单位专题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.4,"words":721},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/计算机操作单位专题.md","excerpt":"\\n<h2>操作单位</h2>\\n<p>本章中的 “单位” 并不是指 <code>字节</code>、<code>字</code>、<code>比特</code> 这种基本单位，而是侧重于指计算机系统进行某一操作的基本单位</p>\\n<p>这些操作可以是 “读写/传输拷贝/创建释放/修改”，研究这些操作的最小单位</p>\\n<h2>常见的操作单位</h2>\\n<p>总结如下：</p>\\n<ul>\\n<li>任务单位\\n<ul>\\n<li>线程： <strong>系统调度</strong>的最小单位、并发执行的最小单位</li>\\n<li>进程： <strong>资源分配</strong>的最小单位</li>\\n</ul>\\n</li>\\n<li>存储单位\\n<ul>\\n<li><em>比特</em>：存储的最小单位，但基本不能单独操作。也有认为存储的基本单位是字节的</li>\\n<li><em>字节</em>：<strong>寻址</strong>的最小单位。**CPU访问?**的最小单位。在抽象层次上可修改，但物理上很少单独操作</li>\\n<li><em>字</em>：<strong>CPU与内存数据交换</strong>的最小单位。与之相关的：系统位数 (64bit/32bit)、结构体的字节对齐 (8Byte/4Byte )</li>\\n<li><em>块/CacheLine</em>： <strong>Cache与内存进行数据传输/交换</strong>的最小单位、缓存的最小传输基本单位，利用了空间局部性 (通常为64Byte/128Byte等)</li>\\n<li><em>页</em>： <strong>虚拟内存和物理内存映射</strong>的最小单位，页面指环、虚拟内存最小分配和释放单位（其实字节才是内存中最小的分配和释放单位，但操作系统为了提高效率和解决碎片问题，通常会以更大的单位进行内存分配。当一个进程申请内存时，操作系统会分配给它若干个页。即使你只申请了一个字节，操作系统也会分配给你一个完整的页。这有可能产生内存碎片）</li>\\n<li><em>段</em>：……</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/计算机操作单位专题.md","value":{"title":"计算机操作单位专题","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/计算机操作单位专题.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,c as data};
