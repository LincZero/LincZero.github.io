import{_ as s,c as a,e,o as l}from"./app-C-bjNnVy.js";const t={};function i(o,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="sql语句" tabindex="-1"><a class="header-anchor" href="#sql语句"><span>SQL语句</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="dql数据查询语言" tabindex="-1"><a class="header-anchor" href="#dql数据查询语言"><span>DQL数据查询语言</span></a></h1><ul><li><code>select * from demotable;</code>，查看表数据</li></ul><h2 id="总概" tabindex="-1"><a class="header-anchor" href="#总概"><span>总概</span></a></h2><h3 id="select标准示例" tabindex="-1"><a class="header-anchor" href="#select标准示例"><span>SELECT标准示例</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> customer_id<span class="token punctuation">,</span> last_name		<span class="token comment">-- 可为*</span>
<span class="token keyword">FROM</span> customers  					<span class="token comment">-- 从表选择</span>
<span class="token keyword">WHERE</span> customer_id <span class="token operator">=</span> <span class="token number">1</span>  				<span class="token comment">-- 筛选。布尔：()&gt;NOT&gt;AND&gt;OR</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name  				<span class="token comment">-- 按某列排序</span>
<span class="token keyword">LIMIT</span> <span class="token number">10</span>  							<span class="token comment">-- 仅显示前10条数据</span>
 
<span class="token comment">--SELECT子句扩展（选择）</span>
<span class="token keyword">SELECT</span> points <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">AS</span> points_factor	<span class="token comment">-- 构建新列。可输入表达式，若新列名有空格或中文可加引号</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> state  				<span class="token comment">-- 获得唯一值列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dql语句及子句顺序" tabindex="-1"><a class="header-anchor" href="#dql语句及子句顺序"><span>DQL语句及子句顺序</span></a></h3><p>执行顺序补充</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>		<span class="token comment">-- 5</span>
<span class="token keyword">from</span>		<span class="token comment">-- 1</span>
<span class="token keyword">where</span>		<span class="token comment">-- 2</span>
<span class="token keyword">group</span> <span class="token keyword">by</span>	<span class="token comment">-- 3</span>
<span class="token keyword">having</span>		<span class="token comment">-- 4</span>
<span class="token keyword">order</span> <span class="token keyword">by</span>	<span class="token comment">-- 6</span>
<span class="token keyword">limit</span>		<span class="token comment">-- 7	</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="select扩展-跟在select后的" tabindex="-1"><a class="header-anchor" href="#select扩展-跟在select后的"><span>SELECT扩展（跟在SELECT后的）</span></a></h2><h3 id="distinct-去重" tabindex="-1"><a class="header-anchor" href="#distinct-去重"><span>DISTINCT（去重）</span></a></h3><ul><li>select后增加关键字<code>distinct</code>即可 <ul><li>例如：<code>SELECT DISTINCT state</code>，获得唯一值列表</li><li>补充：DISTINCT只能出现在所有字段的最前面，后面接多个字段时为联合去重</li></ul></li></ul><h3 id="单行处理函数" tabindex="-1"><a class="header-anchor" href="#单行处理函数"><span>单行处理函数</span></a></h3><p>使用</p><ul><li><code>select (points+10) as points_factor</code>，可输入表达式，若列名有空格可加引号</li><li><code>select ifnull(comm,0) as comm from emp;</code>，空处理函数</li></ul><p>补充</p><ul><li>SQL中有NULL参与运算则结果一定为NULL，但空处理函数除外</li></ul><h3 id="分组函数-聚合函数-多行处理函数" tabindex="-1"><a class="header-anchor" href="#分组函数-聚合函数-多行处理函数"><span>分组函数（聚合函数 / 多行处理函数）</span></a></h3><p>使用</p><ul><li><code>select sum(sal) from mytable;</code>，求总和</li><li><code>select max(sal) from mytable;</code>，找最高</li><li><code>select min(sal) from mytable;</code>，找最低</li><li><code>select avg(sal) from mytable;</code>，找平均</li><li><code>select count(*) from mytable;</code>，找总数</li></ul><p>补充</p><ul><li>分组函数，别名聚合函数，或多行处理函数（输入多行，输出一行）</li><li>SQL中有NULL参与运算则结果一定为NULL，但分组函数会自动忽略NULL</li><li>分组函数不可直接在where子句中使用 <ul><li>举例：即<code>select * from mytable where sal &gt; avg(sal);</code>错误。若要使用该功能，要使用嵌套查询</li><li>原因分析：执行顺序where &gt; group by &gt; select，在分组查询之前无法执行分组函数</li></ul></li><li>分组函数一般都会和GROUP BY分组查询联合使用，这也是其被称为分组函数的原因。若无group by则整个表为一组</li></ul><h2 id="分组类子语句-结合分组函数使用" tabindex="-1"><a class="header-anchor" href="#分组类子语句-结合分组函数使用"><span>分组类子语句（结合分组函数使用）</span></a></h2><h3 id="group-by-分组查询" tabindex="-1"><a class="header-anchor" href="#group-by-分组查询"><span>GROUP BY（分组查询）</span></a></h3><p>使用</p><ul><li><code>group by</code>，按照某个字段或某些字段分组 <ul><li><code>select max(sal) from emp group by job;</code>，案例：找出每个工作岗位的最高薪资</li></ul></li></ul><p>补充</p><ul><li>==【大坑】==当有group by时，select后面只能跟 “分组的字段” 以及 “分组函数”，其他不能跟！！！ <ul><li>举例：不能<code>select ename,max(sal),job from emp group by job;</code></li><li>第一个字段并不是最大值所对应的那一个！</li><li>该语句在MySQL中能执行但结果无意义，在Oracle中甚至会报语法错误</li></ul></li><li>多字段分组查询 <ul><li>如<code>group by deptno,job</code>（注意：先后顺序分重要）</li></ul></li></ul><h3 id="having-分组过滤" tabindex="-1"><a class="header-anchor" href="#having-分组过滤"><span>HAVING（分组过滤）</span></a></h3><p>使用</p><ul><li><code>having</code>，对分组之后的数据进行再次过滤</li></ul><p>补充</p><ul><li>和where差不多，但执行顺序不同，WHERE &gt; GROUP BY &gt; HAVING</li><li>WHERE和HAVING的选用：优先使用WHERE，除非WHERE搞不掂</li></ul><h2 id="筛选类子语句" tabindex="-1"><a class="header-anchor" href="#筛选类子语句"><span>筛选类子语句</span></a></h2><h3 id="where-条件筛选" tabindex="-1"><a class="header-anchor" href="#where-条件筛选"><span>WHERE（条件筛选）</span></a></h3><p>除了查询以外，修改数据也能用</p><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token punctuation">(</span><span class="token punctuation">)</span>					<span class="token comment">-- 括号运算符</span>
<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token operator">&lt;</span><span class="token punctuation">,</span><span class="token operator">=</span><span class="token punctuation">,</span><span class="token operator">&gt;=</span><span class="token punctuation">,</span><span class="token operator">&lt;=</span><span class="token punctuation">,</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token punctuation">,</span><span class="token operator">!=</span>	<span class="token comment">-- 比较运算符</span>
<span class="token operator">NOT</span><span class="token punctuation">,</span><span class="token operator">AND</span><span class="token punctuation">,</span><span class="token operator">OR</span>			<span class="token comment">-- 逻辑运算符</span>
<span class="token operator">IS</span> <span class="token boolean">NULL</span>		<span class="token comment">-- 匹配空值</span>
<span class="token operator">IN</span>			<span class="token comment">-- 列表包含，配合()使用</span>
<span class="token operator">BETWEEN</span>		<span class="token comment">-- 等同于：&gt;= and &lt;=</span>
<span class="token operator">LIKE</span>		<span class="token comment">-- 模糊匹配，配合%和_使用。若匹配%或_则使用转义符&#39;\\&#39;</span>
<span class="token operator">REGEXP</span>		<span class="token comment">-- 正则匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用条件" tabindex="-1"><a class="header-anchor" href="#常用条件"><span>常用条件</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> birth_date <span class="token operator">&gt;=</span> <span class="token string">&#39;1990-01-01&#39;</span>  			 			<span class="token comment">-- 日期区间1</span>
<span class="token keyword">WHERE</span> birth_date <span class="token operator">BETWEEN</span> <span class="token string">&#39;1990-01-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2020-01-01&#39;</span> 	<span class="token comment">-- 日期区间2</span>
<span class="token keyword">WHERE</span> phone <span class="token operator">IS</span> <span class="token boolean">NULL</span>  									<span class="token comment">-- 匹配空值</span>
<span class="token keyword">WHERE</span> state <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;VA&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GA&#39;</span><span class="token punctuation">)</span>						<span class="token comment">-- 列表包含</span>
<span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">&#39;b%&#39;</span>  								<span class="token comment">-- 模糊匹配，匹配b开头的对象，大小写无关</span>
<span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">&#39;b____&#39;</span>  							<span class="token comment">-- 模糊匹配，%任意匹配长度字符，下划线匹配单个字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正则匹配" tabindex="-1"><a class="header-anchor" href="#正则匹配"><span>正则匹配</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> last_name <span class="token operator">REGEXP</span> <span class="token string">&#39;field&#39;</span>  						<span class="token comment">-- 正则匹配，可组合特殊字符建立复杂筛选</span>
<span class="token string">&#39;field&#39;</span>		包含
<span class="token string">&#39;^field&#39;</span>	以开头
<span class="token string">&#39;field$&#39;</span>	以结尾
<span class="token string">&#39;aa|bb&#39;</span>		并行
<span class="token string">&#39;[abcd]e&#39;</span>	单字符并行
<span class="token string">&#39;[a-d]e&#39;</span>	并行优化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="嵌套子查询" tabindex="-1"><a class="header-anchor" href="#嵌套子查询"><span>嵌套子查询</span></a></h4><p>可以在where、from、select语句中使用子查询</p><p>where后：应用举例：找出薪资高于平均值的员工</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> client_id <span class="token operator">=</span><span class="token punctuation">(</span>
	<span class="token keyword">SELECT</span> client_id
	<span class="token keyword">FROM</span> clients
	<span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Myworks&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>from后：应用情况：查询结构作为一张新表</p><p>select后：这个不太好理解，大概可以代替下连接查询</p><h2 id="连接类子语句-多表关联查询" tabindex="-1"><a class="header-anchor" href="#连接类子语句-多表关联查询"><span>连接类子语句（多表关联查询）</span></a></h2><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询"><span>连接查询</span></a></h3><ul><li>概念 <ul><li>实际开发中，大部分情况都不是从单表中查询数据，都是多表联合查询（考试也一般是多表联合查询）</li><li>实际开发中，一般一个业务会对应多个表</li></ul></li><li>分类 <ul><li>根据年代划分 <ul><li>SQL92（旧），一些老的DBA可能还在使用这种语法</li><li>SQL99（新）</li></ul></li><li>根据连接方式划分 <ul><li><code>内连接</code>（两张表没有主副之分，两张表平等） <ul><li><code>等值连接</code>（连接条件是等量关系）</li><li><code>非等值连接</code>（连接条件是非等量关系）</li><li><code>自连接</code>（一张表看作两张表，自己连接自己）</li></ul></li><li><code>外连接</code>（分主表副表，主要查询主表数据，捎带查询副表。但副表没有与主表匹配的数据时，自动模拟NULL与之匹配） <ul><li><code>左外连接（左连接）</code>（表示左边的表是主表，左右连接的写法可互转换）</li><li><code>右外连接（右连接）</code>（表示右边的表是主表，左右连接的写法可互转换）</li></ul></li><li><code>全连接</code>（不讲，很少用）</li></ul></li></ul></li><li>一些使用注意项 <ul><li>连接查询原理、以及笛卡尔积现象（笛卡尔乘积现象） <ul><li>例如：<code>sekect ename,dname from emp,dept;</code></li><li>说明：无条件限制时，则新表的数据量是两张表的记录的乘积。该现象为笛卡尔积现象</li><li>避免：加条件过滤</li><li>思考：避免笛卡尔积现象并不会减少记录的匹配次数，只不过现实的是有效记录，即不会提高查询效率</li></ul></li><li>使用表的别名 <ul><li>例如：<code>sekect e.ename,d.dname from emp e,dept d;</code></li><li>说明：表的别名的好处：执行效率高、可读性好</li></ul></li></ul></li></ul><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><h4 id="内连接之等值连接" tabindex="-1"><a class="header-anchor" href="#内连接之等值连接"><span>内连接之等值连接</span></a></h4><p>SQL92（太老，不用）</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname
<span class="token keyword">from</span>
	emp e<span class="token punctuation">,</span>dept d
<span class="token keyword">where</span>
	e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SQL99（常用）</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname
<span class="token keyword">from</span>
	emp e
<span class="token keyword">join</span>			<span class="token comment">-- 这里可写成inner join，inner可省略，带inner目的是提高可读性</span>
	dept d
<span class="token keyword">on</span>
	e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>特点：连接条件是等量关系</li><li>案例：很常见，信息扩展</li><li>比较 <ul><li>看起来SQL92简单，但SQL99耦合度更低更清晰</li><li>SQL99可以使用WHERE进行过滤，而SQL92需要在WHERE使用AND（即表的连接条件和WHERE条件分离）</li></ul></li></ul><h4 id="内连接之非等值连接" tabindex="-1"><a class="header-anchor" href="#内连接之非等值连接"><span>内连接之非等值连接</span></a></h4><ul><li>特点：连接条件是非等量关系</li><li>案例：比如找出每个员工的工资等级（高中低）</li></ul><h4 id="内连接之自连接" tabindex="-1"><a class="header-anchor" href="#内连接之自连接"><span>内连接之自连接</span></a></h4><ul><li>特点：一张表看作两张表，自己连接自己</li><li>案例：找出每个员工的上级领导的名字</li></ul><h4 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接"><span>外连接</span></a></h4><ul><li>特点：全量查询，不会丢数据</li></ul><p>内连接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	a<span class="token punctuation">.</span>ename <span class="token string">&#39;员工&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>ename <span class="token string">&#39;领导&#39;</span>
<span class="token keyword">from</span>
	emp a
<span class="token keyword">join</span>			<span class="token comment">-- 也可写成inner join，inner可省略</span>
	emp b
<span class="token keyword">on</span>
	a<span class="token punctuation">.</span>mgr <span class="token operator">=</span> b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左外连接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	a<span class="token punctuation">.</span>ename <span class="token string">&#39;员工&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>ename <span class="token string">&#39;领导&#39;</span>
<span class="token keyword">from</span>
	emp a
<span class="token keyword">left</span> <span class="token keyword">join</span>		<span class="token comment">-- 表示左边是主表，也可写成left outer join，outer可省略</span>
	emp b
<span class="token keyword">on</span>
	a<span class="token punctuation">.</span>mgr <span class="token operator">=</span> b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>右外连接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	a<span class="token punctuation">.</span>ename <span class="token string">&#39;员工&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>ename <span class="token string">&#39;领导&#39;</span>
<span class="token keyword">from</span>
	emp b
<span class="token keyword">right</span> <span class="token keyword">join</span>		<span class="token comment">-- 表示右边是主表，也可写成right outer join，outer可省略</span>
	emp a
<span class="token keyword">on</span>
	a<span class="token punctuation">.</span>mgr <span class="token operator">=</span> b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="三表联合查询" tabindex="-1"><a class="header-anchor" href="#三表联合查询"><span>三表联合查询</span></a></h4><p>举例</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span>
	e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade
<span class="token keyword">from</span>
	emp e
<span class="token keyword">join</span>
	dept d
<span class="token keyword">on</span>
	e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> de<span class="token punctuation">.</span>deptno
<span class="token keyword">join</span>
	salgrade s
<span class="token keyword">on</span>
	e<span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结果编辑子语句" tabindex="-1"><a class="header-anchor" href="#结果编辑子语句"><span>结果编辑子语句</span></a></h2><h3 id="order-by-排序" tabindex="-1"><a class="header-anchor" href="#order-by-排序"><span>ORDER BY（排序）</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> state<span class="token punctuation">,</span> first_name  		<span class="token comment">-- 主次关键词</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>  						<span class="token comment">-- 可填列序，但应尽量避免</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name <span class="token keyword">ASC</span>  			<span class="token comment">-- 升序排列（默认）</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> first_name <span class="token keyword">DESC</span>  			<span class="token comment">-- 降序排列，MySQL以外数据库对此支持不好</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> state <span class="token keyword">DESC</span><span class="token punctuation">,</span> first_name <span class="token keyword">ASC</span>	<span class="token comment">-- 组合</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充：<code>order by</code>的执行顺序在<code>select</code>之后，故可以对新列别名进行排序</p><h3 id="union-查询结果相加" tabindex="-1"><a class="header-anchor" href="#union-查询结果相加"><span>UNION（查询结果相加）</span></a></h3><p>应用举例：找出工作岗位是SALESMAN和MANAGER的员工</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">&#39;MANAGER&#39;</span>
<span class="token keyword">union</span>
<span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">&#39;SALESMAN&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit-限制-【mysql特有】" tabindex="-1"><a class="header-anchor" href="#limit-限制-【mysql特有】"><span>LIMIT（限制）【MySQL特有】</span></a></h3><p>注意：mysql中特有的，其他数据库没有，不通用。Oracle中有一个相同的机制叫<code>rownum</code></p><p>用途：最大的用途就是分页查询，例如百度搜索每页显示10条数据</p><p>语法：<code>limit [startIndex=0,] length</code>，startIndex表示起始位置，length表示取几个</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>LIMIT 10  							-- 仅显示前10条
LIMIT 6, 3  						-- 跳过前6条/从序列6开始，显示后3条
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,86)]))}const c=s(t,[["render",i],["__file","01. DQL数据查询语言.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/SQL%E8%AF%AD%E5%8F%A5/01.%20DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80.html","title":"SQL语句","lang":"zh-CN","frontmatter":{"description":"SQL语句 目录 DQL数据查询语言 select * from demotable;，查看表数据 总概 SELECT标准示例 DQL语句及子句顺序 执行顺序补充 SELECT扩展（跟在SELECT后的） DISTINCT（去重） select后增加关键字distinct即可 例如：SELECT DISTINCT state，获得唯一值列表 补充：DI...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/SQL%E8%AF%AD%E5%8F%A5/01.%20DQL%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"SQL语句"}],["meta",{"property":"og:description","content":"SQL语句 目录 DQL数据查询语言 select * from demotable;，查看表数据 总概 SELECT标准示例 DQL语句及子句顺序 执行顺序补充 SELECT扩展（跟在SELECT后的） DISTINCT（去重） select后增加关键字distinct即可 例如：SELECT DISTINCT state，获得唯一值列表 补充：DI..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL语句\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"SQL语句","slug":"sql语句","link":"#sql语句","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"DQL数据查询语言","slug":"dql数据查询语言","link":"#dql数据查询语言","children":[{"level":2,"title":"总概","slug":"总概","link":"#总概","children":[{"level":3,"title":"SELECT标准示例","slug":"select标准示例","link":"#select标准示例","children":[]},{"level":3,"title":"DQL语句及子句顺序","slug":"dql语句及子句顺序","link":"#dql语句及子句顺序","children":[]}]},{"level":2,"title":"SELECT扩展（跟在SELECT后的）","slug":"select扩展-跟在select后的","link":"#select扩展-跟在select后的","children":[{"level":3,"title":"DISTINCT（去重）","slug":"distinct-去重","link":"#distinct-去重","children":[]},{"level":3,"title":"单行处理函数","slug":"单行处理函数","link":"#单行处理函数","children":[]},{"level":3,"title":"分组函数（聚合函数 / 多行处理函数）","slug":"分组函数-聚合函数-多行处理函数","link":"#分组函数-聚合函数-多行处理函数","children":[]}]},{"level":2,"title":"分组类子语句（结合分组函数使用）","slug":"分组类子语句-结合分组函数使用","link":"#分组类子语句-结合分组函数使用","children":[{"level":3,"title":"GROUP BY（分组查询）","slug":"group-by-分组查询","link":"#group-by-分组查询","children":[]},{"level":3,"title":"HAVING（分组过滤）","slug":"having-分组过滤","link":"#having-分组过滤","children":[]}]},{"level":2,"title":"筛选类子语句","slug":"筛选类子语句","link":"#筛选类子语句","children":[{"level":3,"title":"WHERE（条件筛选）","slug":"where-条件筛选","link":"#where-条件筛选","children":[{"level":4,"title":"运算符","slug":"运算符","link":"#运算符","children":[]},{"level":4,"title":"常用条件","slug":"常用条件","link":"#常用条件","children":[]},{"level":4,"title":"正则匹配","slug":"正则匹配","link":"#正则匹配","children":[]},{"level":4,"title":"嵌套子查询","slug":"嵌套子查询","link":"#嵌套子查询","children":[]}]}]},{"level":2,"title":"连接类子语句（多表关联查询）","slug":"连接类子语句-多表关联查询","link":"#连接类子语句-多表关联查询","children":[{"level":3,"title":"连接查询","slug":"连接查询","link":"#连接查询","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[{"level":4,"title":"内连接之等值连接","slug":"内连接之等值连接","link":"#内连接之等值连接","children":[]},{"level":4,"title":"内连接之非等值连接","slug":"内连接之非等值连接","link":"#内连接之非等值连接","children":[]},{"level":4,"title":"内连接之自连接","slug":"内连接之自连接","link":"#内连接之自连接","children":[]},{"level":4,"title":"外连接","slug":"外连接","link":"#外连接","children":[]},{"level":4,"title":"三表联合查询","slug":"三表联合查询","link":"#三表联合查询","children":[]}]}]},{"level":2,"title":"结果编辑子语句","slug":"结果编辑子语句","link":"#结果编辑子语句","children":[{"level":3,"title":"ORDER BY（排序）","slug":"order-by-排序","link":"#order-by-排序","children":[]},{"level":3,"title":"UNION（查询结果相加）","slug":"union-查询结果相加","link":"#union-查询结果相加","children":[]},{"level":3,"title":"LIMIT（限制）【MySQL特有】","slug":"limit-限制-【mysql特有】","link":"#limit-限制-【mysql特有】","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.99,"words":2097},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/01. DQL数据查询语言.md","excerpt":"\\n<h1>目录</h1>\\n<h1>DQL数据查询语言</h1>\\n<ul>\\n<li><code>select * from demotable;</code>，查看表数据</li>\\n</ul>\\n<h2>总概</h2>\\n<h3>SELECT标准示例</h3>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">SELECT</span> customer_id<span class=\\"token punctuation\\">,</span> last_name\\t\\t<span class=\\"token comment\\">-- 可为*</span>\\n<span class=\\"token keyword\\">FROM</span> customers  \\t\\t\\t\\t\\t<span class=\\"token comment\\">-- 从表选择</span>\\n<span class=\\"token keyword\\">WHERE</span> customer_id <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>  \\t\\t\\t\\t<span class=\\"token comment\\">-- 筛选。布尔：()&gt;NOT&gt;AND&gt;OR</span>\\n<span class=\\"token keyword\\">ORDER</span> <span class=\\"token keyword\\">BY</span> first_name  \\t\\t\\t\\t<span class=\\"token comment\\">-- 按某列排序</span>\\n<span class=\\"token keyword\\">LIMIT</span> <span class=\\"token number\\">10</span>  \\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\">-- 仅显示前10条数据</span>\\n \\n<span class=\\"token comment\\">--SELECT子句扩展（选择）</span>\\n<span class=\\"token keyword\\">SELECT</span> points <span class=\\"token operator\\">+</span> <span class=\\"token number\\">10</span> <span class=\\"token keyword\\">AS</span> points_factor\\t<span class=\\"token comment\\">-- 构建新列。可输入表达式，若新列名有空格或中文可加引号</span>\\n<span class=\\"token keyword\\">SELECT</span> <span class=\\"token keyword\\">DISTINCT</span> state  \\t\\t\\t\\t<span class=\\"token comment\\">-- 获得唯一值列表</span>\\n</code></pre></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/01. DQL数据查询语言.md","value":{"title":"01. DQL数据查询语言","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/SQL语句/01. DQL数据查询语言.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,d as data};
