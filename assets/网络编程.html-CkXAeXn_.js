import{_ as s,e as l,g as a,o as n}from"./app-DPU1xou8.js";const t="/assets/image-20230522194337940-BfExZuUR.png",e="/assets/image-20230522195219787-Cs91DLni.png",h="/assets/image-20230522195750296-sFOZrsQD.png",p="/assets/image-20230522200111693-BaHBWzl1.png",k="/assets/image-20230522201042457-Bg6kaSX-.png",r="/assets/image-20230522201226022-CKRDuA8b.png",d="/assets/image-20230522225919010-Ccqy7mDe.png",o="/assets/image-20230523230232925-BCawaJI4.png",c="/assets/image-20230523230332462-Bz8s9ZKE.png",g="/assets/image-20230523230533174-Cy75pfcG.png",A={};function y(B,i){return n(),l("div",null,i[0]||(i[0]=[a(`<p>参考：<a href="https://www.bilibili.com/video/BV12U4y167sf" target="_blank" rel="noopener noreferrer">【B站】网络编程系列(select、poll、epoll、Reactor模型、Proactor模型)</a></p><h2 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识"><span>前置知识</span></a></h2><p>整个网络演变过程</p><ol><li>阻塞IO (BIO)</li><li>非阻塞IO (NIO)</li><li>IO多路复用第一版 (select/poll)</li><li>IO多路复用第二版 (epoll)</li><li>信号驱动IO</li><li>异步IO (AIO)</li></ol><p>问题：编写一个server的步骤</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1. 创建serverFd，这里的服务套接字也叫欢迎套接字</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">serverFd</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(opt);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2. 将fd和指定的地址(ip+port)进行绑定</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serverFd, address);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 3. 监听前面绑定时指定的地址</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Listen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serverFd);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 4. 进入无限循环来等待客户端连接请求。这里的客户套接字clientFd也叫连接套接字ConnectFd</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">clientFd</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(serverFd);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>server是怎么处理建立连接后的client请求的</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 从客户端里读取传输进来的数据，并将数据存放到buf中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(clientFd, buf, size);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 往客户端写出数据n个字节的数据，写出的数据存放在buf中</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(clientFd, buf, n);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>server和client完整交互过程（这个图是《Unix网络编程》里的，被视频和博客广泛引用）</p><p><img src="`+t+'" alt="image-20230522194337940" loading="lazy"></p><p>网络演变的本质是什么？下表从上往下演变</p><ul><li>&lt; 内核版本, 特征, 网络连接数量</li><li>0.96, 支持网络, 十</li><li>, 阻塞、非阻塞, 百</li><li>&lt;2.1, select, 千</li><li>2.1, poll, 万</li><li>2.5, epoll, 十万</li><li>, , 百万</li></ul><h2 id="一、阻塞io" tabindex="-1"><a class="header-anchor" href="#一、阻塞io"><span>一、阻塞IO</span></a></h2><ul><li>优点 <ul><li>可以实现client和server端通信</li><li>实现简单，通常一个client连接分配一个线程进行处理</li></ul></li><li>缺点 <ul><li>能支持的并发client连接数较少</li><li>在于一台server能分配的线程是有限的</li><li>大量线程会造成上下文切换过多而影响性能</li></ul></li></ul><p><img src="'+e+'" alt="image-20230522195219787" loading="lazy"></p><h2 id="二、非阻塞io" tabindex="-1"><a class="header-anchor" href="#二、非阻塞io"><span>二、非阻塞IO</span></a></h2><h3 id="改进-引入非阻塞io" tabindex="-1"><a class="header-anchor" href="#改进-引入非阻塞io"><span>改进，引入非阻塞IO</span></a></h3><ul><li>核心矛盾 <ul><li>之所以一个client连接分配一个线程是因为处理客户段的读写是阻塞式的，为避免该阻塞影响后续接收新的client，所以将阻塞逻辑叫由单独线程处理</li></ul></li><li>直观改进思路 <ul><li>阻塞IO(BIO, Blocking IO) --内核改进支持--&gt; 非阻塞IO(NIO, NonBlocking IO)</li></ul></li></ul><h3 id="区别-阻塞io和非阻塞io-bio-nio" tabindex="-1"><a class="header-anchor" href="#区别-阻塞io和非阻塞io-bio-nio"><span>区别：阻塞IO和非阻塞IO，BIO &amp; NIO</span></a></h3><ul><li>区别 <ul><li>主要区别在于：内核中数据尚未就绪时，如何处理。 <ul><li>对于非阻塞IO，则直接返回给用户态EWOULDBLOCK错误；</li><li>而阻塞IO则一直处于阻塞状态，直到数据就绪并从内核态拷贝到用户态后才返回</li></ul></li></ul></li></ul><p><img src="'+h+'" alt="image-20230522195750296" loading="lazy"></p><p>区别</p><p><img src="'+p+'" alt="image-20230522200111693" loading="lazy"></p><h3 id="如何设置非阻塞io" tabindex="-1"><a class="header-anchor" href="#如何设置非阻塞io"><span>如何设置非阻塞IO</span></a></h3><ul><li><p>方法1</p><ul><li><p>通过 <code>socket()</code> 方法中的type参数来指定 <code>SOCK_NOBLOCK</code> 即可设置该socket为非阻塞方式</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> domain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p>方法2（更常见和灵活）</p><ul><li><p>通过 <code>fcntl()</code> 方法中args参数设置为 <code>O_NONBLOCK</code> 即可设置该socket为非阻塞方式</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fcntl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">m</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> cmd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, ...</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*arg*/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><p>非阻塞IO特点</p><ul><li>优点 <ul><li>将socket设置为非阻塞后，在读取时如果数据未就绪就直接返回。得益于非阻塞的特性可以通过一个线程管理多个client连接</li></ul></li><li>缺点 <ul><li>需要不断的轮询询问内核，数据是否已就续，涉及很多无效的、太频繁的系统调用（system call）</li></ul></li></ul><h2 id="三、io多路复用第一版-select-poll-介绍" tabindex="-1"><a class="header-anchor" href="#三、io多路复用第一版-select-poll-介绍"><span>三、IO多路复用第一版（select&amp;poll）介绍</span></a></h2><h3 id="改进-询问变通知" tabindex="-1"><a class="header-anchor" href="#改进-询问变通知"><span>改进，询问变通知</span></a></h3><p>如何改进非阻塞IO？</p><ul><li>核心矛盾 <ul><li>涉及<strong>很多无用的、频繁的系统调用</strong>的原因是：非阻塞socket在read时并不知道什么时候数据会准备好了，所以需要不断<strong>主动询问</strong></li></ul></li><li>直观改进思路 <ul><li>非阻塞IO (<strong>NIO, 主动询问、单个</strong>) --内核改进支持--&gt; IO多路复用第一版 (<strong>等待通知、批量</strong>)</li></ul></li><li>IO多路复用第一版 <ul><li>select、poll</li></ul></li></ul><p><img src="'+k+'" alt="image-20230522201042457" loading="lazy"></p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><p><img src="'+r+`" alt="image-20230522201226022" loading="lazy"></p><p>思考：IO多路<strong>复用</strong>到底复用了什么</p><p>个人观点：</p><ul><li>IO多路复用主要复用的是系统调用。<br> 从原先阻塞情况下的多个client需要各自多次发送recvfrom系统调用去不断询问内核数据是否就绪；变成了现在通过一次系统调用select/poll由内核主动通知用户哪些client数据已就绪（read、write、accept等事件）。大大减少了无效的系统调用次数。</li></ul><h3 id="select核心接口及原理分析" tabindex="-1"><a class="header-anchor" href="#select核心接口及原理分析"><span>select核心接口及原理分析</span></a></h3><p>select()定义<br> （cpp libevent库那个和这个很类似）</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/select.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/time.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> maxfdp1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">readset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 读事件</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">writeset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 写事件</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">exceptset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 异常事件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> timeval</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timeout</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 超时事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 各参数含义</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 表示被select管理的描述符个数。值为最大描述符+1。不是描述符最大值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    maxfdp1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 表示一组描述符集合，select中是用一个个位数来实现的，一个描述符占一位</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fd_set</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 可读事件集合、可写事件集合、异常事件集合。这三者都可以填null</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    readset、writeset、exptset</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 超过时间有三种含义，可以通过值判断：永远等待(null)、正常超时(&gt;0)、立即返回(0)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    timeout</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际举例</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：select核心接口</p><p>其他接口定义：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FD_ZERO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fdset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FD_SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fdset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FD_CLR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fdset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> FD_ISSET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">fd_set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fdset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 例如：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fd_set rset;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FD_ZERO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rset);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FD_SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rset);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FD_SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rset);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FD_SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rset);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fd_set实现（原文档）</p><blockquote><p>What we are describing, an array of integers using one bit per descriptor is just one possible way to implement <code>select</code>. Nevertheless, it is common to refer to the individual descriptors within a descriptor set as bits, as in &quot;turn on the bit for the listening descriptor in the read set. &quot;<br> We will see in Section 6.10 that the poll Function uses a completely different representation: avariable-length array of structures with one structure per descriptor.</p><p>我们所描述的是一个整数数组，每个描述符使用一个比特，这只是实现“select”的一种可能方式。然而，通常将描述符集中的单个描述符称为位，如“打开读取集中侦听描述符的位”。</p><p>我们将在第6.10节看到poll函数使用完全不同的表示:每个描述符一个结构的可变长度结构数组。</p></blockquote><p>select为什么需要maxfdp1？</p><p>略</p><h3 id="和poll核心接口及原理分析" tabindex="-1"><a class="header-anchor" href="#和poll核心接口及原理分析"><span>和poll核心接口及原理分析</span></a></h3><p>poll()定义</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;poll.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fdarray</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     传入pollfd数组的首地址，该数组中的每一个元素为一个pollfd结构体对象，关联一个管理的描述符fd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     pollfd 结构：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     struct pollfd {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *         int   fd;        // 检查描述符</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *         short events;    // 要监听的事件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *         short revents;   // 事件的回调</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> nfds</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     fdarray数组的长度，表述管理的描述符个数。主要原因在于前面的fdarray是一个可变长度的数组，因为需要指定长度</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> timeout</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 有三种取值（和select是一样的）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     - 无限等待(INFTIM,即&lt;0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     - 立即返回不阻塞(0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     - 等待制定的超时时间(timeout,即&gt;0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> poll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> pollfd</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fdarray</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    usinged</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> log</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> nfds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// (1、2参数构成一个动态数组)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> timeout</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">					// 超时时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：poll事件定义</p><p>四类处理输入事件、三类处理输出事件、三类处理错误事件</p><p>poll识别三类事件：</p><ul><li>普通 (normal)</li><li>优先级带 (priority band)</li><li>高优先级 (priority)</li></ul><h3 id="select-poll-总结" tabindex="-1"><a class="header-anchor" href="#select-poll-总结"><span>select &amp; poll 总结</span></a></h3><p>有什么区别</p><ul><li>&lt; 维度, select, poll</li><li>实现 <ul><li>select底层使用<strong>位数组</strong>来实现，一个描述符对应一位</li><li>poll底层通过pollfd结构体来实现，管理的描述符通过pollfd数组来组织，一个描述符对应一个pollfd对象</li></ul></li><li>用法不同 <ul><li>select默认大小是FD_SETSIZE(1024)，修改的话需要修改配置参数同时重新编译内核实现</li><li>poll采用变长数组管理，因此理论上可以支持管理海量连接</li></ul></li><li>相同点 <ul><li>两者都属于IO多路服用第一版的经典实现。<br> 两者在调用时，都需要从<strong>用户态拷贝管理的全量描述符到内核态</strong>；返回时都从<strong>内核态拷贝全量的描述符到用户态</strong>；再由用户态<strong>遍历全量的描述符判断</strong>哪些描述符有就续事件</li><li>&lt;&lt;</li></ul></li></ul><p>思考：IO多路复用第一版有什么问题？</p><ul><li>优点 <ul><li>充分利用了一次系统调用select()/poll()就可以实现多个client的事件(read、write、accept等)。大大降低了之前非阻塞IO时频繁无效的系统调用。<br> 核心思路是：将主动询问内核 转变为 等待内核通知，提升了性能</li></ul></li><li>缺点 <ul><li>每次select()/poll()都需要将注册管理的多个client从用户态拷贝到内核态。在管理百万连接时，由拷贝带来的资源开销较大，影响性能</li></ul></li></ul><h2 id="io多路复用第二版-epoll" tabindex="-1"><a class="header-anchor" href="#io多路复用第二版-epoll"><span>IO多路复用第二版（epoll）</span></a></h2><h3 id="改进" tabindex="-1"><a class="header-anchor" href="#改进"><span>改进</span></a></h3><p>怎么改进？</p><ul><li>核心矛盾 <ul><li>从主动轮询 转变为 被动通知，确实提升了性能。但select()/poll()每次调用都需要<strong>拷贝管理的全量的fd</strong>到内核态，导致影响性能</li></ul></li><li>改进思路 <ul><li><strong>拷贝、模糊通知</strong> --内核改进支持--&gt; <strong>不拷贝、明确通知</strong></li></ul></li></ul><p><img src="`+d+`" alt="image-20230522225919010" loading="lazy"></p><h3 id="epoll核心接口及两种模式介绍" tabindex="-1"><a class="header-anchor" href="#epoll核心接口及两种模式介绍"><span>epoll核心接口及两种模式介绍</span></a></h3><p>epoll三大核心接口</p><ul><li>epoll_create()</li><li>epoll_ctl()</li><li>epoll_wait()</li></ul><h4 id="epoll-create" tabindex="-1"><a class="header-anchor" href="#epoll-create"><span>epoll_create()</span></a></h4><p>定义</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/epoll.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> epoll_create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ---</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/epoll.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> epoll_create1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：</p><ol><li>从linux2.6.8以后，size参数已被忽略，但必须大于0</li><li>epoll_create() 创建返回的epollfd指向内核中的一个epoll实例，同时该epollfd用来调用所有和epoll相关的接口(epoll_ctl()、epoll_wait())</li><li>当epollfd不再使用时，<strong>需要调用close()关闭</strong>。当所有指向epoll的文件描述符关闭后，内核会<strong>摧毁该epoll实例并释放和其关联的资源</strong></li><li>成功返回时，返回大于0的epollfd。失败时返回-1，根据errno查看错误。</li></ol><p>size说明</p><p>略</p><p>epoll_create1()</p><p>略</p><h4 id="epoll-ctl" tabindex="-1"><a class="header-anchor" href="#epoll-ctl"><span>epoll_ctl()</span></a></h4><p>定义</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;sys/epoll.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param epfd 通过epoll_create()创建的epollfd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param op</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - EPOLL_CTL_ADD，添加</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - EPOLL_CTL_MOD，更新</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - EPOLL_CTL_DEL，删除</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param fd 待监听的描述符fd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param event 要监听的fd的事件(读、写、接受连接等)，具体事件定义见下页表格</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> epoll_ctl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> epfd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> op</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> epoll_event</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大白话理解：将 哪个<em>客户端(fd)</em> 的 <em>哪些事件(event)</em> 交给 <em>哪个epoll(epfd)</em> 来管理(op:增删改)</p><h4 id="epoll-wait" tabindex="-1"><a class="header-anchor" href="#epoll-wait"><span>epoll_wait()</span></a></h4><p>定义</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&lt;sys/epoll.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param epfd 通过epoll_create()创建的epollfd</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param event 返回就续的事件列表，就绪的事件列表个数通过epoll_wait()的返回值来传递</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param maxevents 最多返回的events个数，该值用来告诉内核创建的events有多大</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@param timeout 超时时间</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - -1表示无限期等待</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - 0表示立即返回</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - &gt;0表示正常超时时间 timeout</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">@return cnt</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - 0表示超时时间范围内无就绪列表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - &gt;0表示返回就续列表的个数(后续通过循环遍历events[0]~events[cnt-1])</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    - -1表示错误，通过errno来识别具体错误信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> epoll_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> epfd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> epoll_event</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">events</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> maxevents</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="epoll重要事件介绍" tabindex="-1"><a class="header-anchor" href="#epoll重要事件介绍"><span>epoll重要事件介绍</span></a></h3><p>重要事件介绍</p><ul><li>事件宏定义, 具体含义</li><li>EPOLLIN, 表示对应的文件描述符可以读（包括对端SOCKET正常关闭）</li><li>EPOLLOUT, 表示对应的文件描述符可以写</li><li>EPOLLPRI, 表示对应的文件描述符有紧急数据可读（这里应该表示有带外数据到来）</li><li>EPOLLERR, 表示对应的文件描述符发生错误</li><li>EPOLLHUP, 表示对应的文件描述符被挂断</li><li>EPOLLET, 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的</li><li>EPOLLONESHOT, 只监听一次事件，当监听完整次事件后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里</li></ul><h3 id="epoll的-et模式-lt模式区别" tabindex="-1"><a class="header-anchor" href="#epoll的-et模式-lt模式区别"><span>epoll的 ET模式 &amp; LT模式区别</span></a></h3><p>区别</p><ul><li>维度, ET(edge-trigger)模式, LT(level-trigger)模式</li><li>触发时机 <ul><li>仅当监控的描述符有事件就绪时触发</li><li>当监控的描述符有事件就绪或就绪事件未完全处理完时都会触发</li></ul></li><li>性能消耗 <ul><li>相同场景下ET模式所涉及的<strong>系统调用次数较少</strong></li><li>相同场景下LT模式所设计的<strong>系统调用相对较多</strong></li></ul></li><li>编程难度 <ul><li>难度较高、数据完整性交由<strong>上层用户态保证</strong></li><li>难度较低、数据完整性交由<strong>内核来保证</strong>，epoll<strong>默认模式就是LT模式</strong></li></ul></li><li>相同点 <ul><li>都属于epoll内置的触发模式，都可以实现网络传输功能</li><li>&lt;&lt;</li></ul></li></ul><h3 id="扩展-epoll内核实现" tabindex="-1"><a class="header-anchor" href="#扩展-epoll内核实现"><span>扩展：epoll内核实现</span></a></h3><ul><li>epoll_create() <ul><li>在内核分配一段空间，并初始化管理监听描述符的数据结构：<strong>红黑树</strong>、<strong>就绪事件链表</strong></li></ul></li><li>epoll_ctl() <ul><li>暴露给上层用户的对底层红黑树的增删改接口： <ul><li>EPOLL_CTL_ADD，添加</li><li>EPOLL_CTL_MOD，更新</li><li>EPOLL_CTL_DEL，删除</li></ul></li></ul></li><li>epoll_wait() <ul><li>可从就绪事件链表中获取就绪事件关联的描述符，然后填充到events中并返回上层用户</li></ul></li><li>就绪事件迁移 <ul><li>当内核监听到有就绪事件中断时就会将就绪事件从红黑树迁移一份到就绪事件链表中</li></ul></li></ul><h3 id="信号驱动io和异步io介绍" tabindex="-1"><a class="header-anchor" href="#信号驱动io和异步io介绍"><span>信号驱动IO和异步IO介绍</span></a></h3><h4 id="信号驱动io" tabindex="-1"><a class="header-anchor" href="#信号驱动io"><span>信号驱动IO</span></a></h4><p><img src="`+o+'" alt="image-20230523230232925" loading="lazy"></p><h4 id="异步io" tabindex="-1"><a class="header-anchor" href="#异步io"><span>异步IO</span></a></h4><p><img src="'+c+'" alt="image-20230523230332462" loading="lazy"></p><h4 id="思考-select-poll-epoll-是同步io还是异步io-怎么区分" tabindex="-1"><a class="header-anchor" href="#思考-select-poll-epoll-是同步io还是异步io-怎么区分"><span>思考 select/poll/epoll 是同步IO还是异步IO，怎么区分？</span></a></h4><p>都是同步IO</p><p>处理IO方面都是同步IO</p><h4 id="区分同步io-异步io" tabindex="-1"><a class="header-anchor" href="#区分同步io-异步io"><span>区分同步IO 异步IO</span></a></h4><p><img src="'+g+'" alt="image-20230523230533174" loading="lazy"></p><p>在<strong>第二阶段</strong>，前四个都会阻塞，前四个都是同步IO</p><h2 id="扩展-惊群效应" tabindex="-1"><a class="header-anchor" href="#扩展-惊群效应"><span>扩展：惊群效应</span></a></h2><ul><li>linux惊群效应 <ul><li>参考：https://blog.csdn.net/sinat_35297665/article/details/80569656<br> 转自：https://blog.csdn.net/lyztyycode/article/details/78648798?locationNum=6&amp;fps=1<br> 详细的介绍什么是惊群，惊群在线程和进程中的具体表现，惊群的系统消耗和惊群的处理方法。</li></ul></li></ul><h3 id="惊群效应是什么" tabindex="-1"><a class="header-anchor" href="#惊群效应是什么"><span>惊群效应是什么？</span></a></h3><p><strong>惊群效应也有人叫做雷鸣群体效应</strong>，不过叫什么，简言之：<br> 惊群现象就是多进程（多线程）在同时阻塞等待同一个事件的时候（休眠状态），如果等待的这个事件发生，那么他就会唤醒等待的所有进程（或者线程），但是最终却只可能有一个进程（线程）获得这个时间的“控制权”，对该事件进行处理，而其他进程（线程）获取“控制权”失败，只能重新进入休眠状态。<br> 这种现象和性能浪费就叫做惊群。</p><p>为了更好的理解何为惊群，举一个很简单的例子，当你往一群鸽子中间扔一粒谷子，所有的各自都被惊动前来抢夺这粒食物，但是最终注定只可能有一个鸽子满意的抢到食物，没有抢到的鸽子只好回去继续睡觉，等待下一粒谷子的到来。这里鸽子表示进程（线程），那粒谷子就是等待处理的事件。</p><p><strong>看一下：</strong> <a href="https://en.m.wikipedia.org/wiki/Thundering_herd_problem" target="_blank" rel="noopener noreferrer">WIKI的雷鸣群体效应的解释</a></p><h3 id="惊群效应到底消耗了什么" tabindex="-1"><a class="header-anchor" href="#惊群效应到底消耗了什么"><span>惊群效应到底消耗了什么？</span></a></h3><p>我想你应该也会有跟我一样的问题，那就是惊群效应到底消耗了什么？</p><ol><li>系统对用户进程/线程频繁地做无效的调度，上下文切换系统性能大打折扣。</li><li>为了确保只有一个线程得到资源，用户必须对资源操作进行加锁保护，进一步加大了系统开销。</li></ol><p>是不是还是觉得不够深入，概念化？看下面：</p><ol><li>上下文切换（context switch）过高会导致cpu像个搬运工，频繁地在寄存器和运行队列之间奔波，<br> 更多的时间花在了进程（线程）切换，而不是在真正工作的进程（线程）上面。<br> 直接的消耗包括cpu寄存器要保存和加载（例如程序计数器）、系统调度器的代码需要执行。<br> 间接的消耗在于多核cache之间的共享数据。<br><strong>看一下：</strong> <a href="https://en.m.wikipedia.org/wiki/Context_switch" target="_blank" rel="noopener noreferrer">wiki上下文切换</a></li><li>通过锁机制解决惊群效应是一种方法，在任意时刻只让一个进程（线程）处理等待的事件。但是锁机制也会造成cpu等资源的消耗和性能损耗。<br> 目前一些常见的服务器软件有的是通过锁机制解决的，比如nginx（它的锁机制是默认开启的，可以关闭）；<br> 还有些认为惊群对系统性能影响不大，没有去处理，比如lighttpd。</li></ol><h3 id="惊群效应的庐山真面目" tabindex="-1"><a class="header-anchor" href="#惊群效应的庐山真面目"><span>惊群效应的庐山真面目</span></a></h3><p><strong>让我们从进程和线程两个方面来揭开惊群效应的庐山真面目：</strong></p><h4 id="accept-惊群" tabindex="-1"><a class="header-anchor" href="#accept-惊群"><span>accept() 惊群</span></a></h4><h2 id="扩展-c10k问题" tabindex="-1"><a class="header-anchor" href="#扩展-c10k问题"><span>扩展：c10k问题</span></a></h2><ul><li>c10k问题 <ul><li>参考：https://evernote.blog.csdn.net/article/details/102780959</li></ul></li></ul><h3 id="c10k问题简述" tabindex="-1"><a class="header-anchor" href="#c10k问题简述"><span>C10k问题简述</span></a></h3><p>所谓c10k问题，指的是：服务器如何支持<strong>10k个并发连接</strong>，也就是concurrent 10000 connection（这也是c10k这个名字的由来）。</p><p>由于硬件成本的大幅度降低和硬件技术的进步，如果一台服务器能够同时服务更多的客户端，那么也就意味着服务每一个客户端的成本大幅度降低。从这个角度来看，c10k问题显得非常有意义。</p><h3 id="一、c10k问题由来" tabindex="-1"><a class="header-anchor" href="#一、c10k问题由来"><span>一、C10K问题由来</span></a></h3><p>互联网的基础是网络通信，早期的互联网可以说是一个小群体的集合。互联网还不够普及，用户也不多，一台服务器同时在线100个用户，在当时已经算是大型应用了，所以并不存在 C10K 的难题。互联网的爆发期是在www网站、浏览器出现后。最早的互联网称之为Web1.0，大部分的使用场景是下载一个HTML页面，用户在浏览器中查看网页上的信息，这个时期也不存在C10K问题。</p><p>Web2.0时代到来后，就不同了。一方面是，互联网普及率大大提高了，用户群体几何倍增长。另一方面是，互联网不再是单纯地浏览www网页，逐渐开始进行交互，而且应用程序的逻辑也变得更复杂。<strong>从简单的表单提交，到即时通信和在线实时互动，C10K的问题才体现出来了。因为每一个用户都必须与服务器保持连接，才能进行实时数据交互</strong>。诸如Facebook这样的网站，同一时间的并发TCP连接很可能已经过亿。</p><blockquote><p>早期的腾讯QQ也同样面临C10K问题，只不过他们是用了UDP这种原始的包交换协议来实现的，绕开了这个难题，当然过程肯定是痛苦的。如果当时有epoll技术，他们肯定会用TCP。众所周之，后来的手机QQ、微信都采用TCP协议。</p><p>实际上，当时也有异步模式，如：select/poll模型。这些技术都有一定的缺点：selelct最大不能超过1024；poll没有限制，但每次收到数据时，需要遍历每一个连接，查看哪个连接有数据请求。</p></blockquote><p>这时候问题就来了，<strong>最初的服务器都是基于进程/线程模型的，新到来一个TCP连接，就需要分配1个进程（或者线程）。进程又是操作系统最昂贵的资源，一台机器无法创建很多进程。如果是C10K，就要创建1万个进程，那么就单机而言，操作系统是无法承受的</strong>（往往出现效率低下、甚至完全瘫痪）。<br> 如果是采用分布式系统，维持1亿用户在线需要10万台服务器，成本巨大，也只有Facebook、Google、Apple等巨头，才有财力购买如此多的服务器。</p><p>基于上述考虑，<strong>如何突破单机性能局限，是高性能网络编程所必须要直面的问题</strong>。这些局限和问题，最早被Dan Kegel 进行了归纳和总结，并首次系统地分析和提出了解决方案。后来，这种普遍的网络现象和技术局限，都被大家称为 C10K 问题。</p><h3 id="c10k问题的本质" tabindex="-1"><a class="header-anchor" href="#c10k问题的本质"><span>C10K问题的本质</span></a></h3><p><strong>C10K问题，本质上是操作系统的问题</strong>。对于Web1.0/2.0时代的操作系统而言， 传统的同步阻塞I/O模型都是一样的，处理的方式都是requests per second，并发10K和100的区别关键在于CPU。</p><p>创建的进程、线程多了，数据拷贝频繁（缓存I/O、内核将数据拷贝到用户进程空间、阻塞）， 进程/线程上下文切换消耗大， 导致操作系统崩溃，这就是C10K问题的本质！</p><p>可见，解决C10K问题的关键就是：<strong>尽可能减少CPU等核心资源消耗</strong>，从而榨干单台服务器的性能，突破C10K问题所描述的瓶颈。</p><h3 id="c10k问题的解决方案探讨" tabindex="-1"><a class="header-anchor" href="#c10k问题的解决方案探讨"><span>C10K问题的解决方案探讨</span></a></h3><p>从网络编程技术的角度来说，主要思路为：</p><ol><li>为每个连接分配一个独立的线程/进程。</li><li>同一个线程/进程同时处理多个连接**（IO多路复用）**。</li></ol><h4 id="为每个连接分配一个独立的线程-进程" tabindex="-1"><a class="header-anchor" href="#为每个连接分配一个独立的线程-进程"><span>为每个连接分配一个独立的线程/进程</span></a></h4><h4 id="同一个线程-进程同时处理多个连接-io多路复用" tabindex="-1"><a class="header-anchor" href="#同一个线程-进程同时处理多个连接-io多路复用"><span>同一个线程/进程同时处理多个连接（IO多路复用）</span></a></h4><p><strong>实现方式1：循环逐个处理各个连接，每个连接对应一个 socket</strong></p><p><strong>实现方式2：使用select方法</strong></p><p><strong>实现方式3：使用poll方法</strong></p><p><strong>实现方式4：使用epoll方法</strong></p><p><strong>实现方式5：使用libevent库</strong></p><h3 id="引申讨论c10m问题" tabindex="-1"><a class="header-anchor" href="#引申讨论c10m问题"><span>引申讨论C10M问题</span></a></h3><p>随着技术的演进，epoll已经可以较好地处理 C10K 问题。但是，如果要进一步的扩展，例如支持10M 规模的并发连接，原有的技术就无能为力了。那么，新的瓶颈在哪里呢？</p><p>从前面的演化过程中，我们可以看到，<strong>根本的思路是：要高效地去除阻塞，让CPU更多地处理核心任务</strong>。所以，就千万级并发而言，内核不是解决方案，而是问题所在！</p><p>...</p><p>...</p><p>...</p><p>这就是协程的本质。<code>协程是异步非阻塞的另外一种展现形式</code>。Golang、Erlang、Lua协程都是这个模型。</p><h4 id="同步阻塞" tabindex="-1"><a class="header-anchor" href="#同步阻塞"><span>同步阻塞</span></a></h4><p>大家看完协程，是否感觉到：实际上，协程和同步阻塞是一样的。答案是正确的。所以，<strong>协程</strong>也叫做<strong>用户态进程/用户态线程</strong>。区别就在于：进程/线程是操作系统充当了EventLoop调度，而协程是应用程序自己用Epoll进行调度。</p><p>协程的优点是：它比系统线程开销小。其缺点是：如果其中一个协程中有密集计算，其他的协程就不运行了。</p><p>操作系统进程的优点是：无论代码怎么写，所有进程都可以并发运行。其缺点是：开销大。</p><p>...</p><p>...</p><p>...</p><p>实际上，同步阻塞程序的性能并不差，它的效率很高，不会浪费资源。当进程发生阻塞后，操作系统会将它挂起，不会分配CPU。直到数据到达，才会重新分配CPU。只是进程开多了之后，多进程的副作用才明显，因为进程多了，互相切换开销太大。所以，如果一个服务器程序只有1000左右的并发连接，同步阻塞模式是最好的。</p><h4 id="异步回调和协程哪个性能好" tabindex="-1"><a class="header-anchor" href="#异步回调和协程哪个性能好"><span>异步回调和协程哪个性能好</span></a></h4><p><code>协程虽然是用户态调度，实际上还是需要调度的。既然存在调度，就存在上下文切换</code>。所以，协程虽然比操作系统进程性能要好，但总还是有额外消耗的。<code>而异步回调是没有切换开销的，它等同于顺序执行代码</code>。所以，<strong>异步回调程序的性能</strong>是要优于<strong>协程模型的性能</strong>。</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3><p>[1] <a href="http://www.52im.net/thread-279-1-1.html" target="_blank" rel="noopener noreferrer">为什么QQ用的是UDP协议而不是TCP协议？</a><br> [2] <a href="http://www.52im.net/thread-33-1-1.html" target="_blank" rel="noopener noreferrer">移动端IM/推送系统的协议选型：UDP还是TCP？</a><br> [3] <a href="http://www.52im.net/thread-560-1-1.html" target="_blank" rel="noopener noreferrer">高性能网络编程经典：《The C10K problem(英文)》附件下载</a><br> [4] <a href="http://www.52im.net/thread-561-1-1.html" target="_blank" rel="noopener noreferrer">高性能网络编程(一)：单台服务器并发TCP连接数到底可以有多少</a><br> [5] 《The C10K problem （<a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener noreferrer">英文在线阅读</a>、<a href="http://www.52im.net/thread-560-1-1.html" target="_blank" rel="noopener noreferrer">英文PDF版下载</a>、<a href="http://blog.csdn.net/goldou/article/details/2579781" target="_blank" rel="noopener noreferrer">中文译文</a>）》<br> [6] <a href="http://www.52im.net/forum.php?mod=misc&amp;action=attachpay&amp;aid=1526&amp;tid=566" target="_blank" rel="noopener noreferrer">搜狗实验室技术交流文档《C10K问题探讨》(52im.net).pdf</a> (350.83 KB)<br> [7] <a href="http://www.52im.net/thread-513-1-1.html" target="_blank" rel="noopener noreferrer">【通俗易懂】深入理解TCP协议（上）：理论基础</a><br> [8] <a href="http://www.52im.net/thread-515-1-1.html" target="_blank" rel="noopener noreferrer">【通俗易懂】深入理解TCP协议（下）：RTT、滑动窗口、拥塞处理</a><br> [9] <a href="http://www.52im.net/topic-tcpipvol1.html" target="_blank" rel="noopener noreferrer">《TCP/IP详解 卷1：协议 (在线阅读版)》</a></p><h2 id="网络演变过程总结" tabindex="-1"><a class="header-anchor" href="#网络演变过程总结"><span>网络演变过程总结</span></a></h2>',163)]))}const u=s(A,[["render",y],["__file","网络编程.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html","title":"网络编程","lang":"zh-CN","frontmatter":{"description":"参考：【B站】网络编程系列(select、poll、epoll、Reactor模型、Proactor模型) 前置知识 整个网络演变过程 阻塞IO (BIO) 非阻塞IO (NIO) IO多路复用第一版 (select/poll) IO多路复用第二版 (epoll) 信号驱动IO 异步IO (AIO) 问题：编写一个server的步骤 server是怎么...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"参考：【B站】网络编程系列(select、poll、epoll、Reactor模型、Proactor模型) 前置知识 整个网络演变过程 阻塞IO (BIO) 非阻塞IO (NIO) IO多路复用第一版 (select/poll) IO多路复用第二版 (epoll) 信号驱动IO 异步IO (AIO) 问题：编写一个server的步骤 server是怎么..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":20.65,"words":6194},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/网络编程/网络编程.md","excerpt":"<p>参考：<a href=\\"https://www.bilibili.com/video/BV12U4y167sf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【B站】网络编程系列(select、poll、epoll、Reactor模型、Proactor模型)</a></p>\\n<h2>前置知识</h2>\\n<p>整个网络演变过程</p>\\n<ol>\\n<li>阻塞IO (BIO)</li>\\n<li>非阻塞IO (NIO)</li>\\n<li>IO多路复用第一版 (select/poll)</li>\\n<li>IO多路复用第二版 (epoll)</li>\\n<li>信号驱动IO</li>\\n<li>异步IO (AIO)</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/网络编程/网络编程.md","value":{"title":"网络编程","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络编程与网络模型与网络架构/网络编程/网络编程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,v as data};
