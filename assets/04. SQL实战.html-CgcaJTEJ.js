import{_ as a,e as n,g as t,o}from"./app-DPU1xou8.js";const p={};function r(i,e){return o(),n("div",null,e[0]||(e[0]=[t('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="sql实战" tabindex="-1"><a class="header-anchor" href="#sql实战"><span>SQL实战</span></a></h1><h2 id="取得每个部门最高薪水的人员名称" tabindex="-1"><a class="header-anchor" href="#取得每个部门最高薪水的人员名称"><span>取得每个部门最高薪水的人员名称</span></a></h2><p>方案：子查询构建临时表 + 用临时表参与join on连接</p><h2 id="那些人的薪水在部门的平均薪水之上" tabindex="-1"><a class="header-anchor" href="#那些人的薪水在部门的平均薪水之上"><span>那些人的薪水在部门的平均薪水之上</span></a></h2><p>方案：子查询构建临时表 + 用临时表参与join on连接</p><h2 id="取得部门中-所有人的-平均的薪水等级" tabindex="-1"><a class="header-anchor" href="#取得部门中-所有人的-平均的薪水等级"><span>取得部门中（所有人的）平均的薪水等级</span></a></h2><p>方案：查询 + 分组查询分组函数（由于group by优先级在后，不需要用到嵌套）</p><p>个人总结：子查询（嵌套）一般是走顺序流程不能一套弄完才需要的，如不能select以后再select一次</p><h2 id="不准用分组函数-max-取得最高薪水" tabindex="-1"><a class="header-anchor" href="#不准用分组函数-max-取得最高薪水"><span>不准用分组函数（Max），取得最高薪水</span></a></h2><p>方案1：order by + limit</p><p>方案2：表的自连接（利用笛卡尔积，类似于for循环比较的方式）</p><h2 id="取得平均薪水最高的部门的部门编号-两种解决方案" tabindex="-1"><a class="header-anchor" href="#取得平均薪水最高的部门的部门编号-两种解决方案"><span>取得平均薪水最高的部门的部门编号（两种解决方案）</span></a></h2><p>方案1：order by + limit</p><p>方案2：分组查询分组函数(avg)结果作为from子查询 + 分组查询分组函数(max) 结果作为子查询 + 连接</p>',16)]))}const s=a(p,[["render",r],["__file","04. SQL实战.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/04.%20SQL%E5%AE%9E%E6%88%98.html","title":"MySQL","lang":"zh-CN","frontmatter":{"description":"MySQL 目录 SQL实战 取得每个部门最高薪水的人员名称 方案：子查询构建临时表 + 用临时表参与join on连接 那些人的薪水在部门的平均薪水之上 方案：子查询构建临时表 + 用临时表参与join on连接 取得部门中（所有人的）平均的薪水等级 方案：查询 + 分组查询分组函数（由于group by优先级在后，不需要用到嵌套） 个人总结：子查询...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/02.%20MySQL/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/04.%20SQL%E5%AE%9E%E6%88%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MySQL"}],["meta",{"property":"og:description","content":"MySQL 目录 SQL实战 取得每个部门最高薪水的人员名称 方案：子查询构建临时表 + 用临时表参与join on连接 那些人的薪水在部门的平均薪水之上 方案：子查询构建临时表 + 用临时表参与join on连接 取得部门中（所有人的）平均的薪水等级 方案：查询 + 分组查询分组函数（由于group by优先级在后，不需要用到嵌套） 个人总结：子查询..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/个人总结/04. SQL实战.md","excerpt":"\\n<h1>目录</h1>\\n<h1>SQL实战</h1>\\n<h2>取得每个部门最高薪水的人员名称</h2>\\n<p>方案：子查询构建临时表 + 用临时表参与join on连接</p>\\n<h2>那些人的薪水在部门的平均薪水之上</h2>\\n<p>方案：子查询构建临时表 + 用临时表参与join on连接</p>\\n<h2>取得部门中（所有人的）平均的薪水等级</h2>\\n<p>方案：查询 + 分组查询分组函数（由于group by优先级在后，不需要用到嵌套）</p>\\n<p>个人总结：子查询（嵌套）一般是走顺序流程不能一套弄完才需要的，如不能select以后再select一次</p>\\n<h2>不准用分组函数（Max），取得最高薪水</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/个人总结/04. SQL实战.md","value":{"title":"04. SQL实战","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/04. 后端/数据库/02. MySQL/个人总结/04. SQL实战.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,h as data};
