import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as l,c as i,a as e,b as t,d as n,e as r}from"./app-wsUEcXLu.js";const d={},c=e("h1",{id:"解析路由",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#解析路由"},[e("span",null,"解析路由")])],-1),u=e("h2",{id:"获取全部路由",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#获取全部路由"},[e("span",null,"获取全部路由")])],-1),p={href:"https://vuepress.github.io/zh/reference/client-api.html#useroutes",target:"_blank",rel:"noopener noreferrer"},h=r(`<p><code>useRoutes</code> 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import { useRoutes } from &#39;vuepress/client&#39;

const routes = useRoutes()
// {
//   &#39;/&#39;: { meta: { title: &#39;Home&#39; }, loader: HomePageLoader },
//   &#39;/404.html&#39;: { meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader },
//   ...
// }

const routePaths = computed(() =&gt; Object.keys(routes.value))
// =&gt; [’/‘, &#39;/404.html&#39;, &#39;/foo/&#39;, &#39;/bar/&#39;, ...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由地址" tabindex="-1"><a class="header-anchor" href="#解析路由地址"><span>解析路由地址</span></a></h2>`,3),m={href:"https://vuepress.github.io/zh/reference/client-api.html#resolveroutepath",target:"_blank",rel:"noopener noreferrer"},v=r(`<p><code>resolveRoutePath</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由地址:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import { resolveRoutePath } from &#39;vuepress/client&#39;

const routePath = resolveRoutePath(&#39;/foo/&#39;) // =&gt; &#39;/foo/&#39;
const routePath = resolveRoutePath(&#39;baz.html&#39;, &#39;/foo/bar.html&#39;) // =&gt; &#39;/foo/baz.html&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由信息" tabindex="-1"><a class="header-anchor" href="#解析路由信息"><span>解析路由信息</span></a></h2>`,3),b={href:"https://vuepress.github.io/zh/reference/client-api.html#resolveroute",target:"_blank",rel:"noopener noreferrer"},g=r(`<p><code>resolveRoute</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由信息:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>import { resolveRoute } from &#39;vuepress/client&#39;

const route = resolveRoute(&#39;/foo/&#39;) // =&gt; { notFound: false, path: &#39;/foo/&#39;, meta: { title: &#39;Foo&#39; }, loader: FooPageLoader }
const route = resolveRoute(&#39;baz.html&#39;, &#39;/foo/bar.html&#39;) // =&gt; { notFound: false, path: &#39;/foo/baz.html&#39;, meta: { title: &#39;Baz&#39; }, loader: BazPageLoader }
const route = resolveRoute(&#39;/not-exist.html&#39;) // =&gt; { notFound: true, path: &#39;/not-exist.html&#39;, meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由信息中存在一个 <code>notFound</code> 字段，用于标识给定的路径是否存在对应的路由。当路由不存在时，返回值中的 <code>notFound</code> 字段为 <code>true</code>，其 <code>path</code> 字段为规范化后的路径，而 <code>meta</code> 和 <code>loader</code> 字段则会指向默认的 404 页面。</p>`,3);function E(f,_){const o=s("ExternalLinkIcon");return l(),i("div",null,[c,u,e("p",null,[t("在开发主题和插件时，你可能希望获取所有页面的信息。通过 "),e("a",p,[t("useRoutes"),n(o)]),t(" 就可以获取所有页面的路由记录。")]),h,e("p",null,[t("你可以使用 "),e("a",m,[t("resolveRoutePath"),n(o)]),t(" 来解析给定的链接对应的路由路径。")]),v,e("p",null,[t("你可以使用 "),e("a",b,[t("resolveRoute"),n(o)]),t(" 来解析给定的链接对应的路由信息。")]),g])}const R=a(d,[["render",E],["__file","07. 解析路由.html.vue"]]),P=JSON.parse(`{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3/04.%20Cookbook/07.%20%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1.html","title":"解析路由","lang":"zh-CN","frontmatter":{"description":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 useRoutes 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 resolveRoutePath 来解析给定的链接对应的路由路径。 r...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3/04.%20Cookbook/07.%20%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"解析路由"}],["meta",{"property":"og:description","content":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 useRoutes 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 resolveRoutePath 来解析给定的链接对应的路由路径。 r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解析路由\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"解析路由","slug":"解析路由","link":"#解析路由","children":[{"level":2,"title":"获取全部路由","slug":"获取全部路由","link":"#获取全部路由","children":[]},{"level":2,"title":"解析路由地址","slug":"解析路由地址","link":"#解析路由地址","children":[]},{"level":2,"title":"解析路由信息","slug":"解析路由信息","link":"#解析路由信息","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/VuePress2 (Vue3)/官网文档/04. Cookbook/07. 解析路由.md","excerpt":"\\n<h2>获取全部路由</h2>\\n<p>在开发主题和插件时，你可能希望获取所有页面的信息。通过 <a href=\\"https://vuepress.github.io/zh/reference/client-api.html#useroutes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">useRoutes</a> 就可以获取所有页面的路由记录。</p>\\n<p><code>useRoutes</code> 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>import { useRoutes } from 'vuepress/client'\\n\\nconst routes = useRoutes()\\n// {\\n//   '/': { meta: { title: 'Home' }, loader: HomePageLoader },\\n//   '/404.html': { meta: { title: 'Not Found' }, loader: NotFoundPageLoader },\\n//   ...\\n// }\\n\\nconst routePaths = computed(() =&gt; Object.keys(routes.value))\\n// =&gt; [’/‘, '/404.html', '/foo/', '/bar/', ...]\\n</code></pre></div>","autoDesc":true}`);export{R as comp,P as data};
