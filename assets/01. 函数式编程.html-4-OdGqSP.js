import{_ as a,c as s,e as t,o as e}from"./app-C-bjNnVy.js";const p={};function l(o,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程"><span>函数式编程</span></a></h1><p>Java函数都在类中，详见类中函数一节</p><h2 id="在类外定义方法" tabindex="-1"><a class="header-anchor" href="#在类外定义方法"><span>在类外定义方法</span></a></h2><p><mark>与C++不同</mark></p><ul><li>Java / C# <ul><li>Java函数都在类中</li><li>这是<strong>纯面向对象</strong>语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。</li></ul></li><li>C++ <ul><li>允许在类外定义变量、方法、事件等</li></ul></li></ul><h2 id="可变的参数数量" tabindex="-1"><a class="header-anchor" href="#可变的参数数量"><span>可变的参数数量</span></a></h2><p>在Java SE 5.0以前的版本中，每个Java方法都有固定数量的参数。 然而，现在的版本提供了可以用可变的参数数量调用的方法（有时称为“变参”方法）</p><h3 id="举例-printf" tabindex="-1"><a class="header-anchor" href="#举例-printf"><span>举例 - printf</span></a></h3><ul><li><p>使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 和</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">&quot;widgets&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 都是调用同一个方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStream</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这里的省略号...是Java代码的一部分，它表明这个方法可以接收任意数量的对象（除fmt参数之外）</span>
    <span class="token keyword">public</span> <span class="token class-name">PrintStream</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">String</span> fmt<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="举例-计算若干个数值的最大值" tabindex="-1"><a class="header-anchor" href="#举例-计算若干个数值的最大值"><span>举例 - 计算若干个数值的最大值</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 定义</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> largest <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE_INFINITY</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">&gt;</span>largest<span class="token punctuation">)</span> largest <span class="token operator">=</span> v<span class="token punctuation">;</span>
    reutrn largest<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">double</span> m <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">,</span> <span class="token number">40.4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 编译器将new double[]{3.1，40.4，–5}传递给max方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对旧方法扩展" tabindex="-1"><a class="header-anchor" href="#对旧方法扩展"><span>对旧方法扩展</span></a></h3><p>可以将已经存在且最后一个参数是数组的方法重新定义为可变参数的方法，而不会破坏任何已经存在的代码</p><p>例如，MessageFormat.format在Java SE 5.0就采用了这种方法。将main方法声明为下列形式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="与c-不同" tabindex="-1"><a class="header-anchor" href="#与c-不同"><span><mark>与C++不同</mark></span></a></h3><p>可变参数类型</p><ul><li><p>Java</p><ul><li><p>可变参数类型，有时称为“变参”方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">PrintStream</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">String</span> fmt<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>TypeScript</p><ul><li><p>叫剩余参数，参考 https://www.tslang.cn/docs/handbook/functions.html</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">&quot;Joseph&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Samuel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lucas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MacKinzie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Python</p><ul><li><p>Python的可变参数有两种，一种是列表类型，一种是字典类型</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># a接受一个常规参数，*args 接收的是一个tuple，**kwargs 接收一个dict</span>
<span class="token keyword">def</span> <span class="token function">ff</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token operator">**</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 1232</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># (4, 5, 6, 7, 8)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment"># {&#39;ss&#39;: &#39;sadf&#39;, &#39;xx&#39;: &#39;fff&#39;, &#39;ww&#39;: &#39;asdf&#39;}</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    ff<span class="token punctuation">(</span><span class="token number">1232</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>ss<span class="token operator">=</span><span class="token string">&quot;sadf&quot;</span><span class="token punctuation">,</span>xx<span class="token operator">=</span><span class="token string">&quot;fff&quot;</span><span class="token punctuation">,</span>ww<span class="token operator">=</span><span class="token string">&quot;asdf&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><p>参考</p><ul><li>https://blog.csdn.net/qychjj/article/details/98532841（含原理）</li><li>https://www.bilibili.com/read/cv13120050</li></ul></li><li><p>可变参数函数 - <code>...</code>，也叫 VA函数（variable argument function）</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>void func1(unsigned int argsNum, ...) {}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可变参数宏 - <code> __VA_ARGS__</code></p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// 略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可变参数模板 - <code>initializer_list</code></p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// 略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul>`,20)]))}const i=a(p,[["render",l],["__file","01. 函数式编程.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/05.%20%E5%B0%81%E8%A3%85/01.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 函数式编程 Java函数都在类中，详见类中函数一节 在类外定义方法 与C++不同 Java / C# Java函数都在类中 这是纯面向对象语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。 C++ 允许在类外定义变量、方法、事件等 可变的参数数量...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/05.%20%E5%B0%81%E8%A3%85/01.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 函数式编程 Java函数都在类中，详见类中函数一节 在类外定义方法 与C++不同 Java / C# Java函数都在类中 这是纯面向对象语言的通用标准，C#也是如此： 不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。 即便是主函数的main，也必须定义在某个类里面。 C++ 允许在类外定义变量、方法、事件等 可变的参数数量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[{"level":2,"title":"在类外定义方法","slug":"在类外定义方法","link":"#在类外定义方法","children":[]},{"level":2,"title":"可变的参数数量","slug":"可变的参数数量","link":"#可变的参数数量","children":[{"level":3,"title":"举例 - printf","slug":"举例-printf","link":"#举例-printf","children":[]},{"level":3,"title":"举例 - 计算若干个数值的最大值","slug":"举例-计算若干个数值的最大值","link":"#举例-计算若干个数值的最大值","children":[]},{"level":3,"title":"对旧方法扩展","slug":"对旧方法扩展","link":"#对旧方法扩展","children":[]},{"level":3,"title":"与C++不同","slug":"与c-不同","link":"#与c-不同","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.07,"words":621},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/05. 封装/01. 函数式编程.md","excerpt":"\\n<h1>目录</h1>\\n<h1>函数式编程</h1>\\n<p>Java函数都在类中，详见类中函数一节</p>\\n<h2>在类外定义方法</h2>\\n<p><mark>与C++不同</mark></p>\\n<ul>\\n<li>Java / C#\\n<ul>\\n<li>Java函数都在类中</li>\\n<li>这是<strong>纯面向对象</strong>语言的通用标准，C#也是如此：\\n不允许在类外定义变量、方法、事件等，强调一切皆是对象的思想。\\n即便是主函数的main，也必须定义在某个类里面。</li>\\n</ul>\\n</li>\\n<li>C++\\n<ul>\\n<li>允许在类外定义变量、方法、事件等</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/05. 封装/01. 函数式编程.md","value":{"title":"01. 函数式编程","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/05. 封装/01. 函数式编程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,u as data};
