import{_ as n,e,g as s,o as a}from"./app-EuS-Ookm.js";const l={};function o(t,i){return a(),e("div",null,i[0]||(i[0]=[s('<h1 id="all-clion" tabindex="-1"><a class="header-anchor" href="#all-clion"><span>all_CLion</span></a></h1><h2 id="clion-in-windows" tabindex="-1"><a class="header-anchor" href="#clion-in-windows"><span>CLion in Windows</span></a></h2><p>可参考CLion官方的说明：<a href="https://www.jetbrains.com/help/clion/quick-tutorial-on-configuring-clion-on-windows.html" target="_blank" rel="noopener noreferrer">教程：在Windows上配置CLION</a><br> 这里介绍了CLion分别使用 <code>Windows MinGW</code>、<code>cygwin</code>、<code>WSL</code>、<code>系统工具链</code>、<code>Windows上的Clang/GDB</code> 的情况</p><p>如果你未曾使用CLion编译C++项目，那么你可能需要配置工具链。</p><h3 id="自带" tabindex="-1"><a class="header-anchor" href="#自带"><span>自带</span></a></h3><p>一般安装CLion他会捆绑一个C++环境给你，而这个他自己的C++环境通常可以被CLion自己所检测到，不需要额外处理。</p><p>参考：</p><ul><li>工具集: MinGW, w64 9.0</li><li>CMake: 3.24.2</li><li>构建工具: ninja.exe</li><li>C编译器: gcc.exe</li><li>C++编译器: g++.exe</li><li>捆绑的GDB: v12.1</li></ul><h3 id="自带-手动配置" tabindex="-1"><a class="header-anchor" href="#自带-手动配置"><span>自带 - 手动配置</span></a></h3><p>需要注意一点是，当CLion使用软件自身捆绑的环境变量时，他不给出具体路径。这里我尝试分析其部分的真实路径：（版本号检测出来和默认不给出路径的一样，应该是对的。<code>win</code> 可能可以替代成 <code>cygwin</code>）</p><ul><li>工具集: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\</code></li><li>CMake: <code>G:\\&lt;CLion安装路径&gt;\\bin\\cmake\\win\\x64\\bin\\cmake.exe</code></li><li>构建工具: <code>G:\\&lt;CLion安装路径&gt;\\bin\\ninja\\win\\x64\\ninja.exe</code></li><li>C编译器: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\bin\\gcc.exe</code></li><li>C++编译器: <code>G:\\&lt;CLion安装路径&gt;\\bin\\mingw\\bin\\g++.exe</code></li><li>捆绑的GDB: <code>G:\\&lt;CLion安装路径&gt;\\bin\\gdb\\win\\x64\\bin\\gdb.exe</code></li></ul><p>这里之所以要讲这个，一是为了方便给其他IDE复用这一部分环境，二是为了方便得知如何使用其他IDE或使用其他环境进行配置。</p><p>实际命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">G:\\</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;CLion安装路径&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\w</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make.exe </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--build</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> H:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">项目所在路</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">径&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">make-build-debug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">项目</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-j</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>其他大部分的环境类型，详见官网介绍，前面有链接</p><p>如果要使用vcpkg，见：<a href="https://www.jetbrains.com/help/clion/package-management.html" target="_blank" rel="noopener noreferrer">CLion - Vcpkg integration</a> (需要新版本CLion，23版本以上)</p><h3 id="msys2" tabindex="-1"><a class="header-anchor" href="#msys2"><span>Msys2</span></a></h3><p>不过官网并没有提到使用msys2的情况，这个也是可以的，这里进行补充：</p><p>见：https://youtrack.jetbrains.com/issue/CPP-22392</p><p>(注意这里我使用了 <code>ucrt64</code> 代替 <code>mingw64</code>，其与 Windows 10及以上的系统更兼容)</p><ul><li>工具集: <code>G:\\&lt;Msys2安装路径&gt;\\ucrt64</code></li><li>CMake: Bundled</li><li>构建工具: Bundled</li><li>C编译器: <code>G:\\&lt;s2M 安装路径&gt;\\ucrt64\\bin\\gcc.exe</code></li><li>C++编译器: <code>G:\\&lt;s2M 安装路径&gt;\\ucrt64\\bin\\g++.exe</code></li><li>捆绑的GDB: <code>G:\\&lt;s2M 安装路径&gt;\\ucrt64\\bin\\gdb.exe</code></li></ul><h2 id="clion-in-linux" tabindex="-1"><a class="header-anchor" href="#clion-in-linux"><span>CLion in Linux</span></a></h2><p>可参考CLion官方的说明：<a href="https://www.jetbrains.com/help/clion/quick-tutorial-on-configuring-clion-on-windows.html" target="_blank" rel="noopener noreferrer">教程：在Windows上配置CLION</a></p><p>或使用 WSL 也行</p>',25)]))}const p=n(l,[["render",o],["__file","09. all_CLion.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/09.%20all_CLion.html","title":"all_CLion","lang":"zh-CN","frontmatter":{"description":"all_CLion CLion in Windows 可参考CLion官方的说明：教程：在Windows上配置CLION 这里介绍了CLion分别使用 Windows MinGW、cygwin、WSL、系统工具链、Windows上的Clang/GDB 的情况 如果你未曾使用CLion编译C++项目，那么你可能需要配置工具链。 自带 一般安装CLion他...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/09.%20all_CLion.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"all_CLion"}],["meta",{"property":"og:description","content":"all_CLion CLion in Windows 可参考CLion官方的说明：教程：在Windows上配置CLION 这里介绍了CLion分别使用 Windows MinGW、cygwin、WSL、系统工具链、Windows上的Clang/GDB 的情况 如果你未曾使用CLion编译C++项目，那么你可能需要配置工具链。 自带 一般安装CLion他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"all_CLion\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.03,"words":609},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/09. all_CLion.md","excerpt":"\\n<h2>CLion in Windows</h2>\\n<p>可参考CLion官方的说明：<a href=\\"https://www.jetbrains.com/help/clion/quick-tutorial-on-configuring-clion-on-windows.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程：在Windows上配置CLION</a><br>\\n这里介绍了CLion分别使用 <code>Windows MinGW</code>、<code>cygwin</code>、<code>WSL</code>、<code>系统工具链</code>、<code>Windows上的Clang/GDB</code> 的情况</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/09. all_CLion.md","value":{"title":"09. all_CLion","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/09. all_CLion.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
