import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a as e}from"./app-CctSPqZW.js";const l="/assets/01905-ohlK8jPI.jpeg",t={},i=e('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="对象和类" tabindex="-1"><a class="header-anchor" href="#对象和类"><span>对象和类</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><p>OOP简概</p><ul><li>面向对象程序设计（简称OOP） <ul><li>在OOP中，不必关心对象的具体实现，只要能够满足用户的需求即可</li></ul></li><li>传统的结构化程序设计 <ul><li>通过设计一系列的过程（即算法）来求解问题。一旦确定了这些过程，就要开始考虑存储数据的方式。</li><li>这就是Pascal语言的设计者Niklaus Wirth将其著作命名为《算法+数据结构=程序》（Algorithms+Data Structures=Programs，Prentice Hall，1975）的原因。</li><li>在Wirth命名的书名中，算法是第一位的，数据结构是第二位的，这就明确地表述了程序员的工作方式。</li><li>传统的过程化程序设计，必须从顶部的main函数开始编写程序。在面向对象程序设计时没有所谓的“顶部”。对于学习OOP的初学者来说常常会感觉无从下手。答案是：首先从设计类开始，然后再往每个类中添加方法。</li></ul></li><li>选择 <ul><li>对于一些规模较小的问题，将其分解为过程的开发方式比较理想。而面向对象更加适用于解决规模较大的问题。</li><li>要想实现一个简单的Web浏览器可能需要大约2000个过程，这些过程可能需要对一组全局数据进行操作。 采用面向对象的设计风格，可能只需要大约100个类，每个类平均包含20个方法 后者更易于程序员掌握，也容易找到bug。假设给定对象的数据出错了，在访问过这个数据项的20个方法中查找错误要比在2000个过程中查找容易得多。</li></ul></li></ul><hr><p>类简概</p><ul><li>三个主要特性 <ul><li>对象的行为（behavior）——可以对对象完成哪些操作，或者可以对对象应用哪些方法</li><li>对象的状态（state）——当调用那些方法时，对象会如何相应</li><li>对象的标识（identity）——如何区分具有相同行为与状态的不同对象</li></ul></li><li>类、构造（construct）、实例（instance） <ul><li>是构造对象的模板或蓝图。由类构造对象的过程称为创建类的实例</li></ul></li><li>封装（encapsulation，有时称为数据隐藏） <ul><li>形式上看，封装不过是将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式</li><li>关键在于绝对不能让类中的方法直接地访问其他类的实例域。程序仅通过对象的方法与对象数据进行交互</li></ul></li><li>实例域（instance field）、方法（method） <ul><li>对象中的数据称为实例域，操纵数据的过程称为方法</li></ul></li><li>状态（state） <ul><li>对于每个特定的类实例（对象）都有一组特定的实例域值。这些值的集合就是这个对象的当前状态</li></ul></li><li>继承（inheritance） <ul><li>可以通过扩展一个类来建立另外一个新的类。扩展一个已有的类时，这个扩展后的新类具有所扩展的类的全部属性和方法。过程称为继承</li></ul></li><li>Object <ul><li>事实上，在Java中，所有的类都源自于一个“神通广大的超类”，它就是Object。</li></ul></li></ul><hr><p>类之间的关系</p><ul><li>依赖（dependence），即“uses-a”关系 <ul><li>应该尽可能地将相互依赖的类减至最少。用软件工程的术语来说，就是让类之间的耦合度最小。</li></ul></li><li>聚合（aggregation），即“has-a”关系 <ul><li>聚合关系意味着类A的对象包含类B的对象</li><li>有些方法学家不喜欢聚合这个概念，而更加喜欢使用“关联”这个术语。从建模的角度看，这是可以理解的。但对于程序员来说，“has-a”显得更加形象。</li></ul></li><li>继承（inheritance），即“is-a”关系 <ul><li>一种用于表示特殊与一般关系的</li></ul></li><li>UML符号 <ul><li>很多程序员采用UML（Unified Modeling Language，统一建模语言）绘制类图，用来描述类之间的关系。</li><li><img src="'+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></li><li><img src="https://g.gravizo.com/svg?
@startuml;
Class03*-- Class04;
Class05 o-- Class06;
Class07 .. Class08;
Class09 -- Class10;
Class21 %23-- Class22;
Class23 x-- Class24;
Class25 }-- Class26;
Class27 +-- Class28;
Class29 ^-- Class30;@enduml"></li></ul></li></ul><h2 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class"><span>类（class）</span></a></h2><h3 id="使用预定义类" tabindex="-1"><a class="header-anchor" href="#使用预定义类"><span>使用预定义类</span></a></h3><p>并不是所有的类都具有面向对象特征。例如Math类只封装了功能，它不需要也不必隐藏数据。</p><p><mark>与C/C++不同</mark>：外壳类</p><ul><li>用Java编写的所有代码都位于某个类的内部（包括main函数）</li><li>而C/C++、Python可以有代码在外面</li></ul><h2 id="使用预设类-通过data类介绍" tabindex="-1"><a class="header-anchor" href="#使用预设类-通过data类介绍"><span>使用预设类（通过Data类介绍）</span></a></h2><h3 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类"><span>定义类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Date</span> birthday <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个新对象" tabindex="-1"><a class="header-anchor" href="#创建一个新对象"><span>创建一个新对象</span></a></h3><p><strong>对象不等于对象变量。一个对象变量并没有实际包含一个对象，而仅仅引用一个对象</strong></p><p>在对象与对象变量之间存在着一个重要的区别，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Date</span> deadline<span class="token punctuation">;</span>			<span class="token comment">// dones&#39;t refer to any object</span>
s <span class="token operator">=</span> deadline<span class="token punctuation">.</span>toString<span class="token punctuation">;</span>	<span class="token comment">// not yet</span>

deadline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 必须首先初始化变量deadline或引用一个已经存在的对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://g.gravizo.com/svg?
@startuml;
object birthday1;
object birthday2;
class Date;
entity Date1;
birthday1 -&gt; Date1:引用;
birthday2 -&gt; Date1:引用;
Date1 -&gt; Date;
@enduml"></p><h3 id="对象的指针、引用、内存相关" tabindex="-1"><a class="header-anchor" href="#对象的指针、引用、内存相关"><span>对象的指针、引用、内存相关</span></a></h3><p><mark>与C/C++不同</mark>：指针还是引用？</p><p>很多人错误地认为Java对象变量与C++的引用类似。然而，<strong>在C++中没有空引用，并且引用不能被赋值</strong>。可以将Java的对象变量看作C++的对象指针</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// Java</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">Date</span><span class="token operator">*</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// C++</span>
<span class="token comment">// 不同于</span>
<span class="token class-name">Date</span><span class="token operator">&amp;</span> birthday<span class="token punctuation">;</span>	<span class="token comment">// C++，不可空引用、不可被赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>与C/C++不同</mark>：存储空间</p><blockquote><p>所有的Java对象都存储在堆中。当一个对象包含另一个对象变量时，这个变量依然包含着指向另一个堆对象的指针。</p><p>如果使用一个没有初始化的指针，运行系统将会产生一个运行时错误，而不是生成一个随机的结果。同时，不必担心内存管理问题，垃圾收集器将会处理相关的事宜。</p></blockquote><h2 id="自定义类" tabindex="-1"><a class="header-anchor" href="#自定义类"><span>自定义类</span></a></h2><p>主力类（workhorse class）</p><p>通常，这些类没有main方法，却有自己的实例域和实例方法。要想创建一个完整的程序，应该将若干类组合在一起，<strong>其中只有一个类有main方法</strong></p><h3 id="定义类-1" tabindex="-1"><a class="header-anchor" href="#定义类-1"><span>定义类</span></a></h3><p>类定义</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span>
<span class="token punctuation">{</span>
    field1<span class="token punctuation">;</span>			<span class="token comment">// 实例域</span>
    field2<span class="token punctuation">;</span>
    constructor1<span class="token punctuation">;</span>	<span class="token comment">// 构造器</span>
    constructor2<span class="token punctuation">;</span>
    method1<span class="token punctuation">;</span>		<span class="token comment">// 方法</span>
    method2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span>
<span class="token punctuation">{</span>
    <span class="token comment">// instance field</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Localdate</span> hireDay<span class="token punctuation">;</span>
    
    <span class="token comment">// constructor</span>
    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        name <span class="token operator">=</span> n<span class="token punctuation">;</span>
        salary <span class="token operator">=</span> s<span class="token punctuation">;</span>
        hireDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> moth<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// a method</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>james <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;James Bond&quot;</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">1950</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类设计技巧" tabindex="-1"><a class="header-anchor" href="#类设计技巧"><span>类设计技巧</span></a></h2><ul><li><p>1.一定要保证数据私有</p><ul><li>不要破坏封装性。需要编写一个访问器方法或更改器方法。即使出现bug也易于检测</li></ul></li><li><p>2.一定要对数据初始化</p><ul><li>Java不对局部变量进行初始化，但是会对<strong>对象的实例域</strong>进行初始化。最好不要依赖于系统的默认值</li></ul></li><li><p>3.不要在类中使用过多的基本类型</p><ul><li><p>例如，用一个称为Address的新的类替换以下的<strong>实例域</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> zip<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>4.不是所有的域都需要独立的域访问器和域更改器</p><ul><li>不想被知道的实例域就不需要域访问器和域更改器</li></ul></li><li><p>5.将职责过多的类进行分解</p><ul><li>设计模式</li></ul></li><li><p>6.类名和方法名要能够体现它们的职责</p></li><li><p>7.优先使用不可变的类</p><ul><li>例如LocalDate类以及java.time包中的其他类是不可变的——没有方法能修改对象的状态</li><li>更改对象的问题在于，如果多个线程试图同时更新一个对象，就会发生并发更改。其结果是不可预料的</li><li>当然，并不是所有类都应当是不可变的</li></ul></li></ul>`,43),p=[i];function c(o,u){return n(),s("div",null,p)}const v=a(t,[["render",c],["__file","01. 对象和类.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 对象和类 简概 OOP简概 面向对象程序设计（简称OOP） 在OOP中，不必关心对象的具体实现，只要能够满足用户的需求即可 传统的结构化程序设计 通过设计一系列的过程（即算法）来求解问题。一旦确定了这些过程，就要开始考虑存储数据的方式。 这就是Pascal语言的设计者Niklaus Wirth将其著作命名为《算法+数据结构=程序》（Al...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 对象和类 简概 OOP简概 面向对象程序设计（简称OOP） 在OOP中，不必关心对象的具体实现，只要能够满足用户的需求即可 传统的结构化程序设计 通过设计一系列的过程（即算法）来求解问题。一旦确定了这些过程，就要开始考虑存储数据的方式。 这就是Pascal语言的设计者Niklaus Wirth将其著作命名为《算法+数据结构=程序》（Al..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"对象和类","slug":"对象和类","link":"#对象和类","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":2,"title":"类（class）","slug":"类-class","link":"#类-class","children":[{"level":3,"title":"使用预定义类","slug":"使用预定义类","link":"#使用预定义类","children":[]}]},{"level":2,"title":"使用预设类（通过Data类介绍）","slug":"使用预设类-通过data类介绍","link":"#使用预设类-通过data类介绍","children":[{"level":3,"title":"定义类","slug":"定义类","link":"#定义类","children":[]},{"level":3,"title":"创建一个新对象","slug":"创建一个新对象","link":"#创建一个新对象","children":[]},{"level":3,"title":"对象的指针、引用、内存相关","slug":"对象的指针、引用、内存相关","link":"#对象的指针、引用、内存相关","children":[]}]},{"level":2,"title":"自定义类","slug":"自定义类","link":"#自定义类","children":[{"level":3,"title":"定义类","slug":"定义类-1","link":"#定义类-1","children":[]}]},{"level":2,"title":"类设计技巧","slug":"类设计技巧","link":"#类设计技巧","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.64,"words":1993},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Java/06. 面向对象/01. 面向对象/01. 对象和类.md","autoDesc":true}');export{v as comp,m as data};
