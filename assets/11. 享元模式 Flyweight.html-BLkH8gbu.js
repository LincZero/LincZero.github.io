import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,e as i}from"./app-Bl6HAa8e.js";const l={},a=i(`<h1 id="《c-设计模式》视频-李建忠" tabindex="-1"><a class="header-anchor" href="#《c-设计模式》视频-李建忠"><span>《C++设计模式》视频_李建忠</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>[toc]</p><h1 id="享元模式-flyweight" tabindex="-1"><a class="header-anchor" href="#享元模式-flyweight"><span>享元模式 Flyweight</span></a></h1><h2 id="所属分类——-对象性能-模式" tabindex="-1"><a class="header-anchor" href="#所属分类——-对象性能-模式"><span>所属分类——“对象性能” 模式</span></a></h2><p>略</p><h2 id="动机-motivation" tabindex="-1"><a class="header-anchor" href="#动机-motivation"><span>动机（Motivation）</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><ul><li>在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价</li><li>如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</li></ul><h3 id="代码体现" tabindex="-1"><a class="header-anchor" href="#代码体现"><span>代码体现</span></a></h3><p>一个key永远只有一个对象</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>// 字体（量很大）
class Font {
private:
	//unique object key
    string key;
	//object state
	//...
public:
	Font( const string&amp; key ){
		//...
	};
    
// 字体工厂
class FontFactory{
private:
	map&lt;string, Font*&gt; fontPool;	// 对象池
public:
	Font* GetFont(const string&amp; key){
        map&lt;string,Font*&gt;::iterator item=fontPool.find(key);	// 查找key
        if(item!=footPool.end()){								// 以前创建过，则从对象池里取出
			return fontPool[key];
		}
		else{													// 以前没创建过，则创建并添加进对象池里
			Fontx font=new Font(key);
            fontPool[key]=font;
			return font;
		}
    }
    void clear(){
        //...
    }
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h2><h3 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义"><span>模式定义</span></a></h3><blockquote><p>运用<strong>共享</strong>技术有效地支持<strong>大量</strong>细粒度的对象。</p><p>——《设计模式》GoF</p></blockquote><h3 id="结构-structure" tabindex="-1"><a class="header-anchor" href="#结构-structure"><span>结构（Structure）</span></a></h3><p>略</p><h3 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h3><ul><li>面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑对象的代价问题。 Flyweight主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。</li><li>Flyweight采用对象共享的做法来<strong>降低系统中对象的个数</strong>，从而降低细粒度对象给系统带来的内存压力。 在具体实现方面，要注意对象状态的处理。</li><li>对象的数量太大从而导致对象内存开销加大——什么样的数量才算大？ 这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</li></ul>`,19),s=[a];function o(r,c){return e(),n("div",null,s)}const u=t(l,[["render",o],["__file","11. 享元模式 Flyweight.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/11.%20%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%20Flyweight.html","title":"《C++设计模式》视频_李建忠","lang":"zh-CN","frontmatter":{"description":"《C++设计模式》视频_李建忠 目录 [toc] 享元模式 Flyweight 所属分类——“对象性能” 模式 略 动机（Motivation） 简概 在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价 如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/11.%20%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F%20Flyweight.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《C++设计模式》视频_李建忠"}],["meta",{"property":"og:description","content":"《C++设计模式》视频_李建忠 目录 [toc] 享元模式 Flyweight 所属分类——“对象性能” 模式 略 动机（Motivation） 简概 在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价 如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《C++设计模式》视频_李建忠\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《C++设计模式》视频_李建忠","slug":"《c-设计模式》视频-李建忠","link":"#《c-设计模式》视频-李建忠","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"享元模式 Flyweight","slug":"享元模式-flyweight","link":"#享元模式-flyweight","children":[{"level":2,"title":"所属分类——“对象性能” 模式","slug":"所属分类——-对象性能-模式","link":"#所属分类——-对象性能-模式","children":[]},{"level":2,"title":"动机（Motivation）","slug":"动机-motivation","link":"#动机-motivation","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"代码体现","slug":"代码体现","link":"#代码体现","children":[]}]},{"level":2,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[{"level":3,"title":"模式定义","slug":"模式定义","link":"#模式定义","children":[]},{"level":3,"title":"结构（Structure）","slug":"结构-structure","link":"#结构-structure","children":[]},{"level":3,"title":"要点总结","slug":"要点总结","link":"#要点总结","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.63,"words":490},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/11. 享元模式 Flyweight.md","excerpt":"\\n<h1>目录</h1>\\n<p>[toc]</p>\\n<h1>享元模式 Flyweight</h1>\\n<h2>所属分类——“对象性能” 模式</h2>\\n<p>略</p>\\n<h2>动机（Motivation）</h2>\\n<h3>简概</h3>\\n<ul>\\n<li>在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价</li>\\n<li>如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</li>\\n</ul>\\n<h3>代码体现</h3>\\n<p>一个key永远只有一个对象</p>\\n<div class=\\"language-c++\\" data-ext=\\"c++\\" data-title=\\"c++\\"><pre class=\\"language-c++\\"><code>// 字体（量很大）\\nclass Font {\\nprivate:\\n\\t//unique object key\\n    string key;\\n\\t//object state\\n\\t//...\\npublic:\\n\\tFont( const string&amp; key ){\\n\\t\\t//...\\n\\t};\\n    \\n// 字体工厂\\nclass FontFactory{\\nprivate:\\n\\tmap&lt;string, Font*&gt; fontPool;\\t// 对象池\\npublic:\\n\\tFont* GetFont(const string&amp; key){\\n        map&lt;string,Font*&gt;::iterator item=fontPool.find(key);\\t// 查找key\\n        if(item!=footPool.end()){\\t\\t\\t\\t\\t\\t\\t\\t// 以前创建过，则从对象池里取出\\n\\t\\t\\treturn fontPool[key];\\n\\t\\t}\\n\\t\\telse{\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// 以前没创建过，则创建并添加进对象池里\\n\\t\\t\\tFontx font=new Font(key);\\n            fontPool[key]=font;\\n\\t\\t\\treturn font;\\n\\t\\t}\\n    }\\n    void clear(){\\n        //...\\n    }\\n};\\n</code></pre></div>","autoDesc":true}');export{u as comp,v as data};
