import{_ as s,c as a,e as l,o as n}from"./app-CcegWvWz.js";const t={};function e(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="different-对象和类" tabindex="-1"><a class="header-anchor" href="#different-对象和类"><span>Different_对象和类</span></a></h1><h2 id="概念区别-什么是类-对象-面向对象语言" tabindex="-1"><a class="header-anchor" href="#概念区别-什么是类-对象-面向对象语言"><span>概念区别，什么是类 / 对象 / 面向对象语言</span></a></h2><p>各语言中，什么是类 / 对象 / 面向对象语言</p><h3 id="什么是类" tabindex="-1"><a class="header-anchor" href="#什么是类"><span>什么是类？</span></a></h3><p>（结合下一节一起看）</p><ul><li>类：我个人认为只要能将数据和方法绑定在一起，且能实现面向对象三大特性 (封装/继承/多态)，都能称之为类。</li><li><strong>Class类</strong> (大多数语言，如C++、Java、C#)：用 Class 关键字声明类，这是传统的类</li><li><strong>Struct类</strong> (C++/C、Go、Rust)：有的语言用 Struct 当作类，或允许 (C++、Go) 或不允许 (C) 数据和方法定义在一起<br> (C++结构体在C的基础上支持了方法的定义，但似乎一般不叫这个为类，也一般不这样用)</li><li><strong>原型类</strong> (JavaScript)：一个对象的原型相当于实例化自己的类，原型链上有自己的类、父类及祖先类<br> （在ES6及以后的版本中，JavaScript引入了 class 关键字，它提供了一种更接近传统面向对象语言的语法糖，但本质上仍然是基于原型的）</li><li><strong>无类</strong> (C)：没有类的概念，通常不支持数据与方法的绑定写法，不支持继承等操作。<br> 通常没有面向对象三大特性 (封装/继承/多态)。虽然强行用面向对象的方式写也没问题。但最多只能叫无类的面向对象。<br> 强行写的话：由于数据和方法无绑定，通常根据文件和命名方式绑定。无权限控制，我习惯用 <code>_</code> 结尾表示私有方法。继承上用组合替代继承。</li><li><strong>自定义类型类</strong> (Go)：Go的类不仅局限于Struct，自定义的类型通常都可以当作类来使用，都有面向对象的特性：可以继承任意类型、扩展类方法、实现接口</li></ul><h3 id="什么是对象" tabindex="-1"><a class="header-anchor" href="#什么是对象"><span>什么是对象？</span></a></h3><p>（结合上一节一起看）</p><ul><li>对象：这个不同语言定义的就不同了。我认为只要能有模板个创建多个有相同特征变量的，都能叫对象。当然，这不总是对的。最简单的就是“基本类型”到底算不算对象</li><li><strong>类对象</strong> / <strong>Class对象</strong> (大多数语言，如C++、Java、C#)：一般有Class关键字，支持类的继承，权限控制等。通过实例化Class类出来的东西才是类，而基本类型不是。对象是基于类的实例</li><li><strong>Struct对象</strong>：略</li><li><strong>原型对象</strong> (JavaScript)：每个对象都有一个Prototype链，原型能继承，所有对象的共同根祖先是Object</li><li><strong>皆对象</strong> (JavaScript、Python、Ruby)：所有东西，乃至 int / 函数 / 模块 都属于对象</li><li><strong>无对象</strong> (C)</li></ul><h3 id="什么是面向对象语言" tabindex="-1"><a class="header-anchor" href="#什么是面向对象语言"><span>什么是面向对象语言？</span></a></h3><ul><li><strong>面向对象语言 / 　类对象</strong> (大多数语言，如C++、Java、C#) <ul><li><strong>完全面向对象</strong> (Java)：根部只有类定义，包括 main 函数要在任意一个自定义类里 (如果定义在多个类里，编译要指定，如 <code>java ClassA</code>)</li><li><strong>支持面向对象 / 多范式编程语言</strong> (大多数语言，C++、C#、Go)：支持面向对象、面向过程、函数式、过程式。根部可以有类、函数、基本类型。<br> 其中 Go 其实和 Java 有些类似的理念：Go 的资源全在包中，包括 main 函数要在 main 包中。</li></ul></li><li><strong>基于原型语言 / 　皆对象 / 原型对象</strong> (JavaScript)</li><li><strong>基于对象语言 / 　皆对象</strong> (Python、Ruby)，也叫 <em>object-based</em> 语言</li><li><strong>非 class &quot;类&quot;</strong> (Go、Rust) <ul><li>(Go)：没有传统意义上的“类”概念，取而代之的是“类型”（Type）和“接口”（Interface）。 <ul><li>类型：结构体可以包含字段（Field）和方法（Method），方法可以与结构体关联。</li><li>接口：定义了一组方法签名。任何实现了这些方法的类型都可以被看作是该接口的实例。接口在Go中用于实现多态性，而不是通过继承实现</li></ul></li><li>(Rust)：没有传统意义上的类和对象，但它提供了其他机制来实现类似面向对象编程的功能 <ul><li>结构体：Rust中的结构体类似于其他语言中的对象，可以包含字段和方法。</li><li>枚举：不仅可以表示一组值，还可以为不同的枚举值定义不同的方法</li><li>特质 (Trait)：定义了一组方法签名，类似接口和多态性的功能</li></ul></li></ul></li><li><strong>面向过程编程语言</strong> (如 C)</li><li><strong>函数式编程语言</strong> (如 Haskell、Erlang)：更侧重于函数和不可变数据结构。计算是通过纯函数的应用来进行的，而不是通过对象的状态变化</li><li><strong>逻辑编程语言</strong> (如 Prolog)：逻辑编程语言中的对象通常是指事实和规则，而不是传统意义上的对象。在Prolog中，程序是由一系列的事实和规则组成的，这些事实和规则可以被视为“对象”，它们通过逻辑运算来表达程序的逻辑。</li></ul><h2 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h2><h3 id="外壳类" tabindex="-1"><a class="header-anchor" href="#外壳类"><span>外壳类</span></a></h3><ul><li>用Java编写的所有代码都位于某个类的内部（包括main函数）</li><li>而C/C++、Python可以有代码在外面</li></ul><h3 id="对象的写法" tabindex="-1"><a class="header-anchor" href="#对象的写法"><span>对象的写法</span></a></h3><ul><li><p><code>C</code>：不是面向对象语言，没有类，但可用结构模拟</p><ul><li><p>举例：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inflatable {</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> volume;}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">inflatable guest </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Ben&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>Python</code></p><ul><li><p>举例：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构造函数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dog </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;willie&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 句点运算符  # 访问类成员/方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>C++</code></p><ul><li><p>举例：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 声明</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    	char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 构造函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name1, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age1)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 实现</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name1;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    age </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age1;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">my_dog </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;willie&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 句点运算符  // 访问类成员/方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>Java</code></p><ul><li><p>举例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FirstSample</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 可以打psvm+tab来自动生成。公共类的main方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;We will not use &#39;Hello, World!&#39;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>JavaScript</code>：js的对象概念有所不同：万物皆对象</p></li></ul><h3 id="区别概括" tabindex="-1"><a class="header-anchor" href="#区别概括"><span>区别概括</span></a></h3><ul><li>类的设计不同 <ul><li><code>Python</code>：需分离类文件、客户代码<br> 在不需要分离的情况下，两者可写在一起</li><li><code>C++</code>：需分离类的头文件、类的实现代码、客户代码<br> 在不需要分离的情况下，三者可写在一起</li><li>区别原理：<code>C++</code>不能像<code>Python</code>那样合并类的头文件和实现代码 <ul><li>一来：Python本身就不需要声明头文件<br> （如果只是为了查看用法，python的<code>dir()</code>和<code>help()</code>方法更方便，而且<code>help()</code>的第一行一般就是类似于原型的声明）</li><li>二来：若是合并，则多个文件引用该类库时，会违反单一定义原则。而Python则没有单一定义的限制</li></ul></li></ul></li><li>构造函数不同 <ul><li><code>Python</code>：使用名为<code>__init__</code>的函数作为构造函数</li><li><code>C++、Java</code>：使用与类名同名的函数作为构造函数</li></ul></li><li>类实例的引用 <ul><li><code>Python</code>（更直观） <ul><li>定义函数时：需要显示标注接受<code>self</code>变量</li><li>引用实例成员时：使用<code>self</code>和句点运算符</li><li>引用实例本身时：使用<code>self</code></li><li>调用函数时：不显示传递实例自身</li></ul></li><li><code>C++</code><ul><li>定义函数时：不需要显示标注接受自身</li><li>引用实例成员时：无需借助<code>self</code></li><li>引用实例本身时：需要借助<code>this</code>指针</li><li>调用函数时：不显示传递实例自身，但可以通过后置类型来标明自身不被更改，如<code>Dog::fn(Dog dog) const</code></li></ul></li></ul></li><li>公有 or 私有 <ul><li><code>C</code>：结构成员默认值为<strong>公有</strong></li><li><code>Python</code>：类默认的成员方法和数据成员均<strong>公有</strong></li><li><code>C++</code>：类默认的成员方法和数据成员均<strong>私有</strong></li></ul></li></ul><h3 id="对象指针-java的对象实例本质是指针" tabindex="-1"><a class="header-anchor" href="#对象指针-java的对象实例本质是指针"><span>对象指针，java的对象实例本质是指针</span></a></h3><p>不可错误地将Java的对象实例理解为C++的引用，而必须要看成C++的对象指针</p><ul><li><p>性质上的区别</p><ul><li><p>在C++中没有空引用，并且引用不能被赋值</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> birthday</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// Java</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 等同于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> birthday</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// C++</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不同于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> birthday</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// C++，不可空引用、不可被赋值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不同于</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> birthday</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// C++，表示的是值，传参时会传递整个对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>存储空间上的区别</p><ul><li><p>所有的Java对象都存储在堆中。当一个对象包含另一个对象变量时，这个变量依然包含着指向另一个堆对象的指针。</p><p>如果使用一个没有初始化的指针，运行系统将会产生一个运行时错误，而不是生成一个随机的结果。同时，不必担心内存管理问题，垃圾收集器将会处理相关的事宜。</p></li></ul></li><li><p>传参时的区别</p><ul><li>不能编写一个交换两个雇员对象的方法，因为交换的只是拷贝进方法中的两个对象实例的地址，而并不能改变外部的两个对象实例的地址</li></ul></li><li><p>this指针</p><ul><li>在Java中，this引用等价于C++的this指针</li></ul></li></ul><h2 id="三大特性" tabindex="-1"><a class="header-anchor" href="#三大特性"><span>三大特性</span></a></h2><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>包括是否允许多继承</p><p>特殊：Python甚至可以自己继承自己，我的父亲竟是我自己……奇奇怪怪</p><h3 id="多态之运算符重载" tabindex="-1"><a class="header-anchor" href="#多态之运算符重载"><span>多态之运算符重载</span></a></h3><p>运算符重载</p><ul><li>Java没有提供运算符重载功能。程序员无法重定义+和*运算符，使其应用于BigInteger类的add和multiply运算</li></ul>`,28)]))}const p=s(t,[["render",e],["__file","01. 对象和类.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html","title":"Different_对象和类","lang":"zh-CN","frontmatter":{"description":"Different_对象和类 概念区别，什么是类 / 对象 / 面向对象语言 各语言中，什么是类 / 对象 / 面向对象语言 什么是类？ （结合下一节一起看） 类：我个人认为只要能将数据和方法绑定在一起，且能实现面向对象三大特性 (封装/继承/多态)，都能称之为类。 Class类 (大多数语言，如C++、Java、C#)：用 Class 关键字声明类，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different_对象和类"}],["meta",{"property":"og:description","content":"Different_对象和类 概念区别，什么是类 / 对象 / 面向对象语言 各语言中，什么是类 / 对象 / 面向对象语言 什么是类？ （结合下一节一起看） 类：我个人认为只要能将数据和方法绑定在一起，且能实现面向对象三大特性 (封装/继承/多态)，都能称之为类。 Class类 (大多数语言，如C++、Java、C#)：用 Class 关键字声明类，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different_对象和类\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different_对象和类","slug":"different-对象和类","link":"#different-对象和类","children":[{"level":2,"title":"概念区别，什么是类 / 对象 / 面向对象语言","slug":"概念区别-什么是类-对象-面向对象语言","link":"#概念区别-什么是类-对象-面向对象语言","children":[{"level":3,"title":"什么是类？","slug":"什么是类","link":"#什么是类","children":[]},{"level":3,"title":"什么是对象？","slug":"什么是对象","link":"#什么是对象","children":[]},{"level":3,"title":"什么是面向对象语言？","slug":"什么是面向对象语言","link":"#什么是面向对象语言","children":[]}]},{"level":2,"title":"面向对象编程","slug":"面向对象编程","link":"#面向对象编程","children":[{"level":3,"title":"外壳类","slug":"外壳类","link":"#外壳类","children":[]},{"level":3,"title":"对象的写法","slug":"对象的写法","link":"#对象的写法","children":[]},{"level":3,"title":"区别概括","slug":"区别概括","link":"#区别概括","children":[]},{"level":3,"title":"对象指针，java的对象实例本质是指针","slug":"对象指针-java的对象实例本质是指针","link":"#对象指针-java的对象实例本质是指针","children":[]}]},{"level":2,"title":"三大特性","slug":"三大特性","link":"#三大特性","children":[{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态之运算符重载","slug":"多态之运算符重载","link":"#多态之运算符重载","children":[]}]}]}],"git":{},"readingTime":{"minutes":7.77,"words":2330},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/01. 面向对象/01. 对象和类.md","excerpt":"\\n<h2>概念区别，什么是类 / 对象 / 面向对象语言</h2>\\n<p>各语言中，什么是类 / 对象 / 面向对象语言</p>\\n<h3>什么是类？</h3>\\n<p>（结合下一节一起看）</p>\\n<ul>\\n<li>类：我个人认为只要能将数据和方法绑定在一起，且能实现面向对象三大特性 (封装/继承/多态)，都能称之为类。</li>\\n<li><strong>Class类</strong> (大多数语言，如C++、Java、C#)：用 Class 关键字声明类，这是传统的类</li>\\n<li><strong>Struct类</strong> (C++/C、Go、Rust)：有的语言用 Struct 当作类，或允许 (C++、Go) 或不允许 (C) 数据和方法定义在一起<br>\\n(C++结构体在C的基础上支持了方法的定义，但似乎一般不叫这个为类，也一般不这样用)</li>\\n<li><strong>原型类</strong> (JavaScript)：一个对象的原型相当于实例化自己的类，原型链上有自己的类、父类及祖先类<br>\\n（在ES6及以后的版本中，JavaScript引入了 class 关键字，它提供了一种更接近传统面向对象语言的语法糖，但本质上仍然是基于原型的）</li>\\n<li><strong>无类</strong> (C)：没有类的概念，通常不支持数据与方法的绑定写法，不支持继承等操作。<br>\\n通常没有面向对象三大特性 (封装/继承/多态)。虽然强行用面向对象的方式写也没问题。但最多只能叫无类的面向对象。<br>\\n强行写的话：由于数据和方法无绑定，通常根据文件和命名方式绑定。无权限控制，我习惯用 <code>_</code> 结尾表示私有方法。继承上用组合替代继承。</li>\\n<li><strong>自定义类型类</strong> (Go)：Go的类不仅局限于Struct，自定义的类型通常都可以当作类来使用，都有面向对象的特性：可以继承任意类型、扩展类方法、实现接口</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/01. 面向对象/01. 对象和类.md","value":{"title":"01. 对象和类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/06. 面向对象/01. 面向对象/01. 对象和类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,r as data};
