import{_ as s,c as a,e as n,o as l}from"./app-CcegWvWz.js";const e={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="asyncio模块" tabindex="-1"><a class="header-anchor" href="#asyncio模块"><span>asyncio模块</span></a></h1><p>参考文章：http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html</p><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><p>Python 的异步编程，其他人可能觉得很难，但是 JavaScript 程序员应该特别容易理解，因为两者的概念和语法类似</p><p><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener noreferrer">JavaScript 的异步模型</a>更简单直观，很适合作为学习 Python 异步的基础</p><p>本文解释 Python 的异步模块 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener noreferrer"><code>asyncio</code></a> 的概念和基本用法，并且演示如何通过 Python 脚本操作无头浏览器<a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener noreferrer">pyppeteer</a></p><h3 id="历史由来" tabindex="-1"><a class="header-anchor" href="#历史由来"><span>历史由来</span></a></h3><ul><li>多线程与多进程 <ul><li>历史上，Python 并不支持专门的异步编程语法，因为不需要</li><li>有了<a href="https://timber.io/blog/multiprocessing-vs-multithreading-in-python-what-you-need-to-know/" target="_blank" rel="noopener noreferrer">多线程（<code>threading</code>）和多进程（<code>multiprocessing</code>）</a>，就没必要一定支持异步了</li><li>如果一个线程（或进程）阻塞，新建其他线程（或进程）就可以了，程序不会卡死</li></ul></li><li>异步编程 <ul><li>但是，多线程有&quot;线程竞争&quot;的问题，处理起来很复杂，还涉及<strong>加锁</strong>。对于简单的异步任务来说（比如与网页互动），写起来很麻烦</li><li>Python 3.4 引入了 <code>asyncio</code> 模块，增加了异步编程，跟 JavaScript 的<code>async/await</code> 极为类似，大大方便了异步任务的处理</li><li>它受到了开发者的欢迎，成为从 Python 2 升级到 Python 3 的主要理由之一</li></ul></li></ul><h2 id="asyncio-的设计" tabindex="-1"><a class="header-anchor" href="#asyncio-的设计"><span>asyncio 的设计</span></a></h2><h3 id="简概-2" tabindex="-1"><a class="header-anchor" href="#简概-2"><span>简概</span></a></h3><ul><li>特点 <ul><li><code>asyncio</code> 模块最大特点就是，只存在一个线程，跟 JavaScript 一样</li></ul></li><li>原理 <ul><li>由于只有一个线程，就不可能多个任务同时运行。asyncio 是<code>多任务合作</code>模式（<em>cooperative multitasking</em>），允许异步任务交出执行权给其他任务，等到其他任务完成，再收回执行权继续往下执行，这跟 JavaScript 也是一样的</li><li>由于代码的执行权在多个任务之间交换，所以看上去好像多个任务同时运行，其实底层只有一个线程，多个任务分享运行时间</li></ul></li><li>优点、与多线程比较 <ul><li>表面上，这是一个不合理的设计，明明有多线程多进程的能力，为什么放着多余的 CPU 核心不用，而只用一个线程呢？</li><li>但是就像前面说的，单线程简化了很多问题，使得代码逻辑变得简单，写法符合直觉</li></ul></li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>asyncio 模块在单线程上启动一个事件循环（event loop），时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。事件循环的内部机制，可以参考 <a href="https://wangdoc.com/javascript/async/general.html" target="_blank" rel="noopener noreferrer">JavaScript 的模型</a>，两者是一样的</p><p><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019112005.jpg" alt="img" loading="lazy"></p><h2 id="asyncio-api" tabindex="-1"><a class="header-anchor" href="#asyncio-api"><span>asyncio API</span></a></h2><p>下面介绍 <code>asyncio</code> 模块最主要的几个API==（注意，必须使用 Python 3.7 或更高版本，早期的语法已经变了）==</p><h3 id="基本流程" tabindex="-1"><a class="header-anchor" href="#基本流程"><span>基本流程</span></a></h3><ul><li>第一步，<code>import</code> 加载 <code>asyncio</code> 模块 <ul><li><code>import asyncio</code></li></ul></li><li>第二步，函数前面加上 <code>async</code> 关键字。就变成了 async 函数。<strong>这种函数最大特点是执行可以暂停，交出执行权</strong><ul><li><code>async def main():</code></li></ul></li><li>第三步，在 async 函数内部的异步任务前面，加上<code>await</code>命令 <ul><li><code>await asyncio.sleep(1)</code><ul><li>上面代码中，<code>asyncio.sleep(1)</code> 方法可以生成一个异步任务（异步函数包含异步任务），休眠1秒钟然后结束。</li><li>执行引擎遇到<code>await</code>命令，就会在异步任务开始执行之后，暂停当前 async 函数的执行，把执行权交给其他任务</li><li>等到异步任务结束，再把执行权交回 async 函数，继续往下执行</li></ul></li></ul></li><li>第四步，<code>async.run()</code> 方法加载 async 函数，启动事件循环 <ul><li><code>asyncio.run(main())</code><ul><li>上面代码中，<code>asyncio.run()</code> 在事件循环上监听 async 函数<code>main</code>的执行。等到 <code>main</code> 执行完了，事件循环才会终止。</li></ul></li></ul></li><li>实例</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># async.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 手动定义异步函数</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;One&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asyncio.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 停止，并交出执行权。等其他处理完再回来</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Two&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asyncio.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">gather</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Three&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">asyncio.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">One</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">One</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">One（等待1s）</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Two</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Two</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Two</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Three</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他api" tabindex="-1"><a class="header-anchor" href="#其他api"><span>其他API</span></a></h3><h4 id="asyncio-run" tabindex="-1"><a class="header-anchor" href="#asyncio-run"><span>asyncio.run()</span></a></h4><p>运行异步函数</p><h4 id="asyncio-sleep-n" tabindex="-1"><a class="header-anchor" href="#asyncio-sleep-n"><span>asyncio.sleep(n)</span></a></h4><p>与<code>time.sleep()</code>方法不同的是，这个方法是<code>异步任务</code>，而且多个这种方法只会计时一次？不会叠加？</p><h4 id="asyncio-gather" tabindex="-1"><a class="header-anchor" href="#asyncio-gather"><span>asyncio.gather()</span></a></h4><p><code>asyncio.gather()</code> 方法将多个异步任务包装成一个新的异步任务，必须等到内部的多个异步任务都执行结束，这个新的异步任务才会结束</p><h2 id="pyppeteer-模块实战实例" tabindex="-1"><a class="header-anchor" href="#pyppeteer-模块实战实例"><span>pyppeteer 模块实战实例</span></a></h2><p>无头浏览器 Puppeteer 的 Python 移植，API 跟 JavaScript 版本基本一致</p><ul><li>安装：<code>$ python3 -m pip install pyppeteer</code></li></ul><h3 id="写一个网页截图脚本screenshot-py" tabindex="-1"><a class="header-anchor" href="#写一个网页截图脚本screenshot-py"><span>写一个网页截图脚本<code>screenshot.py</code></span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># screenshot.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asyncio</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyppeteer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> launch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    browser </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动浏览器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    page </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">newPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 异步任务 - 打卡新Tab</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 访问网址</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">screenshot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;example.png&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 截图</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭浏览器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">asyncio.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="大坑【jupyter中运行异步函数报错】" tabindex="-1"><a class="header-anchor" href="#大坑【jupyter中运行异步函数报错】"><span><mark>大坑【jupyter中运行异步函数报错】</mark></span></a></h2><p>jupyter 已经运行了loop，无需自己激活，采用上文中的await()调用即可</p><p>如果按上面的<code>screenshot.py</code>来写会报错，应改为</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># screenshot.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># import asyncio									# 【改动】</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pyppeteer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> launch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    browser </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> launch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动浏览器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    page </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">newPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 异步任务 - 打卡新Tab</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">goto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 访问网址</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">screenshot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;example.png&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 截图</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> browser.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()							</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 关闭浏览器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># asyncio.run(main())								# 【改动】</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()										</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 【改动】</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const k=s(e,[["render",t],["__file","asyncio 异步模块.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/asyncio%20%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%9D%97.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 asyncio模块 参考文章：http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html 简概 简概 Python 的异步编程，其他人可能觉得很难，但是 JavaScript 程序员应该特别容易理解，因为两者的概念和语法类似 JavaScript 的异步模型更简单直观，很适合...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/asyncio%20%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%9D%97.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 asyncio模块 参考文章：http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html 简概 简概 Python 的异步编程，其他人可能觉得很难，但是 JavaScript 程序员应该特别容易理解，因为两者的概念和语法类似 JavaScript 的异步模型更简单直观，很适合..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.wangbase.com/blogimg/asset/201911/bg2019112005.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"https://www.wangbase.com/blogimg/asset/201911/bg2019112005.jpg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"asyncio模块","slug":"asyncio模块","link":"#asyncio模块","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[{"level":3,"title":"简概","slug":"简概-1","link":"#简概-1","children":[]},{"level":3,"title":"历史由来","slug":"历史由来","link":"#历史由来","children":[]}]},{"level":2,"title":"asyncio 的设计","slug":"asyncio-的设计","link":"#asyncio-的设计","children":[{"level":3,"title":"简概","slug":"简概-2","link":"#简概-2","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"asyncio API","slug":"asyncio-api","link":"#asyncio-api","children":[{"level":3,"title":"基本流程","slug":"基本流程","link":"#基本流程","children":[]},{"level":3,"title":"其他API","slug":"其他api","link":"#其他api","children":[{"level":4,"title":"asyncio.run()","slug":"asyncio-run","link":"#asyncio-run","children":[]},{"level":4,"title":"asyncio.sleep(n)","slug":"asyncio-sleep-n","link":"#asyncio-sleep-n","children":[]},{"level":4,"title":"asyncio.gather()","slug":"asyncio-gather","link":"#asyncio-gather","children":[]}]}]},{"level":2,"title":"pyppeteer 模块实战实例","slug":"pyppeteer-模块实战实例","link":"#pyppeteer-模块实战实例","children":[{"level":3,"title":"写一个网页截图脚本screenshot.py","slug":"写一个网页截图脚本screenshot-py","link":"#写一个网页截图脚本screenshot-py","children":[]}]},{"level":2,"title":"大坑【jupyter中运行异步函数报错】","slug":"大坑【jupyter中运行异步函数报错】","link":"#大坑【jupyter中运行异步函数报错】","children":[]}]}],"git":{},"readingTime":{"minutes":4.4,"words":1319},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/标准库/asyncio 异步模块.md","excerpt":"\\n<h1>目录</h1>\\n<h1>asyncio模块</h1>\\n<p>参考文章：http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html</p>\\n<h2>简概</h2>\\n<h3>简概</h3>\\n<p>Python 的异步编程，其他人可能觉得很难，但是 JavaScript 程序员应该特别容易理解，因为两者的概念和语法类似</p>\\n<p><a href=\\"http://es6.ruanyifeng.com/#docs/async\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaScript 的异步模型</a>更简单直观，很适合作为学习 Python 异步的基础</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/标准库/asyncio 异步模块.md","value":{"title":"asyncio 异步模块","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/标准库/asyncio 异步模块.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
