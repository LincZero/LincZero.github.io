import{_ as e,e as n,g as t,o as i}from"./app-DPU1xou8.js";const l={};function o(c,a){return i(),n("div",null,a[0]||(a[0]=[t('<h1 id="《c-设计模式》视频-李建忠" tabindex="-1"><a class="header-anchor" href="#《c-设计模式》视频-李建忠"><span>《C++设计模式》视频_李建忠</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>[toc]</p><h1 id="门面模式-facade" tabindex="-1"><a class="header-anchor" href="#门面模式-facade"><span>门面模式 Facade</span></a></h1><p>（注意：这里的Facade其实是法文而不是英文）</p><h2 id="所属分类——-接口隔离-模式" tabindex="-1"><a class="header-anchor" href="#所属分类——-接口隔离-模式"><span>所属分类——“接口隔离” 模式</span></a></h2><ul><li>“接口隔离” 模式 <ul><li>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。<br> 采用添加一层**间接（稳定）**接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</li></ul></li><li>典型模式 <ul><li>门面模式 Facade</li><li>代理模式 Proxy</li><li>适配器 Adapter</li><li>中介者 Mediator</li></ul></li></ul><h2 id="动机-motivation" tabindex="-1"><a class="header-anchor" href="#动机-motivation"><span>动机（Motivation）</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><p>系统间耦合的复杂度</p><p>![image-20210516091142711](12.%20门面模式 Facade.assets/image-20210516091142711.png)</p><ul><li>上述A方案的问题在于组件的客户和组件中各种复杂的子系统有了<strong>过多的耦合</strong>，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战</li><li>如何<strong>简化外部客户程序和系统间的交互接口</strong>？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</li></ul><h3 id="应用体现" tabindex="-1"><a class="header-anchor" href="#应用体现"><span>应用体现</span></a></h3><p>举例</p><ul><li>软件是硬件和操作之间的间接</li><li>系统是软件和操作系统之间的间接</li><li>中间件、虚拟机等是系统和操作系统之间的间接</li></ul><h3 id="代码体现" tabindex="-1"><a class="header-anchor" href="#代码体现"><span>代码体现</span></a></h3><p>无，没有特定的代码结构</p><p>而且不一定就是编程方面，是一种设计素养，可以在其他传统行业里找到影子</p><h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h2><h3 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义"><span>模式定义</span></a></h3><blockquote><p>为子系统中的一组接口提供一个**一致（稳定）**的界面，Facade模式定义了一个高层接口，这个接使得这一子系统更加容易使用（复用）</p><p>——《设计模式》GoF</p></blockquote><h3 id="结构-structure" tabindex="-1"><a class="header-anchor" href="#结构-structure"><span>结构（Structure）</span></a></h3><p>其中Facade是稳定的部分，下面其他方框是变化的部分，Facade是下面的隔离</p><p>![image-20210516091600725](12.%20门面模式 Facade.assets/image-20210516091600725.png)</p><h3 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h3><ul><li>从客户程序的角度来看，Facade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种 <strong>“解耦”</strong> 的效果——<br> 内部子系统的任何变化不会影响到Facade接口的变化。</li><li>Facade设计模式更注重从<strong>架构</strong>的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。</li><li>Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。<br> Facade模式中组件的内部应该是 “<strong>相互耦合关系比较大</strong>的一系列组件”，而不是一个简单的功能集合。<br> （松耦合、高内聚）</li></ul>',26)]))}const s=e(l,[["render",o],["__file","12. 门面模式 Facade.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/12.%20%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%20Facade.html","title":"《C++设计模式》视频_李建忠","lang":"zh-CN","frontmatter":{"description":"《C++设计模式》视频_李建忠 目录 [toc] 门面模式 Facade （注意：这里的Facade其实是法文而不是英文） 所属分类——“接口隔离” 模式 “接口隔离” 模式 在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。 采用添加一层**间接（稳定）**接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。 典型模式...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/12.%20%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%20Facade.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《C++设计模式》视频_李建忠"}],["meta",{"property":"og:description","content":"《C++设计模式》视频_李建忠 目录 [toc] 门面模式 Facade （注意：这里的Facade其实是法文而不是英文） 所属分类——“接口隔离” 模式 “接口隔离” 模式 在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。 采用添加一层**间接（稳定）**接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。 典型模式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《C++设计模式》视频_李建忠\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.26,"words":678},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/12. 门面模式 Facade.md","excerpt":"\\n<h1>目录</h1>\\n<p>[toc]</p>\\n<h1>门面模式 Facade</h1>\\n<p>（注意：这里的Facade其实是法文而不是英文）</p>\\n<h2>所属分类——“接口隔离” 模式</h2>\\n<ul>\\n<li>“接口隔离” 模式\\n<ul>\\n<li>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。<br>\\n采用添加一层**间接（稳定）**接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</li>\\n</ul>\\n</li>\\n<li>典型模式\\n<ul>\\n<li>门面模式 Facade</li>\\n<li>代理模式 Proxy</li>\\n<li>适配器 Adapter</li>\\n<li>中介者 Mediator</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/12. 门面模式 Facade.md","value":{"title":"12. 门面模式 Facade","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/12. 门面模式 Facade.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,d as data};
