import{_ as t,e as s,g as i,h as a,f as n,r as o,o as p}from"./app-HvNDXJEG.js";const r={};function h(d,l){const e=o("Mermaid");return p(),s("div",null,[l[0]||(l[0]=i('<h1 id="《c-设计模式》视频-李建忠" tabindex="-1"><a class="header-anchor" href="#《c-设计模式》视频-李建忠"><span>《C++设计模式》视频_李建忠</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="面向对象设计原则" tabindex="-1"><a class="header-anchor" href="#面向对象设计原则"><span>面向对象设计原则</span></a></h1><h2 id="面向对象六大设计原则" tabindex="-1"><a class="header-anchor" href="#面向对象六大设计原则"><span>面向对象六大设计原则</span></a></h2><p>”设计原则“ 比 “模式“ 更重要。模式可能会变、可能会被淘汰，模式依赖设计原则</p><h3 id="依赖倒置原则-dip" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则-dip"><span>依赖倒置原则（DIP）</span></a></h3><ul><li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）</li><li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li></ul><p>举例（图意：上层是被依赖项，下层依赖上层）</p><ul><li>分解写法（不符合）</li></ul>',9)),a(e,{id:"mermaid-40",code:"eJxLL0osyFAIceLyycxLfbZi4dO503V17XwTM/Pc8otyn66b97xvw/PdbS+6mriCUpNL8KsAAI81JtM="}),l[1]||(l[1]=n("ul",null,[n("li",null,"抽象写法（符合）")],-1)),a(e,{id:"mermaid-48",code:"eJxLL0osyFAIceIKzkgsSH3WtffFxoW6una+iZl5bvlFuU/XzXvet+H57rYXXU1oSoJSk0uerVj4dO50NAmfzLxUqAQAZbIu8g=="}),l[2]||(l[2]=i('<h3 id="开放封闭原则-ocp-开闭原则" tabindex="-1"><a class="header-anchor" href="#开放封闭原则-ocp-开闭原则"><span>开放封闭原则（OCP）（开闭原则）</span></a></h3><p>有时简称 “开闭原则”</p><ul><li>对扩展开放，对更改封闭</li><li>类模块应该是可扩展的，但是不可修改</li></ul><h3 id="单一职责原则-srp-迪米特法则-最少知道原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则-srp-迪米特法则-最少知道原则"><span>单一职责原则（SRP）（迪米特法则 / 最少知道原则）</span></a></h3><ul><li>一个类应该仅有一个引起它变化的原因</li><li>变化的方向隐含着类的责任</li></ul><p>有时也叫：迪米特法则 (最少知道原则) (Demeter Principle)</p><ul><li>一个实体应当尽量少的与其它实体发生相互作用,使得功能模块相互独立</li></ul><h3 id="里氏代换原则-lsp-liskov代换原则-里斯科夫代换" tabindex="-1"><a class="header-anchor" href="#里氏代换原则-lsp-liskov代换原则-里斯科夫代换"><span>里氏代换原则（LSP）（Liskov代换原则 / 里斯科夫代换）</span></a></h3><p>（<em>Liskov Substitution principle</em>）</p><ul><li>子类必须能够替换它们的基类（IS-A）</li><li>继承表达类型抽象</li></ul><p>不然就不要去继承基类，或者说两者不应该是继承关系而是组合关系，子类和父类必须是IS-A的关系</p><h3 id="接口隔离原则-isp" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-isp"><span>接口隔离原则（ISP）</span></a></h3><ul><li>不应该强迫客户程序依赖它们不用的方法</li><li>接口应该小而完备</li></ul><p>有必要才public，不然就别public。因为一旦public后暴露出去被程序用了，产生了依赖关系，那该接口就需要一直保持稳定</p><h3 id="合成复用原则-对象组合-大于-继承" tabindex="-1"><a class="header-anchor" href="#合成复用原则-对象组合-大于-继承"><span>合成复用原则（对象组合 大于 继承）</span></a></h3><ul><li>类继承通常为 “白箱复用”，对象组合通常为 ”黑箱复用“</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高</li><li>而对象组合则只要求被组合的对象具有良好的接口，耦合度低</li></ul><p>三大面向对象机制是封装、继承、多态，所以有的人觉得面向对象本质就应该要使用继承（我也是），但事实上继承容易被泛用<br> 需要是IS-A才能用继承，更多情况下有的实现不应该用继承而应该去使用对象组合，而且耦合度会比继承更低</p><h3 id="扩展-封装变化点" tabindex="-1"><a class="header-anchor" href="#扩展-封装变化点"><span>扩展 - 封装变化点</span></a></h3><ul><li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良影响，从而实现实现层次间的松耦合</li></ul><p>传统面向对象底层思维来讲，封装是封装代码和数据。但从高层次来讲，封装是封装变化点</p><p>（该原则和接口隔离原则很像，一个违背了往往另一个就违背了）</p><h3 id="扩展-面向接口编程-而不是面向实现编程" tabindex="-1"><a class="header-anchor" href="#扩展-面向接口编程-而不是面向实现编程"><span>扩展 - 面向接口编程，而不是面向实现编程</span></a></h3><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口</li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口</li><li>减少系统中各部分的依赖关系，从而实现 “高内聚、松耦合“ 的类型设计方案</li></ul><p>（该原则和依赖倒置原则很像，一个违背了往往另一个就违背了）</p><h2 id="个人总结六大设计原则" tabindex="-1"><a class="header-anchor" href="#个人总结六大设计原则"><span>个人总结六大设计原则</span></a></h2><p>可以参考的点：找出每个原则的 “变化点” 和 “不变点” 在哪</p><ul><li>变化点 与 不动点 <ul><li>换库时，底层变化，高层不变：依赖倒置原则 (更准确的描述：高层模块依赖的是基模块的抽象接口而非基模块)</li><li>改类时，扩展变化，修改不许：开放封闭原则</li><li>受参时，扩展变化，修改不许：里氏替换原则</li><li>写库时，实现变化，接口不变：接口隔离原则</li></ul></li><li>减少变化点 <ul><li>合成复用原则：组合替换继承，解耦度更高</li><li>单一职责原则：单职责替换多职责，关系线更少，解耦度更高</li></ul></li></ul><h2 id="将设计原则提升为设计经验" tabindex="-1"><a class="header-anchor" href="#将设计原则提升为设计经验"><span>将设计原则提升为设计经验</span></a></h2><ul><li>设计习语（Design Idioms） <ul><li>Design Idioms描述与特定编程语言相关的低层模式，技巧，惯用法</li></ul></li><li>设计模式（Design Patterns） <ul><li>Design Patterns主要描述的是：类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等</li></ul></li><li>架构模式（Architectural Patterns） <ul><li>Architectural Patterns 描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则</li></ul></li></ul>',29))])}const c=t(r,[["render",h],["__file","00.2. 面向对象设计原则.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/00.2.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"《C++设计模式》视频_李建忠","lang":"zh-CN","frontmatter":{"description":"《C++设计模式》视频_李建忠 目录 面向对象设计原则 面向对象六大设计原则 ”设计原则“ 比 “模式“ 更重要。模式可能会变、可能会被淘汰，模式依赖设计原则 依赖倒置原则（DIP） 高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定） 抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定） 举例（图意：上层是被...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/00.2.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《C++设计模式》视频_李建忠"}],["meta",{"property":"og:description","content":"《C++设计模式》视频_李建忠 目录 面向对象设计原则 面向对象六大设计原则 ”设计原则“ 比 “模式“ 更重要。模式可能会变、可能会被淘汰，模式依赖设计原则 依赖倒置原则（DIP） 高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定） 抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定） 举例（图意：上层是被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《C++设计模式》视频_李建忠\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.19,"words":1257},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.2. 面向对象设计原则.md","excerpt":"\\n<h1>目录</h1>\\n<h1>面向对象设计原则</h1>\\n<h2>面向对象六大设计原则</h2>\\n<p>”设计原则“ 比 “模式“ 更重要。模式可能会变、可能会被淘汰，模式依赖设计原则</p>\\n<h3>依赖倒置原则（DIP）</h3>\\n<ul>\\n<li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）</li>\\n<li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li>\\n</ul>\\n<p>举例（图意：上层是被依赖项，下层依赖上层）</p>\\n<ul>\\n<li>分解写法（不符合）</li>\\n</ul>\\n<ul>\\n<li>抽象写法（符合）</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.2. 面向对象设计原则.md","value":{"title":"00.2. 面向对象设计原则","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.2. 面向对象设计原则.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,u as data};
