import{_ as o,e as c,g as d,o as r}from"./app-DPU1xou8.js";const t="/assets/dpdk-core-components-architecture-BQ-YBKal.svg",a="/assets/dpdk-architecture-Bxj3gnLW.png",n="/assets/dpdk-sample-applications-D97c_MQK.jpg",l={};function i(p,e){return r(),c("div",null,e[0]||(e[0]=[d('<h1 id="dpdk" tabindex="-1"><a class="header-anchor" href="#dpdk"><span>DPDK</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><code>Intel DPDK</code>全称<code>Intel Data Plane Development Kit</code>，是<code>intel</code>提供的数据平面开发工具集，为<code>Intel architecture（IA）</code>处理器架构下用户空间高效的数据包处理提供库函数和驱动的支持，它不同于<code>Linux</code>系统以通用性设计为目的，而是专注于网络应用中数据包的高性能处理。<code>DPDK</code>应用程序是运行在用户空间上利用自身提供的数据平面库来收发数据包，绕过了<code>Linux</code>内核协议栈对数据包处理过程。<code>Linux</code>内核将<code>DPDK</code>应用程序看作是一个普通的用户态进程，包括它的编译、连接和加载方式和普通程序没有什么两样。<code>DPDK</code>程序启动后只能有一个主线程，然后创建一些子线程并绑定到指定<code>CPU</code>核心上运行。</p><h2 id="基本组件" tabindex="-1"><a class="header-anchor" href="#基本组件"><span>基本组件</span></a></h2><p><img src="'+t+'" alt="dpdk core components architecture" loading="lazy"></p><blockquote><p>图片来源<a href="http://dpdk.org/doc/guides/prog_guide/overview.html#core-components" target="_blank" rel="noopener noreferrer">Architecture Overview - dpdk.org</a></p></blockquote><ul><li><code>EAL</code>（<code>Environment Abstraction Layer</code>）即环境抽象层，为应用提供了一个通用接口，隐藏了与底层库与设备打交道的相关细节。<code>EAL</code>实现了<code>DPDK</code>运行的初始化工作，基于大页表的内存分配，多核亲缘性设置，原子和锁操作，并将<code>PCI</code>设备地址映射到用户空间，方便应用程序访问。</li><li><code>Buffer Manager API</code>通过预先从<code>EAL</code>上分配固定大小的多个内存对象，避免了在运行过程中动态进行内存分配和回收来提高效率，常常用作数据包<code>buffer</code>来使用。</li><li><code>Queue Manager API</code>以高效的方式实现了无锁的<code>FIFO</code>环形队列，适合与一个生产者多个消费者、一个消费者多个生产者模型来避免等待，并且支持批量无锁的操作。</li><li><code>Flow Classification API</code>通过<code>Intel SSE</code>基于多元组实现了高效的<code>hash</code>算法，以便快速的将数据包进行分类处理。该API一般用于路由查找过程中的最长前缀匹配中，安全产品中根据Flow五元组来标记不同用户的场景也可以使用。</li><li><code>PMD</code>则实现了Intel <code>1GbE</code>、<code>10GbE</code>和<code>40GbE</code>网卡下基于轮询收发包的工作模式，大大加速网卡收发包性能。</li></ul><p><code>DPDK</code>核心思想：</p><ul><li><code>PMD</code>: <code>DPDK</code>针对<code>Intel</code>网卡实现了基于轮询方式的<code>PMD</code>（<code>Poll Mode Drivers</code>）驱动，该驱动由<code>API</code>、用户空间运行的驱动程序构成，该驱动使用无中断方式直接操作网卡的接收和发送队列（除了链路状态通知仍必须采用中断方式以外）。目前<code>PMD</code>驱动支持<code>Intel</code>的大部分<code>1G</code>、<code>10G</code>和<code>40G</code>的网卡。<code>PMD</code>驱动从网卡上接收到数据包后，会直接通过<code>DMA</code>方式传输到预分配的内存中，同时更新无锁环形队列中的数据包指针，不断轮询的应用程序很快就能感知收到数据包，并在预分配的内存地址上直接处理数据包，这个过程非常简洁。如果要是让<code>Linux</code>来处理收包过程，首先网卡通过中断方式通知协议栈对数据包进行处理，协议栈先会对数据包进行合法性进行必要的校验，然后判断数据包目标是否本机的socket，满足条件则会将数据包拷贝一份向上递交给用户<code>socket</code>来处理，不仅处理路径冗长，还需要从内核到应用层的一次拷贝过程。</li><li><code>hugetlbfs</code>: 这样有两个好处：第一是使用<code>hugepage</code>的内存所需的页表项比较少，对于需要大量内存的进程来说节省了很多开销，像<code>oracle</code>之类的大型数据库优化都使用了大页面配置；第二是TLB冲突概率降低，<code>TLB</code>是<code>cpu</code>中单独的一块高速<code>cache</code>，采用<code>hugepage</code>可以大大降低<code>TLB miss</code>的开销。<code>DPDK</code>目前支持了<code>2M</code>和<code>1G</code>两种方式的<code>hugepage</code>。通过修改默认<code>/etc/grub.conf</code>中<code>hugepage</code>配置为“<code>default\\_hugepagesz=1G hugepagesz=1G hugepages=32 isolcpus=0-22</code>”，然后通过<code>mount –t hugetlbfs nodev /mnt/huge</code>就将<code>hugepage</code>文件系统<code>hugetlbfs</code>挂在/<code>mnt/huge</code>目录下，然后用户进程就可以使用<code>mmap</code>映射<code>hugepage</code>目标文件来使用大页面了。测试表明应用使用大页表比使用<code>4K</code>的页表性能提高<code>10%\\~15%</code>。</li><li><code>CPU</code>亲缘性:多核则是每个<code>CPU</code>核一个线程，核心之间访问数据无需上锁。为了最大限度减少线程调度的资源消耗，需要将<code>Linux</code>绑定在特定的核上，释放其余核心来专供应用程序使用。同时还需要考虑<code>CPU</code>特性和系统是否支持<code>NUMA</code>架构，如果支持的话，不同插槽上<code>CPU</code>的进程要避免访问远端内存，尽量访问本端内存。</li><li>减少内存访问:少用数组和指针，多用局部变量；少用全局变量；一次多访问一些数据；自己管理内存分配；进程间传递指针而非整个数据块</li><li><code>Cache</code>有效性得益于空间局部性（附近的数据也会被用到）和时间局部性（今后一段时间内会被多次访问）原理，通过合理的使用<code>cache</code>，能够使得应用程序性能得到大幅提升</li><li>避免<code>False Sharing</code>: 多核<code>CPU</code>中每个核都拥有自己的<code>L1/L2 cache</code>，当运行多线程程序时，尽管算法上不需要共享变量，但实际执行中两个线程访问同一<code>cache line</code>的数据时就会引起冲突，每个线程在读取自己的数据时也会把别人的<code>cache line</code>读进来，这时一个核修改改变量，<code>CPU</code>的<code>cache</code>一致性算法会迫使另一个核的<code>cache</code>中包含该变量所在的<code>cache line</code>无效，这就产生了<code>false sharing</code>（伪共享）问题. <code>Falsing sharing</code>会导致大量的<code>cache</code>冲突，应该尽量避免。访问全局变量和动态分配内存是<code>false sharing</code>问题产生的根源，当然访问在内存中相邻的但完全不同的全局变量也可能会导致<code>false sharing</code>，多使用线程本地变量是解决<code>false sharing</code>的根源办法。</li><li>内存对齐：根据不同存储硬件的配置来优化程序，性能也能够得到极大的提升。在硬件层次，确保对象位于不同<code>channel</code>和<code>rank</code>的起始地址，这样能保证对象并并行加载。</li><li>字节对齐：众所周知，内存最小的存储单元为字节，在32位CPU中，寄存器也是32位的，为了保证访问更加高效，在32位系统中变量存储的起始地址默认是4的倍数（64位系统则是8的倍数），定义一个32位变量时，只需要一次内存访问即可将变量加载到寄存器中，这些工作都是编译器完成的，不需人工干预，当然我们可以使用<code>\\_\\_attribute\\_\\_((aligned(n)))</code>来改变对齐的默认值。</li><li><code>cache</code>对齐，这也是程序开发中需要关注的。<code>Cache line</code>是<code>CPU</code>从内存加载数据的最小单位，一般<code>L1 cache</code>的<code>cache line</code>大小为64字节。如果<code>CPU</code>访问的变量不在<code>cache</code>中，就需要先从内存调入到<code>cache</code>，调度的最小单位就是<code>cache line</code>。因此，内存访问如果没有按照<code>cache line</code>边界对齐，就会多读写一次内存和<code>cache</code>了。</li><li><code>NUMA</code>: <code>NUMA</code>系统节点一般是由一组<code>CPU</code>和本地内存组成。<code>NUMA</code>调度器负责将进程在同一节点的CPU间调度，除非负载太高，才迁移到其它节点，但这会导致数据访问延时增大。</li><li>减少进程上下文切换: 需要了解哪些场景会触发<code>CS</code>操作。首先就介绍的就是不可控的场景：进程时间片到期；更高优先级进程抢占<code>CPU</code>。其次是可控场景：休眠当前进程(<code>pthread\\_cond\\_wait</code>)；唤醒其它进程(<code>pthread\\_cond\\_signal</code>)；加锁函数、互斥量、信号量、<code>select</code>、<code>sleep</code>等非常多函数都是可控的。对于可控场景是在应用编程需要考虑的问题，只要程序逻辑设计合理就能较少<code>CS</code>的次数。对于不可控场景，首先想到的是适当减少活跃进程或线程数量，因此保证活跃进程数目不超过<code>CPU</code>个数是一个明智的选择；然后有些场景下，我们并不知道有多少个活跃线程的时候怎么来保证上下文切换次数最少呢？这是我们就需要使用线程池模型：让每个线程工作前都持有带计数器的信号量，在信号量达到最大值之前，每个线程被唤醒时仅进行一次上下文切换，当信号量达到最大值时，其它线程都不会再竞争资源了。</li><li>分组预测机制，如果预测的一个分支指令加入流水线，之后却发现它是错误的分支，处理器要回退该错误预测执行的工作，再用正确的指令填充流水线。这样一个错误的预测会严重浪费时钟周期，导致程序性能下降。《计算机体系结构：量化研究方法》指出分支指令产生的性能影响为<code>10%\\~30%</code>，流水线越长，性能影响越大。<code>Core i7</code>和<code>Xen</code>等较新的处理器当分支预测失效时无需刷新全部流水，当错误指令加载和计算仍会导致一部分开销。分支预测中最核心的是分支目标缓冲区（<code>Branch Target Buffer</code>，简称<code>BTB</code>），每条分支指令执行后，都会<code>BTB</code>都会记录指令的地址及它的跳转信息。<code>BTB</code>一般比较小，并且采用<code>Hash</code>表的方式存入，在<code>CPU</code>取值时，直接将PC指针和<code>BTB</code>中记录对比来查找，如果找到了，就直接使用预测的跳转地址，如果没有记录，必须通过<code>cache</code>或内存取下一条指令。</li><li>利用流水线并发: 像<code>Pentium</code>处理器就有<code>U/V</code>两条流水，并且可以独自独立读写缓存，循环2可以将两条指令安排在不同流水线上执行，性能得到极大提升。另外两条流水线是非对称的，简单指令（<code>mpv,add,push,inc,cmp,lea</code>等）可以在两条流水上并行执行、位操作和跳转操作并发的前提是在特定流水线上工作、而某些复杂指令却只能独占<code>CPU</code>。</li><li>为了利用空间局部性，同时也为了覆盖数据从内存传输到<code>CPU</code>的延迟，可以在数据被用到之前就将其调入缓存，这一技术称为预取<code>Prefetch</code>，加载整个<code>cache</code>即是一种预取。<code>CPU</code>在进行计算过程中可以并行的对数据进行预取操作，因此预取使得数据/指令加载与<code>CPU</code>执行指令可以并行进行。</li></ul><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h2><p><img src="'+a+'" alt="dpdk architecture" loading="lazy"></p><blockquote><p>图片来源<a href="https://www.linuxwind.com/2017/05/12/dpdk.html" target="_blank" rel="noopener noreferrer">DPDK 初探</a></p></blockquote><p>在最底部的内核态(<code>Linux Kernel</code>)<code>DPDK</code> 有两个模块:<code>KNI</code> 与 <code>IGB\\_UIO</code>。 其中,<code>KNI</code>提供给用户一个使用 <code>Linux</code> 内核态的协议栈,以及传统的 Linux网络工具(如<code>ethtool</code>, <code>ifconfig</code>)。<code>IGB\\_UIO</code>(<code>igb\\_uio.ko</code> 和 <code>kni.ko.IGB\\_UIO</code>)则借助了 <code>UIO</code> 技术,在初始化过程中将网卡硬件寄存器映射到用户态。</p><p><code>DPDK</code> 的上层用户态由很多库组成,主要包括核心部件库(<code>Core Libraries</code>)、平台相关模块(<code>Platform</code>)、网卡轮询模式驱动模块(<code>PMD-Natives&amp;Virtual</code>)、<code>QoS</code>库、报文转发分类算法(<code>Classify</code>)等几大类,用户应用程序可以使用这些库进行二次开发.</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h2><p><img src="'+n+'" alt="dpdk-sample-applications" loading="lazy"></p><blockquote><p>图片来源 <a href="https://www.slideshare.net/MichelleHolley1/dpdk-multi-architecture-high-performance-packet-processing-72911726" target="_blank" rel="noopener noreferrer">DPDK: Multi Architecture High Performance Packet Processing</a></p></blockquote><ul><li><a href="http://www.spdk.io/" target="_blank" rel="noopener noreferrer">SPDK</a></li><li><a href="https://wiki.opnfv.org/" target="_blank" rel="noopener noreferrer">OPNFV</a></li><li><a href="https://wiki.opnfv.org/display/ovsnfv/Open+vSwitch+For+NFV+Home" target="_blank" rel="noopener noreferrer">Open vSwitch for NFV</a></li><li><a href="https://wiki.opnfv.org/display/dpacc/DPACC+Home" target="_blank" rel="noopener noreferrer">Data Plane Acceleration (DPACC)</a></li><li><a href="https://tonydeng.github.io/sdn-handbook/dpdk/ovs-dpdk.html" target="_blank" rel="noopener noreferrer">OVS-DPDK</a></li><li><a href="http://fd.io" target="_blank" rel="noopener noreferrer">VPP</a> 和 <a href="https://wiki.fd.io/view/TLDK" target="_blank" rel="noopener noreferrer">TLDK</a></li><li><a href="http://www.seastar-project.org" target="_blank" rel="noopener noreferrer">Seastar</a>：TCP/IP协议栈的实现只适合在内网运行，公网复杂的网络环境会导致它出现各种问题</li><li><a href="http://www.f-stack.org/" target="_blank" rel="noopener noreferrer">F-Stack</a>：粘合了DPDK,FreeBSD协议栈，POSIX API，同时支持coroutine</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><blockquote><p>注: 本章内容大部分整理自《<a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01FQ9SMZO" target="_blank" rel="noopener noreferrer">深入浅出DPDK</a>》的读书笔记。</p></blockquote><ul><li>《<a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01FQ9SMZO" target="_blank" rel="noopener noreferrer">深入浅出DPDK</a>》</li><li><a href="http://dpdk.org" target="_blank" rel="noopener noreferrer">dpdk.org</a></li><li><a href="http://dpdk.org/doc/guides/" target="_blank" rel="noopener noreferrer">DPDK documentation - dpdk.org</a></li><li><a href="http://intel.com/go/dpdk" target="_blank" rel="noopener noreferrer">Data Plane Development Kit (DPDK)</a></li><li><a href="https://fd.io" target="_blank" rel="noopener noreferrer">FD.io - The Fast Data Project The Universal Dataplane</a></li><li><a href="https://wiki.fd.io/view/Main_Page" target="_blank" rel="noopener noreferrer">fd.io Developer Wiki</a></li><li><a href="https://github.com/lagopus/lagopus" target="_blank" rel="noopener noreferrer">lagopus/lagopus</a></li><li><a href="https://01.org/zh/intel-data-plane-performance-demonstrators?langredirect=1" target="_blank" rel="noopener noreferrer">Data Plane Performance Demonstrators (DPPD)</a></li><li><a href="https://www.slideshare.net/jstleger/6-dpdk-summit-2014-intel-presentation-venky-venkatesan" target="_blank" rel="noopener noreferrer">DPDK Summit - 08 Sept 2014 - Intel - Networking Workloads on Intel Architecture</a></li><li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/guides/dpdk-getting-started-guide.pdf" target="_blank" rel="noopener noreferrer">Getting Started Guide for Linux</a></li><li><a href="https://www.slideshare.net/MichelleHolley1/dpdk-multi-architecture-high-performance-packet-processing-72911726" target="_blank" rel="noopener noreferrer">DPDK: Multi Architecture High Performance Packet Processing</a></li></ul>',21)]))}const s=o(l,[["render",i],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/","title":"DPDK","lang":"zh-CN","frontmatter":{"description":"DPDK 介绍 Intel DPDK全称Intel Data Plane Development Kit，是intel提供的数据平面开发工具集，为Intel architecture（IA）处理器架构下用户空间高效的数据包处理提供库函数和驱动的支持，它不同于Linux系统以通用性设计为目的，而是专注于网络应用中数据包的高性能处理。DPDK应用程序是运行...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"DPDK"}],["meta",{"property":"og:description","content":"DPDK 介绍 Intel DPDK全称Intel Data Plane Development Kit，是intel提供的数据平面开发工具集，为Intel architecture（IA）处理器架构下用户空间高效的数据包处理提供库函数和驱动的支持，它不同于Linux系统以通用性设计为目的，而是专注于网络应用中数据包的高性能处理。DPDK应用程序是运行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DPDK\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":10.93,"words":3278},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/README.md","excerpt":"\\n<h2>介绍</h2>\\n<p><code>Intel DPDK</code>全称<code>Intel Data Plane Development Kit</code>，是<code>intel</code>提供的数据平面开发工具集，为<code>Intel architecture（IA）</code>处理器架构下用户空间高效的数据包处理提供库函数和驱动的支持，它不同于<code>Linux</code>系统以通用性设计为目的，而是专注于网络应用中数据包的高性能处理。<code>DPDK</code>应用程序是运行在用户空间上利用自身提供的数据平面库来收发数据包，绕过了<code>Linux</code>内核协议栈对数据包处理过程。<code>Linux</code>内核将<code>DPDK</code>应用程序看作是一个普通的用户态进程，包括它的编译、连接和加载方式和普通程序没有什么两样。<code>DPDK</code>程序启动后只能有一个主线程，然后创建一些子线程并绑定到指定<code>CPU</code>核心上运行。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/README.md","value":{"title":"《sdn-handbook》tonydeng/","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,g as data};
