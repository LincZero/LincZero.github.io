import{_ as t,c as e,e as l,o as n}from"./app-7Hf1q1UN.js";const o={};function r(c,i){return n(),e("div",null,i[0]||(i[0]=[l('<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="qstring字符串类" tabindex="-1"><a class="header-anchor" href="#qstring字符串类"><span>QString字符串类</span></a></h1><p>标准C++提供了两种字符串，而Qt提供了QString字符串类</p><ul><li>C语言风格的以“\\0”字符结尾的字符数组（C++）</li><li>字符串类String（C++）</li><li>Qt字符串类QString（Qt）</li></ul><h2 id="qstring类" tabindex="-1"><a class="header-anchor" href="#qstring类"><span>QString类</span></a></h2><p>保存16位Unicode值，提供丰富的操作、查询和转换等函数</p><p>进行了<code>隐式共享</code>（<em>implicit sharing</em>）、高效的<code>内存分配策略</code>等优化</p><p>注意：QString输出时是带双引号的</p><h3 id="符号操作" tabindex="-1"><a class="header-anchor" href="#符号操作"><span>符号操作</span></a></h3><ul><li><code>+</code>，组合字符串</li><li><code>+=</code>，组合字符串</li><li><code>=</code>，可以用双引号引起来的C类型字符串构造函数</li></ul><h3 id="字符串函数-组合字符类" tabindex="-1"><a class="header-anchor" href="#字符串函数-组合字符类"><span>字符串函数 - 组合字符类</span></a></h3><ul><li><code>QString::append()</code>，尾部追加字符串 <ul><li>与+=操作符功能相同</li><li>例：<code>str1.append(&quot;world&quot;);</code></li></ul></li><li><code>QString::sprintf()</code>，格式化组合字符串 <ul><li>格式定义与C++库中函数sprintf()定义的一样</li><li>例：<code>str.sprintf(&quot;%s %s&quot;,&quot;Hello &quot;,&quot;World!&quot;)</code></li></ul></li><li><code>QString:arg()</code>，格式化组合字符串 <ul><li>相对于<code>QString::sprintf()</code>，<code>QString:arg()</code>是一个比较好的解决方案：类型安全，完全支持Unicode，允许改变<code>%n</code>参数的顺序</li><li>例：<code>str = QString(&quot;.%1 was born in %2.&quot;).arg(&quot;John&quot;).arg(1998);</code></li></ul></li><li><code>insert()</code>，原字符串特定位置插入另一字符串</li><li><code>prepend()</code>，原字符串开头插入另一字符串</li><li><code>replace()</code>，用自定字符串代替原字符串中某些字符</li><li><code>QString::trimmed()</code>，移除字符串两端的空白字符</li><li><code>QString::simplified()</code>，移除字符串两端的空白字符，使用单个空格字符“ ”代替字符串中出现的空白字符</li></ul><h3 id="字符串函数-查询字符串类" tabindex="-1"><a class="header-anchor" href="#字符串函数-查询字符串类"><span>字符串函数 - 查询字符串类</span></a></h3><ul><li><code>QString::startsWith()</code>，判断一个字符串是否以某个字符串开头。第一个参数指定一个字符串，第二个参数指定是否大小写敏感，默认是</li><li><code>QString::endsWith()</code>，判断一个字符串是否以某个字符串结尾</li><li><code>QString::contains()</code>，判断一个字符串是否出现过</li></ul><h3 id="字符串函数-比较两个字符串" tabindex="-1"><a class="header-anchor" href="#字符串函数-比较两个字符串"><span>字符串函数 - 比较两个字符串</span></a></h3><ul><li><code>operator&lt;(const QString&amp;)</code></li><li><code>operator&lt;=(const QString&amp;)</code></li><li><code>operator==(const QString&amp;)</code></li><li><code>operator&gt;=(const QString&amp;)</code></li><li><code>localeAwareCompare(const QString&amp;, const QString&amp;)</code></li><li><code>compare(const QString&amp;, const QString&amp;, Qt::CaseSensitivity)</code></li></ul><h3 id="字符串函数-字符串的转换" tabindex="-1"><a class="header-anchor" href="#字符串函数-字符串的转换"><span>字符串函数 - 字符串的转换</span></a></h3><p>字符串转换为数值类型</p><ul><li><code>QString::toInt()</code></li><li><code>QString::toDouble()</code></li><li><code>QString::toFloat()</code></li><li><code>QString::toLongLong()</code></li></ul><p>字符串转换为其他字符编码集。会返回一个<code>const char*</code>类型版本的<code>QByteArray</code></p><ul><li><code>toAscii()</code></li><li><code>toLatin1()</code></li><li><code>toUtf8()</code></li><li><code>toLocal8Bit()</code></li></ul><h2 id="隐式共享-又称回写复制" tabindex="-1"><a class="header-anchor" href="#隐式共享-又称回写复制"><span>隐式共享（又称回写复制）</span></a></h2><p>《Qt5开发及实例》P52</p><h2 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略"><span>内存分配策略</span></a></h2><p>《Qt5开发及实例》P53</p><h2 id="qstring" tabindex="-1"><a class="header-anchor" href="#qstring"><span>QString</span></a></h2><ul><li>头文件 <ul><li><code>#include &lt;QString&gt; </code>（但好像不加也行，不知道被哪个头文件给包含了）</li></ul></li><li>方法 <ul><li>格式化字符串：<code>QString(&quot;x=%1 y=%2&quot;).arg(x).arg(y);</code></li></ul></li><li>补充 <ul><li>类似于string类</li><li>打印出来是带引号的，解决方法：<code>qstring.toUtf8().data()</code>（先转换成QByteArray再转成char *）</li></ul></li></ul><h2 id="qstringlist-qlist-qstring" tabindex="-1"><a class="header-anchor" href="#qstringlist-qlist-qstring"><span>QStringList / QList&lt;QString&gt;</span></a></h2><ul><li>头文件 <ul><li>（但好像不加也行，不知道被哪个头文件给包含了）</li></ul></li><li>使用 <ul><li><code>QStringList list1; list1 &lt;&lt; &quot;1&quot; &lt;&lt; &quot;2&quot;;</code>，调用<code>list1[i]</code></li><li><code>QList&lt;QString&gt; list2; list2 &lt;&lt; &quot;1&quot; &lt;&lt; &quot;2&quot;;</code>，调用<code>list2.at(i);</code></li></ul></li></ul><h2 id="qdebug-调式输出" tabindex="-1"><a class="header-anchor" href="#qdebug-调式输出"><span>QDebug（调式输出）</span></a></h2><ul><li>头文件 <ul><li><code>#include &lt;QDebug&gt; </code></li></ul></li><li>使用 <ul><li><code>qDebug() &lt;&lt; &quot;调试信息&quot;;</code>或者<code>qDebug(&quot;调试信息&quot;);</code>（但我用后者时好像不行）</li></ul></li></ul>',32)]))}const a=t(o,[["render",r],["__file","01. QString字符串类.html.vue"]]),s=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/03.%20Qt%E5%85%B6%E4%BB%96%E7%B1%BB%EF%BC%88%E6%8C%89%E5%8A%9F%E8%83%BD%EF%BC%89/01.%20%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/01.%20QString%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 QString字符串类 标准C++提供了两种字符串，而Qt提供了QString字符串类 C语言风格的以“\\\\0”字符结尾的字符数组（C++） 字符串类String（C++） Qt字符串类QString（Qt） QString类 保存16位Unicode值，提供丰富的操作、查询和转换等函数 进行了隐式共享（implicit sharing）、高...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/03.%20Qt%E5%85%B6%E4%BB%96%E7%B1%BB%EF%BC%88%E6%8C%89%E5%8A%9F%E8%83%BD%EF%BC%89/01.%20%E6%96%87%E6%9C%AC%E7%9B%B8%E5%85%B3/01.%20QString%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 QString字符串类 标准C++提供了两种字符串，而Qt提供了QString字符串类 C语言风格的以“\\\\0”字符结尾的字符数组（C++） 字符串类String（C++） Qt字符串类QString（Qt） QString类 保存16位Unicode值，提供丰富的操作、查询和转换等函数 进行了隐式共享（implicit sharing）、高..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Qt","slug":"qt","link":"#qt","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"QString字符串类","slug":"qstring字符串类","link":"#qstring字符串类","children":[{"level":2,"title":"QString类","slug":"qstring类","link":"#qstring类","children":[{"level":3,"title":"符号操作","slug":"符号操作","link":"#符号操作","children":[]},{"level":3,"title":"字符串函数 - 组合字符类","slug":"字符串函数-组合字符类","link":"#字符串函数-组合字符类","children":[]},{"level":3,"title":"字符串函数 - 查询字符串类","slug":"字符串函数-查询字符串类","link":"#字符串函数-查询字符串类","children":[]},{"level":3,"title":"字符串函数 - 比较两个字符串","slug":"字符串函数-比较两个字符串","link":"#字符串函数-比较两个字符串","children":[]},{"level":3,"title":"字符串函数 - 字符串的转换","slug":"字符串函数-字符串的转换","link":"#字符串函数-字符串的转换","children":[]}]},{"level":2,"title":"隐式共享（又称回写复制）","slug":"隐式共享-又称回写复制","link":"#隐式共享-又称回写复制","children":[]},{"level":2,"title":"内存分配策略","slug":"内存分配策略","link":"#内存分配策略","children":[]},{"level":2,"title":"QString","slug":"qstring","link":"#qstring","children":[]},{"level":2,"title":"QStringList / QList<QString>","slug":"qstringlist-qlist-qstring","link":"#qstringlist-qlist-qstring","children":[]},{"level":2,"title":"QDebug（调式输出）","slug":"qdebug-调式输出","link":"#qdebug-调式输出","children":[]}]}],"git":{},"readingTime":{"minutes":2.47,"words":742},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/03. Qt其他类（按功能）/01. 文本相关/01. QString字符串类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>QString字符串类</h1>\\n<p>标准C++提供了两种字符串，而Qt提供了QString字符串类</p>\\n<ul>\\n<li>C语言风格的以“\\\\0”字符结尾的字符数组（C++）</li>\\n<li>字符串类String（C++）</li>\\n<li>Qt字符串类QString（Qt）</li>\\n</ul>\\n<h2>QString类</h2>\\n<p>保存16位Unicode值，提供丰富的操作、查询和转换等函数</p>\\n<p>进行了<code>隐式共享</code>（<em>implicit sharing</em>）、高效的<code>内存分配策略</code>等优化</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/03. Qt其他类（按功能）/01. 文本相关/01. QString字符串类.md","value":{"title":"01. QString字符串类","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/03. Qt其他类（按功能）/01. 文本相关/01. QString字符串类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,s as data};
