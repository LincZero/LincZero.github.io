import{_ as i,e as s,g as e,o as a}from"./app-DPU1xou8.js";const d={};function l(n,t){return a(),s("div",null,t[0]||(t[0]=[e(`<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="pro-工程配置文件-qt-project-file" tabindex="-1"><a class="header-anchor" href="#pro-工程配置文件-qt-project-file"><span>.pro 工程配置文件（Qt Project file）</span></a></h1><p>参考：</p><ul><li><a href="https://doc.qt.io/qt-5/qmake-variable-reference.html" target="_blank" rel="noopener noreferrer">【Qt官网】qmake手册 &gt; 变量</a></li><li><a href="https://blog.csdn.net/qq_34139994/article/details/98473231" target="_blank" rel="noopener noreferrer">【CSDN】Qt 编译方式之 qmake</a></li></ul><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><ul><li>列举工程中包含的源文件</li><li>.pro文件与平台无关，可使用qmake将其生成与平台相关的makefile</li></ul><h3 id="qmake" tabindex="-1"><a class="header-anchor" href="#qmake"><span>qmake</span></a></h3><p>详见Qt 的帮助文档中的 qmake 介绍</p><p>作用</p><ul><li>qmake工具有助于简化不同平台上开发项目的构建过程，是 Qt 工具包中带的一个非常方便的工具</li><li>能<strong>用于生成 Makefile 以及各种工程文件</strong>，创建每个makefile只需要几行信息</li><li>还能<strong>生成 Microsoft Visual Studio 可以使用的项目文件等</strong></li><li>最关键的是它可以自动解决依赖关系，不用手写 Makefile。而且是跨平台的，您可以将qmake用于任何软件项目，无论它是否使用qt编写</li></ul><h2 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置"><span>常用配置</span></a></h2><h3 id="常使用的变量-对于app或者lib工程" tabindex="-1"><a class="header-anchor" href="#常使用的变量-对于app或者lib工程"><span>常使用的变量（对于app或者lib工程）</span></a></h3><p>红字类</p><blockquote><table><thead><tr><th><strong>【资源类】</strong></th><th></th><th></th></tr></thead><tbody><tr><td>HEADERS</td><td>指定工程的C++头文件（.h）</td><td></td></tr><tr><td>SOURCES</td><td>指定工程的C++实现文件（.cpp）</td><td></td></tr><tr><td>FORMS</td><td>指定需要UIC处理的的UI文件（.ui）</td><td></td></tr><tr><td>RESOURCES</td><td>指定需要RCC处理的QRC文件（.qrc）</td><td></td></tr><tr><td><strong>【搜寻路径类】</strong></td><td></td><td></td></tr><tr><td>INCLUDEPATH</td><td>指定编译项目时搜索全局头文件的路径</td><td>如果是不同系统的路径，可以添加系统判断</td></tr><tr><td>LIBS</td><td>指定工程要链接的库</td><td>库既可使用绝对路径，也可使用Unix的**-L和-l（分别是文件夹和文件）**</td></tr><tr><td>DLLDESTDIR</td><td>指定目标库文件放置的目录</td><td>默认值：与DESTDIR相同</td></tr><tr><td>DEPENDPATH</td><td>指定要查找以解析依赖项的所有目录的列表</td><td></td></tr><tr><td>DISTFILES</td><td>指定要包含在dist目标中的文件列表</td><td>例：<code>DISTFILES += ../program.txt</code></td></tr><tr><td><strong>【生成路径类】</strong></td><td></td><td></td></tr><tr><td>DESTDIR</td><td>指定.exe目标文件(可执行文件)生成的目录</td><td>默认值：平台相关，Linux为当前目录，Win为debug/release目录</td></tr><tr><td>MOC_DIR</td><td>指定moc_文件生成的路径</td><td>moc_xxx.cpp和moc_xxx.h文件</td></tr><tr><td>RCC_DIR</td><td>指定rcc_文件生成的路径</td><td>有可能不生成，qrc_文件呢？？？</td></tr><tr><td>UI_DIR</td><td>指定.ui生成的.h文件的路径</td><td>ui_xxx.h文件</td></tr><tr><td>OBJECTS_DIR</td><td>指定.obj文件生成的路径</td><td></td></tr><tr><td><strong>【配置类】</strong></td><td></td><td></td></tr><tr><td>VERSION</td><td>指定目标库的版本号</td><td></td></tr><tr><td>RC_ICONS</td><td>指定工程的ico图标</td><td>Qt5才支持</td></tr><tr><td>QT</td><td>指定工程所要用到的Qt模块</td><td></td></tr><tr><td>TARGET</td><td>指定可执行文件或库的基本文件名</td><td>默认值：当前的目录名</td></tr><tr><td>CONFIG</td><td>指定各种用于工程配套和编译的参数</td><td></td></tr><tr><td>DEFINES</td><td>指定预定义的C++预处理器符号</td><td></td></tr><tr><td>INSTALLS</td><td>指定执行<code>make install</code>等安装过程时将安装的资源列表</td><td>（windows下一般不用这个操作）</td></tr></tbody></table></blockquote><p>蓝字类（函数）</p><blockquote><table><thead><tr><th>include()</th><th>用来包含pri文件</th></tr></thead><tbody><tr><td>greaterThan(QT_MAJOR_VERSION, 4){}</td><td>版本的条件判断</td></tr></tbody></table></blockquote><p>黄字类（自定义变量或变量子属性）</p><blockquote><table><thead><tr><th>target.path</th><th>定义描述了安装生成目标的位置<br>例<code>target.path += $$[QT_INSTALL_PLUGINS]</code>+<code>INSTALLS += target</code></th></tr></thead><tbody><tr><td>例如：libs.depends = 3rdparty</td><td>编译依赖</td></tr><tr><td>例如：xpath = $\${OUT_PWD}/../</td><td>自定义变量</td></tr></tbody></table></blockquote><p>其他补充</p><p>LIBS：例：<code>-L/usr/local/lib</code>和<code>-ldb_cxx</code></p><h4 id="template" tabindex="-1"><a class="header-anchor" href="#template"><span><code>TEMPLATE</code></span></a></h4><p>模板变量告诉qmake为这个应用程序生成哪种makefile</p><p>主要的三种工程文件分类，<strong>默认值</strong>：app</p><table><thead><tr><th>选项</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>app</td><td>单独的应用程序</td><td><code>TEMPLATE = app</code></td></tr><tr><td>lib</td><td>静态和动态库</td><td><code>TEMPLATE = lib</code></td></tr><tr><td>subdirs</td><td>递归编译</td><td><code>TEMPLATE = subdirs</code></td></tr><tr><td>aux</td><td>创建一个不建任何东西的Makefile。<br>如果没有编译器需要被调用来创建目标，比如你的项目使用解释型语言写的，使用此功能</td><td></td></tr><tr><td>vcapp</td><td>仅适用于Windows。创建一个Visual Studio应用程序项目</td><td></td></tr><tr><td>vclib</td><td>仅适用于Windows。创建一个Visual Studio库项目</td><td></td></tr></tbody></table><h4 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span><code>CONFIG</code></span></a></h4><p>具体项目配置和编译器选项，值由qmake内部识别并具有特殊意义</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>【构建类】</strong></td><td></td></tr><tr><td>debug</td><td>编译具有调试信息的可执行文件或者库，链接调试版的Qt库</td></tr><tr><td>release</td><td>编译不具有调试信息的可执行文件或者库，链接发行版的Qt库。如果同时指定debug和release，则debug有效</td></tr><tr><td>debug_and_release</td><td>项目准备以debug和release两种模式构建</td></tr><tr><td>debug_and_release_target</td><td>此选项默认设置。如果也指定了debug_and_release，最终的debug和release构建在不同的目录</td></tr><tr><td>build_all</td><td>如果指定了debug_and_release，默认情况下，该项目会构建为debug和release模式</td></tr><tr><td><strong>【其他类】</strong></td><td></td></tr><tr><td>plugin</td><td>编译一个插件（插件总是动态库，因此这一参数暗指dll参数）</td></tr><tr><td>warn_off</td><td>关闭大量警告（默认情况下警告的状态会打开）</td></tr><tr><td>qt</td><td>指应用程序或者库使用Qt（默认包含）</td></tr><tr><td>dll</td><td>动态链接库</td></tr><tr><td>staticlib</td><td>静态链接库</td></tr><tr><td>console</td><td>应用程序需要写控制台（使用cout、cerr、qWarning()，等等）</td></tr><tr><td>app_bundle</td><td>只使用与Mac OS X编译，指可执行文件被放到束中（Mac OS X的默认情况）</td></tr><tr><td>lib_bundle</td><td>只适用于Mac OS X编译，指库被放到框架中</td></tr><tr><td>thread</td><td>启用线程支持。当CONFIG包括qt时启用，这是缺省设置</td></tr><tr><td><strong>【支持类】</strong></td><td></td></tr><tr><td>c++11</td><td>启用c++11支持。如果编译器不支持c++11这个选项，没有影响。默认情况下，支持是禁用的</td></tr><tr><td>c++14</td><td>启用c++14支持。如果编译器不支持c++14这个选项，没有影响。默认情况下，支持是禁用的</td></tr></tbody></table><h4 id="qt-qt-module" tabindex="-1"><a class="header-anchor" href="#qt-qt-module"><span><code>QT</code>（<em>Qt module</em>）</span></a></h4><p>指定项目使用的qt模块</p><p>在C++实现级别，使用QT模块使其头文件可用于包含，并使其与二进制连接。</p><p><strong>默认值</strong>：core gui，对应QtCore和QtGui模块（如果想要构建一个没有 qt-gui 模块的项目，需要使用 “-=” 操作符排除gui）</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>Widgets</td><td>Widget（Qt5新增，一般写成<code>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</code>），相关头文件：控件都是</td></tr><tr><td>Webkit</td><td>网页</td></tr><tr><td>Test</td><td>测试</td></tr><tr><td>SQL</td><td>数据库</td></tr><tr><td>Quick</td><td>Qt Quick Application</td></tr><tr><td>QML</td><td>QML</td></tr><tr><td>Mulitmedia Widgets</td><td>多媒体窗口</td></tr><tr><td>Core</td><td>核心，相关头文件：<code>&lt;QDir&gt;</code></td></tr><tr><td>GUI</td><td>显示图形，我猜测是Qt5之前没Widget模块时用的</td></tr><tr><td>Network</td><td>网络</td></tr><tr><td>Mulitmedia</td><td>多媒体</td></tr><tr><td>Quick Controls</td><td></td></tr><tr><td>Quick Dialogs</td><td></td></tr><tr><td>script</td><td>链接QtScript，相关头文件：<code>&lt;QScriptEngine&gt; &lt;QScriptValue&gt; &lt;QScriptValueList&gt;</code></td></tr></tbody></table><h4 id="libs" tabindex="-1"><a class="header-anchor" href="#libs"><span><code>LIBS</code></span></a></h4><p>库既可使用绝对路径，也可使用Unix的-L和-l（例<code>-L/usr/local/lib</code>和<code>-ldb_cxx</code>，分别是文件夹和文件）</p><p>-L、-l的用法：</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">LIBS += -L$\${ADS_OUT_ROOT}/3rdparty/lib						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文件夹-L</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">LIBS += -lqtadvanceddockingd								</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文件-l</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 这两句等价于</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">LIBS += -l$\${ADS_OUT_ROOT}/3rdparty/lib/qtadvanceddockingd	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文件-l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他语法" tabindex="-1"><a class="header-anchor" href="#其他语法"><span>其他语法</span></a></h2><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h3><ul><li><code>=</code>操作符，覆盖以前的各个值</li><li><code>+=</code>操作符，扩展变量的值</li><li><code>-=</code>操作符，移除所有出现指定的值</li><li><code>*=</code>操作符，在一个变量上添加一个值，但要求被添加的值不再变量的列表上，否则就什么也不做</li><li><code>~=</code>操作符，使用指定的值替换符合正则表达式的值（例如<code>SOURCE ~= s/\\.cpp\\b/.cxx</code>使用.cxx替换所有.cpp文件的扩展名）</li></ul><h3 id="其他语法-1" tabindex="-1"><a class="header-anchor" href="#其他语法-1"><span>其他语法</span></a></h3><p>qmake的存取函数</p><table><thead><tr><th>存取函数</th><th>说明</th></tr></thead><tbody><tr><td><code>$$varName</code>或者<code>$\${varName}</code></td><td>.pro文件中qmake变量在那一时刻的值</td></tr><tr><td><code>$$(varName)</code></td><td>当qmake运行时环境变量的值</td></tr><tr><td><code>$(varName)</code></td><td>当处理makefile时环境变量的值</td></tr><tr><td><code>$$[varName]</code></td><td>Qt的配置参数值</td></tr></tbody></table><p>内置函数</p><table><thead><tr><th>内置函数</th><th>说明</th></tr></thead><tbody><tr><td><code>$$lower()</code></td><td>把字符串转换为小写</td></tr><tr><td><code>$$system()</code></td><td>允许从外部应用程序中产生字符串。例如<code>OS_VERSION=$$system(uname -r)</code></td></tr></tbody></table><h3 id="路径问题" tabindex="-1"><a class="header-anchor" href="#路径问题"><span>路径问题</span></a></h3><ul><li><p>路径宏</p><ul><li><p>QT安装路径有关（QT_INSTALL开头）</p><ul><li><code>$$[QT_INSTALL_PLUGINS]</code>，插件路径，<code>安装路径\\QT\\Qt-6.0.3\\msvc2019_64\\plugins</code></li><li><code>$$[QT_INSTALL_EXAMPLES]</code>，示例路径，<code>安装路径\\QT\\Examples\\Qt-6.0.3</code></li></ul></li><li><p>源代码路径有关</p><ul><li><code>$$PWD</code>，指定指向包含正在解析的当前文件的目录的完整路径（Linux也有个PWD命令：Print Work Directory）</li></ul></li><li><p>构建路径有关</p><ul><li><code>./</code>，和 &quot;$$PWD&quot; 不同，前者是build路径，后者是源代码项目路径</li><li><code>$\${OUT_PWD}</code>，指定指向qmake<strong>存放生成的Makefile的目录</strong>的完整路径（Windows下与debug+release文件夹所在的目录）</li></ul></li><li><p>使用场景和选择</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">SOURCES += \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    core.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">HEADERS += \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    core.h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">DESTDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> ../Bin			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 生成路径用./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">INCLUDEPATH += $$PWD/../..	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 正确写法</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#INCLUDEPATH += ../..		# 我经常用这种写法，也能运行，但应该不妥</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">DEPENDPATH += $$PWD/../..</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>使用举例</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">ADS_OUT_ROOT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> $\${OUT_PWD}/..		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义常量路径 = 指定指向qmake存放生成的Makefile的目录的完整路径</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">DESTDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> $\${ADS_OUT_ROOT}/lib		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 输出路径</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="条件判断语法" tabindex="-1"><a class="header-anchor" href="#条件判断语法"><span>条件判断语法</span></a></h3><p>基本语法</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 【condition不是关键字】可以是平台名字（例如：win32、unix、macx）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">condition {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">	then-case	</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 使用标准语法为变量赋值，例如 SOURCES += serial_win.cpp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">} else {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">	else-case</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# 使用标准语法为变量赋值，例如 SOURCES += serial_unix.cpp</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也可以写成单行形式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">condition: then-case</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可以在条件中使用结果合并，并与contains()合用，例如</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">contains(OS_VERSION, SunOS): SOURCES += mythread_sun.c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用举例1</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 版本判断选择组件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">lessThan(QT_VERSION, 0x050600){QT += webkitwidgets}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">greaterThan(QT_VERSION, 0x050500){QT += webenginewidgets}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用举例2</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">CONFIG(debug, debug|release){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    win32 {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">        LIBS += -lqtadvanceddockingd</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    else:mac {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">        LIBS += -lqtadvanceddocking_debug</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    else {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">        LIBS += -lqtadvanceddocking</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">else{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    LIBS += -lqtadvanceddocking</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">unix:!macx {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    LIBS += -lxcb</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译依赖-影响编译顺序" tabindex="-1"><a class="header-anchor" href="#编译依赖-影响编译顺序"><span>编译依赖（影响编译顺序）</span></a></h3><p>举例</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># build order: 3rdparty -&gt; libs -&gt; app-static -&gt; app &amp; test</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">libs.depends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> 3rdparty</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">app.depends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> libs app-static</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">test.depends</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> libs app-static</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><ul><li>Q：递归项目如何删除子项目（右键会发现删除项目的选项是灰色的）</li><li>A：在pro项目中将该子项目注释掉即可</li></ul>`,60)]))}const p=i(d,[["render",l],["__file","01.1 .pro 工程配置文件.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/01.1%20.pro%20%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 .pro 工程配置文件（Qt Project file） 参考： 【Qt官网】qmake手册 > 变量 【CSDN】Qt 编译方式之 qmake 简概 作用 列举工程中包含的源文件 .pro文件与平台无关，可使用qmake将其生成与平台相关的makefile qmake 详见Qt 的帮助文档中的 qmake 介绍 作用 qmake工具有助于...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/04.%20%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E5%88%9B%E5%BB%BA%E6%80%A7%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/01.1%20.pro%20%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 .pro 工程配置文件（Qt Project file） 参考： 【Qt官网】qmake手册 > 变量 【CSDN】Qt 编译方式之 qmake 简概 作用 列举工程中包含的源文件 .pro文件与平台无关，可使用qmake将其生成与平台相关的makefile qmake 详见Qt 的帮助文档中的 qmake 介绍 作用 qmake工具有助于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.5,"words":2251},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/01.1 .pro 工程配置文件.md","excerpt":"\\n<h1>目录</h1>\\n<h1>.pro 工程配置文件（Qt Project file）</h1>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://doc.qt.io/qt-5/qmake-variable-reference.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【Qt官网】qmake手册 &gt; 变量</a></li>\\n<li><a href=\\"https://blog.csdn.net/qq_34139994/article/details/98473231\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【CSDN】Qt 编译方式之 qmake</a></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/01.1 .pro 工程配置文件.md","value":{"title":"01.1 .pro 工程配置文件","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/04. 辅助文件/创建性辅助文件/01.1 .pro 工程配置文件.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
