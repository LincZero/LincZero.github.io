import{_ as n,c as s,e,o as t}from"./app-D5EhND04.js";const l={};function p(o,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="对象包装器与自动装箱" tabindex="-1"><a class="header-anchor" href="#对象包装器与自动装箱"><span>对象包装器与自动装箱</span></a></h1><p>API: <code>java.lang.Integer 1.0</code> API: <code>java.text.NumberFormat 1.1</code></p><h2 id="包装器-wrapper" tabindex="-1"><a class="header-anchor" href="#包装器-wrapper"><span>包装器（wrapper）</span></a></h2><ul><li><p>概念</p><ul><li>有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。 例如，Integer类对应基本类型int。通常，这些类称为包装器</li><li>这些对象包装器类拥有很明显的名字： Integer、Long、Float、Double、Short、Byte、（前6个类派生于公共的超类Number） Character、Void和Boolean</li></ul></li><li><p>特性</p><ul><li>对象包装器类是<strong>不可变的</strong>，即一旦构造了包装器，就不允许更改包装在其中的值（除非拆箱再装箱）</li><li>对象包装器类还是final，因此不能定义它们的子类</li></ul></li><li><p>使用场景举例</p><ul><li><p>想定义一个整型数组列表。而尖括号中的类型参数不允许是基本类型。就用到了Integer对象包装器类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可以将某些基本方法放置在包装器中 例如类型转化的方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 与Integer实例无关，parseInt是一个静态方法</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 字符串转整型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="自动装箱-autoboxing" tabindex="-1"><a class="header-anchor" href="#自动装箱-autoboxing"><span>自动装箱（autoboxing）</span></a></h2><h3 id="自动装箱" tabindex="-1"><a class="header-anchor" href="#自动装箱"><span>自动装箱</span></a></h3><p>大家可能认为自动打包（autowrapping）更加合适，而“装箱（boxing）”这个词源自于C#</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 会自动变为：</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动拆箱" tabindex="-1"><a class="header-anchor" href="#自动拆箱"><span>自动拆箱</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 会自动变成</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="算术表达式中自动拆箱和装箱" tabindex="-1"><a class="header-anchor" href="#算术表达式中自动拆箱和装箱"><span>算术表达式中自动拆箱和装箱</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
n<span class="token operator">++</span><span class="token punctuation">;</span>	<span class="token comment">// 自动地插入一条对象拆箱的指令，然后进行自增计算，最后再将结果装箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型变化中自动拆箱和装箱" tabindex="-1"><a class="header-anchor" href="#类型变化中自动拆箱和装箱"><span>类型变化中自动拆箱和装箱</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Interger</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Double</span> x <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">?</span>n<span class="token operator">:</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// Prints 1.0</span>
								<span class="token comment">// 如果在一个条件表达式中混合使用Integer和Double类型：</span>
								<span class="token comment">// Integer值会拆箱，提升为double，再装箱为Double</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h2><h3 id="自动包装器的相等性" tabindex="-1"><a class="header-anchor" href="#自动包装器的相等性"><span>自动包装器的相等性</span></a></h3><p>基本类型与它们的对象包装器是一样的，只是它们的相等性不同</p><p>在两个包装器对象比较时<strong>调用equals方法</strong>，而不要用==</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>		<span class="token comment">// 结果是不确定的：可能相等也可能不等</span>
    				<span class="token comment">// 原因：自动装箱规范要求boolean、byte、char≤127，介于-128～127之间的short和int被包装到固定的对象中</span>
    				<span class="token comment">// 如果a和b初始化为100，则比较结果是成立的</span>
    				<span class="token comment">// 解决这个问题的办法是在两个包装器对象比较时调用equals方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包装器引用null" tabindex="-1"><a class="header-anchor" href="#包装器引用null"><span>包装器引用null</span></a></h3><p>由于包装器类引用可以为null，所以自动装箱有可能会抛出一个NullPointerException异常</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// Throws NullPointerException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖编译器而非虚拟机" tabindex="-1"><a class="header-anchor" href="#依赖编译器而非虚拟机"><span>依赖编译器而非虚拟机</span></a></h3><p>装箱和拆箱是编译器认可的，而不是虚拟机</p><h3 id="如何通过方法修改包装器的数值-通过持有者类型" tabindex="-1"><a class="header-anchor" href="#如何通过方法修改包装器的数值-通过持有者类型"><span>如何通过方法修改包装器的数值？通过持有者类型</span></a></h3><p><strong>（这里我也不是很懂）</strong></p><ul><li></li><li><p><s>基本类型值传递，没办法修改值</s></p></li><li><p><s>Integer对象不可变，没办法修改值</s></p></li><li><p>需要使用在org.omg.CORBA包中定义的<code>持有者（holder）类型</code>：包括IntHolder、BooleanHolder等。 每个持有者类型都包含一个公有域值，通过它可以访问存储在其中的值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token class-name">IntHolder</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    x<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>x<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,29)]))}const c=n(l,[["render",p],["__file","02.2 对象包装器与自动装箱.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.2%20%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8%E4%B8%8E%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 对象包装器与自动装箱 API: java.lang.Integer 1.0 API: java.text.NumberFormat 1.1 包装器（wrapper） 概念 有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。 例如，Integer类对应基本类型int。通常，这些类称为包装器 这些对象包装器类拥...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.2%20%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E5%99%A8%E4%B8%8E%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 对象包装器与自动装箱 API: java.lang.Integer 1.0 API: java.text.NumberFormat 1.1 包装器（wrapper） 概念 有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。 例如，Integer类对应基本类型int。通常，这些类称为包装器 这些对象包装器类拥..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"对象包装器与自动装箱","slug":"对象包装器与自动装箱","link":"#对象包装器与自动装箱","children":[{"level":2,"title":"包装器（wrapper）","slug":"包装器-wrapper","link":"#包装器-wrapper","children":[]},{"level":2,"title":"自动装箱（autoboxing）","slug":"自动装箱-autoboxing","link":"#自动装箱-autoboxing","children":[{"level":3,"title":"自动装箱","slug":"自动装箱","link":"#自动装箱","children":[]},{"level":3,"title":"自动拆箱","slug":"自动拆箱","link":"#自动拆箱","children":[]},{"level":3,"title":"算术表达式中自动拆箱和装箱","slug":"算术表达式中自动拆箱和装箱","link":"#算术表达式中自动拆箱和装箱","children":[]},{"level":3,"title":"类型变化中自动拆箱和装箱","slug":"类型变化中自动拆箱和装箱","link":"#类型变化中自动拆箱和装箱","children":[]}]},{"level":2,"title":"补充","slug":"补充","link":"#补充","children":[{"level":3,"title":"自动包装器的相等性","slug":"自动包装器的相等性","link":"#自动包装器的相等性","children":[]},{"level":3,"title":"包装器引用null","slug":"包装器引用null","link":"#包装器引用null","children":[]},{"level":3,"title":"依赖编译器而非虚拟机","slug":"依赖编译器而非虚拟机","link":"#依赖编译器而非虚拟机","children":[]},{"level":3,"title":"如何通过方法修改包装器的数值？通过持有者类型","slug":"如何通过方法修改包装器的数值-通过持有者类型","link":"#如何通过方法修改包装器的数值-通过持有者类型","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.74,"words":821},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02.2 对象包装器与自动装箱.md","excerpt":"\\n<h1>目录</h1>\\n<h1>对象包装器与自动装箱</h1>\\n<p>API: <code>java.lang.Integer 1.0</code>\\nAPI: <code>java.text.NumberFormat 1.1</code></p>\\n<h2>包装器（wrapper）</h2>\\n<ul>\\n<li>\\n<p>概念</p>\\n<ul>\\n<li>有时，需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。\\n例如，Integer类对应基本类型int。通常，这些类称为包装器</li>\\n<li>这些对象包装器类拥有很明显的名字：\\nInteger、Long、Float、Double、Short、Byte、（前6个类派生于公共的超类Number）\\nCharacter、Void和Boolean</li>\\n</ul>\\n</li>\\n<li>\\n<p>特性</p>\\n<ul>\\n<li>对象包装器类是<strong>不可变的</strong>，即一旦构造了包装器，就不允许更改包装在其中的值（除非拆箱再装箱）</li>\\n<li>对象包装器类还是final，因此不能定义它们的子类</li>\\n</ul>\\n</li>\\n<li>\\n<p>使用场景举例</p>\\n<ul>\\n<li>\\n<p>想定义一个整型数组列表。而尖括号中的类型参数不允许是基本类型。就用到了Integer对象包装器类</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>可以将某些基本方法放置在包装器中\\n例如类型转化的方法</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 与Integer实例无关，parseInt是一个静态方法</span>\\n<span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parseInt</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\t<span class=\\"token comment\\">// 字符串转整型</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02.2 对象包装器与自动装箱.md","value":{"title":"02.2 对象包装器与自动装箱","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/02. 数据+算法/02.2 对象包装器与自动装箱.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,r as data};
