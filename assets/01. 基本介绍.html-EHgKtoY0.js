import{_ as i,e as a,g as n,o as l}from"./app-DPU1xou8.js";const t="/assets/tcpdump-bpf-yB9jnE01.png",e="/assets/overview-DPMFr4p2.png",h="/assets/bpf-basic-arch-CKeNIk2w.png",k="/assets/packet-processor-xdp-DIeBQwz-.png",p="/assets/linux_ebpf_internals-fmEi6-gi.png",r="/assets/ebpf_60s-CJWKliE1.png",d="/assets/bcc-tools--TdWj106.png",g="/assets/linux_kernel_event_bpf-CHjA3PVP.png",c="/assets/flame-Dy0NP-mt.png",o={};function F(A,s){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="epbf" tabindex="-1"><a class="header-anchor" href="#epbf"><span>ePBF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><p>[toc]</p><h1 id="基本介绍" tabindex="-1"><a class="header-anchor" href="#基本介绍"><span>基本介绍</span></a></h1><h2 id="介绍-横向" tabindex="-1"><a class="header-anchor" href="#介绍-横向"><span>介绍 - 横向</span></a></h2><h3 id="bpf" tabindex="-1"><a class="header-anchor" href="#bpf"><span>BPF</span></a></h3><p>BPF（Berkeley Packet Filte，伯克利包过滤器），是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。</p><p><em>1992</em> 年，Steven McCanne 和 Van Jacobson 写了一篇名为《BSD数据包过滤：一种新的用户级包捕获架构》的论文。在文中，作者描述了他们如何在 Unix 内核实现网络数据包过滤，这种新的技术比当时最先进的数据包过滤技术快 20 倍。BPF 在数据包过滤上引入了两大革新：</p><ul><li>一个新的虚拟机 (VM) 设计，可以有效地工作在基于寄存器结构的 CPU 之上；</li><li>应用程序使用缓存只复制与过滤数据包相关的数据，不会复制数据包的所有信息。这样可以最大程度地减少BPF 处理的数据；</li></ul><p>由于这些巨大的改进，所有的 Unix 系统都选择采用 BPF 作为网络数据包过滤技术，直到今天，许多 Unix 内核的派生系统中（包括 Linux 内核）仍使用该实现。</p><p><strong>tcpdump</strong> 的底层采用 BPF 作为底层包过滤技术，我们可以在命令后面增加 ”-d“ 来查看 tcpdump 过滤条件的底层汇编指令。</p><p>BPF 工作在内核层，BPF 的架构图如下 [来自于bpf-usenix93，来源于论文原文]</p><p>[title(BPF 架构图)]</p><p>​ <img src="'+t+'" alt="tcpdump-bpf" style="zoom:80%;"></p><p>图的解释：</p><blockquote><p>报文到达内核驱动后，内核将报文上传协议栈的同时，也会额外将报文额外的一个副本交给BPF。</p><p>之后报文经过BPF内部逻辑的过滤（这个逻辑可以自己设置），然后最终送给用户程序（比如tcpdump）</p></blockquote><h3 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h3><p><em>2014</em> 年初，Alexei Starovoitov 实现了 <strong>eBPF（extended Berkeley Packet Filter，扩展的eBPF）</strong>。经过重新设计，eBPF 演进为一个通用执行引擎，可基于此开发性能分析工具、软件定义网络等诸多场景。eBPF 最早出现在 3.18 内核中，此后原来的 BPF 就被称为 <strong>cBPF（classic BPF，经典的BPF）</strong>。<br> cBPF 现在已经基本废弃。现在，Linux 内核只运行 eBPF，内核会将加载的 cBPF 字节码透明地转换成 eBPF 再执行。</p><p>eBPF 新的设计针对现代硬件进行了优化，所以 eBPF 生成的指令集比旧的 BPF 解释器生成的机器码执行得更快。扩展版本也增加了虚拟机中的寄存器数量，将原有的 2 个 32 位寄存器增加到 10 个 64 位寄存器。由于寄存器数量和宽度的增加，开发人员可以使用函数参数自由交换更多的信息，编写更复杂的程序。总之，这些改进使 eBPF 版本的速度比原来的 BPF 提高了 4 倍。</p><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><blockquote><p>eBPF 是一项革命性技术，起源于 Linux 内核，可以在特权上下文（例如操作系统内核）中运行沙盒程序。它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。</p></blockquote></div></div></div><blockquote><img src="'+e+'" alt="Overview" style="zoom:80%;"></blockquote><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><blockquote><p>BPF 最初代表伯克利数据包过滤器，但现在 eBPF（扩展 BPF）可以做的不仅仅是数据包过滤，这个缩写词不再有意义。 eBPF 现在被认为是一个独立的术语，不代表任何东西。在 Linux 源代码中，术语 BPF 仍然存在，并且在工具和文档中，术语 BPF 和 eBPF 通常可以互换使用</p></blockquote></div></div></div><blockquote></blockquote><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h3><h4 id="比较-cbpf-与-ebpf" tabindex="-1"><a class="header-anchor" href="#比较-cbpf-与-ebpf"><span>比较：cBPF 与 eBPF</span></a></h4><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><table><thead><tr><th>维度</th><th>cBPF</th><th>eBPF</th></tr></thead><tbody><tr><td>内核版本<br>时间<br>开发者</td><td>Linux 2.1.75<br>1997年<br>贝尔实验室</td><td>Linux 3.18 [4.x for kprobe/uprobe/tracepoint/perf-event]<br>2014年<br>Alexei Starovoitov</td></tr><tr><td>寄存器数目</td><td>2个：A, X</td><td>10个： R0–R9, 另外 R10 是一个只读的帧指针</td></tr><tr><td>寄存器宽度</td><td>32位</td><td>64位</td></tr><tr><td>存储</td><td>16 个内存位: M[0–15]</td><td>512 字节堆栈，无限制大小的 “map” 存储</td></tr><tr><td>限制的内核调用</td><td>非常有限，仅限于 JIT 特定</td><td>有限，通过 bpf_call 指令调用</td></tr><tr><td>目标事件</td><td>数据包、 seccomp-BPF</td><td>数据包、内核函数、用户函数、跟踪点 PMCs 等</td></tr></tbody></table></div></div></div><p>eBPF的扩展部分：</p><ol><li>eBPF 实现的最初目标是优化处理网络过滤器的内部 BPF 指令集。当时，BPF 程序仍然限于内核空间使用。<br> 只有少数用户空间程序可以编写内核处理的 BPF 过滤器，例如：tcpdump 和 seccomp。时至今日，这些程序仍基于旧的 BPF 解释器生成字节码，但内核中会将这些指令转换为高性能的表示。</li><li>2014 年 6 月，<strong>eBPF 扩展到用户空间，这也成为了 BPF 技术的转折点</strong>。 正如 Alexei 在提交补丁的注释中写到：“这个补丁展示了 eBPF 的潜力”。<br> 当前，eBPF <strong>不再局限于网络栈，已经成为内核顶级的子系统</strong>。</li></ol><h4 id="比较-ebpf-与-同类工具" tabindex="-1"><a class="header-anchor" href="#比较-ebpf-与-同类工具"><span>比较：eBPF 与 同类工具</span></a></h4><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><table><thead><tr><th>工具</th><th>eBPF</th><th>SystemTap</th><th>DTrace</th></tr></thead><tbody><tr><td>定位</td><td>内核技术，可用于多种应用场景</td><td>内核模块</td><td>动态跟踪和分析工具</td></tr><tr><td>工作原理</td><td>动态加载和执行无损编译过的代码</td><td>动态加载内核模块</td><td>动态插接分析器，通过 probe 获取数据并进行分析</td></tr><tr><td>常见用途</td><td>网络监控、安全过滤、性能分析等</td><td>系统性能分析、故障诊断等</td><td>系统性能分析、故障诊断等</td></tr><tr><td>优点</td><td>灵活、安全、可用于多种应用场景</td><td>功能强大、可视化界面</td><td>功能强大、高性能、支持多种编程语言</td></tr><tr><td>缺点</td><td>学习曲线高，安全性依赖于编译器的正确性</td><td>学习曲线高，安全性依赖于内核模块的正确性</td><td>配置复杂，对系统性能影响较大</td></tr></tbody></table></div></div></div><p>补充：</p><blockquote><p>eBPF 有一些类似的工具</p><ul><li>SystemTap：是一种开源工具，可以帮助用户收集 Linux 内核的运行时数据。它通过动态加载内核模块来实现这一功能，类似于 eBPF。</li><li>DTrace 是一种动态跟踪和分析工具，可以用于收集系统的运行时数据，类似于 eBPF 和 SystemTap。eBPF 也从 <a href="https://illumos.org/books/dtrace/chp-intro.html" target="_blank" rel="noopener noreferrer">dtrace</a> 中汲取了灵感</li></ul></blockquote><h4 id="比较-ebpf-与-内核模块" tabindex="-1"><a class="header-anchor" href="#比较-ebpf-与-内核模块"><span>比较：eBPF 与 内核模块</span></a></h4><p>在 Linux 观测方面，eBPF 总是会拿来与 kernel 模块方式进行对比。<br> eBPF 在安全性、入门门槛上比内核模块都有优势，这两点在观测场景下对于用户来讲尤其重要。</p><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><table><thead><tr><th>维度</th><th>Linux 内核模块</th><th>eBPF</th></tr></thead><tbody><tr><td>kprobes/tracepoints</td><td>支持</td><td>支持</td></tr><tr><td><strong>安全性</strong></td><td>可能引入安全漏洞或导致内核 Panic</td><td>通过验证器进行检查，可以保障内核安全</td></tr><tr><td>内核函数</td><td>可以调用内核函数</td><td>只能通过 BPF Helper 函数调用</td></tr><tr><td>编译性</td><td>需要编译内核</td><td>不需要编译内核，引入头文件即可</td></tr><tr><td>运行</td><td>基于相同内核运行</td><td>基于稳定 ABI 的 BPF 程序可以编译一次，各处运行</td></tr><tr><td>与应用程序交互</td><td>打印日志或文件</td><td>通过 perf_event 或 map 结构</td></tr><tr><td>数据结构丰富性</td><td>一般</td><td>丰富</td></tr><tr><td><strong>入门门槛</strong></td><td>高</td><td>低</td></tr><tr><td><strong>升级</strong></td><td>需要卸载和加载，可能导致处理流程中断</td><td>原子替换升级，不会造成处理流程中断</td></tr><tr><td>内核内置</td><td>视情况而定</td><td>内核内置支持</td></tr></tbody></table></div></div></div><h2 id="介绍-ebpf" tabindex="-1"><a class="header-anchor" href="#介绍-ebpf"><span>介绍 - eBPF</span></a></h2><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h3><h4 id="ebpf-架构图" tabindex="-1"><a class="header-anchor" href="#ebpf-架构图"><span>eBPF 架构图</span></a></h4><p>eBPF 程序架构强调安全性和稳定性，看上去更像内核模块，<strong>但与内核模块不同，eBPF 程序不需要重新编译内核</strong>，并且可以确保 eBPF 程序运行完成，而不会造成系统的崩溃。</p><p>[title(eBPF 架构图)]</p><p>​<img src="'+h+'" alt="bpf-basic-arch" loading="lazy"></p><p>简述概括， eBPF 是一套通用执行引擎，提供了可基于系统或程序事件高效安全执行特定代码的通用能力，通用能力的使用者不再局限于内核开发者；</p><p>eBPF 可由执行字节码指令、存储对象和 Helper 帮助函数组成，字节码指令在内核执行前必须通过 BPF 验证器 Verfier 的验证，同时在启用 BPF JIT 模式的内核中，会直接将字节码指令转成内核可执行的本地指令运行。</p><h4 id="xdp技术架构" tabindex="-1"><a class="header-anchor" href="#xdp技术架构"><span>XDP技术架构</span></a></h4><p>[title(XDP 技术架构)]</p><p>​<img src="'+k+'" alt="packet-processor-xdp" loading="lazy"></p><h4 id="ebpf-架构图-观测" tabindex="-1"><a class="header-anchor" href="#ebpf-架构图-观测"><span>eBPF 架构图（观测）</span></a></h4><p>基于 Linux 系统的观测工具中，eBPF 有着得天独厚的优势，高效、生产安全且内核中内置，特别的可以在内核中完成数据分析聚合比如直方图，与将数据发送到用户空间分析聚合相比，能够节省大量的数据复制传递带来的 CPU 消耗。</p><p>[title(eBPF 观测架构图)]</p><p>​ <img src="'+p+`" alt="linux_ebpf_internals" style="zoom:67%;"></p><p>eBPF 分为用户空间程序和内核程序两部分：</p><ul><li><strong>用户空间</strong>：程序负责加载 BPF 字节码至内核，如需要也会负责读取内核回传的统计信息或者事件详情；</li><li><strong>内核程序</strong>：里面的 BPF 字节码负责在内核中执行特定事件，如需要也会将执行的结果通过 maps 或者 perf-event 事件发送至用户空间；</li><li><strong>(通信)</strong>：其中用户空间程序与内核 BPF 字节码程序可以使用 map 结构（BPF映射）实现双向通信，这为内核中运行的 BPF 字节码程序提供了更加灵活的控制。</li></ul><p>用户空间程序与内核中的 BPF 字节码交互的流程主要如下：</p><ol><li>我们可以使用 LLVM 或者 GCC 工具将编写的 BPF 代码程序编译成 BPF 字节码；</li><li>然后使用加载程序 Loader 将字节码加载至内核；内核使用验证器（verfier） 组件保证执行字节码的安全性，以避免对内核造成灾难，在确认字节码安全后将其加载对应的内核模块执行；BPF 观测技术相关的程序程序类型可能是 kprobes/uprobes/tracepoint/perf_events 中的一个或多个，其中： <ul><li><strong>kprobes</strong>：<strong>内核动态跟踪</strong>。 可以跟踪到 Linux 内核中的函数入口或返回点，但是不是稳定 ABI 接口，可能会因为内核版本变化导致，导致跟踪失效。</li><li><strong>uprobes</strong>：<strong>用户动态跟踪</strong>。与 kprobes 类似，只是跟踪的函数为用户程序中的函数。</li><li><strong>tracepoints</strong>：<strong>内核静态跟踪</strong>。tracepoints 是内核开发人员维护的跟踪点，能够提供稳定的 ABI 接口，但是由于是研发人员维护，数量和场景可能受限。</li><li><strong>perf_events</strong>：<strong>定时采样和 PMC</strong>。</li></ul></li><li>内核中运行的 BPF 字节码程序可以使用两种方式将测量数据回传至用户空间 <ul><li><strong>maps</strong> 方式可用于将内核中实现的统计摘要信息（比如测量延迟、堆栈信息）等回传至用户空间；</li><li><strong>perf-event</strong> 用于将内核采集的事件实时发送至用户空间，用户空间程序实时读取分析；</li></ul></li></ol><h3 id="流行度" tabindex="-1"><a class="header-anchor" href="#流行度"><span>流行度</span></a></h3><p>eBPF 可谓 Linux 社区的新宠，很多大公司都开始投身于 eBPF 技术，如 Goole、Facebook、Twitter 等。</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><ul><li><strong>网络监控</strong>：eBPF 可以用于捕获网络数据包，并执行特定的逻辑来分析网络流量。<br> 例如，可以使用 eBPF 程序来监控网络流量，并在发现异常流量时进行警报。</li><li><strong>安全过滤</strong>：eBPF 可以用于对网络数据包进行安全过滤。<br> 例如，可以使用 eBPF 程序来阻止恶意流量的传播，或者在发现恶意流量时对其进行拦截。</li><li><strong>性能分析</strong>：eBPF 可以用于对内核的性能进行分析。<br> 例如，可以使用 eBPF 程序来收集内核的性能指标，并通过特定的接口将其可视化。这样，可以更好地了解内核的性能瓶颈，并进行优化。</li><li><strong>虚拟化</strong>：eBPF 可以用于虚拟化技术。<br> 例如，可以使用 eBPF 程序来收集虚拟机的性能指标，并进行负载均衡。这样，可以更好地利用虚拟化环境的资源，提高系统的性能和稳定性。</li></ul></div></div></div><p>总之，eBPF 的常见用途非常广泛，可以用于网络监控、安全过滤、性能分析和虚拟化等多种应用场景。</p><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><ul><li>eBPF 也逐渐在<strong>分析和观测</strong>（跟踪、性能调优等）、安全和网络等领域发挥重要的角色。<br> Facebook、NetFlix 、CloudFlare 等知名互联网公司内部广泛采用基于 eBPF 技术的各种程序用于性能分析、排查问题、负载均衡、防范 DDoS 攻击，据相关信息显示在 Facebook 的机器上内置一系列 eBPF 的相关工具。</li><li>相对于系统的性能分析和观测，eBPF 技术在<strong>网络技术</strong>中的表现，更是让人眼前一亮，BPF 技术与 XDP（eXpress Data Path） 和 TC（Traffic Control） 组合可以实现功能更加强大的<strong>网络功能</strong>，更可为 SDN 软件定义网络提供基础支撑。<br> XDP 只作用与网络包的 Ingress 层面，BPF 钩子位于<strong>网络驱动中尽可能早的位置</strong>，<strong>无需进行原始包的复制</strong>就可以实现最佳的数据包处理性能，挂载的 BPF 程序是运行过滤的理想选择，可用于丢弃恶意或非预期的流量、进行 DDOS 攻击保护等场景；而 TC Ingress 比 XDP 技术处于更高层次的位置，BPF 程序在 <strong>L3 层之前运行</strong>，可以访问到与数据包相关的大部分元数据，是本地节点处理的理想的地方，可以用于流量监控或者 L3/L4 的端点策略控制，同时配合 TC egress 则可实现对于容器环境下更高维度和级别的网络结构。</li></ul></div></div></div><h3 id="ebpf-的限制" tabindex="-1"><a class="header-anchor" href="#ebpf-的限制"><span>eBPF 的限制</span></a></h3><p>eBPF 技术虽然强大，但是为了保证内核的处理安全和及时响应，内核中的 eBPF 技术也给予了诸多限制，当然随着技术的发展和演进，限制也在逐步放宽或者提供了对应的解决方案。</p><ul><li><p><strong>eBPF 程序不能调用任意的内核参数</strong></p><p>只限于内核模块中列出的 BPF Helper 函数，函数支持列表也随着内核的演进在不断增加。（todo 添加个数说明）</p></li><li><p><strong>eBPF 程序不允许包含无法到达的指令</strong></p><p>防止加载无效代码，延迟程序的终止。</p></li><li><p><strong>eBPF 程序中循环次数限制且必须在有限时间内结束</strong></p><p>这主要是用来防止在 kprobes 中插入任意的循环，导致锁住整个系统；解决办法包括展开循环，并为需要循环的常见用途添加辅助函数。Linux 5.3 在 BPF 中包含了对有界循环的支持，它有一个可验证的运行时间上限。</p></li><li><p><strong>eBPF 堆栈大小被限制在 MAX_BPF_STACK</strong></p><p>截止到内核 Linux 5.8 版本，被设置为 512；参见 <a href="https://github.com/torvalds/linux/blob/v5.8/include/linux/filter.h" target="_blank" rel="noopener noreferrer">include/linux/filter.h</a>，这个限制特别是在栈上存储多个字符串缓冲区时：一个char[256]缓冲区会消耗这个栈的一半。目前没有计划增加这个限制，解决方法是改用 bpf 映射存储，它实际上是无限的。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* BPF program can access up to 512 bytes of stack space. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MAX_BPF_STACK</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">	512</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>eBPF 字节码大小的限制 (特别是针对无权限程序)</strong></p><p>eBPF 字节码大小最初被限制为 4096 条指令。<br> 截止到内核 Linux 5.8 版本， 当前已将放宽至 100 万指令（ BPF_COMPLEXITY_LIMIT_INSNS），参见：<a href="https://github.com/torvalds/linux/blob/v5.8/include/linux/bpf.h" target="_blank" rel="noopener noreferrer">include/linux/bpf.h</a>。<br> 但对于无权限的BPF程序，仍然保留4096条限制 ( BPF_MAXINSNS )；<br> 新版本的 eBPF 也支持了多个 eBPF 程序级联调用，虽然传递信息存在某些限制，但是可以通过组合实现更加强大的功能。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BPF_COMPLEXITY_LIMIT_INSNS</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1000000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* yes. 1M insns */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="作品、应用案例" tabindex="-1"><a class="header-anchor" href="#作品、应用案例"><span>作品、应用案例</span></a></h2><h3 id="作品一览" tabindex="-1"><a class="header-anchor" href="#作品一览"><span>作品一览</span></a></h3><p>eBPF 相关的知名的开源项目包括但不限于以下：</p><ul><li>Facebook 高性能 4 层负载均衡器 <a href="https://github.com/facebookincubator/katran" target="_blank" rel="noopener noreferrer">Katran</a>；</li><li><a href="https://cilium.io/" target="_blank" rel="noopener noreferrer">Cilium</a> 为下一代微服务 ServiceMesh 打造了具备API感知和安全高效的容器网络方案；底层主要使用 XDP 和 TC 等相关技术；</li><li>IO Visor 项目开源的 <a href="https://github.com/iovisor/bcc" target="_blank" rel="noopener noreferrer">BCC</a>、 <a href="https://github.com/iovisor/bpftrace" target="_blank" rel="noopener noreferrer">BPFTrace</a> 和 <a href="https://github.com/iovisor/kubectl-trace" target="_blank" rel="noopener noreferrer">Kubectl-Trace</a>： <a href="https://github.com/iovisor/bcc" target="_blank" rel="noopener noreferrer">BCC</a> 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程序；<a href="https://github.com/iovisor/bpftrace" target="_blank" rel="noopener noreferrer">BPFTrace</a> 采用类似于 awk 语言快速编写 eBPF 程序；<a href="https://github.com/iovisor/kubectl-trace" target="_blank" rel="noopener noreferrer">Kubectl-Trace</a> 则提供了在 kubernetes 集群中使用 BPF 程序调试的方便操作；</li><li>CloudFlare 公司开源的 <a href="https://github.com/cloudflare/ebpf_exporter" target="_blank" rel="noopener noreferrer">eBPF Exporter</a> 和 <a href="https://github.com/cloudflare/bpftools" target="_blank" rel="noopener noreferrer">bpf-tools</a>：<a href="https://github.com/cloudflare/ebpf_exporter" target="_blank" rel="noopener noreferrer">eBPF Exporter</a> 将 eBPF 技术与监控 Prometheus 紧密结合起来；<a href="https://github.com/cloudflare/bpftools" target="_blank" rel="noopener noreferrer">bpf-tools</a> 可用于网络问题分析和排查；</li></ul><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><ul><li>动态追踪：bcc、bpftrace</li><li>观测监控：Pixie、Hubble、kubectl-trace</li><li>网络：Cilium、Katran</li><li>安全：Falco、Tracee</li></ul></div></div></div><h3 id="bcc、bpftrace-工具集" tabindex="-1"><a class="header-anchor" href="#bcc、bpftrace-工具集"><span>BCC、BPFTrace 工具集</span></a></h3><p>越来越多的基于 eBPF 的项目如雨后脆笋一样开始蓬勃发展，而且逐步在社区中异军突起，成为一道风景线。</p><p>比如 IO Visor 项目的 BCC 工具，为性能分析和观察提供了更加丰富的工具集：<a href="https://github.com/iovisor/bcc" target="_blank" rel="noopener noreferrer">图片来源</a></p><p>大名鼎鼎的性能分析大师 Brendan Gregg 等编写了诸多的 <strong>BCC 或 BPFTrace 的工具集</strong> 可以拿来直接使用，完全可以满足我们日常问题分析和排查。</p><p>BCC 在 CentOS 7 系统中可以通过 yum 快速安装</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># yum install bcc -y</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Resolving</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dependencies</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> transaction</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.8.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> updated</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Processing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dependency:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">x86-64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.8.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python-bcc-0.8.0-1.el7.x86_64</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.10.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> an</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Processing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dependency:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc-tools</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.10.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> package:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc-0.10.0-1.el7.x86_64</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Running</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> transaction</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> check</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc-tools.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.8.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> updated</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> bcc-tools.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.10.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> an</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python-bcc.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.8.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> updated</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">---</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Package</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python-bcc.x86_64</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:0.10.0-1.el7</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> will</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> an</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Finished</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Dependency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Resolution</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他系统的安装方式参见：<a href="https://github.com/iovisor/bcc/blob/master/INSTALL.md" target="_blank" rel="noopener noreferrer">INSTALL.md</a></p><p>BCC 中每一个工具都有一个对应的使用样例，比如 <a href="https://github.com/iovisor/bcc/blob/master/tools/execsnoop.py" target="_blank" rel="noopener noreferrer">execsnoop.py</a> 和 <a href="https://github.com/iovisor/bcc/blob/master/tools/execsnoop_example.txt" target="_blank" rel="noopener noreferrer">execsnoop_example.txt</a>，在使用样例中有详细的使用说明，而且 BCC 中的工具使用的帮助文档格式基本类似，上手非常方便</p><p>注意：BCC 的程序一般情况下都需要 root 用户来运行</p><h3 id="linux-性能分析-60-秒-bpf版本" tabindex="-1"><a class="header-anchor" href="#linux-性能分析-60-秒-bpf版本"><span>Linux 性能分析 60 秒 （BPF版本）</span></a></h3><p>英文原文 <a href="https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55" target="_blank" rel="noopener noreferrer">Linux Performance Analysis in 60,000 Milliseconds</a>，<a href="http://www.brendangregg.com/blog/2015-12-03/linux-perf-60s-video.html" target="_blank" rel="noopener noreferrer">视频地址</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uptime</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dmesg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tail</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vmstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mpstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ALL</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pidstat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iostat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xz</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">free</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DEV</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP,ETCP</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">top</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>60s 系列 BPF 版本如下：</p><p><img src="`+r+`" alt="ebpf_60s" loading="lazy"></p><p>排查之 BPF 版本</p><p>对于在系统中运行的 “闪电侠” 程序，运行周期非常短，但是可能会带来系统的抖动延时，我们采用 <code>top</code> 命令查看一般情况下难以发现，我们可以使用 BCC 提供的工具 <code>execsnoop </code> 来进行排查：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Trace file opens with process and filename: opensnoop</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#/usr/share/bcc/tools/execsnoop </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PCOMM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    PPID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   RET</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ARGS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            3334</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   21029</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            3339</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   21029</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conntrack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        3341</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   1112</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/sbin/conntrack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --stats</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">conntrack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        3342</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   1112</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/sbin/conntrack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --count</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            3344</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   21029</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/sleep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iptables-save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3347</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   9211</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sbin/iptables-save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filter</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iptables-save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3348</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   9211</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sbin/iptables-save</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他图片：</p><p>[title(Linux bcc/BPF 观测工具)]</p><p>​ <img src="`+d+'" alt="bcc-tools" style="zoom:50%;"></p><p>同时，IO Visor 的 <a href="https://github.com/iovisor/bpf-docs" target="_blank" rel="noopener noreferrer">bpf-docs</a> 包含了日常的文档，可以用于学习。</p><p>[title(Linux 事件和 BPF 版本支持)]</p><p>​ <img src="'+g+`" alt="img" style="zoom:80%;"></p><h3 id="slab-dentry-过大导致的网络抖动排查" tabindex="-1"><a class="header-anchor" href="#slab-dentry-过大导致的网络抖动排查"><span>slab dentry 过大导致的网络抖动排查</span></a></h3><p><strong>现象</strong></p><p>网络 ping 的延时间歇性有规律出现抖动</p><p><strong>问题排查</strong></p><p>采用 <code>execsnoop</code> 分析发现，某个运行命令<code>cat /proc/slabinfo</code>的运行时间间隔与抖动的频率完全吻合，顺着这个的线索定位，我们发现云厂商提供的 Java 版本的云监控会定期调用 <code>cat /proc/slabinfo</code> 来获取内核缓存的信息；</p><p>通过命令 <code>slabtop</code> 发现系统中的 <code>dentry</code> 项的内存占用非常大，系统内存 128G，<code>dentry</code> 占用 70G 以上，所以问题很快就定位到是系统在打开文件方面可能有相关问题；</p><p><strong>根因分析</strong></p><p>我们使用对于打开文件跟踪的 BCC 工具 <code>opensnoop</code> 很快就定位到是某个程序频繁创建和删除临时文件，最终定位为某个 PHP 程序设置的调用方式存在问题，导致每次请求会创建和删除临时文件；代码中将 http 调用中的 <code>contentType</code> 设置成了 <code>Http::CONTENT_TYPE_UPLOAD</code>，导致每次请求都会生成临时文件，修改成 <code>application/x-www-form-urlencoded</code> 问题解决。</p><p>问题的原理可参考 <a href="https://developer.aliyun.com/article/697773" target="_blank" rel="noopener noreferrer">记一次对网络抖动经典案例的分析</a> 和 <a href="https://yq.aliyun.com/articles/131870" target="_blank" rel="noopener noreferrer">systemtap脚本分析系统中dentry SLAB占用过高问题</a></p><h3 id="生成火焰图" tabindex="-1"><a class="header-anchor" href="#生成火焰图"><span>生成火焰图</span></a></h3><p>火焰图是帮助我们对系统耗时进行可视化的图表，能够对程序中那些代码经常被执行给出一个清晰的展现。Brendan Gregg 是火焰图的创建者，他在 <a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener noreferrer">GitHub</a> 上维护了一组脚本可以轻松生成需要的可视化格式数据。使用 BCC 中的工具 <code>profile</code> 可很方面地收集道 CPU 路径的数据，基于数据采用工具可以轻松地生成火焰图，查找到程序的性能瓶颈。</p><blockquote><p>使用 <code>profile</code> 搜集火焰图的程序没有任何限制和改造</p></blockquote><p><code>profile</code> 工具可以让我们轻松对于系统或者程序的 CPU 性能路径进行可视化分析：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/usr/share/bcc/tools/profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">usage:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-h] [-p PID | </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TID] [-U | -K] [-F FREQUENCY | </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COUNT] [-d]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               [-a] [-I] [-f] [--stack-storage-size STACK_STORAGE_SIZE]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               [-C CPU]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               [duration]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stack</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> traces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> at</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> timed</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> interval</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">positional</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arguments:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  duration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">              duration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trace,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">optional</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arguments:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -h,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> message</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> process</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TID,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> thread</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> with</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -U,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --user-stacks-only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stacks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> space</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (no </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">kernel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> space</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        stacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -K,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --kernel-stacks-only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stacks</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kernel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> space</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (no </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> space</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        stacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FREQUENCY,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --frequency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> FREQUENCY</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        sample</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frequency,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Hertz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COUNT,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --count</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> COUNT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        sample</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> period,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> events</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -d,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --delimited</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       insert</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> delimiter</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> between</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kernel/user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stacks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -a,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --annotations</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> _[k]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> annotations</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kernel</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frames</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -I,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --include-idle</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> idle</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stacks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -f,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --folded</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          output</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> folded</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> format,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> one</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> line</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> per</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (for </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">flame</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        graphs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  --stack-storage-size</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> STACK_STORAGE_SIZE</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unique</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stack</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> traces</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> that</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> can</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> be</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stored</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> displayed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (default </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16384</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cpu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CPU</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     cpu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> number</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">examples:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">             # profile stack traces at 49 Hertz until Ctrl-C</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 99</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # profile stack traces at 99 Hertz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # profile stack traces every 1 in a million events</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # profile at 49 Hertz for 5 seconds only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # output in folded format for flame graphs</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 185</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # only profile process with PID 185</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 185</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # only profile thread with TID 185</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -U</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # only show user space stacks (no kernel)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -K</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # only show kernel space stacks (no user)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>profile</code> 配合 <code>FlameGraph</code> 可以轻松帮我们绘制出 CPU 使用的火焰图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ profile -af 30 &gt; out.stacks01</span></span>
<span class="line"><span>$ git clone https://github.com/brendangregg/FlameGraph</span></span>
<span class="line"><span>$ cd FlameGraph</span></span>
<span class="line"><span>$ ./flamegraph.pl --color=java &lt; ../out.stacks01 &gt; out.svg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ <img src="`+c+`" alt="flame" style="zoom:67%;"></p><h3 id="排查网络调用来源" tabindex="-1"><a class="header-anchor" href="#排查网络调用来源"><span>排查网络调用来源</span></a></h3><p>在生产场景下，会有些特定场景需要抓取连接到外网特定地址的程序，这时候我们可以采用 BCC 工具集中的 <code>tcplife</code> 来定位。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/usr/share/bcc/tools/tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -h</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">usage:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tcplife</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-h] [-T] [-t] [-w] [-s] [-p PID] [-L LOCALPORT]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">               [-D REMOTEPORT]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Trace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lifespan</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sessions</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> summarize</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">optional</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> arguments:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -h,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> help</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> message</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exit</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -T,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> time</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> column</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (HH:MM:SS)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -t,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --timestamp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> timestamp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (seconds)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -w,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --wide</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            wide</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> column</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (fits </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">IPv6</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> addresses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -s,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --csv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             comma</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> separated</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> values</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pid</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     trace</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> this</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> only</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LOCALPORT,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --localport</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LOCALPORT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        comma-separated</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ports</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trace.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -D</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REMOTEPORT,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --remoteport</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REMOTEPORT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                        comma-separated</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> of</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ports</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> trace.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">examples:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           # trace all TCP connect()s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # include time column (HH:MM:SS)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -w</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # wider colums (fit IPv6)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -stT</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # csv output, with times &amp; timestamps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 181</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # only trace PID 181</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # only trace local port 80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80,81</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # only trace local ports 80 and 81</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    ./tcplife</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # only trace remote port 80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在机器上使用 <code>tcplife</code> 来获取的网络连接信息，我们可以看到包括了 PID、COMM、本地 IP 地址、本地端口、远程 IP 地址和远程端口，通过这些信息非常方便排查到连接到特定 IP 地址的程序，尤其是连接的过程非常短暂，通过 <code>netstat</code> 等其他工具不容易排查的场景。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /usr/share/bcc/tools/tcplife</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   COMM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> LADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                      LPORT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                  RPORT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  TX_KB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  RX_KB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1776</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  blackbox_export</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  169.254.20.10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">              35830</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 169.254.20.10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          53</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.36</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">27150</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> node-cache</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  169.254.20.10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">              53</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    169.254.20.10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          35830</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.36</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">12511</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> coredns</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">                  58492</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">              8080</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.32</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想知道更加详细的 TCP 状态情况，那么 <code>tcptracer</code> 可展示更加详细的 TCP 状态，其中 C 代表 Connect X 表示关闭， A 代表 Accept。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /usr/share/bcc/tools/tcptracer </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Tracing</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> TCP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> established</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connections.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Ctrl-C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> end.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">T</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    COMM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">             IP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            DADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            SPORT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  DPORT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  21066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ilogtail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  10.81.128.12</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     100.100.49.128</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   40906</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  21066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ilogtail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  10.81.128.12</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     100.100.49.128</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   40906</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">C</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  21066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ilogtail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  10.81.128.12</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     100.100.49.128</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   40908</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  80</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">X</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  21066</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ilogtail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  10.81.128.12</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     100.100.49.128</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   40908</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tcpstates</code> 还能够展示出来 TCP 状态机的流转情况：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># /usr/share/bcc/tools/tcpstates</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SKADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           C-PID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> C-COMM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     LADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           LPORT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> RADDR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">           RPORT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OLDSTATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">NEWSTATE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    MS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffff9fd7e8192000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22384</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       100.66.100.185</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     52.33.159.26</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    CLOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SYN_SENT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0.000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffff9fd7e8192000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     swapper/5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  100.66.100.185</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  63446</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 52.33.159.26</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    SYN_SENT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ESTABLISHED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.373</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffff9fd7e8192000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22384</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       100.66.100.185</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  63446</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 52.33.159.26</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ESTABLISHED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FIN_WAIT1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   176.042</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们也可以实时获取到 TCP 连接超时或者重连的网络连接；也可以通过抓取 UDP包相关的连接信息，用于定位诸如 DNS 请求超时或者 DNS 请求的发起进程。</p>`,118)]))}const b=i(o,[["render",F],["__file","01. 基本介绍.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/01.%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D.html","title":"ePBF","lang":"zh-CN","frontmatter":{"description":"ePBF 目录 [toc] 基本介绍 介绍 - 横向 BPF BPF（Berkeley Packet Filte，伯克利包过滤器），是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。 1992 年，Steven McCanne 和 Van Jacobson 写了一篇名为《BSD数据包过滤：一种新的用户级包捕获架构》的论文。在文中...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E7%8B%84%E5%8D%AB%E5%8D%8E%E5%8D%9A%E5%AE%A2/01.%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"ePBF"}],["meta",{"property":"og:description","content":"ePBF 目录 [toc] 基本介绍 介绍 - 横向 BPF BPF（Berkeley Packet Filte，伯克利包过滤器），是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。 1992 年，Steven McCanne 和 Van Jacobson 写了一篇名为《BSD数据包过滤：一种新的用户级包捕获架构》的论文。在文中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ePBF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":21.39,"words":6416},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/01. 基本介绍.md","excerpt":"\\n<h1>目录</h1>\\n<p>[toc]</p>\\n<h1>基本介绍</h1>\\n<h2>介绍 - 横向</h2>\\n<h3>BPF</h3>\\n<p>BPF（Berkeley Packet Filte，伯克利包过滤器），是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。</p>\\n<p><em>1992</em> 年，Steven McCanne 和 Van  Jacobson 写了一篇名为《BSD数据包过滤：一种新的用户级包捕获架构》的论文。在文中，作者描述了他们如何在 Unix  内核实现网络数据包过滤，这种新的技术比当时最先进的数据包过滤技术快 20 倍。BPF 在数据包过滤上引入了两大革新：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/01. 基本介绍.md","value":{"title":"01. 基本介绍","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/狄卫华博客/01. 基本介绍.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{b as comp,v as data};
