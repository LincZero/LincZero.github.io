import{_ as e,c as i,e as s,o as n}from"./app-BHdORQJ2.js";const l="/assets/1541c881598f554920355f0a3c5780fd-C1mJ8S4j.png",p="/assets/72568a29816fa9b505f15edac68adee2-YxicjiSn.png",h="/assets/cbba24cac4668625c4e32d8cf641cf9c-6Zg1ZZ-l.png",t="/assets/c81ffa0b7d11506ffad3c33001385444-C-G9CRtb.png",c="/assets/cfda154558181c4af27a34c1d4a97552-Nsv8cG_G.png",r="/assets/ae8252378169c8c14b8b9907983f7d8b-20230309235145646-CIOXvk_X.png",g="/assets/503d7d5d3f330d64fcade48b312f767d-BzbCcso2.png",d={};function k(o,a){return n(),i("div",null,a[0]||(a[0]=[s('<h1 id="页缓存、写文件的进程崩溃时是否丢失数据-未" tabindex="-1"><a class="header-anchor" href="#页缓存、写文件的进程崩溃时是否丢失数据-未"><span>页缓存、写文件的进程崩溃时是否丢失数据（未）</span></a></h1><p>参考资料：</p><ul><li><a href="https://time.geekbang.org/column/intro/337" target="_blank" rel="noopener noreferrer">Linux内核技术实战课</a></li><li><a href="https://lwn.net/Articles/690079/" target="_blank" rel="noopener noreferrer">Reconsidering swapping</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E5%B1%80%E9%83%A8%E6%80%A7" target="_blank" rel="noopener noreferrer">访问局部性</a></li><li>[DMA 与零拷贝技术](https://spongecaptain.cool/SimpleClearFileIO/2. DMA 与零拷贝技术.html)</li><li>[Linux 的 Page Cache](https://spongecaptain.cool/SimpleClearFileIO/1. page cache.html)</li></ul><h2 id="写文件的进程崩溃时是否丢失数据-否" tabindex="-1"><a class="header-anchor" href="#写文件的进程崩溃时是否丢失数据-否"><span>写文件的进程崩溃时是否丢失数据？否！</span></a></h2><p>大家好，我是小林。</p><p>前几天，有位读者问了我这么个问题：</p><blockquote><p>小林哥，请教个问题，之前腾讯音乐三面的问题，用java写文件时，当向磁盘写文件时，写一半的时候如果进程崩了，文件里面会有数据吗。如果用的是带缓冲的写文件，文件里面是否有数据？</p></blockquote><p>大概就是，进程写文件（使用缓冲 IO）过程中，写一半的时候，进程发生了崩溃，已写入的数据会丢失吗？</p><p>答案：是不会的。</p><p>原因：</p><p><img src="'+l+'" alt="img" loading="lazy"></p><p>因为进程在执行 write （使用缓冲 IO）系统调用的时候，实际上是将文件数据写到了内核的 page cache（哈？之前不是说缓冲用的标准库缓冲来减少与内核态的切换，为什么会写到内核里？），它是文件系统中用于缓存文件数据的缓冲，所以即使进程崩溃了，文件数据还是保留在内核的 page cache，我们读数据的时候，也是从内核的 page cache 读取，因此还是依然读的进程崩溃前写入的数据。</p><p>内核会找个合适的时机，将 page cache 中的数据持久化到磁盘。但是如果 page cache 里的文件数据，在持久化到磁盘化到磁盘之前，系统发生了崩溃，那这部分数据就会丢失了。</p><p>手动刷新：</p><p>当然， 我们也可以在程序里调用 fsync 函数，在写文文件的时候，立刻将文件数据持久化到磁盘，这样就可以解决系统崩溃导致的文件数据丢失的问题。</p><p>我在网上看到一篇介绍 page cache 很好的文章， 分享给大家一起学习。</p><blockquote><p>作者：spongecaptain</p><p>原文地址：[Linux 的 Page Cache](https://spongecaptain.cool/SimpleClearFileIO/1. page cache.html)</p></blockquote><h2 id="page-cache" tabindex="-1"><a class="header-anchor" href="#page-cache"><span>Page Cache</span></a></h2><h3 id="page-cache-是什么" tabindex="-1"><a class="header-anchor" href="#page-cache-是什么"><span>Page Cache 是什么？</span></a></h3><p>为了理解 Page Cache，我们不妨先看一下 Linux 的文件 I/O 系统，如下图所示：</p><p><img src="'+p+`" alt="img" loading="lazy"></p><p>上图中，红色部分为 Page Cache。可见 Page Cache 的本质是由 Linux 内核管理的内存区域。我们通过 mmap 以及 buffered I/O 将文件读取到内存空间实际上都是读取到 Page Cache 中。</p><h3 id="如何查看系统的-page-cache" tabindex="-1"><a class="header-anchor" href="#如何查看系统的-page-cache"><span>如何查看系统的 Page Cache？</span></a></h3><p>通过读取 <code>/proc/meminfo</code> 文件，能够实时获取系统内存情况：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc/meminfo</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Buffers:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            1224</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Cached:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">           111472</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SwapCached:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        36364</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Active:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          6224232</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Inactive:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         979432</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Active(anon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):    6173036 kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Inactive(anon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):   927932 kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Active(file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):      51196 kB</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Inactive(file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):    51500 kB</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Shmem:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">             10000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SReclaimable:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      43532</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kB</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的数据，你可以简单得出这样的公式（等式两边之和都是 112696 KB）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Buffers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SwapCached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Inactive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Shmem</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SwapCached</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>两边等式都是 Page Cache，即：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Page</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cache</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Buffers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Cached</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SwapCached</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过阅读下面的小节，就能够理解为什么 SwapCached 与 Buffers 也是 Page Cache 的一部分。</p><h3 id="page-与-page-cache" tabindex="-1"><a class="header-anchor" href="#page-与-page-cache"><span>page 与 Page Cache</span></a></h3><p>page 是内存管理分配的基本单位， Page Cache 由多个 page 构成。page 在操作系统中通常为 4KB 大小（32bits/64bits），而 Page Cache 的大小则为 4KB 的整数倍。</p><p><strong>另一方面，并不是所有 page 都被组织为 Page Cache</strong>。</p><p>Linux 系统上供用户可访问的内存分为两个类型，即：</p><ul><li>File-backed pages：文件备份页也就是 Page Cache 中的 page，对应于磁盘上的若干数据块；对于这些页最大的问题是脏页回盘；</li><li>Anonymous pages：匿名页不对应磁盘上的任何磁盘数据块，它们是进程的运行是内存空间（例如方法栈、局部变量表等属性）；</li></ul><p><strong>为什么 Linux 不把 Page Cache 称为 block cache，这不是更好吗？</strong></p><p>这是因为从磁盘中加载到内存的数据不仅仅放在 Page Cache 中，还放在 buffer cache 中。</p><p>例如通过 Direct I/O 技术的磁盘文件就不会进入 Page Cache 中。当然，这个问题也有 Linux 历史设计的原因，毕竟这只是一个称呼，含义随着 Linux 系统的演进也逐渐不同。</p><p>下面比较一下 File-backed pages 与 Anonymous pages 在 Swap 机制下的性能。</p><p>内存是一种珍惜资源，当内存不够用时，内存管理单元（Memory Mangament Unit）需要提供调度算法来回收相关内存空间。内存空间回收的方式通常就是 swap，即交换到持久化存储设备上。</p><p>File-backed pages（Page Cache）的内存回收代价较低。Page Cache 通常对应于一个文件上的若干顺序块，因此可以通过顺序 I/O 的方式落盘。另一方面，如果 Page Cache 上没有进行写操作（所谓的没有脏页），甚至不会将 Page Cache 回盘，因为数据的内容完全可以通过再次读取磁盘文件得到。</p><p>Page Cache 的主要难点在于脏页回盘，这个内容会在后面进行详细说明。</p><p>Anonymous pages 的内存回收代价较高。这是因为 Anonymous pages 通常随机地写入持久化交换设备。另一方面，无论是否有写操作，为了确保数据不丢失，Anonymous pages 在 swap 时必须持久化到磁盘。</p><h3 id="swap-与缺页中断" tabindex="-1"><a class="header-anchor" href="#swap-与缺页中断"><span>Swap 与缺页中断</span></a></h3><p>Swap 机制指的是当物理内存不够用，内存管理单元（Memory Mangament Unit，MMU）需要提供调度算法来回收相关内存空间，然后将清理出来的内存空间给当前内存申请方。</p><p>Swap 机制存在的本质原因是 Linux 系统提供了虚拟内存管理机制，每一个进程认为其独占内存空间，因此所有进程的内存空间之和远远大于物理内存。所有进程的内存空间之和超过物理内存的部分就需要交换到磁盘上。</p><p>操作系统以 page 为单位管理内存，当进程发现需要访问的数据不在内存时，操作系统可能会将数据以页的方式加载到内存中。上述过程被称为<strong>缺页中断</strong>，当操作系统发生缺页中断时，就会通过系统调用将 page 再次读到内存中。</p><p>但主内存的空间是有限的，当主内存中不包含可以使用的空间时，操作系统会从选择合适的物理内存页驱逐回磁盘，为新的内存页让出位置，<strong>选择待驱逐页的过程在操作系统中叫做页面替换（Page Replacement）</strong>，替换操作又会触发 swap 机制。</p><p>如果物理内存足够大，那么可能不需要 Swap 机制，但是 Swap 在这种情况下还是有一定优势：对于有发生内存泄漏几率的应用程序（进程），Swap 交换分区更是重要，这可以确保内存泄露不至于导致物理内存不够用，最终导致系统崩溃。但内存泄露会引起频繁的 swap，此时非常影响操作系统的性能。</p><p>Linux 通过一个 swappiness 参数来控制 Swap 机制：这个参数值可为 0-100，控制系统 swap 的优先级：</p><ul><li>高数值：较高频率的 swap，进程不活跃时主动将其转换出物理内存。</li><li>低数值：较低频率的 swap，这可以确保交互式不因为内存空间频繁地交换到磁盘而提高响应延迟。</li></ul><p><strong>最后，为什么 SwapCached 也是 Page Cache 的一部分？</strong></p><p>这是因为当匿名页（Inactive(anon) 以及 Active(anon)）先被交换（swap out）到磁盘上后，然后再加载回（swap in）内存中，由于读入到内存后原来的 Swap File 还在，所以 SwapCached 也可以认为是 File-backed page，即属于 Page Cache。这个过程如下图所示。</p><p><img src="`+h+`" alt="图片" loading="lazy"></p><h3 id="page-cache-与-buffer-cache" tabindex="-1"><a class="header-anchor" href="#page-cache-与-buffer-cache"><span>Page Cache 与 buffer cache</span></a></h3><p>执行 free 命令，注意到会有两列名为 buffers 和 cached，也有一行名为 “-/+ buffers/cache”。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">~ free -m</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">             total</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       used</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">       free</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     shared</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    buffers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     cached</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Mem:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        128956</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      96440</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      32515</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       5368</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      39900</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-/+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> buffers/cache:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      51172</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      77784</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Swap:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        16002</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      16001</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，cached 列表示当前的页缓存（Page Cache）占用量，buffers 列表示当前的块缓存（buffer cache）占用量。</p><p>用一句话来解释：<strong>Page Cache 用于缓存文件的页数据，buffer cache 用于缓存块设备（如磁盘）的块数据。</strong></p><ul><li>页是逻辑上的概念，因此 Page Cache 是与文件系统同级的；</li><li>块是物理上的概念，因此 buffer cache 是与块设备驱动程序同级的。</li></ul><p>Page Cache 与 buffer cache 的<strong>共同目的都是加速数据 I/O</strong>：</p><ul><li>写数据时首先写到缓存，将写入的页标记为 dirty，然后向外部存储 flush，也就是缓存写机制中的 write-back（另一种是 write-through，Linux 默认情况下不采用）；</li><li>读数据时首先读取缓存，如果未命中，再去外部存储读取，并且将读取来的数据也加入缓存。操作系统总是积极地将所有空闲内存都用作 Page Cache 和 buffer cache，当内存不够用时也会用 LRU 等算法淘汰缓存页。</li></ul><p>在 Linux 2.4 版本的内核之前，Page Cache 与 buffer cache 是完全分离的。但是，块设备大多是磁盘，磁盘上的数据又大多通过文件系统来组织，这种设计导致很多数据被缓存了两次，浪费内存。</p><p><strong>所以在 2.4 版本内核之后，两块缓存近似融合在了一起：如果一个文件的页加载到了 Page Cache，那么同时 buffer cache 只需要维护块指向页的指针就可以了</strong>。只有那些没有文件表示的块，或者绕过了文件系统直接操作（如dd命令）的块，才会真正放到 buffer cache 里。</p><p>因此，<strong>我们现在提起 Page Cache，基本上都同时指 Page Cache 和 buffer cache 两者，本文之后也不再区分，直接统称为 Page Cache</strong>。</p><p>下图近似地示出 32-bit Linux 系统中可能的一种 Page Cache 结构，其中 block size 大小为 1KB，page size 大小为 4KB。</p><p><img src="`+t+'" alt="图片" loading="lazy"></p><p>Page Cache 中的每个文件都是一棵基数树（radix tree，本质上是多叉搜索树），树的每个节点都是一个页。根据文件内的偏移量就可以快速定位到所在的页，如下图所示。关于基数树的原理可以参见英文维基，这里就不细说了。</p><p><img src="'+c+'" alt="图片" loading="lazy"></p><h3 id="page-cache-与预读" tabindex="-1"><a class="header-anchor" href="#page-cache-与预读"><span>Page Cache 与预读</span></a></h3><p>操作系统为基于 Page Cache 的读缓存机制提供<strong>预读机制</strong>（PAGE_READAHEAD），一个例子是：</p><ul><li>用户线程仅仅请求读取磁盘上文件 A 的 offset 为 0-3KB 范围内的数据，由于磁盘的基本读写单位为 block（4KB），于是操作系统至少会读 0-4KB 的内容，这恰好可以在一个 page 中装下。</li><li>但是操作系统出于局部性原理会选择将磁盘块 offset [4KB,8KB)、[8KB,12KB) 以及 [12KB,16KB) 都加载到内存，于是额外在内存中申请了 3 个 page；</li></ul><p>下图代表了操作系统的预读机制：</p><p><img src="'+r+'" alt="img" loading="lazy"></p><p>上图中，应用程序利用 read 系统调动读取 4KB 数据，实际上内核使用 readahead 机制完成了 16KB 数据的读取。</p><h2 id="page-cache-与文件持久化的一致性-可靠性" tabindex="-1"><a class="header-anchor" href="#page-cache-与文件持久化的一致性-可靠性"><span>Page Cache 与文件持久化的一致性&amp;可靠性</span></a></h2><p>现代 Linux 的 Page Cache 正如其名，是对磁盘上 page（页）的内存缓存，同时可以用于读/写操作。</p><p>任何系统引入缓存，就会引发一致性问题：内存中的数据与磁盘中的数据不一致，例如常见后端架构中的 Redis 缓存与 MySQL 数据库就存在一致性问题。</p><p>Linux 提供多种机制来保证数据一致性，但无论是单机上的内存与磁盘一致性，还是分布式组件中节点 1 与节点 2 、节点 3 的数据一致性问题，理解的关键是 trade-off：吞吐量与数据一致性保证是一对矛盾。</p><p>首先，需要我们理解一下文件的数据。<strong>文件 = 数据 + 元数据</strong>。元数据用来描述文件的各种属性，也必须存储在磁盘上。因此，我们说保证文件一致性其实包含了两个方面：数据一致+元数据一致。</p><blockquote><p>文件的元数据包括：文件大小、创建时间、访问时间、属主属组等信息。</p></blockquote><p>我们考虑如下一致性问题：如果发生写操作并且对应的数据在 Page Cache 中，那么写操作就会直接作用于 Page Cache 中，此时如果数据还没刷新到磁盘，那么内存中的数据就领先于磁盘，此时对应 page 就被称为 Dirty page。</p><p>当前 Linux 下以两种方式实现文件一致性：</p><ol><li><strong>Write Through（写穿）</strong>：向用户层提供特定接口，应用程序可主动调用接口来保证文件一致性；</li><li><strong>Write back（写回）</strong>：系统中存在定期任务（表现形式为内核线程），周期性地同步文件系统中文件脏数据块，这是默认的 Linux 一致性方案；</li></ol><p>上述两种方式最终都依赖于系统调用，主要分为如下三种系统调用：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">fsync(intfd)</td><td style="text-align:left;">fsync(fd)：将 fd 代表的文件的脏数据和脏元数据全部刷新至磁盘中。</td></tr><tr><td style="text-align:left;">fdatasync(int fd)</td><td style="text-align:left;">fdatasync(fd)：将 fd 代表的文件的脏数据刷新至磁盘，同时对必要的元数据刷新至磁盘中，这里所说的必要的概念是指：对接下来访问文件有关键作用的信息，如文件大小，而文件修改时间等不属于必要信息</td></tr><tr><td style="text-align:left;">sync()</td><td style="text-align:left;">sync()：则是对系统中所有的脏的文件数据元数据刷新至磁盘中</td></tr></tbody></table><p>上述三种系统调用可以分别由用户进程与内核进程发起。下面我们研究一下内核线程的相关特性。</p><ol><li>创建的针对回写任务的内核线程数由系统中持久存储设备决定，为每个存储设备创建单独的刷新线程；</li><li>关于多线程的架构问题，Linux 内核采取了 Lighthttp 的做法，即系统中存在一个管理线程和多个刷新线程（每个持久存储设备对应一个刷新线程）。管理线程监控设备上的脏页面情况，若设备一段时间内没有产生脏页面，就销毁设备上的刷新线程；若监测到设备上有脏页面需要回写且尚未为该设备创建刷新线程，那么创建刷新线程处理脏页面回写。而刷新线程的任务较为单调，只负责将设备中的脏页面回写至持久存储设备中。</li><li>刷新线程刷新设备上脏页面大致设计如下： <ul><li>每个设备保存脏文件链表，保存的是该设备上存储的脏文件的 inode 节点。所谓的回写文件脏页面即回写该 inode 链表上的某些文件的脏页面；</li><li>系统中存在多个回写时机，第一是应用程序主动调用回写接口（fsync，fdatasync 以及 sync 等），第二管理线程周期性地唤醒设备上的回写线程进行回写，第三是某些应用程序/内核任务发现内存不足时要回收部分缓存页面而事先进行脏页面回写，设计一个统一的框架来管理这些回写任务非常有必要。</li></ul></li></ol><p>Write Through 与 Write back 在持久化的可靠性上有所不同：</p><ul><li>Write Through 以牺牲系统 I/O 吞吐量作为代价，向上层应用确保一旦写入，数据就已经落盘，不会丢失；</li><li>Write back 在系统发生宕机的情况下无法确保数据已经落盘，因此存在数据丢失的问题。不过，在程序挂了，例如被 kill -9，Page Cache 中的数据操作系统还是会确保落盘；</li></ul><h2 id="page-cache-的优劣势" tabindex="-1"><a class="header-anchor" href="#page-cache-的优劣势"><span>Page Cache 的优劣势</span></a></h2><h3 id="page-cache-的优势" tabindex="-1"><a class="header-anchor" href="#page-cache-的优势"><span>Page Cache 的优势</span></a></h3><p><strong>1.加快数据访问</strong></p><p>如果数据能够在内存中进行缓存，那么下一次访问就不需要通过磁盘 I/O 了，直接命中内存缓存即可。</p><p>由于内存访问比磁盘访问快很多，因此加快数据访问是 Page Cache 的一大优势。</p><p><strong>2.减少 I/O 次数，提高系统磁盘 I/O 吞吐量</strong></p><p>得益于 Page Cache 的缓存以及预读能力，而程序又往往符合局部性原理，因此通过一次 I/O 将多个 page 装入 Page Cache 能够减少磁盘 I/O 次数， 进而提高系统磁盘 I/O 吞吐量。</p><h3 id="page-cache-的劣势" tabindex="-1"><a class="header-anchor" href="#page-cache-的劣势"><span>Page Cache 的劣势</span></a></h3><p>page cache 也有其劣势，最直接的缺点是需要占用额外物理内存空间，物理内存在比较紧俏的时候可能会导致频繁的 swap 操作，最终导致系统的磁盘 I/O 负载的上升。</p><p>Page Cache 的另一个缺陷是对应用层并没有提供很好的管理 API，几乎是透明管理。应用层即使想优化 Page Cache 的使用策略也很难进行。因此一些应用选择在用户空间实现自己的 page 管理，而不使用 page cache，例如 MySQL InnoDB 存储引擎以 16KB 的页进行管理。</p><p>Page Cache 最后一个缺陷是在某些应用场景下比 Direct I/O 多一次磁盘读 I/O 以及磁盘写 I/O。</p><p>Direct I/O 即直接 I/O。其名字中的”直接”二字用于区分使用 page cache 机制的缓存 I/O。</p><ul><li>缓存文件 I/O：用户空间要读写一个文件并<strong>不直接</strong>与磁盘交互，而是中间夹了一层缓存，即 page cache；</li><li>直接文件 I/O：用户空间读取的文件<strong>直接</strong>与磁盘交互，没有中间 page cache 层；</li></ul><p>“直接”在这里还有另一层语义：其他所有技术中，数据至少需要在内核空间存储一份，但是在 Direct I/O 技术中，数据直接存储在用户空间中，绕过了内核。</p><p>Direct I/O 模式如下图所示：</p><p><img src="'+g+'" alt="directIO" loading="lazy"></p><p>时用户空间直接通过 DMA 的方式与磁盘以及网卡进行数据拷贝。</p><p><strong>Direct I/O 的读写非常有特点</strong>：</p><ul><li>Write 操作：由于其不使用 page cache，所以其进行写文件，如果返回成功，数据就真的落盘了（不考虑磁盘自带的缓存）；</li><li>Read 操作：由于其不使用 page cache，每次读操作是真的从磁盘中读取，不会从文件系统的缓存中读取。</li></ul>',109)]))}const u=e(d,[["render",k],["__file","10. 页缓存，写文件的进程崩溃时是否丢失数据.html.vue"]]),B=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/10.%20%E9%A1%B5%E7%BC%93%E5%AD%98%EF%BC%8C%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%B4%A9%E6%BA%83%E6%97%B6%E6%98%AF%E5%90%A6%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html","title":"页缓存、写文件的进程崩溃时是否丢失数据（未）","lang":"zh-CN","frontmatter":{"description":"页缓存、写文件的进程崩溃时是否丢失数据（未） 参考资料： Linux内核技术实战课 Reconsidering swapping 访问局部性 [DMA 与零拷贝技术](https://spongecaptain.cool/SimpleClearFileIO/2. DMA 与零拷贝技术.html) [Linux 的 Page Cache](https:/...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/10.%20%E9%A1%B5%E7%BC%93%E5%AD%98%EF%BC%8C%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%B4%A9%E6%BA%83%E6%97%B6%E6%98%AF%E5%90%A6%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"页缓存、写文件的进程崩溃时是否丢失数据（未）"}],["meta",{"property":"og:description","content":"页缓存、写文件的进程崩溃时是否丢失数据（未） 参考资料： Linux内核技术实战课 Reconsidering swapping 访问局部性 [DMA 与零拷贝技术](https://spongecaptain.cool/SimpleClearFileIO/2. DMA 与零拷贝技术.html) [Linux 的 Page Cache](https:/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"页缓存、写文件的进程崩溃时是否丢失数据（未）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"页缓存、写文件的进程崩溃时是否丢失数据（未）","slug":"页缓存、写文件的进程崩溃时是否丢失数据-未","link":"#页缓存、写文件的进程崩溃时是否丢失数据-未","children":[{"level":2,"title":"写文件的进程崩溃时是否丢失数据？否！","slug":"写文件的进程崩溃时是否丢失数据-否","link":"#写文件的进程崩溃时是否丢失数据-否","children":[]},{"level":2,"title":"Page Cache","slug":"page-cache","link":"#page-cache","children":[{"level":3,"title":"Page Cache 是什么？","slug":"page-cache-是什么","link":"#page-cache-是什么","children":[]},{"level":3,"title":"如何查看系统的 Page Cache？","slug":"如何查看系统的-page-cache","link":"#如何查看系统的-page-cache","children":[]},{"level":3,"title":"page 与 Page Cache","slug":"page-与-page-cache","link":"#page-与-page-cache","children":[]},{"level":3,"title":"Swap 与缺页中断","slug":"swap-与缺页中断","link":"#swap-与缺页中断","children":[]},{"level":3,"title":"Page Cache 与 buffer cache","slug":"page-cache-与-buffer-cache","link":"#page-cache-与-buffer-cache","children":[]},{"level":3,"title":"Page Cache 与预读","slug":"page-cache-与预读","link":"#page-cache-与预读","children":[]}]},{"level":2,"title":"Page Cache 与文件持久化的一致性&可靠性","slug":"page-cache-与文件持久化的一致性-可靠性","link":"#page-cache-与文件持久化的一致性-可靠性","children":[]},{"level":2,"title":"Page Cache 的优劣势","slug":"page-cache-的优劣势","link":"#page-cache-的优劣势","children":[{"level":3,"title":"Page Cache 的优势","slug":"page-cache-的优势","link":"#page-cache-的优势","children":[]},{"level":3,"title":"Page Cache 的劣势","slug":"page-cache-的劣势","link":"#page-cache-的劣势","children":[]}]}]}],"git":{},"readingTime":{"minutes":16.17,"words":4851},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/10. 页缓存，写文件的进程崩溃时是否丢失数据.md","excerpt":"\\n<p>参考资料：</p>\\n<ul>\\n<li><a href=\\"https://time.geekbang.org/column/intro/337\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Linux内核技术实战课</a></li>\\n<li><a href=\\"https://lwn.net/Articles/690079/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Reconsidering swapping</a></li>\\n<li><a href=\\"https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E5%B1%80%E9%83%A8%E6%80%A7\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">访问局部性</a></li>\\n<li>[DMA 与零拷贝技术](https://spongecaptain.cool/SimpleClearFileIO/2. DMA 与零拷贝技术.html)</li>\\n<li>[Linux 的 Page Cache](https://spongecaptain.cool/SimpleClearFileIO/1. page cache.html)</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/10. 页缓存，写文件的进程崩溃时是否丢失数据.md","value":{"title":"10. 页缓存，写文件的进程崩溃时是否丢失数据","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/10. 页缓存，写文件的进程崩溃时是否丢失数据.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,B as data};
