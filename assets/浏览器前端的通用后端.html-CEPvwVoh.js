import{_ as t,e as o,g as a,f as e,j as i,h as s,i as n,r as p,o as u}from"./app-EuS-Ookm.js";const g={};function h(d,l){const r=p("RouteLink");return u(),o("div",null,[l[7]||(l[7]=a('<h1 id="浏览器前端的通用后端" tabindex="-1"><a class="header-anchor" href="#浏览器前端的通用后端"><span>浏览器前端的通用后端</span></a></h1><h2 id="idea-引言、调研" tabindex="-1"><a class="header-anchor" href="#idea-引言、调研"><span>(idea) 引言、调研</span></a></h2><h3 id="前端-后端" tabindex="-1"><a class="header-anchor" href="#前端-后端"><span>前端 &amp; 后端</span></a></h3><p>首先，这里复习一下这里局部中 “前后端” 的概念：</p><p>前端和后端，可能指：</p><ul><li>语言的前后端（js/ts or java/c++），不过一般不这样分</li><li>可能指业务上的前后端（负责UI/UX or 数据库/复杂逻辑/隐藏接口）</li><li>也可能有其他区分（性能相关、源码保密相关）</li><li>按机器部署和运行环境分</li></ul><p>他们可能是耦合的也可以是分离的。例如Qt和纯前端。又分按模块区分 or 按UI/功能区分</p><h3 id="浏览器前端-通用型后端" tabindex="-1"><a class="header-anchor" href="#浏览器前端-通用型后端"><span>浏览器前端 &amp; 通用型后端</span></a></h3><p>以浏览器网页为例，通常只在浏览器跑的纯前端难以成为一个独立的软件，都需要有后端。因为可能会缺失：(可能有漏)</p><ul><li>通用存储（不存在浏览器上，因为多个设备可能需要同一个存储）</li><li>特殊请求（有的API需要有独立IP/网络代理/跨域进行访问，而Browser端可能没有这些环境导致无法访问。又或者访问后端所在电脑的一些信息和调取API）</li><li>保密访问（包括源码保密、一些服务秘钥的保密。多人共用时互相隔离避免你访问别人的东西）</li></ul><p>那么我在想，除了最后一点外，其他的是否能构建一个 “通用型后端” 进行解决？很多网页纯前端只需要一个通用的而非专用后端。该后端的特点：</p><ul><li>这可能是一个第三方服务，也可以是自行部署，或作为一个独立软件直接下载使用</li><li>尽可能通用，许多前端都可以直接使用而无需修改该后端代码</li></ul><p><em>那么是否有这种 “通用后端” 软件呢？</em></p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>然后调研结果见下一章，这里提前总结一下</p><p>确实有类似的东西，不少。但是比较缺少一些开箱即用、可部署又可安装的情况。而且多数是ts写的</p><p>感觉如果想做类似的产品的话，还是有空间的</p><h2 id="调研-kimi" tabindex="-1"><a class="header-anchor" href="#调研-kimi"><span>调研 - kimi</span></a></h2><p>确实存在一些可以作为“通用型后端”的软件或服务，它们能够为纯前端应用提供通用的后端功能，以下是一些常见的类型和具体实例：</p><h3 id="第三方后端服务" tabindex="-1"><a class="header-anchor" href="#第三方后端服务"><span>第三方后端服务</span></a></h3><ul><li><strong>Back4app</strong>：这是一家开源后端即服务（BaaS）提供商。它提供实时数据模型以存储足够的信息，并且提供GraphQL和REST API以连接各种操作。用户可以在该平台上开设账户，无需提供信用卡详情，即可开始使用其免费服务。它适用于各种规模的企业，允许用户随时扩展或缩减实例，还具有多云设置、详细的文档、可预测的定价和高效的性能等优势。</li><li><strong>Pocketbase</strong>：以轻量级自托管方案提供实时数据库、认证系统与文件存储功能。它内置认证模块，支持实时数据库和无服务器架构，可作为通用后端为多种前端应用提供支持。</li></ul><h3 id="自行部署的通用后端" tabindex="-1"><a class="header-anchor" href="#自行部署的通用后端"><span>自行部署的通用后端</span></a></h3><ul><li><strong>likeadmin通用管理后台</strong>：遵循MIT开源许可协议，是一个永久免费开源的通用前后端分离管理后台系统。它已经搭建好前后端分离的底层，包含程序安装、登录、登出、工作台、菜单权限控制、角色、管理员、部门管理、岗位管理、素材管理、网站设置、图库管理等基础功能，无需重复造轮子。后端使用Java8开发，采用Spring Boot2.7.5框架，前端使用typescript、vue3、vite开发，后台界面使用element-plus UI框架。它定位为通用的软件系统管理后台，方便开发者快速开发软件系统。</li><li><strong>APIJSON</strong>：是一种专为API而生的JSON网络传输协议以及基于这套协议实现的ORM库。它为各种增删改查提供了完全自动化的万能通用接口，零代码实时满足千变万化的各种新增和变更需求，可用于构建通用后端接口服务。</li></ul><h3 id="独立软件形式的通用后端" tabindex="-1"><a class="header-anchor" href="#独立软件形式的通用后端"><span>独立软件形式的通用后端</span></a></h3><p>目前没有特别常见的以独立软件形式直接下载使用的通用后端软件，但上述的 Back4app 和 Pocketbase 等第三方服务，也可以通过自托管的方式，类似于独立软件的形式进行部署和使用。</p><h2 id="调研-copilot" tabindex="-1"><a class="header-anchor" href="#调研-copilot"><span>调研 - copilot</span></a></h2><p>你提到的“通用后端”是一个非常有趣的概念。实际上，已经有一些软件和服务可以作为“通用后端”使用，满足你提到的一些需求。以下是一些常见的解决方案：</p><ul><li><strong>Firebase</strong><br> Firebase 是 Google 提供的一个后端即服务（BaaS），它提供了许多功能，如实时数据库、身份验证、文件存储、托管等。许多前端应用程序可以使用 Firebase 而无需自行编写后端代码。</li><li><strong>AWS Amplify</strong><br> AWS Amplify 是 Amazon Web Services 提供的一个开发平台，它为前端和移动开发人员提供了许多后端服务，如身份验证、API（GraphQL 和 REST）、存储等。Amplify 允许开发人员快速构建和连接后端服务。</li><li><strong>Supabase</strong><br> Supabase 是一个开源的 Firebase 替代品，提供了类似的功能，如实时数据库、身份验证、存储等。它使用 PostgreSQL 作为数据库，并且可以自行部署或使用托管服务。</li><li><strong>Backendless</strong><br> Backendless 是另一个 BaaS 平台，提供了许多后端功能，如数据存储、用户管理、推送通知、文件存储等。它也支持自定义业务逻辑和 API。</li><li><strong>Strapi</strong><br> Strapi 是一个开源的无头 CMS（Content Management System），它允许开发人员创建自定义 API，并提供了强大的内容管理功能。Strapi 可以自行部署，并且易于扩展和定制。</li></ul><p>这些平台和服务都提供了许多通用的后端功能，前端开发人员可以使用它们来解决通用存储、特殊请求和保密访问等问题，而无需自行编写复杂的后端代码。</p><p>至于你提到的“通用后端”软件，实际上这些 BaaS 平台和服务已经在很大程度上实现了这一目标。它们提供了丰富的后端功能，并且可以被许多不同的前端应用程序直接使用。这些平台通常也支持自行部署，满足不同项目的需求。</p><p>如果你有特定的需求或场景，可以进一步探讨是否有更合适的解决方案或定制化的方案。</p><h2 id="调研-gemini" tabindex="-1"><a class="header-anchor" href="#调研-gemini"><span>调研 - Gemini</span></a></h2><p>您提出的“通用后端”概念，确实触及了前端开发中一个非常实际的需求。以下是对您的调研需求的一些分析和相关信息：</p><p><strong>通用后端的需求分析：</strong></p><p>您提到的前端应用面临的后端需求，确实是许多纯前端应用无法独立运行的关键原因：</p><ul><li>通用存储 <ul><li>前端应用在浏览器中运行，数据存储受限于浏览器的本地存储，如LocalStorage、SessionStorage等，这些存储方式存在容量限制、跨设备同步困难等问题。</li><li>通用后端需要提供一个持久化、可跨设备访问的存储方案，例如数据库（如MySQL、PostgreSQL、MongoDB等）或云存储服务。</li></ul></li><li>特殊请求 <ul><li>前端应用受限于浏览器的安全策略，无法直接发起某些特殊请求，例如访问需要特定IP地址的API、访问本地文件系统等。</li><li>通用后端可以作为中间层，代理这些特殊请求，并向前端应用返回处理结果。</li></ul></li><li>保密访问 <ul><li>前端应用的源代码暴露在浏览器中，敏感信息（如API密钥）容易泄露。</li><li>通用后端可以将敏感逻辑和数据处理放在服务器端，避免敏感信息暴露。</li></ul></li></ul><p><strong>“通用后端”的实现方案：</strong></p><p>实现“通用后端”有多种方案，以下是一些常见的技术和工具：</p><ul><li><strong>后端即服务（Backend as a Service，BaaS）：</strong><ul><li>BaaS平台（如Firebase、Supabase等）提供通用的后端功能，包括数据库、身份验证、云存储、API等，前端应用可以通过API直接调用这些功能。</li><li>BaaS平台的优点是简化了后端开发和运维，降低了开发成本。</li></ul></li><li><strong>Node.js和Express.js：</strong><ul><li>Node.js是一个JavaScript运行时环境，可以用于构建服务器端应用。</li><li>Express.js是一个流行的Node.js Web应用框架，可以快速构建RESTful API。</li><li>开发者可以使用Node.js和Express.js搭建自定义的通用后端，满足特定的需求。</li></ul></li><li><strong>云函数（Cloud Functions）：</strong><ul><li>云函数（如AWS Lambda、Google Cloud Functions、Azure Functions等）是一种无服务器计算服务，可以按需运行后端代码。</li><li>开发者可以使用云函数编写简单的后端逻辑，例如API代理、数据处理等。</li></ul></li><li><strong>API网关：</strong><ul><li>API网关可以统一管理和代理后端API，提供身份验证、授权、流量控制等功能。</li><li>API网关可以作为通用后端的入口，简化前端应用的API调用。</li></ul></li></ul><p><strong>通用后端软件的现状：</strong></p><ul><li>目前，没有一个完全通用的、可以满足所有前端应用需求的“通用后端”软件。</li><li>BaaS平台是最接近“通用后端”概念的解决方案，但它们通常是云服务，需要付费使用。</li><li>开源的后端框架（如Node.js和Express.js）提供了构建通用后端的灵活性，但需要开发者自行搭建和维护。</li><li>在云服务中，例如阿里云，腾讯云，亚马逊云提供的云服务，可以搭建满足大多数需求的“通用后端”。</li></ul><p><strong>总结：</strong></p><ul><li>“通用后端”是一个很有价值的概念，可以解决前端应用面临的许多后端需求。</li><li>BaaS平台和开源后端框架是实现“通用后端”的两种主要方案。</li><li>选择哪种方案取决于具体的应用场景、开发成本和运维需求。</li></ul><p>希望这些信息能够帮助您更好地理解“通用后端”的概念和实现方案。</p><h2 id="调研-deepseek" tabindex="-1"><a class="header-anchor" href="#调研-deepseek"><span>调研 - Deepseek</span></a></h2><p>基于你的需求，现有的“通用型后端”解决方案可以分为两类：<strong>第三方服务（BaaS）</strong> 和 <strong>可自行部署的开源框架</strong>。以下是具体的分析和推荐方案：</p><h3 id="一、第三方服务-baas-backend-as-a-service" tabindex="-1"><a class="header-anchor" href="#一、第三方服务-baas-backend-as-a-service"><span>一、第三方服务（BaaS：Backend as a Service）</span></a></h3><p>这类服务提供标准化的后端功能（如用户管理、数据库、存储、API 代理等），开发者无需自行开发后端，只需通过前端调用接口即可实现核心功能。</p><p>特点：</p><ul><li>开箱即用：无需部署和维护服务器。</li><li>按需扩展：适合中小型项目或快速验证需求。</li><li>多设备支持：数据存储和用户状态天然支持多设备同步。</li></ul><p>推荐方案：</p><ul><li><strong>Firebase</strong><ul><li>提供实时数据库、用户认证、云存储、云函数等功能。</li><li>支持前端直接调用 API，无需后端代码。</li><li>适合需要实时数据同步的场景（如聊天应用、协作工具）。</li><li>缺点：依赖谷歌生态，国内访问可能受限。</li></ul></li><li><strong>Supabase</strong><ul><li>开源替代 Firebase 的方案，提供 PostgreSQL 数据库、身份验证、存储等功能。</li><li>支持自托管，适合需要数据控制权的场景。</li></ul></li><li><strong>AppWrite</strong><ul><li>开源 BaaS 平台，提供用户管理、数据库、存储、云函数等模块。</li><li>支持 Docker 部署，可完全私有化。</li></ul></li></ul><h3 id="二、可自行部署的开源框架" tabindex="-1"><a class="header-anchor" href="#二、可自行部署的开源框架"><span>二、可自行部署的开源框架</span></a></h3><p>这类方案需要开发者自行部署后端服务，但提供通用化的模块（如用户管理、API 路由、存储接口），可适配多种前端应用。</p><p>特点：</p><ul><li>灵活可控：可根据需求扩展或裁剪功能。</li><li>数据隔离：通过权限系统实现多用户隔离。</li><li>跨域支持：内置代理功能解决浏览器跨域问题。</li></ul><p>推荐方案：</p><ul><li><strong>RuoYi（若依）</strong><ul><li>基于 Spring Boot 的后台管理系统，提供用户权限、数据管理、API 接口等模块。</li><li>支持多数据源和分布式事务，适合企业级应用。</li></ul></li><li><strong>NocoDB</strong><ul><li>将数据库转换为 RESTful API，支持多种数据库（MySQL、PostgreSQL 等）。</li><li>前端可直接通过 API 操作数据，无需编写后端代码。</li></ul></li><li><strong>Strapi</strong><ul><li>无头 CMS（内容管理系统），提供可定制的 API 接口和权限管理。</li><li>支持插件扩展，适合内容型应用。</li></ul></li><li><strong>AntD Admin 后端方案</strong><ul><li>结合 Ant Design Pro 的中台架构，通过动态路由和权限控制提供通用接口。</li><li>支持 Mock 数据和国际化，适合中后台系统。</li></ul></li></ul><h3 id="三、通用后端需要解决的核心问题" tabindex="-1"><a class="header-anchor" href="#三、通用后端需要解决的核心问题"><span>三、通用后端需要解决的核心问题</span></a></h3><ol><li>统一存储 <ul><li>方案：使用云存储服务（如 MinIO 自建私有云）或数据库中间件（如 NocoDB），提供标准化接口。</li></ul></li><li>API 代理与跨域 <ul><li>方案：通过 Nginx 反向代理或后端框架（如 Spring Cloud Gateway）统一处理跨域请求和路由转发。</li></ul></li><li>权限与隔离 <ul><li>方案：基于角色的访问控制（RBAC）或多租户架构（如 Keycloak 身份认证系统）。</li></ul></li></ol><h3 id="四、是否已有成熟的-通用后端" tabindex="-1"><a class="header-anchor" href="#四、是否已有成熟的-通用后端"><span>四、是否已有成熟的“通用后端”？</span></a></h3><p>目前没有完全通用的后端软件，但通过组合现有工具可实现类似效果：</p><ul><li>前端：使用 Vue/React 等框架开发，对接标准化 API。</li><li>后端：采用 BaaS 服务（如 Supabase）或开源框架（如 Strapi + MinIO），提供用户管理、存储和 API 代理。</li><li>部署：通过 Docker 或 Kubernetes 实现一键部署。</li></ul><h3 id="五、建议" tabindex="-1"><a class="header-anchor" href="#五、建议"><span>五、建议</span></a></h3><ul><li>快速验证需求：优先选择 BaaS（如 Firebase 或 Supabase）。</li><li>企业级私有化：采用 RuoYi 或 Strapi 等开源框架自行部署。</li><li>特殊场景：结合 Nginx 代理和云存储服务定制化开发。</li></ul><p>可进一步参考：<a href="https://gitee.com/y_project/RuoYi" target="_blank" rel="noopener noreferrer">若依系统</a>、<a href="https://supabase.io/docs" target="_blank" rel="noopener noreferrer">Supabase 文档</a>。</p><h2 id="调研-一些概念" tabindex="-1"><a class="header-anchor" href="#调研-一些概念"><span>调研 - 一些概念</span></a></h2>',67)),e("p",null,[l[1]||(l[1]=e("a",{class:"route-link nolebase-route-link-invalid",href:"#",target:"_target"},"CMS",-1)),l[2]||(l[2]=i()),s(r,{to:"/MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.html"},{default:n(()=>l[0]||(l[0]=[i("Handless")])),_:1}),l[3]||(l[3]=i()),l[4]||(l[4]=e("a",{class:"route-link nolebase-route-link-invalid",href:"#",target:"_target"},"../../03. 管理层/01. 多类管理/REST API",-1)),l[5]||(l[5]=i()),l[6]||(l[6]=e("a",{class:"route-link nolebase-route-link-invalid",href:"#",target:"_target"},"BaaS",-1))]),l[8]||(l[8]=a('<p>:::quote BaaS<br> BaaS平台（如Firebase、Supabase等）提供通用的后端功能，包括数据库、身份验证、云存储、API等，前端应用可以通过API直接调用这些功能。</p><p>BaaS平台的优点是简化了后端开发和运维，降低了开发成本。</p><p>话说这个术语看起来有点像 “<strong>SaaS</strong> (软件即服务, Software as a service)”<br> :::</p><p>:::quote 内容管理系统（Content Management System，CMS）</p><p>内容管理系统（Content Management System，CMS），是一种位于<a href="https://baike.baidu.com/item/WEB/150564?fromModule=lemma_inlink" target="_blank" rel="noopener noreferrer">WEB</a>前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122?fromModule=lemma_inlink" target="_blank" rel="noopener noreferrer">软件系统</a>。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。这里指的“内容”可能包括文件、表格、图片、数据库中的数据甚至视频等一切你想要发布到<a href="https://baike.baidu.com/item/Internet/272794?fromModule=lemma_inlink" target="_blank" rel="noopener noreferrer">Internet</a>、<a href="https://baike.baidu.com/item/Intranet/3247037?fromModule=lemma_inlink" target="_blank" rel="noopener noreferrer">Intranet</a>以及<a href="https://baike.baidu.com/item/Extranet/10579301?fromModule=lemma_inlink" target="_blank" rel="noopener noreferrer">Extranet</a>网站的信息。<br> :::</p><h2 id="调研-比较总结" tabindex="-1"><a class="header-anchor" href="#调研-比较总结"><span>调研 - 比较总结</span></a></h2><p>然后再来对比</p><h3 id="粗筛" tabindex="-1"><a class="header-anchor" href="#粗筛"><span>粗筛</span></a></h3><ul><li>Firebase <ul><li>tag: <em>BaaS</em></li><li>官网: https://firebase.google.com/?hl=zh-cn</li><li>Firebase 是 Google 提供的一个后端即服务（BaaS），它提供了许多功能，如实时数据库、身份验证、文件存储、托管等。许多前端应用程序可以使用 Firebase 而无需自行编写后端代码</li><li>提供实时数据库、用户认证、云存储、云函数等功能</li><li>支持前端直接调用 API，无需后端代码</li><li>适合需要实时数据同步的场景（如聊天应用、协作工具）</li><li>缺点：依赖谷歌生态，国内访问可能受限</li></ul></li><li><a href="https://github.com/supabase/supabase" target="_blank" rel="noopener noreferrer">Supabase</a><ul><li>tag: <em>开源、BaaS</em></li><li>Typescript, 79.2k, yesterday</li><li>官网: https://supabase.com/</li><li>Supabase 是一个开源的 Firebase 替代品，提供了类似的功能，如实时数据库、身份验证、存储等。它使用 PostgreSQL 作为数据库，并且可以自行部署或使用托管服务</li><li>开源替代 Firebase 的方案，提供 PostgreSQL 数据库、身份验证、存储等功能</li><li>支持自托管，适合需要数据控制权的场景</li></ul></li><li><a href="https://github.com/appwrite/appwrite" target="_blank" rel="noopener noreferrer">AppWrite</a><ul><li>tag: <em>开源、BaaS、可自行部署</em></li><li>TypeScript, 47.6k, 3 weeks ago</li><li>官网: https://appwrite.io/ <a href="https://github.com/appwrite/appwrite/blob/main/README-CN.md" target="_blank" rel="noopener noreferrer">github - README-CN</a></li><li>开源 BaaS 平台，提供用户管理、数据库、存储、云函数等模块</li><li>支持 Docker 部署，可完全私有化</li></ul></li><li><a href="https://github.com/pocketbase/pocketbase" target="_blank" rel="noopener noreferrer">pocketbase</a><ul><li>tag: <em>开源、REST API</em></li><li>Go, 44.5k, 1 hour ago</li><li>官网: https://pocketbase.io/</li><li>官方介绍: 是一个开源的Go后端，包括：嵌入式数据库（SQLite）与实时订阅、内置文件和用户管理、方便的管理仪表板UI、简单的rest API</li></ul></li><li><a href="https://github.com/yangzongzhuan/RuoYi" target="_blank" rel="noopener noreferrer">RuoYi（若依）</a><ul><li>tag: <em>开源、可自行部署</em></li><li>Java/Js, 6.8k, yesterday</li><li>官网: https://ruoyi.vip/</li><li><a href="https://github.com/supabase/supabase/blob/master/i18n/README.zh-cn.md" target="_blank" rel="noopener noreferrer">github - README-zh</a></li><li>基于 Spring Boot 的后台管理系统，提供用户权限、数据管理、API 接口等模块</li><li>支持多数据源和分布式事务，适合企业级应用</li></ul></li><li><a href="https://github.com/nocodb/nocodb" target="_blank" rel="noopener noreferrer">NocoDB</a><ul><li>tag: <em>开源、可自行部署、REST API</em></li><li>TypeScript, 53k, yesterday</li><li>官网: https://nocodb.com/</li><li>将数据库转换为 RESTful API，支持多种数据库（MySQL、PostgreSQL 等）</li><li>前端可直接通过 API 操作数据，无需编写后端代码</li></ul></li><li><a href="https://github.com/strapi/strapi" target="_blank" rel="noopener noreferrer">Strapi</a><ul><li>tag: <em>开源、可自行部署、无头后端</em></li><li>TypeScript, 65.6k, yesterday</li><li>官网: https://strapi.io/</li><li>功能：无头 CMS（内容管理系统），提供可定制的 API 接口和权限管理。支持<strong>插件扩展</strong>，适合内容型应用</li><li>Strapi 是一个开源的无头 CMS（Content Management System），它允许开发人员创建自定义 API，并提供了强大的内容管理功能。Strapi 可以自行部署，并且易于扩展和定制。</li></ul></li><li><a href="https://github.com/zuiidea/antd-admin" target="_blank" rel="noopener noreferrer">AntD Admin</a><ul><li>tag: <em>开源、可自行部署</em></li><li>JavaScript, 9.7k, 11 months ago</li><li>结合 Ant Design Pro 的中台架构，通过动态路由和权限控制提供通用接口</li><li>支持 Mock 数据和国际化，适合中后台系统</li></ul></li><li><a href="https://github.com/aws-amplify/amplify-js" target="_blank" rel="noopener noreferrer">AWS Amplify</a><ul><li>tag：<em>开源、REST API</em></li><li>TypeScript, 9.5k, yesterday</li><li>AWS Amplify 是 Amazon Web Services 提供的一个开发平台，它为前端和移动开发人员提供了许多后端服务，如身份验证、API（GraphQL 和 REST）、存储等。Amplify 允许开发人员快速构建和连接后端服务。</li></ul></li><li><a href="https://github.com/expressjs/express" target="_blank" rel="noopener noreferrer">Express.js</a><ul><li>tag: <em>开源</em></li><li>JavaScript, 66.5k, 4 days ago</li><li>官网: https://expressjs.com/</li><li>Node.js是一个JavaScript运行时环境，可以用于构建服务器端应用。</li><li>Express.js是一个流行的Node.js Web应用框架，可以快速构建RESTful API。</li><li>开发者可以使用Node.js和Express.js搭建自定义的通用后端，满足特定的需求 (要自己加工来写，不合适)</li></ul></li><li>云函数（Cloud Functions） <ul><li>云函数（如AWS Lambda、Google Cloud Functions、Azure Functions等）是一种无服务器计算服务，可以按需运行后端代码。</li><li>开发者可以使用云函数编写简单的后端逻辑，例如API代理、数据处理等。</li></ul></li><li><a href="https://github.com/backendless" target="_blank" rel="noopener noreferrer">Backendless</a><ul><li>tag: <em>BaaS</em></li><li>Java, 57, 2 years ago</li><li>Backendless 是另一个 BaaS 平台，提供了许多后端功能，如数据存储、用户管理、推送通知、文件存储等。它也支持自定义业务逻辑和 API</li></ul></li><li>API网关</li></ul><h3 id="二筛" tabindex="-1"><a class="header-anchor" href="#二筛"><span>二筛</span></a></h3><p>话说这挺多 TypeScript 写的。这里按偏好和star数排序一下：</p><ul><li><a href="https://github.com/supabase/supabase" target="_blank" rel="noopener noreferrer">Supabase</a><ul><li>tag: <em>开源、BaaS、有在线版</em></li><li>Typescript, 79.2k, yesterday</li><li>官网: https://supabase.com/</li><li>官方介绍：数据库托管、身份验证和授权、自动生成API、函数、文件存储、AI+向量工具包、仪表盘</li></ul></li><li><a href="https://github.com/strapi/strapi" target="_blank" rel="noopener noreferrer">Strapi</a><ul><li>tag: <em>开源、可自行部署、无头后端</em></li><li>TypeScript, 65.6k, yesterday</li><li>官网: https://strapi.io/</li><li>功能：无头 CMS（内容管理系统），提供可定制的 API 接口和权限管理。支持<strong>插件扩展</strong>，适合内容型应用</li><li>官方介绍：Strapi是领先的开源无头CMS。它是100%的JavaScript/TypeScript，完全可定制，开发者优先。</li></ul></li><li><a href="https://github.com/nocodb/nocodb" target="_blank" rel="noopener noreferrer">NocoDB</a><ul><li>tag: <em>开源、可自行部署、REST API</em></li><li>TypeScript, 53k, yesterday</li><li>官网: https://nocodb.com/</li><li>功能：将数据库转换为 RESTful API，支持多种数据库（MySQL、PostgreSQL 等）</li></ul></li><li><a href="https://github.com/appwrite/appwrite" target="_blank" rel="noopener noreferrer">AppWrite</a><ul><li>tag: <em>开源、BaaS、可自行部署</em></li><li>TypeScript, 47.6k, 3 weeks ago</li><li>官网: https://appwrite.io/ <a href="https://github.com/appwrite/appwrite/blob/main/README-CN.md" target="_blank" rel="noopener noreferrer">github - README-CN</a></li><li>功能：提供用户管理、数据库、存储、云函数等模块</li><li>官方介绍：在几分钟内构建整个后端，并使用Appwrite的开源平台轻松扩展。使用您选择的框架和语言向您的项目添加身份验证、数据库、函数、存储和消息传递。</li></ul></li><li><a href="https://github.com/yangzongzhuan/RuoYi" target="_blank" rel="noopener noreferrer">RuoYi（若依）</a><ul><li>tag: <em>开源、可自行部署</em></li><li>Java/Js (Spring Boot), 6.8k, yesterday</li><li>官网: https://ruoyi.vip/ <a href="https://github.com/supabase/supabase/blob/master/i18n/README.zh-cn.md" target="_blank" rel="noopener noreferrer">github - README-zh</a></li><li>功能：后台管理系统，提供用户权限、数据管理、API 接口等模块。支持多数据源和分布式事务，适合企业级应用</li></ul></li></ul><p>Star-History</p><p><img src="https://api.star-history.com/svg?repos=supabase/supabase,appwrite/appwrite,yangzongzhuan/RuoYi,nocodb/nocodb,strapi/strapi&amp;type=Date" alt="Star History Chart" loading="lazy"></p><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><p>是否可能有一个更好的描述/术语来代替我所说的“通用后端”？</p><p>根据你的需求，以下几个术语可以更精准地替代“通用后端”，且符合行业常用表述：</p><ul><li><strong>Backend as a Service (BaaS)</strong><ul><li>适用场景 <ul><li>强调第三方服务提供标准化的后端功能（如数据库、存储、认证）。</li><li>无需自行部署和维护，前端直接调用 API。</li></ul></li><li>优势 <ul><li>行业标准术语，开发者广泛认可（如 Firebase、Supabase）。</li><li>隐含“通用性”，因为 BaaS 的设计目标就是服务多种前端。</li></ul></li></ul></li><li><strong>无头后端（Headless Backend）</strong><ul><li>适用场景 <ul><li>后端仅通过 API 提供服务，不包含任何前端逻辑（如 Strapi、AppWrite）。</li><li>强调前后端完全解耦，适配任意前端框架</li></ul></li><li>优势 <ul><li>术语“无头（Headless）”在开发领域常见（如 Headless CMS），突出灵活性。</li></ul></li></ul></li><li><strong>通用 API 中间件（Universal API Middleware）</strong><ul><li>适用场景 <ul><li>后端作为中间层，统一处理数据存储、权限校验、API 代理等逻辑。</li><li>强调“中间件”角色（如 Nginx 反向代理 + Keycloak 权限管理）。</li></ul></li><li>优势 <ul><li>明确功能定位（连接前端与底层服务）</li></ul></li></ul></li><li><strong>统一后端平台（Unified Backend Platform）</strong><ul><li>适用场景 <ul><li>提供一站式后端服务（用户管理、存储、API 路由等），支持多租户隔离。</li><li>适合企业级复杂需求（如 RuoYi、低代码平台）。</li></ul></li><li>优势 <ul><li>强调“平台化”，隐含模块化和可扩展性。</li></ul></li></ul></li><li><strong>全功能后端框架（Full-stack Backend Framework）</strong><ul><li>适用场景 <ul><li>自托管后端，内置通用功能（如 Spring Boot、NestJS 生态）</li><li>开发者可基于框架快速定制业务逻辑。</li></ul></li><li>优势 <ul><li>强调技术栈完整性，适合需要深度定制的场景</li></ul></li></ul></li></ul><p>如何选择术语？</p><ul><li>目标用户是开发者：优先用 <strong>BaaS</strong> 或 <strong>Headless Backend</strong>（行业通用，易理解）</li><li>强调自托管和可控性：用 <strong>通用 API 中间件</strong> 或 <strong>统一后端平台</strong></li><li>学术或架构设计文档：用 <strong>通用 API 中间件</strong>（更技术化）</li></ul><p>建议使用示例</p><ul><li>如果想表达“一个无需开发、直接集成的前端伴侣后端”，可以说：<br><strong>“通过 BaaS（如 Supabase）快速实现前端应用的标准化后端需求。”</strong></li><li>如果想表达“可私有化部署的通用后端模块”，可以说：<br><strong>“基于 Headless Backend 框架（如 Strapi）构建统一后端平台，支持多前端接入。”</strong></li></ul><p>可根据具体场景灵活组合术语，以更精准传达核心价值。</p>',23))])}const b=t(g,[["render",h],["__file","浏览器前端的通用后端.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/05.%20Utils/BaaS/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%9A%E7%94%A8%E5%90%8E%E7%AB%AF.html","title":"浏览器前端的通用后端","lang":"zh-CN","frontmatter":{"description":"浏览器前端的通用后端 (idea) 引言、调研 前端 & 后端 首先，这里复习一下这里局部中 “前后端” 的概念： 前端和后端，可能指： 语言的前后端（js/ts or java/c++），不过一般不这样分 可能指业务上的前后端（负责UI/UX or 数据库/复杂逻辑/隐藏接口） 也可能有其他区分（性能相关、源码保密相关） 按机器部署和运行环境分 他们...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/05.%20Utils/BaaS/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%9A%E7%94%A8%E5%90%8E%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"浏览器前端的通用后端"}],["meta",{"property":"og:description","content":"浏览器前端的通用后端 (idea) 引言、调研 前端 & 后端 首先，这里复习一下这里局部中 “前后端” 的概念： 前端和后端，可能指： 语言的前后端（js/ts or java/c++），不过一般不这样分 可能指业务上的前后端（负责UI/UX or 数据库/复杂逻辑/隐藏接口） 也可能有其他区分（性能相关、源码保密相关） 按机器部署和运行环境分 他们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://api.star-history.com/svg?repos=supabase/supabase,appwrite/appwrite,yangzongzhuan/RuoYi,nocodb/nocodb,strapi/strapi&type=Date"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器前端的通用后端\\",\\"image\\":[\\"https://api.star-history.com/svg?repos=supabase/supabase,appwrite/appwrite,yangzongzhuan/RuoYi,nocodb/nocodb,strapi/strapi&type=Date\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":19.52,"words":5856},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","excerpt":"\\n<h2>(idea) 引言、调研</h2>\\n<h3>前端 &amp; 后端</h3>\\n<p>首先，这里复习一下这里局部中 “前后端” 的概念：</p>\\n<p>前端和后端，可能指：</p>\\n<ul>\\n<li>语言的前后端（js/ts or java/c++），不过一般不这样分</li>\\n<li>可能指业务上的前后端（负责UI/UX or 数据库/复杂逻辑/隐藏接口）</li>\\n<li>也可能有其他区分（性能相关、源码保密相关）</li>\\n<li>按机器部署和运行环境分</li>\\n</ul>\\n<p>他们可能是耦合的也可以是分离的。例如Qt和纯前端。又分按模块区分 or 按UI/功能区分</p>\\n","autoDesc":true,"bioChainData":{"outlink":[{"title":"Handless","link":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.html"}],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","value":{"title":"浏览器前端的通用后端","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","outlink":["MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md"],"backlink":[]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md","value":{"title":"Handless","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/浏览器前端的通用后端.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/05. Utils/BaaS/Handless.md"}]}}}');export{b as comp,m as data};
