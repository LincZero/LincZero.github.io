import{_ as l,e as i,g as n,o as t}from"./app-EuS-Ookm.js";const o={};function a(p,e){return t(),i("div",null,e[0]||(e[0]=[n('<h1 id="子项目构建系统" tabindex="-1"><a class="header-anchor" href="#子项目构建系统"><span>子项目构建系统</span></a></h1><h2 id="推荐阅读顺序" tabindex="-1"><a class="header-anchor" href="#推荐阅读顺序"><span>推荐阅读顺序</span></a></h2><p>Monorepo VS Multirepo &gt; 构建系统 &gt; Git子项目依赖</p><h2 id="构建系统" tabindex="-1"><a class="header-anchor" href="#构建系统"><span>构建系统</span></a></h2><p>各个语言和框架都有自己的构建系统。这里是一些语言的简单介绍：</p><ol><li>C++，主要构建系统是 Makefile 和 CMakeLists.txt。 <ul><li>在 Makefile 中，我们可以通过编写规则来指定如何编译和链接源代码文件。</li><li>在 CMakeLists.txt 中，我们会用一种更高级的方式来管理项目，包括添加源代码、包含目录、库文件、编译参数等。</li><li>此外，我们还可以使用 <code>add_subdirectory</code> 函数来添加子项目。</li></ul></li><li>Qt，主要构建系统是 qmake <ul><li>通过 .pro（项目）文件来管理项目。.pro 文件可以包含多个 .pri（包含）文件，以模块化管理项目配置。</li><li><code>SUBDIRS</code> 变量可用于指定子目录，qmake 会在这些子目录中查找 .pro 文件并处理。</li></ul></li><li>Node.js 使用 npm 作为其包管理和构建系统 <ul><li>通过 package.json 文件来管理项目的依赖和构建脚本。每个子项目可以有自己的 package.json 文件。</li><li>在 NPM 生态中，如果你希望在一个项目中管理和使用其它的 NPM 项目（例如库或工具），你通常需要将这些项目作为 <code>dependencies 或 devDependencies</code> 添加到父项目的 <code>package.json</code> 中</li></ul></li><li>Python <ul><li>不像上述的编译型语言那样具有严格的构建系统，而是使用 setup.py 脚本及相关文件（如 MANIFEST.in、requirements.txt），通过 setuptools 来打包和构建项目。此外，Pipenv 和 Poetry 是更高级和方便的工具。</li></ul></li><li>Java 的构建系统有 Ant、Maven 和 Gradle <ul><li>Ant 最初的目标是解决 Makefile 不同平台兼容性问题，但后来它一般只用于简单项目</li><li>Maven 通过 pom.xml 文件，提供强大的依赖管理和项目生命周期管理</li><li>Gradle 吸取了 Maven 和 Ant 的优点，可以实现更灵活的构建逻辑。</li></ul></li></ol><p>以上都是本地构建系统的示例。在企业及大型项目中，经常会配合持续集成（CI）工具（如 Jenkins、Travis CI、GitHub Actions 等）来自动化构建和测试。</p><p>最后值得一提的是，尽管每个语言和框架都有自己的构建系统，然而也有<strong>通用的构建工具</strong>，如 Bazel 和 Buck，它们支持多语言和平台，提供一致的构建和测试环境。</p><h2 id="子项目依赖类型" tabindex="-1"><a class="header-anchor" href="#子项目依赖类型"><span>子项目依赖类型</span></a></h2><p>选型需求点</p><ul><li>父项目使用者需求 <ul><li>是否需要快捷修改子项目</li><li>是否需要看子项目实现细节</li><li>是否需要构建子项目</li><li>是否需要被通知更新 (仅Git依赖可以实现这一需求)</li></ul></li><li>嵌套问题 <ul><li>三层 (顶层) 项目由多个二层项目组成，多个二层项目都依赖一个第一层的库</li></ul></li></ul><p>仓库类型</p><ul><li><p>Monorepo</p><ul><li>无独立版本号</li></ul></li><li><p>Multirepo</p><ul><li>Git Submodule</li><li>Git Subtree</li></ul></li></ul><p>源码类型</p><ul><li>非源码型： 项目中不包含子项目源码 / 只需要初始使用一次子项目</li><li>源码： 项目中包含子项目源码</li></ul>',15)]))}const s=l(o,[["render",a],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/","title":"子项目构建系统","lang":"zh-CN","frontmatter":{"description":"子项目构建系统 推荐阅读顺序 Monorepo VS Multirepo > 构建系统 > Git子项目依赖 构建系统 各个语言和框架都有自己的构建系统。这里是一些语言的简单介绍： C++，主要构建系统是 Makefile 和 CMakeLists.txt。 在 Makefile 中，我们可以通过编写规则来指定如何编译和链接源代码文件。 在 CMake...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"子项目构建系统"}],["meta",{"property":"og:description","content":"子项目构建系统 推荐阅读顺序 Monorepo VS Multirepo > 构建系统 > Git子项目依赖 构建系统 各个语言和框架都有自己的构建系统。这里是一些语言的简单介绍： C++，主要构建系统是 Makefile 和 CMakeLists.txt。 在 Makefile 中，我们可以通过编写规则来指定如何编译和链接源代码文件。 在 CMake..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"子项目构建系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.56,"words":769},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/README.md","excerpt":"\\n<h2>推荐阅读顺序</h2>\\n<p>Monorepo VS Multirepo &gt; 构建系统 &gt; Git子项目依赖</p>\\n<h2>构建系统</h2>\\n<p>各个语言和框架都有自己的构建系统。这里是一些语言的简单介绍：</p>\\n<ol>\\n<li>C++，主要构建系统是 Makefile 和 CMakeLists.txt。\\n<ul>\\n<li>在 Makefile  中，我们可以通过编写规则来指定如何编译和链接源代码文件。</li>\\n<li>在 CMakeLists.txt  中，我们会用一种更高级的方式来管理项目，包括添加源代码、包含目录、库文件、编译参数等。</li>\\n<li>此外，我们还可以使用 <code>add_subdirectory</code>  函数来添加子项目。</li>\\n</ul>\\n</li>\\n<li>Qt，主要构建系统是 qmake\\n<ul>\\n<li>通过 .pro（项目）文件来管理项目。.pro 文件可以包含多个 .pri（包含）文件，以模块化管理项目配置。</li>\\n<li><code>SUBDIRS</code> 变量可用于指定子目录，qmake 会在这些子目录中查找 .pro 文件并处理。</li>\\n</ul>\\n</li>\\n<li>Node.js 使用 npm 作为其包管理和构建系统\\n<ul>\\n<li>通过 package.json 文件来管理项目的依赖和构建脚本。每个子项目可以有自己的 package.json 文件。</li>\\n<li>在 NPM 生态中，如果你希望在一个项目中管理和使用其它的 NPM 项目（例如库或工具），你通常需要将这些项目作为 <code>dependencies 或 devDependencies</code> 添加到父项目的 <code>package.json</code> 中</li>\\n</ul>\\n</li>\\n<li>Python\\n<ul>\\n<li>不像上述的编译型语言那样具有严格的构建系统，而是使用 setup.py 脚本及相关文件（如  MANIFEST.in、requirements.txt），通过 setuptools 来打包和构建项目。此外，Pipenv 和 Poetry  是更高级和方便的工具。</li>\\n</ul>\\n</li>\\n<li>Java 的构建系统有 Ant、Maven 和  Gradle\\n<ul>\\n<li>Ant 最初的目标是解决 Makefile 不同平台兼容性问题，但后来它一般只用于简单项目</li>\\n<li>Maven 通过 pom.xml  文件，提供强大的依赖管理和项目生命周期管理</li>\\n<li>Gradle 吸取了 Maven 和 Ant 的优点，可以实现更灵活的构建逻辑。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/README.md","value":{"title":"03. 多项目管理/","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,d as data};
