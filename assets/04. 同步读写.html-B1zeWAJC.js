import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,b as e,d as c,e as l}from"./app-CNCbztHq.js";const u={},i=l(`<h2 id="同步写write-some" tabindex="-1"><a class="header-anchor" href="#同步写write-some"><span>同步写write_some</span></a></h2><p>boost::asio提供了几种同步写的api，write_some可以每次向指定的空间写入固定的字节数，如果写缓冲区满了，就只写一部分，返回写入的字节数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span>  <span class="token function">wirte_to_socket</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket<span class="token operator">&amp;</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	std<span class="token double-colon punctuation">::</span>string buf <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>size_t  total_bytes_written <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token comment">//循环发送</span>
	<span class="token comment">//write_some返回每次写入的字节数</span>
	<span class="token comment">//total_bytes_written是已经发送的字节数。</span>
	<span class="token comment">//每次发送buf.length()- total_bytes_written)字节数据</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>total_bytes_written <span class="token operator">!=</span> buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		total_bytes_written <span class="token operator">+=</span> sock<span class="token punctuation">.</span><span class="token function">write_some</span><span class="token punctuation">(</span>
			asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>total_bytes_written<span class="token punctuation">,</span> 
				buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> total_bytes_written<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步写send" tabindex="-1"><a class="header-anchor" href="#同步写send"><span>同步写send</span></a></h2><p>write_some使用起来比较麻烦，需要多次调用，asio提供了send函数。send函数会一次性将buffer中的内容发送给对端，如果有部分字节因为发送缓冲区满无法发送，则阻塞等待，直到发送缓冲区可用，则继续发送完成。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">int</span> <span class="token function">send_data_by_send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string raw_ip_address <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint
                <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span>raw_ip_address<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>io_service ios<span class="token punctuation">;</span>
            <span class="token comment">// Step 1. Allocating and opening the socket.</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">sock</span><span class="token punctuation">(</span>ios<span class="token punctuation">,</span> ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>string buf <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> send_length <span class="token operator">=</span> sock<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>send_length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;send failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>system<span class="token double-colon punctuation">::</span>system_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error occured! Error code = &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;. Message: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步写write" tabindex="-1"><a class="header-anchor" href="#同步写write"><span>同步写write</span></a></h2><p>类似send方法，asio还提供了一个write函数，可以一次性将所有数据发送给对端，如果发送缓冲区满了则阻塞，直到发送缓冲区可用，将数据发送完成。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">int</span> <span class="token function">send_data_by_wirte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string raw_ip_address <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint
                <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span>raw_ip_address<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>io_service ios<span class="token punctuation">;</span>
            <span class="token comment">// Step 1. Allocating and opening the socket.</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">sock</span><span class="token punctuation">(</span>ios<span class="token punctuation">,</span> ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>string buf <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> send_length  <span class="token operator">=</span> asio<span class="token double-colon punctuation">::</span><span class="token function">write</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>send_length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;send failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>system<span class="token double-colon punctuation">::</span>system_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error occured! Error code = &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;. Message: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步读read-some" tabindex="-1"><a class="header-anchor" href="#同步读read-some"><span>同步读read_some</span></a></h2><p>同步读和同步写类似，提供了读取指定字节数的接口read_some</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    std<span class="token double-colon punctuation">::</span>string <span class="token function">read_from_socket</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket<span class="token operator">&amp;</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> MESSAGE_SIZE <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MESSAGE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>size_t total_bytes_read <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>total_bytes_read <span class="token operator">!=</span> MESSAGE_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            total_bytes_read <span class="token operator">+=</span> sock<span class="token punctuation">.</span><span class="token function">read_some</span><span class="token punctuation">(</span>
                asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> total_bytes_read<span class="token punctuation">,</span>
                    MESSAGE_SIZE <span class="token operator">-</span> total_bytes_read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> total_bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">read_data_by_read_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string raw_ip_address <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint
                <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span>raw_ip_address<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>io_service ios<span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">sock</span><span class="token punctuation">(</span>ios<span class="token punctuation">,</span> ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">read_from_socket</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>system<span class="token double-colon punctuation">::</span>system_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error occured! Error code = &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;. Message: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步读receive" tabindex="-1"><a class="header-anchor" href="#同步读receive"><span>同步读receive</span></a></h2><p>可以一次性同步接收对方发送的数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">int</span> <span class="token function">read_data_by_receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string raw_ip_address <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint
                <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span>raw_ip_address<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>io_service ios<span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">sock</span><span class="token punctuation">(</span>ios<span class="token punctuation">,</span> ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BUFF_SIZE <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
             <span class="token keyword">char</span> buffer_receive<span class="token punctuation">[</span>BUFF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> receive_length <span class="token operator">=</span>  sock<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buffer_receive<span class="token punctuation">,</span> BUFF_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>receive_length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;receive failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>system<span class="token double-colon punctuation">::</span>system_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error occured! Error code = &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;. Message: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步读read" tabindex="-1"><a class="header-anchor" href="#同步读read"><span>同步读read</span></a></h2><p>可以一次性同步读取对方发送的数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">int</span> <span class="token function">read_data_by_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>string raw_ip_address <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">short</span> port_num <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>endpoint
                <span class="token function">ep</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>address<span class="token double-colon punctuation">::</span><span class="token function">from_string</span><span class="token punctuation">(</span>raw_ip_address<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    port_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>io_service ios<span class="token punctuation">;</span>
            asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket <span class="token function">sock</span><span class="token punctuation">(</span>ios<span class="token punctuation">,</span> ep<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sock<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BUFF_SIZE <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> buffer_receive<span class="token punctuation">[</span>BUFF_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> receive_length <span class="token operator">=</span> asio<span class="token double-colon punctuation">::</span><span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> asio<span class="token double-colon punctuation">::</span><span class="token function">buffer</span><span class="token punctuation">(</span>buffer_receive<span class="token punctuation">,</span> BUFF_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>receive_length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;receive failed&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span>system<span class="token double-colon punctuation">::</span>system_error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error occured! Error code = &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;. Message: &quot;</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取直到指定字符" tabindex="-1"><a class="header-anchor" href="#读取直到指定字符"><span>读取直到指定字符</span></a></h2><p>我们可以一直读取，直到读取指定字符结束</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    std<span class="token double-colon punctuation">::</span>string  <span class="token function">read_data_by_until</span><span class="token punctuation">(</span>asio<span class="token double-colon punctuation">::</span>ip<span class="token double-colon punctuation">::</span>tcp<span class="token double-colon punctuation">::</span>socket<span class="token operator">&amp;</span> sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        asio<span class="token double-colon punctuation">::</span>streambuf buf<span class="token punctuation">;</span>
        <span class="token comment">// Synchronously read data from the socket until</span>
        <span class="token comment">// &#39;\\n&#39; symbol is encountered.  </span>
        asio<span class="token double-colon punctuation">::</span><span class="token function">read_until</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>string message<span class="token punctuation">;</span>
        <span class="token comment">// Because buffer &#39;buf&#39; may contain some other data</span>
        <span class="token comment">// after &#39;\\n&#39; symbol, we have to parse the buffer and</span>
        <span class="token comment">// extract only symbols before the delimiter. </span>
        std<span class="token double-colon punctuation">::</span>istream <span class="token function">input_stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>input_stream<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码链接" tabindex="-1"><a class="header-anchor" href="#源码链接"><span>源码链接</span></a></h2>`,22),k={href:"https://gitee.com/secondtonone1/boostasio-learn",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const s=t("ExternalLinkIcon");return p(),o("div",null,[i,n("p",null,[n("a",k,[e("https://gitee.com/secondtonone1/boostasio-learn"),c(s)])])])}const _=a(u,[["render",r],["__file","04. 同步读写.html.vue"]]),f=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%91/04.%20%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%86%99.html","title":"","lang":"zh-CN","frontmatter":{"description":"同步写write_some boost::asio提供了几种同步写的api，write_some可以每次向指定的空间写入固定的字节数，如果写缓冲区满了，就只写一部分，返回写入的字节数。 同步写send write_some使用起来比较麻烦，需要多次调用，asio提供了send函数。send函数会一次性将buffer中的内容发送给对端，如果有部分字节因为...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%91/04.%20%E5%90%8C%E6%AD%A5%E8%AF%BB%E5%86%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"同步写write_some boost::asio提供了几种同步写的api，write_some可以每次向指定的空间写入固定的字节数，如果写缓冲区满了，就只写一部分，返回写入的字节数。 同步写send write_some使用起来比较麻烦，需要多次调用，asio提供了send函数。send函数会一次性将buffer中的内容发送给对端，如果有部分字节因为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"同步写write_some","slug":"同步写write-some","link":"#同步写write-some","children":[]},{"level":2,"title":"同步写send","slug":"同步写send","link":"#同步写send","children":[]},{"level":2,"title":"同步写write","slug":"同步写write","link":"#同步写write","children":[]},{"level":2,"title":"同步读read_some","slug":"同步读read-some","link":"#同步读read-some","children":[]},{"level":2,"title":"同步读receive","slug":"同步读receive","link":"#同步读receive","children":[]},{"level":2,"title":"同步读read","slug":"同步读read","link":"#同步读read","children":[]},{"level":2,"title":"读取直到指定字符","slug":"读取直到指定字符","link":"#读取直到指定字符","children":[]},{"level":2,"title":"源码链接","slug":"源码链接","link":"#源码链接","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.85,"words":855},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/C++/07. 模块库/Boost/02. 网络/Boost.Asio 视频/04. 同步读写.md","excerpt":"<h2>同步写write_some</h2>\\n<p>boost::asio提供了几种同步写的api，write_some可以每次向指定的空间写入固定的字节数，如果写缓冲区满了，就只写一部分，返回写入的字节数。</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span>  <span class=\\"token function\\">wirte_to_socket</span><span class=\\"token punctuation\\">(</span>asio<span class=\\"token double-colon punctuation\\">::</span>ip<span class=\\"token double-colon punctuation\\">::</span>tcp<span class=\\"token double-colon punctuation\\">::</span>socket<span class=\\"token operator\\">&amp;</span> sock<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>string buf <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello World!\\"</span><span class=\\"token punctuation\\">;</span>\\n\\tstd<span class=\\"token double-colon punctuation\\">::</span>size_t  total_bytes_written <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">//循环发送</span>\\n\\t<span class=\\"token comment\\">//write_some返回每次写入的字节数</span>\\n\\t<span class=\\"token comment\\">//total_bytes_written是已经发送的字节数。</span>\\n\\t<span class=\\"token comment\\">//每次发送buf.length()- total_bytes_written)字节数据</span>\\n\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>total_bytes_written <span class=\\"token operator\\">!=</span> buf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\ttotal_bytes_written <span class=\\"token operator\\">+=</span> sock<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write_some</span><span class=\\"token punctuation\\">(</span>\\n\\t\\t\\tasio<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">buffer</span><span class=\\"token punctuation\\">(</span>buf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">c_str</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span>total_bytes_written<span class=\\"token punctuation\\">,</span> \\n\\t\\t\\t\\tbuf<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-</span> total_bytes_written<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{_ as comp,f as data};
