import{_ as s,c as a,b as t,o as p}from"./app-DyeLIyox.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="python-反射" tabindex="-1"><a class="header-anchor" href="#python-反射"><span>Python “反射”</span></a></h1><h2 id="与java不同点" tabindex="-1"><a class="header-anchor" href="#与java不同点"><span><mark>与Java不同点</mark></span></a></h2><ul><li>Java <ul><li>有一个专门的包处理反射</li></ul></li><li>python <ul><li>python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName</li><li>python是一个脚本语言，它不像java一样有一个专门的包来处理<strong>反射</strong></li><li>Python的内置函数提供了强大的反射机制</li></ul></li></ul><h2 id="内置函数的反射机制" tabindex="-1"><a class="header-anchor" href="#内置函数的反射机制"><span>内置函数的反射机制</span></a></h2><p>内置函数提供了强大的反射机制</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token punctuation">)</span>	<span class="token comment"># 加载模块</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># 列表形式返回属性和方法</span>
<span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 检测是否含有某属性</span>
<span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 获取属性</span>
<span class="token builtin">setattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 设置属性</span>
<span class="token builtin">delattr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 删除属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot; text2.py &quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;init_C1&quot;</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot; text1.py &quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;init_C1&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># globals() 方法</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;_______&quot;</span><span class="token punctuation">)</span>
    class1 <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;C1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># init_C1</span>
    class2 <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;C2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># __import__ 方法</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;_______&quot;</span><span class="token punctuation">)</span>
    package <span class="token operator">=</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span>
    class3 <span class="token operator">=</span> package<span class="token punctuation">.</span>C2<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># init_C2</span>

    <span class="token comment"># __import__ 方法 + getattr() 方法</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;_______&quot;</span><span class="token punctuation">)</span>
    package <span class="token operator">=</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span>
    temp_class <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>package<span class="token punctuation">,</span> <span class="token string">&#39;C2&#39;</span><span class="token punctuation">)</span>
    class4 <span class="token operator">=</span> temp_class<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># init_C2</span>

    <span class="token comment"># __class__ 方法</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;_______&quot;</span><span class="token punctuation">)</span>
    class1<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># init_C1</span>
    class2<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># init_C2</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;_______&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># &lt;object&gt; 对象</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>class1<span class="token punctuation">)</span>  				<span class="token comment"># &lt;__main__.C1 object at 0x000001349AB76A08&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>class2<span class="token punctuation">)</span>  				<span class="token comment"># &lt;examples.genshin_calc.test2.C2 object at 0x000001349AB76C08&gt;</span>
    <span class="token comment"># &lt;module&gt; 对象</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span>              <span class="token comment"># &lt;module &#39;main_test&#39; from &#39;...\\\\test2.py&#39;&gt;</span>
    <span class="token comment"># &lt;class&gt; 对象</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>temp_class<span class="token punctuation">)</span>           <span class="token comment"># &lt;class &#39;main_test.C2&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>C1<span class="token punctuation">)</span>                   <span class="token comment"># &lt;class &#39;__main__.C1&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>C2<span class="token punctuation">)</span>                   <span class="token comment"># &lt;class &#39;examples.genshin_calc.test2.C2&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>     <span class="token comment"># &lt;class &#39;__main__.C1&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>class2<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>     <span class="token comment"># &lt;class &#39;examples.genshin_calc.test2.C2&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>class1<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># &lt;class &#39;__main__.C1&#39;&gt;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>class2<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># &lt;class &#39;examples.genshin_calc.test2.C2&#39;&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深入-用9种方法来生成新的对象" tabindex="-1"><a class="header-anchor" href="#深入-用9种方法来生成新的对象"><span>深入 - 用9种方法来生成新的对象</span></a></h2><p>参考：原文链接：https://blog.csdn.net/xiemanR/article/details/77922917</p><p>绝大多数是获取 <code>&lt;class&gt;</code> 对象的方法，与在 Java 中通过反射获取class类的逻辑相同</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>point1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>										<span class="token comment"># 普通方法</span>
point2 <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">&quot;{}({}, {})&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;Point&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  			<span class="token comment"># eval方法执行字符串</span>
point6 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>point1<span class="token punctuation">)</span>  							<span class="token comment"># 深拷贝方法</span>

<span class="token comment"># 获取&lt;class&gt;对象的方法 - 字符串</span>
point3 <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;Point&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  							<span class="token comment"># globals()方法</span>
point4 <span class="token operator">=</span> <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;Point&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  							<span class="token comment"># locals()方法</span>
point5 <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span>__name__<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Point&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>		<span class="token comment"># getattr()方法+modules方法（也可用__import__）（需要导入sys模块）</span>

<span class="token comment"># 获取&lt;class&gt;对象的方法 - 其他</span>
point7 <span class="token operator">=</span> point1<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  							<span class="token comment"># __class__方法</span>
point8 <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;Point&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Point<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>					<span class="token comment"># type方法</span>
point9 <span class="token operator">=</span> types<span class="token punctuation">.</span>new_class<span class="token punctuation">(</span><span class="token string">&#39;Point&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Point<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>		<span class="token comment"># types模块（需要导入types模块）</span>

<span class="token comment"># 获取&lt;module&gt;对象</span>
point10 <span class="token operator">=</span> <span class="token builtin">__import__</span><span class="token punctuation">(</span><span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Point

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="效率测试-还不错" tabindex="-1"><a class="header-anchor" href="#效率测试-还不错"><span>效率测试（还不错）</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwarg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        s_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token operator">**</span>kwarg<span class="token punctuation">)</span>
        e_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;耗时：{}秒&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e_time <span class="token operator">-</span> s_time<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res

    <span class="token keyword">return</span> inner

<span class="token decorator annotation punctuation">@get_time</span>
<span class="token keyword">def</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">]</span>

dict1 <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token string">&#39;Node&#39;</span><span class="token punctuation">:</span> Node
<span class="token punctuation">}</span>
<span class="token decorator annotation punctuation">@get_time</span>
<span class="token keyword">def</span> <span class="token function">get_from_register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dict1<span class="token punctuation">[</span><span class="token string">&quot;Node&quot;</span><span class="token punctuation">]</span>
        
<span class="token decorator annotation punctuation">@get_time</span>
<span class="token keyword">def</span> <span class="token function">only_use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        Node

reflect<span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment"># 耗时：0.7427828311920166秒</span>
get_from_register<span class="token punctuation">(</span><span class="token punctuation">)</span>		<span class="token comment"># 耗时：0.32065248489379883秒</span>
only_use<span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment"># 耗时：0.2612471580505371秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const i=s(e,[["render",o],["__file","Python “反射”.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/%E5%8A%A8%E6%80%81%E6%80%A7/Python%20%E2%80%9C%E5%8F%8D%E5%B0%84%E2%80%9D.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 Python “反射” 与Java不同点 Java 有一个专门的包处理反射 python python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName python是一个脚本语言，它不像java一样有一个专门的包来处理反射 Python的内置函数提供了强大的反射机制 内置函数的反射机制 内置函数...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/%E5%8A%A8%E6%80%81%E6%80%A7/Python%20%E2%80%9C%E5%8F%8D%E5%B0%84%E2%80%9D.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 Python “反射” 与Java不同点 Java 有一个专门的包处理反射 python python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName python是一个脚本语言，它不像java一样有一个专门的包来处理反射 Python的内置函数提供了强大的反射机制 内置函数的反射机制 内置函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"Python “反射”","slug":"python-反射","link":"#python-反射","children":[{"level":2,"title":"与Java不同点","slug":"与java不同点","link":"#与java不同点","children":[]},{"level":2,"title":"内置函数的反射机制","slug":"内置函数的反射机制","link":"#内置函数的反射机制","children":[]},{"level":2,"title":"深入 - 用9种方法来生成新的对象","slug":"深入-用9种方法来生成新的对象","link":"#深入-用9种方法来生成新的对象","children":[{"level":3,"title":"效率测试（还不错）","slug":"效率测试-还不错","link":"#效率测试-还不错","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.86,"words":559},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/04. 优化/动态性/Python “反射”.md","excerpt":"\\n<h1>目录</h1>\\n<h1>Python “反射”</h1>\\n<h2><mark>与Java不同点</mark></h2>\\n<ul>\\n<li>Java\\n<ul>\\n<li>有一个专门的包处理反射</li>\\n</ul>\\n</li>\\n<li>python\\n<ul>\\n<li>python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName</li>\\n<li>python是一个脚本语言，它不像java一样有一个专门的包来处理<strong>反射</strong></li>\\n<li>Python的内置函数提供了强大的反射机制</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{i as comp,u as data};
