import{_ as o,c as p,e as l,a as s,d as a,b as e,o as i,r}from"./app-T3I-xDym.js";const u={},d={href:"https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats",target:"_blank",rel:"noopener noreferrer"},c={href:"https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language#History",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.quirksmode.org/css/csshacks.html",target:"_blank",rel:"noopener noreferrer"},m={href:"http://www.ie6death.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://en.wikipedia.org/wiki/Vacuum_tube",target:"_blank",rel:"noopener noreferrer"},v={href:"https://twitter.com/BrendanEich/status/773403975865470976",target:"_blank",rel:"noopener noreferrer"},b={href:"https://en.wikipedia.org/wiki/Parsing#Parser",target:"_blank",rel:"noopener noreferrer"},y={href:"https://en.wikipedia.org/wiki/Tom_Preston-Werner",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.wikipedia.org/wiki/INI_file",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/bevry/cson#what-is-cson",target:"_blank",rel:"noopener noreferrer"},S={href:"http://coffeescript.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://en.wikipedia.org/wiki/Source-to-source_compiler",target:"_blank",rel:"noopener noreferrer"},M={href:"https://en.wikipedia.org/wiki/Comment_(computer_programming)",target:"_blank",rel:"noopener noreferrer"},L={href:"http://clarkevans.com/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://exploringjs.com/es6/ch_maps-sets.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.tutorialspoint.com/compiler_design/compiler_design_lexical_analysis.htm",target:"_blank",rel:"noopener noreferrer"},w={href:"https://en.wikipedia.org/wiki/Fluent_interface",target:"_blank",rel:"noopener noreferrer"},q={href:"http://yaml.org/spec/1.1/current.html",target:"_blank",rel:"noopener noreferrer"},A={href:"http://www.yaml.org/spec/1.2/spec.html",target:"_blank",rel:"noopener noreferrer"};function N(O,n){const t=r("ExternalLinkIcon");return i(),p("div",null,[n[66]||(n[66]=l('<h1 id="比较-json-xml-yaml-cson-toml" tabindex="-1"><a class="header-anchor" href="#比较-json-xml-yaml-cson-toml"><span>比较 json xml yaml cson toml</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="比较-json-xml-yaml-cson-toml-1" tabindex="-1"><a class="header-anchor" href="#比较-json-xml-yaml-cson-toml-1"><span>比较 json xml yaml cson toml</span></a></h1><p>参考：</p><ul><li>翻译 https://linux.cn/article-10664-1.html 　　原文 https://www.zionandzion.com/json-vs-xml-vs-toml-vs-cson-vs-yaml/</li></ul><h2 id="数据序列化格式-standard-generalized-markup-language-sgml" tabindex="-1"><a class="header-anchor" href="#数据序列化格式-standard-generalized-markup-language-sgml"><span>数据序列化格式（Standard Generalized Markup Language，SGML）</span></a></h2><h3 id="两大类" tabindex="-1"><a class="header-anchor" href="#两大类"><span>两大类</span></a></h3>',7)),s("p",null,[n[1]||(n[1]=a("虽然")),s("a",d,[n[0]||(n[0]=a("数据序列化格式")),e(t)]),n[2]||(n[2]=a("多到可以埋葬哈利法塔，但它们大多分为两类："))]),n[67]||(n[67]=s("ul",null,[s("li",null,"易于人类读写，"),s("li",null,"易于机器读写。")],-1)),n[68]||(n[68]=s("p",null,"很难两全其美，因为人类喜欢让我们更具表现力的松散类型和灵活格式标准。 而机器倾向于被确切告知一切事情而没有二义性和细节缺失，并且认为“严格规范”才是它们最爱的口味。",-1)),n[69]||(n[69]=s("p",null,"对人类可读性特别有用的格式：XML、JSON、TOML、CSON 以及 YAML。每个都有各自的优缺点和适当的用例场景。",-1)),n[70]||(n[70]=s("h3",{id:"历史",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#历史"},[s("span",null,"历史")])],-1)),s("p",null,[n[4]||(n[4]=a("回到互联网的早期，")),s("a",c,[n[3]||(n[3]=a("一些非常聪明的家伙")),e(t)]),n[5]||(n[5]=a("决定整合一种让每个系统都能理解的标准语言，并创造性地将其命名为 ")),n[6]||(n[6]=s("strong",null,"标准通用标记语言（Standard Generalized Markup Language，简称 SGML）",-1)),n[7]||(n[7]=a("。"))]),n[71]||(n[71]=l(`<p>SGML 非常灵活，发布者也很好地定义了它。它成为了 XML、SVG 和 HTML 等语言之父。所有这三个都符合 SGML 规范，可是它们都是规则更严格、灵活性更少的子集。</p><p>最终，人们开始看到非常小、简洁、易读且易于生成的数据的好处，这些数据可以在系统之间以编程的方式共享，而开销很小。大约在那个时候，JSON 诞生了并且能够满足所有的需求。而另一方面，其它语言也开始出现以处理更多的专业用例，如 CSON，TOML 和 YAML。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><h3 id="xml-不行了" tabindex="-1"><a class="header-anchor" href="#xml-不行了"><span>XML：不行了</span></a></h3><p>原本，XML 语言非常灵活且易于编写，但它的<strong>缺点是冗长，人类难以阅读、计算机非常难以读取，并且有很多语法对于传达信息并不是完全必要的</strong>。</p><p>今天，它在 web 上的数据序列化的用途已经消失了。除非你在编写 HTML 或者 SVG，否则你不太能在许多其它地方看到 XML。一些过时的系统今天仍在使用它，但是用它传递数据往往太重了。</p><p>我已经可以听到 XML 老爷爷开始在它们的石碑上乱写为什么 XML 是了不起的，所以我将提供一个小小的补充：XML 可以很容易地由系统和人读写。然而，真的，我的意思是荒谬的，很难创建一个可以规范的读取它的系统。这是一个简单美观的 XML 示例：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bk101<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Gambardella, Matthew<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>XML Developer&#39;s Guide<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>genre</span><span class="token punctuation">&gt;</span></span>Computer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>genre</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>44.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>publish_date</span><span class="token punctuation">&gt;</span></span>2000-10-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>publish_date</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>An in-depth look at creating applications with XML.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太棒了。易于阅读、理解、写入，也容易编码一个可以读写它的系统。但请考虑这个例子：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">r</span> <span class="token punctuation">[</span><span class="token internal-subset"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">y</span> <span class="token attr-name">&quot;a]</span><span class="token punctuation">&gt;</span></span>b&quot;&gt; </span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>r</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token entity named-entity" title="&amp;y;">&amp;y;</span>&gt;<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token cdata">&lt;![CDATA[[a&gt;b &lt;a&gt;b &lt;a]]&gt;</span>
    <span class="token prolog">&lt;?x &lt;a&gt;&lt;!-- &lt;b&gt; ?&gt;</span> c --&gt; d
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>r</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),s("p",null,[n[11]||(n[11]=a("这上面是 100% 有效的 XML。几乎不可能阅读、理解或推理。编写可以使用和理解这个的代码将花费至少 36 根头发和 248 磅咖啡渣。我们没有那么多时间或咖啡，而且我们大多数老程序员们现在都是秃头。所以，让它活在我们的记忆里，就像 ")),s("a",k,[n[8]||(n[8]=a("css hacks")),e(t)]),n[12]||(n[12]=a("、")),s("a",m,[n[9]||(n[9]=a("IE 6 浏览器")),e(t)]),n[13]||(n[13]=a(" 和")),s("a",g,[n[10]||(n[10]=a("真空管")),e(t)]),n[14]||(n[14]=a("一样好了。"))]),n[72]||(n[72]=s("h3",{id:"json-并列聚会",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#json-并列聚会"},[s("span",null,"JSON：并列聚会")])],-1)),n[73]||(n[73]=s("p",null,[a("好吧，我们都同意，XML = 差劲。那么，好的替代品是什么？ "),s("strong",null,"JavaScript 对象表示法（JavaScript Object Notation，简称JSON）")],-1)),s("p",null,[n[16]||(n[16]=a("JSON（读起来像 Jason 这个名字） 是 Brendan Eich 发明的，并且得到了伟大而强力的 ")),s("a",v,[n[15]||(n[15]=a("JavaScript 意见领袖")),e(t)]),n[17]||(n[17]=a(" Douglas Crockford 的推广。它现在几乎用在任何地方。"))]),s("p",null,[n[19]||(n[19]=a("优点：这种格式很容易由人和机器编写，按规范中的严格规则")),s("a",b,[n[18]||(n[18]=a("解析")),e(t)]),n[20]||(n[20]=a("也相当容易，并且灵活 —— 允许深层嵌套数据，支持所有的原始数据类型，及将集合解释为数组或对象。JSON 成为了将数据从一个系统传输到另一个系统的事实标准。几乎所有语言都有内置读写它的功能。"))]),n[74]||(n[74]=l(`<p>JSON语法很简单。方括号表示数组，花括号表示记录，由冒号分隔的两个值分别表示属性或“键”（在左边）、值（在右边）。所有键必须用双引号括起来：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;books&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bk102&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Crockford, Douglas&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript: The Good Parts&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;genre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Computer&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">29.99</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;publish_date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2008-05-01&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Unearthing the Excellence in JavaScript&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这对你来说应该是完全有意义的。它简洁明了，并且从 XML 中删除了大量额外废话，并传达相同数量的信息。 JSON 现在是王道，本文剩下的部分会介绍其它语言格式，这些格式只不过是 JSON 的简化版，尝试让其更简洁或对人类更易读，可结构还是非常相似的</p><h3 id="toml-缩短到彻底的利他主义-似ini" tabindex="-1"><a class="header-anchor" href="#toml-缩短到彻底的利他主义-似ini"><span>TOML：缩短到彻底的利他主义（似ini）</span></a></h3>`,4)),s("p",null,[n[22]||(n[22]=a("**TOML（Tom 的显而易见的最小化语言Tom’s Obvious, Minimal Language）**允许以相当快捷、简洁的方式定义深层嵌套的数据结构。名字中的 Tom 是指发明者 ")),s("a",y,[n[21]||(n[21]=a("Tom Preston Werner")),e(t)]),n[23]||(n[23]=a("，他是一位活跃于我们行业的创造者和软件开发人员。"))]),n[75]||(n[75]=l(`<div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">books</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&#39;bk101&#39;</span>
<span class="token key property">author</span> <span class="token punctuation">=</span> <span class="token string">&#39;Crockford, Douglas&#39;</span>
<span class="token key property">title</span> <span class="token punctuation">=</span> <span class="token string">&#39;JavaScript: The Good Parts&#39;</span>
<span class="token key property">genre</span> <span class="token punctuation">=</span> <span class="token string">&#39;Computer&#39;</span>
<span class="token key property">price</span> <span class="token punctuation">=</span> <span class="token number">29.99</span>
<span class="token key property">publish_date</span> <span class="token punctuation">=</span> <span class="token date number">2008-05-01T00:00:00+00:00</span>
<span class="token key property">description</span> <span class="token punctuation">=</span> <span class="token string">&#39;Unearthing the Excellence in JavaScript&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("ul",null,[s("li",null,[n[28]||(n[28]=a("缺点 ")),s("ul",null,[s("li",null,[n[25]||(n[25]=a("与 JSON 相比，语法有点尴尬，更类似 ")),s("a",f,[n[24]||(n[24]=a("ini 文件")),e(t)]),n[26]||(n[26]=a("。这不是一个糟糕的语法，但是需要一些时间适应。"))]),n[27]||(n[27]=s("li",null,[a("很少有系统使用它或非常类似的东西作为配置，这是它"),s("strong",null,"最大的缺点"),a("。根本没有很多语言或库可以用来解释 TOML。")],-1))])]),n[29]||(n[29]=s("li",null,[a("优点 "),s("ul",null,[s("li",null,"TOML 中集成了一些很棒的功能，例如多行字符串、保留字符的自动转义、日期、时间、整数、浮点数、科学记数法和“表扩展”等数据类型。 特别是最后一点，这也是 TOML 如此简洁的原因。使用 TOML，你可以肯定在时间和文件长度上会节省不少。")])],-1))]),n[76]||(n[76]=l(`<div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">a.b.c</span><span class="token punctuation">]</span>
<span class="token key property">d</span> <span class="token punctuation">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token key property">e</span> <span class="token punctuation">=</span> <span class="token string">&#39;World&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上扩展到以下内容：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
        <span class="token string-property property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;c&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
                <span class="token string-property property">&quot;d&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span>
                <span class="token string-property property">&quot;e&quot;</span><span class="token operator">:</span> <span class="token string">&quot;World&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cson-特定系统所包含的简单样本" tabindex="-1"><a class="header-anchor" href="#cson-特定系统所包含的简单样本"><span>CSON：特定系统所包含的简单样本</span></a></h3><p>首先，有两个 CSON 规范。</p><ul><li>一个代表 CoffeeScript Object Notation</li><li>另一个代表 Cursive Script Object Notation</li></ul><p>后者不经常使用，所以我们不会关注它。我们只关注 CoffeeScript。</p>`,7)),s("p",null,[s("a",x,[n[30]||(n[30]=a("CSON")),e(t)]),n[33]||(n[33]=a(" 需要一点介绍。首先，我们来谈谈 CoffeeScript。")),s("a",S,[n[31]||(n[31]=a("CoffeeScript")),e(t)]),n[34]||(n[34]=a(" 是一种通过运行编译器生成 JavaScript 的语言。它允许你以更加简洁的语法编写 JavaScript 并")),s("a",h,[n[32]||(n[32]=a("转译")),e(t)]),n[35]||(n[35]=a("成实际的 JavaScript，然后你可以在你的 web 应用程序中使用它。CoffeeScript 通过删除 JavaScript 中必需的许多额外语法，使编写 JavaScript 变得更容易。"))]),n[77]||(n[77]=l(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>books<span class="token operator">:</span> <span class="token punctuation">[</span>
    id<span class="token operator">:</span> &#39;bk102&#39;
    author<span class="token operator">:</span> &#39;Crockford<span class="token punctuation">,</span> Douglas&#39;
    title<span class="token operator">:</span> &#39;JavaScript<span class="token operator">:</span> The Good Parts&#39;
    genre<span class="token operator">:</span> &#39;Computer&#39;
    price<span class="token operator">:</span> <span class="token number">29.99</span>
    publish_date<span class="token operator">:</span> &#39;<span class="token number">2008</span><span class="token number">-05</span><span class="token number">-01</span>&#39;
    description<span class="token operator">:</span> &#39;Unearthing the Excellence in JavaScript&#39;
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("ul",null,[s("li",null,[n[42]||(n[42]=s("p",null,"优点：",-1)),s("ul",null,[n[41]||(n[41]=s("li",null,[s("p",null,"CoffeeScript 摆脱的一个大问题是花括号 —— 不需要它们。同样，CSON 是没有大括号的 JSON。它依赖于缩进来确定数据的层次结构。CSON 非常易于读写，并且通常比 JSON 需要更少的代码行，因为没有括号。")],-1)),s("li",null,[s("p",null,[n[37]||(n[37]=a("CSON 还提供一些 JSON 不提供的额外细节。多行字符串非常容易编写，你可以通过使用 ")),n[38]||(n[38]=s("code",null,"#",-1)),n[39]||(n[39]=a(" 符号开始一行来输入")),s("a",M,[n[36]||(n[36]=a("注释")),e(t)]),n[40]||(n[40]=a("，并且不需要用逗号分隔键值对。"))])])])]),n[43]||(n[43]=s("li",null,[s("p",null,"缺点"),s("ul",null,[s("li",null,"它是 CoffeScript 对象表示法CoffeeScript Object Notation。也就是说你要用 CoffeeScript 解析/标记化/lex/转译或其它方式来使用 CSON。CoffeeScript 是读取数据的系统。如果数据序列化的目的是允许数据从一个系统传递到另一个系统，这里我们有一个只能由单个系统读取的数据序列化格式，这使得它与防火火柴、防水海绵或者叉匙恼人的脆弱叉子部分一样有用。"),s("li",null,"如果这种格式被其它系统也采用，那它在开发者世界中可能非常有用。但到目前为止这基本上没有发生，所以在 PHP 或 JAVA 等替代语言中使用它是不行的。")])],-1))]),n[78]||(n[78]=s("h3",{id:"yaml-年轻人的呼喊",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#yaml-年轻人的呼喊"},[s("span",null,"YAML：年轻人的呼喊")])],-1)),s("p",null,[n[45]||(n[45]=a("开发人员感到高兴，因为 YAML 来自")),s("a",L,[n[44]||(n[44]=a("一个 Python 的贡献者")),e(t)]),n[46]||(n[46]=a("。"))]),n[79]||(n[79]=l(`<div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">books</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> bk102
    <span class="token key atrule">author</span><span class="token punctuation">:</span> Crockford<span class="token punctuation">,</span> Douglas
    <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">&#39;JavaScript: The Good Parts&#39;</span>
    <span class="token key atrule">genre</span><span class="token punctuation">:</span> Computer
    <span class="token key atrule">price</span><span class="token punctuation">:</span> <span class="token number">29.99</span>
    <span class="token key atrule">publish_date</span><span class="token punctuation">:</span> <span class="token tag">!!str</span> <span class="token datetime number">2008-05-01</span>
    <span class="token key atrule">description</span><span class="token punctuation">:</span> Unearthing the Excellence in JavaScript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>业界的年轻人正在迅速采用 YAML 作为他们首选的数据序列化和系统配置格式。他们这样做很机智。YAML 具有像 CSON 一样简洁的所有好处，以及与 JSON 一样的数据类型解释的所有功能。YAML 像加拿大人容易相处一样容易阅读。</p>`,2)),s("ul",null,[s("li",null,[n[53]||(n[53]=s("p",null,"优点：",-1)),s("ul",null,[n[50]||(n[50]=s("li",null,"YAML 具有与 CSON 相同的功能集和类似的语法，有一系列新功能，以及几乎所有 web 编程语言都可用的解析器。",-1)),s("li",null,[n[48]||(n[48]=a("它还有一些额外的功能，如循环引用、软包装、多行键、类型转换标签、二进制数据、对象合并和")),s("a",E,[n[47]||(n[47]=a("集合映射")),e(t)]),n[49]||(n[49]=a("。"))]),n[51]||(n[51]=s("li",null,[a("它具有非常好的可读性和可写性，并且是 "),s("strong",null,"JSON 的超集"),a("，因此你可以在 YAML 中使用完全合格的 JSON 语法并且一切正常工作。")],-1)),n[52]||(n[52]=s("li",null,"你几乎不需要引号，它可以解释大多数基本数据类型（字符串、整数、浮点数、布尔值等）。",-1))])]),s("li",null,[n[64]||(n[64]=s("p",null,"缺点：",-1)),n[65]||(n[65]=s("p",null,"YAML 有两个问题，对我而言，第一个是大问题。",-1)),s("ul",null,[s("li",null,[n[56]||(n[56]=a("在撰写本文时，YAML 解析器尚未内置于多种语言，因此你需要使用第三方库或扩展来为你选择的语言解析 .yaml 文件。这不是什么大问题，可似乎大多数为 YAML 创建解析器的开发人员都选择随机将“附加功能”放入解析器中。 有些允许")),s("a",j,[n[54]||(n[54]=a("标记化")),e(t)]),n[57]||(n[57]=a("，有些允许")),s("a",w,[n[55]||(n[55]=a("链引用")),e(t)]),n[58]||(n[58]=a("，有些甚至允许内联计算。这一切都很好（某种意义上），只是这些功能都不是规范的一部分，因此很难在其他语言的其他解析器中找到。这导致系统限定，你最终遇到了与 CSON 相同的问题。 如果你使用仅在一个解析器中找到的功能，则其他解析器将无法解释输入。大多数这些功能都是无意义的，不属于数据集，而是属于你的应用程序逻辑，因此最好简单地忽略它们和编写符合规范的 YAML。"))]),s("li",null,[n[61]||(n[61]=a("很少有解析器完全实现规范。 所有的基本要素都有，但是很难找到一些更复杂和更新的东西，比如软包装、文档标记和首选语言的循环引用。我还没有看到对这些东西的刚需，所以希望它们不让你很失望。 考虑到上述情况，我倾向于保持 ")),s("a",q,[n[59]||(n[59]=a("1.1 规范")),e(t)]),n[62]||(n[62]=a(" 中呈现的更成熟的功能集，而避免在 ")),s("a",A,[n[60]||(n[60]=a("1.2 规范")),e(t)]),n[63]||(n[63]=a(" 中找到的新东西。然而，编程是一个不断发展的怪兽，所以当你读完这篇文章时，你或许就可以使用 1.2 规范了。"))])])])]),n[80]||(n[80]=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结"},[s("span",null,"总结")])],-1)),n[81]||(n[81]=s("p",null,"这是最后一段话。每个序列化语言都应该以个案标准的方式评价。 当涉及机器的可读性时，有些无出其右（the bee’s knees）。 对于人类可读性，有些名至实归（the cat’s meow），有些只是金玉其外（gilded turds）",-1)),n[82]||(n[82]=s("p",null,"以下是最终细分： 如果你要编写供其他代码阅读的代码，请使用 YAML。 如果你正在编写能写出供其他代码读取的代码的代码，请使用 JSON。 最后，如果你正在编写将代码转译为供其他代码读取的代码的代码，请重新考虑你的人生选择。",-1))])}const J=o(u,[["render",N],["__file","比较 json xml yaml cson toml.html.vue"]]),T=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/02.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E6%AF%94%E8%BE%83%20json%20xml%20yaml%20cson%20toml.html","title":"比较 json xml yaml cson toml","lang":"zh-CN","frontmatter":{"description":"比较 json xml yaml cson toml 目录 比较 json xml yaml cson toml 参考： 翻译 https://linux.cn/article-10664-1.html 原文 https://www.zionandzion.com/json-vs-xml-vs-toml-vs-cson-vs-yaml/ 数据序列化格式...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/02.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E5%A4%9A%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/%E8%BE%85%E5%8A%A9%E6%96%87%E4%BB%B6/%E6%AF%94%E8%BE%83%20json%20xml%20yaml%20cson%20toml.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"比较 json xml yaml cson toml"}],["meta",{"property":"og:description","content":"比较 json xml yaml cson toml 目录 比较 json xml yaml cson toml 参考： 翻译 https://linux.cn/article-10664-1.html 原文 https://www.zionandzion.com/json-vs-xml-vs-toml-vs-cson-vs-yaml/ 数据序列化格式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"比较 json xml yaml cson toml\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"比较 json xml yaml cson toml","slug":"比较-json-xml-yaml-cson-toml","link":"#比较-json-xml-yaml-cson-toml","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"比较 json xml yaml cson toml","slug":"比较-json-xml-yaml-cson-toml-1","link":"#比较-json-xml-yaml-cson-toml-1","children":[{"level":2,"title":"数据序列化格式（Standard Generalized Markup Language，SGML）","slug":"数据序列化格式-standard-generalized-markup-language-sgml","link":"#数据序列化格式-standard-generalized-markup-language-sgml","children":[{"level":3,"title":"两大类","slug":"两大类","link":"#两大类","children":[]},{"level":3,"title":"历史","slug":"历史","link":"#历史","children":[]}]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[{"level":3,"title":"XML：不行了","slug":"xml-不行了","link":"#xml-不行了","children":[]},{"level":3,"title":"JSON：并列聚会","slug":"json-并列聚会","link":"#json-并列聚会","children":[]},{"level":3,"title":"TOML：缩短到彻底的利他主义（似ini）","slug":"toml-缩短到彻底的利他主义-似ini","link":"#toml-缩短到彻底的利他主义-似ini","children":[]},{"level":3,"title":"CSON：特定系统所包含的简单样本","slug":"cson-特定系统所包含的简单样本","link":"#cson-特定系统所包含的简单样本","children":[]},{"level":3,"title":"YAML：年轻人的呼喊","slug":"yaml-年轻人的呼喊","link":"#yaml-年轻人的呼喊","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.1,"words":3031},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 管理层/02. 多文件多目录管理/辅助文件/比较 json xml yaml cson toml.md","excerpt":"\\n<h1>目录</h1>\\n<h1>比较 json xml yaml cson toml</h1>\\n<p>参考：</p>\\n<ul>\\n<li>翻译 https://linux.cn/article-10664-1.html\\n　　原文 https://www.zionandzion.com/json-vs-xml-vs-toml-vs-cson-vs-yaml/</li>\\n</ul>\\n<h2>数据序列化格式（Standard Generalized Markup Language，SGML）</h2>\\n<h3>两大类</h3>\\n<p>虽然<a href=\\"https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">数据序列化格式</a>多到可以埋葬哈利法塔，但它们大多分为两类：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 管理层/02. 多文件多目录管理/辅助文件/比较 json xml yaml cson toml.md","value":{"title":"比较 json xml yaml cson toml","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 管理层/02. 多文件多目录管理/辅助文件/比较 json xml yaml cson toml.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{J as comp,T as data};
