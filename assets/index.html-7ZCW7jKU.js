import{_ as l,c as e,e as p,o as i}from"./app-Dwsnbiv5.js";const r={};function a(d,t){return i(),e("div",null,t[0]||(t[0]=[p('<h1 id="capture" tabindex="-1"><a class="header-anchor" href="#capture"><span>Capture</span></a></h1><h2 id="抓包软件" tabindex="-1"><a class="header-anchor" href="#抓包软件"><span>抓包软件</span></a></h2><ul><li>Fiddler</li><li>HttpCanary小黄鸟</li><li>Wireshark</li></ul><h2 id="抓包格式" tabindex="-1"><a class="header-anchor" href="#抓包格式"><span>抓包格式</span></a></h2><ul><li>Pcap</li><li>Pcapng</li></ul><h2 id="底层实现" tabindex="-1"><a class="header-anchor" href="#底层实现"><span>底层实现</span></a></h2><p>抓包方式</p><ul><li>实际网卡抓包 - FPGA。CRC错误在网卡层就会被丢弃，抓CRC错包只能在这一层抓</li><li>绕开协议栈抓包 - wireshark、DPDK、eBPF</li><li>证书、协议抓包 - Fiddler</li></ul><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h2><p>(见PcapPlusPlus文档有一版相关介绍)</p><ul><li>DPDK</li><li>BPF</li><li>等</li></ul><h2 id="抓包-分析库" tabindex="-1"><a class="header-anchor" href="#抓包-分析库"><span>抓包/分析库</span></a></h2><h3 id="选型" tabindex="-1"><a class="header-anchor" href="#选型"><span>选型</span></a></h3><h4 id="不限语言" tabindex="-1"><a class="header-anchor" href="#不限语言"><span>不限语言</span></a></h4><p>（20240126）</p><ul><li>C/C++ <ul><li><strong>Libpcap</strong>: 这是最著名的PCAP库，支持C/C++。很多其他库都是基于libpcap构建的。尽管它的功能强大，但它的API并不是很易用。 <ul><li>https://github.com/the-tcpdump-group/libpcap，<strong>2.4k</strong></li><li>https://wiki.wireshark.org/libpcap，https://www.tcpdump.org/</li></ul></li><li><strong>PcapPlusPlus</strong>: PcapPlusPlus是一个多语言的网络分析和模拟框架。它提供了一些工具来生成和解析PCAP文件 <ul><li>https://github.com/seladb/PcapPlusPlus，<strong>2.5k</strong></li><li>https://pcapplusplus.github.io/docs/quickstart</li></ul></li></ul></li><li>Python <ul><li><strong>Scapy</strong>: Scapy是一个强大的Python库，可以生成、解析、发送和接收网络报文。Scapy 支持大量的协议，并且可以方便地添加新协议。 <ul><li>https://github.com/secdev/scapy，<strong>9.7k</strong></li><li>https://scapy.net/</li></ul></li><li><strong>Trex</strong>：使用的Scapy库 <ul><li>https://github.com/cisco-system-traffic-generator/trex-core，1.2k</li><li>https://trex-tgn.cisco.com/</li></ul></li><li><strong>Pypcap</strong><ul><li>基于<strong>libpcap C库</strong>，它让你能够使用Python更方便地使用libpcap</li><li>https://github.com/pynetwork/pypcap，295</li><li>下载：pip install pypcap，pypi地址：https://pypi.org/project/pypcap/</li></ul></li><li><strong>Dpkt</strong>: Dpkt是一个Python库，它可以解析和创建网络报文。与Scapy相比，Dpkt的API更加简洁 <ul><li>https://github.com/kbandla/dpkt，1k</li></ul></li></ul></li><li>可参考项目 <ul><li><strong>Json2Pcap</strong>: 一款用于将json数据转换为pcap文件的工具，其源码托管在Github上。</li><li><strong>Brimsec/zq</strong>: 这是一个用go编写的处理PCAP的开源工具，其中有一部分是将pcap转json，可以在此基础上修改为生成pcap。</li></ul></li></ul><h4 id="深度分析库" tabindex="-1"><a class="header-anchor" href="#深度分析库"><span>深度分析库</span></a></h4><p>这里的笔记主要是抓包不是分析，分析只是提一嘴。可以参考PcapPlusPlus文档，或者如果只是简单解析，一些pcap工具都能做。深度可以看nDPI这种深度分析工具</p><h4 id="比较-python库" tabindex="-1"><a class="header-anchor" href="#比较-python库"><span>比较 - Python库</span></a></h4><p>（20240126）</p><p>下表中的 &quot;Trex&quot; 不参与横向比较，以为他底层使用的Scapy，更像是Scapy的上层封装</p><table><thead><tr><th></th><th>Pypcap</th><th>Dpkt</th><th><strong>Scapy</strong></th><th><strong>(Trex)</strong></th></tr></thead><tbody><tr><td>难度</td><td>低</td><td>中</td><td>难</td><td></td></tr><tr><td>功能 - 捕获</td><td>✅</td><td>✅</td><td>✅</td><td></td></tr><tr><td>功能 - 解析</td><td>❌，需要配合Dpkt等解析</td><td>✅，支持大多数协议</td><td>✅，多协议，还可添加自定义</td><td></td></tr><tr><td>功能 - 创建</td><td>❌</td><td>✅</td><td>✅</td><td></td></tr><tr><td>功能 - 发送</td><td>❌</td><td>✅</td><td>✅</td><td></td></tr><tr><td>功能 - 其他</td><td>——</td><td>——</td><td>数据包的嗅探与注入、<br>网络扫描、路由跟踪等</td><td>总体性能测试，<br>支持有状态流量、模拟大并发</td></tr><tr><td>开源 - 是否</td><td>✅</td><td>✅</td><td>✅</td><td></td></tr><tr><td>开源 - Star</td><td>295</td><td>1k</td><td>9.7k</td><td>1.2k</td></tr><tr><td>开源 - 地址</td><td><a href="https://github.com/pynetwork/pypcap" target="_blank" rel="noopener noreferrer">地址</a></td><td><a href="https://github.com/kbandla/dpkt" target="_blank" rel="noopener noreferrer">地址</a></td><td><a href="https://github.com/secdev/scapy" target="_blank" rel="noopener noreferrer">地址</a></td><td><a href="https://github.com/cisco-system-traffic-generator/trex-core" target="_blank" rel="noopener noreferrer">地址</a></td></tr><tr><td>规模</td><td>小</td><td>中</td><td>大</td><td></td></tr><tr><td>实现</td><td>libpcap C库</td><td>不依赖于libpcap</td><td>可以选择是否使用libpcap</td><td></td></tr></tbody></table><p>Trex vs Scapy</p><p>Q：综合考虑下来，我选择使用Scapy作为json生成pcap的工具的开发。那 Trex 呢，他好像也是使用的Scapy库，那我使用Trex和使用Scapy有什么区别？</p><p>A：Trex和Scapy都是强大的网络包处理库，但它们的使用场景和功能有所不同。</p><ul><li><p>Scapy是一个Python库，主要用于解析和构造网络包，它具有强大的数据包解析和生成能力。Scapy可以解析大多数常见的网络协议，可以方便地创建和发送自定义的网络包。你可以使用Scapy进行各种网络测试和尝试，例如扫描网络、嗅探数据包、分析网络流量等。</p></li><li><p>Trex则是一款总体性能测试工具，它支持多种流量模式，包括stateful（有状态）和stateless（无状态）的流量模式。 在stateful模式下，Trex能够模拟大量并发的网络连接，发送复杂的网络流量。在stateless模式下，Trex提供了一个简单的API，可以方便地发送自定义的网络包。Trex还提供了丰富的统计和分析功能，可以详细地分析测试结果。</p></li><li><p>Trex底层使用Scapy构造数据包，因此Trex继承了Scapy的强大功能。</p><p>然而，如果你要进行大规模的网络性能测试，你可能会发现Scapy无法满足你的需求，因为Scapy的性能相对较低。这时候，你可能需要使用Trex这样的专业性能测试工具。如果你只需要解析和生成网络包，那么Scapy可能是更好的选择。</p></li></ul><p>总的来说，Scapy和Trex各有优势，你应该根据自己的具体需求来选择。</p><h4 id="比较-c库" tabindex="-1"><a class="header-anchor" href="#比较-c库"><span>比较 - C库</span></a></h4><p>如果用C库的话，应该就是PcapPlusPlus了，公司几个项目都是用的这个</p><h4 id="比较-python库-vs-cpp库" tabindex="-1"><a class="header-anchor" href="#比较-python库-vs-cpp库"><span>比较 - Python库 vs Cpp库</span></a></h4><p>这里重点比较的的是Python的Trex (with Scapy)库，和Cpp的PcapPlusPlus库</p><table><thead><tr><th></th><th>PcapPlusPlus</th><th>Scapy (+Trex)</th><th>Trex</th></tr></thead><tbody><tr><td>性能</td><td>高</td><td>相对较低</td><td>性能提高</td></tr><tr><td>开源 - 是否</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>开源 - Star</td><td>2.5k</td><td>9.7k</td><td>1.2k</td></tr><tr><td>开源 - 地址</td><td>https://github.com/seladb/PcapPlusPlus</td><td>https://github.com/secdev/scapy</td><td></td></tr><tr><td>官网地址</td><td>https://pcapplusplus.github.io/</td><td>https://scapy.net/</td><td></td></tr><tr><td>功能 - 有状态</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>开发与维护难度</td><td>稍低</td><td>高</td><td>高</td></tr></tbody></table><p>重点考虑的几个参数</p><ul><li>非主要考虑 <ul><li>性能：由于现在调研的目的是，做一个Pcap生成器，而非实时的网络报文解析和Pcap生成，性能要求不高，性能参数不列入考虑。</li><li>易于调用：另外也只是一个单独的工具，而非库，也不是主要的考虑因素</li></ul></li><li>主要考虑 <ul><li>开发维护 <ul><li>学习和开发成本上，这些库之前没接触过，Python肯定成本更低</li><li>Python库开发进度更快，也更好维护。特别是对于自定义协议的添加，可以给其他人做。如果选用C库，如PcapPlusPlus，这些可能就要自己写了</li><li>开发周期初步设定是两周以内（过年前），Python库更易于的deadline前完成该项目并使之可用。使用C库压力更大，主要是如果要去实现 &quot;有状态&quot; 模式，这会非常麻烦</li></ul></li><li>长远考虑 <ul><li>学习PcapPlusPlus可能更有利于公司其他项目的维护（因为目前有几个项目都使用的该库），长远来看可能也更好。</li><li>但Scapy库的通用性也不差，灵活性很大，社区规模也比PcapPlusPlus大</li></ul></li></ul></li></ul><p>总结双方优势</p><ul><li>Python Trex (with Scapy) <ul><li>开发周期短，维护容易</li><li>自定义协议的添加容易，可给别人做</li><li>灵活性更大</li><li>无需再次实现<strong>有状态</strong>模式，直接就有有状态模式的功能</li></ul></li><li>Cpp PcapPlusPlus <ul><li>易于协调公司的其他项目</li></ul></li></ul><p>最后我选择的是：Trex (with Scapy)</p>',37)]))}const s=l(r,[["render",a],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/Capture/","title":"Capture","lang":"zh-CN","frontmatter":{"description":"Capture 抓包软件 Fiddler HttpCanary小黄鸟 Wireshark 抓包格式 Pcap Pcapng 底层实现 抓包方式 实际网卡抓包 - FPGA。CRC错误在网卡层就会被丢弃，抓CRC错包只能在这一层抓 绕开协议栈抓包 - wireshark、DPDK、eBPF 证书、协议抓包 - Fiddler 环境 (见PcapPlusP...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/Capture/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Capture"}],["meta",{"property":"og:description","content":"Capture 抓包软件 Fiddler HttpCanary小黄鸟 Wireshark 抓包格式 Pcap Pcapng 底层实现 抓包方式 实际网卡抓包 - FPGA。CRC错误在网卡层就会被丢弃，抓CRC错包只能在这一层抓 绕开协议栈抓包 - wireshark、DPDK、eBPF 证书、协议抓包 - Fiddler 环境 (见PcapPlusP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Capture\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Capture","slug":"capture","link":"#capture","children":[{"level":2,"title":"抓包软件","slug":"抓包软件","link":"#抓包软件","children":[]},{"level":2,"title":"抓包格式","slug":"抓包格式","link":"#抓包格式","children":[]},{"level":2,"title":"底层实现","slug":"底层实现","link":"#底层实现","children":[]},{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[]},{"level":2,"title":"抓包/分析库","slug":"抓包-分析库","link":"#抓包-分析库","children":[{"level":3,"title":"选型","slug":"选型","link":"#选型","children":[{"level":4,"title":"不限语言","slug":"不限语言","link":"#不限语言","children":[]},{"level":4,"title":"深度分析库","slug":"深度分析库","link":"#深度分析库","children":[]},{"level":4,"title":"比较 - Python库","slug":"比较-python库","link":"#比较-python库","children":[]},{"level":4,"title":"比较 - C库","slug":"比较-c库","link":"#比较-c库","children":[]},{"level":4,"title":"比较 - Python库 vs Cpp库","slug":"比较-python库-vs-cpp库","link":"#比较-python库-vs-cpp库","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":5.34,"words":1602},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络工具/Capture/README.md","excerpt":"\\n<h2>抓包软件</h2>\\n<ul>\\n<li>Fiddler</li>\\n<li>HttpCanary小黄鸟</li>\\n<li>Wireshark</li>\\n</ul>\\n<h2>抓包格式</h2>\\n<ul>\\n<li>Pcap</li>\\n<li>Pcapng</li>\\n</ul>\\n<h2>底层实现</h2>\\n<p>抓包方式</p>\\n<ul>\\n<li>实际网卡抓包 - FPGA。CRC错误在网卡层就会被丢弃，抓CRC错包只能在这一层抓</li>\\n<li>绕开协议栈抓包 - wireshark、DPDK、eBPF</li>\\n<li>证书、协议抓包 - Fiddler</li>\\n</ul>\\n<h2>环境</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络工具/Capture/README.md","value":{"title":"网络工具/","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络工具/Capture/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,o as data};
