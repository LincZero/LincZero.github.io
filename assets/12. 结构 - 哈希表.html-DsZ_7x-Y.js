import{_ as s,e as a,g as l,o as e}from"./app-CuJixpuN.js";const n={};function t(h,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h2 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h2><h3 id="有序表与无序表" tabindex="-1"><a class="header-anchor" href="#有序表与无序表"><span>有序表与无序表</span></a></h3><p>类型</p><ul><li><p>C++</p><ul><li>map通常是红黑树</li><li>unOrderMap、unOrderSet 则是哈希表（Map是KeyValue对，Set是仅Key）</li></ul></li><li><p>Java</p><ul><li><p>HashSet、HashMap 哈希表</p><p>常用方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashMap</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapTest </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// put方法同时作为add和set</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;z&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>有序表和哈希表的区别</p><ul><li>有序表把key按照顺序组织起来，必须提供比较器</li><li>而哈希表完全不组织，不需要提供比较器</li><li>哈希表能实现的有序表都能实现，并且有序表还有额外功能</li></ul><h3 id="无序表-哈希表" tabindex="-1"><a class="header-anchor" href="#无序表-哈希表"><span>无序表 (哈希表)</span></a></h3><p>哈希表的简单介绍</p><ol><li>哈希表在使用层面上可以理解为一种集合结构</li><li>伴随数据 <ul><li>如果只有key，没有伴随数据value，可以使用 Java的HashSet结构 (C++的Un0rderedSet)</li><li>如果既有key，又有伴随数据value，可以使用 Java的HashMap结构 (C++的UnOrderedMap)</li><li>有无伴随数据，是HashMap和HashSet唯一的区别，底层的实际结构是一回事</li></ul></li><li>性能问题 <ul><li>使用哈希表 增(put)、删(remove)、改(put)、查(get) 的操作，可以认为时间复杂度为<strong>O(1)</strong>，但是常数时间比较大</li></ul></li><li>内存问题 <ul><li>放入哈希表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小</li><li>放入哈希表的东西，如果不是基础类型，内部按引用传递，内存占用是这个东西内存地址的大小</li></ul></li><li>底层实现 <ul><li>有关哈希表的原理，将在提升班“与哈希函数有关的数据结构”一章中讲叙原理</li><li>哈希表是有数组和链表组成的</li></ul></li></ol><h3 id="有序表" tabindex="-1"><a class="header-anchor" href="#有序表"><span>有序表</span></a></h3><p>有序表的简单介绍</p><ol><li>有序表在使用层面上可以理解为一种集合结构</li><li>伴随数据 <ul><li>如果只有key，没有伴随数据value，可以使用 Java的TreeSet结构 (C++的OrderedSet/Set)</li><li>如果既有key，又有伴随数据value，可以使用 Java的TreeMap结构 (C++的OrderedMap/Map)</li><li>有无伴随数据，是TreeSet和TreeMap唯一的区别，底层的实际结构是一回事</li></ul></li><li>性能问题 <ul><li>不管是什么底层具体实现，只要是有序表，都有以下固定的基本功能和固定的时间复杂度<strong>O(logN)</strong></li><li>put、remove、containsKey、get、firstKey、floorKey、ceilingKey</li></ul></li><li>内存问题 <ul><li>放入有序表的东西，如果是基础类型，内部按值传递，内存占用就是这个东西的大小</li><li>放入有序表的东西，如果不是基础类型，必须提供<strong>比较器</strong>，内部按引用传递，内存占用是这个东西内存地址的大小</li></ul></li><li>底层实现 <ul><li>下面这些都属于有序表结构，只是底层具体实现不同：</li><li>红黑树</li><li>AVL树</li><li>size-balance-tree (傻逼树)</li><li>跳表等</li></ul></li></ol>`,12)]))}const k=s(n,[["render",t],["__file","12. 结构 - 哈希表.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/12.%20%E7%BB%93%E6%9E%84%20-%20%E5%93%88%E5%B8%8C%E8%A1%A8.html","title":"12. 结构 - 哈希表","lang":"zh-CN","frontmatter":{"description":"哈希表 有序表与无序表 类型 C++ map通常是红黑树 unOrderMap、unOrderSet 则是哈希表（Map是KeyValue对，Set是仅Key） Java HashSet、HashMap 哈希表 常用方法： 有序表和哈希表的区别 有序表把key按照顺序组织起来，必须提供比较器 而哈希表完全不组织，不需要提供比较器 哈希表能实现的有序表都...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Program_Algorithm/%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B%20-%20%E5%B7%A6%E7%A8%8B%E4%BA%91/01.%20%E5%9F%BA%E7%A1%80%E7%8F%AD/12.%20%E7%BB%93%E6%9E%84%20-%20%E5%93%88%E5%B8%8C%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"哈希表 有序表与无序表 类型 C++ map通常是红黑树 unOrderMap、unOrderSet 则是哈希表（Map是KeyValue对，Set是仅Key） Java HashSet、HashMap 哈希表 常用方法： 有序表和哈希表的区别 有序表把key按照顺序组织起来，必须提供比较器 而哈希表完全不组织，不需要提供比较器 哈希表能实现的有序表都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.39,"words":718},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/12. 结构 - 哈希表.md","excerpt":"<h2>哈希表</h2>\\n<h3>有序表与无序表</h3>\\n<p>类型</p>\\n<ul>\\n<li>\\n<p>C++</p>\\n<ul>\\n<li>map通常是红黑树</li>\\n<li>unOrderMap、unOrderSet 则是哈希表（Map是KeyValue对，Set是仅Key）</li>\\n</ul>\\n</li>\\n<li>\\n<p>Java</p>\\n<ul>\\n<li>\\n<p>HashSet、HashMap 哈希表</p>\\n<p>常用方法：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">HashMap</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Integer</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> String</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#ABB2BF\\">&gt;</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> mapTest </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> HashMap</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// put方法同时作为add和set</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">mapTest</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">put</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"z\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">mapTest</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">put</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"c\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">mapTest</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">put</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"2\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">mapTest</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">remove</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/12. 结构 - 哈希表.md","value":{"title":"12. 结构 - 哈希表","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Program_Algorithm/通用算法/算法教程 - 左程云/01. 基础班/12. 结构 - 哈希表.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
