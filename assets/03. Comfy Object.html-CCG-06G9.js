import{_ as e,e as d,g as i,o}from"./app-OgO1lqgf.js";const a={};function s(n,t){return o(),d("div",null,t[0]||(t[0]=[i('<h1 id="comfy-object" tabindex="-1"><a class="header-anchor" href="#comfy-object"><span>Comfy Object</span></a></h1><h2 id="精简版图" tabindex="-1"><a class="header-anchor" href="#精简版图"><span>精简版图</span></a></h2><p>Comfy UI 建立在<a href="https://github.com/jagenjo/litegraph.js" target="_blank" rel="noopener noreferrer">LiteGraph</a>之上。Comfy 的大部分功能由 LiteGraph 提供，因此如果开发更复杂的节点，您可能会发现克隆该存储库并浏览文档会很有帮助，文档可在 找到<code>doc/index.html</code>。</p><h2 id="舒适应用" tabindex="-1"><a class="header-anchor" href="#舒适应用"><span>舒适应用</span></a></h2><p>该<code>app</code>对象（始终可通过 访问<code>import { app } from &quot;../../scripts/app.js&quot;;</code>）代表在浏览器中运行的 Comfy 应用程序，并包含许多有用的属性和功能，其中一些列在下面。</p><p><code>app</code>不建议劫持功能，因为 Comfy 正在不断开发中，核心行为可能会发生变化。</p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>包含的重要属性<code>app</code>（这不是详尽的列表）：</p><table><thead><tr><th>财产</th><th>内容</th></tr></thead><tbody><tr><td><code>canvas</code></td><td>一个 LGraphCanvas 对象，表示当前用户界面。它包含一些可能有趣的属性，例如<code>node_over</code>和<code>selected_nodes</code>。</td></tr><tr><td><code>canvasEl</code></td><td>DOM<code>&lt;canvas&gt;</code>元素</td></tr><tr><td><code>graph</code></td><td>对描述当前图表的 LGraph 对象的引用</td></tr><tr><td><code>runningNodeId</code></td><td>执行过程中，当前正在执行的节点</td></tr><tr><td><code>ui</code></td><td>提供对某些 UI 元素的访问，例如队列、菜单和对话框</td></tr></tbody></table><p><code>canvas</code>（对于图形元素）和<code>graph</code>（对于逻辑连接）可能是您最想要访问的。</p><h3 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h3><p>同样，还有很多。一些重要因素如下：</p><table><thead><tr><th>功能</th><th>笔记</th></tr></thead><tbody><tr><td>图形提示</td><td>将图表转换为可以发送到 Python 服务器的提示</td></tr><tr><td>加载图数据</td><td>加载图表</td></tr><tr><td>队列提示</td><td>向队列提交提示</td></tr><tr><td>注册扩展</td><td>你已经看到了这个 - 用于添加扩展</td></tr></tbody></table><h2 id="线性图" tabindex="-1"><a class="header-anchor" href="#线性图"><span>线性图</span></a></h2><p>该<code>LGraph</code>对象是 LiteGraph 框架的一部分，表示图形（节点和链接）的当前逻辑状态。如果您想要操作图形，LiteGraph 文档（如果<code>doc/index.html</code>您克隆，则位于<code>https://github.com/jagenjo/litegraph.js</code>）描述了您需要的功能。</p><p>您可以使用<code>graph</code>来获取节点和链接的详细信息，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ComfyNode_object_for_my_node</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_nodes_by_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">my_node_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">ComfyNode_object_for_my_node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">inputs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">input</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> link_id</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">link_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> LLink_object</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">graph</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">links</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">link_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> id_of_upstream_node</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> LLink_object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">origin_id</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // etc</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2><p>对象<code>LLink</code>可通过 访问<code>graph.links</code>，表示图中的单个链接，从节点<code>link.origin_id</code>输出槽<code>link.origin_slot</code> 到节点<code>link.target_id</code>槽<code>link.target_slot</code>。它还有一个表示数据类型的字符串，在<code>link.type</code>和 中<code>link.id</code>。</p><p><code>LLink</code>s 是在a (其为子类)<code>connect</code>的方法中创建的。<code>LGraphNode``ComfyNode</code></p><p>避免创建您自己的 LLink 对象 - 而是使用 LiteGraph 函数。</p><h2 id="comfynode" tabindex="-1"><a class="header-anchor" href="#comfynode"><span>ComfyNode</span></a></h2><p><code>ComfyNode</code>是 的一个子类<code>LGraphNode</code>，因此 LiteGraph 文档对于更通用的操作很有帮助。但是，Comfy 已显著扩展了 LiteGraph 核心行为，并且并未使用所有 LiteGraph 功能。</p><p>以下描述适用于普通节点。组节点、原始节点、注释和重定向节点具有不同的属性。</p><p>对象<code>ComfyNode</code>代表当前工作流中的一个节点。它具有许多您可能希望利用的重要属性，以及您可能希望使用或劫持以修改行为的大量函数。</p><p>为了更全面地了解节点对象，您可能会发现将以下代码插入扩展并在<code>console.log</code>命令上放置断点很有帮助。然后，当您创建新节点时，您可以使用您最喜欢的调试器来查询该节点。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nodeCreated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;nodeCreated&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特性-1" tabindex="-1"><a class="header-anchor" href="#特性-1"><span>特性</span></a></h3><table><thead><tr><th>财产</th><th>内容</th></tr></thead><tbody><tr><td><code>bgcolor</code></td><td>节点的背景颜色，或默认为未定义</td></tr><tr><td><code>comfyClass</code></td><td>表示节点的 Python 类</td></tr><tr><td><code>flags</code></td><td>可能包含与节点状态相关的标志的字典。特别<code>flags.collapsed</code>适用于折叠节点。</td></tr><tr><td><code>graph</code></td><td>对 LGraph 对象的引用</td></tr><tr><td><code>id</code></td><td>唯一 ID</td></tr><tr><td><code>input_type</code></td><td>输入类型列表（例如“STRING”、“MODEL”、“CLIP”等）。通常与 Python INPUT_TYPES 匹配</td></tr><tr><td><code>inputs</code></td><td>输入列表（如下所述）</td></tr><tr><td><code>mode</code></td><td>通常为 0，如果节点静音则设置为 2，如果节点被绕过则设置为 4。Comfy 不使用 1 和 3 的值</td></tr><tr><td><code>order</code></td><td>节点在执行顺序中的位置。<code>LGraph.computeExecutionOrder()</code>在提交提示时设置</td></tr><tr><td><code>pos</code></td><td>节点在画布上的 [x,y] 位置</td></tr><tr><td><code>properties</code></td><td><code>&quot;Node name for S&amp;R&quot;</code>包含LiteGraph 使用的字典</td></tr><tr><td><code>properties_info</code></td><td>中的条目类型和默认值<code>properties</code></td></tr><tr><td><code>size</code></td><td>节点在画布上的宽度和高度</td></tr><tr><td><code>title</code></td><td>显示标题</td></tr><tr><td><code>type</code></td><td>节点类的唯一名称（来自 Python）</td></tr><tr><td><code>widgets</code></td><td>小部件列表（如下所述）</td></tr><tr><td><code>widgets_values</code></td><td>小部件的当前值列表</td></tr></tbody></table><h3 id="功能-1" tabindex="-1"><a class="header-anchor" href="#功能-1"><span>功能</span></a></h3><p>函数数量非常多（上次我统计时有 85 个）。下面列出了部分函数。这些函数大部分都与 LiteGraph 核心代码没有经过修改。</p><h4 id="输入、输出、小部件" tabindex="-1"><a class="header-anchor" href="#输入、输出、小部件"><span>输入、输出、小部件</span></a></h4><table><thead><tr><th>功能</th><th>笔记</th></tr></thead><tbody><tr><td>输入/输出</td><td>大多数输出​​方法具有相同的名称：s/In/Out/</td></tr><tr><td><code>addInput</code></td><td>创建新的输入，定义名称和类型</td></tr><tr><td><code>addInputs</code></td><td>数组版本<code>addInput</code></td></tr><tr><td><code>findInputSlot</code></td><td>根据输入名称找到插槽索引</td></tr><tr><td><code>findInputSlotByType</code></td><td>查找与类型匹配的输入。首选或仅使用空闲插槽的选项</td></tr><tr><td><code>removeInput</code></td><td>按插槽索引</td></tr><tr><td><code>getInputNode</code></td><td>获取连接到此输入的节点。输出等效于<code>getOutputNodes</code>并返回一个列表</td></tr><tr><td><code>getInputLink</code></td><td>获取连接到此输入的 LLink。无等效输出</td></tr><tr><td>小部件</td><td></td></tr><tr><td><code>addWidget</code></td><td>添加标准 Comfy 小部件</td></tr><tr><td><code>addCustomWidget</code></td><td>添加自定义小部件（在<code>getComfyWidgets</code>钩子中定义）</td></tr><tr><td><code>addDOMWidget</code></td><td>添加由 DOM 元素定义的小部件</td></tr><tr><td><code>convertWidgetToInput</code></td><td>如果允许，将小部件转换为输入<code>isConvertableWidget</code>（在<code>widgetInputs.js</code>）</td></tr></tbody></table><h4 id="連接" tabindex="-1"><a class="header-anchor" href="#連接"><span>連接</span></a></h4><table><thead><tr><th>功能</th><th>笔记</th></tr></thead><tbody><tr><td><code>connect</code></td><td>将此节点的输出连接到另一个节点的输入</td></tr><tr><td><code>connectByType</code></td><td>通过指定类型将输出连接到另一个节点 - 连接到第一个可用的匹配插槽</td></tr><tr><td><code>connectByTypeOutput</code></td><td>按类型将输入连接到另一个节点输出</td></tr><tr><td><code>disconnectInput</code></td><td>删除输入中的任何链接（由名称或索引指定）</td></tr><tr><td><code>disconnectOutput</code></td><td>断开指定节点输入的输出</td></tr><tr><td><code>onConnectionChange</code></td><td>在每个节点上调用。<code>side==1</code>如果它是此节点上的输入</td></tr><tr><td><code>onConnectInput</code></td><td>_在_建立连接之前调用。如果返回<code>false</code>，则表示连接被拒绝</td></tr></tbody></table><h4 id="展示" tabindex="-1"><a class="header-anchor" href="#展示"><span>展示</span></a></h4><table><thead><tr><th>功能</th><th>笔记</th></tr></thead><tbody><tr><td><code>setDirtyCanvas</code></td><td>指定需要重新绘制前景（节点）和/或背景（链接和图像）</td></tr><tr><td><code>onDrawBackground</code></td><td>使用对象调用<code>CanvasRenderingContext2D</code>来绘制背景。Comfy 使用它来渲染图像</td></tr><tr><td><code>onDrawForeground</code></td><td>调用一个<code>CanvasRenderingContext2D</code>对象来绘制节点。</td></tr><tr><td><code>getTitle</code></td><td>要显示的标题。</td></tr><tr><td><code>collapse</code></td><td>切换节点的折叠状态。</td></tr></tbody></table><p><code>collapse</code>命名不当；它_会切换_折叠状态。它需要一个布尔参数，可用于覆盖 <code>node.collapsable === false</code>。</p><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h4><table><thead><tr><th>功能</th><th>笔记</th></tr></thead><tbody><tr><td><code>changeMode</code></td><td>用于将节点设置为绕过 ( <code>mode == 4</code>) 或不绕过 ( <code>mode == 0</code>)</td></tr></tbody></table><h2 id="输入和小部件" tabindex="-1"><a class="header-anchor" href="#输入和小部件"><span>输入和小部件</span></a></h2><p>输入和小部件代表了将数据输入到节点的两种方式。通常，小部件可以转换为输入，但并非所有输入都可以转换为小部件（因为许多数据类型无法通过 UI 元素输入）。</p><p><code>node.inputs</code>是当前输入的列表（节点左侧的彩色点），指定它们的<code>.name</code>、<code>.type</code>和（对连接的<code>.link</code>的引用）。<code>LLink``app.graph.links</code></p><p>如果输入是已转换的小部件，它还会保存对现在处于非活动状态的小部件的引用<code>.widget</code>。</p><p><code>node.widgets</code>是所有小部件的列表，无论它们是否已转换为输入。小部件具有：</p><table><thead><tr><th>属性/功能</th><th>笔记</th></tr></thead><tbody><tr><td><code>callback</code></td><td>当小部件值改变时调用的函数</td></tr><tr><td><code>last_y</code></td><td>小部件在节点中的垂直位置</td></tr><tr><td><code>name</code></td><td>（节点内唯一的）小部件名称</td></tr><tr><td><code>options</code></td><td>如 Python 代码中指定（例如默认值、最小值和最大值）</td></tr><tr><td><code>type</code></td><td>小部件类型的名称（见下文）小写</td></tr><tr><td><code>value</code></td><td>当前小部件值。这是一个具有<code>get</code>和<code>set</code>方法的属性。</td></tr></tbody></table><h3 id="小部件类型" tabindex="-1"><a class="header-anchor" href="#小部件类型"><span>小部件类型</span></a></h3><p><code>app.widgets</code>是当前已注册的小部件类型的字典，键入类型名称的大写版本。内置的 Comfy 小部件类型包括不言自明的<code>BOOLEAN</code>、<code>INT</code>和<code>FLOAT</code>，以及<code>STRING</code>（有两种形式，单行和多行）， <code>COMBO</code>用于从列表中进行下拉选择，以及<code>IMAGEUPLOAD</code>用于加载图像节点的。</p><p><code>getCustomWidgets</code>可以通过在扩展中提供方法来添加自定义小部件类型。</p><h3 id="链接的小工具" tabindex="-1"><a class="header-anchor" href="#链接的小工具"><span>链接的小工具</span></a></h3><p>小部件也可以链接 -例如<code>seed</code>和的内置行为。链接的小部件具有；因此可能具有 类型。<code>control_after_generate``.type = &#39;base_widget_type:base_widget_name&#39;``control_after_generate``int:seed</code></p><h2 id="迅速的" tabindex="-1"><a class="header-anchor" href="#迅速的"><span>迅速的</span></a></h2><p><code>Queue Prompt</code>当在 Comfy 中按下按钮时，<code>app.graphToPrompt()</code>会调用该方法将当前图形转换为可以发送到服务器的提示。</p><p><code>app.graphToPrompt``prompt</code>返回一个具有两个属性的对象（在此称为），<code>output</code>和<code>workflow</code>。</p><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><p><code>prompt.output</code>将图中每个节点的映射<code>node_id</code>到具有两个属性的对象。</p><ul><li><code>prompt.output[node_id].class_type</code>，自定义节点类的唯一名称，如 Python 代码中所定义</li><li><code>prompt.output[node_id].inputs</code>，它包含每个输入（或小部件）的值，作为从输入名称到以下内容的映射： <ul><li>如果是小部件，则为选定的值，或者</li><li>如果有链接连接到输入，则为包含（ <code>upstream_node_id</code>， ）的数组，或<code>upstream_node_output_slot</code></li><li>未定义，如果它是已转换为输入且未连接的小部件</li><li>其他未连接的输入不包括在<code>.inputs</code></li></ul></li></ul><p>请注意，<code>upstream_node_id</code>描述连接输入的数组表示为字符串，而不是整数。</p><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h3><p><code>prompt.workflow</code>包含以下属性：</p><ul><li><code>config</code>- 附加配置选项的词典（默认为空）</li><li><code>extra</code>- 包含有关工作流的额外信息的字典。默认情况下，它包含： <ul><li><code>extra.ds</code>- 描述图表的当前视图（<code>scale</code>和<code>offset</code>）</li></ul></li><li><code>groups</code>- 工作流程中的所有组</li><li><code>last_link_id</code>- 最后添加的链接的 id</li><li><code>last_node_id</code>- 最后添加的节点的 id</li><li><code>links</code>- 图中所有链接的列表。每个条目都是一个包含五个整数和一个字符串的数组： <ul><li>（<code>link_id</code>，，，，，）<code>upstream_node_id</code>​​​​<code>upstream_node_output_slot``downstream_node_id``downstream_node_input_slot``data type</code></li></ul></li><li><code>nodes</code><a href="https://docs.comfy.org/essentials/javascript_objects_and_hijacking#comfynode" target="_blank" rel="noopener noreferrer">- 图中所有节点的列表。每个条目都是如上所述</a>的节点属性子集的映射<a href="https://docs.comfy.org/essentials/javascript_objects_and_hijacking#comfynode" target="_blank" rel="noopener noreferrer"></a><ul><li>包含以下属性：<code>flags</code>，，，，，，，，，，​​​​​<code>id``inputs``mode``order``pos``properties``size``type``widgets_values</code></li><li>此外，除非节点没有输出，否则有一个<code>outputs</code>属性，它是该节点的输出列表，每个输出包含： <ul><li><code>name</code>- 输出的名称</li><li><code>type</code>- 输出的数据类型</li><li><code>links</code>- 此输出的所有链接的列表<code>link_id</code>（如果没有连接，则可能为空列表或为空），</li><li><code>shape</code>- 用于绘制输出的形状（默认为 3，表示一个点）</li><li><code>slot_index</code>- 输出的槽号</li></ul></li></ul></li><li><code>version</code>- LiteGraph 版本号（撰写本文时<code>0.4</code>）</li></ul><p><code>nodes.output</code>对于没有输出的节点来说不存在，而不是空列表。</p>',62)]))}const r=e(a,[["render",s],["__file","03. Comfy Object.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/03.%20Comfy%20Object.html","title":"Comfy Object","lang":"zh-CN","frontmatter":{"description":"Comfy Object 精简版图 Comfy UI 建立在LiteGraph之上。Comfy 的大部分功能由 LiteGraph 提供，因此如果开发更复杂的节点，您可能会发现克隆该存储库并浏览文档会很有帮助，文档可在 找到doc/index.html。 舒适应用 该app对象（始终可通过 访问import { app } from \\"../../sc...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/03.%20Comfy%20Object.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Comfy Object"}],["meta",{"property":"og:description","content":"Comfy Object 精简版图 Comfy UI 建立在LiteGraph之上。Comfy 的大部分功能由 LiteGraph 提供，因此如果开发更复杂的节点，您可能会发现克隆该存储库并浏览文档会很有帮助，文档可在 找到doc/index.html。 舒适应用 该app对象（始终可通过 访问import { app } from \\"../../sc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Comfy Object\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.43,"words":2530},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/03. Comfy Object.md","excerpt":"\\n<h2>精简版图</h2>\\n<p>Comfy UI 建立在<a href=\\"https://github.com/jagenjo/litegraph.js\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LiteGraph</a>之上。Comfy 的大部分功能由 LiteGraph 提供，因此如果开发更复杂的节点，您可能会发现克隆该存储库并浏览文档会很有帮助，文档可在 找到<code>doc/index.html</code>。</p>\\n<h2>舒适应用</h2>\\n<p>该<code>app</code>对象（始终可通过 访问<code>import { app } from \\"../../scripts/app.js\\";</code>）代表在浏览器中运行的 Comfy 应用程序，并包含许多有用的属性和功能，其中一些列在下面。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/03. Comfy Object.md","value":{"title":"03. Comfy Object","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/03. Comfy Object.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,p as data};
