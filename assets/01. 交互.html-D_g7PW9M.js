import{_ as e,c as l,e as t,o as d}from"./app-DQC9V0Al.js";const s={};function n(o,i){return d(),l("div",null,i[0]||(i[0]=[t(`<h1 id="交互" tabindex="-1"><a class="header-anchor" href="#交互"><span>交互</span></a></h1><p>C++语句类型</p><ul><li>声明语句</li><li>赋值语句</li><li>消息语句</li><li>函数调用</li><li>函数原型</li><li>返回语句</li></ul><h2 id="交互-1" tabindex="-1"><a class="header-anchor" href="#交互-1"><span>交互</span></a></h2><h3 id="控制台-i-o" tabindex="-1"><a class="header-anchor" href="#控制台-i-o"><span>控制台 I/O</span></a></h3><h4 id="概念、底层原理" tabindex="-1"><a class="header-anchor" href="#概念、底层原理"><span>概念、底层原理</span></a></h4><ul><li><p>头文件</p><ul><li>依赖于头文件<code>iostream</code></li><li>该头文件定义了处理输入的<code>istream类</code>和处理输出的<code>ostream类</code></li><li>该头文件声明了一个名为cout的ostream<strong>对象</strong>，和名为cin的istream<strong>对象</strong></li><li>该头文件的引用元素（cout、endl）使用名称空间<code>std</code></li></ul></li><li><p><code>&lt;&lt;</code>运算符</p><ul><li><p>可以使用运算符<code>&lt;&lt;</code>来显示各种类型的数据，依赖于运算符重载的原理</p></li><li><p>运算符重载：即一个符号可以有多种含义，这里的插入运算符<code>&lt;&lt;</code>和左移动运算符<code>&lt;&lt;</code>写法一样，程序通过上下文判断含义</p></li><li><p>非包裹形式：<code>&lt;&lt;</code>，表示该语句将字符串发送给<code>cout</code>（流动式，而非用<code>()</code>）</p></li></ul></li><li><p>换行</p><ul><li><code>endl</code>和<code>\\n</code>，均能换行，前者是控制符，后者是转移来的换行符</li></ul></li><li><p>窗口补充</p><ul><li>窗口环境不自动关闭：返回前加入<code>cin.get();</code></li></ul></li></ul><h4 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h4><ul><li>输出成员函数 <ul><li><code>cout &lt;&lt; &quot;&quot;</code>（本身）</li><li><code>cout.put()</code>，输出单个字符</li><li><code>cout.setf()</code>，清除小数的小数点后面的零</li></ul></li></ul><h4 id="输入" tabindex="-1"><a class="header-anchor" href="#输入"><span>输入</span></a></h4><ul><li><strong>cin的常用成员函数</strong><ul><li><code>cin &gt;&gt; 变量</code>（本身）</li><li><code>cin.get(name, arSize)</code></li><li><code>cin.getline(name, arSize)</code></li><li><code>cin.clear()</code></li><li><code>cin.eof()</code>、<code>cin.fail()</code></li></ul></li><li><strong>每次读取多少</strong>（cin的成员函数） <ul><li><p><code>cin</code><strong>面向单词输入</strong></p><ul><li>使用：<code>cin &gt;&gt; 变量</code>，使用空白（空格、制表符、换行符）确定字符串的结束位置，并<strong>丢弃空白</strong>、添加空字符</li><li>输入队列情况：连续读取的缺陷：空格只是结束、并不会结束输入阶段执行后面指令 在连续输入时，如果使用空格或制表符输入多个单词，这些单词会以此进入<code>输入队列</code> 即：如果上一个输入接受了多个单词，会以此让下个输入接受多余的单词 比如：第一次输入<code>Alistair Dreeb</code>，那么该次输入接受<code>Alistair</code>，下一个输入跳过输入阶段，直接接受<code>Dreeb</code></li></ul></li><li><p><code>cin.get</code><strong>面向行的输入</strong>（旧）</p><ul><li><p>使用：<code>cin.get(变量,arSize)</code>，使用换行符确定字符串的结束位置，但<mark>不丢弃</mark>换行符、在换行符之前添加空字符</p></li><li><p>输入队列情况：在输入完一行后，<code>输入队列</code>中会有一个换行符，如果接着输入则会接受一个 头部有换行符的字符串 解决方案：使用一个不带参数的get把<code>输入队列</code>中的换行符给处理掉，<code>cin.get()</code>，为下次输入做好准备</p></li></ul></li><li><p><code>cin.getline</code><strong>面向行的输入</strong>（新）</p><ul><li>使用：<code>cin.getline(变量,arSize)</code>，使用换行符确定字符串的结束位置，并<strong>丢弃换行符</strong>、并添加空字符</li><li>输入队列情况：无多余字符串残留</li></ul></li><li><p><strong><code>get</code>与<code>getline</code>区别</strong></p><ul><li><code>cin.getline(变量,arSize);</code>等价于<code>cin.get(变量,arSize);cin.get();</code>等价于<code>cin.get(name, ArSize).get();</code> （链式调用）</li><li>老版本并没有<code>getline()</code></li><li><code>get()</code>看起来麻烦，但检查错误更容易些，如：可以知道是否是因为遇到换行符才停止了读取，而非因为数组填满等原因</li></ul></li></ul></li><li><strong>其他问题</strong><ul><li><strong>赋值情况&amp;数组越界</strong>：结束标记字符不是必然的，在输入语句赋值给非字符串时会自动截断。举例： <ul><li><code>char ch; cin &gt;&gt; ch;</code>，输入字符不进行转换。当读入第一个字符后，停止该条输入语句，剩余字符进入输入队列</li><li><code>int n; cin &gt;&gt; n;</code>，输入字符会转换为数字。当遇到非数字字符后，停止该条输入语句，剩余字符进入输入队列</li><li><code>double x; cin &gt;&gt; x;</code>，输入字符自动转换为浮点。当遇到非浮点数字符后，停止该条输入语句，剩余字符进入输入队列</li><li><code>char s[50]; cin &gt;&gt; s;</code>，输入字符不进行转换。当遇到空白字符后，停止该条输入语句，剩余字符进入输入队列 当输入字符过长，停止该条输入语句，剩余字符进入输入队列</li><li><code>char s[50]; cin.getline(word,50);</code>，与上条基本相同 字符过长时该方法还会额外设置失效位（<em>failbit</em>）并关闭后面的输入</li></ul></li><li><strong>失效位的情况</strong>： <ul><li>空行问题：当<code>get()</code>读取空行后会设置失效位并阻断后面的输入</li><li>数组越界问题：当数组越界，<code>getline()</code>方法会设置失效位并阻断后面的输入</li><li>恢复手段：可以用<code>cin.clear()</code>恢复输入</li></ul></li></ul></li></ul><h4 id="输入输出-与c不同" tabindex="-1"><a class="header-anchor" href="#输入输出-与c不同"><span>输入输出（与C不同）</span></a></h4><p><strong>输入输出</strong>：</p><table><thead><tr><th>编程语言</th><th>C（弱类型）</th><th>C++（弱类型 - 强一点）</th><th>Python（强类型）</th><th>Java（强类型）</th></tr></thead><tbody><tr><td>输入</td><td><code>scanf(&quot;%d&quot;, &amp;var)</code><br><code>putchar()</code></td><td><code>cin &gt;&gt; var</code><br><code>cin.get(变量,arSize)</code><br><code>cin.getline(变量,arSize)</code></td><td><code>var=input()</code></td><td></td></tr><tr><td>保存方式</td><td>按格式保存</td><td>智能对象</td><td>string类型</td><td></td></tr><tr><td>——</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td></tr><tr><td>输出</td><td><code>printf(&quot;&quot;)</code><br><code>getchar()</code></td><td><code>cout &lt;&lt; &quot;&quot;</code>（智能对象）<br><code>cout.put()</code></td><td><code>print(&quot;&quot;)</code></td><td><code>System.out.println(“”)</code></td></tr><tr><td>库的依赖</td><td>依赖于标准库<code>&lt;stdio.h&gt;</code></td><td>依赖于库<code>&lt;iostream&gt;</code></td><td>使用内置函数</td><td></td></tr><tr><td>默认换行</td><td>否</td><td>否</td><td>是</td><td>是</td></tr><tr><td>智能转换</td><td>否，一般用格式化输出</td><td>是，<code>cout &lt;&lt; 1</code></td><td>是，<code>print(1)</code></td><td>是</td></tr><tr><td>字符拼接</td><td></td><td><code>cout &lt;&lt; &#39;1&#39; &#39;1&#39;</code></td><td>直接<code>+</code>就行</td><td>直接<code>+</code>就行</td></tr><tr><td>与数拼接</td><td><code>#include &lt;string.h&gt;</code><br><code>strcat(&#39;1&#39;,1);</code></td><td><code>cout &lt;&lt; &#39;1&#39; &lt;&lt; 1</code></td><td>直接<code>+</code>就行</td><td>直接<code>+</code>就行</td></tr></tbody></table><h3 id="文件-i-o" tabindex="-1"><a class="header-anchor" href="#文件-i-o"><span>文件 I/O</span></a></h3><h4 id="文件替代键盘输入-其实也是控制台-i-o" tabindex="-1"><a class="header-anchor" href="#文件替代键盘输入-其实也是控制台-i-o"><span>文件替代键盘输入（其实也是控制台 I/O）</span></a></h4><p><code>gofish &lt;fishtale</code>，这样程序将从fishtale文件（而非键盘）获取输入（<code>&lt;</code>是Unix和Windows命令提示符模式的重定向运算符）</p><h4 id="文件尾条件" tabindex="-1"><a class="header-anchor" href="#文件尾条件"><span>文件尾条件</span></a></h4><ul><li><p>检测文件尾（<em>EOF</em>）</p><ul><li>（通常EOF被SACII编码后为-1，也可以此来检测检测）</li><li>检测到EOF后，cin将<code>eofbit</code>和<code>failbit</code>都设置为1</li><li><code>cin.eof()</code>，可查看<code>eofbit</code>是否被设置，是则返回ture</li><li><code>cin.fail()</code>，可查看<code>failbit</code>或<code>eofbit</code>是否被设置，是则返回ture</li></ul></li><li><p>键盘可模拟文件尾条件：</p><ul><li>Unix：行首按下<code>Ctrl+D</code></li><li>Windows：任意位置按下<code>Ctrl+Z 和 Enter</code></li></ul></li><li><p>清除文件尾标记，使输入继续进行</p><ul><li>使用<code>cin.clear()</code></li></ul></li><li><p>常用做法</p><ul><li>一般不用<code>!cin.fail()</code>或<code>!cin.eof()</code>而用<code>cin.get(ch)</code>，后者可以检测其他失败原因（如磁盘故障）</li><li><code>while (cin.get(ch)) {}</code></li></ul></li><li><p><code>cin.get(ch)</code>与<code>ch=cin.get()</code>区别</p><ul><li><p>使用选择：前者可以使用链式调用，后者主要用于stdio.h转iostream时替换方便</p></li><li><table><thead><tr><th>属性</th><th><code>cin.get(ch)</code></th><th><code>ch=cin.get()</code></th></tr></thead><tbody><tr><td>传递输入字符的方式</td><td>赋值给ch</td><td>将函数返回值赋给ch</td></tr><tr><td>用于字符输入时函数的返回值</td><td>istream对象（执行bool转换后为true）</td><td>int类型的字符编码</td></tr><tr><td>到达EOF时函数的返回值</td><td>istream对象（执行bool转换后为false）</td><td>EOF</td></tr></tbody></table></li></ul></li></ul><h4 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h4><ul><li>头文件 <ul><li>依赖于头文件<code>fstream</code></li><li>头文件定义了处理输出的<code>ofstream类</code>和处理输入的<code>ifstream类</code></li><li>需要将文件和ofstream对象或ifstream对象关联起来。为此可以使用<code>open()</code>方法，并在使用后使用<code>close()</code>关闭</li><li>使用名称空间<code>std</code></li><li>ifstream也有<code>get()</code>、<code>getline()</code>、<code>eof()</code>、<code>fail()</code>等方法</li></ul></li><li><code>&lt;&lt;</code>运算符</li></ul><h4 id="输出-1" tabindex="-1"><a class="header-anchor" href="#输出-1"><span>输出</span></a></h4><ul><li><p>使用</p><ul><li><p>主要步骤：(1) 头文件，(2) 创建一个ofstream对象，(3) 将该ofstream对象与一个文件关联起来，(4) 就像使用cout那样使用ofstream对象 （与cout相比多了第2、3步）</p></li><li><p>demo：</p></li><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fstream&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ofstream fout;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不叫fout也行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  fout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fish.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 接受一个C-风格字符串作为参数（其可以是一个字面字符串，也可以是数组字符串）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  fout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;写入文件的内容&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  fout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使用完应当关闭（防止同时写入同一文件/防止中途文件路径改变的设计？）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="输入-1" tabindex="-1"><a class="header-anchor" href="#输入-1"><span>输入</span></a></h4><ul><li><p>使用</p><ul><li><p>demo：</p></li><li><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  #include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fstream&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ifstream fin;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 不叫fin也行</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  fin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fish.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  fin </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filename;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  fin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>可能需要的检查</p><ul><li>文件可能不存在或权限不足打不开，使用<code>ifstream对象.is_open()</code>判断，若文件打开成功则返回true （写在open()语句的后面） （较老编译器不支持则使用<code>good()</code>来代替）</li><li>读取文件不应超过EOF，使用<code>eof()</code>判断</li><li>可能遇到类型不匹配的情况，使用<code>fail()</code>判断（EOF时也返回true）</li><li>文件受损或硬件故障，使用<code>bad()</code>或<code>good()</code>判断</li></ul></li></ul>`,25)]))}const a=e(s,[["render",n],["__file","01. 交互.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/03.%20%E4%BA%A4%E4%BA%92/01.%20%E4%BA%A4%E4%BA%92.html","title":"交互","lang":"zh-CN","frontmatter":{"description":"交互 C++语句类型 声明语句 赋值语句 消息语句 函数调用 函数原型 返回语句 交互 控制台 I/O 概念、底层原理 头文件 依赖于头文件iostream 该头文件定义了处理输入的istream类和处理输出的ostream类 该头文件声明了一个名为cout的ostream对象，和名为cin的istream对象 该头文件的引用元素（cout、endl）...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/03.%20%E4%BA%A4%E4%BA%92/01.%20%E4%BA%A4%E4%BA%92.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"交互"}],["meta",{"property":"og:description","content":"交互 C++语句类型 声明语句 赋值语句 消息语句 函数调用 函数原型 返回语句 交互 控制台 I/O 概念、底层原理 头文件 依赖于头文件iostream 该头文件定义了处理输入的istream类和处理输出的ostream类 该头文件声明了一个名为cout的ostream对象，和名为cin的istream对象 该头文件的引用元素（cout、endl）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"交互\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"交互","slug":"交互","link":"#交互","children":[{"level":2,"title":"交互","slug":"交互-1","link":"#交互-1","children":[{"level":3,"title":"控制台 I/O","slug":"控制台-i-o","link":"#控制台-i-o","children":[{"level":4,"title":"概念、底层原理","slug":"概念、底层原理","link":"#概念、底层原理","children":[]},{"level":4,"title":"输出","slug":"输出","link":"#输出","children":[]},{"level":4,"title":"输入","slug":"输入","link":"#输入","children":[]},{"level":4,"title":"输入输出（与C不同）","slug":"输入输出-与c不同","link":"#输入输出-与c不同","children":[]}]},{"level":3,"title":"文件 I/O","slug":"文件-i-o","link":"#文件-i-o","children":[{"level":4,"title":"文件替代键盘输入（其实也是控制台 I/O）","slug":"文件替代键盘输入-其实也是控制台-i-o","link":"#文件替代键盘输入-其实也是控制台-i-o","children":[]},{"level":4,"title":"文件尾条件","slug":"文件尾条件","link":"#文件尾条件","children":[]},{"level":4,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":4,"title":"输出","slug":"输出-1","link":"#输出-1","children":[]},{"level":4,"title":"输入","slug":"输入-1","link":"#输入-1","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":6.68,"words":2005},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/03. 交互/01. 交互.md","excerpt":"\\n<p>C++语句类型</p>\\n<ul>\\n<li>声明语句</li>\\n<li>赋值语句</li>\\n<li>消息语句</li>\\n<li>函数调用</li>\\n<li>函数原型</li>\\n<li>返回语句</li>\\n</ul>\\n<h2>交互</h2>\\n<h3>控制台 I/O</h3>\\n<h4>概念、底层原理</h4>\\n<ul>\\n<li>\\n<p>头文件</p>\\n<ul>\\n<li>依赖于头文件<code>iostream</code></li>\\n<li>该头文件定义了处理输入的<code>istream类</code>和处理输出的<code>ostream类</code></li>\\n<li>该头文件声明了一个名为cout的ostream<strong>对象</strong>，和名为cin的istream<strong>对象</strong></li>\\n<li>该头文件的引用元素（cout、endl）使用名称空间<code>std</code></li>\\n</ul>\\n</li>\\n<li>\\n<p><code>&lt;&lt;</code>运算符</p>\\n<ul>\\n<li>\\n<p>可以使用运算符<code>&lt;&lt;</code>来显示各种类型的数据，依赖于运算符重载的原理</p>\\n</li>\\n<li>\\n<p>运算符重载：即一个符号可以有多种含义，这里的插入运算符<code>&lt;&lt;</code>和左移动运算符<code>&lt;&lt;</code>写法一样，程序通过上下文判断含义</p>\\n</li>\\n<li>\\n<p>非包裹形式：<code>&lt;&lt;</code>，表示该语句将字符串发送给<code>cout</code>（流动式，而非用<code>()</code>）</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>换行</p>\\n<ul>\\n<li><code>endl</code>和<code>\\\\n</code>，均能换行，前者是控制符，后者是转移来的换行符</li>\\n</ul>\\n</li>\\n<li>\\n<p>窗口补充</p>\\n<ul>\\n<li>窗口环境不自动关闭：返回前加入<code>cin.get();</code></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/03. 交互/01. 交互.md","value":{"title":"01. 交互","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/03. 交互/01. 交互.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,r as data};
