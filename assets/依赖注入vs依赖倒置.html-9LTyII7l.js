import{_ as n,e as o,g as i,o as t}from"./app-BapqMaOt.js";const l={};function p(c,e){return t(),o("div",null,e[0]||(e[0]=[i('<h1 id="依赖导致vs依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖导致vs依赖注入"><span>依赖导致vs依赖注入</span></a></h1><p>详细介绍 &quot;依赖注入&quot;（Dependency Injection）的设计模式</p><p>&quot;依赖注入&quot;（Dependency Injection）是一种实现控制反转（Inversion of Control，简称 IoC）的设计模式，主要用于解耦合软件组件之间的依赖关系。通过依赖注入，一个类可以从外部获取其依赖对象，而不是自己创建。这样可以使代码更加灵活，更易于测试和维护。</p><p>依赖注入的主要概念如下：</p><ol><li>依赖：在面向对象编程中，一个类可能依赖于其他类的对象。例如，一个类可能需要数据库连接或服务来执行其功能。这些其他类的实例就是该类的依赖。</li><li>注入：注入是指将依赖传递给依赖它的类的过程。这通常通过构造函数注入、属性注入或方法注入来实现。</li><li>依赖注入容器：这是一个负责创建对象和管理依赖关系的工具，也称为IoC容器。在请求对象时，容器负责注入所有必要的依赖。</li></ol><p>依赖注入有几个主要的优点：</p><ul><li>解耦：依赖注入降低了类之间的耦合度，使得代码更加模块化。当一个类的依赖改变时，不需要修改这个类的代码。</li><li>可测试性：依赖注入使得单元测试变得更容易，因为你可以通过注入模拟的依赖来测试类的行为。</li><li>可配置性：通过改变依赖的配置，可以在运行时改变程序的行为，而无需修改代码。</li></ul><p>要注意的是，虽然依赖注入带来了很多好处，但也有可能导致过度工程化，使代码变得复杂和难以理解。因此，在决定是否使用依赖注入时，需要对项目的需求和复杂性进行权衡。</p><p>这和 “依赖倒置” 是一个意思吧</p><p>虽然 &quot;依赖注入&quot;（Dependency Injection）和 &quot;依赖倒置&quot;（Dependency Inversion）在名称上很相似，且都是为了减少代码间的耦合，但它们实际上是两个不同的概念。</p><ol><li><p>**依赖倒置原则（Dependency Inversion Principle，DIP）<strong>是面向对象设计的</strong>五大基本原则（SOLID）**之一，它的主要思想是：</p><ul><li>高层模块不应该依赖于低层模块，两者都应该依赖于抽象。</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ul><p>这个原则的主要目标是降低类之间的耦合度，使得高层模块不直接依赖于低层模块的具体实现，从而使得系统更易于扩展和维护。</p></li><li><p>**依赖注入（Dependency Injection）<strong>是一种实现</strong>控制反转（Inversion of Control, IoC）**的设计模式，用于解耦合类和其依赖项之间的关系。通过依赖注入，可以将依赖项从外部传递给类，而不是由类自己创建，这使得代码更加灵活，更易于测试和维护。</p></li></ol><p>总的来说，依赖倒置原则是一种设计原则，指导我们如何构建灵活、可扩展的系统，而依赖注入是一种设计模式，提供了一种实现这种原则的具体方法。</p><p>五大基本原则（SOLID）是什么</p><p>SOLID 是面向对象编程和设计的五个基本原则的首字母缩写，这些原则有助于构建更易于理解、维护和扩展的系统。以下是这五个原则的详细解释：</p><ol><li>单一职责原则（Single Responsibility Principle, SRP）：一个类应该只有一个引起变化的原因。简单来说，这意味着一个类应该只负责一项职责。</li><li>开放封闭原则（Open-Closed Principle, OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改封闭。这意味着应该能够在不修改已有代码的情况下，增加新的功能。</li><li>里氏替换原则（Liskov Substitution Principle, LSP）：如果 S 是 T 的子类型，那么在不改变程序正确性的前提下，任何使用 T 的地方都可以使用 S 替换。简单来说，子类型必须能够替换它们的基类型。</li><li>接口隔离原则（Interface Segregation Principle, ISP）：客户端不应该依赖于它不使用的接口，或者说，一个类对另一个类的依赖应该建立在最小的接口上。</li><li>依赖倒置原则（Dependency Inversion Principle, DIP）：高层模块不应该依赖于低层模块，两者都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</li></ol><p>这些原则提供了一种处理类与类之间关系的方法，使得系统更易于管理和维护。遵循这些原则可以帮助我们避免在设计和开发过程中出现的一些常见问题。</p>',16)]))}const r=n(l,[["render",p],["__file","依赖注入vs依赖倒置.html.vue"]]),a=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5vs%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE.html","title":"依赖导致vs依赖注入","lang":"zh-CN","frontmatter":{"description":"依赖导致vs依赖注入 详细介绍 \\"依赖注入\\"（Dependency Injection）的设计模式 \\"依赖注入\\"（Dependency Injection）是一种实现控制反转（Inversion of Control，简称 IoC）的设计模式，主要用于解耦合软件组件之间的依赖关系。通过依赖注入，一个类可以从外部获取其依赖对象，而不是自己创建。这样可以使...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5vs%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"依赖导致vs依赖注入"}],["meta",{"property":"og:description","content":"依赖导致vs依赖注入 详细介绍 \\"依赖注入\\"（Dependency Injection）的设计模式 \\"依赖注入\\"（Dependency Injection）是一种实现控制反转（Inversion of Control，简称 IoC）的设计模式，主要用于解耦合软件组件之间的依赖关系。通过依赖注入，一个类可以从外部获取其依赖对象，而不是自己创建。这样可以使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"依赖导致vs依赖注入\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.17,"words":1252},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/依赖注入vs依赖倒置.md","excerpt":"\\n<p>详细介绍 \\"依赖注入\\"（Dependency Injection）的设计模式</p>\\n<p>\\"依赖注入\\"（Dependency Injection）是一种实现控制反转（Inversion of Control，简称  IoC）的设计模式，主要用于解耦合软件组件之间的依赖关系。通过依赖注入，一个类可以从外部获取其依赖对象，而不是自己创建。这样可以使代码更加灵活，更易于测试和维护。</p>\\n<p>依赖注入的主要概念如下：</p>\\n<ol>\\n<li>依赖：在面向对象编程中，一个类可能依赖于其他类的对象。例如，一个类可能需要数据库连接或服务来执行其功能。这些其他类的实例就是该类的依赖。</li>\\n<li>注入：注入是指将依赖传递给依赖它的类的过程。这通常通过构造函数注入、属性注入或方法注入来实现。</li>\\n<li>依赖注入容器：这是一个负责创建对象和管理依赖关系的工具，也称为IoC容器。在请求对象时，容器负责注入所有必要的依赖。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/依赖注入vs依赖倒置.md","value":{"title":"依赖注入vs依赖倒置","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/依赖注入vs依赖倒置.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,a as data};
