import{_ as r,c as t,e as a,o as n}from"./app-BDGujT_T.js";const l={};function o(p,e){return n(),t("div",null,e[0]||(e[0]=[a('<h1 id="渐进式" tabindex="-1"><a class="header-anchor" href="#渐进式"><span>渐进式</span></a></h1><h2 id="渐进式介绍" tabindex="-1"><a class="header-anchor" href="#渐进式介绍"><span>渐进式介绍</span></a></h2><p>参考：引用vue官网的对于<a href="https://cn.vuejs.org/guide/introduction.html#the-progressive-framework" target="_blank" rel="noopener noreferrer">渐进式框架</a>的描述：</p><p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 Web Components 嵌入</li><li>单页应用 (SPA)</li><li>全栈 / 服务端渲染 (SSR)</li><li>Jamstack / 静态站点生成 (SSG)</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><p>如果你是初学者，可能会觉得这些概念有些复杂。别担心！理解教程和指南的内容只需要具备基础的 HTML 和 JavaScript 知识。即使你不是这些方面的专家，也能够跟得上。</p><p>如果你是有经验的开发者，希望了解如何以最合适的方式在项目中引入 Vue，或者是对上述的这些概念感到好奇，我们在<a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue.html" target="_blank" rel="noopener noreferrer">使用 Vue 的多种方式</a>中讨论了有关它们的更多细节。</p><p>无论再怎么灵活，Vue 的核心知识在所有这些用例中都是通用的。即使你现在只是一个初学者，随着你的不断成长，到未来有能力实现更复杂的项目时，这一路上获得的知识依然会适用。如果你已经是一个老手，你可以根据实际场景来选择使用 Vue 的最佳方式，在各种场景下都可以保持同样的开发效率。这就是为什么我们将 Vue 称为“渐进式框架”：它是一个可以与你共同成长、适应你不同需求的框架。</p><h2 id="渐进式-vue框架" tabindex="-1"><a class="header-anchor" href="#渐进式-vue框架"><span>渐进式 - Vue框架</span></a></h2><p>参考：vue官网对于其渐进式的使用方法，<a href="https://cn.vuejs.org/guide/extras/ways-of-using-vue" target="_blank" rel="noopener noreferrer">使用 Vue 的多种方式</a></p><p>我们相信在 Web 的世界里没有一种方案可以解决所有问题。正因如此，Vue 被设计成一个灵活的、可以渐进式集成的框架。根据使用场景的不同需要，相应地有多种不同的方式来使用 Vue，以此在技术栈复杂度、开发体验和性能表现间取得最佳平衡。</p><h3 id="独立脚本" tabindex="-1"><a class="header-anchor" href="#独立脚本"><span>独立脚本</span></a></h3><p>Vue 可以以一个单独 JS 文件的形式使用，<strong>无需构建步骤</strong>！如果你的后端框架已经渲染了大部分的 HTML，或者你的前端逻辑并不复杂，不需要构建步骤，这是最简单的使用 Vue 的方式。在这些场景中你可以将 Vue 看作一个更加声明式的 jQuery 替代品。</p><p>Vue 也提供了另一个更适用于此类无构建步骤场景的版本 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener noreferrer">petite-vue</a>。它为渐进式增强已有的 HTML 作了特别的优化，功能更加精简，十分轻量。</p><h3 id="作为-web-component-嵌入" tabindex="-1"><a class="header-anchor" href="#作为-web-component-嵌入"><span>作为 Web Component 嵌入</span></a></h3><p>你可以用 Vue 来<a href="https://cn.vuejs.org/guide/extras/web-components.html" target="_blank" rel="noopener noreferrer">构建标准的 Web Component</a>，这些 Web Component 可以嵌入到任何 HTML 页面中，无论它们是如何被渲染的。这个方式让你能够在不需要顾虑最终使用场景的情况下使用 Vue：因为生成的 Web Component <strong>可以嵌入到旧应用、静态 HTML，甚至用其他框架构建的应用中</strong>。</p><h3 id="单页面应用-spa" tabindex="-1"><a class="header-anchor" href="#单页面应用-spa"><span>单页面应用 (SPA)</span></a></h3><p>一些应用在前端需要具有丰富的交互性、较深的会话和复杂的状态逻辑。构建这类应用的最佳方法是使用这样一种架构：Vue 不仅控制整个页面，还负责处理抓取新数据，并在无需重新加载的前提下处理页面切换。这种类型的应用通常称为单页应用 (Single-Page application，缩写为 SPA)。</p><p>Vue 提供了核心功能库和<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html" target="_blank" rel="noopener noreferrer">全面的工具链支持</a>，为现代 SPA 提供了极佳的开发体验，覆盖以下方面：</p><ul><li>客户端路由</li><li>极其快速的构建工具</li><li>IDE 支持</li><li>浏览器开发工具</li><li>TypeScript 支持</li><li>测试工具</li></ul><p>SPA 一般要求后端提供 API 数据接口，但你也可以将 Vue 和如 <a href="https://inertiajs.com" target="_blank" rel="noopener noreferrer">Inertia.js</a> 之类的解决方案搭配使用，在保留侧重服务端的开发模型的同时获得 SPA 的益处。</p><h3 id="全栈-ssr" tabindex="-1"><a class="header-anchor" href="#全栈-ssr"><span>全栈 / SSR</span></a></h3><p>纯客户端的 SPA 在首屏加载和 SEO 方面有显著的问题，因为浏览器会收到一个巨大的 HTML 空页面，只有等到 JavaScript 加载完毕才会渲染出内容。</p><p>Vue 提供了一系列 API，支持将一个 Vue 应用在服务端渲染成 HTML 字符串。这能让服务器直接返回渲染好的 HTML，让用户在 JavaScript 下载完毕前就看到页面内容。Vue 之后会在客户端对应用进行“激活 (hydrate)”使其重获可交互性。这被称为<a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noopener noreferrer">服务端渲染 (SSR)</a>，它能够极大地改善应用在 Web 核心指标上的性能表现，如<a href="https://web.dev/lcp/" target="_blank" rel="noopener noreferrer">最大内容绘制 (LCP)</a>。</p><p>Vue 生态中有一些针对此类场景的、基于 Vue 的上层框架，比如 <a href="https://nuxt.com/" target="_blank" rel="noopener noreferrer">NuxtJS</a>，能让你用 Vue 和 JavaScript 开发一个全栈应用。</p><h3 id="jamstack-ssg" tabindex="-1"><a class="header-anchor" href="#jamstack-ssg"><span>JAMStack / SSG</span></a></h3><p>如果所需的数据是静态的，那么服务端渲染可以提前完成。这意味着我们可以将整个应用预渲染为 HTML，并将其作为静态文件部署。这增强了站点的性能表现，也使部署变得更容易，因为我们无需根据请求动态地渲染页面。Vue 仍可通过激活在客户端提供交互。这一技术通常被称为静态站点生成 (SSG)，也被称为 <a href="https://jamstack.org/what-is-jamstack/" target="_blank" rel="noopener noreferrer">JAMStack</a>。</p><p>SSG 有两种风格：单页和多页。这两种风格都能将站点预渲染为静态 HTML，区别在于：</p><ul><li>单页 SSG 在初始页面加载后将其“激活”为 SPA。这需要更多的前期 JS 加载和激活成本，但后续的导航将更快，因为它只需要部分地更新页面内容，而无需重新加载整个页面。</li><li>多页 SSG 每次导航都会加载一个新页面。好处是它可以仅需最少的 JS——或者如果页面无需交互则根本不需要 JS！一些多页面 SSG 框架，如 <a href="https://astro.build/" target="_blank" rel="noopener noreferrer">Astro</a> 也支持“部分激活”——它允许你通过 Vue 组件在静态 HTML 中创建交互式的“孤岛”。</li></ul><p>单页 SSG 更适合于重交互、深会话的场景，或需要在导航之间持久化元素或状态。否则，多页 SSG 将是更好的选择。</p><p>Vue 团队也维护了一个名为 <a href="https://vitepress.dev/" target="_blank" rel="noopener noreferrer">VitePress</a> 的静态站点生成器，你正在阅读的文档就是基于它构建的！VitePress 支持两种形式的 SSG。另外，<a href="https://nuxt.com/" target="_blank" rel="noopener noreferrer">NuxtJS</a> 也支持 SSG。你甚至可以在同一个 Nuxt 应用中通过不同的路由提供 SSR 和 SSG。</p><h3 id="web-之外" tabindex="-1"><a class="header-anchor" href="#web-之外"><span>Web 之外...</span></a></h3><p>尽管 Vue 主要是为构建 Web 应用而设计的，但它绝不仅仅局限于浏览器。你还可以：</p><ul><li>配合 <a href="https://www.electronjs.org/" target="_blank" rel="noopener noreferrer">Electron</a> 构建桌面应用</li><li>配合 <a href="https://ionicframework.com/docs/vue/overview" target="_blank" rel="noopener noreferrer">Ionic Vue</a> 构建移动端应用</li><li>使用 <a href="https://quasar.dev/" target="_blank" rel="noopener noreferrer">Quasar</a> 或 <a href="https://tauri.app" target="_blank" rel="noopener noreferrer">Tauri</a> 用同一套代码同时开发桌面端和移动端应用</li><li>使用 <a href="https://tresjs.org/" target="_blank" rel="noopener noreferrer">TresJS</a> 构建 3D WebGL 体验</li><li>使用 Vue 的<a href="https://cn.vuejs.org/api/custom-renderer.html" target="_blank" rel="noopener noreferrer">自定义渲染 API</a> 来构建自定义渲染器，比如针对<a href="https://github.com/vue-terminal/vue-termui" target="_blank" rel="noopener noreferrer">终端命令行</a>的！</li></ul>',34)]))}const s=r(l,[["render",o],["__file","渐进式.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%B8%8E%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%93%E9%A2%98/%E6%B8%90%E8%BF%9B%E5%BC%8F.html","title":"渐进式","lang":"zh-CN","frontmatter":{"description":"渐进式 渐进式介绍 参考：引用vue官网的对于渐进式框架的描述： Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%B8%8E%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%93%E9%A2%98/%E6%B8%90%E8%BF%9B%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"渐进式"}],["meta",{"property":"og:description","content":"渐进式 渐进式介绍 参考：引用vue官网的对于渐进式框架的描述： Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"渐进式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"渐进式","slug":"渐进式","link":"#渐进式","children":[{"level":2,"title":"渐进式介绍","slug":"渐进式介绍","link":"#渐进式介绍","children":[]},{"level":2,"title":"渐进式 - Vue框架","slug":"渐进式-vue框架","link":"#渐进式-vue框架","children":[{"level":3,"title":"独立脚本","slug":"独立脚本","link":"#独立脚本","children":[]},{"level":3,"title":"作为 Web Component 嵌入","slug":"作为-web-component-嵌入","link":"#作为-web-component-嵌入","children":[]},{"level":3,"title":"单页面应用 (SPA)","slug":"单页面应用-spa","link":"#单页面应用-spa","children":[]},{"level":3,"title":"全栈 / SSR","slug":"全栈-ssr","link":"#全栈-ssr","children":[]},{"level":3,"title":"JAMStack / SSG","slug":"jamstack-ssg","link":"#jamstack-ssg","children":[]},{"level":3,"title":"Web 之外...","slug":"web-之外","link":"#web-之外","children":[]}]}]}],"git":{},"readingTime":{"minutes":6.58,"words":1973},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/渐进式.md","excerpt":"\\n<h2>渐进式介绍</h2>\\n<p>参考：引用vue官网的对于<a href=\\"https://cn.vuejs.org/guide/introduction.html#the-progressive-framework\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">渐进式框架</a>的描述：</p>\\n<p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/渐进式.md","value":{"title":"渐进式","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/渐进式.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,h as data};
