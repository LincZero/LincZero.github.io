import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,a as n,b as s,d as e,e as t}from"./app-Cs_Fi1_3.js";const l="/assets/8d23364ba0bb6a421fdb2463fafdf85d-PzwHJyT8.png",r="/assets/d0166438c2173c795475b2a8282fb8a3-_DujUwSa.png",u="/assets/e553b77a6374d7d5dfbbee8c49de2758-JINEyjr9.png",d="/assets/f600e0129583c567050f6c4c8c09cf58-iAhDWAFB.png",k="/assets/ab25de52aa47968a39b8b3080ea4e440-EmBY161E.png",m="/assets/cb212740a44a65eea0c6dd2f1edc1d95-D7adpCVx.png",h="/assets/a59a53ce683328d9ecc8c1e9b986daa1-ClwmjPXN.png",b="/assets/e8f53c98fe0c2673727cb3108dd2e74c-Co62bald.png",v="/assets/ccd55331587573b09f5a0797a05de36c-DFf7TbLT.png",g="/assets/b88dee52d6b702e6b81ad2c6e8e767b2-Ccq3ETFk.png",f="/assets/690188ffbab5faf05d6cd32a7002e1fd-DRtNtS-I.png",_="/assets/662d02547ca0ec565d8391c526c0c60b-x5HF0RKv.png",w="/assets/10ae5a6f26cb2c3de2b3e19d028e657d-DWLbbvNx.png",y="/assets/d9a36fabc9c3308d3134dae3a2d4354d-aF3i3EOG.png",x="/assets/1409f64232b38957f8a09dadcd70b3db-DzBcsJxv.png",E={},q=n("h1",{id:"markdown-it-原理解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown-it-原理解析"},[n("span",null,"markdown-it 原理解析")])],-1),A=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),z={href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer"},M=n("blockquote",null,[n("p",null,"Markdown parser done right. Fast and easy to extend."),n("p",null,"Markdown 解析器。快速，易于扩展。")],-1),T=n("p",null,"其演示地址为：https://markdown-it.github.io/",-1),B=n("p",null,"markdown-it具有以下几个优势：",-1),D={href:"http://spec.commonmark.org/",target:"_blank",rel:"noopener noreferrer"},F=n("li",null,"可配置语法，你可以添加新的规则或者替换掉现有的规则",-1),C=n("li",null,"快",-1),N=n("li",null,"默认安全",-1),P={href:"https://www.npmjs.com/search?q=keywords:markdown-it-plugin",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.npmjs.com/search?q=keywords:markdown-it",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> <span class="token function">install</span> markdown-it <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 经典方式</span>
<span class="token comment">// node.js, &quot;classic&quot; way: </span>
<span class="token keyword">var</span> MarkdownIt <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    md <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MarkdownIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;# markdown-it rulezz!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 非AMD的浏览器环境</span>
<span class="token comment">// browser without AMD, added to &quot;window&quot; on script load</span>
<span class="token comment">// Note, there is no dash in &quot;markdownit&quot;.</span>
<span class="token keyword">var</span> md <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">markdownit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;# markdown-it rulezz!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析"><span>源码解析</span></a></h2><p>#源码</p>`,7),I=n("code",null,"markdown-it",-1),S={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/index.js",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ...</span>
<span class="token keyword">var</span> Renderer     <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./renderer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ParserCore   <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./parser_core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ParserBlock  <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./parser_block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ParserInline <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./parser_inline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MarkdownIt</span><span class="token punctuation">(</span>presetName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>inline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserInline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>core <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Renderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// (1) 过程一，Parse，将 Markdown 文件 Parse 为 Tokens</span>
MarkdownIt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">parse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>src<span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">State</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> state<span class="token punctuation">.</span>tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// (2) 过程二，Render，遍历 Tokens 生成 HTML</span>
MarkdownIt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>src<span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  env <span class="token operator">=</span> env <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 <code>render</code>方法中也可以看出，其渲染分为两个过程：</p><ol><li>Parse：将 Markdown 文件 Parse 为 Tokens</li><li>Render：遍历 Tokens 生成 HTML</li></ol><p>跟 Babel 很像，不过 Babel 是转换为抽象语法树（AST），而 <code>markdown-it</code> 没有选择使用 AST，主要是为了遵循 <strong>KISS (Keep It Simple, Stupid)</strong> 原则。</p><blockquote><p>说一下这个原则：</p><p>Keep it simple, stupid (KISS) 是一个设计原则，它表明<em>设计和系统应该尽可能简单</em>。 在任何可能的情况下，系统都应该避免复杂性，因为简单性保证了最大程度的用户接受和交互。</p></blockquote><h2 id="tokens-标记流" tabindex="-1"><a class="header-anchor" href="#tokens-标记流"><span>Tokens 标记流</span></a></h2>`,6),j={href:"https://markdown-it.github.io/",target:"_blank",rel:"noopener noreferrer"},H=t('<p>（演示页面的右侧标签栏有 html、source、debug 三个选项，分别是 html展示、html源码、TokensStream结构）</p><figure><img src="'+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看出 <code># header</code>生成的 Token 格式为（注：这里为了展示方便，简化了）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;heading_open&quot;</span>,
    <span class="token string">&quot;tag&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;h1&quot;</span>
  <span class="token punctuation">}</span>,
  <span class="token punctuation">{</span>
    <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;inline&quot;</span>,
    <span class="token string">&quot;tag&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
    <span class="token string">&quot;children&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;text&quot;</span>,
        <span class="token string">&quot;tag&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
        <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;header&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>,
  <span class="token punctuation">{</span>
    <span class="token string">&quot;type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;heading_close&quot;</span>,
    <span class="token string">&quot;tag&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;h1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),W={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/token.js",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>通过这个简单的 Tokens 示例也可以看出 Tokens 和 AST 的区别：</p><ol><li>Tokens 只是一个简单的数组</li><li>起始标签和闭合标签是分开的</li></ol><h2 id="parse-解析" tabindex="-1"><a class="header-anchor" href="#parse-解析"><span>Parse 解析</span></a></h2><p>查看 parse 方法相关的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// ...</span>
<span class="token keyword">var</span> ParserCore   <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./parser_core&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MarkdownIt</span><span class="token punctuation">(</span>presetName<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>core <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParserCore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

MarkdownIt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">parse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>src<span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">State</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>core<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> state<span class="token punctuation">.</span>tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其具体执行的代码，应该是写在了<code>./parse_core</code> 里，查看下 <code>parse_core.js</code> 的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> _rules <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;normalize&#39;</span><span class="token punctuation">,</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/normalize&#39;</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">,</span>          <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/block&#39;</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;inline&#39;</span><span class="token punctuation">,</span>         <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/inline&#39;</span><span class="token punctuation">)</span>         <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;linkify&#39;</span><span class="token punctuation">,</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/linkify&#39;</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;replacements&#39;</span><span class="token punctuation">,</span>   <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/replacements&#39;</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;smartquotes&#39;</span><span class="token punctuation">,</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_core/smartquotes&#39;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

Core<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">process</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> rules<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，Parse 过程默认有 <strong>6 条规则</strong>，其主要作用分别是：</p><h3 id="_1-normalize-正规化抹平各端差异" tabindex="-1"><a class="header-anchor" href="#_1-normalize-正规化抹平各端差异"><span>(1) normalize，正规化抹平各端差异</span></a></h3><p>在 CSS 中，我们使用 <code>normalize.css</code> 抹平各端差异，这里也是一样的逻辑，我们查看 normalize 的代码，其实很简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// https://spec.commonmark.org/0.29/#line-ending</span>
<span class="token keyword">var</span> <span class="token constant">NEWLINES_RE</span>  <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r\\n?|\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">NULL_RE</span>      <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\0</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>


module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">normalize</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> str<span class="token punctuation">;</span>

  <span class="token comment">// Normalize newlines</span>
  str <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">NEWLINES_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Replace NULL characters</span>
  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">NULL_RE</span><span class="token punctuation">,</span> <span class="token string">&#39;\\uFFFD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  state<span class="token punctuation">.</span>src <span class="token operator">=</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="换行符-normalize" tabindex="-1"><a class="header-anchor" href="#换行符-normalize"><span>换行符 normalize</span></a></h4><p>我们知道 <code>\\n</code>是匹配一个换行符，<code>\\r</code>是匹配一个回车符，那这里为什么要将 <code>\\r\\n</code>替换成 <code>\\n</code> 呢?</p>`,13),K={href:"https://www.ruanyifeng.com/blog/2006/04/post_213.html",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"\\r\\n",-1),V=n("blockquote",null,[n("p",null,"在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。"),n("p",null,'于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做"回车"，告诉打字机把打印头定位在左边界；另一个叫做"换行"，告诉打字机把纸向下移一行。'),n("p",null,'这就是"换行"和"回车"的来历，从它们的英语名字上也可以看出一二。'),n("p",null,"后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。"),n("p",null,'Unix系统里，每行结尾只有"<换行>"，即"\\n"；Windows系统里面，每行结尾是"<回车><换行>"，即"\\r\\n"；Mac系统里，每行结尾是"<回车>"。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。')],-1),O=n("code",null,"\\r\\n",-1),Z=n("code",null,"\\n",-1),X={href:"https://spec.commonmark.org/0.29/#line-ending",target:"_blank",rel:"noopener noreferrer"},Y=n("blockquote",null,[n("p",null,"A line ending is a newline (U+000A), a carriage return (U+000D) not followed by a newline, or a carriage return and a following newline.")],-1),Q=n("p",null,"其中 U+000A 表示换行(LF) ，U+000D 表示回车(CR) 。",-1),$=n("h4",{id:"空字符-normalize",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#空字符-normalize"},[n("span",null,"空字符 normalize")])],-1),nn={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-null",target:"_blank",rel:"noopener noreferrer"},sn=n("code",null,"\\0",-1),an={href:"https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},en=n("blockquote",null,[n("p",null,"空字符（Null character）又称结束符，缩写 NUL，是一个数值为 0 的控制字符。"),n("p",null,"在许多字符编码中都包括空字符，包括ISO/IEC 646（ASCII）、C0控制码、通用字符集、Unicode和EBCDIC等，几乎所有主流的编程语言都包括有空字符"),n("p",null,"这个字符原来的意思类似NOP指令，当送到列表机或终端时，设备不需作任何的动作（不过有些设备会错误的打印或显示一个空白）。")],-1),tn=n("p",null,[s("而我们将空字符替换为 "),n("code",null,"\\uFFFD"),s("，在 Unicode 中，"),n("code",null,"\\uFFFD"),s("表示替换字符：")],-1),on=n("figure",null,[n("img",{src:r,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),pn={href:"https://spec.commonmark.org/0.30/#insecure-characters",target:"_blank",rel:"noopener noreferrer"},cn=t(`<blockquote><p>For security reasons, the Unicode character U+0000 must be replaced with the REPLACEMENT CHARACTER (U+FFFD).</p></blockquote><p>我们测试下这个效果：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\u0000bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;p&gt;foo\\uFFFDbar&lt;/p&gt;\\n&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如下，你会发现原本不可见的<strong>空字符</strong>被替换成<strong>替换字符</strong>后，展示了出来：</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-block-块" tabindex="-1"><a class="header-anchor" href="#_2-block-块"><span>(2) block，块</span></a></h3>',6),ln={href:"https://spec.commonmark.org/0.30/#blocks-and-inlines",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://spec.commonmark.org/0.30/#blocks",target:"_blank",rel:"noopener noreferrer"},un={href:"https://spec.commonmark.org/0.30/#inline",target:"_blank",rel:"noopener noreferrer"},dn=n("p",null,"翻译一下就是：",-1),kn=n("p",null,"我们认为文档是由一组 blocks 组成，结构化的元素类似于段落、引用、列表、标题、代码区块等。一些 blocks （像引用和列表）可以包含其他 blocks，其他的一些 blocks（像标题和段落）则可以包含 inline 内容，比如文字、链接、 强调文字、图片、代码片段等等。",-1),mn=n("h4",{id:"全部",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#全部"},[n("span",null,"全部")])],-1),hn=n("code",null,"markdown-it",-1),bn={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},vn=t('<figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>关于这些规则我挑几个不常见的说明一下:</p><h4 id="code-缩进代码块" tabindex="-1"><a class="header-anchor" href="#code-缩进代码块"><span>code，缩进代码块</span></a></h4><p><code>code</code> 规则用于识别 <code>Indented code blocks</code> (4 spaces padded)，在 markdown 中：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="fence-围栏代码块" tabindex="-1"><a class="header-anchor" href="#fence-围栏代码块"><span>fence，围栏代码块</span></a></h4><p><code>fence</code> 规则用于识别 <code>Fenced code blocks</code>，在markdown 中：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="hr-换行" tabindex="-1"><a class="header-anchor" href="#hr-换行"><span>hr，换行</span></a></h4><p><code>hr</code> 规则用于识别换行，在 markdown 中：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="reference-参考链接" tabindex="-1"><a class="header-anchor" href="#reference-参考链接"><span>reference，参考链接</span></a></h4><p><code>reference</code> 规则用于识别 <code>reference links</code>，在 markdown 中：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="html-block-html元素标签" tabindex="-1"><a class="header-anchor" href="#html-block-html元素标签"><span>html_block，HTML元素标签</span></a></h4><p><code>html_block</code> 用于识别 markdown 中的 HTML block 元素标签，就比如<code>div</code>。</p><h4 id="lheading-下划线标题" tabindex="-1"><a class="header-anchor" href="#lheading-下划线标题"><span>lheading，下划线标题</span></a></h4><p><code>lheading</code> 用于识别 <code>Setext headings</code>，在 markdown 中：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-inline-内联样式" tabindex="-1"><a class="header-anchor" href="#_3-inline-内联样式"><span>(3) inline，内联样式</span></a></h3><h4 id="全部-1" tabindex="-1"><a class="header-anchor" href="#全部-1"><span>全部</span></a></h4>',21),gn={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_inline.js",target:"_blank",rel:"noopener noreferrer"},fn=t('<figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>关于这些规则我挑几个不常见的说明一下:</p><h4 id="newline-识别-n" tabindex="-1"><a class="header-anchor" href="#newline-识别-n"><span>newline，识别 <code>\\n</code></span></a></h4><p><code>newline</code>规则用于识别 <code>\\n</code>，将 <code>\\n</code> 替换为一个 hardbreak 类型的 token</p><h4 id="backticks-识别反引号" tabindex="-1"><a class="header-anchor" href="#backticks-识别反引号"><span>backticks，识别反引号</span></a></h4><p><code>backticks</code> 规则用于识别反引号：</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="entity-识别html转义" tabindex="-1"><a class="header-anchor" href="#entity-识别html转义"><span>entity，识别HTML转义</span></a></h4><p><code>entity</code> 规则用于处理 HTML entity，比如 <code>{``¯``&quot;</code>等：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-linkify-自动识别链接" tabindex="-1"><a class="header-anchor" href="#_4-linkify-自动识别链接"><span>(4) linkify，自动识别链接</span></a></h3><p>自动识别链接</p><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_5-replacements-字符替换" tabindex="-1"><a class="header-anchor" href="#_5-replacements-字符替换"><span>(5) replacements，字符替换</span></a></h3><p>将 <code>(c)`` (C)</code> 替换成 <code>©</code>，将 <code>????????</code> 替换成 <code>???</code>，将 <code>!!!!!</code> 替换成 <code>!!!</code>，诸如此类：</p><figure><img src="'+y+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_6-smartquotes-智能引号" tabindex="-1"><a class="header-anchor" href="#_6-smartquotes-智能引号"><span>(6) smartquotes，智能引号</span></a></h3><p>为了方便印刷，对直引号做了处理：</p><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="render-渲染" tabindex="-1"><a class="header-anchor" href="#render-渲染"><span>Render，渲染</span></a></h2>',20),_n={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js",target:"_blank",rel:"noopener noreferrer"},wn=t(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>default_rules<span class="token punctuation">.</span>code_inline
default_rules<span class="token punctuation">.</span>code_block
default_rules<span class="token punctuation">.</span>fence
default_rules<span class="token punctuation">.</span>image
default_rules<span class="token punctuation">.</span>hardbreak
default_rules<span class="token punctuation">.</span>softbreak
default_rules<span class="token punctuation">.</span>text
default_rules<span class="token punctuation">.</span>html_block
default_rules<span class="token punctuation">.</span>html_inline    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这些名字也是 token 的 type，在遍历 token 的时候根据 token 的 type 对应这里的 rules 进行执行，我们看下 code_inline 规则的内容，其实非常简单：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>default_rules<span class="token punctuation">.</span><span class="token function-variable function">code_inline</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> slf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span>  <span class="token string">&#39;&lt;code&#39;</span> <span class="token operator">+</span> slf<span class="token punctuation">.</span><span class="token function">renderAttrs</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;&gt;&#39;</span> <span class="token operator">+</span>
          <span class="token function">escapeHtml</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token operator">+</span>
          <span class="token string">&#39;&lt;/code&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-rules" tabindex="-1"><a class="header-anchor" href="#自定义-rules"><span>自定义 Rules</span></a></h2><p>至此，我们对 markdown-it 的渲染原理进行了简单的了解，无论是 Parse 还是 Render 过程中的 Rules，markdown-it 都提供了方法可以自定义这些 Rules，这些也是写 markdown-it 插件的关键，这些后续我们会讲到。</p>`,5);function yn(xn,En){const a=p("ExternalLinkIcon");return i(),c("div",null,[q,A,n("p",null,[s("引用 "),n("a",z,[s("markdown-it Github 仓库"),e(a)]),s(" 的介绍：")]),M,T,B,n("ul",null,[n("li",null,[s("遵循 "),n("a",D,[s("CommonMark spec"),e(a)]),s(" 并且添加了语法拓展和语法糖（如URL 自动识别，针对印刷做了特殊处理）")]),F,C,N,n("li",null,[s("社区有很多的 "),n("a",P,[s("插件"),e(a)]),s(" 或者 "),n("a",L,[s("其他包"),e(a)])])]),R,n("p",null,[s("我们查看 "),I,s(" 的"),n("a",S,[s("入口代码"),e(a)]),s("，可以发现其代码逻辑清晰明了：")]),U,n("p",null,[s("那 Tokens 长什么样呢？我们不妨在"),n("a",j,[s("演示页面"),e(a)]),s("中尝试一下：")]),H,n("p",null,[s("具体 Token 里的字段含义可以查看 "),n("a",W,[s("Token Class"),e(a)]),s("。")]),G,n("p",null,[s("我们可以在阮一峰老师的这篇 "),n("a",K,[s("《回车与换行》"),e(a)]),s("中找到"),J,s("出现的历史：")]),V,n("p",null,[s("之所以将 "),O,s("替换成 "),Z,s("其实是"),n("a",X,[s("遵循规范"),e(a)]),s("：")]),Y,Q,$,n("p",null,[s("除了替换回车符外，源码里还替换了空字符，在"),n("a",nn,[s("正则"),e(a)]),s("中，"),sn,s("表示匹配 NULL（U+0000）字符，根据 "),n("a",an,[s("WIKI"),e(a)]),s(" 的解释：")]),en,tn,on,n("p",null,[s("之所以进行这个替换，其实也是遵循规范，我们查阅 "),n("a",pn,[s("CommonMark spec 2.3 章节"),e(a)]),s("：")]),cn,n("p",null,[s("block 这个规则的作用就是找出 block，生成 tokens，那什么是 block？什么是 inline 呢？我们也可以在 "),n("a",ln,[s("CommonMark spec 中的 Blocks and inlines 章节"),e(a)]),s(" 找到答案：")]),n("blockquote",null,[n("p",null,[s("We can think of a document as a sequence of "),n("a",rn,[s("blocks"),e(a)]),s("—structural elements like paragraphs, block quotations, lists, headings, rules, and code blocks. Some blocks (like block quotes and list items) contain other blocks; others (like headings and paragraphs) contain "),n("a",un,[s("inline"),e(a)]),s(" content—text, links, emphasized text, images, code spans, and so on.")])]),dn,kn,mn,n("p",null,[s("当然在 "),hn,s(" 中，哪些会识别成 blocks，可以查看 "),n("a",bn,[s("parser_block.js"),e(a)]),s("，这里同样定义了一些识别和 parse 的规则：")]),vn,n("p",null,[s("inline 规则的作用则是解析 markdown 中的 inline，然后生成 tokens，之所以 block 先执行，是因为 block 可以包含 inline ，解析的规则可以查看 "),n("a",gn,[s("parser_inline.js"),e(a)]),s("：")]),fn,n("p",null,[s("Render 过程其实就比较简单了，查看 "),n("a",_n,[s("renderer.js"),e(a)]),s(" 文件，可以看到内置了一些默认的渲染 rules：")]),wn])}const zn=o(E,[["render",yn],["__file","15. markdown-it原理解析.html.vue"]]),Mn=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/15.%20markdown-it%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","title":"markdown-it 原理解析","lang":"zh-CN","frontmatter":{"description":"markdown-it 原理解析 介绍 引用 markdown-it Github 仓库 的介绍： Markdown parser done right. Fast and easy to extend. Markdown 解析器。快速，易于扩展。 其演示地址为：https://markdown-it.github.io/ markdown-it具有以...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/15.%20markdown-it%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"markdown-it 原理解析"}],["meta",{"property":"og:description","content":"markdown-it 原理解析 介绍 引用 markdown-it Github 仓库 的介绍： Markdown parser done right. Fast and easy to extend. Markdown 解析器。快速，易于扩展。 其演示地址为：https://markdown-it.github.io/ markdown-it具有以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"markdown-it 原理解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"markdown-it 原理解析","slug":"markdown-it-原理解析","link":"#markdown-it-原理解析","children":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"源码解析","slug":"源码解析","link":"#源码解析","children":[]},{"level":2,"title":"Tokens 标记流","slug":"tokens-标记流","link":"#tokens-标记流","children":[]},{"level":2,"title":"Parse 解析","slug":"parse-解析","link":"#parse-解析","children":[{"level":3,"title":"(1) normalize，正规化抹平各端差异","slug":"_1-normalize-正规化抹平各端差异","link":"#_1-normalize-正规化抹平各端差异","children":[{"level":4,"title":"换行符 normalize","slug":"换行符-normalize","link":"#换行符-normalize","children":[]},{"level":4,"title":"空字符 normalize","slug":"空字符-normalize","link":"#空字符-normalize","children":[]}]},{"level":3,"title":"(2) block，块","slug":"_2-block-块","link":"#_2-block-块","children":[{"level":4,"title":"全部","slug":"全部","link":"#全部","children":[]},{"level":4,"title":"code，缩进代码块","slug":"code-缩进代码块","link":"#code-缩进代码块","children":[]},{"level":4,"title":"fence，围栏代码块","slug":"fence-围栏代码块","link":"#fence-围栏代码块","children":[]},{"level":4,"title":"hr，换行","slug":"hr-换行","link":"#hr-换行","children":[]},{"level":4,"title":"reference，参考链接","slug":"reference-参考链接","link":"#reference-参考链接","children":[]},{"level":4,"title":"html_block，HTML元素标签","slug":"html-block-html元素标签","link":"#html-block-html元素标签","children":[]},{"level":4,"title":"lheading，下划线标题","slug":"lheading-下划线标题","link":"#lheading-下划线标题","children":[]}]},{"level":3,"title":"(3) inline，内联样式","slug":"_3-inline-内联样式","link":"#_3-inline-内联样式","children":[{"level":4,"title":"全部","slug":"全部-1","link":"#全部-1","children":[]},{"level":4,"title":"newline，识别 \\\\n","slug":"newline-识别-n","link":"#newline-识别-n","children":[]},{"level":4,"title":"backticks，识别反引号","slug":"backticks-识别反引号","link":"#backticks-识别反引号","children":[]},{"level":4,"title":"entity，识别HTML转义","slug":"entity-识别html转义","link":"#entity-识别html转义","children":[]}]},{"level":3,"title":"(4) linkify，自动识别链接","slug":"_4-linkify-自动识别链接","link":"#_4-linkify-自动识别链接","children":[]},{"level":3,"title":"(5) replacements，字符替换","slug":"_5-replacements-字符替换","link":"#_5-replacements-字符替换","children":[]},{"level":3,"title":"(6) smartquotes，智能引号","slug":"_6-smartquotes-智能引号","link":"#_6-smartquotes-智能引号","children":[]}]},{"level":2,"title":"Render，渲染","slug":"render-渲染","link":"#render-渲染","children":[]},{"level":2,"title":"自定义 Rules","slug":"自定义-rules","link":"#自定义-rules","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.6,"words":2581},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/15. markdown-it原理解析.md","excerpt":"\\n<h2>介绍</h2>\\n<p>引用 <a href=\\"https://github.com/markdown-it/markdown-it\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">markdown-it Github 仓库</a> 的介绍：</p>\\n<blockquote>\\n<p>Markdown parser done right. Fast and easy to extend.</p>\\n<p>Markdown 解析器。快速，易于扩展。</p>\\n</blockquote>\\n<p>其演示地址为：https://markdown-it.github.io/</p>","autoDesc":true}');export{zn as comp,Mn as data};
