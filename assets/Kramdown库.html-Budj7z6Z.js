import{_ as r,e as a,g as n,o as t}from"./app-OgO1lqgf.js";const o={};function l(h,e){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="kramdown" tabindex="-1"><a class="header-anchor" href="#kramdown"><span>kramdown</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="kramdown-1" tabindex="-1"><a class="header-anchor" href="#kramdown-1"><span>kramdown</span></a></h1><p>参考</p><ul><li><a href="https://kramdown.gettalong.org/" target="_blank" rel="noopener noreferrer">官网</a></li><li><a href="https://kramdown.gettalong.org/documentation.html" target="_blank" rel="noopener noreferrer">官网文档</a></li></ul><p><a href="https://kramdown.gettalong.org/" target="_blank" rel="noopener noreferrer">官网介绍</a></p><blockquote><p><strong>kramdown</strong> （原文如此，不是 Kramdown 或 KramDown，只是 kramdown）<br> 是一个 <em>免费</em> <a href="https://github.com/gettalong/kramdown/blob/master/COPYING" target="_blank" rel="noopener noreferrer">的MIT </a>许可 <a href="http://www.ruby-lang.org" target="_blank" rel="noopener noreferrer">Ruby </a> 用于解析和转换 Markdown 超集的 <mark>库</mark>。 这是 完全用 Ruby 编写，支持标准的 Markdown（有一些小的修改）和各种 由 <a href="http://michelf.com/projects/php-markdown/extra/" target="_blank" rel="noopener noreferrer">PHP Markdown Extra </a>包和 <a href="http://maruku.rubyforge.org" target="_blank" rel="noopener noreferrer">Maruku </a>流行的扩展。</p><p>它可能是可用的最快的纯 Ruby Markdown 转换器（2019 年 1 月），比 <a href="http://maruku.rubyforge.org" target="_blank" rel="noopener noreferrer">Maruku </a>快约为 3 倍，比 <a href="http://ruby.morphball.net/bluefeather/index_en.html" target="_blank" rel="noopener noreferrer">BlueFeather </a>快 6.2 倍。</p></blockquote><h2 id="kramdown-关键概念" tabindex="-1"><a class="header-anchor" href="#kramdown-关键概念"><span>Kramdown 关键概念</span></a></h2><p>参考：<a href="https://www.jianshu.com/p/8f59420fd866" target="_blank" rel="noopener noreferrer">【简书】Kramdown 关键概念</a></p><p>kramdown元素分为 <strong>Block-level Elements</strong>（块级元素） 和 <strong>Span-Level Elements</strong>（内联/段落元素）</p><p><strong>Block-level Elements</strong> 包括</p><ul><li>Paragraphs，段落</li><li>Headers，头</li><li>Blockquotes，引用块</li><li>Code Blocks，代码块</li><li>Horizontal Rules</li><li>Lists，列表</li><li>Definition Lists</li><li>Tables，表格</li><li>其它</li></ul><p><strong>Span-Level Elements</strong> 包括</p><ul><li>Emphasis</li><li>Links and Images，链接和图片</li><li>Inline Code，内联代码</li><li>Footnotes</li><li>Abbreviations</li></ul><h2 id="kramdown-介绍" tabindex="-1"><a class="header-anchor" href="#kramdown-介绍"><span>Kramdown 介绍</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>kramdown 首先是一个库，用于将以 Markdown 超集编写的文本转换为 HTML。 然而，由于其模块化架构，它能够支持额外的输入和输出 格式。 目前支持以下输入输出格式：</p><ul><li>输入： <a href="https://kramdown.gettalong.org/parser/kramdown.html" target="_blank" rel="noopener noreferrer"> kramdown </a> （Markdown 的超集）， <a href="https://kramdown.gettalong.org/parser/markdown.html" target="_blank" rel="noopener noreferrer"> Markdown </a> , <a href="https://kramdown.gettalong.org/parser/gfm.html" target="_blank" rel="noopener noreferrer"> Github 风格的 Markdown </a> , <a href="https://kramdown.gettalong.org/parser/html.html" target="_blank" rel="noopener noreferrer"> HTML </a></li><li>输出： <a href="https://kramdown.gettalong.org/converter/html.html" target="_blank" rel="noopener noreferrer"> HTML </a> , <a href="https://kramdown.gettalong.org/converter/latex.html" target="_blank" rel="noopener noreferrer"> LaTeX </a> , <a href="https://kramdown.gettalong.org/converter/kramdown.html" target="_blank" rel="noopener noreferrer"> kramdown </a> , <a href="https://kramdown.gettalong.org/converter/remove_html_tags.html" target="_blank" rel="noopener noreferrer"> RemoveHtmlTags </a> （一个特殊的 移除 HTML 标签的转换器，通常与 LaTeX 或 kramdown 结合使用 转换器）</li></ul><p>kramdown <a href="https://kramdown.gettalong.org/syntax.html" target="_blank" rel="noopener noreferrer"> syntax page </a>详细描述了支持的内容和不同之处 来自标准的 Markdown。</p><p>对于所有可用选项，请查看 <a href="https://kramdown.gettalong.org/options.html" target="_blank" rel="noopener noreferrer">选项文档 </a>或查看 解析器/转换器页面，查看它们支持哪些选项！</p><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>kramdown 包提供了两种使用方式：</p><ul><li><p><strong>作为图书馆</strong></p><p>基本相同的 API <a href="http://redcloth.org/" target="_blank" rel="noopener noreferrer">kramdown 使用与RedCloth </a> 、 <a href="http://deveiate.org/projects/BlueCloth" target="_blank" rel="noopener noreferrer"> BlueCloth </a>和 <a href="http://maruku.rubyforge.org" target="_blank" rel="noopener noreferrer">Maruku </a> ：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>require &#39;kramdown&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>puts Kramdown::Document.new(text).to_html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的第二个参数 <code>new</code>call 是用于（取消）激活某些功能的选项散列。 为了 例如，要禁用自动标头 ID 生成，您可以执行以下操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>puts Kramdown::Document.new(text, :auto_ids =&gt; false).to_html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用的默认解析器是 <code>kramdown</code>，但是，您可以使用 <code>:input</code> 选项：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>puts Kramdown::Document.new(text, :input =&gt; &#39;html&#39;).to_latex</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您还可以重用创建的文档对象来生成多个输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>doc = Kramdown::Document.new(text, :input =&gt; &#39;html&#39;)</span></span>
<span class="line"><span>puts doc.to_html</span></span>
<span class="line"><span>puts doc.to_latex</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有关如何使用或扩展 kramdown 的更多信息，请参见 <a href="https://kramdown.gettalong.org/rdoc/index.html" target="_blank" rel="noopener noreferrer">API 文档 </a>！</p></li><li><p><strong>作为应用</strong></p><p>与库文件一起，一个名为 <code>kramdown</code>已发货，可用于转换 任何支持的输入格式的文本到任何支持的输出格式。 它要么从文件中读取 指定为命令行参数或来自标准输入。 例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kramdown path/to/kramdown/doc/syntax.page</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过支持输入和输出格式以及所有可用的 kramdown 选项 命令行开关。</p></li></ul><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>kramdown 使用各种测试套件来验证解析器和转换器的正确工作。 为了 更多信息，请查看 <a href="https://kramdown.gettalong.org/tests.html" target="_blank" rel="noopener noreferrer">测试文档 </a>。</p><h2 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器"><span>解析器</span></a></h2><p>目前支持以下输入输出格式：</p><ul><li>输入： <a href="https://kramdown.gettalong.org/parser/kramdown.html" target="_blank" rel="noopener noreferrer"> kramdown </a> （Markdown 的超集）， <a href="https://kramdown.gettalong.org/parser/markdown.html" target="_blank" rel="noopener noreferrer"> Markdown </a> , <a href="https://kramdown.gettalong.org/parser/gfm.html" target="_blank" rel="noopener noreferrer"> Github 风格的 Markdown </a> , <a href="https://kramdown.gettalong.org/parser/html.html" target="_blank" rel="noopener noreferrer"> HTML </a></li><li>输出： <a href="https://kramdown.gettalong.org/converter/html.html" target="_blank" rel="noopener noreferrer"> HTML </a> , <a href="https://kramdown.gettalong.org/converter/latex.html" target="_blank" rel="noopener noreferrer"> LaTeX </a> , <a href="https://kramdown.gettalong.org/converter/kramdown.html" target="_blank" rel="noopener noreferrer"> kramdown </a> , <a href="https://kramdown.gettalong.org/converter/remove_html_tags.html" target="_blank" rel="noopener noreferrer"> RemoveHtmlTags </a> （一个特殊的 移除 HTML 标签的转换器，通常与 LaTeX 或 kramdown 结合使用 转换器）</li></ul><h3 id="kramdown-解析器" tabindex="-1"><a class="header-anchor" href="#kramdown-解析器"><span>kramdown 解析器</span></a></h3><p>这是 kramdown 库的主要解析器（顾名思义）。 它解析 kramdown 中的文本 基于 Markdown 的语法，一种非常易于编写、易于阅读的用于编写 HTML 的标记 纯文本文件。 由于基本的 Markdown 语法有一些缺点，实现 （特别是 <a href="http://michelf.com/projects/php-markdown/extra/" target="_blank" rel="noopener noreferrer">PHP Markdown Extra </a>包）试图克服这个缺点 额外的语法。 kramdown 解析器支持原始 Markdown 语法的所有特性（尽管 有一些小的更正）以及 <a href="http://michelf.com/projects/php-markdown/extra/" target="_blank" rel="noopener noreferrer">PHP Markdown Extra </a>中实现的新功能 包和 <a href="http://maruku.rubyforge.org" target="_blank" rel="noopener noreferrer">丸子 </a>。</p><h3 id="gfm-解析器" tabindex="-1"><a class="header-anchor" href="#gfm-解析器"><span>GFM 解析器</span></a></h3><p>这个解析器在 kramdown 2.0 之前是内置的，从那时起就可以通过 <a href="https://github.com/kramdown/parser-gfm" target="_blank" rel="noopener noreferrer"><code>kramdown-parser-gfm</code> gem </a>。</p><p>它可以解析 <a href="https://help.github.com/articles/github-flavored-markdown" target="_blank" rel="noopener noreferrer">“Github Flavored 降价” </a> 。 这是Markdown的一种格式 在 Github.com 上用于大多数需要文本输入的地方，例如问题和 注释。 一些扩展，特别是“反引号围栏代码块”也用于其他 站点，例如 StackOverflow。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/parser-gfm" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/parser-gfm </a> ！</p><h3 id="markdwon-解析器" tabindex="-1"><a class="header-anchor" href="#markdwon-解析器"><span>Markdwon 解析器</span></a></h3><p>此解析器解析 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener noreferrer">Markdown </a>格式的文本。 它基于 <a href="https://kramdown.gettalong.org/parser/kramdown.html" target="_blank" rel="noopener noreferrer">kramdown 解析器 </a> 并且只是删除了解析 kramdown 语法的附加标记的功能 支持。 由于 kramdown 解析器处理某些事情的方式不同（比如决定何时 列表项只包含文本），这个解析器在一些小的方面与真正的 Markdown 解析器不同 尊重。</p><p>但是请注意，解析器基本上只失败了一个 Markdown 测试用例（其他一些也 失败，但这些失败可以忽略不计）。</p><h3 id="html-解析器" tabindex="-1"><a class="header-anchor" href="#html-解析器"><span>HTML 解析器</span></a></h3><p>此解析器假定输入文档是 HTML 文档。 它会自动转换 HTML 标签 对它们的原生表示具有原生元素表示——所有其他标签也是如此 作为处理指令和 HTML 注释按原样解析。</p><h2 id="转化器" tabindex="-1"><a class="header-anchor" href="#转化器"><span>转化器</span></a></h2><h3 id="html-转换器" tabindex="-1"><a class="header-anchor" href="#html-转换器"><span>HTML 转换器</span></a></h3><p>介绍</p><p>此转换器将 <strong>kramdown 元素树转换为 HTML 片段</strong>并支持所有可用的 元素类型。 下面列出了 HTML 转换器的附加功能以及一些 附加信息。</p><h3 id="latex-转化器" tabindex="-1"><a class="header-anchor" href="#latex-转化器"><span>LaTeX 转化器</span></a></h3><p>此转换器将 kramdown 元素树转换为 LaTeX。 它支持所有可用的元素类型 除了 HTML 特定的。 例如，LaTeX 文档可以进一步转换为 PDF 文件以生成高质量的可打印版本。</p><p>由于 LaTeX 转换器仅输出转换后的元素树而不是整个 LaTeX 文档 默认情况下，应该始终使用 <code>template</code>选项（见下文）以包括必要的 “框架”。 还有一些 <a href="https://kramdown.gettalong.org/converter/latex.html#options" target="_blank" rel="noopener noreferrer">其他选项 </a>可用于自定义 生成 LaTeX 输出。</p><h3 id="手册页-转化器-man-page-converter" tabindex="-1"><a class="header-anchor" href="#手册页-转化器-man-page-converter"><span>手册页 转化器（Man Page Converter）</span></a></h3><p>该转换器采用 kramdown 文档并将其转换为 groff 格式的 <a href="http://man7.org/linux/man-pages/man7/man-pages.7.html" target="_blank" rel="noopener noreferrer">手册页 </a>。 一些 不支持像图像这样的元素，因为 groff 不支持它们。</p><h3 id="kramdown-转化器" tabindex="-1"><a class="header-anchor" href="#kramdown-转化器"><span>kramdown 转化器</span></a></h3><p>此转换器将 kramdown 元素树转换为 kramdown 文档并支持所有可用的 元素类型。 此转换器与 <a href="https://kramdown.gettalong.org/parser/html.html" target="_blank" rel="noopener noreferrer">HTML 解析器 </a>一起可用于 将 HTML 文档转换为 kramdown 文档。</p><p>另一种用途是格式化样式错误的 kramdown 文档（即带有换行的文档， 一个列表中使用了多个不同的缩进，……）。</p><h3 id="删除html标签-转化器" tabindex="-1"><a class="header-anchor" href="#删除html标签-转化器"><span>删除HTML标签 转化器</span></a></h3><p>此转换器修改 kramdown 元素树并有条件地删除所有块和/或跨 HTML 元素、XML 处理指令和 <code>style</code>也 <code>script</code>从它的标签。 所结果的 元素树在大多数情况下应该只包含“原生”kramdown 元素，因此更好 适用于不输出 HTML 的转换器（如 <a href="https://kramdown.gettalong.org/converter/kramdown.html" target="_blank" rel="noopener noreferrer">kramdown 转换器 </a>或 <a href="https://kramdown.gettalong.org/converter/latex.html" target="_blank" rel="noopener noreferrer"> Latex转换器 </a>）。</p><h2 id="语法高亮" tabindex="-1"><a class="header-anchor" href="#语法高亮"><span>语法高亮</span></a></h2><h3 id="rouge-语法高亮" tabindex="-1"><a class="header-anchor" href="#rouge-语法高亮"><span>Rouge 语法高亮</span></a></h3><p><a href="https://github.com/jneen/rouge" target="_blank" rel="noopener noreferrer">Rouge </a> （麻省理工学院许可）是一种快速的语法高亮器，它是 与为 Pygments 设计的样式表兼容。</p><p>要使用 Rouge，请将选项 <a href="https://kramdown.gettalong.org/options.html#option-syntax-highlighter" target="_blank" rel="noopener noreferrer">“syntax_highlighter” </a>设置为 &#39;rouge&#39; 并确保 Rouge 可用。 可以安装 Rouge 库，例如，通过 通过运行 Rubygems <code>gem install rouge</code>.</p><h3 id="使用-coderay-进行语法高亮" tabindex="-1"><a class="header-anchor" href="#使用-coderay-进行语法高亮"><span>使用 Coderay 进行语法高亮</span></a></h3><p>这个语法高亮器在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/syntax-coderay" target="_blank" rel="noopener noreferrer"><code>kramdown-syntax-coderay</code>宝石 </a>。</p><p><a href="http://coderay.rubychan.de" target="_blank" rel="noopener noreferrer">Coderay </a> （麻省理工学院许可）可用作代码的语法高亮器 转换为 HTML 时的块和代码跨度。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/syntax-coderay" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/syntax-coderay </a> ！</p><h2 id="数学引擎" tabindex="-1"><a class="header-anchor" href="#数学引擎"><span>数学引擎</span></a></h2><h3 id="mathjax" tabindex="-1"><a class="header-anchor" href="#mathjax"><span>MathJax</span></a></h3><p><a href="http://www.mathjax.org" target="_blank" rel="noopener noreferrer">MathJax </a>是一个 javascript 库，它使用 TeX 算法和字体来显示数学公式 HTML 页面。 它允许非常细粒度的配置，被广泛使用并适用于所有现代 浏览器。</p><p>该引擎使用标准的 MathJax 语法标记数学公式 <code>\\(...\\)</code>对于内联数学和 <code>\\[...\\]</code>用于块数学（适用于 MathJax 的 2.x 和 3.x 版本）。 唯一要做的另一件事 是在 HTML 页面上包含 MathJax 库本身。</p><p>请注意，kramdown 不 <em>随</em> MathJax 库一起提供，因此“默认” 模板不 <em>包含</em> 指向它的链接！ 这 <a href="http://docs.mathjax.org/en/latest/start.html" target="_blank" rel="noopener noreferrer"> MathJax 文档 </a>描述了如何添加链接 到 MathJax 到你的页面</p><h3 id="katex" tabindex="-1"><a class="header-anchor" href="#katex"><span>KaTeX</span></a></h3><p>这个数学引擎在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/math-katex" target="_blank" rel="noopener noreferrer"><code>kramdown-math-katex</code>宝石 </a>。</p><p>该引擎 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener noreferrer">使用KaTeX </a>通过 <a href="https://github.com/glebm/katex-ruby" target="_blank" rel="noopener noreferrer">katex rubygem </a>将 TeX 数学公式转换为 KaTeX HTML，在底层使用 ExecJS。 这消除了对客户端数学渲染的需要 Javascript。 这个引擎有点类似于 <a href="https://kramdown.gettalong.org/math_engine/sskatex.html" target="_blank" rel="noopener noreferrer">SsKaTeX </a>数学引擎，但是更简单 使用并适合来自不受信任用户的 kramdown 输入。</p><h3 id="sskatex" tabindex="-1"><a class="header-anchor" href="#sskatex"><span>SsKaTeX</span></a></h3><p>这个数学引擎在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/math-sskatex" target="_blank" rel="noopener noreferrer"><code>kramdown-math-sskatex</code>宝石 </a>。</p><p>的服务器端安装 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener noreferrer">这个数学引擎使用KaTeX </a>来 将 TeX 数学公式转换为 HTML+MathML。 这消除了对客户端数学渲染的需要 Javascript。 的一种灵活的仅供受信用户使用的替代方案 <a href="https://kramdown.gettalong.org/math_engine/katex.html" target="_blank" rel="noopener noreferrer"> 将其视为 KaTeX 数学 引擎 </a>的轻量级高效替代品 <a href="https://kramdown.gettalong.org/math_engine/mathjaxnode.html" target="_blank" rel="noopener noreferrer">和Mathjax-Node </a>。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/math-sskatex" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/math-sskatex </a> ！</p><h3 id="mathjax-node" tabindex="-1"><a class="header-anchor" href="#mathjax-node"><span>Mathjax-Node</span></a></h3><p>这个数学引擎在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/math-mathjaxnode" target="_blank" rel="noopener noreferrer"><code>kramdown-math-mathjaxnode</code>宝石 </a>。</p><p><a href="https://github.com/mathjax/MathJax-node" target="_blank" rel="noopener noreferrer">Mathjax-Node </a>将 TeX 数学公式转换为 MathML 和 可以与 <a href="https://kramdown.gettalong.org/converter/html.html" target="_blank" rel="noopener noreferrer">HTML 转换器 </a>一起使用。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/math-mathjaxnode" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/math-mathjaxnode </a> ！</p><h3 id="ritex" tabindex="-1"><a class="header-anchor" href="#ritex"><span>Ritex</span></a></h3><p>这个数学引擎在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/math-ritex" target="_blank" rel="noopener noreferrer"><code>kramdown-math-ritex</code>宝石 </a>。</p><p>Ritex 将 TeX 数学公式转换为 MathML 并可与 <a href="https://kramdown.gettalong.org/converter/html.html" target="_blank" rel="noopener noreferrer">HTML 一起使用 转换器 </a>。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/math-ritex" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/math-ritex </a> ！</p><h3 id="itex2mml" tabindex="-1"><a class="header-anchor" href="#itex2mml"><span>itex2MML</span></a></h3><p>这个数学引擎在 kramdown 2.0 之前是内置的，从那时起可以通过 <a href="https://github.com/kramdown/math-itex2mml" target="_blank" rel="noopener noreferrer"><code>kramdown-math-itex2mml</code>宝石 </a>。</p><p><a href="https://golem.ph.utexas.edu/~distler/blog/itex2MML.html" target="_blank" rel="noopener noreferrer">itex2MML </a>将 TeX 数学公式转换为 可以一起使用 <a href="https://kramdown.gettalong.org/converter/html.html" target="_blank" rel="noopener noreferrer"> MathML 和HTML 转换器 </a>。</p><p>有关文档，请参阅 <a href="https://github.com/kramdown/math-itex2mml" target="_blank" rel="noopener noreferrer">https://github.com/kramdown/math-itex2mml </a> ！</p>`,85)]))}const p=r(o,[["render",l],["__file","Kramdown库.html.vue"]]),s=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Kramdown/Kramdown%E5%BA%93.html","title":"kramdown","lang":"zh-CN","frontmatter":{"description":"kramdown 目录 kramdown 参考 官网 官网文档 官网介绍 kramdown （原文如此，不是 Kramdown 或 KramDown，只是 kramdown） 是一个 免费 的MIT 许可 Ruby 用于解析和转换 Markdown 超集的 库。 这是 完全用 Ruby 编写，支持标准的 Markdown（有一些小的修改）和各种 由 P...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Kramdown/Kramdown%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"kramdown"}],["meta",{"property":"og:description","content":"kramdown 目录 kramdown 参考 官网 官网文档 官网介绍 kramdown （原文如此，不是 Kramdown 或 KramDown，只是 kramdown） 是一个 免费 的MIT 许可 Ruby 用于解析和转换 Markdown 超集的 库。 这是 完全用 Ruby 编写，支持标准的 Markdown（有一些小的修改）和各种 由 P..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kramdown\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.51,"words":2553},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Kramdown/Kramdown库.md","excerpt":"\\n<h1>目录</h1>\\n<h1>kramdown</h1>\\n<p>参考</p>\\n<ul>\\n<li><a href=\\"https://kramdown.gettalong.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网</a></li>\\n<li><a href=\\"https://kramdown.gettalong.org/documentation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网文档</a></li>\\n</ul>\\n<p><a href=\\"https://kramdown.gettalong.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网介绍</a></p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Kramdown/Kramdown库.md","value":{"title":"Kramdown库","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Kramdown/Kramdown库.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,s as data};
