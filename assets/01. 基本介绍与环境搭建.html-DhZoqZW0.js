import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-pvGL4vXS.js";const l={},i=e(`<h1 id="bcc" tabindex="-1"><a class="header-anchor" href="#bcc"><span>BCC</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="基本介绍与环境搭建" tabindex="-1"><a class="header-anchor" href="#基本介绍与环境搭建"><span>基本介绍与环境搭建</span></a></h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>这里居然还有WSL的版本，我也才知道怎么下载WSL对应的Linux内核</p><p>注意两个BCC版本：标准 Ubuntu Universe 存储库以及 iovisor 的 PPA 中提供了 bcc 的版本。 Ubuntu 软件包的名称略有不同：</p><ul><li>iovisor 软件包在名称中使用 <code>bcc</code> （例如 <code>bcc-tools</code> ）</li><li>Ubuntu 软件包使用 <code>bpfcc</code> （例如 <code>bpfcc-tools</code> ）</li></ul><p>目前，Ubuntu Universe 和 iovisor 版本的 BCC 软件包都已过时。<strong>从源代码构建是获取最新 bcc 打包版本的唯一方法</strong></p><h3 id="内核配置" tabindex="-1"><a class="header-anchor" href="#内核配置"><span>内核配置</span></a></h3><p>略，看原链接：https://github.com/iovisor/bcc/blob/master/INSTALL.md#kernel-configuration</p><p>内核参数说明：https://github.com/iovisor/bcc/blob/master/docs/kernel_config.md</p><h3 id="packages" tabindex="-1"><a class="header-anchor" href="#packages"><span>Packages</span></a></h3><p>详见原链接。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> bpfcc-tools linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token variable">)</span></span> <span class="token comment"># ubuntu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些工具安装在 <code>/sbin</code> （Ubuntu 18.04 中为 <code>/usr/sbin</code> ）中，扩展名为 <code>-bpfcc</code> 。尝试运行 <code>sudo opensnoop-bpfcc</code> 。</p><h3 id="source" tabindex="-1"><a class="header-anchor" href="#source"><span>Source</span></a></h3><p>要从源代码构建工具链，需要：</p><ul><li>LLVM 3.7.1 或更高版本，使用 BPF 支持进行编译（默认=打开）</li><li>Clang，与 LLVM 从同一棵树构建</li><li>cmake (&gt;=3.1)、gcc (&gt;=4.7)、flex、bison</li><li>LuaJIT，如果你想要 Lua 支持</li><li>一些示例中使用的可选工具：arping、netperf 和 iperf</li></ul><p>注意要先进行内核配置（看原链接），不然会多很多bug出来。</p><p>安装构建依赖项（<strong>选择对应的的版本</strong>，这里我选择22.04）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Trusty (14.04 LTS) and older</span>
<span class="token assign-left variable">VER</span><span class="token operator">=</span>trusty
<span class="token builtin class-name">echo</span> <span class="token string">&quot;deb http://llvm.org/apt/<span class="token variable">$VER</span>/ llvm-toolchain-<span class="token variable">$VER</span>-3.7 main
deb-src http://llvm.org/apt/<span class="token variable">$VER</span>/ llvm-toolchain-<span class="token variable">$VER</span>-3.7 main&quot;</span> <span class="token operator">|</span> <span class="token punctuation">\\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/llvm.list
<span class="token function">wget</span> <span class="token parameter variable">-O</span> - http://llvm.org/apt/llvm-snapshot.gpg.key <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token comment"># For Bionic (18.04 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm6.0 llvm-6.0-dev libclang-6.0-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># For Focal (20.04.1 LTS)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># For Hirsute (21.04) or Impish (21.10)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm11 llvm-11-dev libclang-11-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># For Jammy (22.04)</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev libdebuginfod-dev arping netperf iperf

<span class="token comment"># For other versions</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">zip</span> bison build-essential cmake flex <span class="token function">git</span> libedit-dev <span class="token punctuation">\\</span>
  libllvm3.7 llvm-3.7-dev libclang-3.7-dev python zlib1g-dev libelf-dev python3-setuptools <span class="token punctuation">\\</span>
  liblzma-dev arping netperf iperf

<span class="token comment"># For Lua support</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> luajit luajit-5.1-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装并编译BCC</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/iovisor/bcc.git
<span class="token function">mkdir</span> bcc/build<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> bcc/build
cmake <span class="token punctuation">..</span> <span class="token comment"># 使用 CMake 生成 Makefile</span>
<span class="token function">make</span> <span class="token comment"># 编译 BCC</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装 BCC</span>

cmake <span class="token parameter variable">-DPYTHON_CMD</span><span class="token operator">=</span>python3 <span class="token punctuation">..</span> <span class="token comment"># 重新使用 CMake 生成 Makefile，这次指定了 Python 3 的路径作为 PYTHON_CMD</span>
<span class="token function">pushd</span> src/python/
<span class="token function">make</span> <span class="token comment"># 编译</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装</span>
<span class="token function">popd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（技巧：pushed和cd的区别：会将当前目录的绝对路径存储在一个栈中，以便后续使用 popd 命令弹出栈中的目录。可以方便地处理多层目录结构的切换）</p><p>检查是否安装成功</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> /usr/share/bcc/tools/check-kernel-helper <span class="token comment"># 检查是否安装成功，成功会显示：Kernel helper loaded successfully</span>
<span class="token function">sudo</span> /usr/share/bcc/tools/ext4dist <span class="token comment"># 运行tools下面的都行，这里检查系统中ext4文件系统延迟</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wiki-docs" tabindex="-1"><a class="header-anchor" href="#wiki-docs"><span>wiki (docs)</span></a></h2><p>没有wiki，但是有docs</p><p>DOCS路径：</p><ul><li>/docs <ul><li>tutorial.md</li><li>tutorial_bcc_python_developerl.md</li></ul></li><li>FAQ</li><li>INSTALL.md</li><li>QUICKSTART.md, 提供了一个docker容器供用户尝试bcc</li><li>README.md</li></ul><h2 id="快速开始-容器版" tabindex="-1"><a class="header-anchor" href="#快速开始-容器版"><span>快速开始 (容器版)</span></a></h2><p>命令改良版（有容器名方便操控、退出不删除容器）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /lib/modules:/lib/modules:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /usr/src:/usr/src:ro  <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--workdir</span> /usr/share/bcc/tools  <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> bcc <span class="token punctuation">\\</span>
  zlim/bcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原版</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--privileged</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /lib/modules:/lib/modules:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /usr/src:/usr/src:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--workdir</span> /usr/share/bcc/tools <span class="token punctuation">\\</span>
  zlim/bcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可能需要先安装docker：<code>apt install docker.io</code></p><p>一些常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 退出</span>
<span class="token builtin class-name">exit</span> <span class="token comment"># 或 Ctrl+D</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 或 docker ps -a</span>
<span class="token function">docker</span> start <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span> /bin/bash <span class="token comment"># 进入有点麻烦……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),t=[i];function c(o,p){return s(),a("div",null,t)}const u=n(l,[["render",c],["__file","01. 基本介绍与环境搭建.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/01.%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"BCC","lang":"zh-CN","frontmatter":{"description":"BCC 目录 基本介绍与环境搭建 安装 这里居然还有WSL的版本，我也才知道怎么下载WSL对应的Linux内核 注意两个BCC版本：标准 Ubuntu Universe 存储库以及 iovisor 的 PPA 中提供了 bcc 的版本。 Ubuntu 软件包的名称略有不同： iovisor 软件包在名称中使用 bcc （例如 bcc-tools ） U...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/01.%20%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"BCC"}],["meta",{"property":"og:description","content":"BCC 目录 基本介绍与环境搭建 安装 这里居然还有WSL的版本，我也才知道怎么下载WSL对应的Linux内核 注意两个BCC版本：标准 Ubuntu Universe 存储库以及 iovisor 的 PPA 中提供了 bcc 的版本。 Ubuntu 软件包的名称略有不同： iovisor 软件包在名称中使用 bcc （例如 bcc-tools ） U..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BCC\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"BCC","slug":"bcc","link":"#bcc","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"基本介绍与环境搭建","slug":"基本介绍与环境搭建","link":"#基本介绍与环境搭建","children":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"内核配置","slug":"内核配置","link":"#内核配置","children":[]},{"level":3,"title":"Packages","slug":"packages","link":"#packages","children":[]},{"level":3,"title":"Source","slug":"source","link":"#source","children":[]}]},{"level":2,"title":"wiki (docs)","slug":"wiki-docs","link":"#wiki-docs","children":[]},{"level":2,"title":"快速开始 (容器版)","slug":"快速开始-容器版","link":"#快速开始-容器版","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.03,"words":909},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/01. 基本介绍与环境搭建.md","autoDesc":true}');export{u as comp,v as data};
