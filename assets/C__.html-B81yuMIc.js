import{_ as s,c as a,e as p,o as t}from"./app-aaiu3veL.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h1><h2 id="错题" tabindex="-1"><a class="header-anchor" href="#错题"><span>错题</span></a></h2><h3 id="多线程处理全局变量" tabindex="-1"><a class="header-anchor" href="#多线程处理全局变量"><span>多线程处理全局变量</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>一个全局变量tally<span class="token punctuation">,</span>两个线程并发执行<span class="token punctuation">(</span>代码段都是ThreadProc<span class="token punctuation">)</span><span class="token punctuation">,</span>问两个线程都结束后<span class="token punctuation">,</span>tally取值范围为_______
	
<span class="token keyword">int</span> tally<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span>
  <span class="token keyword">void</span> <span class="token function">ThreadProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
          tally<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错：B [100,100] 对：A [50, 100]</p><p>A 最小值的情况：（线程a，b交替读取tally值） a线程对tally加1后，还没有更新tally在内存中的值，线程b读取tally值，执行加1，更新tally为1，然后a线程重新读取tally值，这样交替运行，最终为50 最大值的情况： a线程对tally加到50后，更新tally在内存中的值为50，然后线程b读取tally值，再执行加50运算，结果为100；</p><p>我本来还以为这个操作是原子的……看来要声明全局变量为原子的才行</p><h3 id="int不能传给int类型参数" tabindex="-1"><a class="header-anchor" href="#int不能传给int类型参数"><span>&amp;int不能传给int类型参数</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">fun6</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> fun6<span class="token punctuation">;</span>
在下列选项中，正确的调用是（  ）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多选了：<code>int a=15; int n=fun6(&amp;a);</code>，<strong>在Dev-c++下加c++ 11编译选项，&amp;a不被认为是int</strong></p><h3 id="线性类型存储不能遍历删" tabindex="-1"><a class="header-anchor" href="#线性类型存储不能遍历删"><span>线性类型存储不能遍历删</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>CONTAINER<span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">,</span> tempIt<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>iter <span class="token operator">=</span> cont<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> cont<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    　　
<span class="token punctuation">{</span>
    tempIt <span class="token operator">=</span> iter<span class="token punctuation">;</span>
    <span class="token operator">++</span>iter<span class="token punctuation">;</span>
    cont<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>tempIt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    　　
<span class="token punctuation">}</span>

 假设cont是一个CONTAINER的实例，里面包含数个元素，那么当CONTAINER为：
<span class="token number">1</span>、vector   <span class="token number">2</span>、list   <span class="token number">3</span>、map    <span class="token number">4</span>、deque
会导致上面的代码片段崩溃的CONTAINER类型是？ （双选）<span class="token number">2</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案：1 4，因为1 4都是线性类型存储，线性类型存储不能遍历删的</p><h3 id="内敛不能递归" tabindex="-1"><a class="header-anchor" href="#内敛不能递归"><span>内敛不能递归</span></a></h3><p>关于内联函数说法错误的是:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>不是任何一个函数都可定义成内联函数
内联函数的函数体内不能含有复杂的结构控制语句
递归函数可以被用来作为内联函数
内联函数一般适合于只有1~5行语句的小函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案C。我选了B，本来觉得这只是不建议，并不是说一定就不行</p><h3 id="const能作为重载依据" tabindex="-1"><a class="header-anchor" href="#const能作为重载依据"><span>Const能作为重载依据</span></a></h3><p>C++中，能作为函数重载判断依据的是？</p><p>漏了个Const： 如果同时在类中，对于函数名相同的const函数和非const函数能够构成重载</p><p>https://blog.csdn.net/sun19910114/article/details/40051713</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>A <span class="token function">b</span><span class="token punctuation">(</span> <span class="token number">2002</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用 非const版本的func() </span>
    
<span class="token keyword">const</span> A <span class="token function">c</span><span class="token punctuation">(</span> <span class="token number">2002</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用 const版本的func() </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>假定CSomething是一个类，执行下面这些语句之后，内存里创建了____个CSomething对象。 

CSomething <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CSomething <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
CSomething c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
CSomething <span class="token operator">&amp;</span>ra <span class="token operator">=</span> b<span class="token punctuation">;</span>
CSomething d <span class="token operator">=</span> b<span class="token punctuation">;</span>
CSomething <span class="token operator">*</span>pA <span class="token operator">=</span> c<span class="token punctuation">;</span>
CSomething <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CSomething</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">10</span>
<span class="token number">9</span>
<span class="token number">8</span>
<span class="token number">7</span>
<span class="token number">6</span>
<span class="token number">5</span>

CSomething <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义一个函数，参数为空，返回值为CSomething对象， 类似int func();   </span>
CSomething a<span class="token punctuation">;</span> <span class="token comment">// 定义对象a，使用默认构造函数CSomething::CSomething()  </span>
CSomething <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义对象a，使用构造函数CSomething::CSomething(int) </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案6，我选了7。<code>CSomething a();</code> 没有创建，不是默认构造函数，只是个函数声明（在C++ Primer393页中有说明），太傻逼了</p><h2 id="不会" tabindex="-1"><a class="header-anchor" href="#不会"><span>不会</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>使用操作符<span class="token function">setw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 对数据进行格式输出时，应包含（ ）文件。
fstream<span class="token punctuation">.</span>h
stdlib<span class="token punctuation">.</span>h
iostream<span class="token punctuation">.</span>h
iomanip<span class="token punctuation">.</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选D，iomanip.h</p><p>C++ setw() 函数用于设置字段的宽度，没见过没用过</p><h2 id="没审题" tabindex="-1"><a class="header-anchor" href="#没审题"><span>没审题</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">long</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">long</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">seta</span><span class="token punctuation">(</span>A<span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    B data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">seta</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果是 22221111 而非 21212121。这道题如果改为 <code>void seta(B* data, int idx)</code> 才是 21212121</p><p>对A进行下标的结果就是，步进长度是4而不是8</p><h2 id="不确定" tabindex="-1"><a class="header-anchor" href="#不确定"><span>不确定</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>以下#pragma预处理命令哪个是改变编译器的对齐方式（）

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">comment</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">pack</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">data_seg</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>B</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>STL中的一级容器有<span class="token operator">:</span> 

vector<span class="token punctuation">,</span> deque<span class="token punctuation">,</span> list<span class="token punctuation">,</span> set<span class="token punctuation">,</span> multiset<span class="token punctuation">,</span> map<span class="token punctuation">,</span> multimap<span class="token punctuation">.</span>
序列容器，关联容器，容器适配器
set<span class="token punctuation">,</span> multiset<span class="token punctuation">,</span> map<span class="token punctuation">,</span> multimap<span class="token punctuation">.</span>
vector<span class="token punctuation">,</span> deque<span class="token punctuation">,</span> list<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>D</p><h2 id="误错" tabindex="-1"><a class="header-anchor" href="#误错"><span>误错</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>以下定义语句中正确的是（）

<span class="token keyword">char</span> a<span class="token operator">=</span><span class="token char">&#39;A&#39;</span>b<span class="token operator">=</span><span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> a<span class="token operator">=</span>b<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>D不对的，未初始化不能取地址？而且a是<code>float*</code>，&amp;a是<code>float**</code>。C是对的</p>`,40)]))}const i=s(e,[["render",c],["__file","C__.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/%E7%89%9B%E5%AE%A2/C__.html","title":"C++","lang":"zh-CN","frontmatter":{"description":"C++ 错题 多线程处理全局变量 错：B [100,100] 对：A [50, 100] A 最小值的情况：（线程a，b交替读取tally值） a线程对tally加1后，还没有更新tally在内存中的值，线程b读取tally值，执行加1，更新tally为1，然后a线程重新读取tally值，这样交替运行，最终为50 最大值的情况： a线程对tally加到...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/%E7%89%9B%E5%AE%A2/C__.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"C++"}],["meta",{"property":"og:description","content":"C++ 错题 多线程处理全局变量 错：B [100,100] 对：A [50, 100] A 最小值的情况：（线程a，b交替读取tally值） a线程对tally加1后，还没有更新tally在内存中的值，线程b读取tally值，执行加1，更新tally为1，然后a线程重新读取tally值，这样交替运行，最终为50 最大值的情况： a线程对tally加到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"C++","slug":"c","link":"#c","children":[{"level":2,"title":"错题","slug":"错题","link":"#错题","children":[{"level":3,"title":"多线程处理全局变量","slug":"多线程处理全局变量","link":"#多线程处理全局变量","children":[]},{"level":3,"title":"&int不能传给int类型参数","slug":"int不能传给int类型参数","link":"#int不能传给int类型参数","children":[]},{"level":3,"title":"线性类型存储不能遍历删","slug":"线性类型存储不能遍历删","link":"#线性类型存储不能遍历删","children":[]},{"level":3,"title":"内敛不能递归","slug":"内敛不能递归","link":"#内敛不能递归","children":[]},{"level":3,"title":"Const能作为重载依据","slug":"const能作为重载依据","link":"#const能作为重载依据","children":[]}]},{"level":2,"title":"不会","slug":"不会","link":"#不会","children":[]},{"level":2,"title":"没审题","slug":"没审题","link":"#没审题","children":[]},{"level":2,"title":"不确定","slug":"不确定","link":"#不确定","children":[]},{"level":2,"title":"误错","slug":"误错","link":"#误错","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.48,"words":1044},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/牛客/C++.md","excerpt":"\\n<h2>错题</h2>\\n<h3>多线程处理全局变量</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>一个全局变量tally<span class=\\"token punctuation\\">,</span>两个线程并发执行<span class=\\"token punctuation\\">(</span>代码段都是ThreadProc<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>问两个线程都结束后<span class=\\"token punctuation\\">,</span>tally取值范围为_______\\n\\t\\n<span class=\\"token keyword\\">int</span> tally<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//全局变量</span>\\n  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">ThreadProc</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n     <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">&lt;=</span><span class=\\"token number\\">50</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n          tally<span class=\\"token operator\\">+=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,u as data};
