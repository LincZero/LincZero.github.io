import{_ as l,c as n,e as t,o as i}from"./app-Dnpl954R.js";const o="/assets/I_O%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-0cXofgep.png",r="/assets/%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6%E5%99%A8-DrWavEQo.png",a={};function s(p,e){return i(),n("div",null,e[0]||(e[0]=[t('<h1 id="设备控制器-device-control" tabindex="-1"><a class="header-anchor" href="#设备控制器-device-control"><span>设备控制器 (Device Control)</span></a></h1><h2 id="提前总结" tabindex="-1"><a class="header-anchor" href="#提前总结"><span>提前总结</span></a></h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>物理设备 <ul><li>设备控制器 <ul><li><p>主要作用：<strong>统一的标准化管理</strong>，屏蔽设备差异</p></li><li><p>交互方式：CPU 通过读写设备控制器中的寄存器控制设备，这可比 CPU 直接控制输入输出设备，要方便和标准很多</p></li><li><p>位置：<strong>每个设备都有一个</strong></p></li><li><p>举例：硬盘有硬盘控制器、显示器有视频控制器等</p></li></ul></li></ul></li></ul><h3 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h3><p><img src="'+o+'" alt="计算机 I/O 系统结构" loading="lazy"></p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>我们的电脑设备可以接非常多的输入输出设备，比如键盘、鼠标、显示器、网卡、硬盘、打印机、音响等等，每个设备的用法和功能都不同，那操作系统是如何把这些输入输出设备统一管理的呢?</p><p>为了屏蔽设备之间的差异，<strong>每个设备都有</strong>一个叫 <strong>设备控制器（<em>Device Control</em>）</strong> 的组件</p><p>因为这些控制器都很清楚的<strong>知道对应设备的用法和功能</strong>，所以 CPU 是通过设备控制器来和设备打交道的。</p><p>设备控制器里有芯片，它可执行自己的逻辑，也有自己的寄存器，用来与 CPU 进行通信，比如：</p><ul><li>通过写入这些寄存器，操作系统可以命令设备发送数据、接收数据、开启或关闭，或者执行某些其他操作。</li><li>通过读取这些寄存器，操作系统可以了解设备的状态，是否准备好接收一个新的命令等。</li></ul><h2 id="实现细节-三类寄存器-状态-命令-数据" tabindex="-1"><a class="header-anchor" href="#实现细节-三类寄存器-状态-命令-数据"><span>实现细节 - 三类寄存器 (状态/命令/数据)</span></a></h2><p>实际上，控制器是有三类寄存器，它们分别是：</p><ul><li><strong>状态寄存器（<em>Status Register</em>）</strong>，CPU 向 I/O 设备写入需要传输的数据，比如要打印的内容是「Hello」，CPU 就要先发送一个 H 字符给到对应的 I/O 设备。</li><li><strong>命令寄存器（<em>Command Register</em>）</strong>，CPU 发送一个命令，告诉 I/O 设备，要进行输入/输出操作，于是就会交给 I/O 设备去工作，任务完成后，会把状态寄存器里面的状态标记为完成。</li><li><strong>数据寄存器（<em>Data Register</em>）</strong>，目的是告诉 CPU ，现在已经在工作或工作已经完成，如果已经在工作状态，CPU 再发送数据或者命令过来，都是没有用的，直到前面的工作已经完成，状态寄存标记成已完成，CPU 才能发送下一个字符和命令。</li></ul><p>如下图：</p><p><img src="'+r+'" alt="img" loading="lazy"></p><h2 id="实现细节-两类输出设备-块-字符" tabindex="-1"><a class="header-anchor" href="#实现细节-两类输出设备-块-字符"><span>实现细节 - 两类输出设备 (块/字符)</span></a></h2><p>另外， 输入输出设备可分为两大类 ：</p><ul><li><strong>块设备（<em>Block Device</em>）</strong>，把数据存储在固定大小的块中，每个块有自己的地址 <ul><li>例如：硬盘、USB 是常见的块设备</li></ul></li><li><strong>字符设备（<em>Character Device</em>）</strong>，以字符为单位发送或接收一个字符流，字符设备是不可寻址的，也没有任何寻道操作 <ul><li>例如：鼠标是常见的字符设备</li></ul></li></ul><p>其中，由于 <strong>块设备</strong> 通常传输的数据量会非常大，于是控制器设立了一个可读写的 <strong>数据缓冲区</strong>。这样做是为了，<strong>减少对设备的频繁操作</strong>。</p><ul><li>写入：CPU 写入数据到控制器的缓冲区时，当缓冲区的数据 <em>囤够了一部分，才会发给设备</em></li><li>读取：CPU 从控制器的缓冲区读取数据时，也需要缓冲区 <em>囤够了一部分，才拷贝到内存</em></li></ul><h2 id="两个通信方法-端口-内存映射" tabindex="-1"><a class="header-anchor" href="#两个通信方法-端口-内存映射"><span>两个通信方法 (端口/内存映射)</span></a></h2><p>那 CPU 是如何与设备的控制寄存器和数据缓冲区进行通信的？存在两个方法：</p><ul><li><strong>端口 I/O</strong>：每个控制寄存器被分配一个 I/O 端口，可以通过特殊的汇编指令操作这些寄存器，比如 <code>in/out</code> 类似的指令。</li><li><strong>内存映射 I/O</strong>：将所有控制寄存器映射到内存空间中，这样就可以像读写内存一样读写数据缓冲区。</li></ul>',25)]))}const E=l(a,[["render",s],["__file","01. 设备控制器.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/08.%20%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/01.%20%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6%E5%99%A8.html","title":"设备控制器 (Device Control)","lang":"zh-CN","frontmatter":{"description":"设备控制器 (Device Control) 提前总结 总结 物理设备 设备控制器 主要作用：统一的标准化管理，屏蔽设备差异 交互方式：CPU 通过读写设备控制器中的寄存器控制设备，这可比 CPU 直接控制输入输出设备，要方便和标准很多 位置：每个设备都有一个 举例：硬盘有硬盘控制器、显示器有视频控制器等 架构图 计算机 I/O 系统结构 作用 我们的...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/08.%20%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/01.%20%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"设备控制器 (Device Control)"}],["meta",{"property":"og:description","content":"设备控制器 (Device Control) 提前总结 总结 物理设备 设备控制器 主要作用：统一的标准化管理，屏蔽设备差异 交互方式：CPU 通过读写设备控制器中的寄存器控制设备，这可比 CPU 直接控制输入输出设备，要方便和标准很多 位置：每个设备都有一个 举例：硬盘有硬盘控制器、显示器有视频控制器等 架构图 计算机 I/O 系统结构 作用 我们的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设备控制器 (Device Control)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"设备控制器 (Device Control)","slug":"设备控制器-device-control","link":"#设备控制器-device-control","children":[{"level":2,"title":"提前总结","slug":"提前总结","link":"#提前总结","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"架构图","slug":"架构图","link":"#架构图","children":[]}]},{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"实现细节 - 三类寄存器 (状态/命令/数据)","slug":"实现细节-三类寄存器-状态-命令-数据","link":"#实现细节-三类寄存器-状态-命令-数据","children":[]},{"level":2,"title":"实现细节 - 两类输出设备 (块/字符)","slug":"实现细节-两类输出设备-块-字符","link":"#实现细节-两类输出设备-块-字符","children":[]},{"level":2,"title":"两个通信方法 (端口/内存映射)","slug":"两个通信方法-端口-内存映射","link":"#两个通信方法-端口-内存映射","children":[]}]}],"git":{},"readingTime":{"minutes":3.43,"words":1029},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/01. 设备控制器.md","excerpt":"\\n<h2>提前总结</h2>\\n<h3>总结</h3>\\n<ul>\\n<li>物理设备\\n<ul>\\n<li>设备控制器\\n<ul>\\n<li>\\n<p>主要作用：<strong>统一的标准化管理</strong>，屏蔽设备差异</p>\\n</li>\\n<li>\\n<p>交互方式：CPU 通过读写设备控制器中的寄存器控制设备，这可比 CPU 直接控制输入输出设备，要方便和标准很多</p>\\n</li>\\n<li>\\n<p>位置：<strong>每个设备都有一个</strong></p>\\n</li>\\n<li>\\n<p>举例：硬盘有硬盘控制器、显示器有视频控制器等</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/01. 设备控制器.md","value":{"title":"01. 设备控制器","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/01. 设备控制器.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{E as comp,d as data};
