import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as l,a as e,b as n,d as t,e as i}from"./app-CdBXVQbh.js";const c={},u=i('<h1 id="dpdk-ring-and-ivshmem" tabindex="-1"><a class="header-anchor" href="#dpdk-ring-and-ivshmem"><span>DPDK Ring and ivshmem</span></a></h1><h2 id="dpdk-ring" tabindex="-1"><a class="header-anchor" href="#dpdk-ring"><span>DPDK Ring</span></a></h2><p><code>DPDK Ring</code>提供了一个<code>FIFO</code>无锁队列，支持丰富的队列操作，比如</p><ul><li>Multi-consumer or single-consumer dequeue</li><li>Multi-producer or single-producer enqueue</li><li>Bulk dequeue - Dequeues the specified count of objects if successful; otherwise fails</li><li>Bulk enqueue - Enqueues the specified count of objects if successful; otherwise fails</li><li>Burst dequeue - Dequeue the maximum available objects if the specified count cannot be fulfilled</li><li>Burst enqueue - Enqueue the maximum available objects if the specified count cannot be fulfilled</li></ul><p>![dpdk ring enqueue](05. Ring和共享内存.assets/ring-structure.svg)</p>',5),d={href:"http://dpdk.org/doc/guides/prog_guide/ring_lib.html",target:"_blank",rel:"noopener noreferrer"},p=e("h2",{id:"ivshmem",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ivshmem"},[e("span",null,"ivshmem")])],-1),m=e("p",null,[e("code",null,"ivshmem"),n("则通过把内存映射成虚拟机PCI设备提供了虚拟机间("),e("code",null,"host-to-guest or guest-to-guest"),n(")共享内存的机制。")],-1),h=e("p",null,"![Typical ivshmem use case](05. Ring和共享内存.assets/typical-ivshmem-use-case.png)",-1),g={href:"http://dpdk.org/doc/guides-16.04/prog_guide/ivshmem_lib.html",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,[n("DPDK "),e("code",null,"ivshmem"),n(":")],-1),E=e("p",null,"![DPDK nics](05. Ring和共享内存.assets/dpdk-nics.jpeg)",-1),b={href:"http://blog.csdn.net/quqi99/article/details/51087955",target:"_blank",rel:"noopener noreferrer"},k=i(`<h3 id="ivshmem使用示例" tabindex="-1"><a class="header-anchor" href="#ivshmem使用示例"><span>ivshmem使用示例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># on the host</span>
<span class="token function">mount</span> tmpfs /dev/shm <span class="token parameter variable">-t</span> tmpfs <span class="token parameter variable">-osize</span><span class="token operator">=</span>32m
ivshmem_server <span class="token parameter variable">-m</span> <span class="token number">64</span> -p/tmp/nahanni <span class="token operator">&amp;</span>

<span class="token comment"># start VM</span>
qemu-system-x86_64  <span class="token parameter variable">-hda</span> mg <span class="token parameter variable">-L</span> /pc-bios/ <span class="token parameter variable">--smp</span> <span class="token number">4</span> –chardev socket,path<span class="token operator">=</span>/tmp/nahanni,id<span class="token operator">=</span>nahanni-device ivshmem,chardev<span class="token operator">=</span>nahanni,size<span class="token operator">=</span>32m,msi<span class="token operator">=</span>off <span class="token parameter variable">-serial</span> telnet:0.0.0.0:4000,server,nowait,nodelay-enable-kvm<span class="token operator">&amp;</span>

<span class="token comment"># inside VM</span>
modprobe kvm_ivshmem
cat/proc/devices <span class="token operator">|</span> <span class="token function">grep</span> kvm_ivshmem
mknod-mode<span class="token operator">=</span><span class="token number">666</span> /dev/ivshmem c <span class="token number">245</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参考文档</strong></p>`,3),_={href:"http://dpdk.org/doc/guides/prog_guide/ring_lib.html",target:"_blank",rel:"noopener noreferrer"},D={href:"http://dpdk.org/doc/guides-16.04/prog_guide/ivshmem_lib.html",target:"_blank",rel:"noopener noreferrer"},f={href:"http://slideplayer.com/slide/4900352/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.slideshare.net/jstleger/7-dpdk-summit-2014-v-mwareintel-virtualization",target:"_blank",rel:"noopener noreferrer"};function A(q,P){const s=o("ExternalLinkIcon");return r(),l("div",null,[u,e("blockquote",null,[e("p",null,[n("图片来源"),e("a",d,[n("Ring Library - dpdk.org"),t(s)])])]),p,m,h,e("blockquote",null,[e("p",null,[n("图片来源"),e("a",g,[n("DPDK IVSHMEM Library"),t(s)])])]),v,E,e("blockquote",null,[e("p",null,[n("图片来源"),e("a",b,[n("使用OVS DPDK (by quqi99)"),t(s)])])]),k,e("ul",null,[e("li",null,[e("a",_,[n("DPDK Ring Library"),t(s)])]),e("li",null,[e("a",D,[n("DPDK IVSHMEM Library"),t(s)])]),e("li",null,[e("a",f,[n("Accelerating the Path to the Guest"),t(s)])]),e("li",null,[e("a",B,[n("DPDK Summit - 08 Sept 2014 - VMware and Intel - Using DPDK In A Virtual World"),t(s)])])])])}const R=a(c,[["render",A],["__file","05. Ring和共享内存.html.vue"]]),M=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/05.%20Ring%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98.html","title":"DPDK Ring and ivshmem","lang":"zh-CN","frontmatter":{"description":"DPDK Ring and ivshmem DPDK Ring DPDK Ring提供了一个FIFO无锁队列，支持丰富的队列操作，比如 Multi-consumer or single-consumer dequeue Multi-producer or single-producer enqueue Bulk dequeue - Dequeues t...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/05.%20Ring%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"DPDK Ring and ivshmem"}],["meta",{"property":"og:description","content":"DPDK Ring and ivshmem DPDK Ring DPDK Ring提供了一个FIFO无锁队列，支持丰富的队列操作，比如 Multi-consumer or single-consumer dequeue Multi-producer or single-producer enqueue Bulk dequeue - Dequeues t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DPDK Ring and ivshmem\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"DPDK Ring and ivshmem","slug":"dpdk-ring-and-ivshmem","link":"#dpdk-ring-and-ivshmem","children":[{"level":2,"title":"DPDK Ring","slug":"dpdk-ring","link":"#dpdk-ring","children":[]},{"level":2,"title":"ivshmem","slug":"ivshmem","link":"#ivshmem","children":[{"level":3,"title":"ivshmem使用示例","slug":"ivshmem使用示例","link":"#ivshmem使用示例","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.05,"words":316},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/05. Ring和共享内存.md","excerpt":"\\n<h2>DPDK Ring</h2>\\n<p><code>DPDK Ring</code>提供了一个<code>FIFO</code>无锁队列，支持丰富的队列操作，比如</p>\\n<ul>\\n<li>Multi-consumer or single-consumer dequeue</li>\\n<li>Multi-producer or single-producer enqueue</li>\\n<li>Bulk dequeue - Dequeues the specified count of objects if successful; otherwise fails</li>\\n<li>Bulk enqueue - Enqueues the specified count of objects if successful; otherwise fails</li>\\n<li>Burst dequeue - Dequeue the maximum available objects if the specified count cannot be fulfilled</li>\\n<li>Burst enqueue - Enqueue the maximum available objects if the specified count cannot be fulfilled</li>\\n</ul>","autoDesc":true}');export{R as comp,M as data};
