import{_ as l,c as i,b as e,o as t}from"./app-CWZ_wCfK.js";const a={};function s(o,n){return t(),i("div",null,n[0]||(n[0]=[e(`<h1 id="数值类型-低占用类型" tabindex="-1"><a class="header-anchor" href="#数值类型-低占用类型"><span>数值类型+低占用类型</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>数据类型</p><ul><li>基本数据类型 <ul><li>数值型 <ul><li>整数类型 (int, int8, int16, int32, int64) (uint, uint8, uint16, uint32, uint64) (byte)</li><li>浮点类型 (float32, float64)</li></ul></li><li><s>字符型</s> (没有单独的字符型，使用byte来保存单个字母字符)</li><li>布尔型 (bool)</li><li>字符串 (string)，在Go里字符串居然是基本数据类型，其他语言基本不属于</li></ul></li><li>派生数据类型/复杂数据类型 <ul><li>指针</li><li>数组</li><li>结构体</li><li>管道</li><li>函数</li><li>切片</li><li>接口</li><li>map</li></ul></li></ul><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><p>和其他语言都差不多</p><p>分类：(int, int8, int16, int32, int64) (uint, uint8, uint16, uint32, uint64) (byte)</p><ul><li>有u表示无符号，无u有符号。末尾带数字就表示占几个bit</li><li>例外1：没有数字的根据机器来定 <ul><li>int == int32 (32位系统) == int64 (64位系统)</li><li>uint == uint32 (32位系统) == uint64 (64位系统)</li></ul></li><li>例外2：(说好的建议只有一种写法呢……不建议使用) <ul><li>rune，等价于int32</li><li>byte，等价于uint8</li></ul></li></ul><p>选用：Go默认优先使用int类型。遵循保小不保大的原则，即保证程序正确运行下，尽量使用占用空间小的数据类型</p><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型"><span>浮点类型</span></a></h2><p>和其他语言都差不多</p><p>分类：(float32, float64)，Go默认有限</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> num1 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">3.14</span>
<span class="token keyword">var</span> num2 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14</span>
<span class="token keyword">var</span> num3 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">314E-2</span> <span class="token comment">// E可以小写</span>
<span class="token keyword">var</span> num4 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">314E+2</span> <span class="token comment">// E可以小写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选用：Go默认优先使用float64类型</p><h2 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h2><p>占一个字节</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> flag1 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> flag2 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">var</span> flag3 <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const r=l(a,[["render",s],["__file","02_数值类型_低占用类型.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02_%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"数值类型+低占用类型","lang":"zh-CN","frontmatter":{"description":"数值类型+低占用类型 数据类型 数据类型 基本数据类型 数值型 整数类型 (int, int8, int16, int32, int64) (uint, uint8, uint16, uint32, uint64) (byte) 浮点类型 (float32, float64) (没有单独的字符型，使用byte来保存单个字母字符) 布尔型 (bool) ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/02_%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02_%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"数值类型+低占用类型"}],["meta",{"property":"og:description","content":"数值类型+低占用类型 数据类型 数据类型 基本数据类型 数值型 整数类型 (int, int8, int16, int32, int64) (uint, uint8, uint16, uint32, uint64) (byte) 浮点类型 (float32, float64) (没有单独的字符型，使用byte来保存单个字母字符) 布尔型 (bool) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数值类型+低占用类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"数值类型+低占用类型","slug":"数值类型-低占用类型","link":"#数值类型-低占用类型","children":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"整数类型","slug":"整数类型","link":"#整数类型","children":[]},{"level":2,"title":"浮点类型","slug":"浮点类型","link":"#浮点类型","children":[]},{"level":2,"title":"布尔类型","slug":"布尔类型","link":"#布尔类型","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/02_数据+算法/02_数值类型+低占用类型.md","excerpt":"\\n<h2>数据类型</h2>\\n<p>数据类型</p>\\n<ul>\\n<li>基本数据类型\\n<ul>\\n<li>数值型\\n<ul>\\n<li>整数类型 (int, int8, int16, int32, int64) (uint, uint8, uint16, uint32, uint64) (byte)</li>\\n<li>浮点类型 (float32, float64)</li>\\n</ul>\\n</li>\\n<li><s>字符型</s> (没有单独的字符型，使用byte来保存单个字母字符)</li>\\n<li>布尔型 (bool)</li>\\n<li>字符串 (string)，在Go里字符串居然是基本数据类型，其他语言基本不属于</li>\\n</ul>\\n</li>\\n<li>派生数据类型/复杂数据类型\\n<ul>\\n<li>指针</li>\\n<li>数组</li>\\n<li>结构体</li>\\n<li>管道</li>\\n<li>函数</li>\\n<li>切片</li>\\n<li>接口</li>\\n<li>map</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,u as data};
