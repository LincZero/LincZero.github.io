import{_ as s,c as a,e as t,o as p}from"./app-Bk_erI9r.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="《python绝技-运用python成为顶级黑客》" tabindex="-1"><a class="header-anchor" href="#《python绝技-运用python成为顶级黑客》"><span>《Python绝技 运用Python成为顶级黑客》</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="用python进行渗透测试" tabindex="-1"><a class="header-anchor" href="#用python进行渗透测试"><span>用Python进行渗透测试</span></a></h1><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点"><span>知识点</span></a></h2><h3 id="morris蠕虫" tabindex="-1"><a class="header-anchor" href="#morris蠕虫"><span>Morris蠕虫</span></a></h3><ul><li>历史 <ul><li>略</li></ul></li><li>攻击方式：三管齐下，任何一个成功就会执行一个小程序，下载并执行病毒的其余部分 <ul><li>UNIX邮件发送程序的漏洞</li><li>UNIX系统fnger守护进程中的一个独立的漏洞</li><li>用一些常见的用户名/密码，尝试连接那些使用RSH（<em>remote shell</em>，远程shell）协议的目标主机</li></ul></li></ul><h2 id="端口扫描" tabindex="-1"><a class="header-anchor" href="#端口扫描"><span>端口扫描</span></a></h2><p>为了与TCP端口（TCP 80、TCP 25、TCP 21等）进行交互，一般先建立TCP套接字</p><p>可用通过BSD套接字的API来实现</p><p>原理（两种常用的）</p><ul><li>TCP端口扫描：向一系列常用的端口发送<code>TCP SYN</code>数据报，并等待<code>TCP ACK</code>响应</li><li>TCP连接扫描：使用完整的三次握手来确定服务器或端口是否可用</li></ul><h3 id="socket手写实现版本" tabindex="-1"><a class="header-anchor" href="#socket手写实现版本"><span>socket手写实现版本</span></a></h3><ul><li>知识点：<code>optparse模块</code>、<code>socket模块</code>、<code>threading模块的Thread类与信号量屏幕锁</code></li><li>demo（<code>portscanner.py</code>）（已经实验，代码有效，但测试时端口均未打开）</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># coding=utf-8										# 防止Linux编码失败</span>
<span class="token keyword">import</span> optparse  									<span class="token comment"># 命令行参数解析模块</span>
<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>  								<span class="token comment"># 网络模块，这里导入了全部...于是代码看起来有点...</span>

<span class="token keyword">def</span> <span class="token function">connScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">:</span>  					<span class="token comment"># 连接扫描</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        connSkt <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>			<span class="token comment"># 创建socket实例</span>
        connSkt<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span>				<span class="token comment"># 连接指定ip和端口</span>
        connSkt<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;ViolentPython\\r\\n&#39;</span><span class="token punctuation">)</span>				<span class="token comment"># 发送一些字符串过去</span>
        results <span class="token operator">=</span> connSkt<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>						<span class="token comment"># 读取接下来的信息（Banner信息）</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[+]%d/tcp open&#39;</span><span class="token operator">%</span> tgtPort					<span class="token comment"># 连接成功则打印端口名和Banner并关闭端口，否则就打印端口没有打开</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[+] &#39;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>rusults<span class="token punctuation">)</span>
        connSkt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[-]%d/tcp closed&#39;</span><span class="token operator">%</span> tgtPort

<span class="token keyword">def</span> <span class="token function">portScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPorts<span class="token punctuation">)</span><span class="token punctuation">:</span> 					<span class="token comment"># 端口扫描</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        tgtIP <span class="token operator">=</span> gethostbyname<span class="token punctuation">(</span>tgtHost<span class="token punctuation">)</span>					<span class="token comment"># 尝试寻找主机（socket函数？）</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;[-] Cannot resolve &#39;%s&#39;: Unkown host&quot;</span><span class="token operator">%</span>tgtHost
        <span class="token keyword">return</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        tgtName <span class="token operator">=</span> gethostbyaddr<span class="token punctuation">(</span>tgtIP<span class="token punctuation">)</span>					<span class="token comment"># 尝试通过ip获取主机名（socket函数？）</span>
        <span class="token keyword">print</span> <span class="token string">&#39;\\n[+] Scan Results for: &#39;</span><span class="token operator">+</span>tgtName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;\\n[+] Scan Results for: &#39;</span><span class="token operator">+</span>tgtIP
    setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>								<span class="token comment"># 设置超时（socket函数）</span>
    <span class="token keyword">for</span> tgtPort <span class="token keyword">in</span> tgtPorts<span class="token punctuation">:</span>							<span class="token comment"># 遍历端口字典并调用\`连接扫描\`</span>
        <span class="token keyword">print</span> <span class="token string">&#39;Scanning port &#39;</span><span class="token operator">+</span>tgtPort
        connScan<span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span>					<span class="token comment"># 调用连接扫描</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>											<span class="token comment"># 入口函数</span>
    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">&#39;usage %prog &#39;</span><span class="token operator">+</span><span class="token string">&#39;-H &lt;target host&gt; -p &lt;target port&gt;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 传入主机名和端口</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-H&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtHost&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target host&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-p&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtPort&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target port[s] separated by comma&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tgtHost <span class="token operator">=</span> options<span class="token punctuation">.</span>tgtHost							<span class="token comment"># 目标主机</span>
    tgtPorts <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 目标端口</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tgtHost<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tgtPorts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 					<span class="token comment"># 参数检查</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[-] You must specify a target host and port[s].&#39;</span>
        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage
        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    portScan<span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPorts<span class="token punctuation">)</span>							<span class="token comment"># 调用连接扫描</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>							<span class="token comment"># 启动入口函数</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token triple-quoted-string string">&#39;&#39;&#39;
$ python portscanner.py -H 192.168.1.37 -p 21,22,80
[+] Scan Results for: 192.168.1.37
Scanning port 21
[+] 21/tcp oprn
[+] 220 FreeFloat Ftp Server (Version 1.00)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>改进（线程扫描，把connScan函数作为线程来调用）</p><p>但注意这里的多线程有一个缺点：connScan()函数有输出，如果多个线程同时输出，有可能会出现乱码和失序</p><p>为了让一个函数获得完整的屏幕控制权，需要使用一个<code>信号量</code>（<em>semaphore</em>）</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> tgtPort <span class="token keyword">in</span> tgtPorts<span class="token punctuation">:</span>
    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>tgrget<span class="token operator">=</span>connScan<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>改进2：屏幕锁</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>screen Lock <span class="token operator">=</span> semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>					<span class="token comment"># 信号量（threading模块的函数）</span>
<span class="token keyword">def</span> <span class="token function">connScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        connSkt <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>
        connSkt<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span>
        connSkt<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;ViolentPython\\r\\n&#39;</span><span class="token punctuation">)</span>
        results <span class="token operator">=</span> connSkt<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        screenLock<span class="token punctuation">.</span>qcquire<span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment"># 输出前进行屏幕锁</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[+]%d/tcp open&#39;</span><span class="token operator">%</span> tgtPort
        <span class="token keyword">print</span> <span class="token string">&#39;[+] &#39;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>rusults<span class="token punctuation">)</span>
        											<span class="token comment"># 解除连接放后面了</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        screenLock<span class="token punctuation">.</span>qcquire<span class="token punctuation">(</span><span class="token punctuation">)</span>						<span class="token comment"># 输出前进行屏幕锁</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[-]%d/tcp closed&#39;</span><span class="token operator">%</span> tgtPort
    <span class="token keyword">finally</span><span class="token punctuation">:</span>										<span class="token comment"># 输出完解除屏幕锁</span>
        screenLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
        connSkt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>finaly（线程调用好像有点问题，不能用......先不管了）</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># coding=utf-8										# 防止Linux编码失败</span>
<span class="token keyword">import</span> optparse  									<span class="token comment"># 命令行参数解析模块</span>
<span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>  								<span class="token comment"># 网络模块，这里导入了全部...于是代码看起来有点...</span>
<span class="token keyword">from</span> threading <span class="token keyword">import</span> <span class="token operator">*</span>								<span class="token comment"># 多线程模块</span>
screen Lock <span class="token operator">=</span> semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>					<span class="token comment"># 信号量（threading模块的函数）</span>

<span class="token keyword">def</span> <span class="token function">connScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">:</span>  					<span class="token comment"># 连接扫描</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        connSkt <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>			<span class="token comment"># 创建socket实例</span>
        connSkt<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span>				<span class="token comment"># 连接指定ip和端口</span>
        connSkt<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">&#39;ViolentPython\\r\\n&#39;</span><span class="token punctuation">)</span>				<span class="token comment"># 发送一些字符串过去</span>
        results <span class="token operator">=</span> connSkt<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>						<span class="token comment"># 读取接下来的信息（Banner信息）</span>
        screenLock<span class="token punctuation">.</span>qcquire<span class="token punctuation">(</span><span class="token punctuation">)</span>							<span class="token comment"># 输出前进行屏幕锁</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[+]%d/tcp open&#39;</span><span class="token operator">%</span> tgtPort					<span class="token comment"># 连接成功则打印端口名和Banner并关闭端口，否则就打印端口没有打开</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[+] &#39;</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>rusults<span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        screenLock<span class="token punctuation">.</span>qcquire<span class="token punctuation">(</span><span class="token punctuation">)</span>							<span class="token comment"># 输出前进行屏幕锁</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[-]%d/tcp closed&#39;</span><span class="token operator">%</span> tgtPort
	<span class="token keyword">finally</span><span class="token punctuation">:</span>										
        screenLock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>							<span class="token comment"># 输出完解除屏幕锁</span>
        connSkt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">portScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPorts<span class="token punctuation">)</span><span class="token punctuation">:</span> 					<span class="token comment"># 端口扫描</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        tgtIP <span class="token operator">=</span> gethostbyname<span class="token punctuation">(</span>tgtHost<span class="token punctuation">)</span>					<span class="token comment"># 尝试寻找主机（socket函数？）</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;[-] Cannot resolve &#39;%s&#39;: Unkown host&quot;</span><span class="token operator">%</span>tgtHost
        <span class="token keyword">return</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        tgtName <span class="token operator">=</span> gethostbyaddr<span class="token punctuation">(</span>tgtIP<span class="token punctuation">)</span>					<span class="token comment"># 尝试通过ip获取主机名（socket函数？）</span>
        <span class="token keyword">print</span> <span class="token string">&#39;\\n[+] Scan Results for: &#39;</span><span class="token operator">+</span>tgtName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&#39;\\n[+] Scan Results for: &#39;</span><span class="token operator">+</span>tgtIP
    setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>								<span class="token comment"># 设置超时（socket函数）				</span>
    <span class="token keyword">for</span> tgtPort <span class="token keyword">in</span> tgtPorts<span class="token punctuation">:</span>							<span class="token comment"># 遍历端口字典并调用\`连接扫描\`</span>
    	t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>tgrget<span class="token operator">=</span>connScan<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 线程方式调用连接扫描</span>
    	t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>											<span class="token comment"># 入口函数</span>
    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">&#39;usage %prog &#39;</span><span class="token operator">+</span><span class="token string">&#39;-H &lt;target host&gt; -p &lt;target port&gt;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 传入主机名和端口</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-H&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtHost&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target host&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-p&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtPort&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target port[s] separated by comma&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tgtHost <span class="token operator">=</span> options<span class="token punctuation">.</span>tgtHost							<span class="token comment"># 目标主机</span>
    tgtPorts <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 目标端口</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tgtHost<span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tgtPorts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 				<span class="token comment"># 参数检查</span>
        <span class="token keyword">print</span> <span class="token string">&#39;[-] You must specify a target host and port[s].&#39;</span>
        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage								<span class="token comment"># 打印格式（最刚开始设置那串）</span>
        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    portScan<span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPorts<span class="token punctuation">)</span>							<span class="token comment"># 调用连接扫描</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>							<span class="token comment"># 启动入口函数</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="namp版本" tabindex="-1"><a class="header-anchor" href="#namp版本"><span>namp版本</span></a></h3><ul><li>知识点：<code>optparse模块</code>、<code>nmap模块工具包</code></li><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> nmap
<span class="token keyword">import</span> optparse

<span class="token keyword">def</span> <span class="token function">nmapScan</span><span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span><span class="token punctuation">:</span>
    nmScan <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span><span class="token punctuation">)</span>
    nmScan<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span>
    state <span class="token operator">=</span> nmScan<span class="token punctuation">[</span>tgtHost<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;tcp&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span> <span class="token string">&quot;[*] &quot;</span><span class="token operator">+</span>tgtHost<span class="token operator">+</span><span class="token string">&quot; tcp/&quot;</span><span class="token operator">+</span>tgtPort<span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token operator">+</span>state

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token string">&#39;usage%prog &#39;</span><span class="token operator">+</span><span class="token string">&#39;-H &lt;target host&gt; -p &lt;target port&gt;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 传入主机名和端口</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-H&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtHost&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target host&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">&#39;-p&#39;</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">&#39;tgtPort&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;specify target port[s] separated by comma&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_atgs<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tgtHost <span class="token operator">=</span> options<span class="token punctuation">.</span>tgtHost							<span class="token comment"># 目标主机</span>
    tgtPorts <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>tgtPort<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 目标端口</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tgtHost <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tgtPorts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 			<span class="token comment"># 参数检查</span>
        <span class="token keyword">print</span> parser<span class="token punctuation">.</span>usage								<span class="token comment"># 打印格式（最刚开始设置那串）</span>
        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tgtPort <span class="token keyword">in</span> tgtPorts<span class="token punctuation">:</span>
        nmapScan<span class="token punctuation">(</span>tgtHost<span class="token punctuation">,</span> tgtPort<span class="token punctuation">)</span>						<span class="token comment"># 使用nmapScan扫描端口（相当于原来的连接扫描+端口扫描）</span>
        
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
$ python nmapScan.py -H 10.50.60.125 -p 21,1720
[*] 10.50.60.125 tcp/21 open
[*] 10.50.60.125 tcp/1720 filtered  # 能扫描出防火墙的访问请求过滤，而单一的TCP连接扫描做不到这点
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssh僵尸网络" tabindex="-1"><a class="header-anchor" href="#ssh僵尸网络"><span>SSH僵尸网络</span></a></h2><ul><li><p>前提知识</p><ul><li><code>RSH</code>（<em>Remote Shell</em>，远程shell）协议，1988年问世 <ul><li>为系统管理员提供了一种很棒的远程连接方法，并能在主机上运行一系列终端命令对它进行管理</li><li>尽管并不安全（是Morris蠕虫使用的三种攻击方式之一）</li></ul></li><li><code>SSH</code>（<em>Secure Shell</em>，安全shell）协议 <ul><li>在<code>RSH</code>中增加了一个公钥加密算法（不过并不能防范暴力破解）</li><li>最终<code>SSH</code>取代了<code>RSH</code></li></ul></li></ul></li><li><p>知识点：<code>Pexpect</code>模块</p></li></ul><h3 id="用pexpect与ssh交互" tabindex="-1"><a class="header-anchor" href="#用pexpect与ssh交互"><span>用<code>Pexpect</code>与SSH交互</span></a></h3><h3 id="用pxssh暴力破解ssh密码" tabindex="-1"><a class="header-anchor" href="#用pxssh暴力破解ssh密码"><span>用<code>Pxssh</code>暴力破解SSH密码</span></a></h3><h3 id="利用ssh中的弱私钥" tabindex="-1"><a class="header-anchor" href="#利用ssh中的弱私钥"><span>利用SSH中的弱私钥</span></a></h3><h3 id="构建ssh僵尸网络" tabindex="-1"><a class="header-anchor" href="#构建ssh僵尸网络"><span>构建SSH僵尸网络</span></a></h3><h2 id="利用ftp与web批量抓-肉鸡" tabindex="-1"><a class="header-anchor" href="#利用ftp与web批量抓-肉鸡"><span>利用FTP与Web批量抓 “肉鸡”</span></a></h2><h3 id="用python构建匿名ftp扫描器" tabindex="-1"><a class="header-anchor" href="#用python构建匿名ftp扫描器"><span>用Python构建匿名FTP扫描器</span></a></h3><h3 id="使用ftplib暴力破解ftp用户口令" tabindex="-1"><a class="header-anchor" href="#使用ftplib暴力破解ftp用户口令"><span>使用<code>Ftplib</code>暴力破解FTP用户口令</span></a></h3><h3 id="在ftp服务器上搜索网页" tabindex="-1"><a class="header-anchor" href="#在ftp服务器上搜索网页"><span>在FTP服务器上搜索网页</span></a></h3><h3 id="在网页中加入恶意注入代码" tabindex="-1"><a class="header-anchor" href="#在网页中加入恶意注入代码"><span>在网页中加入恶意注入代码</span></a></h3><h3 id="整合全部的攻击" tabindex="-1"><a class="header-anchor" href="#整合全部的攻击"><span>整合全部的攻击</span></a></h3><h2 id="conficker-为什么努力做就够了" tabindex="-1"><a class="header-anchor" href="#conficker-为什么努力做就够了"><span>Conficker，为什么努力做就够了</span></a></h2><h3 id="conficker蠕虫" tabindex="-1"><a class="header-anchor" href="#conficker蠕虫"><span>Conficker蠕虫</span></a></h3><h3 id="使用metasploit攻击windows-smb服务" tabindex="-1"><a class="header-anchor" href="#使用metasploit攻击windows-smb服务"><span>使用<code>Metasploit</code>攻击<code>Windows SMB</code>服务</span></a></h3><p><code>The Metasploit Framework</code>，<code>Metasploit 框架</code>，简称<code>MSF</code></p><h3 id="编写python脚本与metasploit交互" tabindex="-1"><a class="header-anchor" href="#编写python脚本与metasploit交互"><span>编写Python脚本与<code>Metasploit</code>交互</span></a></h3><h3 id="暴力破解口令-远程执行一个进程" tabindex="-1"><a class="header-anchor" href="#暴力破解口令-远程执行一个进程"><span>暴力破解口令，远程执行一个进程</span></a></h3><h3 id="把所有的代码放在一起-构成我们自己的conficker" tabindex="-1"><a class="header-anchor" href="#把所有的代码放在一起-构成我们自己的conficker"><span>把所有的代码放在一起，构成我们自己的<code>Conficker</code></span></a></h3><h2 id="编写你自己的0day概念验证代码" tabindex="-1"><a class="header-anchor" href="#编写你自己的0day概念验证代码"><span>编写你自己的0day概念验证代码</span></a></h2><h3 id="基于栈的缓冲区溢出攻击" tabindex="-1"><a class="header-anchor" href="#基于栈的缓冲区溢出攻击"><span>基于栈的缓冲区溢出攻击</span></a></h3><h3 id="添加攻击的关键元素" tabindex="-1"><a class="header-anchor" href="#添加攻击的关键元素"><span>添加攻击的关键元素</span></a></h3><h3 id="发送漏洞利用代码" tabindex="-1"><a class="header-anchor" href="#发送漏洞利用代码"><span>发送漏洞利用代码</span></a></h3><h3 id="汇总得到完整的漏洞利用脚本" tabindex="-1"><a class="header-anchor" href="#汇总得到完整的漏洞利用脚本"><span>汇总得到完整的漏洞利用脚本</span></a></h3>`,47)]))}const i=s(e,[["render",o],["__file","2. 用Python进行渗透测试.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Hack/%E3%80%8APython%E7%BB%9D%E6%8A%80%20%E8%BF%90%E7%94%A8Python%E6%88%90%E4%B8%BA%E9%A1%B6%E7%BA%A7%E9%BB%91%E5%AE%A2%E3%80%8B/2.%20%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html","title":"《Python绝技 运用Python成为顶级黑客》","lang":"zh-CN","frontmatter":{"description":"《Python绝技 运用Python成为顶级黑客》 目录 用Python进行渗透测试 知识点 Morris蠕虫 历史 略 攻击方式：三管齐下，任何一个成功就会执行一个小程序，下载并执行病毒的其余部分 UNIX邮件发送程序的漏洞 UNIX系统fnger守护进程中的一个独立的漏洞 用一些常见的用户名/密码，尝试连接那些使用RSH（remote shell，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Hack/%E3%80%8APython%E7%BB%9D%E6%8A%80%20%E8%BF%90%E7%94%A8Python%E6%88%90%E4%B8%BA%E9%A1%B6%E7%BA%A7%E9%BB%91%E5%AE%A2%E3%80%8B/2.%20%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《Python绝技 运用Python成为顶级黑客》"}],["meta",{"property":"og:description","content":"《Python绝技 运用Python成为顶级黑客》 目录 用Python进行渗透测试 知识点 Morris蠕虫 历史 略 攻击方式：三管齐下，任何一个成功就会执行一个小程序，下载并执行病毒的其余部分 UNIX邮件发送程序的漏洞 UNIX系统fnger守护进程中的一个独立的漏洞 用一些常见的用户名/密码，尝试连接那些使用RSH（remote shell，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《Python绝技 运用Python成为顶级黑客》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《Python绝技 运用Python成为顶级黑客》","slug":"《python绝技-运用python成为顶级黑客》","link":"#《python绝技-运用python成为顶级黑客》","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"用Python进行渗透测试","slug":"用python进行渗透测试","link":"#用python进行渗透测试","children":[{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[{"level":3,"title":"Morris蠕虫","slug":"morris蠕虫","link":"#morris蠕虫","children":[]}]},{"level":2,"title":"端口扫描","slug":"端口扫描","link":"#端口扫描","children":[{"level":3,"title":"socket手写实现版本","slug":"socket手写实现版本","link":"#socket手写实现版本","children":[]},{"level":3,"title":"namp版本","slug":"namp版本","link":"#namp版本","children":[]}]},{"level":2,"title":"SSH僵尸网络","slug":"ssh僵尸网络","link":"#ssh僵尸网络","children":[{"level":3,"title":"用Pexpect与SSH交互","slug":"用pexpect与ssh交互","link":"#用pexpect与ssh交互","children":[]},{"level":3,"title":"用Pxssh暴力破解SSH密码","slug":"用pxssh暴力破解ssh密码","link":"#用pxssh暴力破解ssh密码","children":[]},{"level":3,"title":"利用SSH中的弱私钥","slug":"利用ssh中的弱私钥","link":"#利用ssh中的弱私钥","children":[]},{"level":3,"title":"构建SSH僵尸网络","slug":"构建ssh僵尸网络","link":"#构建ssh僵尸网络","children":[]}]},{"level":2,"title":"利用FTP与Web批量抓 “肉鸡”","slug":"利用ftp与web批量抓-肉鸡","link":"#利用ftp与web批量抓-肉鸡","children":[{"level":3,"title":"用Python构建匿名FTP扫描器","slug":"用python构建匿名ftp扫描器","link":"#用python构建匿名ftp扫描器","children":[]},{"level":3,"title":"使用Ftplib暴力破解FTP用户口令","slug":"使用ftplib暴力破解ftp用户口令","link":"#使用ftplib暴力破解ftp用户口令","children":[]},{"level":3,"title":"在FTP服务器上搜索网页","slug":"在ftp服务器上搜索网页","link":"#在ftp服务器上搜索网页","children":[]},{"level":3,"title":"在网页中加入恶意注入代码","slug":"在网页中加入恶意注入代码","link":"#在网页中加入恶意注入代码","children":[]},{"level":3,"title":"整合全部的攻击","slug":"整合全部的攻击","link":"#整合全部的攻击","children":[]}]},{"level":2,"title":"Conficker，为什么努力做就够了","slug":"conficker-为什么努力做就够了","link":"#conficker-为什么努力做就够了","children":[{"level":3,"title":"Conficker蠕虫","slug":"conficker蠕虫","link":"#conficker蠕虫","children":[]},{"level":3,"title":"使用Metasploit攻击Windows SMB服务","slug":"使用metasploit攻击windows-smb服务","link":"#使用metasploit攻击windows-smb服务","children":[]},{"level":3,"title":"编写Python脚本与Metasploit交互","slug":"编写python脚本与metasploit交互","link":"#编写python脚本与metasploit交互","children":[]},{"level":3,"title":"暴力破解口令，远程执行一个进程","slug":"暴力破解口令-远程执行一个进程","link":"#暴力破解口令-远程执行一个进程","children":[]},{"level":3,"title":"把所有的代码放在一起，构成我们自己的Conficker","slug":"把所有的代码放在一起-构成我们自己的conficker","link":"#把所有的代码放在一起-构成我们自己的conficker","children":[]}]},{"level":2,"title":"编写你自己的0day概念验证代码","slug":"编写你自己的0day概念验证代码","link":"#编写你自己的0day概念验证代码","children":[{"level":3,"title":"基于栈的缓冲区溢出攻击","slug":"基于栈的缓冲区溢出攻击","link":"#基于栈的缓冲区溢出攻击","children":[]},{"level":3,"title":"添加攻击的关键元素","slug":"添加攻击的关键元素","link":"#添加攻击的关键元素","children":[]},{"level":3,"title":"发送漏洞利用代码","slug":"发送漏洞利用代码","link":"#发送漏洞利用代码","children":[]},{"level":3,"title":"汇总得到完整的漏洞利用脚本","slug":"汇总得到完整的漏洞利用脚本","link":"#汇总得到完整的漏洞利用脚本","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.11,"words":1833},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Hack/《Python绝技 运用Python成为顶级黑客》/2. 用Python进行渗透测试.md","excerpt":"\\n<h1>目录</h1>\\n<h1>用Python进行渗透测试</h1>\\n<h2>知识点</h2>\\n<h3>Morris蠕虫</h3>\\n<ul>\\n<li>历史\\n<ul>\\n<li>略</li>\\n</ul>\\n</li>\\n<li>攻击方式：三管齐下，任何一个成功就会执行一个小程序，下载并执行病毒的其余部分\\n<ul>\\n<li>UNIX邮件发送程序的漏洞</li>\\n<li>UNIX系统fnger守护进程中的一个独立的漏洞</li>\\n<li>用一些常见的用户名/密码，尝试连接那些使用RSH（<em>remote shell</em>，远程shell）协议的目标主机</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Hack/《Python绝技 运用Python成为顶级黑客》/2. 用Python进行渗透测试.md","value":{"title":"2. 用Python进行渗透测试","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Hack/《Python绝技 运用Python成为顶级黑客》/2. 用Python进行渗透测试.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,u as data};
