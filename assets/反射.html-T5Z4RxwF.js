import{_ as s,c as a,e as t,o as e}from"./app-DOwvp1dV.js";const p={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="反射-relect包" tabindex="-1"><a class="header-anchor" href="#反射-relect包"><span>反射 (relect包)</span></a></h1><p>核心：relect包</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Go反射可以做什么？</p><ul><li>运行时动态获取：变量的各种信息 <ul><li>普通变量的 类型、类别等</li><li>结构体的 字段、方法</li></ul></li><li>运行时动态修改和调用 <ul><li>修改变量的值</li><li>调用关联的方法</li></ul></li></ul><p>相关函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// \`reflect包.TypeOf(变量名)\`，获取变量的类型，返回reflect.Type类型</span>
<span class="token keyword">func</span> <span class="token function">TypeOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Type

<span class="token comment">// \`reflectb包.ValueOf(变量名)\`，获取变量的值，返回reflect.Value类型。通过该类型可以获取该变量很多信息</span>
<span class="token keyword">func</span> <span class="token function">ValueOf</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="两个主要方法和类型" tabindex="-1"><a class="header-anchor" href="#两个主要方法和类型"><span>两个主要方法和类型</span></a></h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>TypeOf</span></a></h3><p>见下，代码连在一起了</p><h3 id="valueof" tabindex="-1"><a class="header-anchor" href="#valueof"><span>ValueOf</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span><span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">testReflect</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>	<span class="token punctuation">{</span> 		<span class="token comment">// 100 (\`int\` -&gt; \`interface{}\`, 空接口)</span>
    <span class="token comment">// TypeOf</span>
    reType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;reType:&quot;</span><span class="token punctuation">,</span> reType<span class="token punctuation">)</span>		<span class="token comment">// int</span>
    
    <span class="token comment">// ValueOf</span>
    reValue2 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>		<span class="token comment">// 100 (\`interface{}\` -&gt; \`reflect.Value\`)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;reValue:&quot;</span><span class="token punctuation">,</span> reValue2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基本类型</span>
	<span class="token keyword">var</span> num <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token function">testReflect</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    
    <span class="token comment">// 结构体类型</span>
    student <span class="token operator">:=</span> Student <span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span> <span class="token string">&quot;Lili&quot;</span><span class="token punctuation">,</span>
        Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token function">testReflect</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reflect-type" tabindex="-1"><a class="header-anchor" href="#reflect-type"><span>reflect.Type</span></a></h2><h3 id="获取变量的类别" tabindex="-1"><a class="header-anchor" href="#获取变量的类别"><span>获取变量的类别</span></a></h3><p>获取变量类别有两种方式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>k1 <span class="token operator">:=</span> reType<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span>		<span class="token comment">// struct</span>

k2 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span>		<span class="token comment">// struct</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意区分：<strong>类别</strong> 与 <strong>类型</strong></p><p>Kind方法只能获取到是struct (类别)，并无法获取到类名 (类型)</p><h2 id="reflect-value" tabindex="-1"><a class="header-anchor" href="#reflect-value"><span>reflect.Value</span></a></h2><h3 id="类型互转" tabindex="-1"><a class="header-anchor" href="#类型互转"><span>类型互转</span></a></h3><h4 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h4><p>基本、interface{}、reflect.Value 三者互转</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>num1 <span class="token operator">:=</span> <span class="token number">100</span>

<span class="token keyword">var</span> inter1 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> num1		<span class="token comment">// 100 (\`int\` 			-&gt; \`interface{}\`)</span>
num2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> inter2<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>				<span class="token comment">// 100 (\`interface{}\`	-&gt; \`int\`) 类型断言</span>

reValue2 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>	<span class="token comment">// 100 (\`int\`			-&gt; \`reflect.Value\`)</span>
reValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>inter1<span class="token punctuation">)</span>	<span class="token comment">// 100 (\`interface{}\`	-&gt; \`reflect.Value\`)</span>

num3 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">// 100 (\`reflect.Value\`	-&gt; \`int\`)</span>
inter2 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 		<span class="token comment">// 100 (\`reflect.Value\`	-&gt; \`interface{}\`)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h4><p>结构体、interface{}、reflect.Value 三者互转</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>student <span class="token operator">:=</span> Student <span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;Lili&quot;</span><span class="token punctuation">,</span>
    Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> inter1 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> stu1		<span class="token comment">// Lili 18 (\`XStruct\` 		-&gt; \`interface{}\`)</span>
stu2<span class="token punctuation">,</span> flag <span class="token operator">:=</span> inter2<span class="token punctuation">.</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>		<span class="token comment">// Lili 18 (\`interface{}\`	-&gt; \`XStruct\`) 类型断言，需要判断flag</span>

reValue2 <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>	<span class="token comment">// Lili 18 (\`XStruct\`		-&gt; \`reflect.Value\`)</span>
reValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>inter1<span class="token punctuation">)</span>	<span class="token comment">// Lili 18 (\`interface{}\`	-&gt; \`reflect.Value\`)</span>

stu3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rV<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>	<span class="token comment">// Lili 18 (\`reflect.Value\`	-&gt; \`XStruct\`) 这里无法直接转换，需要先转空接口再用类型断言</span>
inter2 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 		<span class="token comment">// Lili 18 (\`reflect.Value\`	-&gt; \`interface{}\`)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改变量的值" tabindex="-1"><a class="header-anchor" href="#修改变量的值"><span>修改变量的值</span></a></h3><h4 id="基本类型-elem、-setint" tabindex="-1"><a class="header-anchor" href="#基本类型-elem、-setint"><span>基本类型 (.Elem、.setInt)</span></a></h4><p>需要用到一个接口</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 原型</span>
<span class="token comment">// @param v Elem方法会返回v保管值的Value封装，或v持有指针指向值的Value封装。如果v的Kind不是Interface或Ptr会Panic</span>
<span class="token comment">// @return 如果v持有值为nil，会返回Value零值</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v Value<span class="token punctuation">)</span> <span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先这里修改成传递地址</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 变量准备</span>
<span class="token keyword">var</span> i1 <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">var</span> inter1 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>i1

<span class="token comment">// 修改值</span>
reValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>inter1<span class="token punctuation">)</span>		<span class="token comment">// 对应 \`*int\`</span>
reValue2 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">// 对应 \`int引用\`</span>
reValue2<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>						<span class="token comment">// 修改值</span>

fmt<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span>							<span class="token comment">// 40</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结构体-多了个field-方法" tabindex="-1"><a class="header-anchor" href="#结构体-多了个field-方法"><span>结构体 (多了个Field()方法)</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 变量准备</span>
<span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>
s <span class="token operator">:=</span> Student<span class="token punctuation">{</span>
    Name<span class="token punctuation">:</span> <span class="token string">&quot;Lili&quot;</span>
    Age<span class="token punctuation">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> inter1 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s

<span class="token comment">// 修改值</span>
reValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>inter1<span class="token punctuation">)</span>		<span class="token comment">// 对应 \`*Student\`</span>
reValue2 <span class="token operator">:=</span> reValue<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">// 对应 \`Student引用\`</span>
<span class="token comment">//n := reValue2.NumField()				// 字段数。2</span>
reValue2<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;LiSi&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// 修改值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作结构体的字段和方法" tabindex="-1"><a class="header-anchor" href="#操作结构体的字段和方法"><span>操作结构体的字段和方法</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span><span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 类</span>
<span class="token keyword">type</span> Student <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Student<span class="token punctuation">)</span> <span class="token function">CPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;调用了Print方法&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;学生名:&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Student<span class="token punctuation">)</span> <span class="token function">AGetSum</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n1<span class="token operator">+</span>n2
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Student<span class="token punctuation">)</span> <span class="token function">BSet</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	s<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
    s<span class="token punctuation">.</span>Age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token comment">// 操作结构体进行反射</span>
<span class="token keyword">func</span> <span class="token function">TestStudentStruct</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    reV <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>			<span class="token comment">// \`interface{}\` -&gt; \`reflect.Value\`</span>
    
    <span class="token comment">// 结构体字段</span>
    n1 <span class="token operator">:=</span> reV<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">// 获取结构体字段数量。打印：2</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>				<span class="token comment">// 获取结构体字段内容</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个字段的值为:%v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 结构体方法</span>
    n2 <span class="token operator">:=</span> reV<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">// 获取结构体方法数量。打印：3</span>
    vaV<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>				<span class="token comment">// 调用结构体方法。 (需要注意，这玩意居然是按字母而非定义顺序排序的。这里调用的是CPrint方法)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 主函数</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> Student<span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span> <span class="token string">&quot;Lili&quot;</span>
        Age<span class="token punctuation">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
    <span class="token function">TestStudentStruct</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const o=s(p,[["render",l],["__file","反射.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/04_%E4%BC%98%E5%8C%96/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84.html","title":"反射 (relect包)","lang":"zh-CN","frontmatter":{"description":"反射 (relect包) 核心：relect包 概念 Go反射可以做什么？ 运行时动态获取：变量的各种信息 普通变量的 类型、类别等 结构体的 字段、方法 运行时动态修改和调用 修改变量的值 调用关联的方法 相关函数 两个主要方法和类型 TypeOf 见下，代码连在一起了 ValueOf reflect.Type 获取变量的类别 获取变量类别有两种方式...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Go/04_%E4%BC%98%E5%8C%96/%E5%8F%8D%E5%B0%84/%E5%8F%8D%E5%B0%84.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"反射 (relect包)"}],["meta",{"property":"og:description","content":"反射 (relect包) 核心：relect包 概念 Go反射可以做什么？ 运行时动态获取：变量的各种信息 普通变量的 类型、类别等 结构体的 字段、方法 运行时动态修改和调用 修改变量的值 调用关联的方法 相关函数 两个主要方法和类型 TypeOf 见下，代码连在一起了 ValueOf reflect.Type 获取变量的类别 获取变量类别有两种方式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射 (relect包)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"反射 (relect包)","slug":"反射-relect包","link":"#反射-relect包","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"两个主要方法和类型","slug":"两个主要方法和类型","link":"#两个主要方法和类型","children":[{"level":3,"title":"TypeOf","slug":"typeof","link":"#typeof","children":[]},{"level":3,"title":"ValueOf","slug":"valueof","link":"#valueof","children":[]}]},{"level":2,"title":"reflect.Type","slug":"reflect-type","link":"#reflect-type","children":[{"level":3,"title":"获取变量的类别","slug":"获取变量的类别","link":"#获取变量的类别","children":[]}]},{"level":2,"title":"reflect.Value","slug":"reflect-value","link":"#reflect-value","children":[{"level":3,"title":"类型互转","slug":"类型互转","link":"#类型互转","children":[{"level":4,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":4,"title":"结构体","slug":"结构体","link":"#结构体","children":[]}]},{"level":3,"title":"修改变量的值","slug":"修改变量的值","link":"#修改变量的值","children":[{"level":4,"title":"基本类型 (.Elem、.setInt)","slug":"基本类型-elem、-setint","link":"#基本类型-elem、-setint","children":[]},{"level":4,"title":"结构体 (多了个Field()方法)","slug":"结构体-多了个field-方法","link":"#结构体-多了个field-方法","children":[]}]},{"level":3,"title":"操作结构体的字段和方法","slug":"操作结构体的字段和方法","link":"#操作结构体的字段和方法","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.95,"words":884},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/04_优化/反射/反射.md","excerpt":"\\n<p>核心：relect包</p>\\n<h2>概念</h2>\\n<p>Go反射可以做什么？</p>\\n<ul>\\n<li>运行时动态获取：变量的各种信息\\n<ul>\\n<li>普通变量的 类型、类别等</li>\\n<li>结构体的 字段、方法</li>\\n</ul>\\n</li>\\n<li>运行时动态修改和调用\\n<ul>\\n<li>修改变量的值</li>\\n<li>调用关联的方法</li>\\n</ul>\\n</li>\\n</ul>\\n<p>相关函数</p>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token comment\\">// `reflect包.TypeOf(变量名)`，获取变量的类型，返回reflect.Type类型</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">TypeOf</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> Type\\n\\n<span class=\\"token comment\\">// `reflectb包.ValueOf(变量名)`，获取变量的值，返回reflect.Value类型。通过该类型可以获取该变量很多信息</span>\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">ValueOf</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token keyword\\">interface</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span> Value\\n</code></pre></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/04_优化/反射/反射.md","value":{"title":"反射","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Go/04_优化/反射/反射.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,u as data};
