import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as s,b as n,d as t,e as p}from"./app-_2Vv0rF6.js";const l="/assets/6f50adacc83987d8dceaf34144df59ce-u_mVvsDf.png",u={},k=p(`<h1 id="markdown-it-插件如何写-三" tabindex="-1"><a class="header-anchor" href="#markdown-it-插件如何写-三"><span>markdown-it 插件如何写（三）</span></a></h1><p>前两遍笔记分别修改了渲染和解析规则，已经能满足大部分自定义插件了，这章算是一些扩展</p><h2 id="markdown-it-inline" tabindex="-1"><a class="header-anchor" href="#markdown-it-inline"><span>markdown-it-inline</span></a></h2><p><code>markdown-it</code> 的作者提供了 <code>markdown-it-inine</code> 用于方便修改 inline tokens 。举个例子，如果我们给所有的链接添加 <code>target=&quot;_blank&quot;</code>，正常你需要这样写：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// Remember old renderer, if overridden, or proxy to default renderer</span>
<span class="token comment">// 记住旧的渲染器，如果被覆盖，或者代理默认渲染器</span>
<span class="token keyword">var</span> defaultRender <span class="token operator">=</span> md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>link_open <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">renderToken</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">link_open</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// If you are sure other plugins can&#39;t add \`target\` - drop check below</span>
    <span class="token comment">// 如果你确定其他插件不能添加 \`target\`，请在下面勾选</span>
	<span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  	<span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add new attribute，添加新属性</span>
  	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    	tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// replace value of existing attr，替换现有attr的值</span>
  	<span class="token punctuation">}</span>

  	<span class="token comment">// pass token to default renderer.</span>
    <span class="token comment">// 传递令牌到默认渲染器</span>
  	<span class="token keyword">return</span> <span class="token function">defaultRender</span><span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> options<span class="token punctuation">,</span> env<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>markdown-it-for-inline</code> 后：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-for-inline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token string">&#39;url_new_win&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;link_open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 里面的写法基本和之前一样</span>
	<span class="token keyword">var</span> aIndex <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrIndex</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>aIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">attrPush</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>aIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要替换掉某个文字，也可以使用 <code>markdown-it-for-inline</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-for-inline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// plugin params are:</span>
<span class="token comment">//</span>
<span class="token comment">// - rule name (should be unique)</span>
<span class="token comment">// - token type to apply</span>
<span class="token comment">// - function</span>
<span class="token comment">//</span>
<span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> <span class="token string">&#39;foo_replace&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>content <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="markdown-it-container、-容器" tabindex="-1"><a class="header-anchor" href="#markdown-it-container、-容器"><span>markdown-it-container、<code>:::</code> 容器</span></a></h2><blockquote><p>Plugin for creating block-level custom containers for markdown-it markdown parser.</p><p>译：用于为 markdown-it md解析器创建块级自定义容器的插件</p></blockquote>`,11),r={href:"https://github.com/markdown-it/markdown-it-container",target:"_blank",rel:"noopener noreferrer"},d=p(`<p>有了这个插件，你可以这样使用 markdown 语法：</p><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>::: spoiler click me
<span class="token italic"><span class="token punctuation">*</span><span class="token content">content</span><span class="token punctuation">*</span></span>
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这其中的 <code>:::</code> 是插件定义的语法，它会取出 <code>:::</code> 后的字符，在这个例子中是 <code>warning</code>，并提供方法自定义渲染结果：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-container&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;spoiler&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>

	<span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> params<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^spoiler\\s+(.*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token punctuation">}</span><span class="token punctuation">,</span>

  	<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 通过 tokens[idx].info.trim() 取出 &#39;click me&#39; 字符串</span>
    	<span class="token keyword">var</span> m <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^spoiler\\s+(.*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    	<span class="token comment">// 开始标签的 nesting 为 1，结束标签的 nesting 为 -1</span>
    	<span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>nesting <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      		<span class="token comment">// 开始标签</span>
      		<span class="token keyword">return</span> <span class="token string">&#39;&lt;details&gt;&lt;summary&gt;&#39;</span> <span class="token operator">+</span> md<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">escapeHtml</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;&lt;/summary&gt;\\n&#39;</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      		<span class="token comment">// 结束标签</span>
      		<span class="token keyword">return</span> <span class="token string">&#39;&lt;/details&gt;\\n&#39;</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
  	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终渲染的结果为：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m={href:"https://vuepress.vuejs.org/zh/guide/markdown.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,[s("img",{src:l,alt:"img",loading:"lazy"})],-1),g=s("code",null,"markdown-it-container",-1),b={href:"https://github.com/vuejs/vuepress/blob/5329b74c687f3b5276db72358bb8b8f4a6a0d95f/packages/%40vuepress/markdown/lib/containers.js",target:"_blank",rel:"noopener noreferrer"},w=p(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it-container&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> md <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  md
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">createContainer</span><span class="token punctuation">(</span><span class="token string">&#39;tip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TIP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">createContainer</span><span class="token punctuation">(</span><span class="token string">&#39;warning&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;WARNING&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token function">createContainer</span><span class="token punctuation">(</span><span class="token string">&#39;danger&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;WARNING&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createContainer</span> <span class="token punctuation">(</span>klass<span class="token punctuation">,</span> defaultTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>container<span class="token punctuation">,</span> klass<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">render</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
      <span class="token keyword">const</span> info <span class="token operator">=</span> token<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>nesting <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div class=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>klass<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> custom-block&quot;&gt;&lt;p class=&quot;custom-block-title&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info <span class="token operator">||</span> defaultTitle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;/div&gt;\\n</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function f(y,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[k,s("p",null,[n("markdown-it 的作者同样提供了 "),s("a",r,[n("markdown-it-container"),t(a)]),n(" 用于快速创建块级自定义容器。")]),d,s("p",null,[n("像 VuePress 提供了"),s("a",m,[n("自定义容器"),t(a)]),n("：")]),v,s("p",null,[n("其实就是用 "),g,n(" 实现的，其实现 "),s("a",b,[n("源码"),t(a)]),n(" 为：")]),w])}const _=e(u,[["render",f],["__file","18. markdown-it插件如何写3.html.vue"]]),A=JSON.parse(`{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/18.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%993.html","title":"markdown-it 插件如何写（三）","lang":"zh-CN","frontmatter":{"description":"markdown-it 插件如何写（三） 前两遍笔记分别修改了渲染和解析规则，已经能满足大部分自定义插件了，这章算是一些扩展 markdown-it-inline markdown-it 的作者提供了 markdown-it-inine 用于方便修改 inline tokens 。举个例子，如果我们给所有的链接添加 target=\\"_blank\\"，正常...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/18.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%993.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"markdown-it 插件如何写（三）"}],["meta",{"property":"og:description","content":"markdown-it 插件如何写（三） 前两遍笔记分别修改了渲染和解析规则，已经能满足大部分自定义插件了，这章算是一些扩展 markdown-it-inline markdown-it 的作者提供了 markdown-it-inine 用于方便修改 inline tokens 。举个例子，如果我们给所有的链接添加 target=\\"_blank\\"，正常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"markdown-it 插件如何写（三）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"markdown-it 插件如何写（三）","slug":"markdown-it-插件如何写-三","link":"#markdown-it-插件如何写-三","children":[{"level":2,"title":"markdown-it-inline","slug":"markdown-it-inline","link":"#markdown-it-inline","children":[]},{"level":2,"title":"markdown-it-container、::: 容器","slug":"markdown-it-container、-容器","link":"#markdown-it-container、-容器","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.47,"words":742},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/18. markdown-it插件如何写3.md","excerpt":"\\n<p>前两遍笔记分别修改了渲染和解析规则，已经能满足大部分自定义插件了，这章算是一些扩展</p>\\n<h2>markdown-it-inline</h2>\\n<p><code>markdown-it</code> 的作者提供了 <code>markdown-it-inine</code> 用于方便修改 inline  tokens 。举个例子，如果我们给所有的链接添加 <code>target=\\"_blank\\"</code>，正常你需要这样写：</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// Remember old renderer, if overridden, or proxy to default renderer</span>\\n<span class=\\"token comment\\">// 记住旧的渲染器，如果被覆盖，或者代理默认渲染器</span>\\n<span class=\\"token keyword\\">var</span> defaultRender <span class=\\"token operator\\">=</span> md<span class=\\"token punctuation\\">.</span>renderer<span class=\\"token punctuation\\">.</span>rules<span class=\\"token punctuation\\">.</span>link_open <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span>tokens<span class=\\"token punctuation\\">,</span> idx<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">,</span> env<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">renderToken</span><span class=\\"token punctuation\\">(</span>tokens<span class=\\"token punctuation\\">,</span> idx<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\nmd<span class=\\"token punctuation\\">.</span>renderer<span class=\\"token punctuation\\">.</span>rules<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">link_open</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span>tokens<span class=\\"token punctuation\\">,</span> idx<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">,</span> env<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// If you are sure other plugins can't add \`target\` - drop check below</span>\\n    <span class=\\"token comment\\">// 如果你确定其他插件不能添加 \`target\`，请在下面勾选</span>\\n\\t<span class=\\"token keyword\\">var</span> aIndex <span class=\\"token operator\\">=</span> tokens<span class=\\"token punctuation\\">[</span>idx<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">attrIndex</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  \\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>aIndex <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    \\ttokens<span class=\\"token punctuation\\">[</span>idx<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">attrPush</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'_blank'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// add new attribute，添加新属性</span>\\n  \\t<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    \\ttokens<span class=\\"token punctuation\\">[</span>idx<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>attrs<span class=\\"token punctuation\\">[</span>aIndex<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'_blank'</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// replace value of existing attr，替换现有attr的值</span>\\n  \\t<span class=\\"token punctuation\\">}</span>\\n\\n  \\t<span class=\\"token comment\\">// pass token to default renderer.</span>\\n    <span class=\\"token comment\\">// 传递令牌到默认渲染器</span>\\n  \\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">defaultRender</span><span class=\\"token punctuation\\">(</span>tokens<span class=\\"token punctuation\\">,</span> idx<span class=\\"token punctuation\\">,</span> options<span class=\\"token punctuation\\">,</span> env<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{_ as comp,A as data};
