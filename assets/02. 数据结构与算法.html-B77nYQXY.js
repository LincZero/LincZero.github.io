import{_ as l,e as n,g as s,h as i,r as e,o as m}from"./app-EuS-Ookm.js";const r={};function p(d,a){const t=e("Mermaid");return m(),n("div",null,[a[0]||(a[0]=s('<h1 id="数据结构与算法" tabindex="-1"><a class="header-anchor" href="#数据结构与算法"><span>数据结构与算法</span></a></h1><h2 id="磁盘存储链式的b树与b-树" tabindex="-1"><a class="header-anchor" href="#磁盘存储链式的b树与b-树"><span>磁盘存储链式的B树与B+树</span></a></h2><h3 id="内存与磁盘" tabindex="-1"><a class="header-anchor" href="#内存与磁盘"><span>内存与磁盘</span></a></h3><table><thead><tr><th></th><th>SRAM</th><th>DRAM</th><th>SSD</th><th>HDD</th></tr></thead><tbody><tr><td>存储信息</td><td>触发器</td><td>电容</td><td>闪存芯片</td><td>磁盘 (机器臂磁头读)</td></tr><tr><td>破坏性读出</td><td>非</td><td>是</td><td></td><td></td></tr><tr><td>需要刷新</td><td><strong>不要</strong></td><td>需要</td><td></td><td></td></tr><tr><td>送行列地址</td><td>同时送</td><td>分两次送</td><td></td><td></td></tr><tr><td>运行速度</td><td><strong>快</strong></td><td>慢</td><td></td><td></td></tr><tr><td>集成度</td><td>低</td><td>高</td><td></td><td></td></tr><tr><td>发热量</td><td>大</td><td><strong>小</strong></td><td></td><td></td></tr><tr><td>存储成本</td><td>高</td><td><strong>中</strong></td><td>较低</td><td>极低</td></tr><tr><td>断电数据丢失</td><td>是</td><td>是</td><td><strong>否</strong></td><td><strong>否</strong></td></tr></tbody></table><p>比较</p><table><thead><tr><th></th><th>寄存器、缓存</th><th>内存</th><th>磁盘-机械</th><th>磁盘-固态</th></tr></thead><tbody><tr><td>速度</td><td>超快</td><td>快</td><td>很慢</td><td>慢</td></tr><tr><td>实现细节</td><td><strong>SRAM</strong>、静态随机存储器<br>断电会数据丢失</td><td><strong>DRAM</strong>、动态随机存储器<br>断电/不刷新电路会数据丢失</td><td><strong>HDD</strong> 机械臂和旋转磁盘<br>慢在物理移动的寻址<br>断电数据不丢失</td><td><strong>SSD</strong> 闪存芯片、顺序访问<br>断电数据不丢失</td></tr><tr><td>适合结构</td><td>(同内存)</td><td>红黑树<br>重要的是减少IO、比较、交换等。<br>而非寻址次数</td><td>B/B+树<br>重要的是减少寻址次数，降低树的层高<br>而且范围查询更好</td><td>红黑树速率可能更高<br>但B+树有范围查询，<br>看具体场景选用</td></tr></tbody></table><p>GPT4</p><blockquote><ul><li>内存（DRAM）：存储需要尽量减少比较、交换等次数，而非寻址次数。适合红黑树、二叉树。</li><li>机械硬盘：存储需要的是减少寻址次数（很慢，需要机械活动）。适合B+树。（机械的顺序是随机的几百倍左右）</li></ul><p>但我存在以下疑问：</p><ul><li>内存的寻址成本也大吧（cache miss、段页式转换等），随机读写肯定也比顺序要慢，只是可能没机器相差那么夸张吗？或者说比起比较和内存操作来说，寻址的成本没那么高？</li><li>固态硬盘呢？固态的的随机存储性能原理是怎么样的？（固态硬盘顺序仍能到达随机的10倍左右）B+树在固态中的地位会不会没有像在机器硬盘中那么明显？是否在固态硬盘中，红黑树等类型也会相当不错甚至优于机器硬盘？</li></ul><p>答</p><ul><li>内存（DRAM） <ul><li>虽然寻址成本存在（比如缓存未命中、段页式转换等），但是相比于机械硬盘，这些成本相对较小。内存的寻址速度非常快，而且内存的随机访问和顺序访问的<strong>速度差异相对较小</strong>。因此，对于内存来说，更重要的是减少比较、交换等操作的次数，这就是为什么像红黑树这样的平衡搜索树在内存中使用更为广泛。</li></ul></li><li>对于固态硬盘（SSD）来说，它的工作方式与机械硬盘有很大的不同。机械硬盘的读写速度受到<strong>物理因素（如磁头移动）的限制</strong>，因此寻址成本很高。而固态硬盘则是基于<strong>闪存</strong>技术，没有机械部件，因此寻址成本相对较低，随机访问和顺序访问的速度差异也小于机械硬盘。 <ul><li>但是，固态硬盘的写入操作有一定的寿命限制，因此需要通过一些策略（如写入平衡）来延长其使用寿命。（通常会尽量将数据写入到相同的闪存块）</li><li>B+树在固态硬盘中的效果可能不如在机械硬盘中明显，但是由于其高效的<strong>范围查询</strong>能力，仍然被广泛使用。红黑树等平衡搜索树在固态硬盘中的效果可能会比在机械硬盘中更好，因为固态硬盘的随机访问性能更好。</li><li>对于数据结构的选择，B+树在SSD中的地位仍然是非常重要的。这是因为B+树的设计在顺序读写方面非常优秀，能够充分利用SSD的性能。尽管红黑树等平衡二叉树在内存中的性能很好，但在硬盘存储中，尤其是在SSD中，由于其随机读写的特性，性能可能并不理想。当然，这也取决于具体的应用情况，某些特定的应用可能会有不同的最优数据结构。</li></ul></li></ul><p>总的来说，选择哪种数据结构，需要根据具体的应用场景和存储设备的特性来决定。例如：</p><ul><li>如果需要频繁进行大范围的查询，可能会选择B+树</li><li>如果需要频繁进行小范围的查询和更新，可能会选择红黑树</li></ul></blockquote><h3 id="b-b-树" tabindex="-1"><a class="header-anchor" href="#b-b-树"><span>B/B+树</span></a></h3><p>B树可以是多叉树（没定义多少叉）。一棵M阶B树，满足以下条件：</p><ol><li>每个结点至多拥有M颗子树，根结占至少拥有两颗子树</li><li>除了根节点以外，其全每个分支结点至少拥有M/2棵子树</li><li><strong>所有的叶结点都在同一层上</strong></li><li>有k棵子树的分支结点则存在k-1个关键字，关键字按照递增顺序进行排序<br> （技巧：k-1是因为是按空隙插的，建议M/分叉数选偶数，关键字会是奇数，便于选择最中间的一个节点，便于分裂）</li><li>关键字数量满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>e</mi><mi>i</mi><mi>l</mi><mo stretchy="false">(</mo><mi>M</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>=</mo><mi>M</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">ceil(M/2)-1&lt;= n&lt;= M-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ce</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ol><p>两层 1024叉 x 4K = (1024 * 1024)个叶子 * 4K = 4G存储</p><h2 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树"><span>红黑树</span></a></h2><h3 id="三种应用场景" tabindex="-1"><a class="header-anchor" href="#三种应用场景"><span>三种应用场景</span></a></h3><h4 id="epoll-底层的红黑树实现" tabindex="-1"><a class="header-anchor" href="#epoll-底层的红黑树实现"><span>epoll - 底层的红黑树实现</span></a></h4><p>检测IO是否就绪（需要注意：epoll不是仅网络的，是文件系统，文件IO。他的源码是放在 <code>linux-4.4.240/fs/eventpoll.c</code> 里的）</p><p>这个场景为有哪些数据可选？</p><ul><li>多层hash <ul><li>存储空间：FD少时，内存占用大</li><li>查找性能：层数加长度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>D</mi><mo>+</mo><mi>L</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\log(D+L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mclose">)</span></span></span></span>，不一定比红黑树快，寻址较少</li></ul></li><li>红黑树 <ul><li>存储空间：FD少时，占用较小。占用为线性</li><li>查找性能：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\log(D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span></li><li>场景： <ul><li>数量不确定</li><li>……</li></ul></li></ul></li><li>数组</li><li>b/b+树</li></ul><p>为什么最后选择了红黑树？</p><ul><li>查找</li><li>对数两不确定</li><li>KV存储</li></ul><h5 id="epoll-实现" tabindex="-1"><a class="header-anchor" href="#epoll-实现"><span>epoll 实现</span></a></h5><p>（找老师要pdf）</p><h4 id="sk-buf-红黑树使用" tabindex="-1"><a class="header-anchor" href="#sk-buf-红黑树使用"><span>sk_buf - 红黑树使用</span></a></h4>',23)),i(t,{id:"mermaid-491",code:"eJxLL0osyFDwCeJ6vnfi096FCrq6dgp5mcnxQO7z3XNeNjS9bO19OnMFULw4Oz6pNC0NpOBpb/+LdeueLegACoe5Bce7uYBFd015PmXF8xXdT3f1IxvnEuDiDWTkgrWDRVBUAgCPIjzW"}),a[1]||(a[1]=s('<h5 id="sk-buff-实现" tabindex="-1"><a class="header-anchor" href="#sk-buff-实现"><span>sk_buff 实现</span></a></h5><p>sk_buff结构体：双链表、时间戳、红黑树</p><h4 id="内存块-红黑树组织" tabindex="-1"><a class="header-anchor" href="#内存块-红黑树组织"><span>内存块 - 红黑树组织</span></a></h4><p>描述一块内存</p><ul><li>start &amp; end</li><li>start &amp; len</li></ul><p>红黑树用start当key，block为存储</p><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h4><ul><li>定时器：fd与信息映射</li><li>消息队列：订阅</li><li>流控</li><li>……等等</li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>红黑树，一般不用自己写，懂原理就行，极少情况才会让你手写。</p><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>hash</span></a></h2><p>hash在后端开发不同阶段的妙用</p><ol><li>STL中hash的应用</li><li>hash在数据库中应用</li><li>反向代理中的负载均衡</li><li>性能优化利器 - 布隆过滤器</li><li>缓存横向扩展 - 分布式一致性hash</li></ol><p>hash两大应用特征：</p><ul><li>映射关系</li><li>强随机分布性</li></ul><p>两用</p><ul><li>分布性hash</li><li>一致性hash</li></ul><h3 id="stl与算法" tabindex="-1"><a class="header-anchor" href="#stl与算法"><span>STL与算法</span></a></h3><ul><li><h4 id="stl" tabindex="-1"><a class="header-anchor" href="#stl"><span>STL</span></a></h4><ul><li>unordered_* <ul><li>unordered_map</li><li>unordered_set</li><li>……</li></ul></li><li>与红黑树比较 <ul><li>……</li></ul></li></ul></li><li><h4 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h4><ul><li>设计类 <ul><li>拆分</li><li>利用hash特性（映射关系、强随机分布性）</li></ul></li><li>确定某个字符是否出现过 <ul><li>最长不重复出现字符的子字符串。<br> 方法：例如 “abbcd” -&gt; &quot;bcd&quot;，滑动窗口 (错位同向双指针) +hash (hash主要是128长度存储每个ascii码上次在滑动窗口内出现的位置)</li></ul></li></ul></li></ul><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><ul><li><h4 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>redis</span></a></h4></li><li><h4 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>mysql</span></a></h4><ul><li>B+ <ul><li>聚集索引B+树</li><li>辅助索引B+树</li></ul></li><li>自适应的hash索引 <ul><li>等值查询</li><li>通过缓存池的B+树页</li><li>innodb存储引擎自动根据访问频次以及模式来为某些页构建哈希索引</li></ul></li></ul></li></ul><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable"><span>hashtable</span></a></h3><ul><li><h4 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h4><ul><li>hash函数</li><li>数组</li><li>运算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">hash(key)\\% size=index</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ha</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span></li></ul></li><li><h4 id="hash-1" tabindex="-1"><a class="header-anchor" href="#hash-1"><span>hash</span></a></h4><ul><li>映射关系</li><li>强随机分布性</li><li>选择 <ul><li>siphash| 因为redis的key通常是有规律的| role:id</li><li>murmurhash2、city</li></ul></li></ul></li><li><h4 id="冲突" tabindex="-1"><a class="header-anchor" href="#冲突"><span>冲突</span></a></h4><ul><li>冲突的原因| 抽屉</li><li>负载因子| used/size</li><li>解决冲突 <ul><li>合理范围内 (负载因子0-1) <ul><li>链表法</li><li>最小堆、红黑树、跳表</li></ul></li><li>超出合理范围 <ul><li>扩容</li><li>缩容</li></ul></li></ul></li></ul></li></ul><h3 id="反向代理中的负载均衡" tabindex="-1"><a class="header-anchor" href="#反向代理中的负载均衡"><span>反向代理中的负载均衡</span></a></h3><p>分布式api网关 - nginx</p><p>请求</p><ul><li>有状态的</li><li>无状态的</li></ul><p>鉴权的功能</p><p>把ip进行hash：hash有映射关系和强随机分布性两个大特征，这里利用了映射关系（可以用二元组、五元组、六元组来做hash）</p><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h3><p>负载均衡、缓存</p><ul><li>MySQL。提升访问MySQL访问性能。根据 “读多写少 or 写多读少”，来修改MySQL代码 <ul><li>写多读少（确保数据正确的落盘） <ul><li>MyCat</li><li>分布式关系型数据库</li></ul></li><li>读多写少（读大于写10倍以上） <ul><li>布隆过滤器 <ul><li>缓存MsySQL已经存在的缓存。MySQL有自带的自适应hash缓存，但那个需要是自动的非自定义的，如果是 “预约” 式提前缓存就不行了</li><li>判断MySQL是否包含。如果不包含，直接返回。如果包含，先访问缓存数据库，如果还没有再访问MySQL</li></ul></li><li>memcached、redis缓存</li><li>缓存穿透（黑客可能会有缓存穿透攻击）</li></ul></li></ul></li><li>存储的时候（rocksdb） <ul><li>数据存储在内存和磁盘当中</li><li>如何查询k对应的v</li><li>先在内存中查询，然后去查询布隆过滤器，通过则在磁盘中查询</li></ul></li></ul><h3 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器"><span>布隆过滤器</span></a></h3><ul><li><p>组成 / 实现</p><ul><li><p>位图</p></li><li><p>多个hash函数</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">hash(key)\\%size=inde</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ha</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span></p></li><li><p>bitmap[index]=1</p></li><li><p>位图+多个hash函数。如果看新请求的多个hash后的位图的1位，是否有一个为0，若有，则不在缓存当中</p></li></ul></li><li><p>作用</p><ul><li>能确定某个key一定不存在</li><li>概率确定某个key存在</li><li>局限/缺点：<strong>不能删除</strong>数据（可增或不变）</li></ul></li><li><p>应用</p><ul><li>参数 <ul><li>n：预测往布隆过滤器存储多少元素</li><li>p：误判率</li><li>m：位图的大小</li><li>k：哈希函数的个数</li></ul></li><li>根据 n 和 p 确定 m 和 k</li><li>bool constain(key)</li><li>void insert(key)</li></ul></li></ul><h3 id="横向扩展-分布一致性hash" tabindex="-1"><a class="header-anchor" href="#横向扩展-分布一致性hash"><span>横向扩展（分布一致性hash）</span></a></h3><ul><li>计算型横向扩展</li><li>存储型横向扩展</li></ul>',36))])}const o=l(r,[["render",p],["__file","02. 数据结构与算法.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/02.%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html","title":"数据结构与算法","lang":"zh-CN","frontmatter":{"description":"数据结构与算法 磁盘存储链式的B树与B+树 内存与磁盘 比较 GPT4 内存（DRAM）：存储需要尽量减少比较、交换等次数，而非寻址次数。适合红黑树、二叉树。 机械硬盘：存储需要的是减少寻址次数（很慢，需要机械活动）。适合B+树。（机械的顺序是随机的几百倍左右） 但我存在以下疑问： 内存的寻址成本也大吧（cache miss、段页式转换等），随机读写肯...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E6%9E%B6%E6%9E%84/02.%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"数据结构与算法"}],["meta",{"property":"og:description","content":"数据结构与算法 磁盘存储链式的B树与B+树 内存与磁盘 比较 GPT4 内存（DRAM）：存储需要尽量减少比较、交换等次数，而非寻址次数。适合红黑树、二叉树。 机械硬盘：存储需要的是减少寻址次数（很慢，需要机械活动）。适合B+树。（机械的顺序是随机的几百倍左右） 但我存在以下疑问： 内存的寻址成本也大吧（cache miss、段页式转换等），随机读写肯..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.38,"words":2513},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/02. 数据结构与算法.md","excerpt":"\\n<h2>磁盘存储链式的B树与B+树</h2>\\n<h3>内存与磁盘</h3>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>SRAM</th>\\n<th>DRAM</th>\\n<th>SSD</th>\\n<th>HDD</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>存储信息</td>\\n<td>触发器</td>\\n<td>电容</td>\\n<td>闪存芯片</td>\\n<td>磁盘 (机器臂磁头读)</td>\\n</tr>\\n<tr>\\n<td>破坏性读出</td>\\n<td>非</td>\\n<td>是</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>需要刷新</td>\\n<td><strong>不要</strong></td>\\n<td>需要</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>送行列地址</td>\\n<td>同时送</td>\\n<td>分两次送</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>运行速度</td>\\n<td><strong>快</strong></td>\\n<td>慢</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>集成度</td>\\n<td>低</td>\\n<td>高</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>发热量</td>\\n<td>大</td>\\n<td><strong>小</strong></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>存储成本</td>\\n<td>高</td>\\n<td><strong>中</strong></td>\\n<td>较低</td>\\n<td>极低</td>\\n</tr>\\n<tr>\\n<td>断电数据丢失</td>\\n<td>是</td>\\n<td>是</td>\\n<td><strong>否</strong></td>\\n<td><strong>否</strong></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/02. 数据结构与算法.md","value":{"title":"02. 数据结构与算法","path":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++架构/02. 数据结构与算法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,c as data};
