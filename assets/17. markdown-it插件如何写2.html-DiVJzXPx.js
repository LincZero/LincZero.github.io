import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,d as n,e as t,a as p}from"./app-DUaYLZrg.js";const i="/assets/df72dcc7e7635d06ae0083fe8c920150-Cx4ES8xM.png",u="/assets/df50bed60f453b706fb489ad7de216b9-CZKZzx52.png",r="/assets/a03a691ffe7f04b54599a617a4637cb5-BWF2BBiN.png",k={},d=p('<h1 id="markdown-it-插件如何写-二" tabindex="-1"><a class="header-anchor" href="#markdown-it-插件如何写-二"><span>markdown-it 插件如何写（二）</span></a></h1><h2 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>Parse</span></a></h2><p><code>markdown-it</code>的渲染过程分为两部分，<code>Parse</code> 和 <code>Render</code>，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 <code>@ header</code> 为 <code>&lt;h1&gt;header&lt;/h1&gt;</code>，就可以从 <code>Parse</code> 过程入手。</p>',3),m={href:"https://markdown-it.github.io/markdown-it/#Ruler",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"Ruler",-1),b=p(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my_rule&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这句话的意思是指在 <code>markdown-it</code> 的解析 block 的一组规则中，在 <code>paragraph</code> 规则前插入一个名为 <code>my_rule</code> 的自定义规则，我们慢慢来解释。</p>`,2),g=s("li",null,[s("p",null,[n("首先是 "),s("code",null,"md.block.ruler"),n("，除此之外，还有 "),s("code",null,"md.inline.ruler"),n("、"),s("code",null,"md.core.ruler"),n(" 可以自定义其中的规则。")])],-1),h=s("code",null,".before",-1),f={href:"https://markdown-it.github.io/markdown-it/#Ruler",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"after",-1),y=s("code",null,"at",-1),w=s("code",null,"disable",-1),E=s("code",null,"enable",-1),x=s("li",null,[s("p",null,[n("接着是 "),s("code",null,"paragraph"),n("，我怎么知道插入在哪个规则前面或者后面呢？这就需要你看源码了，并没有文档给你讲这个……")])],-1),L=s("code",null,"md.block",-1),q={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"md.inline",-1),A={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_inline.js",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"md.core",-1),P={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_core.js",target:"_blank",rel:"noopener noreferrer"},D=s("code",null,"md.block",-1),j=p(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> _rules <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// First 2 params - rule name &amp; source. Secondary array - list of rules,</span>
  <span class="token comment">// which can be terminated by this one.</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">,</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span>       <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/code&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;fence&#39;</span><span class="token punctuation">,</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/fence&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/blockquote&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;hr&#39;</span><span class="token punctuation">,</span>         <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/hr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>       <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/reference&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;html_block&#39;</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/html_block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;heading&#39;</span><span class="token punctuation">,</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/heading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;lheading&#39;</span><span class="token punctuation">,</span>   <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/lheading&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/paragraph&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是<code>function replace(state)</code>，这里函数的参数其实不止有 <code>state</code>，我们查看任何一个具体规则的 parse 代码，就比如 <code>heading.js</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">heading</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
      pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
      max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出除了 <code>state</code>，还有 <code>startLine</code>、<code>endLine</code>、<code>silent</code>，而具体这其中的代码怎么写，其实最好的方式就是参考这些已经实现的代码。</p><h2 id="实例讲解-用-符号声明标题" tabindex="-1"><a class="header-anchor" href="#实例讲解-用-符号声明标题"><span>实例讲解，用@符号声明标题</span></a></h2><h3 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h3><p>接下来我们以解析 <code>@ header</code> 为 <code>&lt;h1&gt;header&lt;/h1&gt;</code>为例，讲解其中涉及的代码，这是要渲染的内容：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">markdownit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// md.block.ruler.before(...)</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@ header
	contentTwo
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常它的渲染结果是：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>@ header
contentTwo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而现在期望的渲染结果是：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>contentTwo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分析原解析" tabindex="-1"><a class="header-anchor" href="#分析原解析"><span>分析原解析</span></a></h3>`,13),N={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/heading.js",target:"_blank",rel:"noopener noreferrer"},S=p(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
      pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
      max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>parse 的过程是<strong>根据换行符逐行扫描</strong>的，所以每一行的内容都会执行我们这个自定义函数进行匹配，函数支持传入四个参数。其中，<code>state</code> 记录了各种状态数据，<code>startLine</code> 表示本次的起始行数，而 <code>endLine</code> 表示总的结束行数。</p><p>我们打印下 <code>state</code>、<code>startLine</code>，<code>endLine</code> 等数据：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
      pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
      max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是打印的结果：</p><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>其中 <code>state</code> 的内容我们简化下展示出来：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@ header\\ncontentTwo\\n&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;md&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;tokens&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;bMarks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行的起始位置</span>
    <span class="token string-property property">&quot;eMarks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行的终止位置</span>
    <span class="token string-property property">&quot;tShift&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行第一个非空格字符的位置</span>
    <span class="token string-property property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">// 部分含义已在上面的注释中标明</span>
<span class="token comment">// state的更多字段含义查看 [state_block.js](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/state_block.js) 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看下 <code>pos</code> 的计算逻辑为 <code>state.bMarks[startLine] + state.tShift[startLine]</code>，其中 <code>startLine</code> 是 0，所以 <code>pos = 0 + 0 = 0</code></p><p>再看下 <code>max</code> 的计算逻辑为 <code>state.eMarks[startLine]</code>，所以<code>max = 8</code></p><p>从这也可以看出，其实 <code>pos</code> 就是这行字符的初始位置，<code>max</code> 这行字符的结束位置</p><h3 id="定位" tabindex="-1"><a class="header-anchor" href="#定位"><span>定位</span></a></h3><p>通过 <code>pos</code> 和 <code>max</code>，我们可以截取出这行字符串：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
    	pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
		max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

    state<span class="token punctuation">.</span>line <span class="token operator">=</span> startLine <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果为：</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="最终代码-自定义插入tokens" tabindex="-1"><a class="header-anchor" href="#最终代码-自定义插入tokens"><span>最终代码，自定义插入tokens</span></a></h3><p>在代码里我们加入了<code>state.line = startLine + 1;</code>和 <code>return true</code>，这是为了进入到下一行的遍历之中。</p><p>如果我们能取出每次用于判断的字符串，那我们就可以进行正则匹配，如果匹配，就自定义 tokens，剩下的逻辑很简单，我们直接给出最后的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myplugin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span>startLine<span class="token punctuation">,</span>endLine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数准备</span>
	<span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
    	pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
        max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ch  <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定位</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token number">0x40</span><span class="token comment">/*@*/</span> <span class="token operator">||</span> pos <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^@\\s(.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> match <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 自定义插入tokens</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>match <span class="token operator">&amp;&amp;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;heading_open&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 插入h1起始token</span>
        token<span class="token punctuation">.</span>markup <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">[</span> startLine<span class="token punctuation">,</span> state<span class="token punctuation">.</span>line <span class="token punctuation">]</span><span class="token punctuation">;</span>

        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;inline&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 插入h1块里的内联token</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>content <span class="token operator">=</span> result<span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">[</span> startLine<span class="token punctuation">,</span> state<span class="token punctuation">.</span>line <span class="token punctuation">]</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;heading_close&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 插入h1结束token</span>
        token<span class="token punctuation">.</span>markup <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">;</span>

        state<span class="token punctuation">.</span>line <span class="token operator">=</span> startLine <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就实现了预期的效果：</p><figure><img src="`+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',22);function T(C,F){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,s("p",null,[n("在 "),s("a",m,[n("markdown-it 的官方文档"),t(a)]),n(" 里可以找到自定义 parse 规则的方式，那就是通过 "),v,n(" 类：")]),b,s("ol",null,[g,s("li",null,[s("p",null,[n("然后是 "),h,n("，查看 "),s("a",f,[n("Ruler"),t(a)]),n(" 相关的 API，还有 "),_,n("、"),y,n("、"),w,n("、"),E,n(" 等方法，这是因为规则是按照顺序执行的，某一规则的改变可能会影响其他规则。")])]),x]),s("p",null,[n("其中，如果是 "),L,n("，查看 "),s("a",q,[n("parse_block.js"),t(a)]),n("，如果是 "),B,n("，查看 "),s("a",A,[n("parse_inline.js"),t(a)]),n("，如果是 "),M,n("，查看 "),s("a",P,[n("parse_core.js"),t(a)]),n("，我们以 "),D,n(" 为例，可以看到源码里写了这些规则：")]),j,s("p",null,[n("我们来看看如何实现，先参照 "),s("a",N,[n("header.js"),t(a)]),n(" 的代码依葫芦画瓢：")]),S])}const J=e(k,[["render",T],["__file","17. markdown-it插件如何写2.html.vue"]]),O=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/17.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%992.html","title":"markdown-it 插件如何写（二）","lang":"zh-CN","frontmatter":{"description":"markdown-it 插件如何写（二） Parse markdown-it的渲染过程分为两部分，Parse 和 Render，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 @ header 为 <h1>header</h1>，就可以从 Parse 过程入手。 在 markdown-it 的官方文档 里可以找到自定义 pars...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/17.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%992.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"markdown-it 插件如何写（二）"}],["meta",{"property":"og:description","content":"markdown-it 插件如何写（二） Parse markdown-it的渲染过程分为两部分，Parse 和 Render，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 @ header 为 <h1>header</h1>，就可以从 Parse 过程入手。 在 markdown-it 的官方文档 里可以找到自定义 pars..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"markdown-it 插件如何写（二）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"markdown-it 插件如何写（二）","slug":"markdown-it-插件如何写-二","link":"#markdown-it-插件如何写-二","children":[{"level":2,"title":"Parse","slug":"parse","link":"#parse","children":[]},{"level":2,"title":"实例讲解，用@符号声明标题","slug":"实例讲解-用-符号声明标题","link":"#实例讲解-用-符号声明标题","children":[{"level":3,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":3,"title":"分析原解析","slug":"分析原解析","link":"#分析原解析","children":[]},{"level":3,"title":"定位","slug":"定位","link":"#定位","children":[]},{"level":3,"title":"最终代码，自定义插入tokens","slug":"最终代码-自定义插入tokens","link":"#最终代码-自定义插入tokens","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.36,"words":1308},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Markdown-it/《博客搭建》冴羽/17. markdown-it插件如何写2.md","autoDesc":true}');export{J as comp,O as data};
