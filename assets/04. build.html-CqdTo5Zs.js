import{_ as l,e as i,g as o,o as t}from"./app-EuS-Ookm.js";const n={};function a(d,e){return t(),i("div",null,e[0]||(e[0]=[o('<h1 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>build</span></a></h1><h2 id="cmake编译核心" tabindex="-1"><a class="header-anchor" href="#cmake编译核心"><span>cmake编译核心</span></a></h2><h3 id="两个核心步骤" tabindex="-1"><a class="header-anchor" href="#两个核心步骤"><span>两个核心步骤</span></a></h3><p>对底层构建工具缺乏认知的VS小白有个说法叫 &quot;VS巨婴&quot; (不是我说的)，意思就是离开了VS，或者没有那个运行按钮就不知道干啥了 (我以前也是哈)</p><ul><li>通用：两个步骤： <ul><li>配置阶段</li><li>构建阶段</li><li>运行阶段</li></ul></li><li>命令行：对应的就是以下两条主命令：(只是一般还会附上许多命令选项) <ul><li><code>cmake ..</code></li><li><code>cmake --build .</code></li></ul></li><li>CLion： <ul><li>你点击CMake的重新加载按钮就是配置阶段 (运行前也会自动运行这一部分)</li><li>点击运行按钮就是构建阶段</li></ul></li><li>VSCode：也同理。你安装好插件后： <ul><li>在 <code>CMakeLists.txt</code> 文件上Ctrl+S保存也会自动触发CMake部分 (运行前也会自动运行这一部分)</li><li>点击运行按钮就是构建阶段</li></ul></li></ul><p>可以看到，不同的软件本质上都是相同的。使用cmake时，运行都是执行这两条命令 (不算运行编译结果那条)</p><h3 id="智能选项" tabindex="-1"><a class="header-anchor" href="#智能选项"><span>智能选项</span></a></h3><p>不同的是，IDE可以帮你自动附加许多命令选项，比较方便。实例见 <a class="route-link nolebase-route-link-invalid" href="#" target="_target">../../../03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg#CppCMakeVcpkgTemplate</a>。而这些配置哪来的呢？</p><ul><li>CMakeLists.txt，并不存储这些信息</li><li>各种软件自身的解决方案，可以存储这些。如CLion的 <code>.idea</code>、VS的 <code>.vs</code> 或 <code>.sln</code>、VSCode 的 <code>.vscode/task.json</code><ul><li>例如 CLion <code>设置 &gt; 构建、执行、部署 &gt; CMake &gt; CMake options</code> 处理配置阶段的选项</li><li>例如 CLion <code>右上角运行按钮下拉框 &gt; 编辑配置 &gt; Target、程序实参等</code> 处理编译阶段、运行阶段的选项</li></ul></li><li><code>CMakePreset.json</code>。这是一种比较新和通用的解决方案。主要作用于构建阶段的配置 <ul><li>VSCode的CMake插件使用、CLion也能识别 (但好像识别不全? 识别不全的话要自己配一下)</li><li>主要的C ++ IDE应该已经支持CMakePresets.json，并且不需要特定的配置</li></ul></li></ul>',9)]))}const p=l(n,[["render",a],["__file","04. build.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/04.%20build.html","title":"build","lang":"zh-CN","frontmatter":{"description":"build cmake编译核心 两个核心步骤 对底层构建工具缺乏认知的VS小白有个说法叫 \\"VS巨婴\\" (不是我说的)，意思就是离开了VS，或者没有那个运行按钮就不知道干啥了 (我以前也是哈) 通用：两个步骤： 配置阶段 构建阶段 运行阶段 命令行：对应的就是以下两条主命令：(只是一般还会附上许多命令选项) cmake .. cmake --build...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/Cpp/04.%20build.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"build"}],["meta",{"property":"og:description","content":"build cmake编译核心 两个核心步骤 对底层构建工具缺乏认知的VS小白有个说法叫 \\"VS巨婴\\" (不是我说的)，意思就是离开了VS，或者没有那个运行按钮就不知道干啥了 (我以前也是哈) 通用：两个步骤： 配置阶段 构建阶段 运行阶段 命令行：对应的就是以下两条主命令：(只是一般还会附上许多命令选项) cmake .. cmake --build..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"build\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/04. build.md","excerpt":"\\n<h2>cmake编译核心</h2>\\n<h3>两个核心步骤</h3>\\n<p>对底层构建工具缺乏认知的VS小白有个说法叫 \\"VS巨婴\\" (不是我说的)，意思就是离开了VS，或者没有那个运行按钮就不知道干啥了 (我以前也是哈)</p>\\n<ul>\\n<li>通用：两个步骤：\\n<ul>\\n<li>配置阶段</li>\\n<li>构建阶段</li>\\n<li>运行阶段</li>\\n</ul>\\n</li>\\n<li>命令行：对应的就是以下两条主命令：(只是一般还会附上许多命令选项)\\n<ul>\\n<li><code>cmake ..</code></li>\\n<li><code>cmake --build .</code></li>\\n</ul>\\n</li>\\n<li>CLion：\\n<ul>\\n<li>你点击CMake的重新加载按钮就是配置阶段 (运行前也会自动运行这一部分)</li>\\n<li>点击运行按钮就是构建阶段</li>\\n</ul>\\n</li>\\n<li>VSCode：也同理。你安装好插件后：\\n<ul>\\n<li>在 <code>CMakeLists.txt</code> 文件上Ctrl+S保存也会自动触发CMake部分 (运行前也会自动运行这一部分)</li>\\n<li>点击运行按钮就是构建阶段</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/04. build.md","value":{"title":"04. build","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/Cpp/04. build.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,u as data};
