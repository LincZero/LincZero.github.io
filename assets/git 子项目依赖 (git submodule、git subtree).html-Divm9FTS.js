import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as p,b as s,d as e,e as a,a as i}from"./app-DNx16x_G.js";const c={},d=i('<h1 id="git子项目依赖" tabindex="-1"><a class="header-anchor" href="#git子项目依赖"><span>Git子项目依赖</span></a></h1><h2 id="git项目依赖的多种选择" tabindex="-1"><a class="header-anchor" href="#git项目依赖的多种选择"><span>git项目依赖的多种选择</span></a></h2><p>GPT</p><p>一个项目依赖另一项目应该使用哪种方式比较好：</p><ol><li>git依赖，从仓库clone时自动拉取另一个依赖项目到指定位置</li><li>cmake编译/install时，再进行依赖安装</li><li>进行CICD时，ci文件先进行对依赖项的clone，再进行编译</li></ol><hr><p>每种方式具有其自己的优点和适用场景，以下是一些可能的推荐：</p><ol><li>Git 依赖（使用git submodules或者git subtrees） <ul><li>这种方式适合于你<strong>经常需要更新或者修改依赖项的源代码</strong>的场景。你可以在你的项目中直接编辑和更新依赖项的代码，并且可以很方便地跟踪这些改动。但是，如果你只是简单地使用依赖项而不需要对其代码做修改，这种方式可能会引入一些不必要的复杂性。</li></ul></li><li>CMake 编译/install 时，再进行依赖安装 <ul><li>这种方式比较适合于你的依赖项是一些库或者编译工具，你不需要修改它们的代码，只需要在编译你的项目时使用它们。CMake可以自动下载和安装这些依赖项，这对于用户来说是比较方便的。</li></ul></li><li>进行 CI/CD 时，ci文件先进行对依赖项的clone，再进行编译 <ul><li>这种方式适合于你的项目已经有一个设定的CI/CD流程，你希望在每次构建时都能确保使用最新的依赖项。这种方式可以自动完成依赖项的更新和安装，无需用户手动介入。</li></ul></li></ol><p>故对于哪种方式比较好，将取决于你特定的项目需求及你对软件建构流程的个人偏好。</p><p>还有其他的方式来处理项目间的依赖关系。例如，你可以使用包管理器（如Python的pip，JavaScript的npm或者C++的Conan）来管理你的依赖项。包管理器最大的优点是可以自动处理依赖项的版本和更新，而且通常配有大量的开源库供你选择。</p><hr><p>选择</p><hr><p>选择哪种方式，取决于你的特定需求。一些可能的考虑因素包括：</p><ol><li>你需要对依赖项目进行多少修改？如果你需要<strong>频繁地修改</strong>依赖项，可能<strong>Git依赖</strong>会更方便些。</li><li>你的项目有多少自动化？如果你的项目有自动化的构建和部署流程，CI/CD可能会更合适。</li><li>你的依赖项有多复杂？如果你的依赖项有很多，并且还有自己的依赖关系，包管理器可能会更好。</li></ol><hr><p>使用</p><hr><ul><li>git依赖 <ul><li>你可以使用 <code>git submodule add</code> 命令来添加一个新的子模块，然后你就可以在你的仓库中直接编辑子模块的代码了。当你将改动推送到GitHub时，也需要将子模块的改动同时推送。</li></ul></li><li>cmake依赖 <ul><li>你需要在你的 CMakeLists.txt 文件中使用 <code>find_package</code> 或者 <code>add_subdirectory</code> 命令来添加你的依赖项。然后CMake会在编译时自动下载和安装这些依赖项。</li></ul></li><li>CI/CD依赖 <ul><li>你需要在你的CI配置文件中添加把依赖项作为构建步骤的一部分。例如，如果你使用的是GitHub Actions，你可以在你的工作流文件中添加一个新的步骤来clone你的依赖项的仓库。</li></ul></li><li>包管理器依赖 <ul><li>你只需在你的项目配置文件中指明你的依赖项和对应的版本。包管理器会自动下载和安装所需的所有依赖项。例如： <ul><li>Python的requirements.txt文件</li><li>JavaScript的package.json文件</li><li>C++的conanfile.txt文件</li></ul></li></ul></li></ul><h2 id="git-submodule-git-subtree" tabindex="-1"><a class="header-anchor" href="#git-submodule-git-subtree"><span>Git Submodule &amp; Git Subtree</span></a></h2><h3 id="简单介绍" tabindex="-1"><a class="header-anchor" href="#简单介绍"><span>简单介绍</span></a></h3><ul><li><p>Git Submodule 是指建立 main repo 与 sub repo 的 HEAD commit 连结</p></li><li><p>Git Subtree 是指将 main repo 包含 commit log 全部 copy 到新的 repo 中</p></li></ul><h3 id="与-monorepo-multirepo-关系" tabindex="-1"><a class="header-anchor" href="#与-monorepo-multirepo-关系"><span>与 Monorepo &amp; Multirepo 关系</span></a></h3>',23),r={href:"http://shachiku.life/posts/difference-between-subtree-and-submodule/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.darkthread.net/blog/git-subtree-notes/https://blog.puckwang.com/posts/2020/git-submodule-vs-subtree/",target:"_blank",rel:"noopener noreferrer"},m=i(`<p>看上去，Git Subtree 是 monorepo，而 Git Submodule 是 multirepo。但正如我一开始说的，他们都是 multirepo</p><p>在某种程度上，您可以将 Git Subtree 与 Monorepo 模式联系起来，将 Git Submodule 与 Multirepo 模式联系起来。但它们并非严格的等同。</p><p>Monorepo（单体仓库）是一种将所有代码都存储在一个大型仓库中的策略，而不是将代码划分到各个单独的项目仓库中去。Git Subtree可以实现这种策略，因为它允许你将一个子仓库的内容包含到父仓库中，并且子仓库的所有更改也将出现在父仓库中。</p><p>git subtree除了可以理解为将子项目包含进父仓库中，是否也可以理解为，将父项目的一部分分离为一个子项目。</p><p>是的，使用Git Subtree，你既可以将其他库作为子项目引入到你的项目中，也可以将你的项目中的分支或目录作为一个新的Git项目进行管理。</p><p>（这个有点像公司旧Recorder的SVN存储方式）</p><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h3><ul><li><p>Git Submodule 是指建立 main repo 与 sub repo 的 HEAD commit 连结</p><ul><li>特点：Submodule允许你将一个Git仓库作为另一个Git仓库的子仓库进行管理，它们依然是分开的，仍然保持各自独立的项目结构，<strong>各自有各自的版本库和历史记录</strong>。</li><li>优点：这样如果你对子模块做出任何改变，不会影响主项目。如果你的项目需要包含其他项目，并且希望它们可以独立开发和版本控制，那么Submodule就很适合。</li><li>缺点：Submodule并不会跟随主项目同步更新。当主项目更新时，Submodule不会自动更新，需要手动更新。对于需要跟踪和管理许多子模块的项目来说，使用Submodule可能会变得复杂且难以处理。</li></ul></li><li><p>Git Subtree 是指将 main repo 包含 commit log 全部 copy 到新的 repo 中</p><ul><li>特点：先将子项目的内容合并到一个目录中，然后将这个目录作为一个新的提交添加到父项目中。这样父项目就会有一个包含所有子项目代码的目录。这种方式下，所有的内容和历史记录都会以父项目的方式存在，可以让你直接把其<strong>当作主项目的一个部分</strong>来处理。</li><li>优点：这种方式的好处在于简单且易于使用，不需要额外的步骤就可以<strong>看到所有的代码以及历史记录</strong>，你将一个项目作为一个子树加入，他会和主项目一样更新和提交</li><li>缺点：但如果你想把修改推送回子项目，这需要额外的步骤和注意事项。</li></ul></li><li><p><strong>Git Submodule</strong>：这是Git官方以前的推荐方案</p></li><li><p><strong>Git Subtree</strong>：从 Git 1.5.2 开始，Git 新增并推荐使用这个功能来管理子项目</p></li></ul><p>submodule 与 subtree对比</p><ul><li><p>git submodule</p><ul><li>允许其他的仓库指定以一个commit嵌入仓库的子目录</li><li>仓库 clone下来需要 init 和 update</li><li>会产 .gitmodule 文件记录 submodule 版本信息</li><li>git submodule 删除起来比较费劲</li></ul></li><li><p>git subtree</p><ul><li>避免以上问题</li><li>管理和更新流程比较方便</li><li>git subtree合并子仓库到项目中的子目录。不用像submodule那样每次子项目修改了后要init和update 。万一哪次没update就直接add . 将.gitmodule 也 commit上去就悲剧了</li><li>git v1.5.2 (2007年) 以后建议使用git subtree</li></ul></li><li><p>Git Submodule</p><ul><li>优点 <ul><li>独立性：Submodules允许你将一个Git仓库作为另一个Git仓库的子目录。这使得每个Submodule可以拥有独立的历史记录</li><li>避免冗余：如果多个项目使用相同的库，但是这些库又不经常更新，那么使用Submodule是一个好主意，因为它避免了代码库的冗余</li><li>灵活性：不同的项目可以引用同一库的不同版本</li></ul></li><li>缺点 <ul><li>复杂性：Submodules的主要缺点是它们的<strong>复杂性</strong>。它们在一些常用操作（如克隆和拉取）中需要额外的步骤，并可能产生混乱，特别是对于新手来说。</li><li>跨Submodule工作困难：跨Submodule的工作也更加困难，这可能导致更多的提交。</li></ul></li></ul></li><li><p>Git Subtree</p><ul><li>优点 <ul><li>简洁性：Subtree种植<strong>简单</strong>，你不必担心忘记下载额外的Submodules，或者理解需要处理Submodules的复杂命令。</li><li>集中化：Subtree意味着你在主仓库中有一个完整的、唯一的<strong>历史记录</strong>，这比Submodule更加<strong>集中</strong>。</li><li>跨仓库工作方便：使用Subtree，你可以在<strong>主仓库中直接编辑子目录</strong>，而无需在Submodules之间切换。</li></ul></li><li>缺点 <ul><li>冗余：如果<strong>多个项目使用相同的库</strong>，Subtree可能导致代码冗余。</li><li>独立性较差：若需要在库的不同版本之间切换，则Subtree可能无法满足此类需求。</li></ul></li></ul></li><li><p>结论</p><ul><li>选择使用Submodule还是Subtree，取决于你的具体需求。</li><li>如果你需要独立的项目和历史记录，或者希望避免代码冗余，那么可能会选择Submodule。</li><li>相反，如果你希望管理起来更简洁，无需在多个 submodule 之间切换，那么 Subtree 可能是更好的选择。</li></ul></li></ul><h2 id="git-submodule" tabindex="-1"><a class="header-anchor" href="#git-submodule"><span>Git Submodule</span></a></h2><p>转载：https://www.jianshu.com/p/9000cd49822c</p><p>经常碰到这种情况：当你在一个Git 项目上工作时，你需要在其中使用另外一个Git 项目。也许它是一个第三方开发的Git 库或者是你独立开发和并在多个父项目中使用的。这个情况下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。</p><p>在Git 中你可以用子模块<code>submodule</code>来管理这些项目，<code>submodule</code>允许你将一个Git 仓库当作另外一个Git 仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><h4 id="初始化-指定子项目" tabindex="-1"><a class="header-anchor" href="#初始化-指定子项目"><span>初始化，指定子项目</span></a></h4><p>此文中统一将远程项目<code>https://github.com/maonx/vimwiki-assets.git</code>克隆到本地<code>assets</code>文件夹。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> submodule <span class="token function">add</span> https://github.com/maonx/vimwiki-assets.git assets
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加子模块后运行<code>git status</code>, 可以看到目录有增加1个文件<code>.gitmodules</code>, 这个文件用来保存子模块的信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> status
On branch master

Initial commit

Changes to be committed:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>

    new file:   .gitmodules
    new file:   assets
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="克隆包含子模块的项目-先clone父再更新子" tabindex="-1"><a class="header-anchor" href="#克隆包含子模块的项目-先clone父再更新子"><span>克隆包含子模块的项目 - 先clone父再更新子</span></a></h4><p>克隆包含子模块的项目有二种方法：一种是先克隆父项目，再更新子模块；另一种是直接递归克隆整个项目。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/maonx/vimwiki-assets.git assets <span class="token comment"># 克隆父项目</span>

$ <span class="token function">git</span> submodule <span class="token comment"># 查看子模块</span>
 <span class="token parameter variable">-e33f854d3f51f5ebd771a68da05ad0371a3c0570</span> assets <span class="token comment"># 子模块前面有一个-，说明子模块文件还未检入（空文件夹）</span>
 
$ <span class="token function">git</span> submodule init <span class="token comment"># 初始化子模块，初始化模块只需在克隆父项目后运行一次</span>
Submodule <span class="token string">&#39;assets&#39;</span> <span class="token punctuation">(</span>https://github.com/maonx/vimwiki-assets.git<span class="token punctuation">)</span> registered <span class="token keyword">for</span> path <span class="token string">&#39;assets&#39;</span>、

$ <span class="token function">git</span> submodule update <span class="token comment"># 更新子模块</span>
Cloning into <span class="token string">&#39;assets&#39;</span><span class="token punctuation">..</span>.
remote: Counting objects: <span class="token number">151</span>, done.
remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">80</span>/80<span class="token punctuation">)</span>, done.
remote: Total <span class="token number">151</span> <span class="token punctuation">(</span>delta <span class="token number">18</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">70</span>
Receiving objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">151</span>/151<span class="token punctuation">)</span>, <span class="token number">1.34</span> MiB <span class="token operator">|</span> <span class="token number">569.00</span> KiB/s, done.
Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">36</span>/36<span class="token punctuation">)</span>, done.
Checking connectivity<span class="token punctuation">..</span>. done.
Submodule path <span class="token string">&#39;assets&#39;</span><span class="token builtin class-name">:</span> checked out <span class="token string">&#39;e33f854d3f51f5ebd771a68da05ad0371a3c0570&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="克隆包含子模块的项目-递归clone" tabindex="-1"><a class="header-anchor" href="#克隆包含子模块的项目-递归clone"><span>克隆包含子模块的项目 - 递归clone</span></a></h4><p>递归克隆整个项目，子模块已经同时更新了，一步到位</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/maonx/vimwiki-assets.git assets <span class="token parameter variable">--recursive</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="通用方法" tabindex="-1"><a class="header-anchor" href="#通用方法"><span>通用方法</span></a></h3><p>这里是一个让子模块类似普通模块一样的使用方式：</p><p><code>git submodule foreach</code> + 普通命令。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule foreach <span class="token function">git</span> pull origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改推拉" tabindex="-1"><a class="header-anchor" href="#修改推拉"><span>修改推拉</span></a></h3><h4 id="更新子模块" tabindex="-1"><a class="header-anchor" href="#更新子模块"><span>更新子模块</span></a></h4><ul><li><p>更新项目内子模块到最新版本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> submodule update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>更新子模块为远程项目的最新版本</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>更新子模块为远程项目的最新版本 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="修改子模块" tabindex="-1"><a class="header-anchor" href="#修改子模块"><span>修改子模块</span></a></h4><p>在子模块中修改文件后，直接提交到远程项目分支</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
$ <span class="token function">git</span> ci <span class="token parameter variable">-m</span> <span class="token string">&quot;commit&quot;</span>
$ <span class="token function">git</span> push origin HEAD:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><h4 id="查看子模块" tabindex="-1"><a class="header-anchor" href="#查看子模块"><span>查看子模块</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> submodule
 e33f854d3f51f5ebd771a68da05ad0371a3c0570 assets <span class="token punctuation">(</span>heads/master<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除子模块" tabindex="-1"><a class="header-anchor" href="#删除子模块"><span>删除子模块</span></a></h4><p><strong>删除子模块比较麻烦，需要手动删除相关的文件，否则在添加子模块时有可能出现错误</strong> 同样以删除<code>assets</code>文件夹为例</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 删除子模块文件夹</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> assets
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> assets

<span class="token comment"># 删除.gitmodules文件中相关子模块信息</span>
<span class="token punctuation">[</span>submodule <span class="token string">&quot;assets&quot;</span><span class="token punctuation">]</span>
  path <span class="token operator">=</span> assets
  url <span class="token operator">=</span> https://github.com/maonx/vimwiki-assets.git
  
<span class="token comment"># 删除.git/config中的相关子模块信息</span>
<span class="token punctuation">[</span>submodule <span class="token string">&quot;assets&quot;</span><span class="token punctuation">]</span>
  url <span class="token operator">=</span> https://github.com/maonx/vimwiki-assets.git
  
<span class="token comment"># 删除.git文件夹中的相关子模块文件</span>
$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> .git/modules/assets

<span class="token comment"># 清完之后可能还需要commit一次，才能成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-subtree" tabindex="-1"><a class="header-anchor" href="#git-subtree"><span>Git Subtree</span></a></h2><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1"><span>初始化</span></a></h3><h4 id="父项目部分分离为子项目" tabindex="-1"><a class="header-anchor" href="#父项目部分分离为子项目"><span>父项目部分分离为子项目</span></a></h4><p>用Git Subtree将父项目的一部分分离为子项目的过程通常包括以下步骤：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 将你想要分离的部分作为一个新的分支检出</span>
<span class="token comment"># 例如，如果你想要将 \`dir\` 目录作为一个新的项目，你像下面这样做</span>
<span class="token comment"># 这将会创建一个名为\`new_project\`的新分支，其中只包含\`dir\`目录的历史。 </span>
<span class="token function">git</span> subtree <span class="token function">split</span> <span class="token parameter variable">--prefix</span><span class="token operator">=</span>dir <span class="token parameter variable">--branch</span> new_project

<span class="token comment"># 将这个新的分支推送到新的仓库</span>
<span class="token comment"># 你可以先在远程Git服务器上创建一个新的仓库（我们假设叫做\`new_repo\`），然后将\`new_project\`分支推送到那里</span>
<span class="token comment"># 这将会将你的 \`new_project\` 分支作为 \`new_repo\` 仓库的 \`master\` 分支</span>
<span class="token function">git</span> push new_repo new_project:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个过程中，你的原始项目（包括它的历史）将会保持不变。只有<code>dir</code>目录的历史被复制到了新的仓库。</p><p>并且，随后在父项目中对<code>dir</code>目录的改动，不会自动在新的仓库中反映。不过，你可以执行<code>git subtree push</code>命令，将这些改动推送到新的仓库。同样地，如果你在新的仓库中做了改动，并且想要将这些改动合并回父项目，你可以执行<code>git subtree pull</code></p><h4 id="子项目插入到父项目" tabindex="-1"><a class="header-anchor" href="#子项目插入到父项目"><span>子项目插入到父项目</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> sutree <span class="token function">add</span> <span class="token parameter variable">--prefix</span><span class="token operator">=</span>src/Common https://github.com/M76chao/Common.git master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改推拉-1" tabindex="-1"><a class="header-anchor" href="#修改推拉-1"><span>修改推拉</span></a></h3><h4 id="推送到子项目仓库" tabindex="-1"><a class="header-anchor" href="#推送到子项目仓库"><span>推送到子项目仓库</span></a></h4><p>在主项目 git push 之后，对子项目修改的内容是不会直接更新到子项目自身的</p><p>需要执行 <code>git subtree push</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span><span class="token operator">=</span>commonTools http://git.ninebot.cn:8888/tingtingtina/commontoolscopy.git master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="子项目仓库更新" tabindex="-1"><a class="header-anchor" href="#子项目仓库更新"><span>子项目仓库更新</span></a></h4><p>如果单独对子项目做了更新，主项目就需要手动更新下了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> subtree pull <span class="token parameter variable">--prefix</span><span class="token operator">=</span>commonTools http://git.ninebot.cn:8888/tingtingtina/commontoolscopy.git master <span class="token parameter variable">--squash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行之后，仍然会在主项目中生成相关的 commit 记录</p><p>在 subtree 相关命令经常会用到 <code>&lt;repository&gt;</code> 每次都写地址还是比较麻烦，这里可以用 <code>git remote</code> 命令简化写法，为这个远程地址定义一个 “别名”</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> utils http://git.ninebot.cn:8888/tingtingtina/commontoolscopy.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如使用 subtree push 的时候就可以使用如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> subtree push <span class="token parameter variable">--prefix</span><span class="token operator">=</span>commonTools utils master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1"><span>其他</span></a></h3><h4 id="移除子项目-切换子项目分支" tabindex="-1"><a class="header-anchor" href="#移除子项目-切换子项目分支"><span>移除子项目（切换子项目分支）</span></a></h4><p>在添加 subtree 的时候是指定了分支的，如果要切换分支直接移除 subtree，重新加入子项目的分支</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>subtree<span class="token operator">&gt;</span>
<span class="token function">git</span> commit
<span class="token function">git</span> subtree <span class="token function">add</span> <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token operator">&lt;</span>subtree<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>repository_url<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>subtree_branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h1><p>我的个人 vuepress 项目引入个人魔改的 <code>vupress-theme-hope</code> 主题，详见 VuePress2/Hope主题/Private/个人魔改 笔记</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 初始化</span>
$ <span class="token builtin class-name">cd</span> /h/Git/Private/LincZero-Vuepress
$ <span class="token function">git</span> submodule <span class="token function">add</span> git@github.com:LincZero/vuepress-theme-hope.git lib <span class="token comment"># 添加子项目</span>
$ <span class="token function">git</span> submodule init   <span class="token comment"># 初始化子项目</span>
$ <span class="token function">git</span> submodule update <span class="token comment"># 更新子项目</span>
$ <span class="token function">git</span> submodule status <span class="token comment"># 检查子项目</span>

<span class="token comment"># 构建子项目</span>
$ <span class="token builtin class-name">cd</span> lib
$ <span class="token function">pnpm</span> i
$ <span class="token function">pnpm</span> build
$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/

<span class="token comment"># 替换依赖</span>
$ <span class="token function">pnpm</span> uninstall vuepress-theme-hope <span class="token comment"># (之前用npm仓库的vuepress主题的话)</span>
<span class="token comment"># 此时 &quot;vuepress-theme-hope&quot;: &quot;2.0.0-beta.237&quot; 这一行没了，我们需要将其替换成新的本地路径：</span>
<span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token comment"># 下面两种写法 pnpm i 正常，但后面运行 pnpm docs:dev时报错：Error [ERR_MODULE_NOT_FOUND]: Cannot find package &#39;H:\\Git\\Private\\LincZero-Vuepress\\node_modules\\vuepress-theme-hope\\&#39; imported from H:\\Git\\Private\\LincZero-Vuepress\\src\\.vuepress\\config.ts.5ca87adb.mjs</span>
	<span class="token comment"># &quot;vuepress-theme-hope&quot;: &quot;file:lib&quot;,</span>
	<span class="token comment"># &quot;vuepress-theme-hope&quot;: &quot;file:lib/packages/theme/lib&quot;, </span>
	
    <span class="token comment"># 这种写法 pnpm i 会报错： ERR_PNPM_NO_MATCHING_VERSION_INSIDE_WORKSPACE  In : No matching version found for vuepress-theme-hope@* inside the workspace</span>
	<span class="token string">&quot;vuepress-theme-hope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;workspace:*&quot;</span>
<span class="token punctuation">}</span>
$ <span class="token function">pnpm</span> i

<span class="token comment"># 运行</span>
$ <span class="token function">pnpm</span> docs:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71);function b(h,v){const n=l("ExternalLinkIcon");return o(),p("div",null,[d,s("p",null,[s("a",r,[e("Git Submodule"),a(n)]),e(" 或 "),s("a",u,[e("Git Subtree"),a(n)]),e(" 都属于是 Multi-Repo 理念，而非 Monorepo")]),m])}const f=t(c,[["render",b],["__file","git 子项目依赖 (git submodule、git subtree).html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/git%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%20(git%20submodule%E3%80%81git%20subtree).html","title":"Git子项目依赖","lang":"zh-CN","frontmatter":{"description":"Git子项目依赖 git项目依赖的多种选择 GPT 一个项目依赖另一项目应该使用哪种方式比较好： git依赖，从仓库clone时自动拉取另一个依赖项目到指定位置 cmake编译/install时，再进行依赖安装 进行CICD时，ci文件先进行对依赖项的clone，再进行编译 每种方式具有其自己的优点和适用场景，以下是一些可能的推荐： Git 依赖（使用...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/git%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%20(git%20submodule%E3%80%81git%20subtree).html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Git子项目依赖"}],["meta",{"property":"og:description","content":"Git子项目依赖 git项目依赖的多种选择 GPT 一个项目依赖另一项目应该使用哪种方式比较好： git依赖，从仓库clone时自动拉取另一个依赖项目到指定位置 cmake编译/install时，再进行依赖安装 进行CICD时，ci文件先进行对依赖项的clone，再进行编译 每种方式具有其自己的优点和适用场景，以下是一些可能的推荐： Git 依赖（使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git子项目依赖\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Git子项目依赖","slug":"git子项目依赖","link":"#git子项目依赖","children":[{"level":2,"title":"git项目依赖的多种选择","slug":"git项目依赖的多种选择","link":"#git项目依赖的多种选择","children":[]},{"level":2,"title":"Git Submodule & Git Subtree","slug":"git-submodule-git-subtree","link":"#git-submodule-git-subtree","children":[{"level":3,"title":"简单介绍","slug":"简单介绍","link":"#简单介绍","children":[]},{"level":3,"title":"与 Monorepo & Multirepo 关系","slug":"与-monorepo-multirepo-关系","link":"#与-monorepo-multirepo-关系","children":[]},{"level":3,"title":"比较","slug":"比较","link":"#比较","children":[]}]},{"level":2,"title":"Git Submodule","slug":"git-submodule","link":"#git-submodule","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[{"level":4,"title":"初始化，指定子项目","slug":"初始化-指定子项目","link":"#初始化-指定子项目","children":[]},{"level":4,"title":"克隆包含子模块的项目 - 先clone父再更新子","slug":"克隆包含子模块的项目-先clone父再更新子","link":"#克隆包含子模块的项目-先clone父再更新子","children":[]},{"level":4,"title":"克隆包含子模块的项目 - 递归clone","slug":"克隆包含子模块的项目-递归clone","link":"#克隆包含子模块的项目-递归clone","children":[]}]},{"level":3,"title":"通用方法","slug":"通用方法","link":"#通用方法","children":[]},{"level":3,"title":"修改推拉","slug":"修改推拉","link":"#修改推拉","children":[{"level":4,"title":"更新子模块","slug":"更新子模块","link":"#更新子模块","children":[]},{"level":4,"title":"修改子模块","slug":"修改子模块","link":"#修改子模块","children":[]}]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[{"level":4,"title":"查看子模块","slug":"查看子模块","link":"#查看子模块","children":[]},{"level":4,"title":"删除子模块","slug":"删除子模块","link":"#删除子模块","children":[]}]}]},{"level":2,"title":"Git Subtree","slug":"git-subtree","link":"#git-subtree","children":[{"level":3,"title":"初始化","slug":"初始化-1","link":"#初始化-1","children":[{"level":4,"title":"父项目部分分离为子项目","slug":"父项目部分分离为子项目","link":"#父项目部分分离为子项目","children":[]},{"level":4,"title":"子项目插入到父项目","slug":"子项目插入到父项目","link":"#子项目插入到父项目","children":[]}]},{"level":3,"title":"修改推拉","slug":"修改推拉-1","link":"#修改推拉-1","children":[{"level":4,"title":"推送到子项目仓库","slug":"推送到子项目仓库","link":"#推送到子项目仓库","children":[]},{"level":4,"title":"子项目仓库更新","slug":"子项目仓库更新","link":"#子项目仓库更新","children":[]}]},{"level":3,"title":"其他","slug":"其他-1","link":"#其他-1","children":[{"level":4,"title":"移除子项目（切换子项目分支）","slug":"移除子项目-切换子项目分支","link":"#移除子项目-切换子项目分支","children":[]}]}]}]},{"level":1,"title":"实践","slug":"实践","link":"#实践","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":13.53,"words":4058},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/03. 多项目管理/02. 子项目构建系统/git 子项目依赖 (git submodule、git subtree).md","autoDesc":true}');export{f as comp,E as data};
