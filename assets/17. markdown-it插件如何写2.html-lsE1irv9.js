import{_ as o,c,e,a as s,d as a,b as p,o as l,r as i}from"./app-3W0Z1LB3.js";const u="/assets/df72dcc7e7635d06ae0083fe8c920150-Cx4ES8xM.png",r="/assets/df50bed60f453b706fb489ad7de216b9-CZKZzx52.png",k="/assets/a03a691ffe7f04b54599a617a4637cb5-BWF2BBiN.png",d={},m={href:"https://markdown-it.github.io/markdown-it/#Ruler",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_inline.js",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/parser_core.js",target:"_blank",rel:"noopener noreferrer"},h={href:"https://markdown-it.github.io/markdown-it/#Ruler",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/heading.js",target:"_blank",rel:"noopener noreferrer"};function w(y,n){const t=i("ExternalLinkIcon");return l(),c("div",null,[n[25]||(n[25]=e('<h1 id="markdown-it-插件如何写-二" tabindex="-1"><a class="header-anchor" href="#markdown-it-插件如何写-二"><span>markdown-it 插件如何写（二）</span></a></h1><p>前面我们讲了如何去修改渲染规则，这一篇讲的是如何修改解析规则</p><h2 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>Parse</span></a></h2><p><code>markdown-it</code>的渲染过程分为两部分，<code>Parse</code> 和 <code>Render</code>，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 <code>@ header</code> 为 <code>&lt;h1&gt;header&lt;/h1&gt;</code>，就可以从 <code>Parse</code> 过程入手。</p><h3 id="自定义-parse-规则的流程" tabindex="-1"><a class="header-anchor" href="#自定义-parse-规则的流程"><span>自定义 parse 规则的流程</span></a></h3>',5)),s("p",null,[n[1]||(n[1]=a("在 ")),s("a",m,[n[0]||(n[0]=a("markdown-it 的官方文档")),p(t)]),n[2]||(n[2]=a(" 里可以找到自定义 parse 规则的方式，那就是通过 ")),n[3]||(n[3]=s("code",null,"Ruler",-1)),n[4]||(n[4]=a(" 类："))]),n[26]||(n[26]=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 增加自定义规则来处理用 \`@\` 声明的标题
 * 
 * <span class="token keyword">@detail</span>
 * block                  	表示插入块规则
 * before                 	表示在某规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> beforName	表示要在哪条规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> rulename	表示你的新规则名
 */</span>
md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my_rule&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-指定块规则-block" tabindex="-1"><a class="header-anchor" href="#_1-指定块规则-block"><span>(1) 指定块规则: block</span></a></h3><p>这句话的意思是指在 <code>markdown-it</code> 的解析 block 的一组规则中，在 <code>paragraph</code> (段落) 规则前插入一个名为 <code>my_rule</code> 的自定义规则，我们慢慢来解释：</p>`,3)),s("ol",null,[s("li",null,[n[14]||(n[14]=a("首先是 ")),n[15]||(n[15]=s("code",null,"md.block.ruler",-1)),n[16]||(n[16]=a("，可以自定义块的规则。这里不仅是block规则，有： ")),s("ol",null,[s("li",null,[n[6]||(n[6]=s("code",null,"md.block.ruler",-1)),n[7]||(n[7]=a("，查看 ")),s("a",v,[n[5]||(n[5]=a("parse_block.js")),p(t)])]),s("li",null,[n[9]||(n[9]=s("code",null,"md.inline.ruler",-1)),n[10]||(n[10]=a("，查看 ")),s("a",b,[n[8]||(n[8]=a("parse_inline.js")),p(t)])]),s("li",null,[n[12]||(n[12]=s("code",null,"md.core.ruler",-1)),n[13]||(n[13]=a("，查看 ")),s("a",g,[n[11]||(n[11]=a("parse_core.js")),p(t)])])])])]),n[27]||(n[27]=s("h3",{id:"_2-指定新规则位置-paragraph-的-before",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-指定新规则位置-paragraph-的-before"},[s("span",null,"(2) 指定新规则位置: paragraph 的 before")])],-1)),s("p",null,[n[18]||(n[18]=a("然后是 ")),n[19]||(n[19]=s("code",null,".before",-1)),n[20]||(n[20]=a("，查看 ")),s("a",h,[n[17]||(n[17]=a("Ruler")),p(t)]),n[21]||(n[21]=a(" 相关的 API，有下面的几种种方法。这是因为规则是按照顺序执行的，某一规则的改变可能会影响其他规则"))]),n[28]||(n[28]=e(`<ol><li><code>before</code></li><li><code>after</code></li><li><code>at</code></li><li><code>disable</code></li><li><code>enable</code></li><li>等方法</li></ol><p>接着是 <code>paragraph</code>，我怎么知道插入在哪个规则前面或者后面呢？这就需要你看源码了，并没有文档给你讲这个……</p><p>我们以 <code>md.block</code> 为例，可以看到源码里写了这些规则：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> _rules <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">// First 2 params - rule name &amp; source. Secondary array - list of rules,</span>
  <span class="token comment">// which can be terminated by this one.</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">,</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/table&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">,</span>       <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/code&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;fence&#39;</span><span class="token punctuation">,</span>      <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/fence&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/blockquote&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;hr&#39;</span><span class="token punctuation">,</span>         <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/hr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;list&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>       <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/list&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/reference&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;html_block&#39;</span><span class="token punctuation">,</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/html_block&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;heading&#39;</span><span class="token punctuation">,</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/heading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;reference&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blockquote&#39;</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;lheading&#39;</span><span class="token punctuation">,</span>   <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/lheading&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span> <span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span>  <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;./rules_block/paragraph&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">]</span>	<span class="token comment">// 这里我们要将新的解析规则插入到这里的前面</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-指定新规则内容" tabindex="-1"><a class="header-anchor" href="#_3-指定新规则内容"><span>(3) 指定新规则内容</span></a></h3><p>最后是<code>function replace(state)</code>，这里函数的参数其实不止有 <code>state</code>，我们查看任何一个具体规则的 parse 代码，就比如 <code>heading.js</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">heading</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
      pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
      max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出除了 <code>state</code>，还有 <code>startLine</code>、<code>endLine</code>、<code>silent</code>，而具体这其中的代码怎么写，其实最好的方式就是参考这些已经实现的代码。</p><h2 id="demo1-用-符号声明标题" tabindex="-1"><a class="header-anchor" href="#demo1-用-符号声明标题"><span>demo1，用@符号声明标题</span></a></h2><h3 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h3><p>接下来我们以解析 <code>@ header</code> 为 <code>&lt;h1&gt;header&lt;/h1&gt;</code>为例，讲解其中涉及的代码，这是要渲染的内容：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">markdownit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// md.block.ruler.before(...)</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@ header
	contentTwo
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常它的渲染结果是：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>@ header
contentTwo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而现在期望的渲染结果是：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>contentTwo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义新规则的函数原型" tabindex="-1"><a class="header-anchor" href="#定义新规则的函数原型"><span>定义新规则的函数原型</span></a></h3><p>parse 的过程是<strong>根据换行符逐行扫描</strong>的，所以每一行的内容都会执行我们这个自定义函数进行匹配。</p><p>函数支持传入四个参数。参数含义和打印如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 增加自定义规则来处理用 \`@\` 声明的标题
 * 
 * <span class="token keyword">@detail</span>
 * block                  	表示插入块规则
 * before                 	表示在某规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> beforName	表示要在哪条规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> rulename	表示你的新规则名
 * <span class="token keyword">@param</span> <span class="token parameter">fn</span>: T
 *     - @param state     	记录了各种状态数据	打印: <span class="token punctuation">{</span>...<span class="token punctuation">}</span>，其中包含了每行的起始和结束的字符序
 *     - @param startLine 	表示本次的起始行数	打印: 0
 *     - @param endLine   	表示总的结束行数	 打印: 2
 *     - @return boolean isMatch
 */</span>
md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 我们打印下 \`state\`、\`startLine\`，\`endLine\` 等数据：</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    	<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    	startLine<span class="token punctuation">,</span>
    	endLine
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是打印的结果：</p><p><img src="`+u+`" alt="img" loading="lazy"></p><p>其中 <code>state</code> 的内容我们简化下展示出来：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;src&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@ header\\ncontentTwo\\n&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;md&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;tokens&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;bMarks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行的起始位置</span>
    <span class="token string-property property">&quot;eMarks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行的终止位置</span>
    <span class="token string-property property">&quot;tShift&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 表示每一行第一个非空格字符的位置</span>
    <span class="token string-property property">&quot;line&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">// 部分含义已在上面的注释中标明</span>
<span class="token comment">// state的更多字段含义查看 [state_block.js](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_block/state_block.js) 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何获取每一行的内容" tabindex="-1"><a class="header-anchor" href="#如何获取每一行的内容"><span>如何获取每一行的内容</span></a></h3>`,25)),s("p",null,[n[23]||(n[23]=a("我们来看看如何实现，先参照前面写过的 ")),s("a",f,[n[22]||(n[22]=a("header.js")),p(t)]),n[24]||(n[24]=a(" 的代码依葫芦画瓢："))]),n[29]||(n[29]=e(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
      pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
      max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
  <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>pos</code> 和 <code>max</code>，我们可以截取出这行字符串：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * 增加自定义规则来处理用 \`@\` 声明的标题
 * 
 * <span class="token keyword">@detail</span>
 * block                  	表示插入块规则
 * before                 	表示在某规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> beforName	表示要在哪条规则前插入
 * <span class="token keyword">@param</span> <span class="token parameter">string</span> rulename	表示你的新规则名
 * <span class="token keyword">@param</span> <span class="token parameter">fn</span>: T
 *     - @param state     	记录了各种状态数据	打印: <span class="token punctuation">{</span>...<span class="token punctuation">}</span>，其中包含了每行的起始和结束的字符序
 *     - @param startLine 	表示本次的起始行数	打印: 0
 *     - @param endLine   	表示总的结束行数	 打印: 2
 */</span>
md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;@header&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">,</span> silent<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startLine<span class="token punctuation">,</span> endLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token
    
    <span class="token comment">// 这行字符的非空格初始位置。值：pos = 0 + 0 = 0</span>
	<span class="token keyword">var</span> pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span> 
	<span class="token comment">// 这行字符的结束位置。值：8，@ header是8个字符</span>
	<span class="token keyword">var</span> max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取到这一行的内容</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 这两行是为了进入到下一行的遍历之中</span>
    state<span class="token punctuation">.</span>line <span class="token operator">=</span> startLine <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果为：</p><p><img src="`+r+`" alt="img" loading="lazy"></p><h3 id="写出我们的代码" tabindex="-1"><a class="header-anchor" href="#写出我们的代码"><span>写出我们的代码</span></a></h3><p>如果我们能取出每次用于判断的字符串，那我们就可以进行正则匹配，如果匹配，就自定义 tokens，剩下的逻辑很简单，我们直接给出最后的代码：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>md<span class="token punctuation">.</span>block<span class="token punctuation">.</span>ruler<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">&#39;paragraph&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myplugin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span>startLine<span class="token punctuation">,</span>endLine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数准备</span>
	<span class="token keyword">var</span> ch<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> token<span class="token punctuation">,</span>
    	pos <span class="token operator">=</span> state<span class="token punctuation">.</span>bMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>tShift<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">,</span>
        max <span class="token operator">=</span> state<span class="token punctuation">.</span>eMarks<span class="token punctuation">[</span>startLine<span class="token punctuation">]</span><span class="token punctuation">;</span>
    ch  <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 不匹配就让下一条规则去处理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token number">0x40</span><span class="token comment">/*@*/</span> <span class="token operator">||</span> pos <span class="token operator">&gt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// 获取标题部分</span>
    <span class="token keyword">let</span> text <span class="token operator">=</span> state<span class="token punctuation">.</span>src<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^@\\s(.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> match <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match <span class="token operator">||</span> <span class="token operator">!</span>match<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// 自定义插入tokens</span>
    <span class="token punctuation">{</span>
        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;heading_open&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 插入h1起始token</span>
        token<span class="token punctuation">.</span>markup <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">[</span> startLine<span class="token punctuation">,</span> state<span class="token punctuation">.</span>line <span class="token punctuation">]</span><span class="token punctuation">;</span>

        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;inline&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 插入h1块里的内联token</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>content <span class="token operator">=</span> result<span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">[</span> startLine<span class="token punctuation">,</span> state<span class="token punctuation">.</span>line <span class="token punctuation">]</span><span class="token punctuation">;</span>
        token<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        token <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;heading_close&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 插入h1结束token</span>
        token<span class="token punctuation">.</span>markup <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">;</span>

        <span class="token comment">// 这两行是为了进入到下一行的遍历之中</span>
        state<span class="token punctuation">.</span>line <span class="token operator">=</span> startLine <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就实现了预期的效果：</p><p><img src="`+k+'" alt="img" loading="lazy"></p><h3 id="q" tabindex="-1"><a class="header-anchor" href="#q"><span>Q</span></a></h3><p>话说 state.line 和 startLine 这两个属性是不是重复了？</p>',12))])}const L=o(d,[["render",w],["__file","17. markdown-it插件如何写2.html.vue"]]),q=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/17.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%992.html","title":"markdown-it 插件如何写（二）","lang":"zh-CN","frontmatter":{"description":"markdown-it 插件如何写（二） 前面我们讲了如何去修改渲染规则，这一篇讲的是如何修改解析规则 Parse markdown-it的渲染过程分为两部分，Parse 和 Render，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 @ header 为 <h1>header</h1>，就可以从 Parse 过程入手。 自定...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E3%80%8A%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E3%80%8B%E5%86%B4%E7%BE%BD/17.%20markdown-it%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E5%86%992.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"markdown-it 插件如何写（二）"}],["meta",{"property":"og:description","content":"markdown-it 插件如何写（二） 前面我们讲了如何去修改渲染规则，这一篇讲的是如何修改解析规则 Parse markdown-it的渲染过程分为两部分，Parse 和 Render，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 @ header 为 <h1>header</h1>，就可以从 Parse 过程入手。 自定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"markdown-it 插件如何写（二）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"markdown-it 插件如何写（二）","slug":"markdown-it-插件如何写-二","link":"#markdown-it-插件如何写-二","children":[{"level":2,"title":"Parse","slug":"parse","link":"#parse","children":[{"level":3,"title":"自定义 parse 规则的流程","slug":"自定义-parse-规则的流程","link":"#自定义-parse-规则的流程","children":[]},{"level":3,"title":"(1) 指定块规则: block","slug":"_1-指定块规则-block","link":"#_1-指定块规则-block","children":[]},{"level":3,"title":"(2) 指定新规则位置: paragraph 的 before","slug":"_2-指定新规则位置-paragraph-的-before","link":"#_2-指定新规则位置-paragraph-的-before","children":[]},{"level":3,"title":"(3) 指定新规则内容","slug":"_3-指定新规则内容","link":"#_3-指定新规则内容","children":[]}]},{"level":2,"title":"demo1，用@符号声明标题","slug":"demo1-用-符号声明标题","link":"#demo1-用-符号声明标题","children":[{"level":3,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":3,"title":"定义新规则的函数原型","slug":"定义新规则的函数原型","link":"#定义新规则的函数原型","children":[]},{"level":3,"title":"如何获取每一行的内容","slug":"如何获取每一行的内容","link":"#如何获取每一行的内容","children":[]},{"level":3,"title":"写出我们的代码","slug":"写出我们的代码","link":"#写出我们的代码","children":[]},{"level":3,"title":"Q","slug":"q","link":"#q","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.7,"words":1709},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/17. markdown-it插件如何写2.md","excerpt":"\\n<p>前面我们讲了如何去修改渲染规则，这一篇讲的是如何修改解析规则</p>\\n<h2>Parse</h2>\\n<p><code>markdown-it</code>的渲染过程分为两部分，<code>Parse</code> 和 <code>Render</code>，如果我们要实现新的 markdown 语法，举个例子，比如我们希望解析 <code>@ header</code> 为 <code>&lt;h1&gt;header&lt;/h1&gt;</code>，就可以从 <code>Parse</code> 过程入手。</p>\\n<h3>自定义 parse 规则的流程</h3>\\n<p>在 <a href=\\"https://markdown-it.github.io/markdown-it/#Ruler\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">markdown-it 的官方文档</a> 里可以找到自定义 parse 规则的方式，那就是通过 <code>Ruler</code> 类：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/17. markdown-it插件如何写2.md","value":{"title":"17. markdown-it插件如何写2","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/《博客搭建》冴羽/17. markdown-it插件如何写2.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{L as comp,q as data};
