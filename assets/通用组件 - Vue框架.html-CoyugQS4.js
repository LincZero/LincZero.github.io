import{_ as p,c as l,a as s,d as e,b as t,e as o,o as i,r as u}from"./app-CLosF8Eu.js";const r={},d={href:"https://cn.vuejs.org/guide/extras/web-components.html",target:"_blank",rel:"noopener noreferrer"},c={href:"https://cn.vuejs.org/guide/extras/web-components.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},k={href:"https://custom-elements-everywhere.com/libraries/vue/results/results.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cn.vuejs.org/api/application.html#app-config-compileroptions",target:"_blank",rel:"noopener noreferrer"},b={href:"https://web.dev/custom-elements-best-practices/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://cn.vuejs.org/api/custom-elements.html#definecustomelement",target:"_blank",rel:"noopener noreferrer"},f={href:"https://cn.vuejs.org/api/general.html#definecomponent",target:"_blank",rel:"noopener noreferrer"},y={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots",target:"_blank",rel:"noopener noreferrer"},C={href:"https://cn.vuejs.org/guide/components/slots.html#scoped-slots",target:"_blank",rel:"noopener noreferrer"},j={href:"https://cn.vuejs.org/guide/components/provide-inject.html#provide-inject",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cn.vuejs.org/api/composition-api-dependency-injection.html#provide",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#using-vue-sfcs-as-custom-elements",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/vuejs/vue-loader/tree/next#v16-only-options",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/vuejs/petite-vue",target:"_blank",rel:"noopener noreferrer"},S={href:"https://cn.vitejs.dev/guide/features.html#glob-import",target:"_blank",rel:"noopener noreferrer"},M={href:"https://webpack.js.org/guides/dependency-management/#requirecontext",target:"_blank",rel:"noopener noreferrer"},W={href:"https://cn.vuejs.org/guide/scaling-up/tooling.html#typescript",target:"_blank",rel:"noopener noreferrer"},A={href:"https://www.typescriptlang.org/docs/handbook/jsx.html#intrinsic-elements",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/vuejs/language-tools/blob/master/packages/vscode-vue/README.md#usage",target:"_blank",rel:"noopener noreferrer"},P={href:"https://web.dev/vitals/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://cn.vuejs.org/guide/components/slots.html#scoped-slots",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/whatwg/html/pull/4898/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://cn.vuejs.org/api/sfc-css-features.html",target:"_blank",rel:"noopener noreferrer"};function F(N,n){const a=u("ExternalLinkIcon");return i(),l("div",null,[n[95]||(n[95]=s("h1",{id:"通用组件-vue框架",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#通用组件-vue框架"},[s("span",null,"通用组件 - Vue框架")])],-1)),s("p",null,[n[1]||(n[1]=e('我们将重点放在Vue的 "用 Vue 来')),s("a",d,[n[0]||(n[0]=e("构建标准的 Web Component")),t(a)]),n[2]||(n[2]=e('，这些 Web Component 可以嵌入到任何 HTML 页面中" 功能'))]),s("p",null,[n[4]||(n[4]=e("参考官方文档：")),s("a",c,[n[3]||(n[3]=e("Vue 与 Web Components")),t(a)]),n[5]||(n[5]=e(" (")),n[6]||(n[6]=s("mark",null,[s("strong",null,"感觉中文版翻译有问题，推荐看原文或与原文对照看")],-1)),n[7]||(n[7]=e(")"))]),s("p",null,[s("a",m,[n[8]||(n[8]=e("Web Components")),t(a)]),n[9]||(n[9]=e(" 是一组 web 原生 API 的统称，允许开发者创建可复用的自定义元素 (custom elements)。"))]),n[96]||(n[96]=s("p",null,"我们认为 Vue 和 Web Components 是互补的技术。Vue 为使用和创建自定义元素提供了出色的支持。无论你是将自定义元素集成到现有的 Vue 应用中，还是使用 Vue 来构建和分发自定义元素都很方便。",-1)),n[97]||(n[97]=s("h2",{id:"在-vue-中使用自定义元素",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在-vue-中使用自定义元素"},[s("span",null,"在 Vue 中使用自定义元素")])],-1)),s("p",null,[n[11]||(n[11]=e("Vue ")),s("a",k,[n[10]||(n[10]=e("在 Custom Elements Everywhere 测试中取得了 100% 的分数")),t(a)]),n[12]||(n[12]=e("。在 Vue 应用中使用自定义元素基本上与使用原生 HTML 元素的效果相同，但需要留意以下几点："))]),n[98]||(n[98]=s("h3",{id:"跳过组件解析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#跳过组件解析"},[s("span",null,"跳过组件解析")])],-1)),s("p",null,[n[15]||(n[15]=e("默认情况下，Vue 会将任何非原生的 HTML 标签优先当作 Vue 组件处理，而将“渲染一个自定义元素”作为后备选项。这会在开发时导致 Vue 抛出一个“解析组件失败”的警告。要让 Vue 知晓特定元素应该被视为自定义元素并跳过组件解析，我们可以指定 ")),s("a",v,[n[13]||(n[13]=s("code",null,"compilerOptions.isCustomElement",-1)),n[14]||(n[14]=e(" 这个选项")),t(a)]),n[16]||(n[16]=e("。"))]),n[99]||(n[99]=o(`<p>如果在开发 Vue 应用时进行了构建配置，则应该在构建配置中传递该选项，因为它是一个编译时选项。</p><h4 id="浏览器内编译时的示例配置" tabindex="-1"><a class="header-anchor" href="#浏览器内编译时的示例配置"><span>浏览器内编译时的示例配置</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 仅在浏览器内编译时才会工作</span>
<span class="token comment">// 如果使用了构建工具，请看下面的配置示例</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>compilerOptions<span class="token punctuation">.</span><span class="token function-variable function">isCustomElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tag<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vite-示例配置" tabindex="-1"><a class="header-anchor" href="#vite-示例配置"><span>Vite 示例配置</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 将所有带短横线的标签名都视为自定义元素</span>
          <span class="token function-variable function">isCustomElement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tag<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vue-cli-示例配置" tabindex="-1"><a class="header-anchor" href="#vue-cli-示例配置"><span>Vue CLI 示例配置</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    config<span class="token punctuation">.</span>module
      <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;vue-loader&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>options<span class="token punctuation">,</span>
        <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 将所有以 ion- 开头的标签都视为自定义元素</span>
          <span class="token function-variable function">isCustomElement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> tag<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;ion-&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="传递-dom-属性" tabindex="-1"><a class="header-anchor" href="#传递-dom-属性"><span>传递 DOM 属性</span></a></h3>`,8)),s("p",null,[n[18]||(n[18]=e("由于 DOM attribute 只能为字符串值，因此我们只能使用 DOM 对象的属性来传递复杂数据。当为自定义元素设置 props 时，Vue 3 将通过 ")),n[19]||(n[19]=s("code",null,"in",-1)),n[20]||(n[20]=e(" 操作符自动检查该属性是否已经存在于 DOM 对象上，并且在这个 key 存在时，更倾向于将值设置为一个 DOM 对象的属性。这意味着，在大多数情况下，如果自定义元素遵循")),s("a",b,[n[17]||(n[17]=e("推荐的最佳实践")),t(a)]),n[21]||(n[21]=e("，你就不需要考虑这个问题。"))]),n[100]||(n[100]=o(`<p>然而，也会有一些特别的情况：必须将数据以一个 DOM 对象属性的方式传递，但该自定义元素无法正确地定义/反射这个属性 (因为 <code>in</code> 检查失败)。在这种情况下，你可以强制使用一个 <code>v-bind</code> 绑定、通过 <code>.prop</code> 修饰符来设置该 DOM 对象的属性：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span> <span class="token attr-name">:user.prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;jack&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 等价简写 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span> <span class="token attr-name">.user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: &#39;jack&#39; }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-vue-构建自定义元素" tabindex="-1"><a class="header-anchor" href="#使用-vue-构建自定义元素"><span>使用 Vue 构建自定义元素</span></a></h2><p>自定义元素的主要好处是，它们可以在使用任何框架，甚至是在不使用框架的场景下使用。当你面向的最终用户可能使用了不同的前端技术栈，或是当你希望将最终的应用与它使用的组件实现细节解耦时，它们会是理想的选择。</p><h3 id="definecustomelement" tabindex="-1"><a class="header-anchor" href="#definecustomelement"><span>defineCustomElement</span></a></h3>`,5)),s("p",null,[n[24]||(n[24]=e("Vue 提供了一个和定义一般 Vue 组件几乎完全一致的 ")),s("a",g,[n[22]||(n[22]=s("code",null,"defineCustomElement",-1)),t(a)]),n[25]||(n[25]=e(" 方法来支持创建自定义元素。这个方法接收的参数和 ")),s("a",f,[n[23]||(n[23]=s("code",null,"defineComponent",-1)),t(a)]),n[26]||(n[26]=e(" 完全相同。")),n[27]||(n[27]=s("strong",null,[e("但它会返回一个继承自 "),s("code",null,"HTMLElement"),e(" 的自定义元素构造器")],-1)),n[28]||(n[28]=e("："))]),n[101]||(n[101]=o(`<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-vue-element</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-vue-element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineCustomElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> MyVueElement <span class="token operator">=</span> <span class="token function">defineCustomElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 这里是同平常一样的 Vue 组件选项</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>

  <span class="token comment">// defineCustomElement 特有的：注入进 shadow root 的 CSS</span>
  <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/* inlined css */</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 注册自定义元素</span>
<span class="token comment">// 注册之后，所有此页面中的 \`&lt;my-vue-element&gt;\` 标签</span>
<span class="token comment">// 都会被升级</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;my-vue-element&#39;</span><span class="token punctuation">,</span> MyVueElement<span class="token punctuation">)</span>

<span class="token comment">// 你也可以编程式地实例化元素：</span>
<span class="token comment">// （必须在注册之后）</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>
  <span class="token keyword">new</span> <span class="token class-name">MyVueElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 初始化 props（可选）</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h4>`,3)),s("ul",null,[s("li",null,[n[30]||(n[30]=e("当该元素的 ")),s("a",y,[n[29]||(n[29]=s("code",null,"connectedCallback",-1)),t(a)]),n[31]||(n[31]=e(" 初次调用时，一个 Vue 自定义元素会在内部挂载一个 Vue 组件实例到它的 shadow root 上。"))]),n[32]||(n[32]=s("li",null,[e("当此元素的 "),s("code",null,"disconnectedCallback"),e(" 被调用时，Vue 会在一个微任务后检查元素是否还留在文档中。 "),s("ul",null,[s("li",null,"如果元素仍然在文档中，那么说明它是一次移动操作，组件实例将被保留；"),s("li",null,"如果该元素不再存在于文档中，那么说明这是一次移除操作，组件实例将被销毁。")])],-1))]),n[102]||(n[102]=o(`<h4 id="props" tabindex="-1"><a class="header-anchor" href="#props"><span>Props</span></a></h4><ul><li>所有使用 <code>props</code> 选项声明了的 props 都会作为属性定义在该自定义元素上。Vue 会自动地、恰当地处理其作为 attribute 还是属性的反射。 <ul><li>attribute 总是根据需要反射为相应的属性类型。</li><li>基础类型的属性值 (<code>string</code>，<code>boolean</code> 或 <code>number</code>) 会被反射为 attribute。</li></ul></li><li>当它们被设为 attribute 时 (永远是字符串)，Vue 也会自动将以 <code>Boolean</code> 或 <code>Number</code> 类型声明的 prop 转换为所期望的类型。比如下面这样的 props 声明：<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">selected</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>并以下面这样的方式使用自定义元素：<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span> <span class="token attr-name">selected</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>在组件中，<code>selected</code> 会被转换为 <code>true</code> (boolean 类型值) 而 <code>index</code> 会被转换为 <code>1</code> (number 类型值)。</li></ul><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4>`,3)),s("p",null,[n[34]||(n[34]=e("通过 ")),n[35]||(n[35]=s("code",null,"this.$emit",-1)),n[36]||(n[36]=e(" 或者 setup 中的 ")),n[37]||(n[37]=s("code",null,"emit",-1)),n[38]||(n[38]=e(" 触发的事件都会通过以 ")),s("a",E,[n[33]||(n[33]=e("CustomEvents")),t(a)]),n[39]||(n[39]=e(" 的形式从自定义元素上派发。额外的事件参数 (payload) 将会被暴露为 CustomEvent 对象上的一个 ")),n[40]||(n[40]=s("code",null,"detail",-1)),n[41]||(n[41]=e(" 数组。"))]),n[103]||(n[103]=s("h4",{id:"插槽",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#插槽"},[s("span",null,"插槽")])],-1)),s("p",null,[n[43]||(n[43]=e("在一个组件中，插槽将会照常使用 ")),n[44]||(n[44]=s("code",null,"<slot/>",-1)),n[45]||(n[45]=e(" 渲染。然而，当使用最终的元素时，它只接受")),s("a",V,[n[42]||(n[42]=e("原生插槽的语法")),t(a)]),n[46]||(n[46]=e("："))]),s("ul",null,[s("li",null,[n[48]||(n[48]=e("不支持")),s("a",C,[n[47]||(n[47]=e("作用域插槽")),t(a)]),n[49]||(n[49]=e("。"))]),n[50]||(n[50]=o(`<li>当传递具名插槽时，应使用 <code>slot</code> attribute 而不是 <code>v-slot</code> 指令：<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-element</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>named<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-element</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))]),n[104]||(n[104]=s("h4",{id:"依赖注入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#依赖注入"},[s("span",null,"依赖注入")])],-1)),s("p",null,[s("a",j,[n[51]||(n[51]=e("Provide / Inject API")),t(a)]),n[53]||(n[53]=e(" 和")),s("a",w,[n[52]||(n[52]=e("相应的组合式 API")),t(a)]),n[54]||(n[54]=e(" 在 Vue 定义的自定义元素中都可以正常工作。但是请注意，依赖关系")),n[55]||(n[55]=s("strong",null,"只在自定义元素之间",-1)),n[56]||(n[56]=e("起作用。例如一个 Vue 定义的自定义元素就无法注入一个由常规 Vue 组件所提供的属性。"))]),n[105]||(n[105]=o(`<h4 id="应用级配置" tabindex="-1"><a class="header-anchor" href="#应用级配置"><span>应用级配置</span></a></h4><p>你可以使用 <code>configureApp</code> 选项来配置 Vue 自定义元素的应用实例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">defineCustomElement</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">configureApp</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将单文件组件编译为自定义元素" tabindex="-1"><a class="header-anchor" href="#将单文件组件编译为自定义元素"><span>将单文件组件编译为自定义元素</span></a></h3><p><code>defineCustomElement</code> 也可以搭配 Vue 单文件组件 (SFC) 使用。但是，根据默认的工具链配置，SFC 中的 <code>&lt;style&gt;</code> 在生产环境构建时仍然会被抽取和合并到一个单独的 CSS 文件中。当正在使用单文件组件编写自定义元素时，通常需要改为注入 <code>&lt;style&gt;</code> 标签到自定义元素的 shadow root 上。</p><p>官方的单文件组件工具链支持以“自定义元素模式”导入单文件组件 (需要 <code>@vitejs/plugin-vue@^1.4.0</code> 或 <code>vue-loader@^16.5.0</code>)。一个以自定义元素模式加载的单文件组件将会内联其 <code>&lt;style&gt;</code> 标签为 CSS 字符串，并将其暴露为组件的 <code>styles</code> 选项。这会被 <code>defineCustomElement</code> 提取使用，并在初始化时注入到元素的 shadow root 上。</p><p>要开启这个模式，只需要将你的组件文件以 <code>.ce.vue</code> 结尾即可：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineCustomElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Example <span class="token keyword">from</span> <span class="token string">&#39;./Example.ce.vue&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Example<span class="token punctuation">.</span>styles<span class="token punctuation">)</span> <span class="token comment">// [&quot;/* 内联 css */&quot;]</span>

<span class="token comment">// 转换为自定义元素构造器</span>
<span class="token keyword">const</span> ExampleElement <span class="token operator">=</span> <span class="token function">defineCustomElement</span><span class="token punctuation">(</span>Example<span class="token punctuation">)</span>

<span class="token comment">// 注册</span>
customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;my-example&#39;</span><span class="token punctuation">,</span> ExampleElement<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要自定义如何判断是否将文件作为自定义元素导入 (例如将所有的单文件组件都视为用作自定义元素)，你可以通过给构建插件传递相应插件的 <code>customElement</code> 选项来实现：</p>`,9)),s("ul",null,[s("li",null,[s("a",x,[n[57]||(n[57]=e("@vitejs/plugin-vue")),t(a)])]),s("li",null,[s("a",h,[n[58]||(n[58]=e("vue-loader")),t(a)])])]),n[106]||(n[106]=s("h3",{id:"基于-vue-构建自定义元素库",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#基于-vue-构建自定义元素库"},[s("span",null,"基于 Vue 构建自定义元素库")])],-1)),s("ul",null,[n[65]||(n[65]=s("li",null,[e("不建议 "),s("ul",null,[s("li",null,[e("当使用 Vue 构建自定义元素时，该元素将依赖于 Vue 的运行时。这会有大约 "),s("strong",null,"16kb 的基本打包大小"),e("，并视功能的使用情况而增长。这意味着"),s("strong",null,"如果只编写一个自定义元素，那么使用 Vue 并不是理想的选择"),e("。")])])],-1)),s("li",null,[n[64]||(n[64]=e("建议 ")),s("ul",null,[s("li",null,[n[60]||(n[60]=e("你可能想要使用原生 JavaScript、")),s("a",B,[n[59]||(n[59]=e("petite-vue")),t(a)]),n[61]||(n[61]=e("，或其他框架以追求更小的运行时体积。但是，如果你需要编写的是")),n[62]||(n[62]=s("strong",null,"一组",-1)),n[63]||(n[63]=e("具有复杂逻辑的自定义元素，那么这个基本体积是非常合理的，因为 Vue 允许用更少的代码编写每个组件。在一起发布的元素越多，收益就会越高。"))])])])]),n[107]||(n[107]=o(`<p>如果自定义元素将在同样使用 Vue 的应用中使用，那么你可以选择将构建包中的 Vue 外部化 (externalize)，这样这些自定义元素将与宿主应用使用同一份 Vue。</p><p>建议按元素分别导出构造函数，以便用户可以灵活地按需导入它们，并使用期望的标签名称注册它们。你还可以导出一个函数来方便用户自动注册所有元素。下面是一个 Vue 自定义元素库的入口文件示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineCustomElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./MyFoo.ce.vue&#39;</span>
<span class="token keyword">import</span> Bar <span class="token keyword">from</span> <span class="token string">&#39;./MyBar.ce.vue&#39;</span>

<span class="token keyword">const</span> MyFoo <span class="token operator">=</span> <span class="token function">defineCustomElement</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>
<span class="token keyword">const</span> MyBar <span class="token operator">=</span> <span class="token function">defineCustomElement</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span>

<span class="token comment">// 分别导出元素</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> MyFoo<span class="token punctuation">,</span> MyBar <span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;my-foo&#39;</span><span class="token punctuation">,</span> MyFoo<span class="token punctuation">)</span>
  customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;my-bar&#39;</span><span class="token punctuation">,</span> MyBar<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("p",null,[n[68]||(n[68]=e("如果你有非常多的组件，你也可以利用构建工具的功能，比如 Vite 的 ")),s("a",S,[n[66]||(n[66]=e("glob 导入")),t(a)]),n[69]||(n[69]=e("或者 webpack 的 ")),s("a",M,[n[67]||(n[67]=s("code",null,"require.context",-1)),t(a)]),n[70]||(n[70]=e(" 来从一个文件夹加载所有的组件。"))]),n[108]||(n[108]=s("h3",{id:"web-components-和-typescript",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#web-components-和-typescript"},[s("span",null,"Web Components 和 TypeScript")])],-1)),s("p",null,[n[72]||(n[72]=e("如果你正在开发一个应用或者库，你可能想要为你的 Vue 组件添加")),s("a",W,[n[71]||(n[71]=e("类型检查")),t(a)]),n[73]||(n[73]=e("，包括那些被定义为自定义元素的组件。"))]),s("p",null,[n[77]||(n[77]=e("自定义元素是使用原生 API 全局注册的，所以默认情况下，当在 Vue 模板中使用时，它们不会有类型推断。为了给注册为自定义元素的 Vue 组件提供类型支持，我们可以通过 Vue 模板和/或 ")),s("a",A,[n[74]||(n[74]=e("JSX")),t(a)]),n[78]||(n[78]=e(" 中的 ")),s("a",D,[n[75]||(n[75]=s("code",null,"GlobalComponents",-1)),n[76]||(n[76]=e(" 接口")),t(a)]),n[79]||(n[79]=e("来注册全局组件的类型："))]),n[109]||(n[109]=o(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineCustomElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// vue 单文件组件</span>
<span class="token keyword">import</span> CounterSFC <span class="token keyword">from</span> <span class="token string">&#39;./src/components/counter.ce.vue&#39;</span>

<span class="token comment">// 将组件转换为 web components</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token function">defineCustomElement</span><span class="token punctuation">(</span>CounterSFC<span class="token punctuation">)</span>

<span class="token comment">// 注册全局类型</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;vue&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">{</span>
    Counter<span class="token operator">:</span> <span class="token keyword">typeof</span> Counter
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web-components-vs-vue-components" tabindex="-1"><a class="header-anchor" href="#web-components-vs-vue-components"><span>Web Components vs. Vue Components</span></a></h2><p><em>一些开发者认为应该避免使用框架专有的组件模型，而改为全部使用自定义元素来构建应用，因为这样可以使应用“永不过时”</em>。在这里，我们将解释为什么我们认为这样的想法过于简单。</p><h3 id="vue组件的优点" tabindex="-1"><a class="header-anchor" href="#vue组件的优点"><span>Vue组件的优点</span></a></h3><p>自定义元素和 Vue 组件之间确实存在一定程度的功能重叠：它们都允许我们定义具有数据传递、事件发射和生命周期管理的可重用组件。然而，Web Components 的 API 相对来说是更底层的和更基础的。要构建一个实际的应用，我们需要相当多平台没有涵盖的附加功能：</p>`,5)),s("ul",null,[n[83]||(n[83]=s("li",null,"一个声明式的、高效的模板系统；",-1)),n[84]||(n[84]=s("li",null,"一个响应式的，利于跨组件逻辑提取和重用的状态管理系统；",-1)),s("li",null,[n[81]||(n[81]=e("一种在服务器上呈现组件并在客户端“激活”(hydrate) 组件的高性能方法 (SSR)，这对 SEO 和 ")),s("a",P,[n[80]||(n[80]=e("LCP 这样的 Web 关键指标")),t(a)]),n[82]||(n[82]=e("非常重要。原生自定义元素 SSR 通常需要在 Node.js 中模拟 DOM，然后序列化更改后的 DOM，而 Vue SSR 则尽可能地将其编译为拼接起来的字符串，这会高效得多。"))])]),n[110]||(n[110]=s("p",null,"Vue 的组件模型在设计时同时兼顾了这些需求，因此是一个更内聚的系统。",-1)),n[111]||(n[111]=s("h3",{id:"自定义元素的缺点",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义元素的缺点"},[s("span",null,"自定义元素的缺点")])],-1)),n[112]||(n[112]=s("p",null,"当你的团队有足够的技术水平时，可能可以在原生自定义元素的基础上构建具备同等功能的组件。但这也意味着你将承担长期维护内部框架的负担，同时失去了像 Vue 这样成熟的框架生态社区所带来的收益。",-1)),n[113]||(n[113]=s("p",null,"也有一些框架使用自定义元素作为其组件模型的基础，但它们都不可避免地要引入自己的专有解决方案来解决上面列出的问题。使用这些框架便意味着对它们针对这些问题的技术决策买单。不管这类框架怎么宣传它们“永不过时”，它们其实都无法保证你以后永远不需要重构。",-1)),n[114]||(n[114]=s("p",null,"除此之外，我们还发现自定义元素存在以下限制：",-1)),s("ul",null,[s("li",null,[n[88]||(n[88]=e("贪婪 (eager) 的插槽求值会阻碍组件之间的可组合性 ")),s("ul",null,[s("li",null,[n[86]||(n[86]=e("Vue 的")),s("a",L,[n[85]||(n[85]=e("作用域插槽")),t(a)]),n[87]||(n[87]=e("是一套强大的组件组合机制，而由于原生插槽的贪婪求值性质，自定义元素无法支持这样的设计。贪婪求值的插槽也意味着接收组件时不能控制何时或是否创建插槽内容的节点。"))])])]),s("li",null,[n[94]||(n[94]=e("局部作用域的 CSS ")),s("ul",null,[s("li",null,[n[91]||(n[91]=e("在当下要想使用 shadow DOM 书写局部作用域的 CSS，必须将样式嵌入到 JavaScript 中才可以在运行时将其注入到 shadow root 上。这也导致了 SSR 场景下需要渲染大量重复的样式标签。虽然有一些")),s("a",O,[n[89]||(n[89]=e("平台功能")),t(a)]),n[92]||(n[92]=e("在尝试解决这一领域的问题，但是直到现在还没有达到通用支持的状态，而且仍有生产性能 / SSR 方面的问题需要解决。可与此同时，Vue 的单文件组件本身就提供了 ")),s("a",q,[n[90]||(n[90]=e("CSS 局域化机制")),t(a)]),n[93]||(n[93]=e("，并支持抽取样式到纯 CSS 文件中。"))])])])]),n[115]||(n[115]=s("h3",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结"},[s("span",null,"总结")])],-1)),n[116]||(n[116]=s("p",null,"Vue 将始终紧跟 Web 平台的最新标准，如果平台的新功能能让我们的工作变得更简单，我们将非常乐于利用它们。但是，我们的目标是提供“好用，且现在就能用”的解决方案。这意味着我们在采用新的原生功能时需要保持客观、批判性的态度，并在原生功能完成度不足的时候选择更适当的解决方案。",-1))])}const I=p(r,[["render",F],["__file","通用组件 - Vue框架.html.vue"]]),H=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%B8%8E%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%93%E9%A2%98/%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%20-%20Vue%E6%A1%86%E6%9E%B6.html","title":"通用组件 - Vue框架","lang":"zh-CN","frontmatter":{"Author":"https://cn.vuejs.org/guide/extras/web-components.html","description":"通用组件 - Vue框架 我们将重点放在Vue的 \\"用 Vue 来构建标准的 Web Component，这些 Web Component 可以嵌入到任何 HTML 页面中\\" 功能 参考官方文档：Vue 与 Web Components (感觉中文版翻译有问题，推荐看原文或与原文对照看) Web Components 是一组 web 原生 API 的统...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/%E6%B8%90%E8%BF%9B%E5%BC%8F%E4%B8%8E%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%E4%B8%93%E9%A2%98/%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6%20-%20Vue%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"通用组件 - Vue框架"}],["meta",{"property":"og:description","content":"通用组件 - Vue框架 我们将重点放在Vue的 \\"用 Vue 来构建标准的 Web Component，这些 Web Component 可以嵌入到任何 HTML 页面中\\" 功能 参考官方文档：Vue 与 Web Components (感觉中文版翻译有问题，推荐看原文或与原文对照看) Web Components 是一组 web 原生 API 的统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通用组件 - Vue框架\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"通用组件 - Vue框架","slug":"通用组件-vue框架","link":"#通用组件-vue框架","children":[{"level":2,"title":"在 Vue 中使用自定义元素","slug":"在-vue-中使用自定义元素","link":"#在-vue-中使用自定义元素","children":[{"level":3,"title":"跳过组件解析","slug":"跳过组件解析","link":"#跳过组件解析","children":[{"level":4,"title":"浏览器内编译时的示例配置","slug":"浏览器内编译时的示例配置","link":"#浏览器内编译时的示例配置","children":[]},{"level":4,"title":"Vite 示例配置","slug":"vite-示例配置","link":"#vite-示例配置","children":[]},{"level":4,"title":"Vue CLI 示例配置","slug":"vue-cli-示例配置","link":"#vue-cli-示例配置","children":[]}]},{"level":3,"title":"传递 DOM 属性","slug":"传递-dom-属性","link":"#传递-dom-属性","children":[]}]},{"level":2,"title":"使用 Vue 构建自定义元素","slug":"使用-vue-构建自定义元素","link":"#使用-vue-构建自定义元素","children":[{"level":3,"title":"defineCustomElement","slug":"definecustomelement","link":"#definecustomelement","children":[{"level":4,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":4,"title":"Props","slug":"props","link":"#props","children":[]},{"level":4,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":4,"title":"插槽","slug":"插槽","link":"#插槽","children":[]},{"level":4,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":4,"title":"应用级配置","slug":"应用级配置","link":"#应用级配置","children":[]}]},{"level":3,"title":"将单文件组件编译为自定义元素","slug":"将单文件组件编译为自定义元素","link":"#将单文件组件编译为自定义元素","children":[]},{"level":3,"title":"基于 Vue 构建自定义元素库","slug":"基于-vue-构建自定义元素库","link":"#基于-vue-构建自定义元素库","children":[]},{"level":3,"title":"Web Components 和 TypeScript","slug":"web-components-和-typescript","link":"#web-components-和-typescript","children":[]}]},{"level":2,"title":"Web Components vs. Vue Components","slug":"web-components-vs-vue-components","link":"#web-components-vs-vue-components","children":[{"level":3,"title":"Vue组件的优点","slug":"vue组件的优点","link":"#vue组件的优点","children":[]},{"level":3,"title":"自定义元素的缺点","slug":"自定义元素的缺点","link":"#自定义元素的缺点","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.4,"words":3719},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/通用组件 - Vue框架.md","excerpt":"\\n<p>我们将重点放在Vue的 \\"用 Vue 来<a href=\\"https://cn.vuejs.org/guide/extras/web-components.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">构建标准的 Web Component</a>，这些 Web Component 可以嵌入到任何 HTML 页面中\\" 功能</p>\\n<p>参考官方文档：<a href=\\"https://cn.vuejs.org/guide/extras/web-components.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vue 与 Web Components</a> (<mark><strong>感觉中文版翻译有问题，推荐看原文或与原文对照看</strong></mark>)</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/通用组件 - Vue框架.md","value":{"title":"通用组件 - Vue框架","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/渐进式与通用组件专题/通用组件 - Vue框架.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{I as comp,H as data};
