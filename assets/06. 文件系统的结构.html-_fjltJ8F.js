import{_ as s,e as a,g as n,o as l}from"./app-BapqMaOt.js";const e="/assets/%E5%9D%97%E7%BB%84-CSWFR7up.png",h={};function p(t,i){return l(),a("div",null,i[0]||(i[0]=[n('<h1 id="文件系统的结构" tabindex="-1"><a class="header-anchor" href="#文件系统的结构"><span>文件系统的结构</span></a></h1><p>前面提到 Linux 是用位图的方式管理空闲空间。</p><ol><li>创建新文件时分配inode：用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配</li><li>存储数据时分配块：要存储数据时，会通过块的位图找到空闲的块，并分配</li></ol><h2 id="大文件问题-——-块组" tabindex="-1"><a class="header-anchor" href="#大文件问题-——-块组"><span>大文件问题 —— 块组</span></a></h2><p>先区分一下</p><ul><li>逻辑块/块 (大小单位)</li><li>超级块：Size 1块，存全局信息</li><li>数据块：Size N块，（存文件内容？文件块？）</li><li>块组：见后</li></ul><p>原方案</p><p>但仔细计算一下还是有问题的</p><p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块 4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code> 个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为 <code>2^15 * 4 * 1024 = 2^27</code> 个 byte，也就是 128M。</p><p>也就是说按照上面的结构，如果采用「一个块的位图 + 一系列的块」外加「一个块的 inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就 128M，这太少了，现在很多文件都比这个大。</p><p>块组方案</p><p>在 Linux 文件系统，把这个结构称为一个<strong>块组</strong>，那么有 N 多的块组，就能够表示 N 大的文件（哈？是N个块组还是块组里有N个数据块？表示的是N这么大还是N个大的文件）</p><p>下图给出了 Linux Ext2 整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p><p><img src="'+e+`" alt="img" loading="lazy"></p><p>最前面的第一个块是引导块，在系统启动时用于启用引导，接着后面就是一个一个连续的块组了，块组的内容如下：</p><ul><li><p><em>超级块（全局、重复）</em>，包含的是文件系统的重要信息，比如 <strong>inode 总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等</strong>。</p><ul><li><p>这个可以通过命令 <code>df -i</code> 和 <code>df -l</code> 查看</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> df</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件系统</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        Inodes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  已用I</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   可用I</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已用I%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          2031005</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   1482</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2029523</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/dev/sda5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      7749632</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 246137</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7503495</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     4%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          2031005</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2031004</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/shm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          2031005</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2031001</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run/lock</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/dev/sda2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">       0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /boot/efi</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">           406201</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    159</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  406042</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run/user/1000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> df</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件系统</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          1K的块</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     已用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      可用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已用%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载点</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            1624804</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     2244</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   1622560</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/dev/sda5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      121451184</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 14523436</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100712224</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   13%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            8124020</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   8124020</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    0%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/shm</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">               5120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">        4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      5116</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run/lock</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/dev/sda2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">         524252</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">     6220</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    518032</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    2%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /boot/efi</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tmpfs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">            1624804</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">      120</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   1624684</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    1%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /run/user/1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><em>块组描述符（全局、重复）</em>，包含文件系统中各个块组的状态，比如块组中空闲块和 inode 的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。</p></li><li><p><em>数据位图和 inode 位图</em>， 用于表示对应的数据块或 inode 是空闲的，还是被使用中。</p></li><li><p><em>inode 列表</em>，包含了块组中所有的 inode，inode 用于保存文件系统中与各个文件和目录相关的所有元数据。</p></li><li><p><em>数据块</em>，包含文件的有用数据。</p></li></ul><h2 id="重复信息-为什么重复、优化方案" tabindex="-1"><a class="header-anchor" href="#重复信息-为什么重复、优化方案"><span>重复信息（为什么重复、优化方案）</span></a></h2><p>你可以会发现每个块组里有很多重复的信息，比如 <strong>超级块和块组描述符表，这两个都是全局信息，而且非常的重要</strong>，这么做是有两个原因：</p><ul><li>如果系统崩溃破坏了超级块或块组描述符，有关文件系统结构和内容的所有信息都会丢失。如果有冗余的副本，该信息是可能恢复的。</li><li>通过使文件和管理数据尽可能接近，减少了磁头寻道和旋转，这可以提高文件系统的性能。</li></ul><p>不过，Ext2 的后续版本采用了稀疏技术。该做法是，超级块和块组描述符表不再存储到文件系统的每个块组中，而是只写入到块组 0、块组 1 和其他 ID 可以表示为 3、 5、7 的幂的块组中。</p>`,20)]))}const d=s(h,[["render",p],["__file","06. 文件系统的结构.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/06.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84.html","title":"文件系统的结构","lang":"zh-CN","frontmatter":{"description":"文件系统的结构 前面提到 Linux 是用位图的方式管理空闲空间。 创建新文件时分配inode：用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配 存储数据时分配块：要存储数据时，会通过块的位图找到空闲的块，并分配 大文件问题 —— 块组 先区分一下 逻辑块/块 (大小单位) 超级块：Size 1块...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/06.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"文件系统的结构"}],["meta",{"property":"og:description","content":"文件系统的结构 前面提到 Linux 是用位图的方式管理空闲空间。 创建新文件时分配inode：用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配 存储数据时分配块：要存储数据时，会通过块的位图找到空闲的块，并分配 大文件问题 —— 块组 先区分一下 逻辑块/块 (大小单位) 超级块：Size 1块..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件系统的结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.48,"words":1045},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/06. 文件系统的结构.md","excerpt":"\\n<p>前面提到 Linux 是用位图的方式管理空闲空间。</p>\\n<ol>\\n<li>创建新文件时分配inode：用户在创建一个新文件时，Linux 内核会通过 inode 的位图找到空闲可用的 inode，并进行分配</li>\\n<li>存储数据时分配块：要存储数据时，会通过块的位图找到空闲的块，并分配</li>\\n</ol>\\n<h2>大文件问题 —— 块组</h2>\\n<p>先区分一下</p>\\n<ul>\\n<li>逻辑块/块 (大小单位)</li>\\n<li>超级块：Size 1块，存全局信息</li>\\n<li>数据块：Size N块，（存文件内容？文件块？）</li>\\n<li>块组：见后</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/06. 文件系统的结构.md","value":{"title":"06. 文件系统的结构","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/06. 文件系统的结构.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,r as data};
