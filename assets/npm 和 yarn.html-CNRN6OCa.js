import{_ as a,c as e,e as i,o as t}from"./app-BgHc8lP1.js";const l={};function s(r,n){return t(),e("div",null,n[0]||(n[0]=[i(`<h1 id="npm和yarn" tabindex="-1"><a class="header-anchor" href="#npm和yarn"><span>npm和Yarn</span></a></h1><h2 id="yarn的安装" tabindex="-1"><a class="header-anchor" href="#yarn的安装"><span>Yarn的安装</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yarn</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="yarn是什么" tabindex="-1"><a class="header-anchor" href="#yarn是什么"><span>Yarn是什么？</span></a></h2><p>“Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如<a href="https://link.jianshu.com?t=http%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fcode.facebook.com%2Fposts%2F1840075619545360" target="_blank" rel="noopener noreferrer">官方文档</a>中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。”这句话让我想起了使用npm时的坑了：</p><ul><li><code>npm install</code>的时候<strong>巨慢</strong>。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。</li><li>同一个项目，安装的时候<strong>无法保持一致性</strong>。由于package.json文件中版本号的特点，下面三个版本号在安装的时候代表不同的含义。</li></ul><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;5.0.3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 安装指定的5.0.3版本</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;~5.0.3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 安装5.0.X中最新的版本</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;^5.0.3&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 安装5.X.X中最新的版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装的时候，包会在同一时间下载和安装，中途某个时候，一个包抛出了一个错误，但是npm会继续下载和安装包。因为npm会把所有的日志输出到终端，有关错误包的错误信息就会在一大堆npm打印的警告中丢失掉，并且你甚至永远<strong>不会注意到实际发生的错误</strong>。</li></ul><h2 id="yarn的优点" tabindex="-1"><a class="header-anchor" href="#yarn的优点"><span>Yarn的优点？</span></a></h2><ul><li><strong>速度快</strong> 。速度快主要来自以下两个方面：</li></ul><ol><li>并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。</li><li>离线模式：如果之前已经安装过一个软件包，用Yarn再次安装时之间从缓存中获取，就不用像npm那样再从网络下载了。</li></ol><ul><li>安装<strong>版本统一</strong>：为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm 其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install 的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm 和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过 shrinkwrap 命令生成 npm-shrinkwrap.json 文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。</li><li><strong>更简洁的输出</strong>：npm 的输出信息比较冗长。在执行 <code>npm install &lt;package&gt;</code> 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn 简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</li><li>**多注册来源处理：**所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</li><li><strong>更好的语义化</strong>： yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。</li></ul><h2 id="yarn和npm命令对比" tabindex="-1"><a class="header-anchor" href="#yarn和npm命令对比"><span>Yarn和npm命令对比</span></a></h2><table><thead><tr><th style="text-align:right;">npm</th><th style="text-align:left;">yarn</th></tr></thead><tbody><tr><td style="text-align:right;">npm install</td><td style="text-align:left;">yarn</td></tr><tr><td style="text-align:right;">npm install react --save</td><td style="text-align:left;">yarn add react</td></tr><tr><td style="text-align:right;">npm uninstall react --save</td><td style="text-align:left;">yarn remove react</td></tr><tr><td style="text-align:right;">npm install react --save-dev</td><td style="text-align:left;">yarn add react --dev</td></tr><tr><td style="text-align:right;">npm update --save</td><td style="text-align:left;">yarn upgrade</td></tr></tbody></table><h2 id="npm的未来-npm5-0" tabindex="-1"><a class="header-anchor" href="#npm的未来-npm5-0"><span>npm的未来：npm5.0</span></a></h2><p>有了yarn的压力之后，npm做了一些类似的改进。</p><ol><li>默认新增了类似yarn.lock的 package-lock.json；</li><li>git 依赖支持优化：这个特性在需要安装大量内部项目（例如在没有自建源的内网开发），或需要使用某些依赖的未发布版本时很有用。在这之前可能需要使用指定 commit_id 的方式来控制版本。</li><li>文件依赖优化：在之前的版本，如果将本地目录作为依赖来安装，将会把文件目录作为副本拷贝到 node_modules 中。而在 npm5 中，将改为使用创建 symlinks 的方式来实现（使用本地 tarball 包除外），而不再执行文件拷贝。这将会提升安装速度。目前yarn还不支持。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>在npm5.0之前，yarn的优势特别明显。但是在npm之后，通过以上一系列对比，我们可以看到 npm5 在速度和使用上确实有了很大提升，值得尝试，不过还没有超过yarn。</p><p>综上我个人的建议是如果你已经在个人项目上使用 yarn，并且没有遇到更多问题，目前完全可以继续使用。但如果有兼容 npm 的场景，或者身处在使用 npm，cnpm，tnpm 的团队，以及还没有切到 yarn 的项目，那现在就可以试一试 npm5 了。</p>`,20)]))}const o=a(l,[["render",s],["__file","npm 和 yarn.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/FrontEnd/npm%20%E5%92%8C%20yarn.html","title":"npm和Yarn","lang":"zh-CN","frontmatter":{"description":"npm和Yarn Yarn的安装 Yarn是什么？ “Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。”这句话让我想起了使用npm时的坑了： npm install的时候巨慢。特别是新的项目拉下来要等半天，删除no...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/FrontEnd/npm%20%E5%92%8C%20yarn.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"npm和Yarn"}],["meta",{"property":"og:description","content":"npm和Yarn Yarn的安装 Yarn是什么？ “Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。”这句话让我想起了使用npm时的坑了： npm install的时候巨慢。特别是新的项目拉下来要等半天，删除no..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"npm和Yarn\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"npm和Yarn","slug":"npm和yarn","link":"#npm和yarn","children":[{"level":2,"title":"Yarn的安装","slug":"yarn的安装","link":"#yarn的安装","children":[]},{"level":2,"title":"Yarn是什么？","slug":"yarn是什么","link":"#yarn是什么","children":[]},{"level":2,"title":"Yarn的优点？","slug":"yarn的优点","link":"#yarn的优点","children":[]},{"level":2,"title":"Yarn和npm命令对比","slug":"yarn和npm命令对比","link":"#yarn和npm命令对比","children":[]},{"level":2,"title":"npm的未来：npm5.0","slug":"npm的未来-npm5-0","link":"#npm的未来-npm5-0","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{},"readingTime":{"minutes":4.37,"words":1311},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/FrontEnd/npm 和 yarn.md","excerpt":"\\n<h2>Yarn的安装</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">npm</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -g</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> yarn</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/FrontEnd/npm 和 yarn.md","value":{"title":"npm 和 yarn","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/FrontEnd/npm 和 yarn.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,h as data};
