import{_ as s,c as a,e,o as l}from"./app-BgHc8lP1.js";const n={};function t(h,i){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>Qt</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点"><span>知识点</span></a></h1><h2 id="qt窗口坐标系" tabindex="-1"><a class="header-anchor" href="#qt窗口坐标系"><span>Qt窗口坐标系</span></a></h2><ul><li>左上角是原点 (0,0)，水平往右为x正方向，垂直往下为y正方向</li><li>对于嵌套窗口，其坐标是相对于父窗口来说的</li></ul><h2 id="qt宏" tabindex="-1"><a class="header-anchor" href="#qt宏"><span>Qt宏</span></a></h2><h3 id="qt常用宏" tabindex="-1"><a class="header-anchor" href="#qt常用宏"><span>Qt常用宏</span></a></h3><ul><li><p>Q_OBJECT，Qt元对象系统</p></li><li><p>QT_BEGIN_NAMESPACE，命名空间</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QT_BEGIN_NAMESPACE</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Ui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">QT_END_NAMESPACE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>QT_FORWARD_DECLARE_CLASS，相当于class 类名，和头文件#include作用类似</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QT_FORWARD_DECLARE_CLASS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QAction)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QT_FORWARD_DECLARE_CLASS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QActionGroup)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QT_FORWARD_DECLARE_CLASS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QMenu)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">QT_FORWARD_DECLARE_CLASS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(QSpinBox)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="q-object宏-qt元对象系统" tabindex="-1"><a class="header-anchor" href="#q-object宏-qt元对象系统"><span>Q_OBJECT宏 &amp; Qt元对象系统</span></a></h3><p>Q_OBJECT宏</p><ul><li>作用：是启动<code>Qt5元对象系统</code>的一些特性（如支持信号和槽等）</li></ul><p>Qt元对象系统</p><ul><li>作用 <ul><li>对象间的通信机制（信号和槽）</li><li>运行时类型信息</li><li>动态属性系统的支持</li></ul></li><li>简概 <ul><li>是标准C++的一个扩展，使Qt能更好地实现GUI图形用户界面编程</li><li>不支持C++模板，尽管该模板扩展了标准C++的功能</li></ul></li><li>基于 <ul><li>基类QObject：任何需要元对象系统功能的类，必须继承自QObejct</li><li>Q_OBJECT宏：必须出现在类的私有声明区，用于启动元对象的特性</li><li>元对象编译器（<em>Mete-Object Compiler</em>，moc）：为QObject子类实现元对象特性提供代码实现</li></ul></li></ul><h3 id="一些比较奇怪的用法" tabindex="-1"><a class="header-anchor" href="#一些比较奇怪的用法"><span>一些比较奇怪的用法</span></a></h3><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#ifndef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> QT_NO_CONTEXTMENU</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> contextMenuEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">QContextMenuEvent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // QT_NO_CONTEXTMENU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#ifdef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Q_OS_MAC</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&lt;p&gt;On OS X, the </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Black</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dock widget has been created as a &quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;&lt;em&gt;Drawer&lt;/em&gt;, which is a special kind of QDockWidget.&lt;/p&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#ifdef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Q_OS_MACOS</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setUnifiedTitleAndToolBarOnMac</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qt常用算法" tabindex="-1"><a class="header-anchor" href="#qt常用算法"><span>Qt常用算法</span></a></h2><ul><li><code>aAbs()</code>，返回绝对值</li><li><code>qMax(,)</code>，返回最大值</li><li><code>qRound()</code>，返回圆整值</li><li><code>qSwap(,)</code>，交换两数</li></ul><h2 id="qt的foreach、c-11的范围for、容器循环" tabindex="-1"><a class="header-anchor" href="#qt的foreach、c-11的范围for、容器循环"><span>QT的foreach、C++11的范围for、容器循环</span></a></h2><p>Qt提供的替代C++中for循环的关键字</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">foreach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, QList</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;int&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // process</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过话说C++11本来就有基于范围for循环，可用于数组和容器赖</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x : prices) cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 只能输出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x : prices) x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">				// 可以改变数组的内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="qt构建、运行、qmake的区别" tabindex="-1"><a class="header-anchor" href="#qt构建、运行、qmake的区别"><span>Qt构建、运行、qmake的区别</span></a></h2><ul><li>区别 <ul><li><strong>qmake</strong>：根据实际环境创建项目文件.pro 并且运行qmake生成适当的Makefile</li><li><strong>构建</strong>：构建是<strong>增量编译</strong>，只编译有变化部分</li><li><strong>重新构建</strong>：是把所有部分都<strong>重新编译</strong></li><li><strong>运行</strong>：有改动则根据已有的Makefile进行编译，执行；构建和重新构建时如果没有Makefile，会根据.pro文件等生成Makefile后再编译</li></ul></li><li>总结 <ul><li>所以运行顺序应该是：qmake - 构建 - 运行</li></ul></li></ul>`,26)]))}const d=s(n,[["render",t],["__file","01. 知识点.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/01.%20%E7%AE%80%E6%A6%82/03.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/01.%20%E7%9F%A5%E8%AF%86%E7%82%B9.html","title":"Qt","lang":"zh-CN","frontmatter":{"description":"Qt 目录 知识点 Qt窗口坐标系 左上角是原点 (0,0)，水平往右为x正方向，垂直往下为y正方向 对于嵌套窗口，其坐标是相对于父窗口来说的 Qt宏 Qt常用宏 Q_OBJECT，Qt元对象系统 QT_BEGIN_NAMESPACE，命名空间 QT_FORWARD_DECLARE_CLASS，相当于class 类名，和头文件#include作用类似 ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/01.%20%E7%AE%80%E6%A6%82/03.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/01.%20%E7%9F%A5%E8%AF%86%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Qt"}],["meta",{"property":"og:description","content":"Qt 目录 知识点 Qt窗口坐标系 左上角是原点 (0,0)，水平往右为x正方向，垂直往下为y正方向 对于嵌套窗口，其坐标是相对于父窗口来说的 Qt宏 Qt常用宏 Q_OBJECT，Qt元对象系统 QT_BEGIN_NAMESPACE，命名空间 QT_FORWARD_DECLARE_CLASS，相当于class 类名，和头文件#include作用类似 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Qt\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Qt","slug":"qt","link":"#qt","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"知识点","slug":"知识点","link":"#知识点","children":[{"level":2,"title":"Qt窗口坐标系","slug":"qt窗口坐标系","link":"#qt窗口坐标系","children":[]},{"level":2,"title":"Qt宏","slug":"qt宏","link":"#qt宏","children":[{"level":3,"title":"Qt常用宏","slug":"qt常用宏","link":"#qt常用宏","children":[]},{"level":3,"title":"Q_OBJECT宏 & Qt元对象系统","slug":"q-object宏-qt元对象系统","link":"#q-object宏-qt元对象系统","children":[]},{"level":3,"title":"一些比较奇怪的用法","slug":"一些比较奇怪的用法","link":"#一些比较奇怪的用法","children":[]}]},{"level":2,"title":"Qt常用算法","slug":"qt常用算法","link":"#qt常用算法","children":[]},{"level":2,"title":"QT的foreach、C++11的范围for、容器循环","slug":"qt的foreach、c-11的范围for、容器循环","link":"#qt的foreach、c-11的范围for、容器循环","children":[]},{"level":2,"title":"Qt构建、运行、qmake的区别","slug":"qt构建、运行、qmake的区别","link":"#qt构建、运行、qmake的区别","children":[]}]}],"git":{},"readingTime":{"minutes":2.01,"words":603},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/01. 简概/03. 基础知识点/01. 知识点.md","excerpt":"\\n<h1>目录</h1>\\n<h1>知识点</h1>\\n<h2>Qt窗口坐标系</h2>\\n<ul>\\n<li>左上角是原点 (0,0)，水平往右为x正方向，垂直往下为y正方向</li>\\n<li>对于嵌套窗口，其坐标是相对于父窗口来说的</li>\\n</ul>\\n<h2>Qt宏</h2>\\n<h3>Qt常用宏</h3>\\n<ul>\\n<li>\\n<p>Q_OBJECT，Qt元对象系统</p>\\n</li>\\n<li>\\n<p>QT_BEGIN_NAMESPACE，命名空间</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">QT_BEGIN_NAMESPACE</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">namespace</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\"> Ui</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> MainWindow</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">QT_END_NAMESPACE</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>QT_FORWARD_DECLARE_CLASS，相当于class 类名，和头文件#include作用类似</p>\\n<div class=\\"language-c++ line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c++\\" data-title=\\"c++\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">QT_FORWARD_DECLARE_CLASS</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(QAction)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">QT_FORWARD_DECLARE_CLASS</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(QActionGroup)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">QT_FORWARD_DECLARE_CLASS</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(QMenu)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">QT_FORWARD_DECLARE_CLASS</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(QSpinBox)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/01. 简概/03. 基础知识点/01. 知识点.md","value":{"title":"01. 知识点","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Multi/QT（Cpp）/01. 简概/03. 基础知识点/01. 知识点.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,r as data};
