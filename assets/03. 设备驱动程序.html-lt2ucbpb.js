import{_ as e,c as t,e as n,o as i}from"./app-7Hf1q1UN.js";const r="/assets/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F-BkXSmbas.png",o="/assets/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3%E4%B8%80%E8%87%B4%E6%80%A7-D53hpVs4.png",a="/assets/%E4%B8%AD%E6%96%AD%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B-Bazd8swj.png",s={};function p(h,l){return i(),t("div",null,l[0]||(l[0]=[n('<h1 id="设备驱动程序" tabindex="-1"><a class="header-anchor" href="#设备驱动程序"><span>设备驱动程序</span></a></h1><h2 id="提前总结" tabindex="-1"><a class="header-anchor" href="#提前总结"><span>提前总结</span></a></h2><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>物理设备 <ul><li><strong>设备控制器</strong><ul><li>作用：<strong>屏蔽设备差异</strong></li><li>位置：硬件</li></ul></li><li>中断控制器</li><li>DMA 控制器</li></ul></li><li>内核空间 <ul><li><strong>设备驱动程序</strong> (操作系统位置) <ul><li>作用：<strong>再屏蔽设备控制器差异</strong></li><li>位置：操作系统的一部分</li></ul></li></ul></li></ul><h3 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h3><p>设备控制器 &amp; 设备驱动程序 关系：</p><p>硬件 (设备 -&gt; <strong>设备控制器</strong> -&gt; <strong>中断器控制器</strong>) -&gt; 内存空间 (<strong>设备驱动程序</strong> -&gt; 操作系统其余部分) -&gt; 用户空间 (用户程序)</p><p><img src="'+r+'" alt="img" loading="lazy"></p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>虽然<strong>设备控制器</strong>屏蔽了设备的众多细节，但每种设备的控制器的寄存器、缓冲区等使用模式都是不同的，所以为了<strong>屏蔽「设备控制器」的差异</strong>，引入了<strong>设备驱动程序</strong>。</p><ul><li>设备控制器不属于操作系统范畴，它是属于<strong>硬件</strong></li><li>而设备驱动程序属于<strong>操作系统</strong>的一部分，操作系统的内核代码可以像本地调用代码一样使用设备驱动程序的接口，而设备驱动程序是面向设备控制器的代码，它发出操控设备控制器的指令后，才可以操作设备控制器。</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h2><h3 id="如何统一接口" tabindex="-1"><a class="header-anchor" href="#如何统一接口"><span>如何统一接口</span></a></h3><p>不同的设备控制器虽然功能不同，但是<strong>设备驱动程序会提供统一的接口给操作系统</strong>，这样不同的设备驱动程序，就可以以相同的方式接入操作系统。如下图：</p><p><img src="'+o+'" alt="img" loading="lazy"></p><h3 id="中断流程" tabindex="-1"><a class="header-anchor" href="#中断流程"><span>中断流程</span></a></h3><p>前面提到了不少关于中断的事情，设备完成了事情，则会<strong>发送中断来通知操作系统</strong>。那操作系统就需要有一个地方来处理这个中断，这个地方也就是在设备驱动程序里，它会及时响应控制器发来的中断请求，并根据这个中断的类型调用响应的<strong>中断处理程序</strong>进行处理。</p><p><img src="'+a+'" alt="img" loading="lazy"></p><ul><li><strong>设备驱动程序初始化时</strong>，要先注册一个该设备的中断处理函数。</li><li><strong>触发中断时</strong>，处理流程为： <ol><li>在 I/O 时，设备控制器如果已经准备好数据，则会通过<strong>中断控制器</strong>向 CPU 发送中断请求；</li><li>保护被中断进程的 CPU 上下文；</li><li>转入相应的设备中断处理函数；</li><li>进行中断处理；</li><li>恢复被中断进程的上下文；</li></ol></li></ul><h2 id="【扩展】faq" tabindex="-1"><a class="header-anchor" href="#【扩展】faq"><span>【扩展】FAQ</span></a></h2><p>（by Linc）</p><p>下面是个人的两个FAQ（这些是我以前刚刚学习陷入的误区或不肯定的地方）</p><h3 id="为什么要分两次消除差异" tabindex="-1"><a class="header-anchor" href="#为什么要分两次消除差异"><span>为什么要分两次消除差异？</span></a></h3><p>硬件 (设备控制器) 一次，操作系统 (内核, 设备驱动程序) 一次</p><p>我的个人理解是：</p><blockquote><ul><li>首先硬件的设备控制器肯定要有的：不然每个硬件都对需要一个单独的驱动（你换个鼠标都要重新安装驱动）；</li><li>然后操作系统的设备驱动也是要有的：如果苛求鼠标和显示器这种差异比较大的设备的控制器完全一样很难；</li></ul><p>即：设备控制器更多是屏蔽差异小的同类同系列的硬件，驱动程序则屏蔽差异大的硬件</p></blockquote><h3 id="中断" tabindex="-1"><a class="header-anchor" href="#中断"><span>中断</span></a></h3><h4 id="含义" tabindex="-1"><a class="header-anchor" href="#含义"><span>含义</span></a></h4><p>“中断” 这个名字的字面含义 ：</p><blockquote><p>在计算机科学中，<strong>&quot;中断&quot;（Interrupt）是一个信号</strong>，告诉操作系统暂停当前正在进行的任务，去处理一项更高优先级的任务。这个信号可以来自硬件（例如，输入设备）或者软件（例如，操作系统自身的服务）。</p><p>在Linux操作系统中，中断的概念也是类似的。它是一种机制，当某些事件（如硬件设备的输入/输出，定时器事件，或者其他系统事件）发生时，能够打断CPU当前的处理流程，让CPU去处理这些事件。这种机制使得计算机能够更有效地管理和响应各种不同的任务和请求。</p><p>例如，当你在键盘上按下一个键时，键盘会发送一个中断信号给操作系统。操作系统接收到这个信号后，会暂停正在处理的任务，转而处理这个键盘输入事件。处理完后，操作系统再返回之前被打断的任务继续执行。这就是为什么你可以在运行其他程序的同时输入文本。</p><p>所以，&quot;中断&quot;的字面含义就是&quot;打断&quot;或&quot;中止&quot;，但在计算机科学和Linux中，它具有特定的含义和用途，主要用于响应和处理系统事件。</p></blockquote><h4 id="四种来源" tabindex="-1"><a class="header-anchor" href="#四种来源"><span>四种来源</span></a></h4><p>中断信号的产生有以下4个来源：</p><ol><li><p><strong>外设 (设备中断)</strong></p><ul><li><p>特点：<em>异步</em>、<em>硬件中断</em></p></li><li><p>举例：网卡、磁盘、定时器都可以产生硬件中断。</p><p>设备准备好数据会产生这种中断。这也是 “设备管理” 这一个大章所描述到的中断</p></li></ul></li><li><p><strong>CPU</strong></p><ul><li>特点：<em>异步</em>、一种特殊的<em>硬件中断</em></li><li>这里指的是一个CPU向另一个CPU发送中断，这种中断叫做IPI (处理器间中断)。IPI也可以看出是<em>一种特殊的硬件中断</em>，它和硬件中断的模式差不多</li></ul></li><li><p><strong>中断指令</strong></p><ul><li><p>特点：<em>同步</em>、<em>软件中断</em>。直接用CPU指令来产生中断信号，这种中断和CPU异常一样是同步的，也可以叫做软件中断</p></li><li><p>举例：中断指令int 0x80可以用来实现系统调用。</p><p>应用程序使用系统调用时，会产生一个中断。一般是软中断</p><p>发生中断后， CPU 会中断当前在执行的用户程序，转而跳转到中断处理程序，也就是开始执行内核程序。内核处理完后，主动触发中断，把 CPU 执行权限交回给用户程序，回到用户态继续工作。</p></li></ul></li><li><p><strong>CPU异常</strong></p><ul><li><p>特点：<em>同步</em>、<em>软件中断</em></p></li><li><p>CPU在执行指令的过程中发现异常会向自己发送中断信号，这种中断是同步的，一般也叫做软件中断(注意软中断是另外一个概念)。</p><p>CPU异常按照是否需要修复以及是否能修复分为3类：</p><ol><li>陷阱 (trap)，不需要修复，中断处理完成后继续执行下一条指令</li><li>故障 (fault)，需要修复也有可能修复，中断处理完成后重新执行之前的指令</li><li>中止 (abort)，需要修复但是无法修复，中断处理完成后，进程或者内核将会崩溃</li></ol></li><li><p>举例：缺页异常是一种故障，所以也叫缺页故障，缺页异常处理完成后会重新执行刚才的指令。</p></li></ul></li></ol><p>补充：</p><p>（很多书上也把硬件中断叫做中断，把软件中断叫做异常）</p><p>（硬件中断按照是否可以屏蔽分为<em>可屏蔽中断和不可屏蔽中断</em>）</p><p>（有个资料说硬件中断不等于硬中断，那是另外一个概念，但我查了没找到相应的说法，都说是一样的）</p><h4 id="【比较】设备中断-中断指令-如何理解后者" tabindex="-1"><a class="header-anchor" href="#【比较】设备中断-中断指令-如何理解后者"><span>【比较】设备中断 &amp; 中断指令，如何理解后者</span></a></h4><p>这里以这两种为例：设备中断 &amp; 中断指令，列一下<strong>区别</strong>：</p><table><thead><tr><th>设备中断</th><th>中断指令</th></tr></thead><tbody><tr><td>异步</td><td>硬件中断</td></tr><tr><td>同步</td><td>软件中断</td></tr></tbody></table><p>这两种的区别还是比较大的，可能要区分一下。我们具体说一下第二种中断 —— 系统调用的中断指令：</p><blockquote><p>这里的理解要绕一下弯。</p><p>这里的 “中断” 会打断原来的CPU用户态工作，但要执行的中断程序其实也是要执行任务的一部分。</p><p>即 “一个完整任务A” = “用户态程序B1” + “内核态程序C” + “用户态程序B2” 组成。</p><ul><li>从CPU上下文的角度来看：是执行程序B的过程中被C打断了，去处理完程序C再回来继续处理程序B</li><li>但从完整任务的角度来看：这个完整任务A正在根据步骤一步一步完成，没有被打断</li></ul></blockquote><h4 id="插队式" tabindex="-1"><a class="header-anchor" href="#插队式"><span>插队式</span></a></h4><p>这可以理解为一种 ”插队“ 的进程调度，而非 ”非插队“ 的</p><ul><li>&quot;插队&quot; 优点：确保系统能够及时响应这些事件</li><li>“插队” 缺点：导致性能损耗较大。所以经常会使用缓冲和DMA机制尽可能减少中断次数</li></ul><h4 id="中断-是专用术语而非通用词-interrupt" tabindex="-1"><a class="header-anchor" href="#中断-是专用术语而非通用词-interrupt"><span>“中断” 是专用术语而非通用词 (Interrupt)</span></a></h4><p>”中断“ 是专用术语而非字面意义上的通用词，即 <strong>并非只要字面意思的 “打断” 就能称之为 “中断”</strong>，而是特指的是 “中断信号” 产生的 “中断”</p><ul><li>设备数据准备好后，任务恢复时通过 “中断信号” 打断CPU现在进行的工作，<strong>这是 “中断”</strong></li><li>用户态系统调用时主动发送中断指令，让CPU执行内核态的程序任务，<strong>这是 “中断”</strong></li><li>而CPU通知设备后不阻塞而去干其他事情，则<strong>不能称之为 ”中断“</strong>，这里没有 “中断信号的产生”</li></ul>',48)]))}const d=e(s,[["render",p],["__file","03. 设备驱动程序.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/08.%20%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/03.%20%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.html","title":"设备驱动程序","lang":"zh-CN","frontmatter":{"description":"设备驱动程序 提前总结 总结 物理设备 设备控制器 作用：屏蔽设备差异 位置：硬件 中断控制器 DMA 控制器 内核空间 设备驱动程序 (操作系统位置) 作用：再屏蔽设备控制器差异 位置：操作系统的一部分 架构图 设备控制器 & 设备驱动程序 关系： 硬件 (设备 -> 设备控制器 -> 中断器控制器) -> 内存空间 (设备驱动程序 -> 操作系统其...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/08.%20%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/03.%20%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"设备驱动程序"}],["meta",{"property":"og:description","content":"设备驱动程序 提前总结 总结 物理设备 设备控制器 作用：屏蔽设备差异 位置：硬件 中断控制器 DMA 控制器 内核空间 设备驱动程序 (操作系统位置) 作用：再屏蔽设备控制器差异 位置：操作系统的一部分 架构图 设备控制器 & 设备驱动程序 关系： 硬件 (设备 -> 设备控制器 -> 中断器控制器) -> 内存空间 (设备驱动程序 -> 操作系统其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设备驱动程序\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"设备驱动程序","slug":"设备驱动程序","link":"#设备驱动程序","children":[{"level":2,"title":"提前总结","slug":"提前总结","link":"#提前总结","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"架构图","slug":"架构图","link":"#架构图","children":[]}]},{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[{"level":3,"title":"如何统一接口","slug":"如何统一接口","link":"#如何统一接口","children":[]},{"level":3,"title":"中断流程","slug":"中断流程","link":"#中断流程","children":[]}]},{"level":2,"title":"【扩展】FAQ","slug":"【扩展】faq","link":"#【扩展】faq","children":[{"level":3,"title":"为什么要分两次消除差异？","slug":"为什么要分两次消除差异","link":"#为什么要分两次消除差异","children":[]},{"level":3,"title":"中断","slug":"中断","link":"#中断","children":[{"level":4,"title":"含义","slug":"含义","link":"#含义","children":[]},{"level":4,"title":"四种来源","slug":"四种来源","link":"#四种来源","children":[]},{"level":4,"title":"【比较】设备中断 & 中断指令，如何理解后者","slug":"【比较】设备中断-中断指令-如何理解后者","link":"#【比较】设备中断-中断指令-如何理解后者","children":[]},{"level":4,"title":"插队式","slug":"插队式","link":"#插队式","children":[]},{"level":4,"title":"“中断” 是专用术语而非通用词 (Interrupt)","slug":"中断-是专用术语而非通用词-interrupt","link":"#中断-是专用术语而非通用词-interrupt","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":7.83,"words":2350},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/03. 设备驱动程序.md","excerpt":"\\n<h2>提前总结</h2>\\n<h3>总结</h3>\\n<ul>\\n<li>物理设备\\n<ul>\\n<li><strong>设备控制器</strong>\\n<ul>\\n<li>作用：<strong>屏蔽设备差异</strong></li>\\n<li>位置：硬件</li>\\n</ul>\\n</li>\\n<li>中断控制器</li>\\n<li>DMA 控制器</li>\\n</ul>\\n</li>\\n<li>内核空间\\n<ul>\\n<li><strong>设备驱动程序</strong> (操作系统位置)\\n<ul>\\n<li>作用：<strong>再屏蔽设备控制器差异</strong></li>\\n<li>位置：操作系统的一部分</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/03. 设备驱动程序.md","value":{"title":"03. 设备驱动程序","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/08. 设备管理/03. 设备驱动程序.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,c as data};
