import{_ as n,e,g as t,o as r}from"./app-DPU1xou8.js";const i={};function l(p,o){return r(),e("div",null,o[0]||(o[0]=[t('<h1 id="再看monorepo" tabindex="-1"><a class="header-anchor" href="#再看monorepo"><span>再看monorepo</span></a></h1><p>以前对这个概念欠缺，近期也经手过一些monorepo，理解也加深了。再调研和分析一次：</p><h2 id="copilot-gpt-o4" tabindex="-1"><a class="header-anchor" href="#copilot-gpt-o4"><span>copilot gpt o4</span></a></h2><p>其实有些不解 mono repo 的做法，仓库之前有共享的东西还好说，如果没有的话，是否多仓库会更好？主要对于非仓库主创者，贡献者如果只想使用或维护里面的某几个组件，mono repo 不会导致维护更麻烦吗？</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Mono repo（单一代码库）和多仓库的选择是一个需要根据具体情况和需求来决定的问题。下面是对这两种方法的一些分析和比较，希望能帮助你理解它们的优缺点，并做出更合适的选择。</p><h3 id="mono-repo-的优点" tabindex="-1"><a class="header-anchor" href="#mono-repo-的优点"><span>Mono Repo 的优点</span></a></h3><ol><li><strong>统一的依赖管理</strong>：所有代码在同一个仓库中，可以更方便地进行依赖管理和版本控制，避免了不同仓库间的依赖冲突。</li><li><strong>一致的代码风格和工具链</strong>：可以在整个项目中使用统一的代码风格和开发工具链，提高了代码的一致性和可维护性。</li><li><strong>跨项目更容易重用代码</strong>：在同一个仓库中，代码共享和重用变得更加容易，不需要在不同仓库间处理复杂的依赖关系。</li><li><strong>更容易进行大规模重构</strong>：如果需要对多个模块进行大规模重构，单一代码库可以更方便地进行整体调整和测试。</li></ol><h3 id="mono-repo-的缺点" tabindex="-1"><a class="header-anchor" href="#mono-repo-的缺点"><span>Mono Repo 的缺点</span></a></h3><ol><li><strong>仓库规模庞大</strong>：随着项目的增加，仓库规模会变得非常庞大，可能会导致克隆和拉取时间变长，对版本控制系统的性能要求更高。</li><li><strong>权限管理复杂</strong>：如果不同模块需要不同的权限管理，在单一代码库中进行细粒度的权限控制会比较复杂。</li><li><strong>贡献者复杂度增加</strong>：对于只关注某些特定模块的贡献者来说，单一代码库中大量无关的代码和变更可能会增加他们的负担和复杂度。</li></ol><h3 id="多仓库的优点" tabindex="-1"><a class="header-anchor" href="#多仓库的优点"><span>多仓库的优点</span></a></h3><ol><li><strong>模块化管理</strong>：每个模块都有独立的仓库，可以根据需要进行独立的版本控制和发布，更加模块化和灵活。</li><li><strong>权限管理简化</strong>：可以针对不同的模块设置不同的权限，方便进行细粒度的权限控制。</li><li><strong>贡献者友好</strong>：贡献者可以只关注他们感兴趣或负责的模块，避免了大量无关代码和变更的干扰。</li></ol><h3 id="多仓库的缺点" tabindex="-1"><a class="header-anchor" href="#多仓库的缺点"><span>多仓库的缺点</span></a></h3><ol><li><strong>依赖管理复杂</strong>：跨仓库的依赖管理和版本控制会变得更加复杂，需要额外的工具和流程来处理依赖关系。</li><li><strong>代码一致性难以保证</strong>：不同仓库可能会使用不同的代码风格和工具链，难以保证整个项目的代码一致性。</li><li><strong>跨项目重用困难</strong>：跨仓库重用代码需要处理复杂的依赖关系，可能需要发布和安装额外的包。</li></ol><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>选择 mono repo 还是多仓库的方法需要根据项目的具体情况来决定。如果项目中有大量共享的代码和依赖，并且需要进行频繁的跨模块重构和测试，mono repo 可能会更合适。如果项目模块之间的依赖关系较少，且希望模块化管理和独立发布，多仓库可能会更合适。</p><p>无论选择哪种方法，都需要建立合理的开发流程和工具链，来应对各自的优缺点，确保项目的可维护性和开发效率。</p></div><h2 id="个人总结" tabindex="-1"><a class="header-anchor" href="#个人总结"><span>个人总结</span></a></h2><p>对于 NoleBase Integration、VuePress-Hope-Theme Mdit-Enahcne 这两个近期接触的monorepo项目来说。</p><ul><li>感觉monorepo在这里最大的优点是：依赖的统一，个别模块存在共用的东西</li><li>最大的缺点是：对只关注某些特定模块的贡献者来说，比较难受</li></ul><p>其他优缺点我在这里感觉并不明显</p>',9)]))}const a=n(i,[["render",l],["__file","再看Monorepo.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/FrontEnd/%E5%86%8D%E7%9C%8BMonorepo.html","title":"再看monorepo","lang":"zh-CN","frontmatter":{"create_time":"2024-12-26T00:00:00.000Z","Author":"LincZero","description":"再看monorepo 以前对这个概念欠缺，近期也经手过一些monorepo，理解也加深了。再调研和分析一次： copilot gpt o4 其实有些不解 mono repo 的做法，仓库之前有共享的东西还好说，如果没有的话，是否多仓库会更好？主要对于非仓库主创者，贡献者如果只想使用或维护里面的某几个组件，mono repo 不会导致维护更麻烦吗？ 相关...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/02.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/FrontEnd/%E5%86%8D%E7%9C%8BMonorepo.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"再看monorepo"}],["meta",{"property":"og:description","content":"再看monorepo 以前对这个概念欠缺，近期也经手过一些monorepo，理解也加深了。再调研和分析一次： copilot gpt o4 其实有些不解 mono repo 的做法，仓库之前有共享的东西还好说，如果没有的话，是否多仓库会更好？主要对于非仓库主创者，贡献者如果只想使用或维护里面的某几个组件，mono repo 不会导致维护更麻烦吗？ 相关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"再看monorepo\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.54,"words":1061},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/FrontEnd/再看Monorepo.md","excerpt":"\\n<p>以前对这个概念欠缺，近期也经手过一些monorepo，理解也加深了。再调研和分析一次：</p>\\n<h2>copilot gpt o4</h2>\\n<p>其实有些不解 mono repo 的做法，仓库之前有共享的东西还好说，如果没有的话，是否多仓库会更好？主要对于非仓库主创者，贡献者如果只想使用或维护里面的某几个组件，mono repo 不会导致维护更麻烦吗？</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>Mono repo（单一代码库）和多仓库的选择是一个需要根据具体情况和需求来决定的问题。下面是对这两种方法的一些分析和比较，希望能帮助你理解它们的优缺点，并做出更合适的选择。</p>\\n<h3>Mono Repo 的优点</h3>\\n<ol>\\n<li><strong>统一的依赖管理</strong>：所有代码在同一个仓库中，可以更方便地进行依赖管理和版本控制，避免了不同仓库间的依赖冲突。</li>\\n<li><strong>一致的代码风格和工具链</strong>：可以在整个项目中使用统一的代码风格和开发工具链，提高了代码的一致性和可维护性。</li>\\n<li><strong>跨项目更容易重用代码</strong>：在同一个仓库中，代码共享和重用变得更加容易，不需要在不同仓库间处理复杂的依赖关系。</li>\\n<li><strong>更容易进行大规模重构</strong>：如果需要对多个模块进行大规模重构，单一代码库可以更方便地进行整体调整和测试。</li>\\n</ol>\\n<h3>Mono Repo 的缺点</h3>\\n<ol>\\n<li><strong>仓库规模庞大</strong>：随着项目的增加，仓库规模会变得非常庞大，可能会导致克隆和拉取时间变长，对版本控制系统的性能要求更高。</li>\\n<li><strong>权限管理复杂</strong>：如果不同模块需要不同的权限管理，在单一代码库中进行细粒度的权限控制会比较复杂。</li>\\n<li><strong>贡献者复杂度增加</strong>：对于只关注某些特定模块的贡献者来说，单一代码库中大量无关的代码和变更可能会增加他们的负担和复杂度。</li>\\n</ol>\\n<h3>多仓库的优点</h3>\\n<ol>\\n<li><strong>模块化管理</strong>：每个模块都有独立的仓库，可以根据需要进行独立的版本控制和发布，更加模块化和灵活。</li>\\n<li><strong>权限管理简化</strong>：可以针对不同的模块设置不同的权限，方便进行细粒度的权限控制。</li>\\n<li><strong>贡献者友好</strong>：贡献者可以只关注他们感兴趣或负责的模块，避免了大量无关代码和变更的干扰。</li>\\n</ol>\\n<h3>多仓库的缺点</h3>\\n<ol>\\n<li><strong>依赖管理复杂</strong>：跨仓库的依赖管理和版本控制会变得更加复杂，需要额外的工具和流程来处理依赖关系。</li>\\n<li><strong>代码一致性难以保证</strong>：不同仓库可能会使用不同的代码风格和工具链，难以保证整个项目的代码一致性。</li>\\n<li><strong>跨项目重用困难</strong>：跨仓库重用代码需要处理复杂的依赖关系，可能需要发布和安装额外的包。</li>\\n</ol>\\n<h3>结论</h3>\\n<p>选择 mono repo 还是多仓库的方法需要根据项目的具体情况来决定。如果项目中有大量共享的代码和依赖，并且需要进行频繁的跨模块重构和测试，mono repo 可能会更合适。如果项目模块之间的依赖关系较少，且希望模块化管理和独立发布，多仓库可能会更合适。</p>\\n<p>无论选择哪种方法，都需要建立合理的开发流程和工具链，来应对各自的优缺点，确保项目的可维护性和开发效率。</p>\\n</div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/FrontEnd/再看Monorepo.md","value":{"title":"再看Monorepo","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/02. 子项目构建系统/FrontEnd/再看Monorepo.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,g as data};
