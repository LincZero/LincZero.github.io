import{_ as e,e as l,g as a,o as t}from"./app-EuS-Ookm.js";const n="/assets/v2-dc8ac903cd28c9e5b158c1d16677c810_720w-Be63Tdaq.webp",o="/assets/v2-d56ba1deb1a822f05349c6056a862987_720w-VeUbP4_U.webp",p="/assets/v2-d2e1bfe2f17f862cbbcef79ff7c8319e_720w-oRV_TPxf.webp",s="/assets/v2-e81733ce5f06bdcbd202f272f00f2537_720w-DhQb_jiL.webp",r="/assets/image-20230810225404623-BJ3Ix3zb.png",h="/assets/v2-4fcf5776c5cf618fe3dbeae070bbd876_720w-DTEvzxbB.webp",c="/assets/v2-c06a8a1cf4671b97ee6fb9feaaabc82e_720w-DV_gnX6y.webp",d="/assets/v2-7d83d610c4e58d638271efd2a173600d_720w-CsxEiiqf.webp",u="/assets/icmp-message-type-CrmQ3o6J.png",b={};function P(m,i){return t(),l("div",null,i[0]||(i[0]=[a('<h1 id="网络层次与协议" tabindex="-1"><a class="header-anchor" href="#网络层次与协议"><span>网络层次与协议</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="网络层次与协议-1" tabindex="-1"><a class="header-anchor" href="#网络层次与协议-1"><span>网络层次与协议</span></a></h1><p>参考：</p><ul><li>https://zhuanlan.zhihu.com/p/362826470</li><li><a href="https://tonydeng.github.io/sdn-handbook/basic/icmp.html" target="_blank" rel="noopener noreferrer">网络相关个人博客</a> （<mark><strong>这网站不错</strong></mark>，即包括基础，又包括更深入的SDN、NFV、DPDK、OVS、eBPF、XDP等）</li></ul><h2 id="网络层次结构" tabindex="-1"><a class="header-anchor" href="#网络层次结构"><span>网络层次结构</span></a></h2><p>先复习一下网络层次结构：</p><h3 id="osi模型-七层" tabindex="-1"><a class="header-anchor" href="#osi模型-七层"><span>OSI模型 (七层)</span></a></h3><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h3 id="tcp-ip模型-四层" tabindex="-1"><a class="header-anchor" href="#tcp-ip模型-四层"><span>TCP/IP模型 (四层)</span></a></h3><ul><li>应用层</li><li>传输层</li><li>Internet层</li><li>网络接口层</li></ul><h3 id="不常见-五层" tabindex="-1"><a class="header-anchor" href="#不常见-五层"><span>(不常见) (五层)</span></a></h3><p>5层只是OSI和TCP/IP的综合，是业界产生出来的非官方协议模型，但是很多具体的应用。</p><p>不展开讲解，内容和功能参照7层的</p><h3 id="这几种模型的映射关系" tabindex="-1"><a class="header-anchor" href="#这几种模型的映射关系"><span>这几种模型的映射关系</span></a></h3><p><img src="'+n+'" alt="img" loading="lazy"></p><p><img src="'+o+'" alt="img" loading="lazy"></p><ul><li><strong>(TCP/IP模型)</strong><ul><li><strong>(OSI模型)</strong></li></ul></li><li>应用层 <ul><li>应用层</li><li>表示层</li><li>会话层</li></ul></li><li>传输层 <ul><li>传输层</li></ul></li><li>Internet层 <ul><li>网络层</li></ul></li><li>网络接口层 <ul><li>数据链路层</li><li>物理层</li></ul></li></ul><h3 id="流程复习" tabindex="-1"><a class="header-anchor" href="#流程复习"><span>流程复习</span></a></h3><p>网络层次结构</p><p><img src="'+p+'" alt="img" loading="lazy"></p><p>数据包封装与拆解</p><p><img src="'+s+'" alt="img" loading="lazy"></p><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议"><span>协议</span></a></h2><h3 id="如何快速判断一个协议到底在几层" tabindex="-1"><a class="header-anchor" href="#如何快速判断一个协议到底在几层"><span>如何快速判断一个协议到底在几层？</span></a></h3><h4 id="快速查找表" tabindex="-1"><a class="header-anchor" href="#快速查找表"><span>快速查找表</span></a></h4><p><img src="'+r+'" alt="image-20230810225404623" loading="lazy"></p><h4 id="按知道的信息简单判断" tabindex="-1"><a class="header-anchor" href="#按知道的信息简单判断"><span>按知道的信息简单判断</span></a></h4><p>参考：https://www.zhihu.com/question/27668104/answer/37622036</p><ul><li>连MAC都不知道的算第1层，例如已经死绝了的hub</li><li>只知道MAC不知道IP的算第2层，例如普通交换机</li><li><strong>知道IP不知道port</strong>（也就不管TCP还是UDP）的算第3层，例如普通路由器（ICMP被分到这里是因为这个原因）</li><li><strong>知道IP还知道port</strong> 的算第4层，例如 NAT</li><li>关心payload的算第7层，例如 http proxy</li></ul><h4 id="按功能判断" tabindex="-1"><a class="header-anchor" href="#按功能判断"><span>按功能判断</span></a></h4><p>略</p><h4 id="混乱" tabindex="-1"><a class="header-anchor" href="#混乱"><span>混乱</span></a></h4><p>参考问题：</p><ul><li><a href="https://www.zhihu.com/question/27668104" target="_blank" rel="noopener noreferrer">在《图解TCP/IP》第五版一书中，作者将ARP协议划分在了网络层。而在维基百科里，将ARP划分在数据链路层。请问一个协议应该属于哪一层是以什么为标准划分的？</a></li><li><a href="https://www.zhihu.com/question/31002474" target="_blank" rel="noopener noreferrer">ICMP在OSI第几层？有人说二层(链路层) 有人说三层(网络层) 还有人说四层(传输层)?</a></li></ul><p>先有osi七层模型和tcp/ip四层模型的，再有各类网络协议。</p><p>像ICMP、IGMP和ARP这类协议应该放在几层呢？存在争议</p><p>在 W.Richard Stevens 所著的《tcp/ip详解卷一: 协议》中的前几章已经说的很明白了，这类介于二三层之间的协议可以按照自己的理解去归类，不必强行按照理论模型分层。</p><p>一句话：理论要为实践服务</p><h3 id="ip协议" tabindex="-1"><a class="header-anchor" href="#ip协议"><span>IP协议</span></a></h3><p><img src="'+h+'" alt="img" loading="lazy"></p><p>IP报文格式（网络层）</p><ul><li>固定部分; <strong>20Byte</strong><ul><li>1st; 4Byte <ul><li>版本; 4bit; IPV4/IPV4</li><li>首部长度; 4bit; 固定长度与可变长度之和, 其中固定长度20字节</li><li>区分服务; 8bit <ul><li>报文的优先级; 3bit</li><li>要求更低时延、更高的吞吐量、更高的可靠性、更低的路由代价等。对应位为1即有相应要求，为0则不要求; 5bit</li></ul></li><li>总长度; 16bit; IP报文的总长度。报头的长度和数据部分的长度之和</li></ul></li><li>2nd; 4Byte <ul><li>标识; 16bit; 唯一的标识主机发送的每一分数据报。通常每发送一个报文，它的值加一。当IP报文长度超过传输网络的MTU（最大传输单元）时必须分片，这个标识字段的值被复制到所有数据分片的标识字段中，使得这些分片在达到最终目的地时可以依照标识字段的内容重新组成原先的数据。</li><li>标志; 3bit <ul><li>R; 目前无效</li><li>DF; 1则不分片，0则分片</li><li>MF; 1则“更多的片”，0则表示是最后一片</li></ul></li><li>片偏移; 13bit; 本分片在原先数据报文中相对首位的偏移位</li></ul></li><li>3rd <ul><li>生存时间; 8bit; IP报文所允许通过的路由器的最大数量。每经过一个路由器，TTL减1，当为0时，路由器将该数据报丢弃。TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字 RFC 指定，当前值为 64。发送 ICMP 回显应答时经常把 TTL 设为最大值 255。</li><li>协议; 8bit; 指出IP报文携带的数据使用的是那种协议，以便目的主机的IP层能知道要将数据报上交到哪个进程（不同的协议有专门不同的进程处理）。和端口号类似，此处采用协议号，TCP的协议号为6，UDP的协议号为17。ICMP的协议号为1，IGMP的协议号为2.</li><li>首部校验和; 16bit; 计算IP头部的校验和，检查IP报头的完整性。为了计算一份数据报的IP检验和，首先把检验和字段置为0。然后，对首部中每个16bit进行二进制反码求和（整个首部看成是由一串16bit的字组成），结果存在检验和字段中。当收到一份IP数据报后，同样对首部中每个16bit进行二进制反码的求和。由于接受方在计算过程中包含了发送方存在首部中的校验和。因此，如果首部在传输过程中没有发生任何差错，那么接受方计算的结果应该为全1。如果结果不是全1（即检验和错误），那么IP就丢弃收到的数据报</li></ul></li><li>源IP地址; 4Byte; 标识IP数据报的源端设备</li><li>目的IP地址; 4Byte; 标识IP数据报的目的地址</li></ul></li><li>可变部分; NByte; 根据首部长度判断大小</li><li>数据部分; NByte</li></ul><h3 id="tcp协议" tabindex="-1"><a class="header-anchor" href="#tcp协议"><span>TCP协议</span></a></h3><p><img src="'+c+'" alt="img" loading="lazy"></p><p>报头固定长度为 40Byte</p><ul><li>1st; 4Byte <ul><li>源端口; 16bit</li><li>目的端口; 16bit</li></ul></li><li>序号; 4Byte; 用来标识TCP发端向TCP收端发送的数据字节流</li><li>确定序号; 4Byte; ACK标志为0，故没有确认序号（ACK标志为1时确认序号才有效，一旦连接建立，该值将始终发送（同ACK标志）</li><li>4nd <ul><li>首部长度; 4bit; 报文头长度（单位：位）/32，1000（转化为10进制为8，8*32/8 = 32，该报文报头长度为32个字节），存在该字段是因为TCP报头中任选字段长度可变，报头不包含任何任选字段则长度为20字节；4位所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。</li><li>……</li></ul></li><li>……</li></ul><h3 id="icmp报文格式" tabindex="-1"><a class="header-anchor" href="#icmp报文格式"><span>ICMP报文格式</span></a></h3><p><img src="'+d+'" alt="img" loading="lazy"></p><p>检验和字段覆盖整个ICMP报文。使用的算法与IP首部检验和算法相同。ICMP的检验和是必需的。</p><p>ICMP分为差错报文和查询报文，具体的类型和报文格式见<a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/mengwang024/p/4442370.html" target="_blank" rel="noopener noreferrer">《TCP/IP详解卷1：协议》第6章 ICMP：Internet控制报文协议-读书笔记</a></p><ul><li>8bit</li><li>8bit</li><li>16bit</li></ul><p><code>ICMP</code>报文可以分为两类：查询报文和差错报文，具体报文类型如下图所示：</p><p><img src="'+u+'" alt="ICMP报文类型" loading="lazy"></p><p>下面各种情况都不会导致产生<code>ICMP</code>差错报文：</p><ol><li><code>ICMP</code>差错报文（但是，<code>ICMP</code>查询报文可能会产生<code>ICMP</code>差错报文）</li><li>目的地址是广播地址或多播地址的<code>IP</code>数据报。</li><li>作为链路层广播的数据报。</li><li>不是<code>IP</code>分片的第一片。</li><li>源地址为零地址、环回地址、广播地址或多播地址。</li></ol><p>这些规则是为了防止过去允许<code>ICMP</code>差错报文对广播分组响应所带来的广播风暴。</p>',57)]))}const E=e(b,[["render",P],["__file","网络层次与协议.html.vue"]]),B=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E4%B8%8E%E5%8D%8F%E8%AE%AE.html","title":"网络层次与协议","lang":"zh-CN","frontmatter":{"description":"网络层次与协议 目录 网络层次与协议 参考： https://zhuanlan.zhihu.com/p/362826470 网络相关个人博客 （这网站不错，即包括基础，又包括更深入的SDN、NFV、DPDK、OVS、eBPF、XDP等） 网络层次结构 先复习一下网络层次结构： OSI模型 (七层) 应用层 表示层 会话层 传输层 网络层 数据链路层 物...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E4%B8%8E%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"网络层次与协议"}],["meta",{"property":"og:description","content":"网络层次与协议 目录 网络层次与协议 参考： https://zhuanlan.zhihu.com/p/362826470 网络相关个人博客 （这网站不错，即包括基础，又包括更深入的SDN、NFV、DPDK、OVS、eBPF、XDP等） 网络层次结构 先复习一下网络层次结构： OSI模型 (七层) 应用层 表示层 会话层 传输层 网络层 数据链路层 物..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络层次与协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.47,"words":1940},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/常用协议/网络层次与协议.md","excerpt":"\\n<h1>目录</h1>\\n<h1>网络层次与协议</h1>\\n<p>参考：</p>\\n<ul>\\n<li>https://zhuanlan.zhihu.com/p/362826470</li>\\n<li><a href=\\"https://tonydeng.github.io/sdn-handbook/basic/icmp.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">网络相关个人博客</a> （<mark><strong>这网站不错</strong></mark>，即包括基础，又包括更深入的SDN、NFV、DPDK、OVS、eBPF、XDP等）</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/常用协议/网络层次与协议.md","value":{"title":"网络层次与协议","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/常用协议/网络层次与协议.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{E as comp,B as data};
