import{_ as r,c as t,e as o,o as n}from"./app-DnpufS1x.js";const a={};function l(h,e){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="术语对照表¶" tabindex="-1"><a class="header-anchor" href="#术语对照表¶"><span>术语对照表<a href="https://docs.python.org/zh-cn/3/glossary.html#glossary" target="_blank" rel="noopener noreferrer">¶</a></span></a></h1><h2 id="default" tabindex="-1"><a class="header-anchor" href="#default"><span>Default</span></a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>&gt;&gt;&gt;</code></span></a></h3><p>交互式终端中默认的 Python 提示符。往往会显示于能以交互方式在解释器里执行的样例代码之前。</p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><code>...</code></span></a></h3><p>可以是指： 交互式终端中输入特殊代码行时默认的 Python 提示符，包括：缩进的代码块，成对的分隔符之内（圆括号、方括号、花括号或三重引号），或是指定一个装饰器之后。 <a href="https://docs.python.org/zh-cn/3/library/constants.html#Ellipsis" target="_blank" rel="noopener noreferrer"><code>Ellipsis</code></a> 内置常量。</p><h3 id="_2to3" tabindex="-1"><a class="header-anchor" href="#_2to3"><span>2to3</span></a></h3><p>一个将 Python 2.x 代码转换为 Python 3.x 代码的工具，能够处理大部分通过解析源码并遍历解析树可检测到的不兼容问题。 2to3 包含在标准库中，模块名为 <a href="https://docs.python.org/zh-cn/3/library/2to3.html#module-lib2to3" target="_blank" rel="noopener noreferrer"><code>lib2to3</code></a>；并提供一个独立入口点 <code>Tools/scripts/2to3</code>。参见 <a href="https://docs.python.org/zh-cn/3/library/2to3.html#to3-reference" target="_blank" rel="noopener noreferrer">2to3 - 自动将 Python 2 代码转为 Python 3 代码</a>。</p><h3 id="abstract-base-class-抽象基类" tabindex="-1"><a class="header-anchor" href="#abstract-base-class-抽象基类"><span>abstract base class -- 抽象基类</span></a></h3><p>抽象基类简称 ABC，是对 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-duck-typing" target="_blank" rel="noopener noreferrer">duck-typing</a> 的补充，它提供了一种定义接口的新方式，相比之下其他技巧例如 <a href="https://docs.python.org/zh-cn/3/library/functions.html#hasattr" target="_blank" rel="noopener noreferrer"><code>hasattr()</code></a> 显得过于笨拙或有微妙错误（例如使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#special-lookup" target="_blank" rel="noopener noreferrer">魔术方法</a>）。ABC 引入了虚拟子类，这种类并非继承自其他类，但却仍能被 <a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance" target="_blank" rel="noopener noreferrer"><code>isinstance()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#issubclass" target="_blank" rel="noopener noreferrer"><code>issubclass()</code></a> 所认可；详见 <a href="https://docs.python.org/zh-cn/3/library/abc.html#module-abc" target="_blank" rel="noopener noreferrer"><code>abc</code></a> 模块文档。Python 自带许多内置的 ABC 用于实现数据结构（在 <a href="https://docs.python.org/zh-cn/3/library/collections.abc.html#module-collections.abc" target="_blank" rel="noopener noreferrer"><code>collections.abc</code></a> 模块中）、数字（在 <a href="https://docs.python.org/zh-cn/3/library/numbers.html#module-numbers" target="_blank" rel="noopener noreferrer"><code>numbers</code></a> 模块中）、流（在 <a href="https://docs.python.org/zh-cn/3/library/io.html#module-io" target="_blank" rel="noopener noreferrer"><code>io</code></a> 模块中）、导入查找器和加载器（在 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#module-importlib.abc" target="_blank" rel="noopener noreferrer"><code>importlib.abc</code></a> 模块中）。你可以使用 <a href="https://docs.python.org/zh-cn/3/library/abc.html#module-abc" target="_blank" rel="noopener noreferrer"><code>abc</code></a> 模块来创建自己的 ABC。</p><h3 id="annotation-注解" tabindex="-1"><a class="header-anchor" href="#annotation-注解"><span>annotation -- 注解</span></a></h3><p>关联到某个变量、类属性、函数形参或返回值的标签，被约定作为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type-hint" target="_blank" rel="noopener noreferrer">type hint</a> 来使用。 局部变量的标注在运行时不可访问，但全局变量、类属性和函数的标注会分别存放模块、类和函数的 <code>__annotations__</code> 特殊属性中。 参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-variable-annotation" target="_blank" rel="noopener noreferrer">variable annotation</a>、<a href="https://docs.python.org/zh-cn/3/glossary.html#term-function-annotation" target="_blank" rel="noopener noreferrer">function annotation</a>、<a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener noreferrer"><strong>PEP 484</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener noreferrer"><strong>PEP 526</strong></a>，对此功能均有介绍。</p><h3 id="argument-参数" tabindex="-1"><a class="header-anchor" href="#argument-参数"><span>argument -- 参数</span></a></h3><p>在调用函数时传给 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-function" target="_blank" rel="noopener noreferrer">function</a> （或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-method" target="_blank" rel="noopener noreferrer">method</a> ）的值。参数分为两种： <em>关键字参数</em>: 在函数调用中前面带有标识符（例如 <code>name=</code>）或者作为包含在前面带有 <code>**</code> 的字典里的值传入。举例来说，<code>3</code> 和 <code>5</code> 在以下对 <a href="https://docs.python.org/zh-cn/3/library/functions.html#complex" target="_blank" rel="noopener noreferrer"><code>complex()</code></a> 的调用中均属于关键字参数: <code>complex(real=3, imag=5) complex(**{&#39;real&#39;: 3, &#39;imag&#39;: 5}) </code> <em>位置参数</em>: 不属于关键字参数的参数。位置参数可出现于参数列表的开头以及/或者作为前面带有 <code>*</code> 的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterable" target="_blank" rel="noopener noreferrer">iterable</a> 里的元素被传入。举例来说，<code>3</code> 和 <code>5</code> 在以下调用中均属于位置参数: <code>complex(3, 5) complex(*(3, 5)) </code> 参数会被赋值给函数体中对应的局部变量。有关赋值规则参见 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#calls" target="_blank" rel="noopener noreferrer">调用</a> 一节。根据语法，任何表达式都可用来表示一个参数；最终算出的值会被赋给对应的局部变量。 另参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-parameter" target="_blank" rel="noopener noreferrer">parameter</a> 术语表条目，常见问题中 <a href="https://docs.python.org/zh-cn/3/faq/programming.html#faq-argument-vs-parameter" target="_blank" rel="noopener noreferrer">参数与形参的区别</a> 以及 <a href="https://www.python.org/dev/peps/pep-0362" target="_blank" rel="noopener noreferrer"><strong>PEP 362</strong></a>。</p><h3 id="asynchronous-context-manager-异步上下文管理器" tabindex="-1"><a class="header-anchor" href="#asynchronous-context-manager-异步上下文管理器"><span>asynchronous context manager -- 异步上下文管理器</span></a></h3><p>此种对象通过定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__aenter__" target="_blank" rel="noopener noreferrer"><code>__aenter__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__aexit__" target="_blank" rel="noopener noreferrer"><code>__aexit__()</code></a> 方法来对 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-with" target="_blank" rel="noopener noreferrer"><code>async with</code></a> 语句中的环境进行控制。由 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a> 引入。</p><h3 id="asynchronous-generator-异步生成器" tabindex="-1"><a class="header-anchor" href="#asynchronous-generator-异步生成器"><span>asynchronous generator -- 异步生成器</span></a></h3><p>返回值为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-asynchronous-generator-iterator" target="_blank" rel="noopener noreferrer">asynchronous generator iterator</a> 的函数。它与使用 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener noreferrer"><code>async def</code></a> 定义的协程函数很相似，不同之处在于它包含 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a> 表达式以产生一系列可在 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 循环中使用的值。 此术语通常是指异步生成器函数，但在某些情况下则可能是指 <em>异步生成器迭代器</em>。如果需要清楚表达具体含义，请使用全称以避免歧义。 一个异步生成器函数可能包含 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#await" target="_blank" rel="noopener noreferrer"><code>await</code></a> 表达式或者 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-with" target="_blank" rel="noopener noreferrer"><code>async with</code></a> 语句。</p><h3 id="asynchronous-generator-iterator-异步生成器迭代器" tabindex="-1"><a class="header-anchor" href="#asynchronous-generator-iterator-异步生成器迭代器"><span>asynchronous generator iterator -- 异步生成器迭代器</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-asynchronous-generator" target="_blank" rel="noopener noreferrer">asynchronous generator</a> 函数所创建的对象。 此对象属于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-asynchronous-iterator" target="_blank" rel="noopener noreferrer">asynchronous iterator</a>，当使用 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__anext__" target="_blank" rel="noopener noreferrer"><code>__anext__()</code></a> 方法调用时会返回一个可等待对象来执行异步生成器函数的代码直到下一个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a> 表达式。 每个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a> 会临时暂停处理，记住当前位置执行状态 (包括局部变量和挂起的 try 语句)。当该 <em>异步生成器迭代器</em> 与其他 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__anext__" target="_blank" rel="noopener noreferrer"><code>__anext__()</code></a> 返回的可等待对象有效恢复时，它会从离开位置继续执行。参见 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-0525" target="_blank" rel="noopener noreferrer"><strong>PEP 525</strong></a>。</p><h3 id="asynchronous-iterable-异步可迭代对象" tabindex="-1"><a class="header-anchor" href="#asynchronous-iterable-异步可迭代对象"><span>asynchronous iterable -- 异步可迭代对象</span></a></h3><p>可在 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 语句中被使用的对象。必须通过它的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__aiter__" target="_blank" rel="noopener noreferrer"><code>__aiter__()</code></a> 方法返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-asynchronous-iterator" target="_blank" rel="noopener noreferrer">asynchronous iterator</a>。由 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a> 引入。</p><h3 id="asynchronous-iterator-异步迭代器" tabindex="-1"><a class="header-anchor" href="#asynchronous-iterator-异步迭代器"><span>asynchronous iterator -- 异步迭代器</span></a></h3><p>实现了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__aiter__" target="_blank" rel="noopener noreferrer"><code>__aiter__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__anext__" target="_blank" rel="noopener noreferrer"><code>__anext__()</code></a> 方法的对象。<code>__anext__</code> 必须返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-awaitable" target="_blank" rel="noopener noreferrer">awaitable</a> 对象。<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 会处理异步迭代器的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__anext__" target="_blank" rel="noopener noreferrer"><code>__anext__()</code></a> 方法所返回的可等待对象，直到其引发一个 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopAsyncIteration" target="_blank" rel="noopener noreferrer"><code>StopAsyncIteration</code></a> 异常。由 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a> 引入。</p><h3 id="attribute-属性" tabindex="-1"><a class="header-anchor" href="#attribute-属性"><span>attribute -- 属性</span></a></h3><p>关联到一个对象的值，可以使用点号表达式通过其名称来引用。例如，如果一个对象 <em>o</em> 具有一个属性 <em>a</em>，就可以用 <em>o.a</em> 来引用它。</p><h3 id="awaitable-可等待对象" tabindex="-1"><a class="header-anchor" href="#awaitable-可等待对象"><span>awaitable -- 可等待对象</span></a></h3><p>能在 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#await" target="_blank" rel="noopener noreferrer"><code>await</code></a> 表达式中使用的对象。可以是 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-coroutine" target="_blank" rel="noopener noreferrer">coroutine</a> 或是具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__await__" target="_blank" rel="noopener noreferrer"><code>__await__()</code></a> 方法的对象。参见 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a>。</p><h3 id="bdfl" tabindex="-1"><a class="header-anchor" href="#bdfl"><span>BDFL</span></a></h3><p>“终身仁慈独裁者”的英文缩写，即 <a href="https://gvanrossum.github.io/" target="_blank" rel="noopener noreferrer">Guido van Rossum</a>，Python 的创造者。</p><h3 id="binary-file-二进制文件" tabindex="-1"><a class="header-anchor" href="#binary-file-二进制文件"><span>binary file -- 二进制文件</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object" target="_blank" rel="noopener noreferrer">file object</a> 能够读写 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-bytes-like-object" target="_blank" rel="noopener noreferrer">字节类对象</a>。二进制文件的例子包括以二进制模式（<code>&#39;rb&#39;</code>, <code>&#39;wb&#39;</code> or <code>&#39;rb+&#39;</code>）打开的文件、<code>sys.stdin.buffer</code>、<code>sys.stdout.buffer</code> 以及 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.BytesIO" target="_blank" rel="noopener noreferrer"><code>io.BytesIO</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/gzip.html#gzip.GzipFile" target="_blank" rel="noopener noreferrer"><code>gzip.GzipFile</code></a> 的实例。 另请参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-text-file" target="_blank" rel="noopener noreferrer">text file</a> 了解能够读写 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 对象的文件对象。</p><h3 id="bytes-like-object-字节类对象" tabindex="-1"><a class="header-anchor" href="#bytes-like-object-字节类对象"><span>bytes-like object -- 字节类对象</span></a></h3><p>支持 <a href="https://docs.python.org/zh-cn/3/c-api/buffer.html#bufferobjects" target="_blank" rel="noopener noreferrer">缓冲协议</a> 并且能导出 C-<a href="https://docs.python.org/zh-cn/3/glossary.html#term-contiguous" target="_blank" rel="noopener noreferrer">contiguous</a> 缓冲的对象。这包括所有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray" target="_blank" rel="noopener noreferrer"><code>bytearray</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/array.html#array.array" target="_blank" rel="noopener noreferrer"><code>array.array</code></a> 对象，以及许多普通 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview" target="_blank" rel="noopener noreferrer"><code>memoryview</code></a> 对象。字节类对象可在多种二进制数据操作中使用；这些操作包括压缩、保存为二进制文件以及通过套接字发送等。 某些操作需要可变的二进制数据。这种对象在文档中常被称为“可读写字节类对象”。可变缓冲对象的例子包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray" target="_blank" rel="noopener noreferrer"><code>bytearray</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytearray" target="_blank" rel="noopener noreferrer"><code>bytearray</code></a> 的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview" target="_blank" rel="noopener noreferrer"><code>memoryview</code></a>。其他操作要求二进制数据存放于不可变对象 (&quot;只读字节类对象&quot;)；这种对象的例子包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a> 对象的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#memoryview" target="_blank" rel="noopener noreferrer"><code>memoryview</code></a>。</p><h3 id="bytecode-字节码" tabindex="-1"><a class="header-anchor" href="#bytecode-字节码"><span>bytecode -- 字节码</span></a></h3><p>Python 源代码会被编译为字节码，即 CPython 解释器中表示 Python 程序的内部代码。字节码还会缓存在 <code>.pyc</code> 文件中，这样第二次执行同一文件时速度更快（可以免去将源码重新编译为字节码）。这种 &quot;中间语言&quot; 运行在根据字节码执行相应机器码的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-virtual-machine" target="_blank" rel="noopener noreferrer">virtual machine</a> 之上。请注意不同 Python 虚拟机上的字节码不一定通用，也不一定能在不同 Python 版本上兼容。 字节码指令列表可以在 <a href="https://docs.python.org/zh-cn/3/library/dis.html#bytecodes" target="_blank" rel="noopener noreferrer">dis 模块</a> 的文档中查看。</p><h3 id="callback-回调" tabindex="-1"><a class="header-anchor" href="#callback-回调"><span>callback -- 回调</span></a></h3><p>一个作为参数被传入以用以在未来的某个时刻被调用的子例程函数。</p><h3 id="class-类" tabindex="-1"><a class="header-anchor" href="#class-类"><span>class -- 类</span></a></h3><p>用来创建用户定义对象的模板。类定义通常包含对该类的实例进行操作的方法定义。</p><h3 id="class-variable-类变量" tabindex="-1"><a class="header-anchor" href="#class-variable-类变量"><span>class variable -- 类变量</span></a></h3><p>在类中定义的变量，并且仅限在类的层级上修改 (而不是在类的实例中修改)。</p><h3 id="coercion-强制类型转换" tabindex="-1"><a class="header-anchor" href="#coercion-强制类型转换"><span>coercion -- 强制类型转换</span></a></h3><p>在包含两个相同类型参数的操作中，一种类型的实例隐式地转换为另一种类型。例如，<code>int(3.15)</code> 是将原浮点数转换为整型数 <code>3</code>，但在 <code>3+4.5</code> 中，参数的类型不一致（一个是 int, 一个是 float），两者必须转换为相同类型才能相加，否则将引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#TypeError" target="_blank" rel="noopener noreferrer"><code>TypeError</code></a>。如果没有强制类型转换机制，程序员必须将所有可兼容参数归一化为相同类型，例如要写成 <code>float(3)+4.5</code> 而不是 <code>3+4.5</code>。</p><h3 id="complex-number-复数" tabindex="-1"><a class="header-anchor" href="#complex-number-复数"><span>complex number -- 复数</span></a></h3><p>对普通实数系统的扩展，其中所有数字都被表示为一个实部和一个虚部的和。虚数是虚数单位（<code>-1</code> 的平方根）的实倍数，通常在数学中写为 <code>i</code>，在工程学中写为 <code>j</code>。Python 内置了对复数的支持，采用工程学标记方式；虚部带有一个 <code>j</code> 后缀，例如 <code>3+1j</code>。如果需要 <a href="https://docs.python.org/zh-cn/3/library/math.html#module-math" target="_blank" rel="noopener noreferrer"><code>math</code></a> 模块内对象的对应复数版本，请使用 <a href="https://docs.python.org/zh-cn/3/library/cmath.html#module-cmath" target="_blank" rel="noopener noreferrer"><code>cmath</code></a>，复数的使用是一个比较高级的数学特性。如果你感觉没有必要，忽略它们也几乎不会有任何问题。</p><h3 id="context-manager-上下文管理器" tabindex="-1"><a class="header-anchor" href="#context-manager-上下文管理器"><span>context manager -- 上下文管理器</span></a></h3><p>在 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#with" target="_blank" rel="noopener noreferrer"><code>with</code></a> 语句中使用，通过定义 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__enter__" target="_blank" rel="noopener noreferrer"><code>__enter__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__exit__" target="_blank" rel="noopener noreferrer"><code>__exit__()</code></a> 方法来控制环境状态的对象。参见 <a href="https://www.python.org/dev/peps/pep-0343" target="_blank" rel="noopener noreferrer"><strong>PEP 343</strong></a>。</p><h3 id="context-variable-上下文变量" tabindex="-1"><a class="header-anchor" href="#context-variable-上下文变量"><span>context variable -- 上下文变量</span></a></h3><p>一种根据其所属的上下文可以具有不同的值的变量。 这类似于在线程局部存储中每个执行线程可以具有不同的变量值。 不过，对于上下文变量来说，一个执行线程中可能会有多个上下文，而上下文变量的主要用途是对并发异步任务中变量进行追踪。 参见 <a href="https://docs.python.org/zh-cn/3/library/contextvars.html#module-contextvars" target="_blank" rel="noopener noreferrer"><code>contextvars</code></a>。</p><h3 id="contiguous-连续" tabindex="-1"><a class="header-anchor" href="#contiguous-连续"><span>contiguous -- 连续</span></a></h3><p>一个缓冲如果是 <em>C 连续</em> 或 <em>Fortran 连续</em> 就会被认为是连续的。零维缓冲是 C 和 Fortran 连续的。在一维数组中，所有条目必须在内存中彼此相邻地排列，采用从零开始的递增索引顺序。在多维 C-连续数组中，当按内存地址排列时用最后一个索引访问条目时速度最快。但是在 Fortran 连续数组中则是用第一个索引最快。</p><h3 id="coroutine-协程" tabindex="-1"><a class="header-anchor" href="#coroutine-协程"><span>coroutine -- 协程</span></a></h3><p>协程是子例程的更一般形式。 子例程可以在某一点进入并在另一点退出。 协程则可以在许多不同的点上进入、退出和恢复。 它们可通过 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener noreferrer"><code>async def</code></a> 语句来实现。 参见 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a>。</p><h3 id="coroutine-function-协程函数" tabindex="-1"><a class="header-anchor" href="#coroutine-function-协程函数"><span>coroutine function -- 协程函数</span></a></h3><p>返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-coroutine" target="_blank" rel="noopener noreferrer">coroutine</a> 对象的函数。协程函数可通过 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def" target="_blank" rel="noopener noreferrer"><code>async def</code></a> 语句来定义，并可能包含 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#await" target="_blank" rel="noopener noreferrer"><code>await</code></a>、<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-for" target="_blank" rel="noopener noreferrer"><code>async for</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-with" target="_blank" rel="noopener noreferrer"><code>async with</code></a> 关键字。这些特性是由 <a href="https://www.python.org/dev/peps/pep-0492" target="_blank" rel="noopener noreferrer"><strong>PEP 492</strong></a> 引入的。</p><h3 id="cpython" tabindex="-1"><a class="header-anchor" href="#cpython"><span>CPython</span></a></h3><p>Python 编程语言的规范实现，在 <a href="https://www.python.org" target="_blank" rel="noopener noreferrer">python.org</a> 上发布。&quot;CPython&quot; 一词用于在必要时将此实现与其他实现例如 Jython 或 IronPython 相区别。</p><h3 id="decorator-装饰器" tabindex="-1"><a class="header-anchor" href="#decorator-装饰器"><span>decorator -- 装饰器</span></a></h3><p>返回值为另一个函数的函数，通常使用 <code>@wrapper</code> 语法形式来进行函数变换。 装饰器的常见例子包括 <a href="https://docs.python.org/zh-cn/3/library/functions.html#classmethod" target="_blank" rel="noopener noreferrer"><code>classmethod()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/functions.html#staticmethod" target="_blank" rel="noopener noreferrer"><code>staticmethod()</code></a>。 装饰器语法只是一种语法糖，以下两个函数定义在语义上完全等价: <code>def f(...): ... f = staticmethod(f) @staticmethod def f(...): ... </code> 同的样概念也适用于类，但通常较少这样使用。有关装饰器的详情可参见 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function" target="_blank" rel="noopener noreferrer">函数定义</a> 和 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#class" target="_blank" rel="noopener noreferrer">类定义</a> 的文档。</p><h3 id="descriptor-描述器" tabindex="-1"><a class="header-anchor" href="#descriptor-描述器"><span>descriptor -- 描述器</span></a></h3><p>任何定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__get__" target="_blank" rel="noopener noreferrer"><code>__get__()</code></a>, <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__set__" target="_blank" rel="noopener noreferrer"><code>__set__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__delete__" target="_blank" rel="noopener noreferrer"><code>__delete__()</code></a> 方法的对象。当一个类属性为描述器时，它的特殊绑定行为就会在属性查找时被触发。通常情况下，使用 <em>a.b</em> 来获取、设置或删除一个属性时会在 <em>a</em> 的类字典中查找名称为 <em>b</em> 的对象，但如果 <em>b</em> 是一个描述器，则会调用对应的描述器方法。理解描述器的概念是更深层次理解 Python 的关键，因为这是许多重要特性的基础，包括函数、方法、属性、类方法、静态方法以及对超类的引用等等。 有关描述器的方法的更多信息，请参阅 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#descriptors" target="_blank" rel="noopener noreferrer">实现描述器</a> 或 <a href="https://docs.python.org/zh-cn/3/howto/descriptor.html#descriptorhowto" target="_blank" rel="noopener noreferrer">描述器使用指南</a>。</p><h3 id="dictionary-字典" tabindex="-1"><a class="header-anchor" href="#dictionary-字典"><span>dictionary -- 字典</span></a></h3><p>一个关联数组，其中的任意键都映射到相应的值。键可以是任何具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener noreferrer"><code>__hash__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener noreferrer"><code>__eq__()</code></a> 方法的对象。在 Perl 语言中称为 hash。</p><h3 id="dictionary-comprehension-字典推导式" tabindex="-1"><a class="header-anchor" href="#dictionary-comprehension-字典推导式"><span>dictionary comprehension -- 字典推导式</span></a></h3><p>处理一个可迭代对象中的所有或部分元素并返回结果字典的一种紧凑写法。 <code>results = {n: n ** 2 for n in range(10)}</code> 将生成一个由键 <code>n</code> 到值 <code>n ** 2</code> 的映射构成的字典。 参见 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#comprehensions" target="_blank" rel="noopener noreferrer">列表、集合与字典的显示</a>。</p><h3 id="dictionary-view-字典视图" tabindex="-1"><a class="header-anchor" href="#dictionary-view-字典视图"><span>dictionary view -- 字典视图</span></a></h3><p>从 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict.keys" target="_blank" rel="noopener noreferrer"><code>dict.keys()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict.values" target="_blank" rel="noopener noreferrer"><code>dict.values()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict.items" target="_blank" rel="noopener noreferrer"><code>dict.items()</code></a> 返回的对象被称为字典视图。它们提供了字典条目的一个动态视图，这意味着当字典改变时，视图也会相应改变。要将字典视图强制转换为真正的列表，可使用 <code>list(dictview)</code>。参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict-views" target="_blank" rel="noopener noreferrer">字典视图对象</a>。</p><h3 id="docstring-文档字符串" tabindex="-1"><a class="header-anchor" href="#docstring-文档字符串"><span>docstring -- 文档字符串</span></a></h3><p>作为类、函数或模块之内的第一个表达式出现的字符串字面值。它在代码执行时会被忽略，但会被解释器识别并放入所在类、函数或模块的 <code>__doc__</code> 属性中。由于它可用于代码内省，因此是对象存放文档的规范位置。</p><h3 id="duck-typing-鸭子类型" tabindex="-1"><a class="header-anchor" href="#duck-typing-鸭子类型"><span>duck-typing -- 鸭子类型</span></a></h3><p>指一种编程风格，它并不依靠查找对象类型来确定其是否具有正确的接口，而是直接调用或使用其方法或属性（“看起来像鸭子，叫起来也像鸭子，那么肯定就是鸭子。”）由于强调接口而非特定类型，设计良好的代码可通过允许多态替代来提升灵活性。鸭子类型避免使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#type" target="_blank" rel="noopener noreferrer"><code>type()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/functions.html#isinstance" target="_blank" rel="noopener noreferrer"><code>isinstance()</code></a> 检测。(但要注意鸭子类型可以使用 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-abstract-base-class" target="_blank" rel="noopener noreferrer">抽象基类</a> 作为补充。) 而往往会采用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#hasattr" target="_blank" rel="noopener noreferrer"><code>hasattr()</code></a> 检测或是 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-eafp" target="_blank" rel="noopener noreferrer">EAFP</a> 编程。</p><h3 id="eafp" tabindex="-1"><a class="header-anchor" href="#eafp"><span>EAFP</span></a></h3><p>“求原谅比求许可更容易”的英文缩写。这种 Python 常用代码编写风格会假定所需的键或属性存在，并在假定错误时捕获异常。这种简洁快速风格的特点就是大量运用 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer"><code>try</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer"><code>except</code></a> 语句。于其相对的则是所谓 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-lbyl" target="_blank" rel="noopener noreferrer">LBYL</a> 风格，常见于 C 等许多其他语言。</p><h3 id="expression-表达式" tabindex="-1"><a class="header-anchor" href="#expression-表达式"><span>expression -- 表达式</span></a></h3><p>可以求出某个值的语法单元。 换句话说，一个表达式就是表达元素例如字面值、名称、属性访问、运算符或函数调用的汇总，它们最终都会返回一个值。 与许多其他语言不同，并非所有语言构件都是表达式。 还存在不能被用作表达式的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-statement" target="_blank" rel="noopener noreferrer">statement</a>，例如 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#while" target="_blank" rel="noopener noreferrer"><code>while</code></a>。 赋值也是属于语句而非表达式。</p><h3 id="extension-module-扩展模块" tabindex="-1"><a class="header-anchor" href="#extension-module-扩展模块"><span>extension module -- 扩展模块</span></a></h3><p>以 C 或 C++ 编写的模块，使用 Python 的 C API 来与语言核心以及用户代码进行交互。</p><h3 id="f-string-f-字符串" tabindex="-1"><a class="header-anchor" href="#f-string-f-字符串"><span>f-string -- f-字符串</span></a></h3><p>带有 <code>&#39;f&#39;</code> 或 <code>&#39;F&#39;</code> 前缀的字符串字面值通常被称为“f-字符串”即 <a href="https://docs.python.org/zh-cn/3/reference/lexical_analysis.html#f-strings" target="_blank" rel="noopener noreferrer">格式化字符串字面值</a> 的简写。参见 <a href="https://www.python.org/dev/peps/pep-0498" target="_blank" rel="noopener noreferrer"><strong>PEP 498</strong></a>。</p><h3 id="file-object-文件对象" tabindex="-1"><a class="header-anchor" href="#file-object-文件对象"><span>file object -- 文件对象</span></a></h3><p>对外提供面向文件 API 以使用下层资源的对象（带有 <code>read()</code> 或 <code>write()</code> 这样的方法）。根据其创建方式的不同，文件对象可以处理对真实磁盘文件，对其他类型存储，或是对通讯设备的访问（例如标准输入/输出、内存缓冲区、套接字、管道等等）。文件对象也被称为 <em>文件类对象</em> 或 <em>流</em>。 实际上共有三种类别的文件对象: 原始 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-binary-file" target="_blank" rel="noopener noreferrer">二进制文件</a>, 缓冲 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-binary-file" target="_blank" rel="noopener noreferrer">二进制文件</a> 以及 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-text-file" target="_blank" rel="noopener noreferrer">文本文件</a>。它们的接口定义均在 <a href="https://docs.python.org/zh-cn/3/library/io.html#module-io" target="_blank" rel="noopener noreferrer"><code>io</code></a> 模块中。创建文件对象的规范方式是使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#open" target="_blank" rel="noopener noreferrer"><code>open()</code></a> 函数。</p><h3 id="file-like-object-文件类对象" tabindex="-1"><a class="header-anchor" href="#file-like-object-文件类对象"><span>file-like object -- 文件类对象</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object" target="_blank" rel="noopener noreferrer">file object</a> 的同义词。</p><h3 id="finder-查找器" tabindex="-1"><a class="header-anchor" href="#finder-查找器"><span>finder -- 查找器</span></a></h3><p>一种会尝试查找被导入模块的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-loader" target="_blank" rel="noopener noreferrer">loader</a> 的对象。 从 Python 3.3 起存在两种类型的查找器: <a href="https://docs.python.org/zh-cn/3/glossary.html#term-meta-path-finder" target="_blank" rel="noopener noreferrer">元路径查找器</a> 配合 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.meta_path" target="_blank" rel="noopener noreferrer"><code>sys.meta_path</code></a> 使用，以及 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry-finder" target="_blank" rel="noopener noreferrer">path entry finders</a> 配合 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.path_hooks" target="_blank" rel="noopener noreferrer"><code>sys.path_hooks</code></a> 使用。 更多详情可参见 <a href="https://www.python.org/dev/peps/pep-0302" target="_blank" rel="noopener noreferrer"><strong>PEP 302</strong></a>, <a href="https://www.python.org/dev/peps/pep-0420" target="_blank" rel="noopener noreferrer"><strong>PEP 420</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-0451" target="_blank" rel="noopener noreferrer"><strong>PEP 451</strong></a>。</p><h3 id="floor-division-向下取整除法" tabindex="-1"><a class="header-anchor" href="#floor-division-向下取整除法"><span>floor division -- 向下取整除法</span></a></h3><p>向下舍入到最接近的整数的数学除法。向下取整除法的运算符是 <code>//</code> 。例如，表达式 <code>11 // 4</code> 的计算结果是 <code>2</code> ，而与之相反的是浮点数的真正除法返回 <code>2.75</code> 。注意 <code>(-11) // 4</code> 会返回 <code>-3</code> 因为这是 <code>-2.75</code> <em>向下</em> 舍入得到的结果。见 <a href="https://www.python.org/dev/peps/pep-0238" target="_blank" rel="noopener noreferrer"><strong>PEP 238</strong></a> 。</p><h3 id="function-函数" tabindex="-1"><a class="header-anchor" href="#function-函数"><span>function -- 函数</span></a></h3><p>可以向调用者返回某个值的一组语句。还可以向其传入零个或多个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">参数</a> 并在函数体执行中被使用。另见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-parameter" target="_blank" rel="noopener noreferrer">parameter</a>, <a href="https://docs.python.org/zh-cn/3/glossary.html#term-method" target="_blank" rel="noopener noreferrer">method</a> 和 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function" target="_blank" rel="noopener noreferrer">函数定义</a> 等节。</p><h3 id="function-annotation-函数标注" tabindex="-1"><a class="header-anchor" href="#function-annotation-函数标注"><span>function annotation -- 函数标注</span></a></h3><p>即针对函数形参或返回值的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-annotation" target="_blank" rel="noopener noreferrer">annotation</a> 。 函数标注通常用于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type-hint" target="_blank" rel="noopener noreferrer">类型提示</a>：例如以下函数预期接受两个 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int" target="_blank" rel="noopener noreferrer"><code>int</code></a> 参数并预期返回一个 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int" target="_blank" rel="noopener noreferrer"><code>int</code></a> 值: <code>def sum_two_numbers(a: int, b: int) -&gt; int: return a + b </code> 函数标注语法的详解见 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function" target="_blank" rel="noopener noreferrer">函数定义</a> 一节。 请参看 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-variable-annotation" target="_blank" rel="noopener noreferrer">variable annotation</a> 和 <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener noreferrer"><strong>PEP 484</strong></a> 对此功能的描述。</p><h3 id="future" tabindex="-1"><a class="header-anchor" href="#future"><span><code>__future__</code></span></a></h3><p>一种伪模块，可被程序员用来启用与当前解释器不兼容的新语言特性。 通过导入 <a href="https://docs.python.org/zh-cn/3/library/__future__.html#module-__future__" target="_blank" rel="noopener noreferrer"><code>__future__</code></a> 模块并对其中的变量求值，你可以查看新特性何时首次加入语言以及何时成为默认: &gt;&gt;&gt;<code>&gt;&gt;&gt; import __future__ &gt;&gt;&gt; __future__.division _Feature((2, 2, 0, &#39;alpha&#39;, 2), (3, 0, 0, &#39;alpha&#39;, 0), 8192) </code></p><h3 id="garbage-collection-垃圾回收" tabindex="-1"><a class="header-anchor" href="#garbage-collection-垃圾回收"><span>garbage collection -- 垃圾回收</span></a></h3><p>释放不再被使用的内存空间的过程。Python 是通过引用计数和一个能够检测和打破循环引用的循环垃圾回收器来执行垃圾回收的。可以使用 <a href="https://docs.python.org/zh-cn/3/library/gc.html#module-gc" target="_blank" rel="noopener noreferrer"><code>gc</code></a> 模块来控制垃圾回收器。</p><h3 id="generator-生成器" tabindex="-1"><a class="header-anchor" href="#generator-生成器"><span>generator -- 生成器</span></a></h3><p>返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-generator-iterator" target="_blank" rel="noopener noreferrer">generator iterator</a> 的函数。它看起来很像普通函数，不同点在于其包含 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a> 表达式以便产生一系列值供给 for-循环使用或是通过 <a href="https://docs.python.org/zh-cn/3/library/functions.html#next" target="_blank" rel="noopener noreferrer"><code>next()</code></a> 函数逐一获取。 通常是指生成器函数，但在某些情况下也可能是指 <em>生成器迭代器</em>。如果需要清楚表达具体含义，请使用全称以避免歧义。</p><h3 id="generator-iterator-生成器迭代器" tabindex="-1"><a class="header-anchor" href="#generator-iterator-生成器迭代器"><span>generator iterator -- 生成器迭代器</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-generator" target="_blank" rel="noopener noreferrer">generator</a> 函数所创建的对象。 每个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield" target="_blank" rel="noopener noreferrer"><code>yield</code></a> 会临时暂停处理，记住当前位置执行状态（包括局部变量和挂起的 try 语句）。当该 <em>生成器迭代器</em> 恢复时，它会从离开位置继续执行（这与每次调用都从新开始的普通函数差别很大）。</p><h3 id="generator-expression-生成器表达式" tabindex="-1"><a class="header-anchor" href="#generator-expression-生成器表达式"><span>generator expression -- 生成器表达式</span></a></h3><p>返回一个迭代器的表达式。 它看起来很像普通表达式后面带有定义了一个循环变量、范围的 <code>for</code> 子句，以及一个可选的 <code>if</code> 子句。 以下复合表达式会为外层函数生成一系列值: &gt;&gt;&gt;<code>&gt;&gt;&gt; sum(i*i for i in range(10)) # sum of squares 0, 1, 4, ... 81 285 </code></p><h3 id="generic-function-泛型函数" tabindex="-1"><a class="header-anchor" href="#generic-function-泛型函数"><span>generic function -- 泛型函数</span></a></h3><p>为不同的类型实现相同操作的多个函数所组成的函数。在调用时会由调度算法来确定应该使用哪个实现。 另请参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-single-dispatch" target="_blank" rel="noopener noreferrer">single dispatch</a> 术语表条目、<a href="https://docs.python.org/zh-cn/3/library/functools.html#functools.singledispatch" target="_blank" rel="noopener noreferrer"><code>functools.singledispatch()</code></a> 装饰器以及 <a href="https://www.python.org/dev/peps/pep-0443" target="_blank" rel="noopener noreferrer"><strong>PEP 443</strong></a>。</p><h3 id="generic-type-泛型类型" tabindex="-1"><a class="header-anchor" href="#generic-type-泛型类型"><span>generic type -- 泛型类型</span></a></h3><p>可以被形参化的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type" target="_blank" rel="noopener noreferrer">type</a>；通常为容器类型例如 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list" target="_blank" rel="noopener noreferrer"><code>list</code></a>。 可用于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type-hint" target="_blank" rel="noopener noreferrer">类型提示</a> 和 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-annotation" target="_blank" rel="noopener noreferrer">标注</a>。 请参阅 <a href="https://www.python.org/dev/peps/pep-0483" target="_blank" rel="noopener noreferrer"><strong>PEP 483</strong></a> 来了解详情，以及 <a href="https://docs.python.org/zh-cn/3/library/typing.html#module-typing" target="_blank" rel="noopener noreferrer"><code>typing</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#types-genericalias" target="_blank" rel="noopener noreferrer">泛型别名类型</a> 来了解其用法。</p><h3 id="gil" tabindex="-1"><a class="header-anchor" href="#gil"><span>GIL</span></a></h3><p>参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-global-interpreter-lock" target="_blank" rel="noopener noreferrer">global interpreter lock</a>。</p><h3 id="global-interpreter-lock-全局解释器锁" tabindex="-1"><a class="header-anchor" href="#global-interpreter-lock-全局解释器锁"><span>global interpreter lock -- 全局解释器锁</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-cpython" target="_blank" rel="noopener noreferrer">CPython</a> 解释器所采用的一种机制，它确保同一时刻只有一个线程在执行 Python <a href="https://docs.python.org/zh-cn/3/glossary.html#term-bytecode" target="_blank" rel="noopener noreferrer">bytecode</a>。此机制通过设置对象模型（包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict" target="_blank" rel="noopener noreferrer"><code>dict</code></a> 等重要内置类型）针对并发访问的隐式安全简化了 CPython 实现。给整个解释器加锁使得解释器多线程运行更方便，其代价则是牺牲了在多处理器上的并行性。 不过，某些标准库或第三方库的扩展模块被设计为在执行计算密集型任务如压缩或哈希时释放 GIL。此外，在执行 I/O 操作时也总是会释放 GIL。 创建一个（以更精细粒度来锁定共享数据的）“自由线程”解释器的努力从未获得成功，因为这会牺牲在普通单处理器情况下的性能。据信克服这种性能问题的措施将导致实现变得更复杂，从而更难以维护。</p><h3 id="hash-based-pyc-基于哈希的-pyc" tabindex="-1"><a class="header-anchor" href="#hash-based-pyc-基于哈希的-pyc"><span>hash-based pyc -- 基于哈希的 pyc</span></a></h3><p>使用对应源文件的哈希值而非最后修改时间来确定其有效性的字节码缓存文件。 参见 <a href="https://docs.python.org/zh-cn/3/reference/import.html#pyc-invalidation" target="_blank" rel="noopener noreferrer">已缓存字节码的失效</a>。</p><h3 id="hashable-可哈希" tabindex="-1"><a class="header-anchor" href="#hashable-可哈希"><span>hashable -- 可哈希</span></a></h3><p>一个对象的哈希值如果在其生命周期内绝不改变，就被称为 <em>可哈希</em> （它需要具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener noreferrer"><code>__hash__()</code></a> 方法），并可以同其他对象进行比较（它需要具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener noreferrer"><code>__eq__()</code></a> 方法）。可哈希对象必须具有相同的哈希值比较结果才会相同。 可哈希性使得对象能够作为字典键或集合成员使用，因为这些数据结构要在内部使用哈希值。 大多数 Python 中的不可变内置对象都是可哈希的；可变容器（例如列表或字典）都不可哈希；不可变容器（例如元组和 frozenset）仅当它们的元素均为可哈希时才是可哈希的。 用户定义类的实例对象默认是可哈希的。 它们在比较时一定不相同（除非是与自己比较），它们的哈希值的生成是基于它们的 <a href="https://docs.python.org/zh-cn/3/library/functions.html#id" target="_blank" rel="noopener noreferrer"><code>id()</code></a>。</p><h3 id="idle" tabindex="-1"><a class="header-anchor" href="#idle"><span>IDLE</span></a></h3><p>Python 的 IDE，“集成开发与学习环境”的英文缩写。是 Python 标准发行版附带的基本编辑器和解释器环境。</p><h3 id="immutable-不可变" tabindex="-1"><a class="header-anchor" href="#immutable-不可变"><span>immutable -- 不可变</span></a></h3><p>具有固定值的对象。不可变对象包括数字、字符串和元组。这样的对象不能被改变。如果必须存储一个不同的值，则必须创建新的对象。它们在需要常量哈希值的地方起着重要作用，例如作为字典中的键。</p><h3 id="import-path-导入路径" tabindex="-1"><a class="header-anchor" href="#import-path-导入路径"><span>import path -- 导入路径</span></a></h3><p>由多个位置（或 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry" target="_blank" rel="noopener noreferrer">路径条目</a>）组成的列表，会被模块的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-based-finder" target="_blank" rel="noopener noreferrer">path based finder</a> 用来查找导入目标。在导入时，此位置列表通常来自 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.path" target="_blank" rel="noopener noreferrer"><code>sys.path</code></a>，但对次级包来说也可能来自上级包的 <code>__path__</code> 属性。</p><h3 id="importing-导入" tabindex="-1"><a class="header-anchor" href="#importing-导入"><span>importing -- 导入</span></a></h3><p>令一个模块中的 Python 代码能为另一个模块中的 Python 代码所使用的过程。</p><h3 id="importer-导入器" tabindex="-1"><a class="header-anchor" href="#importer-导入器"><span>importer -- 导入器</span></a></h3><p>查找并加载模块的对象；此对象既属于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-finder" target="_blank" rel="noopener noreferrer">finder</a> 又属于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-loader" target="_blank" rel="noopener noreferrer">loader</a>。</p><h3 id="interactive-交互" tabindex="-1"><a class="header-anchor" href="#interactive-交互"><span>interactive -- 交互</span></a></h3><p>Python 带有一个交互式解释器，即你可以在解释器提示符后输入语句和表达式，立即执行并查看其结果。只需不带参数地启动 <code>python</code> 命令（也可以在你的计算机开始菜单中选择相应菜单项）。在测试新想法或检验模块和包的时候用这种方式会非常方便（请记得使用 <code>help(x)</code>）。</p><h3 id="interpreted-解释型" tabindex="-1"><a class="header-anchor" href="#interpreted-解释型"><span>interpreted -- 解释型</span></a></h3><p>Python 一是种解释型语言，与之相对的是编译型语言，虽然两者的区别由于字节码编译器的存在而会有所模糊。这意味着源文件可以直接运行而不必显式地创建可执行文件再运行。解释型语言通常具有比编译型语言更短的开发/调试周期，但是其程序往往运行得更慢。参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-interactive" target="_blank" rel="noopener noreferrer">interactive</a>。</p><h3 id="interpreter-shutdown-解释器关闭" tabindex="-1"><a class="header-anchor" href="#interpreter-shutdown-解释器关闭"><span>interpreter shutdown -- 解释器关闭</span></a></h3><p>当被要求关闭时，Python 解释器将进入一个特殊运行阶段并逐步释放所有已分配资源，例如模块和各种关键内部结构等。它还会多次调用 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-garbage-collection" target="_blank" rel="noopener noreferrer">垃圾回收器</a>。这会触发用户定义析构器或弱引用回调中的代码执行。在关闭阶段执行的代码可能会遇到各种异常，因为其所依赖的资源已不再有效（常见的例子有库模块或警告机制等）。 解释器需要关闭的主要原因有 <code>__main__</code> 模块或所运行的脚本已完成执行。</p><h3 id="iterable-可迭代对象" tabindex="-1"><a class="header-anchor" href="#iterable-可迭代对象"><span>iterable -- 可迭代对象</span></a></h3><p>能够逐一返回其成员项的对象。 可迭代对象的例子包括所有序列类型 (例如 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list" target="_blank" rel="noopener noreferrer"><code>list</code></a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple" target="_blank" rel="noopener noreferrer"><code>tuple</code></a>) 以及某些非序列类型例如 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict" target="_blank" rel="noopener noreferrer"><code>dict</code></a>, <a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object" target="_blank" rel="noopener noreferrer">文件对象</a> 以及定义了 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener noreferrer"><code>__iter__()</code></a> 方法或是实现了 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence" target="_blank" rel="noopener noreferrer">序列</a> 语义的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener noreferrer"><code>__getitem__()</code></a> 方法的任意自定义类对象。 可迭代对象被可用于 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer"><code>for</code></a> 循环以及许多其他需要一个序列的地方（<a href="https://docs.python.org/zh-cn/3/library/functions.html#zip" target="_blank" rel="noopener noreferrer"><code>zip()</code></a>、<a href="https://docs.python.org/zh-cn/3/library/functions.html#map" target="_blank" rel="noopener noreferrer"><code>map()</code></a> ...）。当一个可迭代对象作为参数传给内置函数 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter" target="_blank" rel="noopener noreferrer"><code>iter()</code></a> 时，它会返回该对象的迭代器。这种迭代器适用于对值集合的一次性遍历。在使用可迭代对象时，你通常不需要调用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter" target="_blank" rel="noopener noreferrer"><code>iter()</code></a> 或者自己处理迭代器对象。<code>for</code> 语句会为你自动处理那些操作，创建一个临时的未命名变量用来在循环期间保存迭代器。参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterator" target="_blank" rel="noopener noreferrer">iterator</a>、<a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence" target="_blank" rel="noopener noreferrer">sequence</a> 以及 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-generator" target="_blank" rel="noopener noreferrer">generator</a>。</p><h3 id="iterator-迭代器" tabindex="-1"><a class="header-anchor" href="#iterator-迭代器"><span>iterator -- 迭代器</span></a></h3><p>用来表示一连串数据流的对象。重复调用迭代器的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener noreferrer"><code>__next__()</code></a> 方法（或将其传给内置函数 <a href="https://docs.python.org/zh-cn/3/library/functions.html#next" target="_blank" rel="noopener noreferrer"><code>next()</code></a>）将逐个返回流中的项。当没有数据可用时则将引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener noreferrer"><code>StopIteration</code></a> 异常。到这时迭代器对象中的数据项已耗尽，继续调用其 <code>__next__()</code> 方法只会再次引发 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration" target="_blank" rel="noopener noreferrer"><code>StopIteration</code></a> 异常。迭代器必须具有 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener noreferrer"><code>__iter__()</code></a> 方法用来返回该迭代器对象自身，因此迭代器必定也是可迭代对象，可被用于其他可迭代对象适用的大部分场合。一个显著的例外是那些会多次重复访问迭代项的代码。容器对象（例如 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list" target="_blank" rel="noopener noreferrer"><code>list</code></a>）在你每次向其传入 <a href="https://docs.python.org/zh-cn/3/library/functions.html#iter" target="_blank" rel="noopener noreferrer"><code>iter()</code></a> 函数或是在 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer"><code>for</code></a> 循环中使用它时都会产生一个新的迭代器。如果在此情况下你尝试用迭代器则会返回在之前迭代过程中被耗尽的同一迭代器对象，使其看起来就像是一个空容器。 更多信息可查看 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typeiter" target="_blank" rel="noopener noreferrer">迭代器类型</a>。</p><h3 id="key-function-键函数" tabindex="-1"><a class="header-anchor" href="#key-function-键函数"><span>key function -- 键函数</span></a></h3><p>键函数或称整理函数，是能够返回用于排序或排位的值的可调用对象。例如，<a href="https://docs.python.org/zh-cn/3/library/locale.html#locale.strxfrm" target="_blank" rel="noopener noreferrer"><code>locale.strxfrm()</code></a> 可用于生成一个符合特定区域排序约定的排序键。 Python 中有许多工具都允许用键函数来控制元素的排位或分组方式。其中包括 <a href="https://docs.python.org/zh-cn/3/library/functions.html#min" target="_blank" rel="noopener noreferrer"><code>min()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/functions.html#max" target="_blank" rel="noopener noreferrer"><code>max()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/functions.html#sorted" target="_blank" rel="noopener noreferrer"><code>sorted()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list.sort" target="_blank" rel="noopener noreferrer"><code>list.sort()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/heapq.html#heapq.merge" target="_blank" rel="noopener noreferrer"><code>heapq.merge()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nsmallest" target="_blank" rel="noopener noreferrer"><code>heapq.nsmallest()</code></a>, <a href="https://docs.python.org/zh-cn/3/library/heapq.html#heapq.nlargest" target="_blank" rel="noopener noreferrer"><code>heapq.nlargest()</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.groupby" target="_blank" rel="noopener noreferrer"><code>itertools.groupby()</code></a>。 要创建一个键函数有多种方式。例如，<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.lower" target="_blank" rel="noopener noreferrer"><code>str.lower()</code></a> 方法可以用作忽略大小写排序的键函数。另外，键函数也可通过 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#lambda" target="_blank" rel="noopener noreferrer"><code>lambda</code></a> 表达式来创建，例如 <code>lambda r: (r[0], r[2])</code>。还有 <a href="https://docs.python.org/zh-cn/3/library/operator.html#module-operator" target="_blank" rel="noopener noreferrer"><code>operator</code></a> 模块提供了三个键函数构造器：<a href="https://docs.python.org/zh-cn/3/library/operator.html#operator.attrgetter" target="_blank" rel="noopener noreferrer"><code>attrgetter()</code></a>、<a href="https://docs.python.org/zh-cn/3/library/operator.html#operator.itemgetter" target="_blank" rel="noopener noreferrer"><code>itemgetter()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/operator.html#operator.methodcaller" target="_blank" rel="noopener noreferrer"><code>methodcaller()</code></a>。请查看 <a href="https://docs.python.org/zh-cn/3/howto/sorting.html#sortinghowto" target="_blank" rel="noopener noreferrer">如何排序</a> 一节以获取创建和使用键函数的示例。</p><h3 id="keyword-argument-关键字参数" tabindex="-1"><a class="header-anchor" href="#keyword-argument-关键字参数"><span>keyword argument -- 关键字参数</span></a></h3><p>参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">argument</a>。</p><h3 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda"><span>lambda</span></a></h3><p>由一个单独 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-expression" target="_blank" rel="noopener noreferrer">expression</a> 构成的匿名内联函数，表达式会在调用时被求值。创建 lambda 函数的句法为 <code>lambda [parameters]: expression</code></p><h3 id="lbyl" tabindex="-1"><a class="header-anchor" href="#lbyl"><span>LBYL</span></a></h3><p>“先查看后跳跃”的英文缩写。这种代码编写风格会在进行调用或查找之前显式地检查前提条件。此风格与 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-eafp" target="_blank" rel="noopener noreferrer">EAFP</a> 方式恰成对比，其特点是大量使用 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#if" target="_blank" rel="noopener noreferrer"><code>if</code></a> 语句。 在多线程环境中，LBYL 方式会导致“查看”和“跳跃”之间发生条件竞争风险。例如，以下代码 <code>if key in mapping: return mapping[key]</code> 可能由于在检查操作之后其他线程从 <em>mapping</em> 中移除了 <em>key</em> 而出错。这种问题可通过加锁或使用 EAFP 方式来解决。</p><h3 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表"><span>list -- 列表</span></a></h3><p>Python 内置的一种 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence" target="_blank" rel="noopener noreferrer">sequence</a>。虽然名为列表，但更类似于其他语言中的数组而非链接列表，因为访问元素的时间复杂度为 O(1)。</p><h3 id="list-comprehension-列表推导式" tabindex="-1"><a class="header-anchor" href="#list-comprehension-列表推导式"><span>list comprehension -- 列表推导式</span></a></h3><p>处理一个序列中的所有或部分元素并返回结果列表的一种紧凑写法。<code>result = [&#39;{:#04x}&#39;.format(x) for x in range(256) if x % 2 == 0]</code> 将生成一个 0 到 255 范围内的十六进制偶数对应字符串（0x..）的列表。其中 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#if" target="_blank" rel="noopener noreferrer"><code>if</code></a> 子句是可选的，如果省略则 <code>range(256)</code> 中的所有元素都会被处理。</p><h3 id="loader-加载器" tabindex="-1"><a class="header-anchor" href="#loader-加载器"><span>loader -- 加载器</span></a></h3><p>负责加载模块的对象。它必须定义名为 <code>load_module()</code> 的方法。加载器通常由一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-finder" target="_blank" rel="noopener noreferrer">finder</a> 返回。详情参见 <a href="https://www.python.org/dev/peps/pep-0302" target="_blank" rel="noopener noreferrer"><strong>PEP 302</strong></a>，对于 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-abstract-base-class" target="_blank" rel="noopener noreferrer">abstract base class</a> 可参见 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.abc.Loader" target="_blank" rel="noopener noreferrer"><code>importlib.abc.Loader</code></a>。</p><h3 id="magic-method-魔术方法" tabindex="-1"><a class="header-anchor" href="#magic-method-魔术方法"><span>magic method -- 魔术方法</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-special-method" target="_blank" rel="noopener noreferrer">special method</a> 的非正式同义词 。</p><h3 id="mapping-映射" tabindex="-1"><a class="header-anchor" href="#mapping-映射"><span>mapping -- 映射</span></a></h3><p>一种支持任意键查找并实现了 <a href="https://docs.python.org/zh-cn/3/library/collections.abc.html#collections.abc.Mapping" target="_blank" rel="noopener noreferrer"><code>Mapping</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/collections.abc.html#collections.abc.MutableMapping" target="_blank" rel="noopener noreferrer"><code>MutableMapping</code></a> <a href="https://docs.python.org/zh-cn/3/library/collections.abc.html#collections-abstract-base-classes" target="_blank" rel="noopener noreferrer">抽象基类</a> 中所规定方法的容器对象。 此类对象的例子包括 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict" target="_blank" rel="noopener noreferrer"><code>dict</code></a>, <a href="https://docs.python.org/zh-cn/3/library/collections.html#collections.defaultdict" target="_blank" rel="noopener noreferrer"><code>collections.defaultdict</code></a>, <a href="https://docs.python.org/zh-cn/3/library/collections.html#collections.OrderedDict" target="_blank" rel="noopener noreferrer"><code>collections.OrderedDict</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/library/collections.html#collections.Counter" target="_blank" rel="noopener noreferrer"><code>collections.Counter</code></a>。</p><h3 id="meta-path-finder-元路径查找器" tabindex="-1"><a class="header-anchor" href="#meta-path-finder-元路径查找器"><span>meta path finder -- 元路径查找器</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.meta_path" target="_blank" rel="noopener noreferrer"><code>sys.meta_path</code></a> 的搜索所返回的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-finder" target="_blank" rel="noopener noreferrer">finder</a>。元路径查找器与 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry-finder" target="_blank" rel="noopener noreferrer">path entry finders</a> 存在关联但并不相同。 请查看 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.abc.MetaPathFinder" target="_blank" rel="noopener noreferrer"><code>importlib.abc.MetaPathFinder</code></a> 了解元路径查找器所实现的方法。</p><h3 id="metaclass-元类" tabindex="-1"><a class="header-anchor" href="#metaclass-元类"><span>metaclass -- 元类</span></a></h3><p>一种用于创建类的类。类定义包含类名、类字典和基类列表。元类负责接受上述三个参数并创建相应的类。大部分面向对象的编程语言都会提供一个默认实现。Python 的特别之处在于可以创建自定义元类。大部分用户永远不需要这个工具，但当需要出现时，元类可提供强大而优雅的解决方案。它们已被用于记录属性访问日志、添加线程安全性、跟踪对象创建、实现单例，以及其他许多任务。 更多详情参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#metaclasses" target="_blank" rel="noopener noreferrer">元类</a>。</p><h3 id="method-方法" tabindex="-1"><a class="header-anchor" href="#method-方法"><span>method -- 方法</span></a></h3><p>在类内部定义的函数。如果作为该类的实例的一个属性来调用，方法将会获取实例对象作为其第一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">argument</a> (通常命名为 <code>self</code>)。参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-function" target="_blank" rel="noopener noreferrer">function</a> 和 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-nested-scope" target="_blank" rel="noopener noreferrer">nested scope</a>。</p><h3 id="method-resolution-order-方法解析顺序" tabindex="-1"><a class="header-anchor" href="#method-resolution-order-方法解析顺序"><span>method resolution order -- 方法解析顺序</span></a></h3><p>方法解析顺序就是在查找成员时搜索全部基类所用的先后顺序。请查看 <a href="https://www.python.org/download/releases/2.3/mro/" target="_blank" rel="noopener noreferrer">Python 2.3 方法解析顺序</a> 了解自 2.3 版起 Python 解析器所用相关算法的详情。</p><h3 id="module-模块" tabindex="-1"><a class="header-anchor" href="#module-模块"><span>module -- 模块</span></a></h3><p>此对象是 Python 代码的一种组织单位。各模块具有独立的命名空间，可包含任意 Python 对象。模块可通过 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-importing" target="_blank" rel="noopener noreferrer">importing</a> 操作被加载到 Python 中。 另见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-package" target="_blank" rel="noopener noreferrer">package</a>。</p><h3 id="module-spec-模块规格" tabindex="-1"><a class="header-anchor" href="#module-spec-模块规格"><span>module spec -- 模块规格</span></a></h3><p>一个命名空间，其中包含用于加载模块的相关导入信息。是 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.machinery.ModuleSpec" target="_blank" rel="noopener noreferrer"><code>importlib.machinery.ModuleSpec</code></a> 的实例。</p><h3 id="mro" tabindex="-1"><a class="header-anchor" href="#mro"><span>MRO</span></a></h3><p>参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-method-resolution-order" target="_blank" rel="noopener noreferrer">method resolution order</a>。</p><h3 id="mutable-可变" tabindex="-1"><a class="header-anchor" href="#mutable-可变"><span>mutable -- 可变</span></a></h3><p>可变对象可以在其 <a href="https://docs.python.org/zh-cn/3/library/functions.html#id" target="_blank" rel="noopener noreferrer"><code>id()</code></a> 保持固定的情况下改变其取值。另请参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-immutable" target="_blank" rel="noopener noreferrer">immutable</a>。</p><h3 id="named-tuple-具名元组" tabindex="-1"><a class="header-anchor" href="#named-tuple-具名元组"><span>named tuple -- 具名元组</span></a></h3><p>术语“具名元组”可用于任何继承自元组，并且其中的可索引元素还能使用名称属性来访问的类型或类。 这样的类型或类还可能拥有其他特性。 有些内置类型属于具名元组，包括 <a href="https://docs.python.org/zh-cn/3/library/time.html#time.localtime" target="_blank" rel="noopener noreferrer"><code>time.localtime()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.stat" target="_blank" rel="noopener noreferrer"><code>os.stat()</code></a> 的返回值。 另一个例子是 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.float_info" target="_blank" rel="noopener noreferrer"><code>sys.float_info</code></a>: &gt;&gt;&gt;<code>&gt;&gt;&gt; sys.float_info[1] # indexed access 1024 &gt;&gt;&gt; sys.float_info.max_exp # named field access 1024 &gt;&gt;&gt; isinstance(sys.float_info, tuple) # kind of tuple True </code> 有些具名元组是内置类型（例如上面的例子）。 此外，具名元组还可通过常规类定义从 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple" target="_blank" rel="noopener noreferrer"><code>tuple</code></a> 继承并定义名称字段的方式来创建。 这样的类可以手工编写，或者使用工厂函数 <a href="https://docs.python.org/zh-cn/3/library/collections.html#collections.namedtuple" target="_blank" rel="noopener noreferrer"><code>collections.namedtuple()</code></a> 创建。 后一种方式还会添加一些手工编写或内置具名元组所没有的额外方法。</p><h3 id="namespace-命名空间" tabindex="-1"><a class="header-anchor" href="#namespace-命名空间"><span>namespace -- 命名空间</span></a></h3><p>命名空间是存放变量的场所。命名空间有局部、全局和内置的，还有对象中的嵌套命名空间（在方法之内）。命名空间通过防止命名冲突来支持模块化。例如，函数 <a href="https://docs.python.org/zh-cn/3/library/functions.html#open" target="_blank" rel="noopener noreferrer"><code>builtins.open</code></a> 与 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.open" target="_blank" rel="noopener noreferrer"><code>os.open()</code></a> 可通过各自的命名空间来区分。命名空间还通过明确哪个模块实现那个函数来帮助提高可读性和可维护性。例如，<a href="https://docs.python.org/zh-cn/3/library/random.html#random.seed" target="_blank" rel="noopener noreferrer"><code>random.seed()</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.islice" target="_blank" rel="noopener noreferrer"><code>itertools.islice()</code></a> 这种写法明确了这些函数是由 <a href="https://docs.python.org/zh-cn/3/library/random.html#module-random" target="_blank" rel="noopener noreferrer"><code>random</code></a> 与 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#module-itertools" target="_blank" rel="noopener noreferrer"><code>itertools</code></a> 模块分别实现的。</p><h3 id="namespace-package-命名空间包" tabindex="-1"><a class="header-anchor" href="#namespace-package-命名空间包"><span>namespace package -- 命名空间包</span></a></h3><p><a href="https://www.python.org/dev/peps/pep-0420" target="_blank" rel="noopener noreferrer"><strong>PEP 420</strong></a> 所引入的一种仅被用作子包的容器的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-package" target="_blank" rel="noopener noreferrer">package</a>，命名空间包可以没有实体表示物，其描述方式与 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-regular-package" target="_blank" rel="noopener noreferrer">regular package</a> 不同，因为它们没有 <code>__init__.py</code> 文件。 另可参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-module" target="_blank" rel="noopener noreferrer">module</a>。</p><h3 id="nested-scope-嵌套作用域" tabindex="-1"><a class="header-anchor" href="#nested-scope-嵌套作用域"><span>nested scope -- 嵌套作用域</span></a></h3><p>在一个定义范围内引用变量的能力。例如，在另一函数之内定义的函数可以引用前者的变量。请注意嵌套作用域默认只对引用有效而对赋值无效。局部变量的读写都受限于最内层作用域。类似的，全局变量的读写则作用于全局命名空间。通过 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener noreferrer"><code>nonlocal</code></a> 关键字可允许写入外层作用域。</p><h3 id="new-style-class-新式类" tabindex="-1"><a class="header-anchor" href="#new-style-class-新式类"><span>new-style class -- 新式类</span></a></h3><p>对于目前已被应于所有类对象的类形式的旧称谓。在早先的 Python 版本中，只有新式类能够使用 Python 新增的更灵活特性，例如 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__slots__" target="_blank" rel="noopener noreferrer"><code>__slots__</code></a>、描述符、特征属性、<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getattribute__" target="_blank" rel="noopener noreferrer"><code>__getattribute__()</code></a>、类方法和静态方法等。</p><h3 id="object-对象" tabindex="-1"><a class="header-anchor" href="#object-对象"><span>object -- 对象</span></a></h3><p>任何具有状态（属性或值）以及预定义行为（方法）的数据。object 也是任何 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class" target="_blank" rel="noopener noreferrer">new-style class</a> 的最顶层基类名。</p><h3 id="package-包" tabindex="-1"><a class="header-anchor" href="#package-包"><span>package -- 包</span></a></h3><p>一种可包含子模块或递归地包含子包的 Python <a href="https://docs.python.org/zh-cn/3/glossary.html#term-module" target="_blank" rel="noopener noreferrer">module</a>。从技术上说，包是带有 <code>__path__</code> 属性的 Python 模块。 另参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-regular-package" target="_blank" rel="noopener noreferrer">regular package</a> 和 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-namespace-package" target="_blank" rel="noopener noreferrer">namespace package</a>。</p><h3 id="parameter-形参" tabindex="-1"><a class="header-anchor" href="#parameter-形参"><span>parameter -- 形参</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-function" target="_blank" rel="noopener noreferrer">function</a> （或方法）定义中的命名实体，它指定函数可以接受的一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">argument</a> （或在某些情况下，多个实参）。有五种形参： <em>positional-or-keyword</em>：位置或关键字，指定一个可以作为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">位置参数</a> 传入也可以作为 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">关键字参数</a> 传入的实参。这是默认的形参类型，例如下面的 <em>foo</em> 和 <em>bar</em>: <code>def func(foo, bar=None): ... </code> <em>positional-only</em>：仅限位置，指定一个只能通过位置传入的参数。 仅限位置形参可通过在函数定义的形参列表中它们之后包含一个 <code>/</code> 字符来定义，例如下面的 <em>posonly1</em> 和 <em>posonly2</em>: <code>def func(posonly1, posonly2, /, positional_or_keyword): ... </code> <em>keyword-only</em>：仅限关键字，指定一个只能通过关键字传入的参数。仅限关键字形参可通过在函数定义的形参列表中包含单个可变位置形参或者在多个可变位置形参之前放一个 <code>*</code> 来定义，例如下面的 <em>kw_only1</em> 和 <em>kw_only2</em>: <code>def func(arg, *, kw_only1, kw_only2): ... </code> <em>var-positional</em>：可变位置，指定可以提供由一个任意数量的位置参数构成的序列（附加在其他形参已接受的位置参数之后）。这种形参可通过在形参名称前加缀 <code>*</code> 来定义，例如下面的 <em>args</em>: <code>def func(*args, **kwargs): ... </code> <em>var-keyword</em>：可变关键字，指定可以提供任意数量的关键字参数（附加在其他形参已接受的关键字参数之后）。这种形参可通过在形参名称前加缀 <code>**</code> 来定义，例如上面的 <em>kwargs</em>。 形参可以同时指定可选和必选参数，也可以为某些可选参数指定默认值。 另参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">argument</a> 术语表条目、<a href="https://docs.python.org/zh-cn/3/faq/programming.html#faq-argument-vs-parameter" target="_blank" rel="noopener noreferrer">参数与形参的区别</a> 中的常见问题、<a href="https://docs.python.org/zh-cn/3/library/inspect.html#inspect.Parameter" target="_blank" rel="noopener noreferrer"><code>inspect.Parameter</code></a> 类、<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function" target="_blank" rel="noopener noreferrer">函数定义</a> 一节以及 <a href="https://www.python.org/dev/peps/pep-0362" target="_blank" rel="noopener noreferrer"><strong>PEP 362</strong></a>。</p><h3 id="path-entry-路径入口" tabindex="-1"><a class="header-anchor" href="#path-entry-路径入口"><span>path entry -- 路径入口</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-import-path" target="_blank" rel="noopener noreferrer">import path</a> 中的一个单独位置，会被 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-based-finder" target="_blank" rel="noopener noreferrer">path based finder</a> 用来查找要导入的模块。</p><h3 id="path-entry-finder-路径入口查找器" tabindex="-1"><a class="header-anchor" href="#path-entry-finder-路径入口查找器"><span>path entry finder -- 路径入口查找器</span></a></h3><p>任一可调用对象使用 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.path_hooks" target="_blank" rel="noopener noreferrer"><code>sys.path_hooks</code></a> (即 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry-hook" target="_blank" rel="noopener noreferrer">path entry hook</a>) 返回的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-finder" target="_blank" rel="noopener noreferrer">finder</a>，此种对象能通过 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry" target="_blank" rel="noopener noreferrer">path entry</a> 来定位模块。 请参看 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.abc.PathEntryFinder" target="_blank" rel="noopener noreferrer"><code>importlib.abc.PathEntryFinder</code></a> 以了解路径入口查找器所实现的各个方法。</p><h3 id="path-entry-hook-路径入口钩子" tabindex="-1"><a class="header-anchor" href="#path-entry-hook-路径入口钩子"><span>path entry hook -- 路径入口钩子</span></a></h3><p>一种可调用对象，在知道如何查找特定 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry" target="_blank" rel="noopener noreferrer">path entry</a> 中的模块的情况下能够使用 <code>sys.path_hook</code> 列表返回一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-path-entry-finder" target="_blank" rel="noopener noreferrer">path entry finder</a>。</p><h3 id="path-based-finder-基于路径的查找器" tabindex="-1"><a class="header-anchor" href="#path-based-finder-基于路径的查找器"><span>path based finder -- 基于路径的查找器</span></a></h3><p>默认的一种 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-meta-path-finder" target="_blank" rel="noopener noreferrer">元路径查找器</a>，可在一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-import-path" target="_blank" rel="noopener noreferrer">import path</a> 中查找模块。</p><h3 id="path-like-object-路径类对象" tabindex="-1"><a class="header-anchor" href="#path-like-object-路径类对象"><span>path-like object -- 路径类对象</span></a></h3><p>代表一个文件系统路径的对象。类路径对象可以是一个表示路径的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 或者 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a> 对象，还可以是一个实现了 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.PathLike" target="_blank" rel="noopener noreferrer"><code>os.PathLike</code></a> 协议的对象。一个支持 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.PathLike" target="_blank" rel="noopener noreferrer"><code>os.PathLike</code></a> 协议的对象可通过调用 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.fspath" target="_blank" rel="noopener noreferrer"><code>os.fspath()</code></a> 函数转换为 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 或者 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a> 类型的文件系统路径；<a href="https://docs.python.org/zh-cn/3/library/os.html#os.fsdecode" target="_blank" rel="noopener noreferrer"><code>os.fsdecode()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/os.html#os.fsencode" target="_blank" rel="noopener noreferrer"><code>os.fsencode()</code></a> 可被分别用来确保获得 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 或 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a> 类型的结果。此对象是由 <a href="https://www.python.org/dev/peps/pep-0519" target="_blank" rel="noopener noreferrer"><strong>PEP 519</strong></a> 引入的。</p><h3 id="pep" tabindex="-1"><a class="header-anchor" href="#pep"><span>PEP</span></a></h3><p>“Python 增强提议”的英文缩写。一个 PEP 就是一份设计文档，用来向 Python 社区提供信息，或描述一个 Python 的新增特性及其进度或环境。PEP 应当提供精确的技术规格和所提议特性的原理说明。 PEP 应被作为提出主要新特性建议、收集社区对特定问题反馈以及为必须加入 Python 的设计决策编写文档的首选机制。PEP 的作者有责任在社区内部建立共识，并应将不同意见也记入文档。 参见 <a href="https://www.python.org/dev/peps/pep-0001" target="_blank" rel="noopener noreferrer"><strong>PEP 1</strong></a>。</p><h3 id="portion-部分" tabindex="-1"><a class="header-anchor" href="#portion-部分"><span>portion -- 部分</span></a></h3><p>构成一个命名空间包的单个目录内文件集合（也可能存放于一个 zip 文件内），具体定义见 <a href="https://www.python.org/dev/peps/pep-0420" target="_blank" rel="noopener noreferrer"><strong>PEP 420</strong></a>。</p><h3 id="positional-argument-位置参数" tabindex="-1"><a class="header-anchor" href="#positional-argument-位置参数"><span>positional argument -- 位置参数</span></a></h3><p>参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-argument" target="_blank" rel="noopener noreferrer">argument</a>。</p><h3 id="provisional-api-暂定-api" tabindex="-1"><a class="header-anchor" href="#provisional-api-暂定-api"><span>provisional API -- 暂定 API</span></a></h3><p>暂定 API 是指被有意排除在标准库的向后兼容性保证之外的应用编程接口。虽然此类接口通常不会再有重大改变，但只要其被标记为暂定，就可能在核心开发者确定有必要的情况下进行向后不兼容的更改（甚至包括移除该接口）。此种更改并不会随意进行 -- 仅在 API 被加入之前未考虑到的严重基础性缺陷被发现时才可能会这样做。 即便是对暂定 API 来说，向后不兼容的更改也会被视为“最后的解决方案” —— 任何问题被确认时都会尽可能先尝试找到一种向后兼容的解决方案。 这种处理过程允许标准库持续不断地演进，不至于被有问题的长期性设计缺陷所困。详情见 <a href="https://www.python.org/dev/peps/pep-0411" target="_blank" rel="noopener noreferrer"><strong>PEP 411</strong></a>。</p><h3 id="provisional-package-暂定包" tabindex="-1"><a class="header-anchor" href="#provisional-package-暂定包"><span>provisional package -- 暂定包</span></a></h3><p>参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-provisional-api" target="_blank" rel="noopener noreferrer">provisional API</a>。</p><h3 id="python-3000" tabindex="-1"><a class="header-anchor" href="#python-3000"><span>Python 3000</span></a></h3><p>Python 3.x 发布路线的昵称（这个名字在版本 3 的发布还遥遥无期的时候就已出现了）。有时也被缩写为“Py3k”。</p><h3 id="pythonic" tabindex="-1"><a class="header-anchor" href="#pythonic"><span>Pythonic</span></a></h3><p>指一个思路或一段代码紧密遵循了 Python 语言最常用的风格和理念，而不是使用其他语言中通用的概念来实现代码。例如，Python 的常用风格是使用 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer"><code>for</code></a> 语句循环来遍历一个可迭代对象中的所有元素。许多其他语言没有这样的结构，因此不熟悉 Python 的人有时会选择使用一个数字计数器: <code>for i in range(len(food)): print(food[i]) </code> 而相应的更简洁更 Pythonic 的方法是这样的: <code>for piece in food: print(piece) </code></p><h3 id="qualified-name-限定名称" tabindex="-1"><a class="header-anchor" href="#qualified-name-限定名称"><span>qualified name -- 限定名称</span></a></h3><p>一个以点号分隔的名称，显示从模块的全局作用域到该模块中定义的某个类、函数或方法的“路径”，相关定义见 <a href="https://www.python.org/dev/peps/pep-3155" target="_blank" rel="noopener noreferrer"><strong>PEP 3155</strong></a>。对于最高层级的函数和类，限定名称与对象名称一致: &gt;&gt;&gt;<code>&gt;&gt;&gt; class C: ... class D: ... def meth(self): ... pass ... &gt;&gt;&gt; C.__qualname__ &#39;C&#39; &gt;&gt;&gt; C.D.__qualname__ &#39;C.D&#39; &gt;&gt;&gt; C.D.meth.__qualname__ &#39;C.D.meth&#39; </code> 当被用于引用模块时，<em>完整限定名称</em> 意为标示该模块的以点号分隔的整个路径，其中包含其所有的父包，例如 <code>email.mime.text</code>: &gt;&gt;&gt;<code>&gt;&gt;&gt; import email.mime.text &gt;&gt;&gt; email.mime.text.__name__ &#39;email.mime.text&#39; </code></p><h3 id="reference-count-引用计数" tabindex="-1"><a class="header-anchor" href="#reference-count-引用计数"><span>reference count -- 引用计数</span></a></h3><p>对特定对象的引用的数量。当一个对象的引用计数降为零时，所分配资源将被释放。引用计数对 Python 代码来说通常是不可见的，但它是 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-cpython" target="_blank" rel="noopener noreferrer">CPython</a> 实现的一个关键元素。<a href="https://docs.python.org/zh-cn/3/library/sys.html#module-sys" target="_blank" rel="noopener noreferrer"><code>sys</code></a> 模块定义了一个 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.getrefcount" target="_blank" rel="noopener noreferrer"><code>getrefcount()</code></a> 函数，程序员可调用它来返回特定对象的引用计数。</p><h3 id="regular-package-常规包" tabindex="-1"><a class="header-anchor" href="#regular-package-常规包"><span>regular package -- 常规包</span></a></h3><p>传统型的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-package" target="_blank" rel="noopener noreferrer">package</a>，例如包含有一个 <code>__init__.py</code> 文件的目录。 另参见 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-namespace-package" target="_blank" rel="noopener noreferrer">namespace package</a>。</p><h3 id="slots" tabindex="-1"><a class="header-anchor" href="#slots"><span><code>__slots__</code></span></a></h3><p>一种写在类内部的声明，通过预先声明实例属性等对象并移除实例字典来节省内存。虽然这种技巧很流行，但想要用好却并不容易，最好是只保留在少数情况下采用，例如极耗内存的应用程序，并且其中包含大量实例。</p><h3 id="sequence-序列" tabindex="-1"><a class="header-anchor" href="#sequence-序列"><span>sequence -- 序列</span></a></h3><p>一种 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-iterable" target="_blank" rel="noopener noreferrer">iterable</a>，它支持通过 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener noreferrer"><code>__getitem__()</code></a> 特殊方法来使用整数索引进行高效的元素访问，并定义了一个返回序列长度的 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__len__" target="_blank" rel="noopener noreferrer"><code>__len__()</code></a> 方法。内置的序列类型有 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#list" target="_blank" rel="noopener noreferrer"><code>list</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a>、<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#tuple" target="_blank" rel="noopener noreferrer"><code>tuple</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener noreferrer"><code>bytes</code></a>。注意虽然 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#dict" target="_blank" rel="noopener noreferrer"><code>dict</code></a> 也支持 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener noreferrer"><code>__getitem__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__len__" target="_blank" rel="noopener noreferrer"><code>__len__()</code></a>，但它被认为属于映射而非序列，因为它查找时使用任意的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-immutable" target="_blank" rel="noopener noreferrer">immutable</a> 键而非整数。 <a href="https://docs.python.org/zh-cn/3/library/collections.abc.html#collections.abc.Sequence" target="_blank" rel="noopener noreferrer"><code>collections.abc.Sequence</code></a> 抽象基类定义了一个更丰富的接口，它在 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener noreferrer"><code>__getitem__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__len__" target="_blank" rel="noopener noreferrer"><code>__len__()</code></a> 之外又添加了 <code>count()</code>, <code>index()</code>, <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__contains__" target="_blank" rel="noopener noreferrer"><code>__contains__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__reversed__" target="_blank" rel="noopener noreferrer"><code>__reversed__()</code></a>。 实现此扩展接口的类型可以使用 <a href="https://docs.python.org/zh-cn/3/library/abc.html#abc.ABCMeta.register" target="_blank" rel="noopener noreferrer"><code>register()</code></a> 来显式地注册。</p><h3 id="set-comprehension-集合推导式" tabindex="-1"><a class="header-anchor" href="#set-comprehension-集合推导式"><span>set comprehension -- 集合推导式</span></a></h3><p>处理一个可迭代对象中的所有或部分元素并返回结果集合的一种紧凑写法。 <code>results = {c for c in &#39;abracadabra&#39; if c not in &#39;abc&#39;}</code> 将生成字符串集合 <code>{&#39;r&#39;, &#39;d&#39;}</code>。 参见 <a href="https://docs.python.org/zh-cn/3/reference/expressions.html#comprehensions" target="_blank" rel="noopener noreferrer">列表、集合与字典的显示</a>。</p><h3 id="single-dispatch-单分派" tabindex="-1"><a class="header-anchor" href="#single-dispatch-单分派"><span>single dispatch -- 单分派</span></a></h3><p>一种 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-generic-function" target="_blank" rel="noopener noreferrer">generic function</a> 分派形式，其实现是基于单个参数的类型来选择的。</p><h3 id="slice-切片" tabindex="-1"><a class="header-anchor" href="#slice-切片"><span>slice -- 切片</span></a></h3><p>通常只包含了特定 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-sequence" target="_blank" rel="noopener noreferrer">sequence</a> 的一部分的对象。切片是通过使用下标标记来创建的，在 <code>[]</code> 中给出几个以冒号分隔的数字，例如 <code>variable_name[1:3:5]</code>。方括号（下标）标记在内部使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#slice" target="_blank" rel="noopener noreferrer"><code>slice</code></a> 对象。</p><h3 id="special-method-特殊方法" tabindex="-1"><a class="header-anchor" href="#special-method-特殊方法"><span>special method -- 特殊方法</span></a></h3><p>一种由 Python 隐式调用的方法，用来对某个类型执行特定操作例如相加等等。这种方法的名称的首尾都为双下划线。特殊方法的文档参见 <a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#specialnames" target="_blank" rel="noopener noreferrer">特殊方法名称</a>。</p><h3 id="statement-语句" tabindex="-1"><a class="header-anchor" href="#statement-语句"><span>statement -- 语句</span></a></h3><p>语句是程序段（一个代码“块”）的组成单位。一条语句可以是一个 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-expression" target="_blank" rel="noopener noreferrer">expression</a> 或某个带有关键字的结构，例如 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#if" target="_blank" rel="noopener noreferrer"><code>if</code></a>、<a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#while" target="_blank" rel="noopener noreferrer"><code>while</code></a> 或 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#for" target="_blank" rel="noopener noreferrer"><code>for</code></a>。</p><h3 id="text-encoding-文本编码" tabindex="-1"><a class="header-anchor" href="#text-encoding-文本编码"><span>text encoding -- 文本编码</span></a></h3><p>用于将Unicode字符串编码为字节串的编码器。</p><h3 id="text-file-文本文件" tabindex="-1"><a class="header-anchor" href="#text-file-文本文件"><span>text file -- 文本文件</span></a></h3><p>一种能够读写 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str" target="_blank" rel="noopener noreferrer"><code>str</code></a> 对象的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-file-object" target="_blank" rel="noopener noreferrer">file object</a>。通常一个文本文件实际是访问一个面向字节的数据流并自动处理 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-text-encoding" target="_blank" rel="noopener noreferrer">text encoding</a>。文本文件的例子包括以文本模式（<code>&#39;r&#39;</code> 或 <code>&#39;w&#39;</code>）打开的文件、<a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.stdin" target="_blank" rel="noopener noreferrer"><code>sys.stdin</code></a>、<a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.stdout" target="_blank" rel="noopener noreferrer"><code>sys.stdout</code></a> 以及 <a href="https://docs.python.org/zh-cn/3/library/io.html#io.StringIO" target="_blank" rel="noopener noreferrer"><code>io.StringIO</code></a> 的实例。 另请参看 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-binary-file" target="_blank" rel="noopener noreferrer">binary file</a> 了解能够读写 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-bytes-like-object" target="_blank" rel="noopener noreferrer">字节类对象</a> 的文件对象。</p><h3 id="triple-quoted-string-三引号字符串" tabindex="-1"><a class="header-anchor" href="#triple-quoted-string-三引号字符串"><span>triple-quoted string -- 三引号字符串</span></a></h3><p>首尾各带三个连续双引号（&quot;）或者单引号（&#39;）的字符串。它们在功能上与首尾各用一个引号标注的字符串没有什么不同，但是有多种用处。它们允许你在字符串内包含未经转义的单引号和双引号，并且可以跨越多行而无需使用连接符，在编写文档字符串时特别好用。</p><h3 id="type-类型" tabindex="-1"><a class="header-anchor" href="#type-类型"><span>type -- 类型</span></a></h3><p>类型决定一个 Python 对象属于什么种类；每个对象都具有一种类型。要知道对象的类型，可以访问它的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#instance.__class__" target="_blank" rel="noopener noreferrer"><code>__class__</code></a> 属性，或是通过 <code>type(obj)</code> 来获取。</p><h3 id="type-alias-类型别名" tabindex="-1"><a class="header-anchor" href="#type-alias-类型别名"><span>type alias -- 类型别名</span></a></h3><p>一个类型的同义词，创建方式是把类型赋值给特定的标识符。 类型别名的作用是简化 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type-hint" target="_blank" rel="noopener noreferrer">类型提示</a>。例如: <code>def remove_gray_shades( colors: list[tuple[int, int, int]]) -&gt; list[tuple[int, int, int]]: pass </code> 可以这样提高可读性: <code>Color = tuple[int, int, int] def remove_gray_shades(colors: list[Color]) -&gt; list[Color]: pass </code> 参见 <a href="https://docs.python.org/zh-cn/3/library/typing.html#module-typing" target="_blank" rel="noopener noreferrer"><code>typing</code></a> 和 <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener noreferrer"><strong>PEP 484</strong></a>，其中有对此功能的详细描述。</p><h3 id="type-hint-类型提示" tabindex="-1"><a class="header-anchor" href="#type-hint-类型提示"><span>type hint -- 类型提示</span></a></h3><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-annotation" target="_blank" rel="noopener noreferrer">annotation</a> 为变量、类属性、函数的形参或返回值指定预期的类型。 类型提示属于可选项，Python 不要求提供，但其可对静态类型分析工具起作用，并可协助 IDE 实现代码补全与重构。 全局变量、类属性和函数的类型提示可以使用 <a href="https://docs.python.org/zh-cn/3/library/typing.html#typing.get_type_hints" target="_blank" rel="noopener noreferrer"><code>typing.get_type_hints()</code></a> 来访问，但局部变量则不可以。 参见 <a href="https://docs.python.org/zh-cn/3/library/typing.html#module-typing" target="_blank" rel="noopener noreferrer"><code>typing</code></a> 和 <a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener noreferrer"><strong>PEP 484</strong></a>，其中有对此功能的详细描述。</p><h3 id="universal-newlines-通用换行" tabindex="-1"><a class="header-anchor" href="#universal-newlines-通用换行"><span>universal newlines -- 通用换行</span></a></h3><p>一种解读文本流的方式，将以下所有符号都识别为行结束标志：Unix 的行结束约定 <code>&#39;\\n&#39;</code>、Windows 的约定 <code>&#39;\\r\\n&#39;</code> 以及旧版 Macintosh 的约定 <code>&#39;\\r&#39;</code>。参见 <a href="https://www.python.org/dev/peps/pep-0278" target="_blank" rel="noopener noreferrer"><strong>PEP 278</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-3116" target="_blank" rel="noopener noreferrer"><strong>PEP 3116</strong></a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes.splitlines" target="_blank" rel="noopener noreferrer"><code>bytes.splitlines()</code></a> 了解更多用法说明。</p><h3 id="variable-annotation-变量注解" tabindex="-1"><a class="header-anchor" href="#variable-annotation-变量注解"><span>variable annotation -- 变量注解</span></a></h3><p>对变量或类属性的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-annotation" target="_blank" rel="noopener noreferrer">annotation</a>。 在标注变量或类属性时，还可选择为其赋值: <code>class C: field: &#39;annotation&#39; </code> 变量标注通常被用作 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-type-hint" target="_blank" rel="noopener noreferrer">类型提示</a>：例如以下变量预期接受 <a href="https://docs.python.org/zh-cn/3/library/functions.html#int" target="_blank" rel="noopener noreferrer"><code>int</code></a> 类型的值: <code>count: int = 0 </code> 变量标注语法的详细解释见 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#annassign" target="_blank" rel="noopener noreferrer">带标注的赋值语句</a> 一节。 请参看 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-function-annotation" target="_blank" rel="noopener noreferrer">function annotation</a>、<a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener noreferrer"><strong>PEP 484</strong></a> 和 <a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener noreferrer"><strong>PEP 526</strong></a>，其中对此功能有详细描述。</p><h3 id="virtual-environment-虚拟环境" tabindex="-1"><a class="header-anchor" href="#virtual-environment-虚拟环境"><span>virtual environment -- 虚拟环境</span></a></h3><p>一种采用协作式隔离的运行时环境，允许 Python 用户和应用程序在安装和升级 Python 分发包时不会干扰到同一系统上运行的其他 Python 应用程序的行为。 另参见 <a href="https://docs.python.org/zh-cn/3/library/venv.html#module-venv" target="_blank" rel="noopener noreferrer"><code>venv</code></a>。</p><h3 id="virtual-machine-虚拟机" tabindex="-1"><a class="header-anchor" href="#virtual-machine-虚拟机"><span>virtual machine -- 虚拟机</span></a></h3><p>一台完全通过软件定义的计算机。Python 虚拟机可执行字节码编译器所生成的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-bytecode" target="_blank" rel="noopener noreferrer">bytecode</a>。</p><h3 id="zen-of-python-python-之禅" tabindex="-1"><a class="header-anchor" href="#zen-of-python-python-之禅"><span>Zen of Python -- Python 之禅</span></a></h3><p>列出 Python 设计的原则与哲学，有助于理解与使用这种语言。查看其具体内容可在交互模式提示符中输入 &quot;<code>import this</code>&quot;。</p>',252)]))}const c=r(a,[["render",l],["__file","10. 术语对照表.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/10.%20%E6%9C%AF%E8%AF%AD%E5%AF%B9%E7%85%A7%E8%A1%A8.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 术语对照表¶ Default >>> 交互式终端中默认的 Python 提示符。往往会显示于能以交互方式在解释器里执行的样例代码之前。 ... 可以是指： 交互式终端中输入特殊代码行时默认的 Python 提示符，包括：缩进的代码块，成对的分隔符之内（圆括号、方括号、花括号或三重引号），或是指定一个装饰器之后。 Ellipsis 内...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/10.%20%E6%9C%AF%E8%AF%AD%E5%AF%B9%E7%85%A7%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 术语对照表¶ Default >>> 交互式终端中默认的 Python 提示符。往往会显示于能以交互方式在解释器里执行的样例代码之前。 ... 可以是指： 交互式终端中输入特殊代码行时默认的 Python 提示符，包括：缩进的代码块，成对的分隔符之内（圆括号、方括号、花括号或三重引号），或是指定一个装饰器之后。 Ellipsis 内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"术语对照表¶","slug":"术语对照表¶","link":"#术语对照表¶","children":[{"level":2,"title":"Default","slug":"default","link":"#default","children":[{"level":3,"title":">>>","slug":"","link":"#","children":[]},{"level":3,"title":"...","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"2to3","slug":"_2to3","link":"#_2to3","children":[]},{"level":3,"title":"abstract base class -- 抽象基类","slug":"abstract-base-class-抽象基类","link":"#abstract-base-class-抽象基类","children":[]},{"level":3,"title":"annotation -- 注解","slug":"annotation-注解","link":"#annotation-注解","children":[]},{"level":3,"title":"argument -- 参数","slug":"argument-参数","link":"#argument-参数","children":[]},{"level":3,"title":"asynchronous context manager -- 异步上下文管理器","slug":"asynchronous-context-manager-异步上下文管理器","link":"#asynchronous-context-manager-异步上下文管理器","children":[]},{"level":3,"title":"asynchronous generator -- 异步生成器","slug":"asynchronous-generator-异步生成器","link":"#asynchronous-generator-异步生成器","children":[]},{"level":3,"title":"asynchronous generator iterator -- 异步生成器迭代器","slug":"asynchronous-generator-iterator-异步生成器迭代器","link":"#asynchronous-generator-iterator-异步生成器迭代器","children":[]},{"level":3,"title":"asynchronous iterable -- 异步可迭代对象","slug":"asynchronous-iterable-异步可迭代对象","link":"#asynchronous-iterable-异步可迭代对象","children":[]},{"level":3,"title":"asynchronous iterator -- 异步迭代器","slug":"asynchronous-iterator-异步迭代器","link":"#asynchronous-iterator-异步迭代器","children":[]},{"level":3,"title":"attribute -- 属性","slug":"attribute-属性","link":"#attribute-属性","children":[]},{"level":3,"title":"awaitable -- 可等待对象","slug":"awaitable-可等待对象","link":"#awaitable-可等待对象","children":[]},{"level":3,"title":"BDFL","slug":"bdfl","link":"#bdfl","children":[]},{"level":3,"title":"binary file -- 二进制文件","slug":"binary-file-二进制文件","link":"#binary-file-二进制文件","children":[]},{"level":3,"title":"bytes-like object -- 字节类对象","slug":"bytes-like-object-字节类对象","link":"#bytes-like-object-字节类对象","children":[]},{"level":3,"title":"bytecode -- 字节码","slug":"bytecode-字节码","link":"#bytecode-字节码","children":[]},{"level":3,"title":"callback -- 回调","slug":"callback-回调","link":"#callback-回调","children":[]},{"level":3,"title":"class -- 类","slug":"class-类","link":"#class-类","children":[]},{"level":3,"title":"class variable -- 类变量","slug":"class-variable-类变量","link":"#class-variable-类变量","children":[]},{"level":3,"title":"coercion -- 强制类型转换","slug":"coercion-强制类型转换","link":"#coercion-强制类型转换","children":[]},{"level":3,"title":"complex number -- 复数","slug":"complex-number-复数","link":"#complex-number-复数","children":[]},{"level":3,"title":"context manager -- 上下文管理器","slug":"context-manager-上下文管理器","link":"#context-manager-上下文管理器","children":[]},{"level":3,"title":"context variable -- 上下文变量","slug":"context-variable-上下文变量","link":"#context-variable-上下文变量","children":[]},{"level":3,"title":"contiguous -- 连续","slug":"contiguous-连续","link":"#contiguous-连续","children":[]},{"level":3,"title":"coroutine -- 协程","slug":"coroutine-协程","link":"#coroutine-协程","children":[]},{"level":3,"title":"coroutine function -- 协程函数","slug":"coroutine-function-协程函数","link":"#coroutine-function-协程函数","children":[]},{"level":3,"title":"CPython","slug":"cpython","link":"#cpython","children":[]},{"level":3,"title":"decorator -- 装饰器","slug":"decorator-装饰器","link":"#decorator-装饰器","children":[]},{"level":3,"title":"descriptor -- 描述器","slug":"descriptor-描述器","link":"#descriptor-描述器","children":[]},{"level":3,"title":"dictionary -- 字典","slug":"dictionary-字典","link":"#dictionary-字典","children":[]},{"level":3,"title":"dictionary comprehension -- 字典推导式","slug":"dictionary-comprehension-字典推导式","link":"#dictionary-comprehension-字典推导式","children":[]},{"level":3,"title":"dictionary view -- 字典视图","slug":"dictionary-view-字典视图","link":"#dictionary-view-字典视图","children":[]},{"level":3,"title":"docstring -- 文档字符串","slug":"docstring-文档字符串","link":"#docstring-文档字符串","children":[]},{"level":3,"title":"duck-typing -- 鸭子类型","slug":"duck-typing-鸭子类型","link":"#duck-typing-鸭子类型","children":[]},{"level":3,"title":"EAFP","slug":"eafp","link":"#eafp","children":[]},{"level":3,"title":"expression -- 表达式","slug":"expression-表达式","link":"#expression-表达式","children":[]},{"level":3,"title":"extension module -- 扩展模块","slug":"extension-module-扩展模块","link":"#extension-module-扩展模块","children":[]},{"level":3,"title":"f-string -- f-字符串","slug":"f-string-f-字符串","link":"#f-string-f-字符串","children":[]},{"level":3,"title":"file object -- 文件对象","slug":"file-object-文件对象","link":"#file-object-文件对象","children":[]},{"level":3,"title":"file-like object -- 文件类对象","slug":"file-like-object-文件类对象","link":"#file-like-object-文件类对象","children":[]},{"level":3,"title":"finder -- 查找器","slug":"finder-查找器","link":"#finder-查找器","children":[]},{"level":3,"title":"floor division -- 向下取整除法","slug":"floor-division-向下取整除法","link":"#floor-division-向下取整除法","children":[]},{"level":3,"title":"function -- 函数","slug":"function-函数","link":"#function-函数","children":[]},{"level":3,"title":"function annotation -- 函数标注","slug":"function-annotation-函数标注","link":"#function-annotation-函数标注","children":[]},{"level":3,"title":"__future__","slug":"future","link":"#future","children":[]},{"level":3,"title":"garbage collection -- 垃圾回收","slug":"garbage-collection-垃圾回收","link":"#garbage-collection-垃圾回收","children":[]},{"level":3,"title":"generator -- 生成器","slug":"generator-生成器","link":"#generator-生成器","children":[]},{"level":3,"title":"generator iterator -- 生成器迭代器","slug":"generator-iterator-生成器迭代器","link":"#generator-iterator-生成器迭代器","children":[]},{"level":3,"title":"generator expression -- 生成器表达式","slug":"generator-expression-生成器表达式","link":"#generator-expression-生成器表达式","children":[]},{"level":3,"title":"generic function -- 泛型函数","slug":"generic-function-泛型函数","link":"#generic-function-泛型函数","children":[]},{"level":3,"title":"generic type -- 泛型类型","slug":"generic-type-泛型类型","link":"#generic-type-泛型类型","children":[]},{"level":3,"title":"GIL","slug":"gil","link":"#gil","children":[]},{"level":3,"title":"global interpreter lock -- 全局解释器锁","slug":"global-interpreter-lock-全局解释器锁","link":"#global-interpreter-lock-全局解释器锁","children":[]},{"level":3,"title":"hash-based pyc -- 基于哈希的 pyc","slug":"hash-based-pyc-基于哈希的-pyc","link":"#hash-based-pyc-基于哈希的-pyc","children":[]},{"level":3,"title":"hashable -- 可哈希","slug":"hashable-可哈希","link":"#hashable-可哈希","children":[]},{"level":3,"title":"IDLE","slug":"idle","link":"#idle","children":[]},{"level":3,"title":"immutable -- 不可变","slug":"immutable-不可变","link":"#immutable-不可变","children":[]},{"level":3,"title":"import path -- 导入路径","slug":"import-path-导入路径","link":"#import-path-导入路径","children":[]},{"level":3,"title":"importing -- 导入","slug":"importing-导入","link":"#importing-导入","children":[]},{"level":3,"title":"importer -- 导入器","slug":"importer-导入器","link":"#importer-导入器","children":[]},{"level":3,"title":"interactive -- 交互","slug":"interactive-交互","link":"#interactive-交互","children":[]},{"level":3,"title":"interpreted -- 解释型","slug":"interpreted-解释型","link":"#interpreted-解释型","children":[]},{"level":3,"title":"interpreter shutdown -- 解释器关闭","slug":"interpreter-shutdown-解释器关闭","link":"#interpreter-shutdown-解释器关闭","children":[]},{"level":3,"title":"iterable -- 可迭代对象","slug":"iterable-可迭代对象","link":"#iterable-可迭代对象","children":[]},{"level":3,"title":"iterator -- 迭代器","slug":"iterator-迭代器","link":"#iterator-迭代器","children":[]},{"level":3,"title":"key function -- 键函数","slug":"key-function-键函数","link":"#key-function-键函数","children":[]},{"level":3,"title":"keyword argument -- 关键字参数","slug":"keyword-argument-关键字参数","link":"#keyword-argument-关键字参数","children":[]},{"level":3,"title":"lambda","slug":"lambda","link":"#lambda","children":[]},{"level":3,"title":"LBYL","slug":"lbyl","link":"#lbyl","children":[]},{"level":3,"title":"list -- 列表","slug":"list-列表","link":"#list-列表","children":[]},{"level":3,"title":"list comprehension -- 列表推导式","slug":"list-comprehension-列表推导式","link":"#list-comprehension-列表推导式","children":[]},{"level":3,"title":"loader -- 加载器","slug":"loader-加载器","link":"#loader-加载器","children":[]},{"level":3,"title":"magic method -- 魔术方法","slug":"magic-method-魔术方法","link":"#magic-method-魔术方法","children":[]},{"level":3,"title":"mapping -- 映射","slug":"mapping-映射","link":"#mapping-映射","children":[]},{"level":3,"title":"meta path finder -- 元路径查找器","slug":"meta-path-finder-元路径查找器","link":"#meta-path-finder-元路径查找器","children":[]},{"level":3,"title":"metaclass -- 元类","slug":"metaclass-元类","link":"#metaclass-元类","children":[]},{"level":3,"title":"method -- 方法","slug":"method-方法","link":"#method-方法","children":[]},{"level":3,"title":"method resolution order -- 方法解析顺序","slug":"method-resolution-order-方法解析顺序","link":"#method-resolution-order-方法解析顺序","children":[]},{"level":3,"title":"module -- 模块","slug":"module-模块","link":"#module-模块","children":[]},{"level":3,"title":"module spec -- 模块规格","slug":"module-spec-模块规格","link":"#module-spec-模块规格","children":[]},{"level":3,"title":"MRO","slug":"mro","link":"#mro","children":[]},{"level":3,"title":"mutable -- 可变","slug":"mutable-可变","link":"#mutable-可变","children":[]},{"level":3,"title":"named tuple -- 具名元组","slug":"named-tuple-具名元组","link":"#named-tuple-具名元组","children":[]},{"level":3,"title":"namespace -- 命名空间","slug":"namespace-命名空间","link":"#namespace-命名空间","children":[]},{"level":3,"title":"namespace package -- 命名空间包","slug":"namespace-package-命名空间包","link":"#namespace-package-命名空间包","children":[]},{"level":3,"title":"nested scope -- 嵌套作用域","slug":"nested-scope-嵌套作用域","link":"#nested-scope-嵌套作用域","children":[]},{"level":3,"title":"new-style class -- 新式类","slug":"new-style-class-新式类","link":"#new-style-class-新式类","children":[]},{"level":3,"title":"object -- 对象","slug":"object-对象","link":"#object-对象","children":[]},{"level":3,"title":"package -- 包","slug":"package-包","link":"#package-包","children":[]},{"level":3,"title":"parameter -- 形参","slug":"parameter-形参","link":"#parameter-形参","children":[]},{"level":3,"title":"path entry -- 路径入口","slug":"path-entry-路径入口","link":"#path-entry-路径入口","children":[]},{"level":3,"title":"path entry finder -- 路径入口查找器","slug":"path-entry-finder-路径入口查找器","link":"#path-entry-finder-路径入口查找器","children":[]},{"level":3,"title":"path entry hook -- 路径入口钩子","slug":"path-entry-hook-路径入口钩子","link":"#path-entry-hook-路径入口钩子","children":[]},{"level":3,"title":"path based finder -- 基于路径的查找器","slug":"path-based-finder-基于路径的查找器","link":"#path-based-finder-基于路径的查找器","children":[]},{"level":3,"title":"path-like object -- 路径类对象","slug":"path-like-object-路径类对象","link":"#path-like-object-路径类对象","children":[]},{"level":3,"title":"PEP","slug":"pep","link":"#pep","children":[]},{"level":3,"title":"portion -- 部分","slug":"portion-部分","link":"#portion-部分","children":[]},{"level":3,"title":"positional argument -- 位置参数","slug":"positional-argument-位置参数","link":"#positional-argument-位置参数","children":[]},{"level":3,"title":"provisional API -- 暂定 API","slug":"provisional-api-暂定-api","link":"#provisional-api-暂定-api","children":[]},{"level":3,"title":"provisional package -- 暂定包","slug":"provisional-package-暂定包","link":"#provisional-package-暂定包","children":[]},{"level":3,"title":"Python 3000","slug":"python-3000","link":"#python-3000","children":[]},{"level":3,"title":"Pythonic","slug":"pythonic","link":"#pythonic","children":[]},{"level":3,"title":"qualified name -- 限定名称","slug":"qualified-name-限定名称","link":"#qualified-name-限定名称","children":[]},{"level":3,"title":"reference count -- 引用计数","slug":"reference-count-引用计数","link":"#reference-count-引用计数","children":[]},{"level":3,"title":"regular package -- 常规包","slug":"regular-package-常规包","link":"#regular-package-常规包","children":[]},{"level":3,"title":"__slots__","slug":"slots","link":"#slots","children":[]},{"level":3,"title":"sequence -- 序列","slug":"sequence-序列","link":"#sequence-序列","children":[]},{"level":3,"title":"set comprehension -- 集合推导式","slug":"set-comprehension-集合推导式","link":"#set-comprehension-集合推导式","children":[]},{"level":3,"title":"single dispatch -- 单分派","slug":"single-dispatch-单分派","link":"#single-dispatch-单分派","children":[]},{"level":3,"title":"slice -- 切片","slug":"slice-切片","link":"#slice-切片","children":[]},{"level":3,"title":"special method -- 特殊方法","slug":"special-method-特殊方法","link":"#special-method-特殊方法","children":[]},{"level":3,"title":"statement -- 语句","slug":"statement-语句","link":"#statement-语句","children":[]},{"level":3,"title":"text encoding -- 文本编码","slug":"text-encoding-文本编码","link":"#text-encoding-文本编码","children":[]},{"level":3,"title":"text file -- 文本文件","slug":"text-file-文本文件","link":"#text-file-文本文件","children":[]},{"level":3,"title":"triple-quoted string -- 三引号字符串","slug":"triple-quoted-string-三引号字符串","link":"#triple-quoted-string-三引号字符串","children":[]},{"level":3,"title":"type -- 类型","slug":"type-类型","link":"#type-类型","children":[]},{"level":3,"title":"type alias -- 类型别名","slug":"type-alias-类型别名","link":"#type-alias-类型别名","children":[]},{"level":3,"title":"type hint -- 类型提示","slug":"type-hint-类型提示","link":"#type-hint-类型提示","children":[]},{"level":3,"title":"universal newlines -- 通用换行","slug":"universal-newlines-通用换行","link":"#universal-newlines-通用换行","children":[]},{"level":3,"title":"variable annotation -- 变量注解","slug":"variable-annotation-变量注解","link":"#variable-annotation-变量注解","children":[]},{"level":3,"title":"virtual environment -- 虚拟环境","slug":"virtual-environment-虚拟环境","link":"#virtual-environment-虚拟环境","children":[]},{"level":3,"title":"virtual machine -- 虚拟机","slug":"virtual-machine-虚拟机","link":"#virtual-machine-虚拟机","children":[]},{"level":3,"title":"Zen of Python -- Python 之禅","slug":"zen-of-python-python-之禅","link":"#zen-of-python-python-之禅","children":[]}]}]}],"git":{},"readingTime":{"minutes":43.47,"words":13042},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/01. 编程语言/10. 术语对照表.md","excerpt":"\\n<h1>目录</h1>\\n<h1><a class=\\"header-anchor\\" href=\\"#术语对照表¶\\"><span>术语对照表</span></a><a href=\\"https://docs.python.org/zh-cn/3/glossary.html#glossary\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">¶</a></h1>\\n<h2>Default</h2>\\n<h3><code>&gt;&gt;&gt;</code></h3>\\n<p>交互式终端中默认的 Python 提示符。往往会显示于能以交互方式在解释器里执行的样例代码之前。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/01. 编程语言/10. 术语对照表.md","value":{"title":"10. 术语对照表","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/01. 编程语言/10. 术语对照表.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,p as data};
