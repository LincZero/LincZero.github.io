import{_ as i,c as a,e,o as l}from"./app-_6RECMRt.js";const n="/assets/%E7%B4%A2%E5%BC%95%E6%8F%90%E7%BA%B2-CDm1UFWC.png",t="/assets/%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB.drawio-CPVT6Rmp.png",p="/assets/824c43b801c64e81acb0a9b042d50311-CLTxc-Lj.png",r="/assets/btree.drawio-DBh14gbH.png",h="/assets/%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95btree.drawio-DhOKKZOe.png",d="/assets/%E5%9B%9E%E8%A1%A8.drawio-oPZ_Yp7t.png",o="/assets/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.drawio-B8C2m0_y.png",c="/assets/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E6%A1%88%E4%BE%8B.drawio-BzayyJ9k.png",k="/assets/q1-Ct7oYbib.png",g="/assets/q2-CR1vwaGk.png",m="/assets/q3-BVMKoFAR.png",A="/assets/q4-1.drawio-o2CVhhYa.png",u="/assets/q4-2.drawio-C4qTzgrv.png",B="/assets/q4-%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92-BY5xa2y_.png",y="/assets/%E5%8C%BA%E5%88%86%E5%BA%A6-COZToJTd.png",v="/assets/%E9%A1%B5%E5%88%86%E8%A3%82-DBIww7Yc.png",b="/assets/%E5%BC%80%E8%BE%9F%E6%96%B0%E9%A1%B5-DRSX1opa.png",E="/assets/COMPACT.drawio-C6x0vO9q.png",_="/assets/798ab1331d1d6dff026e262e788f1a28--Ov5xuBn.png",D="/assets/%E7%B4%A2%E5%BC%95%E6%80%BB%E7%BB%93.drawio-DoRMw6an.png",F={};function x(C,s){return l(),a("div",null,s[0]||(s[0]=[e('<h1 id="索引常见面试题" tabindex="-1"><a class="header-anchor" href="#索引常见面试题"><span>索引常见面试题</span></a></h1><p>面试中，MySQL 索引相关的问题基本都是一系列问题，都是先从索引的基本原理，再到索引的使用场景，比如：</p><ul><li>索引底层使用了什么数据结构和算法？</li><li>为什么 MySQL InnoDB 选择 B+tree 作为索引的数据结构？</li><li>什么时候适用索引？</li><li>什么时候不需要创建索引？</li><li>什么情况下索引会失效？</li><li>有什么优化索引的方法？</li><li>.....</li></ul><p>今天就带大家，夯实 MySQL 索引的知识点。</p><p><img src="'+n+'" alt="img" loading="lazy"></p><h2 id="什么是索引" tabindex="-1"><a class="header-anchor" href="#什么是索引"><span>什么是索引？</span></a></h2><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>索引的定义、需求</p><p>当你想查阅书中某个知识的内容，你会选择一页一页的找呢？还是在书的目录去找呢？</p><p>傻瓜都知道时间是宝贵的，当然是选择在书的目录去找，找到后再翻到对应的页。书中的<strong>目录</strong>，就是充当<strong>索引</strong>的角色，方便我们快速查找书中的内容，所以索引是以空间换时间的设计思想。</p><p>那换到数据库中，索引的定义就是帮助存储引擎快速获取数据的一种数据结构，形象的说就是<strong>索引是数据的目录</strong>。</p></div></div><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>存储引擎和索引的关系</p><p>所谓的存储引擎，说白了就是如何存储数据、如何为存储的数据建立索引和如何更新、查询数据等技术的实现方法。MySQL 存储引擎有 MyISAM 、InnoDB、Memory，其中 InnoDB 是在 MySQL 5.5 之后成为默认的存储引擎。</p><p>下图是 MySQL 的结构图，索引和数据就是位于存储引擎中：</p><p><img src="https://cdn.xiaolincoding.com//mysql/other/1623727651911_20170928110355446.png" alt="img" loading="lazy"></p></div></div><h2 id="索引分类-四种分类方法" tabindex="-1"><a class="header-anchor" href="#索引分类-四种分类方法"><span>索引分类 - 四种分类方法</span></a></h2><p>索引有哪些吗？</p><ul><li>聚簇索引</li><li>主键索引</li><li>二级索引</li><li>普通索引</li><li>唯一索引</li><li>hash索引</li><li>B+树索引</li><li>……等等</li></ul><p>而这些索引又是如何分类？分类方法有很多，以下介绍四个角度的分类方法：</p><ul><li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong></li><li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong></li><li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong></li><li>按「字段个数」分类：<strong>单列索引、联合索引</strong></li></ul><p>接下来，按照这些角度来说说各类索引的特点。</p><h2 id="索引分类-1-按数据结构分类" tabindex="-1"><a class="header-anchor" href="#索引分类-1-按数据结构分类"><span>索引分类 (1) 按数据结构分类</span></a></h2><p>从数据结构的角度来看，MySQL 常见索引有：</p><ul><li>B+Tree 索引</li><li>HASH 索引</li><li>Full-Text 索引</li></ul><h3 id="存储引擎与索引类型" tabindex="-1"><a class="header-anchor" href="#存储引擎与索引类型"><span>存储引擎与索引类型</span></a></h3><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>存储引擎 - 支持的索引类型</p><p>每一种存储引擎支持的索引类型不一定相同，我在表中总结了 MySQL 常见的存储引擎 InnoDB、MyISAM 和 Memory 分别支持的索引类型。</p><p>其中，InnoDB 是在 MySQL 5.5 之后成为默认的 MySQL 存储引擎，B+Tree 索引类型也是 MySQL 存储引擎采用最多的索引类型。</p><p><img src="'+t+'" alt="img" loading="lazy"></p></div></div><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>存储引擎 - 默认选择的主键索引列</p><p>在创建表时，InnoDB 存储引擎会根据不同的场景选择不同的列作为索引：</p><ul><li>如果有主键，默认会使用主键作为聚簇索引的索引键（key）；</li><li>如果没有主键，就选择第一个不包含 NULL 值的唯一列作为聚簇索引的索引键（key）；</li><li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增 id 列作为聚簇索引的索引键（key）；</li></ul><p>根据该选择的列作为主键索引。其它索引都属于辅助索引（也称 Secondary Index、二级索引、非聚簇索引）</p></div></div><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>存储引擎 - 默认选择的索引类型</p><p><strong>创建的主键索引和二级索引默认使用的是 B+Tree 索引</strong></p></div></div><h3 id="_1-b-tree-索引" tabindex="-1"><a class="header-anchor" href="#_1-b-tree-索引"><span>(1) B+Tree 索引</span></a></h3><p>为了让大家理解 B+Tree 索引的存储和查询的过程，接下来我通过一个简单例子，说明一下 B+Tree 索引在存储数据中的具体实现。</p><p>数据准备：</p><p>先创建一张商品表，id 为主键，如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">`  (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `product_no`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `price`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> decimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">USING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CHARACTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> utf8 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">COLLATE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> utf8_general_ci ROW_FORMAT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Dynamic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>商品表里，有这些行数据：</p><p><img src="'+p+'" alt="img" loading="lazy"></p><p>这些行数据，存储在 B+Tree 索引时是长什么样子的？</p><p>B+Tree 是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，而且每个节点里的数据是<strong>按主键顺序存放</strong>的。每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都有两个指针，分别指向下一个叶子节点和上一个叶子节点，形成一个双向链表。</p><p>主键索引的 B+Tree 如图所示（图中叶子节点之间我画了单向链表，但是实际上是双向链表，原图我找不到了，修改不了，偷个懒我不重画了，大家脑补成双向链表就行）：</p><p><img src="'+r+'" alt="主键索引 B+Tree" loading="lazy"></p><h4 id="主键查询" tabindex="-1"><a class="header-anchor" href="#主键查询"><span>主键查询</span></a></h4><p>比如，我们执行了下面这条查询语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条语句使用了主键索引查询 id 号为 5 的商品。查询过程是这样的，B+Tree 会自顶向下逐层进行查找：</p><ol><li>将 5 与根节点的索引数据 (1，10，20) 比较，5 在 1 和 10 之间，所以根据 B+Tree的搜索逻辑，找到第二层的索引数据 (1，4，7)；</li><li>在第二层的索引数据 (1，4，7)中进行查找，因为 5 在 4 和 7 之间，所以找到第三层的索引数据（4，5，6）；</li><li>在叶子节点的索引数据（4，5，6）中进行查找，然后我们找到了索引值为 5 的行数据。</li></ol><p>数据库的<strong>索引和数据都是存储在硬盘的</strong>，我们可以把<em>读取一个节点当作一次磁盘 I/O 操作</em>。那么上面的整个查询过程一共经历了 3 个节点，也就是进行了 <em>3 次 I/O 操作</em>。</p><p>B+Tree 存储千万级的数据只需要 3-4 层高度就可以满足，这意味着从千万级的表查询目标数据最多需要 3-4 次磁盘 I/O，所以<strong>B+Tree 相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4次。</strong></p><h4 id="二级索引查询" tabindex="-1"><a class="header-anchor" href="#二级索引查询"><span>二级索引查询</span></a></h4><p>主键索引的 B+Tree 和二级索引的 B+Tree 区别如下：</p><ul><li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li><li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>我这里将前面的商品表中的 product_no （商品编码）字段设置为二级索引，那么二级索引的 B+Tree 如下图（图中叶子节点之间我画了单向链表，但是实际上是双向链表，原图我找不到了，修改不了，偷个懒我不重画了，大家脑补成双向链表就行）。</p><p><img src="'+h+'" alt="二级索引 B+Tree" loading="lazy"></p><p>其中非叶子的 key 值是 product_no（图中橙色部分），叶子节点存储的数据是主键值（图中绿色部分）。</p><p>如果我用 product_no 二级索引查询商品，如下查询语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product_no </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0002&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><p>会先检二级索引中的 B+Tree 的索引值（商品编码，product_no），找到对应的叶子节点，然后获取主键值，</p></li><li><p>然后再通过主键索引中的 B+Tree 树查询到对应的叶子节点，然后获取整行数据。<strong>这个过程叫「回表」</strong>。</p><p>如下图（图中叶子节点之间我画了单向链表，但是实际上是双向链表，原图我找不到了，修改不了，偷个懒我不重画了，大家脑补成双向链表就行）：</p><p><img src="'+d+`" alt="回表" loading="lazy"></p></li></ol><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>覆盖索引</p><p>像上面这种情况，需要「<strong>回表</strong>」，<em>要查两个 B+Tree 才能查到数据</em></p><p>不过，当查询的数据是能在二级索引的 B+Tree 的叶子节点里查询到，这时就不用再查主键索引查，比如下面这条查询语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product_no </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;0002&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种在二级索引的 B+Tree 就能查询到结果的过程就叫作「<strong>覆盖索引</strong>」，也就是<em>只要查一个 B+Tree 就能找到数据</em>。</p></div></div><h4 id="b-tree-索引优点" tabindex="-1"><a class="header-anchor" href="#b-tree-索引优点"><span>B+Tree 索引优点</span></a></h4><p>为什么选择 B+tree 作为索引数据结构？B+Tree 相比于 B 树、二叉树或 Hash 索引结构的优势在哪儿？</p><p>之前我也专门写过一篇文章，想详细了解的可以看这篇：「<a href="https://mp.weixin.qq.com/s/w1ZFOug8-Sa7ThtMnlaUtQ" target="_blank" rel="noopener noreferrer">女朋友问我：为什么 MySQL 喜欢 B+ 树？我笑着画了 20 张图</a>」，这里就简单做个比对。</p><ol><li><p>B+Tree vs B Tree</p><p>对比：B+Tree <strong>只在叶子节点存储数据</strong>，B 树 <strong>非叶子节点也存储数据</strong>。即</p><p>所以 B+Tree 的<em>单个节点的数据量更小</em>，在相同的磁盘 I/O 次数下，就能<em>查询更多的节点</em>。</p><p>对比：B+Tree 叶子节点采用的是<strong>双链表</strong>连接，而B树<strong>不是</strong></p><p>所以 B+Tree 能适合 MySQL 中常见的<em>基于范围</em>的顺序查找</p></li><li><p>B+Tree vs 二叉树</p><p>对比：搜索复杂度依次是 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>d</mi></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_d N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></strong> 和 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2 N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></strong>。其中 d 表示节点允许的最大子节点个数为 d 个，在实际的应用当中 d 值是大于100的</p><p>实际应用中，即使数据达到千万级别时，B+Tree 的<em>高度更低</em>，依然维持在 3~4 层左右。一次数据<em>查询操作次数更少</em>，只需要做 3~4 次的磁盘 I/O</p><p>玩儿二叉树的每个父节点的儿子节点个数只能是 2 个，意味着其搜索复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_2 N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，因此检索到目标数据所经历的磁盘 I/O 次数要更多</p></li><li><p>B+Tree vs Hash</p><p>对比：B+Tree 更适合做<strong>范围查询</strong>，Hash 更适合做<strong>等值查询</strong>（搜索复杂度为 O(1)，但范围查询不适合）</p><p>这也是 B+Tree 索引要比 Hash 表索引有着<em>更广泛</em>的适用场景的原因。</p></li></ol><h3 id="_2-hash-索引" tabindex="-1"><a class="header-anchor" href="#_2-hash-索引"><span>(2) HASH 索引</span></a></h3><p>略</p><h3 id="_3-full-text-索引" tabindex="-1"><a class="header-anchor" href="#_3-full-text-索引"><span>(3) Full-Text 索引</span></a></h3><p>略</p><h2 id="索引分类-2-按物理存储分类" tabindex="-1"><a class="header-anchor" href="#索引分类-2-按物理存储分类"><span>索引分类 (2) 按物理存储分类</span></a></h2><p>从物理存储的角度来看，索引分为聚簇索引（主键索引）、二级索引（辅助索引）。</p><p>这两个区别在前面也提到了：</p><ul><li>主键索引的 B+Tree 的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的 B+Tree 的叶子节点里；</li><li>二级索引的 B+Tree 的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>特殊情况：</p><blockquote><p>一般情况下通过二级索引查询需要查两次 B+Tree：</p><p>即先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，（这个过程叫「<strong>回表</strong>」），就能查询到数据了</p><p>特殊情况下可以只查一次 B+Tree：</p><p>即查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是「<strong>覆盖索引</strong>」</p></blockquote><h3 id="_1-聚簇索引-主键索引" tabindex="-1"><a class="header-anchor" href="#_1-聚簇索引-主键索引"><span>(1) 聚簇索引（主键索引）</span></a></h3><p>略（前面已经说过了）</p><h3 id="_2-二级索引-辅助索引、非聚簇索引、secondary-index" tabindex="-1"><a class="header-anchor" href="#_2-二级索引-辅助索引、非聚簇索引、secondary-index"><span>(2) 二级索引（辅助索引、非聚簇索引、Secondary Index）</span></a></h3><p>略（前面已经说过了）</p><h2 id="索引分类-3-按字段特性分类" tabindex="-1"><a class="header-anchor" href="#索引分类-3-按字段特性分类"><span>索引分类 (3) 按字段特性分类</span></a></h2><p>从字段特性的角度来看，索引分为主键索引、唯一索引、普通索引、前缀索引。</p><p>比较：(用加粗表示更严格的项)</p><table><thead><tr><th></th><th>主键索引</th><th>唯一索引</th><th>普通索引</th><th>前缀索引</th></tr></thead><tbody><tr><td>建立在什么字段</td><td>主键字段</td><td>UNIQUE字段</td><td>普通字段</td><td>字符类型字段的前几个字符 (不是整个字段)<br>可以建立在字段类型为 char、 varchar、binary、varbinary 的列上<br><em>实际上是普通索引的一种特殊形式</em></td></tr><tr><td>一张表能有多少个</td><td><strong>最多一个</strong></td><td><em>可以多个</em></td><td><em>可以多个</em></td><td><em>可以多个</em></td></tr><tr><td>是否允许空值</td><td><strong>不允许</strong></td><td><em>允许</em></td><td><em>允许</em></td><td><em>允许</em></td></tr><tr><td>允许重复</td><td><strong>不允许</strong></td><td><strong>不允许</strong></td><td><em>允许</em></td><td><em>允许</em></td></tr></tbody></table><h3 id="_1-主键索引" tabindex="-1"><a class="header-anchor" href="#_1-主键索引"><span>(1) 主键索引</span></a></h3><p>特征：是建立在主键字段上索引，一张表最多只有一个主键索引，索引列的值不允许有空值，通常在创建表的时候一起创建</p><p>在创建表时，创建主键索引的方式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> table_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ....</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (index_column_1) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">USING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BTREE</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-唯一索引" tabindex="-1"><a class="header-anchor" href="#_2-唯一索引"><span>(2) 唯一索引</span></a></h3><p>特征：是建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值</p><p>在创建表时，创建唯一索引的方式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> table_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ....</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  UNIQUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index_column_1,index_column_2,...) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建表后，如果要创建唯一索引，可以使用这面这条命令：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> UNIQUE INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name(index_column_1,index_column_2,...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-普通索引" tabindex="-1"><a class="header-anchor" href="#_3-普通索引"><span>(3) 普通索引</span></a></h3><p>特征：普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE</p><p>在创建表时，创建普通索引的方式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> table_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ....</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(index_column_1,index_column_2,...) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建表后，如果要创建普通索引，可以使用这面这条命令：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name(index_column_1,index_column_2,...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-前缀索引" tabindex="-1"><a class="header-anchor" href="#_4-前缀索引"><span>(4) 前缀索引</span></a></h3><p>特征：前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引。前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。</p><p>使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p><p>在创建表时，创建前缀索引的方式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> table_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    column_list,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(column_name(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建表后，如果要创建前缀索引，可以使用这面这条命令：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name(column_name(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="索引分类-4-按字段个数分类" tabindex="-1"><a class="header-anchor" href="#索引分类-4-按字段个数分类"><span>索引分类 (4) 按字段个数分类</span></a></h2><p>从字段个数的角度来看，索引分为单列索引、联合索引（复合索引）。</p><ul><li>建立在单列上的索引称为单列索引，比如主键索引；</li><li>建立在多列上的索引称为联合索引；</li></ul><h3 id="_1-单列索引" tabindex="-1"><a class="header-anchor" href="#_1-单列索引"><span>(1) 单列索引</span></a></h3><p>略，一般情况下都是单列索引</p><h3 id="_2-联合索引-复合索引" tabindex="-1"><a class="header-anchor" href="#_2-联合索引-复合索引"><span>(2) 联合索引（复合索引）</span></a></h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h4><p>通过将多个字段组合成一个索引，该索引就被称为联合索引。</p><p>比如，将商品表中的 product_no 和 name 字段组合成联合索引<code>(product_no, name)</code>，创建联合索引的方式如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> index_product_no_name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> product(product_no, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>联合索引<code>(product_no, name)</code> 的 B+Tree 示意图如下（图中叶子节点之间我画了单向链表，但是实际上是双向链表，原图我找不到了，修改不了，偷个懒我不重画了，大家脑补成双向链表就行）。</p><p><img src="`+o+'" alt="联合索引" loading="lazy"></p><p>可以看到，联合索引的非叶子节点<em>用两个字段的值作为 B+Tree 的 key 值</em>。</p><h4 id="查询和排序规则、最左匹配原则" tabindex="-1"><a class="header-anchor" href="#查询和排序规则、最左匹配原则"><span>查询和排序规则、最左匹配原则</span></a></h4><p>当在联合索引查询数据时，<em>先按 product_no 字段比较</em>，在 product_no 相同的情况下再按 name 字段比较。也就是说，联合索引查询的 B+Tree 是<em>先按 product_no 进行排序</em>，然后再 product_no 相同的情况再按 name 字段排序。</p><p>因此，使用联合索引时，存在<strong>最左匹配原则</strong>，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。</p><p>比如，如果创建了一个 <code>(a, b, c)</code> 联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><ul><li>where a=1；</li><li>where a=1 and b=2 and c=3；</li><li>where a=1 and b=2；</li></ul><p>需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要。</p><p>但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b=2；</li><li>where c=3；</li><li>where b=2 and c=3；</li></ul><p>上面这些查询条件之所以会失效，是因为<code>(a, b, c)</code> 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，<strong>b 和 c 是全局无序，局部相对有序的</strong>，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p><p>我这里举联合索引（a，b）的例子，该联合索引的 B+ Tree 如下（图中叶子节点之间我画了单向链表，但是实际上是双向链表，原图我找不到了，修改不了，偷个懒我不重画了，大家脑补成双向链表就行）。</p><p><img src="'+c+'" alt="img" loading="lazy"></p><p>可以看到，a 是全局有序的（1, 2, 2, 3, 4, 5, 6, 7 ,8），而 b 是全局是无序的（12，7，8，2，3，8，10，5，2）。因此，直接执行<code>where b = 2</code>这种查询条件没有办法利用联合索引的，<strong>利用索引的前提是索引里的 key 是有序的</strong>。</p><p>只有在 a 相同的情况才，b 才是有序的，比如 a 等于 2 的时候，b 的值为（7，8），这时就是有序的，这个有序状态是局部的，因此，执行<code>where a = 2 and b = 7</code>是 a 和 b 字段能用到联合索引的，也就是联合索引生效了。</p><h4 id="联合索引范围查询-未" tabindex="-1"><a class="header-anchor" href="#联合索引范围查询-未"><span>联合索引范围查询 (未)</span></a></h4><p>联合索引有一些特殊情况，<strong>并不是查询过程使用了联合索引查询，就代表联合索引中的所有字段都用到了联合索引进行索引查询</strong>，也就是可能存在部分字段用到联合索引的 B+Tree，部分字段没有用到联合索引的 B+Tree 的情况。</p><p>这种特殊情况就发生在范围查询。联合索引的最左匹配原则会一直向右匹配直到遇到「范围查询」就会停止匹配。<strong>也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引</strong>。</p><p>范围查询有很多种，那到底是哪些范围查询会导致联合索引的最左匹配原则会停止匹配呢？</p><p>接下来，举例几个范围查询例子。</p><h5 id="例子1" tabindex="-1"><a class="header-anchor" href="#例子1"><span>例子1</span></a></h5><blockquote><p>Q1: <code>select * from t_table where a &gt; 1 and b = 2</code>，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？</p></blockquote><p>由于联合索引（二级索引）是先按照 a 字段的值排序的，所以符合 a &gt; 1 条件的二级索引记录肯定是相邻，于是在进行索引扫描的时候，可以定位到符合 a &gt; 1 条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合 a &gt; 1 条件位置。所以 a 字段可以在联合索引的 B+Tree 中进行索引查询。</p><p><strong>但是在符合 a &gt; 1 条件的二级索引记录的范围里，b 字段的值是无序的</strong>。比如前面图的联合索引的 B+ Tree 里，下面这三条记录的 a 字段的值都符合 a &gt; 1 查询条件，而 b 字段的值是无序的：</p><ul><li>a 字段值为 5 的记录，该记录的 b 字段值为 8；</li><li>a 字段值为 6 的记录，该记录的 b 字段值为 10；</li><li>a 字段值为 7 的记录，该记录的 b 字段值为 5；</li></ul><p>因此，我们不能根据查询条件 b = 2 来进一步减少需要扫描的记录数量（b 字段无法利用联合索引进行索引查询的意思）。</p><p>所以在执行 Q1 这条查询语句的时候，对应的扫描区间是 (2, + ∞)，形成该扫描区间的边界条件是 a &gt; 1，与 b = 2 无关。</p><p>因此，<strong>Q1 这条查询语句只有 a 字段用到了联合索引进行索引查询，而 b 字段并没有使用到联合索引</strong>。</p><p>我们也可以在执行计划中的 key_len 知道这一点，在使用联合索引进行查询的时候，通过 key_len 我们可以知道优化器具体使用了多少个字段的搜索条件来形成扫描区间的边界条件。</p><p>举例个例子 ，a 和 b 都是 int 类型且不为 NULL 的字段，那么 Q1 这条查询语句执行计划如下，可以看到 key_len 为 4 字节（如果字段允许为 NULL，就在字段类型占用的字节数上加 1，也就是 5 字节），说明只有 a 字段用到了联合索引进行索引查询，而且可以看到，即使 b 字段没用到联合索引，key 为 idx_a_b，说明 Q1 查询语句使用了 idx_a_b 联合索引。</p><p><img src="'+k+'" alt="img" loading="lazy"></p><p>通过 Q1 查询语句我们可以知道，a 字段使用了 &gt; 进行范围查询，联合索引的最左匹配原则在遇到 a 字段的范围查询（ &gt;）后就停止匹配了，因此 b 字段并没有使用到联合索引。</p><h5 id="例子2" tabindex="-1"><a class="header-anchor" href="#例子2"><span>例子2</span></a></h5><blockquote><p>Q2: <code>select * from t_table where a &gt;= 1 and b = 2</code>，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？</p></blockquote><p>Q2 和 Q1 的查询语句很像，唯一的区别就是 a 字段的查询条件「大于等于」。</p><p>由于联合索引（二级索引）是先按照 a 字段的值排序的，所以符合 &gt;= 1 条件的二级索引记录肯定是相邻，于是在进行索引扫描的时候，可以定位到符合 &gt;= 1 条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合 a&gt;= 1 条件位置。所以 a 字段可以在联合索引的 B+Tree 中进行索引查询。</p><p>虽然在符合 a&gt;= 1 条件的二级索引记录的范围里，b 字段的值是「无序」的，<strong>但是对于符合 a = 1 的二级索引记录的范围里，b 字段的值是「有序」的</strong>（因为对于联合索引，是先按照 a 字段的值排序，然后在 a 字段的值相同的情况下，再按照 b 字段的值进行排序）。</p><p>于是，在确定需要扫描的二级索引的范围时，当二级索引记录的 a 字段值为 1 时，可以通过 b = 2 条件减少需要扫描的二级索引记录范围（b 字段可以利用联合索引进行索引查询的意思）。也就是说，从符合 a = 1 and b = 2 条件的第一条记录开始扫描，而不需要从第一个 a 字段值为 1 的记录开始扫描。</p><p>所以，<strong>Q2 这条查询语句 a 和 b 字段都用到了联合索引进行索引查询</strong>。</p><p>我们也可以在执行计划中的 key_len 知道这一点。执行计划如下，可以看到 key_len 为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是 a 和 b 字段都用到了联合索引进行索引查询。</p><p><img src="'+g+'" alt="img" loading="lazy"></p><p>通过 Q2 查询语句我们可以知道，虽然 a 字段使用了 &gt;= 进行范围查询，但是联合索引的最左匹配原则并没有在遇到 a 字段的范围查询（ &gt;=）后就停止匹配了，b 字段还是可以用到了联合索引的。</p><h5 id="例子3" tabindex="-1"><a class="header-anchor" href="#例子3"><span>例子3</span></a></h5><blockquote><p>Q3: <code>SELECT * FROM t_table WHERE a BETWEEN 2 AND 8 AND b = 2</code>，联合索引（a, b）哪一个字段用到了联合索引的 B+Tree？</p></blockquote><p>Q3 查询条件中 <code>a BETWEEN 2 AND 8</code> 的意思是查询 a 字段的值在 2 和 8 之间的记录。不同的数据库对 BETWEEN ... AND 处理方式是有差异的。在 MySQL 中，BETWEEN 包含了 value1 和 value2 边界值，类似于 &gt;= and =&lt;。而有的数据库则不包含 value1 和 value2 边界值（类似于 &gt; and &lt;）。</p><p>这里我们只讨论 MySQL。由于 MySQL 的 BETWEEN 包含 value1 和 value2 边界值，所以类似于 Q2 查询语句，因此 <strong>Q3 这条查询语句 a 和 b 字段都用到了联合索引进行索引查询</strong>。</p><p>我们也可以在执行计划中的 key_len 知道这一点。执行计划如下，可以看到 key_len 为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是 a 和 b 字段都用到了联合索引进行索引查询。</p><p><img src="'+m+'" alt="img" loading="lazy"></p><p>通过 Q3 查询语句我们可以知道，虽然 a 字段使用了 BETWEEN 进行范围查询，但是联合索引的最左匹配原则并没有在遇到 a 字段的范围查询（ BETWEEN）后就停止匹配了，b 字段还是可以用到了联合索引的。</p><h5 id="例子4" tabindex="-1"><a class="header-anchor" href="#例子4"><span>例子4</span></a></h5><blockquote><p>Q4: <code>SELECT * FROM t_user WHERE name like &#39;j%&#39; and age = 22</code>，联合索引（name, age）哪一个字段用到了联合索引的 B+Tree？</p></blockquote><p>由于联合索引（二级索引）是先按照 name 字段的值排序的，所以前缀为 ‘j’ 的 name 字段的二级索引记录都是相邻的， 于是在进行索引扫描的时候，可以定位到符合前缀为 ‘j’ 的 name 字段的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录的 name 前缀不为 ‘j’ 为止。</p><p>所以 a 字段可以在联合索引的 B+Tree 中进行索引查询，形成的扫描区间是[&#39;j&#39;,&#39;k&#39;)。注意， j 是闭区间。如下图：</p><p><img src="'+A+'" alt="img" loading="lazy"></p><p>虽然在符合前缀为 ‘j’ 的 name 字段的二级索引记录的范围里，age 字段的值是「无序」的，<strong>但是对于符合 name = j 的二级索引记录的范围里，age字段的值是「有序」的</strong>（因为对于联合索引，是先按照 name 字段的值排序，然后在 name 字段的值相同的情况下，再按照 age 字段的值进行排序）。</p><p>于是，在确定需要扫描的二级索引的范围时，当二级索引记录的 name 字段值为 ‘j’ 时，可以通过 age = 22 条件减少需要扫描的二级索引记录范围（age 字段可以利用联合索引进行索引查询的意思）。也就是说，从符合 <code>name = &#39;j&#39; and age = 22</code> 条件的第一条记录时开始扫描，而不需要从第一个 name 为 j 的记录开始扫描 。如下图的右边：</p><p><img src="'+u+'" alt="img" loading="lazy"></p><p>所以，<strong>Q4 这条查询语句 a 和 b 字段都用到了联合索引进行索引查询</strong>。</p><p>我们也可以在执行计划中的 key_len 知道这一点。本次例子中：</p><ul><li>name 字段的类型是 varchar(30) 且不为 NULL，数据库表使用了 utf8mb4 字符集，一个字符集为 utf8mb4 的字符是 4 个字节，因此 name 字段的实际数据最多占用的存储空间长度是 120 字节（30 x 4），然后因为 name 是变长类型的字段，需要再加 2 字节（用于存储该字段实际数据的长度值），也就是 name 的 key_len 为 122。</li><li>age 字段的类型是 int 且不为 NULL，key_len 为 4。</li></ul><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>可能有的同学对于「因为 name 是变长类型的字段，需要再加 2 字节」这句话有疑问。之前这篇<a href="https://xiaolincoding.com/mysql/base/row_format.html" target="_blank" rel="noopener noreferrer">文章</a>说「如果变长字段允许存储的最大字节数小于等于 255 字节，就会用 1 字节表示变长字段的长度」，而这里为什么是 2 字节？</p><p>key_len 的显示比较特殊，行格式是由 innodb存 储引擎实现的，而执行计划是在server 层生成的，所以它不会去问 innodb 存储引擎可变字段的长度占用多少字节，而是不管三七二十一都使用 2 字节表示可变字段的长度。</p><p>毕竟 key_len 的目的只是为了告诉你索引查询中用了哪些索引字段，而不是为了准确告诉这个字段占用多少字节空间。</p></div></div><p>Q4 查询语句的执行计划如下，可以看到 key_len 为 126 字节，name 的 key_len 为 122，age 的 key_len 为 4，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是 name 和 age 字段都用到了联合索引进行索引查询。</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>通过 Q4 查询语句我们可以知道，虽然 name 字段使用了 like 前缀匹配进行范围查询，但是联合索引的最左匹配原则并没有在遇到 name 字段的范围查询（ like &#39;j%&#39;）后就停止匹配了，age 字段还是可以用到了联合索引的。</p><p>综上所示，<strong>联合索引的最左匹配原则，在遇到范围查询（如 &gt;、&lt;）的时候，就会停止匹配，也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。注意，对于 &gt;=、&lt;=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配，前面我也用了四个例子说明了</strong>。</p><h4 id="索引下推-未" tabindex="-1"><a class="header-anchor" href="#索引下推-未"><span>索引下推 (未)</span></a></h4><p>现在我们知道，对于联合索引（a, b），在执行 <code>select * from table where a &gt; 1 and b = 2</code> 语句的时候，只有 a 字段能用到索引，那在联合索引的 B+Tree 找到第一个满足条件的主键值（ID 为 2）后，还需要判断其他条件是否满足（看 b 是否等于 2），那是在联合索引里判断？还是回主键索引去判断呢？</p><ul><li>在 MySQL 5.6 之前，只能从 ID2 （主键值）开始一个个回表，到「主键索引」上找出数据行，再对比 b 字段值。</li><li>而 MySQL 5.6 引入的<strong>索引下推优化</strong>（index condition pushdown)， <strong>可以在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数</strong>。</li></ul><p>当你的查询语句的执行计划里，出现了 Extra 为 <code>Using index condition</code>，那么说明使用了索引下推的优化。</p><h4 id="索引区分度-未" tabindex="-1"><a class="header-anchor" href="#索引区分度-未"><span>索引区分度 (未)</span></a></h4><p>另外，建立联合索引时的字段顺序，对索引效率也有很大影响。越靠前的字段被用于索引过滤的概率越高，实际开发工作中<strong>建立联合索引时，要把区分度大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到</strong>。</p><p>区分度就是某个字段 column 不同值的个数「除以」表的总行数，计算公式如下：</p><p><img src="'+y+'" alt="区分度计算公式" loading="lazy"></p><p>比如，性别的区分度就很小，不适合建立索引或不适合排在联合索引列的靠前的位置，而 UUID 这类字段就比较适合做索引或排在联合索引列的靠前的位置。</p><p>因为如果索引的区分度很小，假设字段的值分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比（惯用的百分比界线是&quot;30%&quot;）很高的时候，它一般会忽略索引，进行全表扫描。</p><h4 id="联合索引进行排序-未" tabindex="-1"><a class="header-anchor" href="#联合索引进行排序-未"><span>联合索引进行排序 (未)</span></a></h4><p>这里出一个题目，针对针对下面这条 SQL，你怎么通过索引来提高查询效率呢？</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> order </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> order by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> create_time </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">asc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>有的同学会认为，单独给 status 建立一个索引就可以了。</p><p>但是更好的方式给 status 和 create_time 列建立一个联合索引，因为这样可以避免 MySQL 数据库发生文件排序。</p><p>因为在查询时，如果只用到 status 的索引，但是这条语句还要对 create_time 排序，这时就要用文件排序 filesort，也就是在 SQL 执行计划中，Extra 列会出现 Using filesort。</p><p>所以，要利用索引的有序性，在 status 和 create_time 列建立联合索引，这样根据 status 筛选后的数据就是按照 create_time 排好序的，避免在文件排序，提高了查询效率。</p><h2 id="索引的缺点、选用、是否使用" tabindex="-1"><a class="header-anchor" href="#索引的缺点、选用、是否使用"><span>索引的缺点、选用、是否使用</span></a></h2><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p>索引最大的好处是提高查询速度，但是索引也是有缺点的，比如：</p><ul><li><p><em>占用较大的磁盘物理空间</em>。数量越大，占用空间越大；</p><p>（索引特别大，往往会超出内存大小，每次B+树的查询都是进行的磁盘IO）</p></li><li><p><em>创建索引和维护索引要耗费时间</em>。这种时间随着数据量的增加而增大；</p></li><li><p><em>降低表的增删改的效率</em>。因为每次增删改索引，B+ 树为了维护索引有序性，都需要进行动态维护。</p></li></ul><p>所以，索引不是万能钥匙，它也是根据场景来使用的。</p><h3 id="是否使用" tabindex="-1"><a class="header-anchor" href="#是否使用"><span>是否使用</span></a></h3><ul><li><p>什么时候适用索引？</p><ul><li><p>字段有<strong>唯一性</strong>限制的，比如商品编码；</p></li><li><p>经常用于 <code>WHERE</code> 查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</p></li><li><p>经常用于<strong>排序</strong> <code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。</p></li></ul></li><li><p>什么时候不需要创建索引？</p><ul><li><p><code>WHERE</code> 条件，<code>GROUP BY</code>，<code>ORDER BY</code> 里用不到的字段。索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</p></li><li><p>字段中存在大量<strong>重复数据</strong>，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。</p></li><li><p>表<strong>数据太少</strong>的时候，不需要创建索引；</p></li><li><p><strong>经常更新</strong>的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</p></li></ul></li></ul><h2 id="有什么优化索引的方法" tabindex="-1"><a class="header-anchor" href="#有什么优化索引的方法"><span>有什么优化索引的方法？</span></a></h2><p>这里说一下几种常见优化索引的方法：</p><ul><li>前缀索引优化；</li><li>覆盖索引优化；</li><li>主键索引最好是自增的；</li><li>防止索引失效；</li></ul><h3 id="前缀索引优化" tabindex="-1"><a class="header-anchor" href="#前缀索引优化"><span>前缀索引优化</span></a></h3><p>前缀索引顾名思义就是使用某个字段中字符串的前几个字符建立索引，那我们为什么需要使用前缀来建立索引呢？</p><p>使用前缀索引是为了<strong>减小索引字段大小</strong>，可以增加一个索引页中存储的索引值，有效提高索引的查询速度。在一些大字符串的字段作为索引时，使用前缀索引可以帮助我们减小索引项的大小。</p><p>不过，前缀索引有一定的局限性，例如：</p><ul><li>order by 就无法使用前缀索引；</li><li>无法把前缀索引用作覆盖索引；</li></ul><h3 id="覆盖索引优化" tabindex="-1"><a class="header-anchor" href="#覆盖索引优化"><span>覆盖索引优化</span></a></h3><p>覆盖索引是指 SQL 中 query 的所有字段，在索引 B+Tree 的叶子节点上都能找得到的那些索引，从二级索引中查询得到记录，而不需要通过聚簇索引查询获得，可以<strong>避免回表</strong>的操作。</p><p>假设我们只需要查询商品的名称、价格，有什么方式可以避免回表呢？</p><p>我们可以建立一个联合索引，即「商品ID、名称、价格」作为一个联合索引。如果索引中存在这些数据，查询将不会再次检索主键索引，从而避免回表。</p><p>所以，使用覆盖索引的好处就是，不需要查询出包含整行记录的所有信息，也就减少了大量的 I/O 操作。</p><h3 id="主键索引最好是自增的" tabindex="-1"><a class="header-anchor" href="#主键索引最好是自增的"><span>主键索引最好是自增的</span></a></h3><p>我们在建表的时候，都会默认将主键索引设置为自增的，具体为什么要这样做呢？又什么好处？</p><p>InnoDB 创建主键索引默认为聚簇索引，数据被存放在了 B+Tree 的叶子节点上。也就是说，同一个叶子节点内的各个数据是按主键顺序存放的，因此，每当有一条新的数据插入时，数据库会根据主键将其插入到对应的叶子节点中。</p><ul><li><p>如果使用自增主键：</p><p>那么每次插入的新数据就会按顺序添加到当前索引节点的位置，不需要移动已有的数据，当页面写满，就会自动开辟一个新页面。因为每次插入一条新记录，都是<strong>追加操作，不需要重新移动数据</strong>，因此这种插入数据的方法效率非常高。</p></li><li><p>如果使用非自增主键：</p><p>由于每次插入主键的索引值都是随机的，因此每次插入新的数据时，就可能会插入到现有数据页中间的某个位置，这将不得不<strong>移动其它数据</strong>来满足新数据的插入，甚至需要从一个页面复制数据到另外一个页面，我们通常将这种情况称为<strong>页分裂</strong>。<strong>页分裂还有可能会造成大量的内存碎片，导致索引结构不紧凑，从而影响查询效率</strong>。</p></li></ul><p>举个例子，假设某个数据页中的数据是1、3、5、9，且数据页满了，现在准备插入一个数据7，则需要把数据页分割为两个数据页：</p><p><img src="'+v+'" alt="img" loading="lazy"></p><p>出现页分裂时，需要将一个页的记录移动到另外一个页，性能会受到影响，同时页空间的利用率下降，造成存储空间的浪费。</p><p>而如果记录是顺序插入的，例如插入数据11，则只需开辟新的数据页，也就不会发生页分裂：</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>因此，在使用 InnoDB 存储引擎时，如果没有特别的业务需求，建议使用自增字段作为主键。</p><p>另外，主键字段的长度不要太大，因为<strong>主键字段长度越小，意味着二级索引的叶子节点越小（二级索引的叶子节点存放的数据是主键值），这样二级索引占用的空间也就越小</strong>。</p><h3 id="索引最好设置为-not-null" tabindex="-1"><a class="header-anchor" href="#索引最好设置为-not-null"><span>索引最好设置为 NOT NULL</span></a></h3><p>为了更好的利用索引，索引列要设置为 NOT NULL 约束。有两个原因：</p><ul><li><p>第一原因：</p><p>索引列存在 NULL 就会导致优化器在做索引选择的时候更加复杂，更加难以优化。因为可为 <strong>NULL 的列会使索引、索引统计和值比较都更复杂</strong>，比如进行索引统计时，count 会省略值为NULL 的行。</p></li><li><p>第二个原因：</p><p>NULL 值是一个没意义的值，但是它会<strong>占用物理空间</strong>，所以会带来的存储空间的问题，因为 InnoDB 存储记录的时候，如果表中存在允许为 NULL 的字段，那么<a href="https://xiaolincoding.com/mysql/base/row_format.html#innodb-%E8%A1%8C%E6%A0%BC%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noopener noreferrer">行格式</a>中至少会用 1 字节空间存储 NULL 值列表，如下图的紫色部分：</p><p><img src="'+E+'" alt="img" loading="lazy"></p></li></ul><h3 id="防止索引失效-未" tabindex="-1"><a class="header-anchor" href="#防止索引失效-未"><span>防止索引失效 (未)</span></a></h3><p>用上了索引并不意味着查询的时候会使用到索引，所以我们心里要清楚有哪些情况会导致索引失效，从而避免写出索引失效的查询语句，否则这样的查询效率是很低的。</p><p>我之前写过索引失效的文章，想详细了解的可以去看这篇文章：<a href="https://mp.weixin.qq.com/s/lEx6iRRP3MbwJ82Xwp675w" target="_blank" rel="noopener noreferrer">谁还没碰过索引失效呢?</a></p><p>这里简单说一下，发生索引失效的情况：</p><ul><li>当我们使用左或者左右模糊匹配的时候，也就是 <code>like %xx</code> 或者 <code>like %xx%</code>这两种方式都会造成索引失效；</li><li>当我们在查询条件中对索引列做了计算、函数、类型转换操作，这些情况下都会造成索引失效；</li><li>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</li><li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li></ul><p>我上面说的是常见的索引失效场景，实际过程中，可能会出现其他的索引失效场景，这时我们就需要查看执行计划，通过执行计划显示的数据判断查询语句是否使用了索引。</p><p>如下图，就是一个没有使用索引，并且是一个全表扫描的查询语句。</p><p><img src="'+_+'" alt="img" loading="lazy"></p><p>对于执行计划，参数有：</p><ul><li>possible_keys 字段表示可能用到的索引；</li><li>key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；</li><li>key_len 表示索引的长度；</li><li>rows 表示扫描的数据行数。</li><li>type 表示数据扫描类型，我们需要重点看这个。</li></ul><p>type 字段就是描述了找到所需数据时使用的扫描方式是什么，常见扫描类型的<strong>执行效率从低到高的顺序为</strong>：</p><ul><li>All（全表扫描）；</li><li>index（全索引扫描）；</li><li>range（索引范围扫描）；</li><li>ref（非唯一索引扫描）；</li><li>eq_ref（唯一索引扫描）；</li><li>const（结果只有一条的主键或唯一索引扫描）。</li></ul><p>在这些情况里，all 是最坏的情况，因为采用了全表扫描的方式。index 和 all 差不多，只不过 index 对索引表进行全扫描，这样做的好处是不再需要对数据进行排序，但是开销依然很大。所以，要尽量避免全表扫描和全索引扫描。</p><p>range 表示采用了索引范围扫描，一般在 where 子句中使用 &lt; 、&gt;、in、between 等关键词，只检索给定范围的行，属于范围查找。<strong>从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式</strong>。</p><p>ref 类型表示采用了非唯一索引，或者是唯一索引的非唯一性前缀，返回数据返回可能是多条。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。</p><p>eq_ref 类型是使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。</p><p>const 类型表示使用了主键或者唯一索引与常量值进行比较，比如 select name from product where id=1。</p><p>需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，<strong>const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中</strong>。</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>除了关注 type，我们也要关注 extra 显示的结果。</p><p>这里说几个重要的参考指标：</p><ul><li>Using filesort ：当查询语句中包含 group by 操作，而且无法利用索引完成排序操作的时候， 这时不得不选择相应的排序算法进行，甚至可能会通过文件排序，效率是很低的，所以要避免这种问题的出现。</li><li>Using temporary：使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表，常见于排序 order by 和分组查询 group by。效率低，要避免这种问题的出现。</li><li>Using index：所需数据只需在索引即可全部获得，不须要再到表中取数据，也就是使用了覆盖索引，避免了回表操作，效率不错。</li></ul></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>这次主要介绍了索引的原理、分类和使用。我把重点总结在了下面这个表格</p><p><img src="'+D+'" alt="img" loading="lazy"></p><p>完！</p>',244)]))}const T=i(F,[["render",x],["__file","01. 索引常见面试题.html.vue"]]),w=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/03.%20%E5%9B%BE%E8%A7%A3MySQL/02.%20%E7%B4%A2%E5%BC%95/01.%20%E7%B4%A2%E5%BC%95%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"索引常见面试题","lang":"zh-CN","frontmatter":{"description":"索引常见面试题 面试中，MySQL 索引相关的问题基本都是一系列问题，都是先从索引的基本原理，再到索引的使用场景，比如： 索引底层使用了什么数据结构和算法？ 为什么 MySQL InnoDB 选择 B+tree 作为索引的数据结构？ 什么时候适用索引？ 什么时候不需要创建索引？ 什么情况下索引会失效？ 有什么优化索引的方法？ ..... 今天就带大家，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/03.%20%E5%9B%BE%E8%A7%A3MySQL/02.%20%E7%B4%A2%E5%BC%95/01.%20%E7%B4%A2%E5%BC%95%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"索引常见面试题"}],["meta",{"property":"og:description","content":"索引常见面试题 面试中，MySQL 索引相关的问题基本都是一系列问题，都是先从索引的基本原理，再到索引的使用场景，比如： 索引底层使用了什么数据结构和算法？ 为什么 MySQL InnoDB 选择 B+tree 作为索引的数据结构？ 什么时候适用索引？ 什么时候不需要创建索引？ 什么情况下索引会失效？ 有什么优化索引的方法？ ..... 今天就带大家，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.xiaolincoding.com//mysql/other/1623727651911_20170928110355446.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引常见面试题\\",\\"image\\":[\\"https://cdn.xiaolincoding.com//mysql/other/1623727651911_20170928110355446.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"索引常见面试题","slug":"索引常见面试题","link":"#索引常见面试题","children":[{"level":2,"title":"什么是索引？","slug":"什么是索引","link":"#什么是索引","children":[]},{"level":2,"title":"索引分类 - 四种分类方法","slug":"索引分类-四种分类方法","link":"#索引分类-四种分类方法","children":[]},{"level":2,"title":"索引分类 (1) 按数据结构分类","slug":"索引分类-1-按数据结构分类","link":"#索引分类-1-按数据结构分类","children":[{"level":3,"title":"存储引擎与索引类型","slug":"存储引擎与索引类型","link":"#存储引擎与索引类型","children":[]},{"level":3,"title":"(1) B+Tree 索引","slug":"_1-b-tree-索引","link":"#_1-b-tree-索引","children":[{"level":4,"title":"主键查询","slug":"主键查询","link":"#主键查询","children":[]},{"level":4,"title":"二级索引查询","slug":"二级索引查询","link":"#二级索引查询","children":[]},{"level":4,"title":"B+Tree 索引优点","slug":"b-tree-索引优点","link":"#b-tree-索引优点","children":[]}]},{"level":3,"title":"(2) HASH 索引","slug":"_2-hash-索引","link":"#_2-hash-索引","children":[]},{"level":3,"title":"(3) Full-Text 索引","slug":"_3-full-text-索引","link":"#_3-full-text-索引","children":[]}]},{"level":2,"title":"索引分类 (2) 按物理存储分类","slug":"索引分类-2-按物理存储分类","link":"#索引分类-2-按物理存储分类","children":[{"level":3,"title":"(1) 聚簇索引（主键索引）","slug":"_1-聚簇索引-主键索引","link":"#_1-聚簇索引-主键索引","children":[]},{"level":3,"title":"(2) 二级索引（辅助索引、非聚簇索引、Secondary Index）","slug":"_2-二级索引-辅助索引、非聚簇索引、secondary-index","link":"#_2-二级索引-辅助索引、非聚簇索引、secondary-index","children":[]}]},{"level":2,"title":"索引分类 (3) 按字段特性分类","slug":"索引分类-3-按字段特性分类","link":"#索引分类-3-按字段特性分类","children":[{"level":3,"title":"(1) 主键索引","slug":"_1-主键索引","link":"#_1-主键索引","children":[]},{"level":3,"title":"(2) 唯一索引","slug":"_2-唯一索引","link":"#_2-唯一索引","children":[]},{"level":3,"title":"(3) 普通索引","slug":"_3-普通索引","link":"#_3-普通索引","children":[]},{"level":3,"title":"(4) 前缀索引","slug":"_4-前缀索引","link":"#_4-前缀索引","children":[]}]},{"level":2,"title":"索引分类 (4) 按字段个数分类","slug":"索引分类-4-按字段个数分类","link":"#索引分类-4-按字段个数分类","children":[{"level":3,"title":"(1) 单列索引","slug":"_1-单列索引","link":"#_1-单列索引","children":[]},{"level":3,"title":"(2) 联合索引（复合索引）","slug":"_2-联合索引-复合索引","link":"#_2-联合索引-复合索引","children":[{"level":4,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":4,"title":"查询和排序规则、最左匹配原则","slug":"查询和排序规则、最左匹配原则","link":"#查询和排序规则、最左匹配原则","children":[]},{"level":4,"title":"联合索引范围查询 (未)","slug":"联合索引范围查询-未","link":"#联合索引范围查询-未","children":[{"level":5,"title":"例子1","slug":"例子1","link":"#例子1","children":[]},{"level":5,"title":"例子2","slug":"例子2","link":"#例子2","children":[]},{"level":5,"title":"例子3","slug":"例子3","link":"#例子3","children":[]},{"level":5,"title":"例子4","slug":"例子4","link":"#例子4","children":[]}]},{"level":4,"title":"索引下推 (未)","slug":"索引下推-未","link":"#索引下推-未","children":[]},{"level":4,"title":"索引区分度 (未)","slug":"索引区分度-未","link":"#索引区分度-未","children":[]},{"level":4,"title":"联合索引进行排序 (未)","slug":"联合索引进行排序-未","link":"#联合索引进行排序-未","children":[]}]}]},{"level":2,"title":"索引的缺点、选用、是否使用","slug":"索引的缺点、选用、是否使用","link":"#索引的缺点、选用、是否使用","children":[{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"是否使用","slug":"是否使用","link":"#是否使用","children":[]}]},{"level":2,"title":"有什么优化索引的方法？","slug":"有什么优化索引的方法","link":"#有什么优化索引的方法","children":[{"level":3,"title":"前缀索引优化","slug":"前缀索引优化","link":"#前缀索引优化","children":[]},{"level":3,"title":"覆盖索引优化","slug":"覆盖索引优化","link":"#覆盖索引优化","children":[]},{"level":3,"title":"主键索引最好是自增的","slug":"主键索引最好是自增的","link":"#主键索引最好是自增的","children":[]},{"level":3,"title":"索引最好设置为 NOT NULL","slug":"索引最好设置为-not-null","link":"#索引最好设置为-not-null","children":[]},{"level":3,"title":"防止索引失效 (未)","slug":"防止索引失效-未","link":"#防止索引失效-未","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{},"readingTime":{"minutes":38.27,"words":11482},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/02. 索引/01. 索引常见面试题.md","excerpt":"\\n<p>面试中，MySQL 索引相关的问题基本都是一系列问题，都是先从索引的基本原理，再到索引的使用场景，比如：</p>\\n<ul>\\n<li>索引底层使用了什么数据结构和算法？</li>\\n<li>为什么 MySQL InnoDB  选择 B+tree 作为索引的数据结构？</li>\\n<li>什么时候适用索引？</li>\\n<li>什么时候不需要创建索引？</li>\\n<li>什么情况下索引会失效？</li>\\n<li>有什么优化索引的方法？</li>\\n<li>.....</li>\\n</ul>\\n<p>今天就带大家，夯实 MySQL 索引的知识点。</p>\\n<p></p>\\n<h2>什么是索引？</h2>\\n\\n","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/02. 索引/01. 索引常见面试题.md","value":{"title":"01. 索引常见面试题","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/02. 索引/01. 索引常见面试题.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{T as comp,w as data};
