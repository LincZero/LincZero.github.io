import{_ as s,c as a,e,o as p}from"./app-D2u2UykU.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="x宏" tabindex="-1"><a class="header-anchor" href="#x宏"><span>X宏</span></a></h1><p>参考：http://notes.tanchuanqi.com/language/cpp/cpp_micro.html</p><h2 id="先复习一下宏" tabindex="-1"><a class="header-anchor" href="#先复习一下宏"><span>先复习一下宏</span></a></h2><h3 id="普通宏-实现文本替换" tabindex="-1"><a class="header-anchor" href="#普通宏-实现文本替换"><span>普通宏，实现文本替换</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.1415926</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="宏做函数" tabindex="-1"><a class="header-anchor" href="#宏做函数"><span>宏做函数</span></a></h3><p>宏可以像函数一样被定义，例如:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#define MIN(x,y) ((x)&lt;(y)?(x):(y))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在实际使用时，只有当写上MIN()，必须加括号，MIN才会被作为宏展开，否则不做任何处理。 编译器 (预处理器) 对宏只进行简单的文本替换，而 <strong>不会进行语法检查</strong> ，所以更多的检查性工作得你自己来做。</p><h4 id="为什么要用宏来做函数" tabindex="-1"><a class="header-anchor" href="#为什么要用宏来做函数"><span>为什么要用宏来做函数？</span></a></h4><ol><li><strong>鸭子原则</strong>：比如MIN宏适用于任何实现了operator&lt;的类型，包括自定义类型（这点与template类似）；</li><li>效率最高：虽然使用inline提示符也将函数或模板定义为内联的，但这只是一种提示而已，到底编译器有没有优化还依赖于编译器的实现，而使用宏函数则是完全由代码本身控制。</li></ol><h4 id="_2个宏编程易犯的错误" tabindex="-1"><a class="header-anchor" href="#_2个宏编程易犯的错误"><span>2个宏编程易犯的错误</span></a></h4><p>程序员对宏定义的使用要非常小心，特别要注意两个问题：</p><ul><li><p>谨慎地将宏定义中的 <strong>“参数”</strong> 和 <strong>整个宏</strong> 都用括弧括起来。</p><p>所以，严格地讲，下述解答:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> 	</span><span class="token comment">// 零分</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;=</span> B <span class="token operator">?</span> A <span class="token operator">:</span> B <span class="token punctuation">)</span> 		</span><span class="token comment">// 零分</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MIN</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> 	</span><span class="token comment">// 正确写法</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>防止宏的副作用</strong> :</p><p>宏定义 <code>#define MIN(A,B) ((A) &lt;= (B) ? (A) : (B))</code> 对 <code>MIN(*p++, b)</code> 的作用结果是： <code>((*p++) &lt;= (b) ? (*p++) : (*p++))</code> 这个表达式会产生副作用，指针p会作三次++自增操作。 （因为， <strong>宏的本质是文本替换</strong> ） 除此之外，另一个应该判0分的解答是： <code>#define MIN(A,B) ((A) &lt;= (B) ? (A) : (B));</code> 这个解答在宏定义的后面加”;”，显示编写者对宏的概念模糊不清，只能被无情地判0分并被面试官淘汰。</p></li></ul><h4 id="后面加不加分号" tabindex="-1"><a class="header-anchor" href="#后面加不加分号"><span>后面加不加分号</span></a></h4><p>宏定义一般都不在最后加分号，调用的时候才加分号。 这样处理之后就要求使用者将宏视为一条普通语句而不是一个宏，从而需要在后面加上;号。</p><h4 id="特殊符号-、-字符串化运算符" tabindex="-1"><a class="header-anchor" href="#特殊符号-、-字符串化运算符"><span>特殊符号：#、## (字符串化运算符)</span></a></h4><ol><li><p># 符号把一个符号直接转换为字符串，例如:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">STRING</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> #x<span class="token punctuation">;</span>						</span><span class="token comment">// 宏定义</span></span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token function">STRING</span><span class="token punctuation">(</span> test_string <span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 宏使用</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;test_string&quot;</span>				<span class="token comment">// 宏展开。\`#\`是字符串化运算符，会把其后的符号直接加上双引号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>##</code> 符号会连接两个符号，从而产生新的符号(词法层次)，例如:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SIGN</span><span class="token expression"><span class="token punctuation">(</span> x <span class="token punctuation">)</span> INT_</span><span class="token punctuation">##</span><span class="token expression">x 	</span><span class="token comment">// 宏定义</span></span>
<span class="token keyword">int</span> <span class="token function">SIGN</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 宏使用</span>
<span class="token keyword">int</span> INT_1<span class="token punctuation">;</span>					<span class="token comment">// 宏展开</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>有资料说可以用#@把一个宏参数变成字符（也就是给参数加上单引号，相对应于#的双引号） <code>#@a = &#39;a&#39;</code>。 但是，在gcc上的测试显示不支持#@，测试的结果是”“@，相当于对空添加双引号再加上@的结果。</p></li></ol><h3 id="do-while-0-技巧" tabindex="-1"><a class="header-anchor" href="#do-while-0-技巧"><span>do{…}while(0) 技巧</span></a></h3><p>这个技巧非常漂亮！</p><p>使用do-while(0)的宏定义是为了防止if-else( if)的语法错误,这一般是库作者来保证代码的健壮性所使用的技巧。 而且，还 <strong>可以使得宏中使用到的变量都成为 局部变量</strong> ，不造成任何副作用！</p><h3 id="使用宏完成注册操作" tabindex="-1"><a class="header-anchor" href="#使用宏完成注册操作"><span>使用宏完成注册操作</span></a></h3><h3 id="常见用途" tabindex="-1"><a class="header-anchor" href="#常见用途"><span>常见用途</span></a></h3><ul><li><p>宏常量：但是如果仅仅是定义常量，那么应该果断的<strong>使用const而不是使用宏</strong>。</p></li><li><p>头文件的重复包含：这个用途几乎不用说了，头文件都需要用宏包含起来以免重复包含。</p></li><li><p>条件编译：生成一个程序的不同版本、或者对debug和release使用不同的代码时非常常见:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>OS_HPUX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">defined</span><span class="token punctuation">(</span>HPUX_11_11<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>HPUX_11_23<span class="token punctuation">)</span></span></span>
<span class="token comment">// for HP-UX 11.11 and 11.23</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>OS_HPUX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>HPUX_11_31</span></span>
<span class="token comment">// for HP-UX 11.31</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>OS_AIX<span class="token punctuation">)</span></span></span>
<span class="token comment">// for AIX</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用_DEBUG进行一个调试工作:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Debug information\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>宏函数：避免函数调用，提高程序效率。宏函数<strong>基本上可以被模板和内联函数所取代</strong>，但是还是有一些简单的函数会使用宏，而且宏函数可以确保一定是内联的。</p></li><li><p>引用编译期数据：这种情况只能使用宏来解决了:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SHOW_CODE_LOCATION</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token constant">__FILE__</span><span class="token operator">&lt;&lt;</span></span><span class="token char">&#39;:&#39;</span><span class="token expression"><span class="token operator">&lt;&lt;</span><span class="token constant">__LINE__</span><span class="token operator">&lt;&lt;</span></span><span class="token char">&#39;\\n&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>当然，最NB的功能肯定是自动生成代码了！</p></li></ul><h2 id="x宏-1" tabindex="-1"><a class="header-anchor" href="#x宏-1"><span>X宏</span></a></h2><h3 id="语法基础" tabindex="-1"><a class="header-anchor" href="#语法基础"><span>语法基础</span></a></h3><p><code>X-Macro</code> 只是一种宏的使用技巧，<strong>并不是什么特殊的语法</strong>，但却在实际应用中十分高效简洁，且拓展性非常强；</p><p>首先我们介绍一下<code>#define</code>与<code>#undef</code>的用法：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   a</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   b</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想"><span>核心思想</span></a></h3><p>参考：https://www.51cto.com/article/719151.html</p><h4 id="灵活的应用-define与-undef" tabindex="-1"><a class="header-anchor" href="#灵活的应用-define与-undef"><span>灵活的应用#define与#undef</span></a></h4><p>X-MACRO宏技术的核心在于灵活的应用#define与#undef，对于玩C语言的伙计#define是再熟悉不过了，但#undef却鲜有人在实际的开发过程中熟练使用，基本上都是#define走天下。</p><p>那#define的作用域是怎样的呢？其作用范围都是从宏定义处到文件结束，不管函数内外均可以随意使用。</p><p>那一不小心使用#define重复定义相同的宏又会怎样呢?对于大部分编译器会报重复定义警告，但也有小部分编译器采用最近的宏定义直接通过，所以稍不留神就把bug引入到了代码中。</p><p>其实对于C语言编程素养良好的工程师们多会使用#undef来限制宏定义的作用范围，即取消宏定义，以免造成宏泛滥。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HELLO_BUG</span>   <span class="token expression"><span class="token number">100</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello bug %d\\r\\n&quot;</span><span class="token punctuation">,</span>HELLO_BUG<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">HELLO_BUG</span></span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello bug %d\\r\\n&quot;</span><span class="token punctuation">,</span>HELLO_BUG<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译报错，提示第二条打印语句HELLO_BUG宏未定义</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="x-macro" tabindex="-1"><a class="header-anchor" href="#x-macro"><span>X-MACRO</span></a></h4><p>X-MACRO平时我们也叫&quot;X宏&quot;，其实在bug菌之前的文章&lt;三种管理C程序中标志位的方法，最后一种比较秀~&gt;有一个简单的提及，今天单独拧出来简化讲讲。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   a</span></span>
<span class="token comment">//do something</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   b</span></span>
<span class="token comment">//do something</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上是X-MACRO的比较精华的几句，通过#define与#undef的配合，可以使用相同的宏名称<strong>选择性的替换出我们想要的结构</strong>，从而达到简化代码的目的。同时我们也非常清楚，由于宏主要是靠编译器来处理，所以X-MACRO技巧也主要是在编译阶段来维护代码。</p><h4 id="原理实例" tabindex="-1"><a class="header-anchor" href="#原理实例"><span>原理实例</span></a></h4><p>下面来一波操作看看效果吧</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/*************消息定义**********/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_TABLE</span>                  <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG1<span class="token punctuation">,</span> MsgProc1<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG2<span class="token punctuation">,</span> MsgProc2<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG3<span class="token punctuation">,</span> MsgProc3<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>
</span>
<span class="token comment">/*************消息枚举定义**********/</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a<span class="token punctuation">,</span></span></span>
    MSG_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
    MSG_MAX  
<span class="token punctuation">}</span> MSG_TYPE<span class="token punctuation">;</span>

<span class="token comment">/*************消息处理定义**********/</span>
<span class="token keyword">const</span> Proc Proc_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> b<span class="token punctuation">,</span></span></span>
    MSG_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS  </span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*************实际使用**********/</span>
<span class="token keyword">void</span> <span class="token function">sMessageProc</span><span class="token punctuation">(</span>MSG_TYPE msgtype<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>Proc_table<span class="token punctuation">[</span>msgtype<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然X-MACRO还可以扩展多个参数来供序列化替换，同时X-MACRO宏定义也可以更加的复杂。</p><p>比如使用 <code>#define X_MACROS(a, b) #a</code> 宏来处理为字符串等。</p><p>详细解释一下这里的宏展开：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 1. 该行生效：#define X_MACROS(a, b) a,</span>
<span class="token comment">// 2. 先使用 MSG_TABLE 宏替换第一遍：</span>
<span class="token punctuation">{</span>
    <span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG1<span class="token punctuation">,</span> MsgProc1<span class="token punctuation">)</span>
    <span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG2<span class="token punctuation">,</span> MsgProc2<span class="token punctuation">)</span>
    <span class="token function">X_MACROS</span><span class="token punctuation">(</span>USER_MSG3<span class="token punctuation">,</span> MsgProc3<span class="token punctuation">)</span>
    MSG_MAX 
<span class="token punctuation">}</span>
<span class="token comment">// 3. 再使用 X_MACROS 宏替换第二遍</span>
<span class="token punctuation">{</span>
    USER_MSG1
    USER_MSG2
    USER_MSG3
    MSG_MAX 
<span class="token punctuation">}</span>
<span class="token comment">// 4. 最后卸载该宏：#undef X_MACROS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h3><h4 id="define-undef" tabindex="-1"><a class="header-anchor" href="#define-undef"><span>define &amp; undef</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   a</span></span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">X_MACRO</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>
    
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACRO</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>   b</span></span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">X_MACRO</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACRO</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#undef</code>可以取消定义宏，然后再通过<code>#define</code>重新定义宏，此时得到的<code>x</code>，<code>y</code>的值分别是<code>10</code>和<code>100</code></p><h4 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h4><p><code>X-Macro</code>其实就是通过<code>#define</code>与<code>#undef</code>实现的一种宏定义的技巧；</p><p>当我们需要一个命令列表时可以这样定义：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 定义宏列表</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MACROS_TABLE</span>                    <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>CMD_LED_ON<span class="token punctuation">,</span>  led_on<span class="token punctuation">)</span>       </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>CMD_LED_OFF<span class="token punctuation">,</span> led_off<span class="token punctuation">)</span>      </span><span class="token punctuation">\\</span>
</span>
<span class="token comment">// 当我们需要一个命令列表时</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
    CMD_MAX
<span class="token punctuation">}</span> cmd_e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>宏展开后是这样的形式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
    CMD_LED_ON<span class="token punctuation">,</span>
    CMD_LED_OFF<span class="token punctuation">,</span>
    CMD_MAX
<span class="token punctuation">}</span> cmd_e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>如果我们需要一个命令的字符串列表用作 log 打印时也可以定义这样的列表：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cmd_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> #a<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>宏展开后是这样的形式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> func func_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    “CMD_LED_ON”，
    “CMD_LED_OFF”，
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h4><p>当我们需要一个函数列表时可以这样操作：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> func func_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> b<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>宏展开后是这样的形式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> func func_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">{</span>
    led_on<span class="token punctuation">,</span>
    led_off<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于函数列表与命令列表都是根据<code>MACROS_TABLE</code>这个宏拓展出来的，是一一对应的，所以我们可以直接使用索引的方式来调用函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_handle</span><span class="token punctuation">(</span>cmd_e cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">&lt;</span> CMD_MAX<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        func_table<span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>cmd_str<span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>X-MACRO</code>对于此类的命令消息处理十分高效简洁，非常实用，且拓展性非常强。</p><p><strong>整体代码如下：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MACROS_TABLE</span>                    <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>CMD_LED_ON<span class="token punctuation">,</span>  led_on<span class="token punctuation">)</span>       </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">X_MACROS</span><span class="token punctuation">(</span>CMD_LED_OFF<span class="token punctuation">,</span> led_off<span class="token punctuation">)</span>      </span><span class="token punctuation">\\</span>
</span>
<span class="token comment">/*定义命令列表*/</span>
<span class="token keyword">typedef</span> <span class="token keyword">enum</span>
<span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> a<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
    CMD_MAX
<span class="token punctuation">}</span>cmd_e<span class="token punctuation">;</span>


<span class="token comment">/*定义字符串列表用作Log打印*/</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cmd_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> #a<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">led_on</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s \\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">led_off</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s \\r\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*定义函数列表*/</span>
<span class="token keyword">const</span> func func_table<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> 
<span class="token punctuation">{</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">X_MACROS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> b<span class="token punctuation">,</span></span></span>
    MACROS_TABLE
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">X_MACROS</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">/*直接通过索引的方式调用函数*/</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cmd_handle</span><span class="token punctuation">(</span>cmd_e cmd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">&lt;</span> CMD_MAX<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        func_table<span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>cmd_str<span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">cmd_handle</span><span class="token punctuation">(</span>CMD_LED_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cmd_handle</span><span class="token punctuation">(</span>CMD_LED_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73)]))}const l=s(t,[["render",c],["__file","X宏.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E9%A2%84%E5%A4%84%E7%90%86/X%E5%AE%8F.html","title":"X宏","lang":"zh-CN","frontmatter":{"description":"X宏 参考：http://notes.tanchuanqi.com/language/cpp/cpp_micro.html 先复习一下宏 普通宏，实现文本替换 宏做函数 宏可以像函数一样被定义，例如: 但是在实际使用时，只有当写上MIN()，必须加括号，MIN才会被作为宏展开，否则不做任何处理。 编译器 (预处理器) 对宏只进行简单的文本替换，而 不会...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E9%A2%84%E5%A4%84%E7%90%86/X%E5%AE%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"X宏"}],["meta",{"property":"og:description","content":"X宏 参考：http://notes.tanchuanqi.com/language/cpp/cpp_micro.html 先复习一下宏 普通宏，实现文本替换 宏做函数 宏可以像函数一样被定义，例如: 但是在实际使用时，只有当写上MIN()，必须加括号，MIN才会被作为宏展开，否则不做任何处理。 编译器 (预处理器) 对宏只进行简单的文本替换，而 不会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"X宏\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"X宏","slug":"x宏","link":"#x宏","children":[{"level":2,"title":"先复习一下宏","slug":"先复习一下宏","link":"#先复习一下宏","children":[{"level":3,"title":"普通宏，实现文本替换","slug":"普通宏-实现文本替换","link":"#普通宏-实现文本替换","children":[]},{"level":3,"title":"宏做函数","slug":"宏做函数","link":"#宏做函数","children":[{"level":4,"title":"为什么要用宏来做函数？","slug":"为什么要用宏来做函数","link":"#为什么要用宏来做函数","children":[]},{"level":4,"title":"2个宏编程易犯的错误","slug":"_2个宏编程易犯的错误","link":"#_2个宏编程易犯的错误","children":[]},{"level":4,"title":"后面加不加分号","slug":"后面加不加分号","link":"#后面加不加分号","children":[]},{"level":4,"title":"特殊符号：#、## (字符串化运算符)","slug":"特殊符号-、-字符串化运算符","link":"#特殊符号-、-字符串化运算符","children":[]}]},{"level":3,"title":"do{…}while(0) 技巧","slug":"do-while-0-技巧","link":"#do-while-0-技巧","children":[]},{"level":3,"title":"使用宏完成注册操作","slug":"使用宏完成注册操作","link":"#使用宏完成注册操作","children":[]},{"level":3,"title":"常见用途","slug":"常见用途","link":"#常见用途","children":[]}]},{"level":2,"title":"X宏","slug":"x宏-1","link":"#x宏-1","children":[{"level":3,"title":"语法基础","slug":"语法基础","link":"#语法基础","children":[]},{"level":3,"title":"核心思想","slug":"核心思想","link":"#核心思想","children":[{"level":4,"title":"灵活的应用#define与#undef","slug":"灵活的应用-define与-undef","link":"#灵活的应用-define与-undef","children":[]},{"level":4,"title":"X-MACRO","slug":"x-macro","link":"#x-macro","children":[]},{"level":4,"title":"原理实例","slug":"原理实例","link":"#原理实例","children":[]}]},{"level":3,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[{"level":4,"title":"define & undef","slug":"define-undef","link":"#define-undef","children":[]},{"level":4,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":4,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.94,"words":2382},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/01. 知识层/预处理/X宏.md","excerpt":"\\n<p>参考：http://notes.tanchuanqi.com/language/cpp/cpp_micro.html</p>\\n<h2>先复习一下宏</h2>\\n<h3>普通宏，实现文本替换</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">PI</span> <span class=\\"token expression\\"><span class=\\"token number\\">3.1415926</span></span></span>\\n</code></pre></div>","autoDesc":true}');export{l as comp,d as data};
