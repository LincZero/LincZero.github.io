import{_ as t,c as e,e as n,o as s}from"./app-CZqDObZ4.js";const i="/assets/little_cow-BEJ0QBLD.png",l="/assets/cartersian_fly-bKOIWZAD.png",r="/assets/2d_cartesian-DgBnukFP.png",p="/assets/2d_cartesian_opengl_directx-D6KoUSx-.png",d="/assets/cow_cartesian-DDZIt-r8.png",c="/assets/3d_cartesian-wEtHKEN9.png",h="/assets/left_hand-Bqo1iUPW.png",o="/assets/right_hand-B2V9_UQ4.png",g="/assets/left_right_hand_rule-Bgi8s_t-.png",_="/assets/cow_left_right-CYXgSjUU.png",m="/assets/cow_left_right_hand-B7mtzftM.png",y="/assets/unity_cartesian-DmGrGnMj.png",k="/assets/unity_camera_cartesian-DlhJvU-i.png",u="/assets/exercise_3-Bv94xJ-g.png",v="/assets/vector-DdLNe_ja.png",x="/assets/point_vector-BsG0TOwV.png",B="/assets/vector_scalar-KGtmF7AT.png",f="/assets/vector_add_sub-4m-uXu95.png",b="/assets/vector_displacement-RnFpAGpp.png",z="/assets/vector_magnitude-B-051It5.png",D="/assets/unit_vector-B12IH1Bz.png",w="/assets/projection-CdFQHkrG.png",U="/assets/dot_sign-jsnJNd3s.png",E="/assets/dot_cos-Cd-6eqwV.png",S="/assets/vector_cross_diagram-BqUI0o8S.png",A="/assets/vector_cross_length-Dc6e-dLI.png",j="/assets/vector_cross-CC301EPy.png",C="/assets/vector_cross_right_hand-D_Yp5J54.png",N="/assets/exercise_cross-5Is2GpNv.png",P="/assets/matrix_mul-kZkHld4X.png",Z="/assets/niuniu-Dy1D9uUz.png",M="/assets/object_space-Dda_g4pY.png",Y="/assets/unity_transform-CR1rNnmB.png",I="/assets/world_space-DlQz3lVy.png",R="/assets/camera_space-DFPA5i6I.png",F="/assets/camera_projection-BQquUB2v.png",G="/assets/camera_frustum-D3Crcf0t.png",L="/assets/projection_frustum-DYzdn1ET.png",O="/assets/projection_matrix0-CjRypIyC.png",Q="/assets/orthographic_frustum-B_tr1xgC.png",H="/assets/orthographic_matrix0-Ba-wFvPY.png",J="/assets/cow_camera-D1yxQC1l.png",T="/assets/projection_matrix1-OAtx5Zjf.png",V="/assets/orthographic_matrix1-DRqEFxOH.png",X="/assets/vertex_conversion-CWXVrE-7.png",q="/assets/space_handness-WKyIZnku.png",K={};function W($,a){return s(),e("div",null,a[0]||(a[0]=[n('<h1 id="《unityshadow》" tabindex="-1"><a class="header-anchor" href="#《unityshadow》"><span>《UnityShadow》</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="学习shader所需的数学基础" tabindex="-1"><a class="header-anchor" href="#学习shader所需的数学基础"><span>学习Shader所需的数学基础</span></a></h1><p><mark>（前5节比较简单，而且是纯数学知识，与Unity无关，我就不做笔记了（只保存彩图）。第6节开始继续做笔记）</mark></p><h2 id="背景-农场游戏" tabindex="-1"><a class="header-anchor" href="#背景-农场游戏"><span>背景：农场游戏</span></a></h2><p>图4.1 我们的农场游戏。我们的主角妞妞是一头长得最壮、好奇心很强的奶牛</p><p><img src="'+i+'" alt="little_cow.png-293.5kB" loading="lazy"></p><h2 id="笛卡尔坐标系" tabindex="-1"><a class="header-anchor" href="#笛卡尔坐标系"><span>笛卡尔坐标系</span></a></h2><p>图4.2 传说，笛卡尔坐标系来源于笛卡尔对天花板上一只苍蝇的运动轨迹的观察。笛卡尔发现，可以使用苍蝇距不同墙面的距离来描述它的当前位置</p><p><img src="'+l+'" alt="cartersian_fly.png-28kB" loading="lazy"></p><h3 id="二维笛卡尔坐标系" tabindex="-1"><a class="header-anchor" href="#二维笛卡尔坐标系"><span>二维笛卡尔坐标系</span></a></h3><p>图4.3 一个二维笛卡尔坐标系</p><p><img src="'+r+'" alt="2d_cartesian.png-36.4kB" loading="lazy"></p><p>图4.4 在屏幕映射时，OpenGL和DirectX使用了不同方向的二维笛卡尔坐标系</p><p><img src="'+p+'" alt="2d_cartesian_opengl_directx.png-33.1kB" loading="lazy"></p><p>图4.4 在屏幕映射时，OpenGL和DirectX使用了不同方向的二维笛卡尔坐标系</p><p><img src="'+d+'" alt="cow_cartesian.png-211.8kB" loading="lazy"></p><h3 id="三维笛卡尔坐标系" tabindex="-1"><a class="header-anchor" href="#三维笛卡尔坐标系"><span>三维笛卡尔坐标系</span></a></h3><p>图4.6 一个三维笛卡尔坐标系</p><p><img src="'+c+'" alt="3d_cartesian.png-22.7kB" loading="lazy"></p><h3 id="左手坐标系和右手坐标系" tabindex="-1"><a class="header-anchor" href="#左手坐标系和右手坐标系"><span>左手坐标系和右手坐标系</span></a></h3><p><mark>个人补充：各类三维软件的坐标系（排列组合四种都齐了）</mark></p><table><thead><tr><th>软件</th><th>向上轴</th><th>向内轴</th><th>坐标系</th></tr></thead><tbody><tr><td>3dsMax</td><td>Z</td><td></td><td>右手</td></tr><tr><td>Blender</td><td>Z</td><td></td><td>右手</td></tr><tr><td>Maya</td><td>Y</td><td></td><td>右手</td></tr><tr><td>Houdini</td><td>Y</td><td></td><td>右手</td></tr><tr><td>C4D</td><td>Y</td><td></td><td>左手</td></tr><tr><td>Unity3D 模型空间和世界空间</td><td>Y</td><td></td><td>左手</td></tr><tr><td>Unity3D 观察空间</td><td>Y</td><td></td><td>右手</td></tr><tr><td>UE4</td><td>Z</td><td></td><td>左手</td></tr><tr><td>Qt屏幕坐标</td><td>-Y</td><td>Z</td><td></td></tr><tr><td>js z-index</td><td></td><td>-Z</td><td></td></tr></tbody></table><p>图4.7 左手坐标系 ，图4.8 右手坐标系</p><p><img src="'+h+'" alt="left_hand.png-40.5kB" loading="lazy"><img src="'+o+'" alt="right_hand.png-40kB" loading="lazy"></p><p>图4.9 用左手法则和右手法则来判断旋转正方向</p><p><img src="'+g+'" alt="left_right_hand_rule.png-75.3kB" loading="lazy"></p><p>图4.10 为了移动到新的位置，妞妞需要首先向某个方向平移1个单位，再向另一个方向平移4个单位，最后再向一个方向旋转60°</p><p><img src="'+_+'" alt="cow_left_right.png-254.3kB" loading="lazy"></p><p>图4.11 左图和右图分别表示了在左手坐标系和右手坐标系中描述妞妞这次运动的结果，得到的数学描述是不同的</p><p><img src="'+m+'" alt="cow_left_right_hand.png-295.8kB" loading="lazy"></p><h3 id="unity使用的坐标系" tabindex="-1"><a class="header-anchor" href="#unity使用的坐标系"><span>Unity使用的坐标系</span></a></h3><p>图4.12 在模型空间和世界空间中，Unity使用的是左手坐标系。图中，球的坐标轴显示了它在模型空间中的3个坐标轴（红色为x轴，绿色是y轴，蓝色是z轴）</p><p><img src="'+y+'" alt="unity_cartesian.png-173.2kB" loading="lazy"></p><p>图4.13 在Unity中，观察空间使用的是右手坐标系，摄像机的前向是z轴的负方向，\u2028z轴越小，物体的深度越大，离摄像机越远</p><p><img src="'+k+'" alt="unity_camera_cartesian.png-25.1kB" loading="lazy"></p><p>图4.14 摄像机的位置是（0, 1, -10），球体的位置是（0, 1, 0）</p><p><img src="'+u+'" alt="exercise_3.png-130.8kB" loading="lazy"></p><h2 id="点和矢量" tabindex="-1"><a class="header-anchor" href="#点和矢量"><span>点和矢量</span></a></h2><h3 id="点和矢量的区别" tabindex="-1"><a class="header-anchor" href="#点和矢量的区别"><span>点和矢量的区别</span></a></h3><p>图4.15 一个二维向量以及它的头和尾</p><p><img src="'+v+'" alt="vector.png-8.9kB" loading="lazy"></p><p>图4.16 点和矢量之间的关系</p><p><img src="'+x+'" alt="point_vector.png-16.1kB" loading="lazy"></p><h3 id="矢量运算" tabindex="-1"><a class="header-anchor" href="#矢量运算"><span>矢量运算</span></a></h3><h4 id="矢量和标量乘法-除法" tabindex="-1"><a class="header-anchor" href="#矢量和标量乘法-除法"><span>矢量和标量乘法/除法</span></a></h4><p>图4.17 二维矢量和一些标量的乘法和除法</p><p><img src="'+B+'" alt="vector_scalar.png-53.9kB" loading="lazy"></p><h4 id="矢量的加法和减法" tabindex="-1"><a class="header-anchor" href="#矢量的加法和减法"><span>矢量的加法和减法</span></a></h4><p>图4.18 二维矢量的加法和减法</p><p><img src="'+f+'" alt="vector_add_sub.png-52.8kB" loading="lazy"></p><p>图4.19 使用矢量减法来计算从点a到点b的位移</p><p><img src="'+b+'" alt="vector_displacement.png-22.5kB" loading="lazy"></p><h4 id="矢量的模" tabindex="-1"><a class="header-anchor" href="#矢量的模"><span>矢量的模</span></a></h4><p>图4.20 矢量的模</p><p><img src="'+z+'" alt="vector_magnitude.png-8.2kB" loading="lazy"></p><h4 id="单位矢量" tabindex="-1"><a class="header-anchor" href="#单位矢量"><span>单位矢量</span></a></h4><p>图4.21 二维空间的单位矢量都会落在单位圆上</p><p><img src="'+D+'" alt="unit_vector.png-30.7kB" loading="lazy"></p><h4 id="矢量的点积" tabindex="-1"><a class="header-anchor" href="#矢量的点积"><span>矢量的点积</span></a></h4><p>图4.22 矢量b在单位矢量a方向上的投影</p><p><img src="'+w+'" alt="projection.png-17.7kB" loading="lazy"></p><p>图4.23 点积的符号</p><p><img src="'+U+'" alt="dot_sign.png-22.9kB" loading="lazy"></p><p>图4.24 两个单位矢量进行点积</p><p><img src="'+E+'" alt="dot_cos.png-14.1kB" loading="lazy"></p><h4 id="矢量的叉乘" tabindex="-1"><a class="header-anchor" href="#矢量的叉乘"><span>矢量的叉乘</span></a></h4><p>图4.25 三维矢量叉积的计算规律。不同颜色的线表示了计算结果矢量中对应颜色的分量的计算路径。以红色为例，即结果矢量的第一个分量，它是从第一个矢量的y分量出发乘以第二个矢量的z分量，再减去第一个矢量的z分量和第二矢量的y分量的乘积</p><p><img src="'+S+'" alt="vector_cross_diagram.png-32.1kB" loading="lazy"></p><p>图4.26 使用矢量a和矢量b构建一个平行四边形</p><p><img src="'+A+'" alt="vector_cross_length.png-13kB" loading="lazy"></p><p>图4.26 使用矢量a和矢量b构建一个平行四边形</p><p><img src="'+j+'" alt="vector_cross.png-27.2kB" loading="lazy"></p><p>图4.28 使用右手法则判断右手坐标系中a×b的方向</p><p><img src="'+C+'" alt="vector_cross_right_hand.png-46.6kB" loading="lazy"></p><h4 id="练习题" tabindex="-1"><a class="header-anchor" href="#练习题"><span>练习题</span></a></h4><p>图4.29 三角形的三个顶点位于xy平面上，人眼位于z轴负方向，向z轴正方向观察</p><p><img src="'+N+'" alt="exercise_cross.png-26.1kB" loading="lazy"></p><h2 id="矩阵" tabindex="-1"><a class="header-anchor" href="#矩阵"><span>矩阵</span></a></h2><h3 id="矩阵的定义" tabindex="-1"><a class="header-anchor" href="#矩阵的定义"><span>矩阵的定义</span></a></h3><h3 id="和矢量联系起来" tabindex="-1"><a class="header-anchor" href="#和矢量联系起来"><span>和矢量联系起来</span></a></h3><h3 id="矩阵运算" tabindex="-1"><a class="header-anchor" href="#矩阵运算"><span>矩阵运算</span></a></h3><p>图4.30 计算c23的过程</p><p><img src="'+P+'" alt="matrix_mul.png-25kB" loading="lazy"></p><h3 id="特殊的矩阵" tabindex="-1"><a class="header-anchor" href="#特殊的矩阵"><span>特殊的矩阵</span></a></h3><h3 id="正交矩阵" tabindex="-1"><a class="header-anchor" href="#正交矩阵"><span>正交矩阵</span></a></h3><h2 id="矩阵的集合意义-变换" tabindex="-1"><a class="header-anchor" href="#矩阵的集合意义-变换"><span>矩阵的集合意义：变换</span></a></h2><h3 id="什么是变换" tabindex="-1"><a class="header-anchor" href="#什么是变换"><span>什么是变换</span></a></h3><h3 id="齐次坐标" tabindex="-1"><a class="header-anchor" href="#齐次坐标"><span>齐次坐标</span></a></h3><h3 id="分解基础变换矩阵" tabindex="-1"><a class="header-anchor" href="#分解基础变换矩阵"><span>分解基础变换矩阵</span></a></h3><h3 id="平移矩阵" tabindex="-1"><a class="header-anchor" href="#平移矩阵"><span>平移矩阵</span></a></h3><h3 id="缩放矩阵" tabindex="-1"><a class="header-anchor" href="#缩放矩阵"><span>缩放矩阵</span></a></h3><h3 id="旋转矩阵" tabindex="-1"><a class="header-anchor" href="#旋转矩阵"><span>旋转矩阵</span></a></h3><h3 id="复合矩阵" tabindex="-1"><a class="header-anchor" href="#复合矩阵"><span>复合矩阵</span></a></h3><h2 id="坐标空间" tabindex="-1"><a class="header-anchor" href="#坐标空间"><span>坐标空间</span></a></h2><h3 id="为什么要使用这么多不同的坐标空间" tabindex="-1"><a class="header-anchor" href="#为什么要使用这么多不同的坐标空间"><span>为什么要使用这么多不同的坐标空间</span></a></h3><p>便于描述，不便于开发</p><h3 id="坐标空间的变换" tabindex="-1"><a class="header-anchor" href="#坐标空间的变换"><span>坐标空间的变换</span></a></h3><h3 id="顶点的坐标空间变换过程" tabindex="-1"><a class="header-anchor" href="#顶点的坐标空间变换过程"><span>顶点的坐标空间变换过程</span></a></h3><p>图4.31 场景中的妞妞（左图）和屏幕上的妞妞（右图）。妞妞想知道，自己的鼻子是如何被画到屏幕上的</p><p><img src="'+Z+'" alt="niuniu.png-273.2kB" loading="lazy"></p><h3 id="_1-模型空间" tabindex="-1"><a class="header-anchor" href="#_1-模型空间"><span>(1) 模型空间</span></a></h3><p>图4.32 在我们的农场游戏中，每个奶牛都有自己的模型坐标系。在模型坐标系中妞妞鼻子的位置是(0, 2, 4, 1)</p><p><img src="'+M+'" alt="object_space.png-84.5kB" loading="lazy"></p><h3 id="_2-世界空间" tabindex="-1"><a class="header-anchor" href="#_2-世界空间"><span>(2) 世界空间</span></a></h3><p>图4.33 Unity的Transform组件可以调节模型的位置.如果Transform有父节点，如图中的“Mesh”，那么Position将是在其父节点（这里是“Cow”）的模型空间中的位置；如果没有父节点，Position就是在世界空间中的位置</p><p><img src="'+Y+'" alt="unity_transform.png-151.9kB" loading="lazy"></p><p>图4.34 农场游戏中的世界空间。世界空间的原点被放置在农场的中心。左下角显示了妞妞在世界空间中所做的变换。我们想要把妞妞的鼻子从模型空间变换到世界空间中</p><p><img src="'+I+'" alt="world_space.png-378.7kB" loading="lazy"></p><h3 id="_3-观察空间" tabindex="-1"><a class="header-anchor" href="#_3-观察空间"><span>(3) 观察空间</span></a></h3><p>图4.35 农场游戏中摄像机的观察空间。观察空间的原点位于摄像机处。注意在观察空间中，摄像机的前向是z轴的负方向（图中只画出了z轴正方向），这是因为Unity在观察空间中使用了右手坐标系。左下角显示了摄像机在世界空间中所做的变换。我们想要把妞妞的鼻子从世界空间变换到观察空间中</p><p><img src="'+R+'" alt="camera_space.png-346.2kB" loading="lazy"></p><h3 id="_4-裁剪空间" tabindex="-1"><a class="header-anchor" href="#_4-裁剪空间"><span>(4) 裁剪空间</span></a></h3><p>图4.36 透视投影（左图）和正交投影（右图）。左下角分别显示了当前摄像机的投影模式和相关属性</p><p><img src="'+F+'" alt="camera_projection.png-299.3kB" loading="lazy"></p><p>图4.37 视锥体和裁剪平面。左图显示了透视投影的视锥体，右图显示了正交投影的视锥体</p><p><img src="'+G+'" alt="camera_frustum.png-301.2kB" loading="lazy"></p><p>图4.38 透视摄像机的参数对透视投影视锥体的影响</p><p><img src="'+L+'" alt="projection_frustum.png-67.3kB" loading="lazy"></p><p>图4.39 在透视投影中，投影矩阵对顶点进行了缩放。图3.38中标注了4个关键点经过投影矩阵变换后的结果。从这些结果可以看出x、y、z和w分量的范围发生的变化</p><p><img src="'+O+'" alt="projection_matrix0.png-135.1kB" loading="lazy"></p><p>图4.40 正交摄像机的参数对正交投影视锥体的影响</p><p><img src="'+Q+'" alt="orthographic_frustum.png-33.5kB" loading="lazy"></p><p>图4.41 在正交投影中，投影矩阵对顶点进行了缩放。图中标注了4个关键点经过投影矩阵变换后的结果。从这些结果可以看出x、y、z和w分量范围发生的变化</p><p><img src="'+H+'" alt="orthographic_matrix0.png-129.6kB" loading="lazy"></p><p>图4.42 农场游戏使用的摄像机参数和游戏画面的横纵比</p><p><img src="'+J+'" alt="cow_camera.png-180.1kB" loading="lazy"></p><h3 id="_5-屏幕空间" tabindex="-1"><a class="header-anchor" href="#_5-屏幕空间"><span>(5) 屏幕空间</span></a></h3><p>图4.43 经过齐次除法后，透视投影的裁剪空间会变换到一个立方体</p><p><img src="'+T+'" alt="projection_matrix1.png-131kB" loading="lazy"></p><p>图4.44 经过齐次除法后，正交投影的裁剪空间会变换到一个立方体</p><p><img src="'+V+'" alt="orthographic_matrix1.png-105.6kB" loading="lazy"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>图4.45 渲染流水线中顶点的空间变换过程</p><p><img src="'+X+'" alt="vertex_conversion.png-100.9kB" loading="lazy"></p><p>图4.46 Unity中各个坐标空间的旋向性</p><p><img src="'+q+'" alt="space_handness.png-75.6kB" loading="lazy"></p><h2 id="法线变换" tabindex="-1"><a class="header-anchor" href="#法线变换"><span>法线变换</span></a></h2>',138)]))}const ta=t(K,[["render",W],["__file","1-04. 学习Shader所需的数学基础.html.vue"]]),ea=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/3D/Render/%E3%80%8AUnityShadow%E3%80%8B/1-04.%20%E5%AD%A6%E4%B9%A0Shader%E6%89%80%E9%9C%80%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.html","title":"《UnityShadow》","lang":"zh-CN","frontmatter":{"description":"《UnityShadow》 目录 学习Shader所需的数学基础 （前5节比较简单，而且是纯数学知识，与Unity无关，我就不做笔记了（只保存彩图）。第6节开始继续做笔记） 背景：农场游戏 图4.1 我们的农场游戏。我们的主角妞妞是一头长得最壮、好奇心很强的奶牛 little_cow.png-293.5kB 笛卡尔坐标系 图4.2 传说，笛卡尔坐标系来...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/3D/Render/%E3%80%8AUnityShadow%E3%80%8B/1-04.%20%E5%AD%A6%E4%B9%A0Shader%E6%89%80%E9%9C%80%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《UnityShadow》"}],["meta",{"property":"og:description","content":"《UnityShadow》 目录 学习Shader所需的数学基础 （前5节比较简单，而且是纯数学知识，与Unity无关，我就不做笔记了（只保存彩图）。第6节开始继续做笔记） 背景：农场游戏 图4.1 我们的农场游戏。我们的主角妞妞是一头长得最壮、好奇心很强的奶牛 little_cow.png-293.5kB 笛卡尔坐标系 图4.2 传说，笛卡尔坐标系来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《UnityShadow》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《UnityShadow》","slug":"《unityshadow》","link":"#《unityshadow》","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"学习Shader所需的数学基础","slug":"学习shader所需的数学基础","link":"#学习shader所需的数学基础","children":[{"level":2,"title":"背景：农场游戏","slug":"背景-农场游戏","link":"#背景-农场游戏","children":[]},{"level":2,"title":"笛卡尔坐标系","slug":"笛卡尔坐标系","link":"#笛卡尔坐标系","children":[{"level":3,"title":"二维笛卡尔坐标系","slug":"二维笛卡尔坐标系","link":"#二维笛卡尔坐标系","children":[]},{"level":3,"title":"三维笛卡尔坐标系","slug":"三维笛卡尔坐标系","link":"#三维笛卡尔坐标系","children":[]},{"level":3,"title":"左手坐标系和右手坐标系","slug":"左手坐标系和右手坐标系","link":"#左手坐标系和右手坐标系","children":[]},{"level":3,"title":"Unity使用的坐标系","slug":"unity使用的坐标系","link":"#unity使用的坐标系","children":[]}]},{"level":2,"title":"点和矢量","slug":"点和矢量","link":"#点和矢量","children":[{"level":3,"title":"点和矢量的区别","slug":"点和矢量的区别","link":"#点和矢量的区别","children":[]},{"level":3,"title":"矢量运算","slug":"矢量运算","link":"#矢量运算","children":[{"level":4,"title":"矢量和标量乘法/除法","slug":"矢量和标量乘法-除法","link":"#矢量和标量乘法-除法","children":[]},{"level":4,"title":"矢量的加法和减法","slug":"矢量的加法和减法","link":"#矢量的加法和减法","children":[]},{"level":4,"title":"矢量的模","slug":"矢量的模","link":"#矢量的模","children":[]},{"level":4,"title":"单位矢量","slug":"单位矢量","link":"#单位矢量","children":[]},{"level":4,"title":"矢量的点积","slug":"矢量的点积","link":"#矢量的点积","children":[]},{"level":4,"title":"矢量的叉乘","slug":"矢量的叉乘","link":"#矢量的叉乘","children":[]},{"level":4,"title":"练习题","slug":"练习题","link":"#练习题","children":[]}]}]},{"level":2,"title":"矩阵","slug":"矩阵","link":"#矩阵","children":[{"level":3,"title":"矩阵的定义","slug":"矩阵的定义","link":"#矩阵的定义","children":[]},{"level":3,"title":"和矢量联系起来","slug":"和矢量联系起来","link":"#和矢量联系起来","children":[]},{"level":3,"title":"矩阵运算","slug":"矩阵运算","link":"#矩阵运算","children":[]},{"level":3,"title":"特殊的矩阵","slug":"特殊的矩阵","link":"#特殊的矩阵","children":[]},{"level":3,"title":"正交矩阵","slug":"正交矩阵","link":"#正交矩阵","children":[]}]},{"level":2,"title":"矩阵的集合意义：变换","slug":"矩阵的集合意义-变换","link":"#矩阵的集合意义-变换","children":[{"level":3,"title":"什么是变换","slug":"什么是变换","link":"#什么是变换","children":[]},{"level":3,"title":"齐次坐标","slug":"齐次坐标","link":"#齐次坐标","children":[]},{"level":3,"title":"分解基础变换矩阵","slug":"分解基础变换矩阵","link":"#分解基础变换矩阵","children":[]},{"level":3,"title":"平移矩阵","slug":"平移矩阵","link":"#平移矩阵","children":[]},{"level":3,"title":"缩放矩阵","slug":"缩放矩阵","link":"#缩放矩阵","children":[]},{"level":3,"title":"旋转矩阵","slug":"旋转矩阵","link":"#旋转矩阵","children":[]},{"level":3,"title":"复合矩阵","slug":"复合矩阵","link":"#复合矩阵","children":[]}]},{"level":2,"title":"坐标空间","slug":"坐标空间","link":"#坐标空间","children":[{"level":3,"title":"为什么要使用这么多不同的坐标空间","slug":"为什么要使用这么多不同的坐标空间","link":"#为什么要使用这么多不同的坐标空间","children":[]},{"level":3,"title":"坐标空间的变换","slug":"坐标空间的变换","link":"#坐标空间的变换","children":[]},{"level":3,"title":"顶点的坐标空间变换过程","slug":"顶点的坐标空间变换过程","link":"#顶点的坐标空间变换过程","children":[]},{"level":3,"title":"(1) 模型空间","slug":"_1-模型空间","link":"#_1-模型空间","children":[]},{"level":3,"title":"(2) 世界空间","slug":"_2-世界空间","link":"#_2-世界空间","children":[]},{"level":3,"title":"(3) 观察空间","slug":"_3-观察空间","link":"#_3-观察空间","children":[]},{"level":3,"title":"(4) 裁剪空间","slug":"_4-裁剪空间","link":"#_4-裁剪空间","children":[]},{"level":3,"title":"(5) 屏幕空间","slug":"_5-屏幕空间","link":"#_5-屏幕空间","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"法线变换","slug":"法线变换","link":"#法线变换","children":[]}]}],"git":{},"readingTime":{"minutes":8.68,"words":2605},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-04. 学习Shader所需的数学基础.md","excerpt":"\\n<h1>目录</h1>\\n<h1>学习Shader所需的数学基础</h1>\\n<p><mark>（前5节比较简单，而且是纯数学知识，与Unity无关，我就不做笔记了（只保存彩图）。第6节开始继续做笔记）</mark></p>\\n<h2>背景：农场游戏</h2>\\n<p>图4.1 我们的农场游戏。我们的主角妞妞是一头长得最壮、好奇心很强的奶牛</p>\\n<p></p>\\n<h2>笛卡尔坐标系</h2>\\n<p>图4.2 传说，笛卡尔坐标系来源于笛卡尔对天花板上一只苍蝇的运动轨迹的观察。笛卡尔发现，可以使用苍蝇距不同墙面的距离来描述它的当前位置</p>\\n<p></p>\\n<h3>二维笛卡尔坐标系</h3>\\n<p>图4.3 一个二维笛卡尔坐标系</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-04. 学习Shader所需的数学基础.md","value":{"title":"1-04. 学习Shader所需的数学基础","path":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-04. 学习Shader所需的数学基础.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{ta as comp,ea as data};
