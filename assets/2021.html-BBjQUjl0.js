import{_ as e,e as t,g as n,o as r}from"./app-EuS-Ookm.js";const l={};function i(a,o){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="暑期-2021" tabindex="-1"><a class="header-anchor" href="#暑期-2021"><span>暑期 2021</span></a></h1><p><strong>开源软件供应链点亮计划 - 暑期 2021</strong> 是<strong>中国科学院软件研究所</strong>与 <strong>openEuler 社区</strong>共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展。关于具体的活动规划、报名方式，请查看该活动的 <a href="https://summer.iscas.ac.cn/" target="_blank" rel="noopener noreferrer">官网</a> 和 <a href="https://summer.iscas.ac.cn/help/" target="_blank" rel="noopener noreferrer">帮助文档</a>。</p><p>NoneBot 社区有幸作为开源社区参与了本次活动，下面列出了目前我们已经发布的项目，欢迎感兴趣的同学在上面给出的活动官网报名，或通过 <a href="mailto:contact@nonebot.dev" target="_blank" rel="noopener noreferrer">contact@nonebot.dev</a> 联系我们。</p><h2 id="nonebot-v1" tabindex="-1"><a class="header-anchor" href="#nonebot-v1"><span>NoneBot v1</span></a></h2><h3 id="更新-nonebot-v1-文档中的-指南-部分" tabindex="-1"><a class="header-anchor" href="#更新-nonebot-v1-文档中的-指南-部分"><span>更新 NoneBot v1 文档中的“指南”部分</span></a></h3><p>由于 NoneBot v1 和 aiocqhttp 最初基于的 QQ 机器人平台不再提供服务，CQHTTP 接口也转型且改名为 OneBot 标准，目前 NoneBot v1 文档的“指南”部分和 aiocqhttp 文档有部分过时内容需要更新。我们希望将其中与旧的机器人平台相关的内容改为基于 go-cqhttp 或通用的 OneBot 表述，同时对 NoneBot v1 的 awesome-bot 示例做一次全面检查，修改其中可能已经不可用的部分。</p><p><strong>难度</strong>：低</p><p><strong>导师</strong>：<a href="https://github.com/cleoold" target="_blank" rel="noopener noreferrer">@cleoold</a></p><p><strong>产出要求</strong></p><ul><li>修改“指南”文档和 aiocqhttp 文档中与旧的 QQ 机器人平台相关的部分</li><li>检查 awesome-bot 示例是否有已经过时/不可用的地方，并更新/修复</li><li>修改“图灵机器人”案例，使用其它 AI 聊天 API 提供商（需先做简单调研）</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉 Python 编程语言及 asyncio 机制</li><li>了解 Git 基本用法</li><li>了解聊天机器人基本开发过程</li><li>了解 VuePress 更佳</li></ul><h3 id="nonebot-v1-api-文档自动生成" tabindex="-1"><a class="header-anchor" href="#nonebot-v1-api-文档自动生成"><span>NoneBot v1 API 文档自动生成</span></a></h3><p>目前 NoneBot v1 的文档中“API”部分是手动编写的，在更新代码接口的同时需要手动更新文档，可能造成文档与代码不匹配，形成额外的维护成本。我们希望将 API 文档改为直接编写在 Python docstring 中，通过工具自动生成 API 文档。</p><p><strong>难度</strong>：中</p><p><strong>导师</strong>：<a href="https://github.com/cleoold" target="_blank" rel="noopener noreferrer">@cleoold</a></p><p><strong>产出要求</strong></p><ul><li>调研市面上常见的 Python API 文档生成工具</li><li>在代码中补充 API 文档</li><li>编写或应用开源工具自动生成 API 文档</li><li>配置 GitHub Actions 或其它 CI 自动化构建和部署 API 文档</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉 Python 编程语言及 asyncio 和 Type Hints</li><li>了解 Git 基本用法</li><li>了解 Sphinx 等文档生成工具更佳</li><li>了解 GitHub Actions 等 CI 工具更佳</li></ul><h2 id="nonebot-v2" tabindex="-1"><a class="header-anchor" href="#nonebot-v2"><span>NoneBot v2</span></a></h2><h3 id="nonebot-v2-自动化测试框架-nonebug" tabindex="-1"><a class="header-anchor" href="#nonebot-v2-自动化测试框架-nonebug"><span>NoneBot v2 自动化测试框架“NoneBug”</span></a></h3><p>在聊天机器人的开发过程中，一套自动化的测试机制是非常重要的，特别是对于 NoneBot 2 这类为大型机器人开发而设计的项目来说，需要手动测试每一个边际条件是非常痛苦的。我们希望能够开发一款基于 NoneBot 2 插件机制的自动化测试框架，为 NoneBot 2 用户提供一套易用便捷、高度灵活的自动化测试框架。</p><p><strong>难度</strong>：高</p><p><strong>导师</strong>：<a href="https://github.com/yanyongyu" target="_blank" rel="noopener noreferrer">@yanyongyu</a></p><p><strong>产出要求</strong></p><ul><li>调研现有的 Python 和其它语言集成测试框架</li><li>设计 NoneBug 的用户 API 和实现方式</li><li>实现 NoneBug 自动化测试框架</li><li>编写详细的使用文档</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉 Python 编程语言及 asyncio 和 Type Hints</li><li>了解 Git 基本用法</li><li>了解 NoneBot v2 的基本原理和使用方式</li><li>了解主流的 Python 自动化测试框架</li></ul><h3 id="nonebot-v2-telegram-适配器" tabindex="-1"><a class="header-anchor" href="#nonebot-v2-telegram-适配器"><span>NoneBot v2 Telegram 适配器</span></a></h3><p>目前 NoneBot v2 已支持 OneBot、Mirai HTTP API、钉钉协议，社区反馈有更多的平台需求，希望能在 NoneBot v2 获得更多的跨平台支持，提高机器人的便携性。同时，我们也希望随着新平台加入，提升现有 NoneBot v2 核心代码的平台通用性。Telegram 是一款较为广泛使用的安全即时聊天软件，同时其官方提供了丰富的聊天机器人 API，因此我们希望为 NoneBot v2 编写一个 Telegram 适配器来支持 Telegram 机器人的开发。</p><p><strong>难度</strong>：中</p><p><strong>导师</strong>：<a href="https://github.com/yanyongyu" target="_blank" rel="noopener noreferrer">@yanyongyu</a></p><p><strong>产出要求</strong></p><ul><li>调研 Telegram Bot API 以及 WebHook 等官方接口</li><li>编写 Telegram 适配器并能够使用</li><li>代码遵守项目 Contributing 规范</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉 Python 编程语言及 asyncio 和 Type Hints</li><li>了解 Git 基本用法</li><li>了解 Web 开发相关知识</li><li>了解 Sphinx 等文档生成工具更佳</li></ul><h3 id="nonebot-v2-飞书适配器" tabindex="-1"><a class="header-anchor" href="#nonebot-v2-飞书适配器"><span>NoneBot v2 飞书适配器</span></a></h3><p>目前 NoneBot v2 已支持 OneBot、Mirai HTTP API、钉钉协议，社区反馈有更多的平台需求，希望能在 NoneBot v2 获得更多的跨平台支持，提高机器人的便携性。同时，我们也希望随着新平台加入，提升现有 NoneBot v2 核心代码的平台通用性。飞书是目前企业用户广泛使用的即时聊天和协作软件，其官方提供了丰富的聊天机器人 API，因此我们希望为 NoneBot v2 编写一个飞书适配器来支持飞书机器人的开发。</p><p><strong>难度</strong>：中</p><p><strong>导师</strong>：<a href="https://github.com/yanyongyu" target="_blank" rel="noopener noreferrer">@yanyongyu</a></p><p><strong>产出要求</strong></p><ul><li>调研飞书机器人 API 以及 WebHook 等官方接口</li><li>编写飞书适配器并能够使用</li><li>代码遵守项目 Contributing 规范</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉 Python 编程语言及 asyncio 和 Type Hints</li><li>了解 Git 基本用法</li><li>了解 Web 开发相关知识</li><li>了解 Sphinx 等文档生成工具更佳</li></ul><h2 id="onebot" tabindex="-1"><a class="header-anchor" href="#onebot"><span>OneBot</span></a></h2><h3 id="设计-onebot-v12-接口标准" tabindex="-1"><a class="header-anchor" href="#设计-onebot-v12-接口标准"><span>设计 OneBot v12 接口标准</span></a></h3><p>目前的 OneBot 标准的 v11 版本仍然与 QQ 平台有较多耦合，我们希望在 v12 去掉与 QQ 耦合的历史包袱，形成一个通用的、可扩展的、易于使用的同时易于实现的聊天机器人接口标准。</p><p><strong>难度</strong>：中</p><p><strong>导师</strong>：<a href="https://github.com/richardchien" target="_blank" rel="noopener noreferrer">@richardchien</a></p><p><strong>产出要求</strong></p><ul><li>调研各聊天机器人平台的官方/非官方接口特点</li><li>通用化 OneBot 核心 API，分离 QQ 特定的 API，去掉无用 API</li><li>优化现有的通信、消息表示机制</li><li>补充 QQ 特定的缺失 API</li><li>文档需符合风格指南</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉至少两个聊天平台的聊天机器人开发</li><li>了解 Git 基本用法</li><li>了解使用不同语言编写聊天机器人时的常用实践</li><li>对文档的优雅性与美观性有追求更佳</li></ul><h3 id="实现-rust-版-libonebot" tabindex="-1"><a class="header-anchor" href="#实现-rust-版-libonebot"><span>实现 Rust 版 libonebot</span></a></h3><p>目前最常用的 OneBot 实现包括 go-cqhttp、onebot-kotlin、node-onebot 等，这些实现都各自重复实现了 Web 通信、消息解析、配置读写等功能，当社区中的开发者想针对一个新的聊天平台实现 OneBot 时，他们往往同样需要再次实现类似逻辑。我们希望使用 Rust 编写一个 libonebot 模块，该模块实现所有 OneBot 实现所共享的功能，从而方便其他开发者们使用 Rust 快速编写具体的 OneBot 实现。同时，我们希望借此项目在聊天机器人社区中推广 Rust 编程语言。</p><blockquote><p>注：这里的逻辑是 libonebot + 针对某聊天平台的对接代码 = 某聊天平台的 OneBot 实现，libonebot 要做的是让 OneBot 实现的开发者只需编写针对特定聊天平台的对接代码，而无需关心 OneBot 标准定义的通信方式、消息格式等。</p></blockquote><p><strong>难度</strong>：高</p><p><strong>导师</strong>：<a href="https://github.com/richardchien" target="_blank" rel="noopener noreferrer">@richardchien</a></p><p><strong>产出要求</strong></p><ul><li>实现所有 OneBot 实现所共享的功能，包括 Web 通信、消息解析、配置读写等</li><li>充分考虑同时兼容 OneBot v11 和 v12 接口</li><li>能够根据用户（OneBot 实现的开发者）所实现的接口自动实现类似 get_available_apis 等接口</li><li>编写详细的使用文档</li><li>如果可能，与 v12 设计项目联动，实现第一手 v12 支持</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉聊天机器人开发</li><li>熟悉 Rust Web 开发</li></ul><h3 id="实现自选语言版-libonebot" tabindex="-1"><a class="header-anchor" href="#实现自选语言版-libonebot"><span>实现自选语言版 libonebot</span></a></h3><p>目前最常用的 OneBot 实现包括 go-cqhttp、onebot-kotlin、node-onebot 等，这些实现都各自重复实现了 Web 通信、消息解析、配置读写等功能，当社区中的开发者想针对一个新的聊天平台实现 OneBot 时，他们往往同样需要再次实现类似逻辑。我们希望使用 Python、Go、Kotlin、Node、PHP、C#.NET 等主流语言（任选一个）编写 libonebot 模块，该模块实现所有 OneBot 实现所共享的功能，从而方便其他开发者们使用对应语言快速编写具体的 OneBot 实现。</p><blockquote><p>注：这里的逻辑是 libonebot + 针对某聊天平台的对接代码 = 某聊天平台的 OneBot 实现，libonebot 要做的是让 OneBot 实现的开发者只需编写针对特定聊天平台的对接代码，而无需关心 OneBot 标准定义的通信方式、消息格式等。</p></blockquote><p><strong>难度</strong>：中</p><p><strong>导师</strong>：<a href="https://github.com/richardchien" target="_blank" rel="noopener noreferrer">@richardchien</a></p><p><strong>产出要求</strong></p><ul><li>实现所有 OneBot 实现所共享的功能，包括 Web 通信、消息解析、配置读写等</li><li>充分考虑同时兼容 OneBot v11 和 v12 接口</li><li>编写详细的使用文档</li><li>如果可能，实现更多附加特性，如根据用户（OneBot 实现的开发者）所实现的接口自动实现类似 get_available_apis 等接口、实现第一手 v12 支持等</li></ul><p><strong>技术要求</strong></p><ul><li>熟悉聊天机器人开发</li><li>熟悉所选语言的 Web 开发</li></ul>',72)]))}const p=e(l,[["render",i],["__file","2021.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/SoftCode/ChatBot/NoneBot2/version-2.4.1/09.%20ospp%E5%BC%80%E6%BA%90%E4%B9%8B%E5%A4%8F/2021.html","title":"暑期 2021","lang":"zh-CN","frontmatter":{"sidebar_position":0,"description":"开源软件供应链点亮计划 - 暑期 2021","mdx":{"format":"md"},"head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/SoftCode/ChatBot/NoneBot2/version-2.4.1/09.%20ospp%E5%BC%80%E6%BA%90%E4%B9%8B%E5%A4%8F/2021.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"暑期 2021"}],["meta",{"property":"og:description","content":"开源软件供应链点亮计划 - 暑期 2021"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"暑期 2021\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.98,"words":2393},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/ChatBot/NoneBot2/version-2.4.1/09. ospp开源之夏/2021.md","excerpt":"\\n<p><strong>开源软件供应链点亮计划 - 暑期 2021</strong> 是<strong>中国科学院软件研究所</strong>与 <strong>openEuler 社区</strong>共同举办的一项面向高校学生的暑期活动，旨在鼓励在校学生积极参与开源软件的开发维护，促进优秀开源软件社区的蓬勃发展。关于具体的活动规划、报名方式，请查看该活动的 <a href=\\"https://summer.iscas.ac.cn/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网</a> 和 <a href=\\"https://summer.iscas.ac.cn/help/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">帮助文档</a>。</p>","bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/ChatBot/NoneBot2/version-2.4.1/09. ospp开源之夏/2021.md","value":{"title":"2021","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/SoftCode/ChatBot/NoneBot2/version-2.4.1/09. ospp开源之夏/2021.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
