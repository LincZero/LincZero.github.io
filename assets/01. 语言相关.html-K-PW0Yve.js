import{_ as t,e as l,g as a,o as i}from"./app-DPU1xou8.js";const n={};function d(s,e){return i(),l("div",null,e[0]||(e[0]=[a(`<h1 id="面试八股文" tabindex="-1"><a class="header-anchor" href="#面试八股文"><span>面试八股文</span></a></h1><h2 id="语言相关" tabindex="-1"><a class="header-anchor" href="#语言相关"><span>语言相关</span></a></h2><p>5道C++语言相关的面试题</p><ol><li>malloc、free和new、delete区别</li><li>虚函数表和虚函数表指针的创建时机</li><li>C++什么时候生成默认拷贝构造函数</li><li>面向对象的三大特征及特性</li><li>设计模式</li></ol><h3 id="_01-malloc、free和new、delete" tabindex="-1"><a class="header-anchor" href="#_01-malloc、free和new、delete"><span>01. malloc、free和new、delete</span></a></h3><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><p>new &amp; malloc</p><table><thead><tr><th></th><th>new</th><th>malloc</th></tr></thead><tbody><tr><td>使用时</td><td>自动计算分配内存大小</td><td>手动计算</td></tr><tr><td>返回值</td><td>对象指针</td><td><code>void*</code></td></tr><tr><td>失败</td><td>抛出异常</td><td>返回NULL</td></tr><tr><td>分配在哪</td><td>freeStore (自由存储区)<br>一般在虚拟内存上的堆<br><br>也有可能在自己定义的其他地方</td><td>&lt;128通过break系统调用 (可能会先有内存池)，在虚拟内存上的堆<br>&gt;128通过mmap系统调用，或在文件映射区</td></tr><tr><td>隐藏操作</td><td>1. operator new<br>2. 申请空间<br>3. 调用构造函数和初始化成员</td><td>无。注意不会进行初始化，分配后不一定有物理内存</td></tr></tbody></table><p>delete &amp; free</p><table><thead><tr><th></th><th>delete</th><th>free</th></tr></thead><tbody><tr><td>使用参数</td><td>对象指针</td><td><code>void*</code></td></tr><tr><td>隐藏操作</td><td>1. 调用析构函数<br>2. operator delete<br>3. 释放空间</td><td>无</td></tr></tbody></table><p>补充：</p><ul><li>虚拟内存和物理内存有一个映射关系，虚拟内存的一个页对应物理内存的一个页，初始化时才会去对应</li><li>所以说malloc分配后不一定有物理内存，new后会初始化，则会有对应的物理内存</li></ul><h4 id="faq" tabindex="-1"><a class="header-anchor" href="#faq"><span>FAQ</span></a></h4><ul><li>malloc 是怎么分配空间的？答：两种大小的两种分配区域</li><li>malloc 分配的物理内存还是虚拟内存？答：物理内存和虚拟内存的映射方式</li><li>malloc 调用后是否立刻得到物理内存？否，要初始化才有</li><li>free(p) 怎么知道该释放多大空间？malloc会额外<strong>多申请16Byte</strong></li><li>free(p) 释放内存后，内存还在吗？如果通过内存池释放，则内存回内存池。如果通过mmap分配，则会马上释放</li></ul><h4 id="深入" tabindex="-1"><a class="header-anchor" href="#深入"><span>深入</span></a></h4><h3 id="虚函数表和虚函数表指针" tabindex="-1"><a class="header-anchor" href="#虚函数表和虚函数表指针"><span>虚函数表和虚函数表指针</span></a></h3><ul><li><p>创建时机</p><ul><li><p>虚函数表创建时机：当某类有virutal函数，编译器编译时就会生成</p></li><li><p>虚函数表指针创建时机：类对象构造时，把类的虚函数表地址赋值给vptr（没有构造函数也会有默认构造函数）</p><p>需要注意继承时，先调用基类构造函数并将基类虚函数表地址给vptr，再调用子类构造函数并将子类虚函数表地址给vptr（总感觉不太对，不至于这么笨赋值两次吧）</p></li></ul></li><li><p>虚函数表和虚函数表指针的关系？</p><ul><li>答：虚函数表指针指向虚函数表。一个类对应一个虚函数表，类的多个对象对应多个虚函数表指针地址不同，但均指向虚函数表</li></ul></li><li><p>为什么需要虚函数指针？用来实现多态</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 调用的B类的方法。因为能通过p对象的vptr找到B的虚函数表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="可执行文件的磁盘组成" tabindex="-1"><a class="header-anchor" href="#可执行文件的磁盘组成"><span>可执行文件的磁盘组成</span></a></h4><ul><li>……</li><li>.bss，存放未初始化或初始化为零的全局或静态变量</li><li>.data，已初始化的全局或静态变量</li><li>.rodata，(readOnlyData)，只读数据段，虚函数表在里面</li><li>.text，代码段</li><li>……</li></ul><h4 id="虚拟内存组成" tabindex="-1"><a class="header-anchor" href="#虚拟内存组成"><span>虚拟内存组成</span></a></h4><ul><li>内核空间</li><li>栈区</li><li>文件映射区</li><li>堆区</li><li>数据区（静态存储区，已初始化和未初始化。映射 .bass、.data）</li><li>代码区（映射代码.text、.rodata(虚函数表)）</li></ul><h4 id="深入、编译器工作" tabindex="-1"><a class="header-anchor" href="#深入、编译器工作"><span>深入、编译器工作</span></a></h4><h3 id="默认拷贝构造函数" tabindex="-1"><a class="header-anchor" href="#默认拷贝构造函数"><span>默认拷贝构造函数</span></a></h3><ul><li>背景：如果不提供，则位拷贝</li><li>位拷贝危险 (浅拷贝危险) <ul><li>堆上的资源</li><li>文件句柄，socket</li><li>虚函数表指针缺失</li></ul></li><li>触发时机 <ul><li>赋值</li><li>函数传参 (形参为类对象)、返回值 (不一定，返回值可能会有个编译器优化，优先用C++11的移动构造函数/自动给你移动构造)</li></ul></li><li>什么时候生成。当不得不生成时 <ul><li>继承/包含一个类A，类A包含默认拷贝构造函数</li><li>类成员有虚函数（自己有或基类有）</li></ul></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="写文件时进程宕机-数据会丢失吗" tabindex="-1"><a class="header-anchor" href="#写文件时进程宕机-数据会丢失吗"><span>写文件时进程宕机，数据会丢失吗</span></a></h3><h3 id="什么是mtu、mss以及为什么要有mss" tabindex="-1"><a class="header-anchor" href="#什么是mtu、mss以及为什么要有mss"><span>什么是MTU、MSS以及为什么要有MSS</span></a></h3><h3 id="什么是连接半打开-半关闭状态" tabindex="-1"><a class="header-anchor" href="#什么是连接半打开-半关闭状态"><span>什么是连接半打开，半关闭状态</span></a></h3><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><ul><li>标准库 stl、boost</li><li>C++11/14/17/20</li><li>面向对象</li><li>设计模式</li></ul>`,30)]))}const h=t(n,[["render",d],["__file","01. 语言相关.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/01.%20%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3.html","title":"面试八股文","lang":"zh-CN","frontmatter":{"description":"面试八股文 语言相关 5道C++语言相关的面试题 malloc、free和new、delete区别 虚函数表和虚函数表指针的创建时机 C++什么时候生成默认拷贝构造函数 面向对象的三大特征及特性 设计模式 01. malloc、free和new、delete 区别 new & malloc delete & free 补充： 虚拟内存和物理内存有一个映...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/10.%20%E9%9D%A2%E8%AF%95/C__%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/01.%20%E8%AF%AD%E8%A8%80%E7%9B%B8%E5%85%B3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"面试八股文"}],["meta",{"property":"og:description","content":"面试八股文 语言相关 5道C++语言相关的面试题 malloc、free和new、delete区别 虚函数表和虚函数表指针的创建时机 C++什么时候生成默认拷贝构造函数 面向对象的三大特征及特性 设计模式 01. malloc、free和new、delete 区别 new & malloc delete & free 补充： 虚拟内存和物理内存有一个映..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试八股文\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.67,"words":1102},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/01. 语言相关.md","excerpt":"\\n<h2>语言相关</h2>\\n<p>5道C++语言相关的面试题</p>\\n<ol>\\n<li>malloc、free和new、delete区别</li>\\n<li>虚函数表和虚函数表指针的创建时机</li>\\n<li>C++什么时候生成默认拷贝构造函数</li>\\n<li>面向对象的三大特征及特性</li>\\n<li>设计模式</li>\\n</ol>\\n<h3>01. malloc、free和new、delete</h3>\\n<h4>区别</h4>\\n<p>new &amp; malloc</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>new</th>\\n<th>malloc</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>使用时</td>\\n<td>自动计算分配内存大小</td>\\n<td>手动计算</td>\\n</tr>\\n<tr>\\n<td>返回值</td>\\n<td>对象指针</td>\\n<td><code>void*</code></td>\\n</tr>\\n<tr>\\n<td>失败</td>\\n<td>抛出异常</td>\\n<td>返回NULL</td>\\n</tr>\\n<tr>\\n<td>分配在哪</td>\\n<td>freeStore (自由存储区)<br>一般在虚拟内存上的堆<br><br>也有可能在自己定义的其他地方</td>\\n<td>&lt;128通过break系统调用 (可能会先有内存池)，在虚拟内存上的堆<br>&gt;128通过mmap系统调用，或在文件映射区</td>\\n</tr>\\n<tr>\\n<td>隐藏操作</td>\\n<td>1. operator new<br>2. 申请空间<br>3. 调用构造函数和初始化成员</td>\\n<td>无。注意不会进行初始化，分配后不一定有物理内存</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/01. 语言相关.md","value":{"title":"01. 语言相关","path":"MdNote_Public/01. DesignAndDevelop/Develop/10. 面试/C++面试八股文/01. 语言相关.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{h as comp,o as data};
