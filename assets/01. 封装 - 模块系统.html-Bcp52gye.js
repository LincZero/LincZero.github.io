import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,b as n,e,d as s,a}from"./app-Bh75ISgc.js";const p={},r=a('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="模块系统-封装" tabindex="-1"><a class="header-anchor" href="#模块系统-封装"><span>模块系统（封装）</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><ul><li>简概 <ul><li>模块是包括 Python 定义和声明的文件</li><li><strong>文件名</strong>就是<strong>模块名</strong>加上 <code>.py</code> 后缀</li></ul></li><li>模块的类别 <ul><li>可以是函数库、常量库、也可以是类库，导入方法都是一样的</li></ul></li></ul><h3 id="交互式测试重新加载问题" tabindex="-1"><a class="header-anchor" href="#交互式测试重新加载问题"><span>交互式测试重新加载问题</span></a></h3><p>出于性能考虑，每个模块在每个解释器会话中只导入一遍</p>',8),d=n("li",null,"因此，如果你修改了你的模块，需要重启解释器；",-1),h={href:"https://docs.python.org/3/library/imp.html#imp.reload",target:"_blank",rel:"noopener noreferrer"},u=n("ul",null,[n("li",null,[e("例如 "),n("code",null,"import imp; imp.reload(modulename)")])],-1),_=n("h2",{id:"自定义模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义模块"},[n("span",null,"自定义模块")])],-1),m=n("h3",{id:"基本流程、设计与使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本流程、设计与使用"},[n("span",null,"基本流程、设计与使用")])],-1),k=a("<li>基本流程 <ul><li>保存文件<code>a.py</code></li><li>同目录下<code>import fibo</code></li></ul></li><li>设计 <ul><li>可以注明<code>文档字符串</code>和<code>函数注解</code>，以方便他人使用该模块</li><li>具体设置方法详见 “编写习惯” 一章</li></ul></li>",2),y=n("code",null,"dir()",-1),g=n("strong",null,"字符串列表",-1),f=n("li",null,"无参数调用时，返回当前定义的命名",-1),b={href:"https://docs.python.org/3/library/functions.html#dir",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.python.org/3/library/builtins.html#module-builtins",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("code",null,"help()")],-1),E=a('<h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>模块文件可以包括方法、变量、类</p><ul><li>导入模块的三种方式（以导入类为例） <ul><li>方式一（导入模块中指定的类或函数） <ul><li>导入：<code>from car import Car, ElectricCar</code></li><li>调用：<code>my_car = Car(...)</code></li><li>好处：只要查看文件开头的import语句，就能清楚知道程序使用了哪些类</li></ul></li><li>方式二（导入模块的所有类和函数） <ul><li>导入：<code>from car import *</code></li><li>调用：<code>my_car = Car(...)</code>（不推荐）</li><li>缺点：可能会引发类名重复</li></ul></li><li>方式三（导入模块） <ul><li>导入：<code>import car</code></li><li>调用：<code>my_car = car.Car(...)</code></li><li>扩展：如果打算频繁使用一个函数，可以将它赋予一个本地变量，如<code>fn = a_module.fn; fn(...)</code></li></ul></li></ul></li></ul><h3 id="私有变量" tabindex="-1"><a class="header-anchor" href="#私有变量"><span><code>_</code>私有变量</span></a></h3><p>以下划线（<code>_</code>）开头命名的方法或函数为模块私有的</p><p>一般<code>*</code>会导入所有除了以下划线开头的命名</p><h3 id="模块的搜索路径" tabindex="-1"><a class="header-anchor" href="#模块的搜索路径"><span>模块的搜索路径</span></a></h3>',7),P=n("li",null,[n("p",null,[e("导入一个叫 "),n("code",null,"spam"),e(" 的模块时，解释器先在当前目录中搜索名为 "),n("code",null,"spam.py"),e(" 的文件")])],-1),A={href:"https://docs.python.org/3/library/sys.html#sys.path",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.python.org/3/library/sys.html#sys.path",target:"_blank",rel:"noopener noreferrer"},O=n("li",null,[n("p",null,"输入脚本的目录（当前目录）")],-1),w={href:"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[e("（这和 shell 变量 "),n("code",null,"PATH"),e(" 具有一样的语法，即一系列目录名的列表）")],-1),T=n("li",null,[n("p",null,"Python 默认安装路径中搜索")],-1),H=a(`<h2 id="自定义包" tabindex="-1"><a class="header-anchor" href="#自定义包"><span>自定义包</span></a></h2><h3 id="简概-2" tabindex="-1"><a class="header-anchor" href="#简概-2"><span>简概</span></a></h3><p>包也叫模块集（与java的包的概念类似）</p><ul><li>作用：封装化结构化，以及避免全局变量之间的相互冲突</li><li>使用简概：包通常是使用用<code>圆点模块名</code>的结构化模块命名空间 <ul><li>例如，名为 <code>A.B</code> 的模块表示了名为 <code>A</code> 的<strong>包</strong>中名为 <code>B</code> 的<strong>子模块</strong></li></ul></li></ul><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><ul><li><p>导入包/模块的方式</p><ul><li><p>方式一（用户可以每次只导入包里的特定模块）</p><ul><li>导入：<code>import sound.effects.echo</code></li><li>使用：<code>sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式二（加载子模块）</p><ul><li>导入：<code>from sound.effects import echo</code></li><li>使用：<code>echo.echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式三（直接导入函数或变量）</p><ul><li>导入：<code>from sound.effects.echo import echofilter</code></li><li>使用：<code>echofilter(input, output, delay=0.7, atten=4)</code></li></ul></li><li><p>方式四（从*导入）</p><ul><li><p>导入：<code>from sound.effects import *</code>（导入包的所有子模块或根据<code>__init__.py</code>中定义的列表进行导入）</p></li><li><p><code>__init__</code>：代码举例：<code>__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</code></p></li><li><p>由于init机制，有时会混着使用，如下：</p><ul><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>  <span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo
  <span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>surround
  <span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> <span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul></li></ul><h3 id="包内引用" tabindex="-1"><a class="header-anchor" href="#包内引用"><span>包内引用</span></a></h3><ul><li><p>作用：可以按绝对位置从相邻的包中引入子模块</p></li><li><p>方法</p><ul><li><p>例如：如果 <code>sound.filters.vocoder</code> 包需要使用 <code>sound.effects</code> 包中的 <code>echo</code> 模块</p><p>它可以 <code>from sound.Effects import echo</code></p><p>也可以 <code>from ..filters import equalizer</code>（类似这种写法）</p></li></ul></li></ul><h3 id="多重目录中的包-不懂" tabindex="-1"><a class="header-anchor" href="#多重目录中的包-不懂"><span>多重目录中的包（<mark>不懂</mark>）</span></a></h3>`,9),D={href:"https://docs.python.org/3/reference/import.html#__path__",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"__path__",-1),C=a('<p>在包的 <code>__init__.py</code> 文件代码执行之前，该变量初始化一个目录名列表。该变量可以修改，它作用于包中的子包和模块的搜索功能</p><p>这个功能可以用于扩展包中的模块集，不过它不常用</p><h2 id="模块补充、与main文件" tabindex="-1"><a class="header-anchor" href="#模块补充、与main文件"><span>模块补充、与main文件</span></a></h2><h3 id="name-的使用" tabindex="-1"><a class="header-anchor" href="#name-的使用"><span><code>__name__</code>的使用</span></a></h3><ul><li>简概 <ul><li>模块的模块名（做为一个字符串）可以由全局变量 <code>__name__</code> 得到</li></ul></li><li>使用 <ul><li>如<code>import fibo</code>、<code>fibo.__name__</code>的值为<code>&#39;fibo&#39;</code></li></ul></li></ul><h3 id="main-文件与模块" tabindex="-1"><a class="header-anchor" href="#main-文件与模块"><span>“main”文件与模块</span></a></h3><ul><li>当当前文件以主函数开始运行时，<code>__name__</code>会被设置为<code>__main__</code></li><li>可以用<code>if __name__==&#39;__main__&#39;:</code>判断当前模块是否主运行文件</li><li>此代码只有在模块作为 “main” 文件执行时才被调用</li></ul><h3 id="模块使用相对路径" tabindex="-1"><a class="header-anchor" href="#模块使用相对路径"><span>模块使用相对路径</span></a></h3><p>模块使用相对路径时，是根据main文件的路径去找的相对路径。即若模块与main文件不在同一目录时，以main文件的为准</p><p>这可能会引发一些问题：如果想要找模块的相对路径，则需要先把模块路径转为绝对路径，再取找相对路径</p><h3 id="模块的-编译" tabindex="-1"><a class="header-anchor" href="#模块的-编译"><span>模块的 “编译”</span></a></h3>',11),L=a("<li><p>简概</p></li><li><p>为了加快加载模块的速度，Python 会在 <code>__pycache__</code> 目录下以 <code>module.*version*.pyc</code> 名字<strong>缓存</strong>每个模块编译后的版本</p></li><li><p>版本号补充</p><ul><li>这里的版本编制了编译后文件的格式。它通常会包含 Python 的版本号</li><li>例如，在 CPython 3.3 版中，spam.py 编译后的版本将缓存为 <code>__pycache__/spam.cpython-33.pyc</code></li><li>这种命名约定允许由不同发布和不同版本的 Python 编译的模块同时存在</li></ul></li>",3),F=n("p",null,[e("部分高级技巧（"),n("mark",null,"不太懂"),e("）")],-1),Y={href:"https://docs.python.org/3/using/cmdline.html#cmdoption-O",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.python.org/3/using/cmdline.html#cmdoption-OO",target:"_blank",rel:"noopener noreferrer"},M={href:"https://docs.python.org/3/using/cmdline.html#cmdoption-O",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.python.org/3/using/cmdline.html#cmdoption-OO",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"doc",-1),z=n("p",null,"因为某些程序依赖于这些变量的可用性，你应该只在确定无误的场合使用这一选项。“优化的” 模块有一个 .pyo 后缀而不是 .pyc 后缀。未来的版本可能会改变优化的效果。",-1),Z=n("li",null,[n("p",null,[e("来自 "),n("code",null,".pyc"),e(" 文件或 "),n("code",null,".pyo"),e(" 文件中的程序不会比来自 "),n("code",null,".py"),e(" 文件的运行更快；"),n("code",null,".pyc"),e(" 或 "),n("code",null,".pyo"),e(" 文件只是在它们加载的时候更快一些。")])],-1),j={href:"https://docs.python.org/3/library/compileall.html#module-compileall",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,".pyc",-1),R={href:"https://docs.python.org/3/using/cmdline.html#cmdoption-O",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,".pyo",-1),X=n("li",null,[n("p",null,"在 PEP 3147 中有很多关这一部分内容的细节，并且包含了一个决策流程。")],-1),J=a(`<h2 id="常用模块-常用库" tabindex="-1"><a class="header-anchor" href="#常用模块-常用库"><span>常用模块（常用库）</span></a></h2><p>Python的模块系统由三大部分组成</p><h3 id="内置模块-标准库模块-不用下载-不用显式导入" tabindex="-1"><a class="header-anchor" href="#内置模块-标准库模块-不用下载-不用显式导入"><span>内置模块 / 标准库模块（不用下载，不用显式导入）</span></a></h3><h4 id="string模块" tabindex="-1"><a class="header-anchor" href="#string模块"><span>string模块</span></a></h4><h4 id="文件输入-输出" tabindex="-1"><a class="header-anchor" href="#文件输入-输出"><span>文件输入/输出</span></a></h4><ul><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;vuln_banners.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准模块-标准模块库-不用下载-要显式导入" tabindex="-1"><a class="header-anchor" href="#标准模块-标准模块库-不用下载-要显式导入"><span>标准模块 / 标准模块库（不用下载，要显式导入）</span></a></h3><h4 id="sys模块" tabindex="-1"><a class="header-anchor" href="#sys模块"><span>sys模块</span></a></h4>`,9),$=n("li",null,[n("p",null,"作用：能访问到由Python解释器使用或维护的对象，其中包括："),n("ul",null,[n("li",null,"标志、版本、整型数最大尺寸、可用的模块、hook路径、标准错误/输入/输出的位置、调用解释器的命令行参数")])],-1),G=n("li",null,[n("p",null,"模块文档：http://docs.python.org/library/sys")],-1),Q=n("p",null,"具体用法",-1),W=n("li",null,[n("p",null,[n("code",null,"sys.ps1"),e("：在交互模式下，"),n("code",null,"sys.ps1"),e("和"),n("code",null,"sys.ps2"),e("分别定义了主提示符"),n("code",null,"'>>> '"),e("和辅助提示符"),n("code",null,"'... '")])],-1),nn=n("p",null,[n("code",null,"sys.path"),e("：是解释器搜索模块路径的"),n("strong",null,"字符串列表")],-1),en={href:"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH",target:"_blank",rel:"noopener noreferrer"},sn=n("li",null,[e("你可以用标准的字符串操作修改它：例如"),n("code",null,"sys.path.append('/ufs/guido/lib/python')")],-1),an=a(`<li><p><code>sys.argv</code>：<code>$ python vuln-scanner.py vuln-banners.txt</code>调用python时：</p><ul><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>  <span class="token keyword">import</span> sys
  <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># python启动的参数</span>
  	filename <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 第二个启动的参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),tn=a(`<h4 id="os模块" tabindex="-1"><a class="header-anchor" href="#os模块"><span>os模块</span></a></h4><ul><li>作用：提供了丰富的适用于各种操作系统的函数，可以交互的对象： <ul><li>操作系统环境、文件系统、用户数据、权限</li></ul></li><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token comment"># ...</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有该文件</span>
    <span class="token keyword">pass</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 没有权限访问该文件</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="socket模块-网络模块" tabindex="-1"><a class="header-anchor" href="#socket模块-网络模块"><span>socket模块（网络模块）</span></a></h4><ul><li>demo</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> socket
socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 设置超时</span>
s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建实例</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.95.148&quot;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 连接指定ip和端口</span>
ans <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token comment"># 读取接下来1KB数据</span>
<span class="token keyword">print</span> ans <span class="token comment"># 打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ordereddict类-有序字典" tabindex="-1"><a class="header-anchor" href="#ordereddict类-有序字典"><span>OrderedDict类（有序字典）</span></a></h4><ul><li>载入：<code>from collections import OrderedDict</code></li></ul><h4 id="lib2to3-python2-x转3-x模块" tabindex="-1"><a class="header-anchor" href="#lib2to3-python2-x转3-x模块"><span>lib2to3（Python2.x转3.x模块）</span></a></h4><h3 id="第三方模块-要下载-并显式导入" tabindex="-1"><a class="header-anchor" href="#第三方模块-要下载-并显式导入"><span>第三方模块（要下载，并显式导入）</span></a></h3><h2 id="专题模块" tabindex="-1"><a class="header-anchor" href="#专题模块"><span>专题模块</span></a></h2><h3 id="【专题模块】黑客类" tabindex="-1"><a class="header-anchor" href="#【专题模块】黑客类"><span>【专题模块】黑客类</span></a></h3><h4 id="crypy-unix加密" tabindex="-1"><a class="header-anchor" href="#crypy-unix加密"><span>crypy（UNIX加密）</span></a></h4><h4 id="hashlib-sha-512函数等hash算法" tabindex="-1"><a class="header-anchor" href="#hashlib-sha-512函数等hash算法"><span>hashlib（SHA-512函数等hash算法）</span></a></h4>`,14);function on(cn,pn){const l=o("ExternalLinkIcon");return i(),c("div",null,[r,n("ul",null,[d,n("li",null,[e("或者，如果你就是想交互式的测试这么一个模块，可以用 "),n("a",h,[e("imp.reload()"),s(l)]),e(" 重新加载 "),u])]),_,m,n("ul",null,[k,n("li",null,[e("使用 "),n("ul",null,[n("li",null,[y,e("：用于按模块名搜索模块定义，返回"),g,n("ul",null,[f,n("li",null,[n("a",b,[e("dir()"),s(l)]),e(" 不会列出内置函数和变量名。如果你想列出这些内容，它们在标准模块 "),n("a",v,[e("builtins"),s(l)]),e(" 中定义")])])]),x])])]),E,n("ul",null,[P,n("li",null,[n("p",null,[e("如果没有找到的话，接着会到 "),n("a",A,[e("sys.path"),s(l)]),e(" 变量中给出的目录列表中查找。 "),n("a",B,[e("sys.path"),s(l)]),e(" 变量的初始值来自如下：")]),n("ul",null,[O,n("li",null,[n("p",null,[e("环境变量 "),n("a",w,[e("PYTHONPATH"),s(l)]),e(" 表示的目录列表中搜索")]),N]),T])])]),H,n("p",null,[e("包支持一个更为特殊的特性， "),n("a",D,[q,s(l)])]),C,n("ul",null,[L,n("li",null,[F,n("ul",null,[n("li",null,[n("p",null,[e("为了减少一个编译模块的大小，你可以在 Python 命令行中使用 "),n("a",Y,[e("-O"),s(l)]),e(" 或者 "),n("a",I,[e("-OO"),s(l)]),e("。"),n("a",M,[e("-O"),s(l)]),e(" 参数删除了断言语句，"),n("a",S,[e("-OO"),s(l)]),e(" 参数删除了断言语句和 "),V,e(" 字符串。")]),z]),Z,n("li",null,[n("p",null,[n("a",j,[e("compileall"),s(l)]),e(" 模块可以为指定目录中的所有模块创建 "),K,e(" 文件（或者使用 "),n("a",R,[e("-O"),s(l)]),e(" 参数创建 "),U,e(" 文件）。")])]),X])])]),J,n("ul",null,[$,G,n("li",null,[Q,n("ul",null,[W,n("li",null,[nn,n("ul",null,[n("li",null,[e("它由环境变量 "),n("a",en,[e("PYTHONPATH"),s(l)]),e(" 初始化")]),n("li",null,[e("如果没有设定 "),n("a",ln,[e("PYTHONPATH"),s(l)]),e(" ，就由内置的默认值初始化")]),sn])]),an])])]),tn])}const hn=t(p,[["render",on],["__file","01. 封装 - 模块系统.html.vue"]]),un=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E5%B0%81%E8%A3%85%20-%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 模块系统（封装） 简概 简概 简概 模块是包括 Python 定义和声明的文件 文件名就是模块名加上 .py 后缀 模块的类别 可以是函数库、常量库、也可以是类库，导入方法都是一样的 交互式测试重新加载问题 出于性能考虑，每个模块在每个解释器会话中只导入一遍 因此，如果你修改了你的模块，需要重启解释器； 或者，如果你就是想交互式的测...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/01.%20%E5%B0%81%E8%A3%85%20-%20%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 模块系统（封装） 简概 简概 简概 模块是包括 Python 定义和声明的文件 文件名就是模块名加上 .py 后缀 模块的类别 可以是函数库、常量库、也可以是类库，导入方法都是一样的 交互式测试重新加载问题 出于性能考虑，每个模块在每个解释器会话中只导入一遍 因此，如果你修改了你的模块，需要重启解释器； 或者，如果你就是想交互式的测..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"模块系统（封装）","slug":"模块系统-封装","link":"#模块系统-封装","children":[{"level":2,"title":"简概","slug":"简概","link":"#简概","children":[{"level":3,"title":"简概","slug":"简概-1","link":"#简概-1","children":[]},{"level":3,"title":"交互式测试重新加载问题","slug":"交互式测试重新加载问题","link":"#交互式测试重新加载问题","children":[]}]},{"level":2,"title":"自定义模块","slug":"自定义模块","link":"#自定义模块","children":[{"level":3,"title":"基本流程、设计与使用","slug":"基本流程、设计与使用","link":"#基本流程、设计与使用","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"_私有变量","slug":"私有变量","link":"#私有变量","children":[]},{"level":3,"title":"模块的搜索路径","slug":"模块的搜索路径","link":"#模块的搜索路径","children":[]}]},{"level":2,"title":"自定义包","slug":"自定义包","link":"#自定义包","children":[{"level":3,"title":"简概","slug":"简概-2","link":"#简概-2","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]},{"level":3,"title":"包内引用","slug":"包内引用","link":"#包内引用","children":[]},{"level":3,"title":"多重目录中的包（不懂）","slug":"多重目录中的包-不懂","link":"#多重目录中的包-不懂","children":[]}]},{"level":2,"title":"模块补充、与main文件","slug":"模块补充、与main文件","link":"#模块补充、与main文件","children":[{"level":3,"title":"__name__的使用","slug":"name-的使用","link":"#name-的使用","children":[]},{"level":3,"title":"“main”文件与模块","slug":"main-文件与模块","link":"#main-文件与模块","children":[]},{"level":3,"title":"模块使用相对路径","slug":"模块使用相对路径","link":"#模块使用相对路径","children":[]},{"level":3,"title":"模块的 “编译”","slug":"模块的-编译","link":"#模块的-编译","children":[]}]},{"level":2,"title":"常用模块（常用库）","slug":"常用模块-常用库","link":"#常用模块-常用库","children":[{"level":3,"title":"内置模块 / 标准库模块（不用下载，不用显式导入）","slug":"内置模块-标准库模块-不用下载-不用显式导入","link":"#内置模块-标准库模块-不用下载-不用显式导入","children":[{"level":4,"title":"string模块","slug":"string模块","link":"#string模块","children":[]},{"level":4,"title":"文件输入/输出","slug":"文件输入-输出","link":"#文件输入-输出","children":[]}]},{"level":3,"title":"标准模块 / 标准模块库（不用下载，要显式导入）","slug":"标准模块-标准模块库-不用下载-要显式导入","link":"#标准模块-标准模块库-不用下载-要显式导入","children":[{"level":4,"title":"sys模块","slug":"sys模块","link":"#sys模块","children":[]},{"level":4,"title":"os模块","slug":"os模块","link":"#os模块","children":[]},{"level":4,"title":"socket模块（网络模块）","slug":"socket模块-网络模块","link":"#socket模块-网络模块","children":[]},{"level":4,"title":"OrderedDict类（有序字典）","slug":"ordereddict类-有序字典","link":"#ordereddict类-有序字典","children":[]},{"level":4,"title":"lib2to3（Python2.x转3.x模块）","slug":"lib2to3-python2-x转3-x模块","link":"#lib2to3-python2-x转3-x模块","children":[]}]},{"level":3,"title":"第三方模块（要下载，并显式导入）","slug":"第三方模块-要下载-并显式导入","link":"#第三方模块-要下载-并显式导入","children":[]}]},{"level":2,"title":"专题模块","slug":"专题模块","link":"#专题模块","children":[{"level":3,"title":"【专题模块】黑客类","slug":"【专题模块】黑客类","link":"#【专题模块】黑客类","children":[{"level":4,"title":"crypy（UNIX加密）","slug":"crypy-unix加密","link":"#crypy-unix加密","children":[]},{"level":4,"title":"hashlib（SHA-512函数等hash算法）","slug":"hashlib-sha-512函数等hash算法","link":"#hashlib-sha-512函数等hash算法","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.16,"words":2147},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/07. 模块库/01. 封装 - 模块系统.md","autoDesc":true}');export{hn as comp,un as data};
