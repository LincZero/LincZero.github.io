import{_ as i,c,e as d,o}from"./app-BgHc8lP1.js";const l={};function a(s,e){return o(),c("div",null,e[0]||(e[0]=[d('<h1 id="dpdk简介" tabindex="-1"><a class="header-anchor" href="#dpdk简介"><span>DPDK简介</span></a></h1><h2 id="主流包处理硬件平台" tabindex="-1"><a class="header-anchor" href="#主流包处理硬件平台"><span>主流包处理硬件平台</span></a></h2><ul><li>硬件加速器：<code>ASIC</code>、<code>FPGA</code></li><li>网络处理器</li><li>多核处理器</li></ul><h2 id="传统linux网络驱动的问题" tabindex="-1"><a class="header-anchor" href="#传统linux网络驱动的问题"><span>传统Linux网络驱动的问题</span></a></h2><ul><li>中断开销突出，大量数据到来会触发频繁的中断（<code>softirq</code>）开销导致系统无法承受</li><li>需要把包从内核缓冲区拷贝到用户缓冲区，带来系统调用和数据包复制的开销</li><li>对于很多网络功能节点来说，<code>TCP/IP</code>协议并非是数据转发环节所必需的</li><li><code>NAPI/Netmap</code>等虽然减少了内核到用户空间的数据拷贝，但操作系统调度带来的<code>cache</code>替换也会对性能产生负面影响</li></ul><h2 id="dpdk最佳实践" tabindex="-1"><a class="header-anchor" href="#dpdk最佳实践"><span>DPDK最佳实践</span></a></h2><ul><li><p><code>PMD</code>用户态驱动: <code>DPDK</code>针对<code>Intel</code>网卡实现了基于轮询方式的<code>PMD</code>（<code>Poll Mode Drivers</code>）驱动，该驱动由<code>API</code>、用户空间运行的驱动程序构成，该驱动使用 <strong>无中断方式直接操作网卡的接收和发送队列</strong>（除了链路状态通知仍必须采用中断方式以外）。目前<code>PMD</code>驱动支持<code>Intel</code>的大部分<code>1G</code>、<code>10G</code>和<code>40G</code>的网卡。<code>PMD</code>驱动从网卡上接收到数据包后，会直接通过<code>DMA</code>方式传输到预分配的内存中，同时更新无锁环形队列中的数据包指针，不断轮询的应用程序很快就能感知收到数据包，并在预分配的内存地址上直接处理数据包，这个过程非常简洁。<strong>如果要是让Linux来处理收包过程，首先网卡通过中断方式通知协议栈对数据包进行处理，协议栈先会对数据包进行合法性进行必要的校验，然后判断数据包目标是否本机的socket，满足条件则会将数据包拷贝一份向上递交给用户socket来处理，不仅处理路径冗长，还需要从内核到应用层的一次拷贝过程。</strong></p></li><li><p><code>hugetlbfs</code>: 这样有两个好处：第一是使用<code>hugepage</code>的内存所需的页表项比较少，对于需要大量内存的进程来说节省了很多开销，像<code>oracle</code>之类的大型数据库优化都使用了大页面配置；第二是<code>TLB</code>冲突概率降低，<code>TLB</code>是<code>cpu</code>中单独的一块高速<code>cache</code>，采用<code>hugepage</code>可以大大降低<code>TLB miss</code>的开销。<code>DPDK</code>目前支持了<code>2M</code>和<code>1G</code>两种方式的<code>hugepage</code>。通过修改默认<code>/etc/grub.conf</code>中<code>hugepage</code>配置为“<code>default_hugepagesz=1G hugepagesz=1G hugepages=32 isolcpus=0-22</code>”，然后通过<code>mount –t hugetlbfs nodev /mnt/huge</code>就将<code>hugepage</code>文件系统<code>hugetlbfs</code>挂在<code>/mnt/huge</code>目录下，然后用户进程就可以使用<code>mmap</code>映射<code>hugepage</code>目标文件来使用大页面了。测试表明应用使用大页表比使用<code>4K</code>的页表性能提高<code>10%~15%</code>。</p></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CPU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>亲缘性和独占: 多核则是每个</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CPU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>核一个线程，核心之间访问数据无需上锁。为了最大限度减少线程调度的资源消耗，需要将</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Linux</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>绑定在特定的核上，释放其余核心来专供应用程序使用。 同时还需要考虑</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CPU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特性和系统是否支持</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>NUMA</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>架构，如果支持的话，不同插槽上</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CPU</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>的进程要避免访问远端内存，尽量访问本端内存。</p><ul><li>避免不同核之间的频繁切换，从而避免<code>cache miss和cache write back</code></li><li>避免同一个核内多任务切换开销</li></ul></li><li><p>降低内存访问开销:</p><ul><li>借助大页降低<code>TLB miss</code></li><li>利用内存多通道交错访问提高内存访问的有效带宽</li><li>利用内存非对称性感知避免额外的访存延迟</li><li>少用数组和指针，多用局部变量</li><li>少用全局变量</li><li>一次多访问一些数据</li><li>自己管理内存分配；进程间传递指针而非整个数据块</li></ul></li><li><p><code>Cache</code>有效性得益于空间局部性（附近的数据也会被用到）和时间局部性（今后一段时间内会被多次访问）原理，通过合理的使用<code>cache</code>，能够使得应用程序性能得到大幅提升</p></li><li><p>避免<code>False Sharing</code>: 多核<code>CPU</code>中每个核都拥有自己的<code>L1/L2 cache</code>，当运行多线程程序时，尽管算法上不需要共享变量，但实际执行中两个线程访问同一<code>cache line</code>的数据时就会引起冲突，每个线程在读取自己的数据时也会把别人的<code>cache line</code>读进来，这时一个核修改改变量，<code>CPU</code>的<code>cache</code>一致性算法会迫使另一个核的<code>cache</code>中包含该变量所在的<code>cache line</code>无效，这就产生了<code>false sharing</code>（伪共享）问题. <code>Falsing sharing</code>会导致大量的<code>cache</code>冲突，应该尽量避免。 访问全局变量和动态分配内存是<code>false sharing</code>问题产生的根源，当然访问在内存中相邻的但完全不同的全局变量也可能会导致<code>false sharing</code>，多使用线程本地变量是解决<code>false sharing</code>的根源办法。</p></li><li><p>内存对齐：根据不同存储硬件的配置来优化程序，性能也能够得到极大的提升。在硬件层次，确保对象位于不同<code>channel</code>和<code>rank</code>的起始地址，这样能保证对象并并行加载。字节对齐：众所周知，内存最小的存储单元为字节，在32位CPU中，寄存器也是32位的，为了保证访问更加高效，在32位系统中变量存储的起始地址默认是4的倍数（64位系统则是8的倍数），定义一个32位变量时，只需要一次内存访问即可将变量加载到寄存器中，这些工作都是编译器完成的，不需人工干预，当然我们可以使用<code>attribute((aligned(n)))</code>来改变对齐的默认值。</p></li><li><p><code>cache</code>对齐，这也是程序开发中需要关注的。<code>Cache line</code>是CPU从内存加载数据的最小单位，一般<code>L1 cache</code>的<code>cache line</code>大小为64字节。如果CPU访问的变量不在<code>cache</code>中，就需要先从内存调入到cache，调度的最小单位就是<code>cache line</code>。因此，内存访问如果没有按照<code>cache line</code>边界对齐，就会多读写一次内存和<code>cache</code>了。</p></li><li><p><code>NUMA</code>: <code>NUMA</code>系统节点一般是由一组CPU和本地内存组成。<code>NUMA</code>调度器负责将进程在同一节点的CPU间调度，除非负载太高，才迁移到其它节点，但这会导致数据访问延时增大。</p></li><li><p>减少进程上下文切换: 需要了解哪些场景会触发<code>CS</code>操作。首先就介绍的就是不可控的场景：进程时间片到期；更高优先级进程抢占CPU。其次是可控场景：休眠当前进程(<code>pthread_cond_wait</code>)；唤醒其它进程(<code>pthread_cond_signal</code>)；加锁函数、互斥量、信号量、<code>select</code>、<code>sleep</code>等非常多函数都是可控的。对于可控场景是在应用编程需要考虑的问题，只要程序逻辑设计合理就能较少CS的次数。对于不可控场景，首先想到的是适当减少活跃进程或线程数量，因此保证活跃进程数目不超过CPU个数是一个明智的选择；然后有些场景下，我们并不知道有多少个活跃线程的时候怎么来保证上下文切换次数最少呢？这是我们就需要使用线程池模型：让每个线程工作前都持有带计数器的信号量，在信号量达到最大值之前，每个线程被唤醒时仅进行一次上下文切换，当信号量达到最大值时，其它线程都不会再竞争资源了。</p></li><li><p>分组预测机制，如果预测的一个分支指令加入流水线，之后却发现它是错误的分支，处理器要回退该错误预测执行的工作，再用正确的指令填充流水线。这样一个错误的预测会严重浪费时钟周期，导致程序性能下降。《计算机体系结构：量化研究方法》指出分支指令产生的性能影响为10%~30%，流水线越长，性能影响越大。<code>Core i7</code>和<code>Xe</code>n等较新的处理器当分支预测失效时无需刷新全部流水，当错误指令加载和计算仍会导致一部分开销。分支预测中最核心的是分支目标缓冲区（<code>Branch Target Buffer</code>，简称<code>BTB</code>），每条分支指令执行后，都会BTB都会记录指令的地址及它的跳转信息。<code>BTB</code>一般比较小，并且采用Hash表的方式存入，在CPU取值时，直接将<code>PC</code>指针和<code>BTB</code>中记录对比来查找，如果找到了，就直接使用预测的跳转地址，如果没有记录，必须通过<code>cache</code>或内存取下一条指令。</p></li><li><p>利用流水线并发: 像<code>Pentium</code>处理器就有<code>U/V</code>两条流水，并且可以独自独立读写缓存，循环2可以将两条指令安排在不同流水线上执行，性能得到极大提升。另外两条流水线是非对称的，简单指令（<code>mpv,add,push,inc,cmp,lea</code>等）可以在两条流水上并行执行、位操作和跳转操作并发的前提是在特定流水线上工作、而某些复杂指令却只能独占CPU。</p></li><li><p>为了利用空间局部性，同时也为了覆盖数据从内存传输到CPU的延迟，可以在数据被用到之前就将其调入缓存，这一技术称为预取<code>Prefetch</code>，加载整个<code>cache</code>即是一种预取。CPU在进行计算过程中可以并行的对数据进行预取操作，因此预取使得数据/指令加载与CPU执行指令可以并行进行。</p></li><li><p>充分挖掘网卡的潜能：借助现代网卡支持的分流（<code>RSS</code>, <code>FDIR</code>）和卸载（<code>TSO</code>，<code>chksum</code>）等特性。</p></li></ul><h2 id="cache子系统" tabindex="-1"><a class="header-anchor" href="#cache子系统"><span>Cache子系统</span></a></h2><ul><li>一级Cache：4个指令周期，分为数据cache和指令cache，一般只有几十KB</li><li>二级Cache：12个指令周期，几百KB到几MB</li><li>三级Cache：26-31个指令周期，几MB到几十MB</li><li>TLB Cache：缓存内存中的页表项，减少CPU开销</li></ul><p>如何把内存中的内容放到cache中呢？这里需要映射算法和分块机制。当今主流块大小是64字节。</p><p>硬件Cache预取（Netburst为例）：</p><ul><li>只有两次<code>cache miss</code>才能激活预取机制，且2次的内存地址偏差不超过256或512字节</li><li>一个4KB的page内只定义一条<code>stream</code></li><li>能同时独立的追踪8条<code>stream</code></li><li>对4KB边界之外不进行预取</li><li>预取的数据放在二级或三级cache中</li><li>对<code>strong uncacheable</code>和<code>write combining</code>内存类型不预取</li></ul><p>硬件预取不一定能够提升性能，所以<code>DPDK</code>还借助软件预取尽量将数据放到cache中。另外，DPDK在定义数据结构的时候还保证了<code>cache line</code>对齐。</p><p>cache一致性</p><ul><li>原则是避免多个核访问同一个内存地址或数据结构</li><li>在数据结构上：每个核都有独立的数据结构</li><li>多个核访问同一个网卡：每个核都创建单独的接收队列和发送队列</li></ul><h2 id="huge-page" tabindex="-1"><a class="header-anchor" href="#huge-page"><span>Huge Page</span></a></h2><p>hugetlbfs有两个好处：</p><ul><li>第一是使用hugepage的内存所需的页表项比较少，对于需要大量内存的进程来说节省了很多开销，像oracle之类的大型数据库优化都使用了大页面配置；</li><li>第二是TLB冲突概率降低，TLB是cpu中单独的一块高速cache，采用hugepage可以大大降低TLB miss的开销。</li></ul><p>DPDK目前支持了2M和1G两种方式的hugepage。通过修改默认/etc/grub.conf中hugepage配置为<code>default_hugepagesz=1G hugepagesz=1G hugepages=32 isolcpus=0-22</code>，然后通过<code>mount –t hugetlbfs nodev /mnt/huge</code>就将hugepage文件系统hugetlbfs挂在/mnt/huge目录下，然后用户进程就可以使用mmap映射hugepage目标文件来使用大页面了。测试表明应用使用大页表比使用4K的页表性能提高10%-15%。</p><p>Linux系统启动后预留大页的方法</p><ul><li>非NUMA系统： <code>echo 1024 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</code></li><li>NUMA系统：<code>echo 1024 &gt; /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages</code></li><li>对于1G的大页，必须在系统启动的时候指定，不能动态预留.</li></ul><h2 id="data-direct-i-o-ddio" tabindex="-1"><a class="header-anchor" href="#data-direct-i-o-ddio"><span>Data Direct I/O (DDIO)</span></a></h2><p>DDIO使得外部网卡和CPU通过LLC cache直接交换数据，绕过了内存，增加了CPU处理报文的速度。</p><p>在Intel E5系列产品中，LLC Cache的容量提高到了20MB。</p><p>![DPDK Data Direct I/O](01. 简介.assets/dpdk-ddio.jpg)</p><h2 id="numa" tabindex="-1"><a class="header-anchor" href="#numa"><span>NUMA</span></a></h2><p><code>NUMA</code>来源于<code>AMD Opteron</code>微架构，处理器和本地内存之间有更小的延迟和更大的带宽；每个处理器还可以有自己的总线。处理器访问本地的总线和内存时延迟低，而访问远程资源时则要高。</p><p>![NUMA arch](01. 简介.assets/numa.jpg)</p><p><code>DPDK</code>充分利用了<code>NUMA</code>的特点</p><ul><li><code>Per-core memory</code>，每个核都有自己的内存，一方面是本地内存的需要，另一方面也是为了cache一致性</li><li>用本地处理器和本地内存处理本地设备上产生的数据</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">q </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rte_zmalloc_socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;fm10k&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">q</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> RTE_CACHE_LINE_SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> socket_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>CPU核心的几个概念：</p><ul><li>处理器核数（<code>cpu cores</code>）：每个物理CPUcore的个数</li><li>逻辑处理器核心数（<code>siblings</code>）：单个物理处理器超线程的个数</li><li>系统物理处理器封装ID（<code>physical id</code>）：也称为socket插槽，物理机处理器封装个数，物理CPU个数</li><li>系统逻辑处理器ID（<code>processor</code>）：逻辑CPU数，是物理处理器的超线程技术</li></ul><p><strong>CPU亲和性</strong></p><p>将进程与CPU绑定，提高了Cache命中率，从而减少内存访问损耗。CPU亲和性的主要应用场景为</p><ul><li>大量计算场景</li><li>运行时间敏感、决定性的线程，即实时线程</li></ul><p>相关工具</p><ul><li><code>sched_set_affinity()</code>、<code>sched_get_affinity()</code>内核函数</li><li><code>taskset</code>命令</li><li><code>isolcpus</code>内核启动参数：CPU绑定之后依然是有可能发生线程切换，可以借助<code>isolcpus=2,3</code>将cpu从内核调度系统中剥离。</li></ul><p><strong>DPDK中的CPU亲和性</strong></p><p>DPDK中<code>lcore</code>实际上是<code>EAL pthread</code>，每个<code>EAL pthread</code>都有一个<code>Thread Local Storage</code>的<code>_lcore_id</code>，<code>_lcore_id</code>与<code>CPU ID</code>是一致的。注意虽然默认是1:1关系，但可以通过<code>--lcores=&#39;&lt;lcore_set&gt;@&lt;cpu_set&gt;&#39;</code>来指定<code>lcore</code>的CPU亲和性，这样可以不是1:1的，也就是多个<code>lcore</code>还是可以亲和到同一个的核，这就需要注意调度的情况（以非抢占式无锁<code>rte_ring</code>为例）：</p><ul><li>单生产者、单消费者模式不受影响</li><li>多生产者、多消费者模式，调度策略为<code>SCHED_OTHER</code>时，性能会有所影响</li><li>多生产者、多消费者模式，调度策略为<code>SCHED_FIFO/SCHED_RR</code>，会产生死锁</li></ul><p>而在具体实现流程如下所示：</p><p>![cpuin](01. 简介.assets/cpupin.jpeg)</p><ul><li>DPDK通过读取<code>/sys/devices/system/cpu/cpuX/</code>目录的信息获取CPU的分布情况，将第一个核设置为MASTER，并通过<code>eal_thread_set_affinity()</code>为每个SLAVE绑定CPU</li><li>不同模块要调用<code>rte_eal_mp_remote_launch()</code>将自己的回调函数注册到DPDK中（<code>lcore_config[].f</code>）</li><li>每个核最终调用<code>eal_thread_loop()-&gt;回调函数</code>来执行真正的逻辑</li></ul><p><strong>指令并发</strong></p><p>借助<code>SIMD</code>（<code>Single Instruction Multiple Data</code>，单指令多数据）可以最大化的利用一级缓存访存的带宽，但对频繁的窄位宽数据操作就有比较大的副作用。DPDK中的<code>rte_memcpy()</code>在Intel处理器上充分利用了SSE/AVX的特点：优先保证Store指令存储的地址对齐，然后在每个指令周期指令2条Load的特新弥补一部分非对齐Load带来的性能损失。</p>',46)]))}const n=i(l,[["render",a],["__file","01. 简介.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/01.%20%E7%AE%80%E4%BB%8B.html","title":"DPDK简介","lang":"zh-CN","frontmatter":{"description":"DPDK简介 主流包处理硬件平台 硬件加速器：ASIC、FPGA 网络处理器 多核处理器 传统Linux网络驱动的问题 中断开销突出，大量数据到来会触发频繁的中断（softirq）开销导致系统无法承受 需要把包从内核缓冲区拷贝到用户缓冲区，带来系统调用和数据包复制的开销 对于很多网络功能节点来说，TCP/IP协议并非是数据转发环节所必需的 NAPI/N...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/01.%20%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"DPDK简介"}],["meta",{"property":"og:description","content":"DPDK简介 主流包处理硬件平台 硬件加速器：ASIC、FPGA 网络处理器 多核处理器 传统Linux网络驱动的问题 中断开销突出，大量数据到来会触发频繁的中断（softirq）开销导致系统无法承受 需要把包从内核缓冲区拷贝到用户缓冲区，带来系统调用和数据包复制的开销 对于很多网络功能节点来说，TCP/IP协议并非是数据转发环节所必需的 NAPI/N..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DPDK简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"DPDK简介","slug":"dpdk简介","link":"#dpdk简介","children":[{"level":2,"title":"主流包处理硬件平台","slug":"主流包处理硬件平台","link":"#主流包处理硬件平台","children":[]},{"level":2,"title":"传统Linux网络驱动的问题","slug":"传统linux网络驱动的问题","link":"#传统linux网络驱动的问题","children":[]},{"level":2,"title":"DPDK最佳实践","slug":"dpdk最佳实践","link":"#dpdk最佳实践","children":[]},{"level":2,"title":"Cache子系统","slug":"cache子系统","link":"#cache子系统","children":[]},{"level":2,"title":"Huge Page","slug":"huge-page","link":"#huge-page","children":[]},{"level":2,"title":"Data Direct I/O (DDIO)","slug":"data-direct-i-o-ddio","link":"#data-direct-i-o-ddio","children":[]},{"level":2,"title":"NUMA","slug":"numa","link":"#numa","children":[]}]}],"git":{},"readingTime":{"minutes":13.31,"words":3994},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/01. 简介.md","excerpt":"\\n<h2>主流包处理硬件平台</h2>\\n<ul>\\n<li>硬件加速器：<code>ASIC</code>、<code>FPGA</code></li>\\n<li>网络处理器</li>\\n<li>多核处理器</li>\\n</ul>\\n<h2>传统Linux网络驱动的问题</h2>\\n<ul>\\n<li>中断开销突出，大量数据到来会触发频繁的中断（<code>softirq</code>）开销导致系统无法承受</li>\\n<li>需要把包从内核缓冲区拷贝到用户缓冲区，带来系统调用和数据包复制的开销</li>\\n<li>对于很多网络功能节点来说，<code>TCP/IP</code>协议并非是数据转发环节所必需的</li>\\n<li><code>NAPI/Netmap</code>等虽然减少了内核到用户空间的数据拷贝，但操作系统调度带来的<code>cache</code>替换也会对性能产生负面影响</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/01. 简介.md","value":{"title":"01. 简介","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/01. 简介.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{n as comp,h as data};
