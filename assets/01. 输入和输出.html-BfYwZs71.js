import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-D9NcyM5y.js";const e={},p=t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h1><h2 id="流" tabindex="-1"><a class="header-anchor" href="#流"><span>流</span></a></h2><h3 id="system-out-system-in" tabindex="-1"><a class="header-anchor" href="#system-out-system-in"><span>System.out / System.in</span></a></h3><p>API: <code>java.lang.System 1.0</code></p><p>（流的概念和C++的Stream的概念很相似）</p><ul><li>标准输出流：<code>System.out.println</code></li><li>标准输入流：<code>System.in</code></li></ul><h4 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出"><span>格式化输出</span></a></h4><h5 id="printf" tabindex="-1"><a class="header-anchor" href="#printf"><span>printf</span></a></h5><p>Java SE 5.0沿用了C语言库函数中的printf方法。用法一样</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%8.2f&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="string-format" tabindex="-1"><a class="header-anchor" href="#string-format"><span>String.format</span></a></h5><p>可以使用静态的<code>String.format</code>方法创建一个格式化的字符串，而不打印输出</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, %s. Next year, you&#39;ll be %d&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h5><p>用于printf的转换符</p><table><thead><tr><th>转换符</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>d</td><td>十进制整数</td><td>159</td></tr><tr><td>x</td><td>十六进制整数</td><td>9f</td></tr><tr><td>o</td><td>八进制整数</td><td>237</td></tr><tr><td>f</td><td>定点浮点数</td><td>15.9</td></tr><tr><td>e</td><td>指数浮点数</td><td>1.59e+01</td></tr><tr><td>g</td><td>通用浮点数</td><td>————</td></tr><tr><td>a</td><td>十六进制浮点数</td><td>0x1.fccdp3</td></tr><tr><td>s</td><td>字符串</td><td>Hello</td></tr><tr><td>c</td><td>字符</td><td>H</td></tr><tr><td>b</td><td>布尔</td><td>True</td></tr><tr><td>h</td><td>散列码</td><td>4268b2</td></tr><tr><td>tx 或 Tx</td><td>日期时间</td><td>已经过时，应改为使用<code>java.time</code>类</td></tr><tr><td>%</td><td>百分号</td><td>%</td></tr><tr><td>n</td><td>与平台有关的行分隔符</td><td>————</td></tr></tbody></table><p>printf符的标志</p><table><thead><tr><th>标志</th><th>目的</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>打印正数和负数的符号</td><td>+3333.33</td></tr><tr><td>空格</td><td>在正数之前添加空格</td><td>|3333.33|</td></tr><tr><td>0</td><td>数字前面补0</td><td>003333.33</td></tr><tr><td>-</td><td>左对齐</td><td>|3333.33|</td></tr><tr><td>(</td><td>将负数括在括号内</td><td>(3333.33)</td></tr><tr><td>,</td><td>添加分组分隔符</td><td>3,333.33</td></tr><tr><td>#（f格式）</td><td>包含小数点</td><td>3,333.</td></tr><tr><td>#（x或0格式）</td><td>添加前缀0x或0</td><td>0xcafe</td></tr><tr><td>$</td><td>给定被格式化的参数索引。例如：%1$d, %1$x将以十进制和十六进制打印第一个参数</td><td>159 9F</td></tr><tr><td>&lt;</td><td>格式化前面说的数值。例如：%d%&lt;x以十进制和十六进制打印同一个数值</td><td>159 9F</td></tr></tbody></table><p>日期和时间转换符</p><p>[略]，不懂</p><p>格式说明符</p><p>[略]，不懂</p><h2 id="控制台-io" tabindex="-1"><a class="header-anchor" href="#控制台-io"><span>控制台 IO</span></a></h2><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><p>直接<code>System.out.println</code>就行</p><h3 id="scanner类" tabindex="-1"><a class="header-anchor" href="#scanner类"><span>Scanner类</span></a></h3><p>API: <code>java.util.Scanner 5.0</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span>

<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 构造一个Scanner对象，并与“标准输入流”System.in关联</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;What is your name?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// 输入一行（换行符作为分隔符）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入其他</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>						<span class="token comment">// 输入一个单词（空白符作为分隔符）</span>
in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// 输入一个整数</span>
in<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 输入一个浮点数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="console类" tabindex="-1"><a class="header-anchor" href="#console类"><span>Console类</span></a></h3><p>API: <code>java.io.Console 6</code></p><p>因为输入是可见的，所以Scanner类不适用于从控制台读取密码。Java SE 6特别引入了Console类实现这个目的</p><p>但不如采用Scanner方便。每次只能读取一行输入，而没有能够读取一个单词或一个数值的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Console</span> cons <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> username <span class="token operator">=</span> cons<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token string">&quot;User name: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> passwd <span class="token operator">=</span> cons<span class="token punctuation">.</span><span class="token function">readPassword</span><span class="token punctuation">(</span><span class="token string">&quot;Password: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件-io" tabindex="-1"><a class="header-anchor" href="#文件-io"><span>文件 IO</span></a></h2><p>访问文件与使用System.in和System.out一样容易，这就是抽象 “IO流” 这个概念的好处了。</p><p>简单来说就是将对多个不同IO设备的读写操作的相同的部分抽象了出来，成为了IO流</p><h3 id="scanner类-1" tabindex="-1"><a class="header-anchor" href="#scanner类-1"><span>Scanner类</span></a></h3><p>API: <code>java.util.Scanner 5.0</code></p><p>要想对文件进行读取，就需要一个用File对象构造一个<code>Scanner对象</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果文件名中包含反斜杠符号，就要记住在每个反斜杠之前再加一个额外的反斜杠：“c：\\\\mydirectory\\\\myfile.txt”</span>
<span class="token comment">// 如果省略字符编码，则会使用运行这个Java程序的机器的“默认编码”</span>

<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ERROR</span>
<span class="token comment">// 这样些的话：这个Scanner将字符串解释为数据（字符串），而不是文件名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="printwriter类" tabindex="-1"><a class="header-anchor" href="#printwriter类"><span>PrintWriter类</span></a></h3><p>API: <code>java.io.PrintWriter 1.1</code></p><p>如果想写入文件就需要构造一个<code>PrintWriter对象</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWeiter</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果文件不存在，创建该文件。</span>
<span class="token comment">// 可以像输出到System.out一样使用print、println以及printf命令。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动路径问题" tabindex="-1"><a class="header-anchor" href="#启动路径问题"><span>启动路径问题</span></a></h3><p>API: <code>java.nio.file.Paths 7</code></p><p>当指定一个相对文件名时</p><ul><li>文件位于Java虚拟机==<strong>启动路径</strong>==的相对位置</li><li>cmd: <code>java MyProg</code>时，启动路径就是命令解释器的当前路径</li><li>使用集成开发环境时：启动路径将由IDE控制</li></ul><p>可以使用下面的调用方式找到路径的位置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> dir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.dir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="读写多线程问题" tabindex="-1"><a class="header-anchor" href="#读写多线程问题"><span>读写多线程问题</span></a></h3><p>要记住一点：如果用一个不存在的文件构造一个Scanner，或者用一个不能被创建的文件名构造一个PrintWriter，那么就会发生异常。Java编译器认为这些异常比“被零除”异常更严重。</p><p>已经知道有可能出现“输入/输出”异常。这需要在main方法中用throws子句标记</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myfile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),o=[p];function c(l,i){return a(),s("div",null,o)}const u=n(e,[["render",c],["__file","01. 输入和输出.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/03.%20%E4%BA%A4%E4%BA%92/01.%20%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 输入输出 流 System.out / System.in API: java.lang.System 1.0 （流的概念和C++的Stream的概念很相似） 标准输出流：System.out.println 标准输入流：System.in 格式化输出 printf Java SE 5.0沿用了C语言库函数中的printf方法。用法一样...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/03.%20%E4%BA%A4%E4%BA%92/01.%20%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 输入输出 流 System.out / System.in API: java.lang.System 1.0 （流的概念和C++的Stream的概念很相似） 标准输出流：System.out.println 标准输入流：System.in 格式化输出 printf Java SE 5.0沿用了C语言库函数中的printf方法。用法一样..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"输入输出","slug":"输入输出","link":"#输入输出","children":[{"level":2,"title":"流","slug":"流","link":"#流","children":[{"level":3,"title":"System.out / System.in","slug":"system-out-system-in","link":"#system-out-system-in","children":[{"level":4,"title":"格式化输出","slug":"格式化输出","link":"#格式化输出","children":[{"level":5,"title":"printf","slug":"printf","link":"#printf","children":[]},{"level":5,"title":"String.format","slug":"string-format","link":"#string-format","children":[]},{"level":5,"title":"表","slug":"表","link":"#表","children":[]}]}]}]},{"level":2,"title":"控制台 IO","slug":"控制台-io","link":"#控制台-io","children":[{"level":3,"title":"输出","slug":"输出","link":"#输出","children":[]},{"level":3,"title":"Scanner类","slug":"scanner类","link":"#scanner类","children":[]},{"level":3,"title":"Console类","slug":"console类","link":"#console类","children":[]}]},{"level":2,"title":"文件 IO","slug":"文件-io","link":"#文件-io","children":[{"level":3,"title":"Scanner类","slug":"scanner类-1","link":"#scanner类-1","children":[]},{"level":3,"title":"PrintWriter类","slug":"printwriter类","link":"#printwriter类","children":[]},{"level":3,"title":"启动路径问题","slug":"启动路径问题","link":"#启动路径问题","children":[]},{"level":3,"title":"读写多线程问题","slug":"读写多线程问题","link":"#读写多线程问题","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.63,"words":1090},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Java/03. 交互/01. 输入和输出.md","autoDesc":true}');export{u as comp,k as data};
