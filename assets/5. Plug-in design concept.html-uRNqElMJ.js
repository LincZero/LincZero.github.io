import{_ as d,c as o,e as n,a as l,f as s,b as a,d as t,r,o as c}from"./app-BDGujT_T.js";const h={};function p(k,e){const i=r("RouteLink");return c(),o("div",null,[e[8]||(e[8]=n(`<p>(The author&#39;s thoughts on the development of this plugin are recorded here...)</p><p>AnyBlock 最容易理解的一个功能就是 List转Table，但这并不是插件的核心，只是一种比较有用的附带功能。</p><h1 id="插件类别理念" tabindex="-1"><a class="header-anchor" href="#插件类别理念"><span>插件类别理念</span></a></h1><h2 id="插件分类" tabindex="-1"><a class="header-anchor" href="#插件分类"><span>插件分类</span></a></h2><p>首先我们来分类一下渲染类的插件（我大体将OB插件分为管理类、辅助输入类、和渲染类）<br> 渲染类中：现在大多数的特殊语法解析，有五种</p><ol><li>大都在<strong>代码框</strong>里做，比较著名的就是Ad的代码块语法<br> （感觉Ad的代码框当“特殊引用块”的做法就有点难受了，甚至会觉得Callout是上位替代品）</li><li>callout是在<strong>引用框</strong>里做，其他的没见过</li><li><strong>整篇md文章</strong>作为语法的解析，例如 Kanban</li><li><strong>前缀方式</strong>，从前缀标识到空行为止的区域作为特殊语法格式的区域。优点是这是表格的超集，完全兼容传统表格的语法</li><li><strong>标签方式</strong>（<s>不过现有接口没有直接支持，如果要实现这种方式，就得自己重写一套md后处理器</s>，好了，写出来了）</li></ol><h2 id="他们各自的优缺点" tabindex="-1"><a class="header-anchor" href="#他们各自的优缺点"><span>他们各自的优缺点</span></a></h2><table><thead><tr><th style="text-align:left;">方式</th><th></th><th style="text-align:left;">缺点</th><th style="text-align:right;">优点</th><th>插件举例</th></tr></thead><tbody><tr><td style="text-align:left;">方式1</td><td></td><td style="text-align:left;"><strong>不能进行Md语法解析</strong>， <br> <strong>解析语法失效会变得非常难看</strong> ，<br><strong>不属于嵌套容器，虽然能强行嵌套</strong></td><td style="text-align:right;">可以使用代码解析来着色，适合代码内容。能避免md语法干扰</td><td>插件如：<code>dataview</code>, <code>mermaid</code>等 <br> 反例插件非常多，如：<code>Ad的代码框语法</code>、<code>聊天记录软件</code>(支持Md信息发送版)、里面嵌套有Md语法或图片的所有插件、<code>mindmap</code>(list生成脑图)</td></tr><tr><td style="text-align:left;">方式2</td><td></td><td style="text-align:left;"><strong>每行&quot;&gt;&quot;符号和嵌套缩进非常麻烦</strong>，特别是内容非常长时<br>（相较于代码块）</td><td style="text-align:right;">可以使用Md语法解析来着色</td><td>插件如：<code>Ad的Callout</code>语法</td></tr><tr><td style="text-align:left;">方式3</td><td></td><td style="text-align:left;">整篇文章使用</td><td style="text-align:right;">有方法2所有的优点，此外还不需要加代码块和引用块</td><td>插件如：<code>kanban</code>，<code>mindmap</code></td></tr><tr><td style="text-align:left;">方式4</td><td></td><td style="text-align:left;">因为需要空行作为结束符，一般不能作为嵌套容器，也意味着内容不能有空格</td><td style="text-align:right;">有方法2,3所有的优点。此外标识符只需要加在前面</td><td>插件如：<code>list-callout</code>， <br> <code>Table Extended</code>的<code>-tx-</code>前缀（不要也行但偶尔出错），<br><code> checklist</code>的<code>#todo</code>前缀（这个是全库识别与单独渲染），<br><code>AnyBlock</code>的局部和标题选择器</td></tr><tr><td style="text-align:left;">方式5<br>--------</td><td></td><td style="text-align:left;">如果用了嵌套语法由于没缩进会比较难找</td><td style="text-align:right;">其实就是方式4的分支。有方法2,3所有的优点。此外加标签只需要加在前后即可</td><td>插件如：HTML代码、<code>AnyBlock</code>的首尾选择器</td></tr></tbody></table><h2 id="为什么大部分插件都通过代码块实现" tabindex="-1"><a class="header-anchor" href="#为什么大部分插件都通过代码块实现"><span>为什么大部分插件都通过代码块实现？</span></a></h2><p>上面我将特殊语法分为了五大类，然后你们会发现，OB的语法解析类插件大多数是通过方式一实现，为什么？<br> 可能这些特殊语法需要被包括起来、正文无关、害怕特殊语法的格式会被误识别（需要避免被md语法解析），这些都是原因。</p><p>但有的插件明显是不利于用方式一来实现的，但他们依然会使用，例如：Ob未支持callout语法之前的ad插件，就是一个绝佳的例子<br> （没有贬低这个插件的意思，ad插件也对callout语法提供了大量的支持，可以通过命令快捷插入callout语法（不是ad语法），设置面板可以同时扩展ad语法和callout语法的类型，都是非常好用的。像 <code>BT示例库</code> 就利用了ad插件扩展callout语法类别的方式，区分了每个块的class类型，从而进行扩展）</p><p>目前大部分的插件都能通过代码块渲染特殊格式的一个很大的原因，是obsidian提供了一个很方便的api接口：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerMarkdownCodeBlockProcessor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chat-qq&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Chat_qq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要实现这么一处接口，就可以轻松在实时和渲染模式中实现局部文本在特殊格式下渲染</p><h2 id="语法块转化" tabindex="-1"><a class="header-anchor" href="#语法块转化"><span>语法块转化</span></a></h2><p>但正如前面所说的，各种解析语法的 选择器 (这里将选择特殊语法范围的方式称为选择器) 都是各有弊端和长处的。<br> AnyBlock做的，就是混淆这些语法的选择方式。无论是引用块选择、代码块选择、前后缀选择、还是其他方式。都能通过AnyBlock互相转化</p><p>AnyBlock有两种方式做到这一点：</p>`,17)),l("ol",null,[l("li",null,[e[1]||(e[1]=s("通过")),a(i,{to:"/MdNote_Public/ProductDoc/AnyBlock/v2%20old%20docs/docs/en/5.%20%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%20-%20%E5%9F%BA%E4%BA%8E%E7%90%86%E5%BF%B5%E7%9A%84%E7%81%B5%E6%B4%BB%E6%93%8D%E4%BD%9C.html"},{default:t(()=>e[0]||(e[0]=[s("块转化")])),_:1}),e[2]||(e[2]=s("功能，将不在代码块内的文本假装成是在代码块内。")),e[3]||(e[3]=l("br",null,null,-1)),e[4]||(e[4]=s(" 你可以通过该方式处理几乎所有的使用代码块的插件"))]),l("li",null,[e[6]||(e[6]=s("插件开发人员可以使用AnyBlock提供的")),a(i,{to:"/MdNote_Public/ProductDoc/AnyBlock/v2%20old%20docs/docs/en/9.%20For%20Developer.html"},{default:t(()=>e[5]||(e[5]=[s("新接口")])),_:1}),e[7]||(e[7]=s("，注册新的处理器来处理"))])]),e[9]||(e[9]=n(`<p>此外，AnyBlock还将降低开发难度</p><ol><li>原本想要实现一个代码块以外的特殊语法解析程序，可能非常困难（例如你想做个和callout语法相似功能的插件）<br> 但你可以选择AnyBlock作为前置插件，提醒用户先安装该插件，你就可以只用实现OB提供的代码块注册模块，而不用实现其他复杂的东西！</li><li>文本处理器可以叠加使用，即可以复用组件，处理器之间松耦合，有的环节可以使用现有的工具，而不再需要自己造轮子</li></ol><h1 id="插件类别理念-为什么要用anyblock" tabindex="-1"><a class="header-anchor" href="#插件类别理念-为什么要用anyblock"><span>插件类别理念 - 为什么要用AnyBlock？</span></a></h1><p>为什么要用AnyBlock？<br> 前面说了原理，可能不太直观，这里举几个可以使用AnyBlock优化原有插件的例子。</p><h2 id="callout杂谈" tabindex="-1"><a class="header-anchor" href="#callout杂谈"><span>callout杂谈</span></a></h2><p>前面的优缺点可能不那么直观，现在看一下实例：<br> （请反复切换 源码、实时、渲染模式 查看这一节内容）</p><h3 id="ad插件写法" tabindex="-1"><a class="header-anchor" href="#ad插件写法"><span>Ad插件写法</span></a></h3><p>在callout语法出来之前，写起来是这样的：</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><h3 id="标题1" tabindex="-1"><a class="header-anchor" href="#标题1"><span>标题1</span></a></h3><h3 id="标题2" tabindex="-1"><a class="header-anchor" href="#标题2"><span>标题2</span></a></h3><h3 id="标题3" tabindex="-1"><a class="header-anchor" href="#标题3"><span>标题3</span></a></h3><ul><li>一个普通的列表 <ul><li>一个普通的列表 <ul><li>一个普通的列表</li></ul></li><li><ul><li>一个普通的列表</li></ul></li></ul></li></ul></div></div><h3 id="callout写法" tabindex="-1"><a class="header-anchor" href="#callout写法"><span>Callout写法</span></a></h3><p>在callout语法出来之后，写起来是这样的：</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><h3 id="标题01" tabindex="-1"><a class="header-anchor" href="#标题01"><span>标题01</span></a></h3><h3 id="标题02" tabindex="-1"><a class="header-anchor" href="#标题02"><span>标题02</span></a></h3><h3 id="标题03" tabindex="-1"><a class="header-anchor" href="#标题03"><span>标题03</span></a></h3><ul><li>一个普通的列表</li><li>一个普通的列表 <ul><li>一个普通的列表</li><li>一个普通的列表</li></ul></li></ul></div></div><h3 id="any-block写法" tabindex="-1"><a class="header-anchor" href="#any-block写法"><span>Any-Block写法</span></a></h3><p>用Any-Block（本插件），写起来是这样的（写法非常自由）</p><p>写法一：首尾选择器写法 (弃用，换用mdit语法)</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">code</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ad-note</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#### 标题1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#### 标题2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#### 标题3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法二：块转化写法（如果ob不支持callout语法，可以这样写，但ob 0.14支持了，现在就没必要了，这里仅供演示）</p><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><blockquote><p>ad-note</p><h3 id="标题11" tabindex="-1"><a class="header-anchor" href="#标题11"><span>标题11</span></a></h3><h3 id="标题12" tabindex="-1"><a class="header-anchor" href="#标题12"><span>标题12</span></a></h3><h3 id="标题13" tabindex="-1"><a class="header-anchor" href="#标题13"><span>标题13</span></a></h3><ul><li>一个普通的列表</li><li>一个普通的列表 <ul><li>一个普通的列表</li><li>一个普通的列表</li></ul></li></ul></blockquote></div></div></div><p>写法三：标题选择器写法：</p><div class="language-md line-numbers-mode" data-highlighter="shiki" data-ext="md" data-title="md" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">!note</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">#### 标题1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">##### 标题2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">##### 标题3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  -</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 一个普通的列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表转表格-list2table" tabindex="-1"><a class="header-anchor" href="#列表转表格-list2table"><span>列表转表格 list2table</span></a></h2><p>这是 AnyBlock 自带的一项比较好用的功能，仔细想想，该功能的实现是否正正是依赖于AnyBlock的范围选择再处理的能力？<br> 固然可以将列表内容放入代码块内再渲染，但是不是就没那么好用了？</p><p>题外话一<br> 其实作者是先想到了要实现 <code>列表转表格</code> 这一插件，然后思考如果要实现这一插件会有什么问题，然后才总结了各种插件进行“特殊语法解析”的方式，才提出了 <code>AnyBlock</code> 这个插件。提出了 “首尾选择器” 和只需要标注头部的 “列表 引用块 代码块 标题 等选择器”</p><p>题外话二<br> 在实现这个插件之前，其实还有两种方式来实现 <code>列表转表格</code> 的功能。<br> 一种是 <code>Bosidian群群友@九炎</code> 写的纯css实现。缺点是……略丑<br> （不需要头部标识不算较于ab的优点，其实anyblock也可以不需要头部标识选择列表。将设置里的 <code>总是选择</code> 开启就行，但强烈不建议）<br> （这里透露了一点实现细节：AnyBlock不是先选择的头部再选则下面的，而是先选择块，再看上面有没有头部信息的）<br> 另一种是我用 dataviewjs 硬写的模拟。缺点是没有真正合并单元格，用<code>^^</code>符号来假装单元格被合并了</p><h2 id="chat-view-qq-with-md" tabindex="-1"><a class="header-anchor" href="#chat-view-qq-with-md"><span>chat-view-qq（with md）</span></a></h2><p>再来举点用处：<br> 比如我之前写了一个聊天记录插件 chat-view-qq，能快捷记录聊天对话</p><p>我后来想要将说出来的话可以以md格式被渲染，这个效果我可以做出来，但会有一个问题：<br> 在代码块里写md代码会非常奇怪，就像ob不支持callout语法之前的ad插件的写法</p><h2 id="bt示例库版callout优化" tabindex="-1"><a class="header-anchor" href="#bt示例库版callout优化"><span>BT示例库版callout优化</span></a></h2><p>BT示例库里，很多callout扩展效果用AnyBlock来写，语法上会更加简单（不需要为了方便css选择器选择而去使用不太方便的写发）<br> 例如时间线、多分栏、等等。</p><h2 id="折叠或压缩长代码" tabindex="-1"><a class="header-anchor" href="#折叠或压缩长代码"><span>折叠或压缩长代码</span></a></h2><p>在AB插件自带的很多处理器上，你都会发现，这些处理器处理的范围如果只能写在代码块或引用块里，都不会那么强大。<br> 例如：自动折叠代码块、或代码块超长时自动折叠一部分、代码转文档等。直接在代码块上面写上处理器就能做到很好的效果，简单快捷</p><h1 id="列表转化理念" tabindex="-1"><a class="header-anchor" href="#列表转化理念"><span>列表转化理念</span></a></h1><p>AB的核心能力是范围选择并处理，但很多人对该特性缺乏了解。<br> 反而更多人可能会因为列表转表格或其他树形图而使用AnyBlock，所以有人可能会疑惑这插件为啥不叫List2Table或List2Tree。</p><p>从功能上讲，列表转化依赖于AnyBlock选择器，是一种功能扩展。<br> 但从开发者的实现意图上，列表转树类结构也确实是AB插件的核心之一。</p><h2 id="共性-树结构" tabindex="-1"><a class="header-anchor" href="#共性-树结构"><span>共性 - 树结构</span></a></h2><p>树结构是一种很好用的结构，人类可读性非常高，看起来也很清晰。<br> 列表可以表示一种树结构，还有很多东西可以表示树结构，例如有一定限制的可跨行合并的表格、一定限制的流程图、<br> 一定限制的思维导图、括弧包含图、树形树状图，等等</p><p>那么为什么不能让他们互相转化呢？</p><h2 id="代替md表格" tabindex="-1"><a class="header-anchor" href="#代替md表格"><span>代替md表格</span></a></h2><p>在我看来，ab扩展的列表远比md的表格好用。<br> 为了完全代替md原生的表格写法，我为启用列表转表格的列表添加了两项扩展操作：</p><ul><li>可以用 <code>| </code> 进行内联分隔，就像表格一样（未来可能能支持其他内联分割符，如<code>:</code>、<code>&amp;</code>、<code>/|*/</code>）</li><li>可以在第一行前面加上 <code>&gt; </code> 表示表头</li></ul><p>下面我们来对比一下</p>`,41)),e[10]||(e[10]=l("div",{class:"ab-note drop-shadow"},[l("table",{class:"ab-table ab-branch-table",modet:"true"},[l("tbody",null,[l("tr",null,[l("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[l("div",null,[l("p",null,"对比项")])]),l("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[l("div",null,[l("p",null,"例子")])]),l("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[l("div",null,[l("p",null,"源代码可读性")])]),l("td",{rowspan:"1",col_index:"3",class:"markdown-rendered"},[l("div",null,[l("p",null,"扩展性")])]),l("td",{rowspan:"1",col_index:"4",class:"markdown-rendered"},[l("div",null,[l("p",null,"书写")])]),l("td",{rowspan:"1",col_index:"5",class:"markdown-rendered"},[l("div",null,[l("p",null,"表格直接编辑")])]),l("td",{rowspan:"1",col_index:"6",class:"markdown-rendered"},[l("div",null,[l("p",null,"数据性")])])]),l("tr",null,[l("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[l("div",null,[l("p",null,"ab列表")])]),l("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[l("div",null,[l("p",null,"例子"),l("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text","data-title":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[l("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[l("code",null,[l("span",{class:"line"},[l("span",null,"[2table]")]),s(`
`),l("span",{class:"line"},[l("span",null," - 测试1|测试2")]),s(`
`),l("span",{class:"line"},[l("span",null," - 测试3|测试4")])])]),l("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[l("div",{class:"line-number"}),l("div",{class:"line-number"}),l("div",{class:"line-number"})])])])]),l("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[l("div",null,[l("p",null,"极高，且在单元格内容较多时表现更出色")])]),l("td",{rowspan:"1",col_index:"3",class:"markdown-rendered"},[l("div",null,[l("p",null,[s("允许嵌套md"),l("br"),s(" 暂不允许左右中对齐"),l("br"),s(" 允许一定程度合并单元格")])])]),l("td",{rowspan:"1",col_index:"4",class:"markdown-rendered"},[l("div",null,[l("p",null,"快")])]),l("td",{rowspan:"1",col_index:"5",class:"markdown-rendered"},[l("div",null,[l("p",null,"新插件，暂时没有，但理论上可扩展做到")])]),l("td",{rowspan:"1",col_index:"6",class:"markdown-rendered"},[l("div",null,[l("p",null,[s("强，数据和显示分离，"),l("br"),s(" 未来制作导出为数据的扩展都很方便")])])])]),l("tr",null,[l("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[l("div",null,[l("p",null,"md表格")])]),l("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[l("div",null,[l("p",null,"例子"),l("div",{class:"language-text line-numbers-mode","data-highlighter":"shiki","data-ext":"text","data-title":"text",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[l("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[l("code",null,[l("span",{class:"line"},[l("span",null,"|测试1|测试2|")]),s(`
`),l("span",{class:"line"},[l("span",null,"|---  |---  |")]),s(`
`),l("span",{class:"line"},[l("span",null,"|测试3|测试4|")])])]),l("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[l("div",{class:"line-number"}),l("div",{class:"line-number"}),l("div",{class:"line-number"})])])])]),l("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[l("div",null,[l("p",null,"极高，但在内嵌长文本（如图片或大段文字）表现不佳")])]),l("td",{rowspan:"1",col_index:"3",class:"markdown-rendered"},[l("div",null,[l("p",null,[s("允许少量md样式"),l("br"),s(" 允许左右中对齐"),l("br"),s(" 使用插件table-extend才能合并")])])]),l("td",{rowspan:"1",col_index:"4",class:"markdown-rendered"},[l("div",null,[l("p",null,"中等")])]),l("td",{rowspan:"1",col_index:"5",class:"markdown-rendered"},[l("div",null,[l("p",null,"可用enhance等插件")])]),l("td",{rowspan:"1",col_index:"6",class:"markdown-rendered"},[l("div",null,[l("p",null,"弱")])])])])])],-1))])}const g=d(h,[["render",p],["__file","5. Plug-in design concept.html.vue"]]),b=JSON.parse(`{"path":"/MdNote_Public/ProductDoc/AnyBlock/v2%20old%20docs/docs/en/5.%20Plug-in%20design%20concept.html","title":"插件类别理念","lang":"zh-CN","frontmatter":{"description":"(The author's thoughts on the development of this plugin are recorded here...) AnyBlock 最容易理解的一个功能就是 List转Table，但这并不是插件的核心，只是一种比较有用的附带功能。 插件类别理念 插件分类 首先我们来分类一下渲染类的插件（我大体将OB插件分为管...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/ProductDoc/AnyBlock/v2%20old%20docs/docs/en/5.%20Plug-in%20design%20concept.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"插件类别理念"}],["meta",{"property":"og:description","content":"(The author's thoughts on the development of this plugin are recorded here...) AnyBlock 最容易理解的一个功能就是 List转Table，但这并不是插件的核心，只是一种比较有用的附带功能。 插件类别理念 插件分类 首先我们来分类一下渲染类的插件（我大体将OB插件分为管..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"插件类别理念\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"插件类别理念","slug":"插件类别理念","link":"#插件类别理念","children":[{"level":2,"title":"插件分类","slug":"插件分类","link":"#插件分类","children":[]},{"level":2,"title":"他们各自的优缺点","slug":"他们各自的优缺点","link":"#他们各自的优缺点","children":[]},{"level":2,"title":"为什么大部分插件都通过代码块实现？","slug":"为什么大部分插件都通过代码块实现","link":"#为什么大部分插件都通过代码块实现","children":[]},{"level":2,"title":"语法块转化","slug":"语法块转化","link":"#语法块转化","children":[]}]},{"level":1,"title":"插件类别理念 - 为什么要用AnyBlock？","slug":"插件类别理念-为什么要用anyblock","link":"#插件类别理念-为什么要用anyblock","children":[{"level":2,"title":"callout杂谈","slug":"callout杂谈","link":"#callout杂谈","children":[{"level":3,"title":"Ad插件写法","slug":"ad插件写法","link":"#ad插件写法","children":[]},{"level":3,"title":"Callout写法","slug":"callout写法","link":"#callout写法","children":[]},{"level":3,"title":"Any-Block写法","slug":"any-block写法","link":"#any-block写法","children":[]}]},{"level":2,"title":"列表转表格 list2table","slug":"列表转表格-list2table","link":"#列表转表格-list2table","children":[]},{"level":2,"title":"chat-view-qq（with md）","slug":"chat-view-qq-with-md","link":"#chat-view-qq-with-md","children":[]},{"level":2,"title":"BT示例库版callout优化","slug":"bt示例库版callout优化","link":"#bt示例库版callout优化","children":[]},{"level":2,"title":"折叠或压缩长代码","slug":"折叠或压缩长代码","link":"#折叠或压缩长代码","children":[]}]},{"level":1,"title":"列表转化理念","slug":"列表转化理念","link":"#列表转化理念","children":[{"level":2,"title":"共性 - 树结构","slug":"共性-树结构","link":"#共性-树结构","children":[]},{"level":2,"title":"代替md表格","slug":"代替md表格","link":"#代替md表格","children":[]}]}],"git":{},"readingTime":{"minutes":10.25,"words":3076},"filePathRelative":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/5. Plug-in design concept.md","excerpt":"<p>(The author's thoughts on the development of this plugin are recorded here...)</p>\\n<p>AnyBlock 最容易理解的一个功能就是 List转Table，但这并不是插件的核心，只是一种比较有用的附带功能。</p>\\n<h1>插件类别理念</h1>\\n<h2>插件分类</h2>\\n<p>首先我们来分类一下渲染类的插件（我大体将OB插件分为管理类、辅助输入类、和渲染类）<br>\\n渲染类中：现在大多数的特殊语法解析，有五种</p>\\n<ol>\\n<li>大都在<strong>代码框</strong>里做，比较著名的就是Ad的代码块语法<br>\\n（感觉Ad的代码框当“特殊引用块”的做法就有点难受了，甚至会觉得Callout是上位替代品）</li>\\n<li>callout是在<strong>引用框</strong>里做，其他的没见过</li>\\n<li><strong>整篇md文章</strong>作为语法的解析，例如 Kanban</li>\\n<li><strong>前缀方式</strong>，从前缀标识到空行为止的区域作为特殊语法格式的区域。优点是这是表格的超集，完全兼容传统表格的语法</li>\\n<li><strong>标签方式</strong>（<s>不过现有接口没有直接支持，如果要实现这种方式，就得自己重写一套md后处理器</s>，好了，写出来了）</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[{"title":"9. For Developer","link":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/9. For Developer.html"}],"backlink":[{"title":"2. Use example - QuoteSelector and CodeSelector","link":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/2. Use example - QuoteSelector and CodeSelector.html"}],"localMap":{"nodes":[{"id":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/5. Plug-in design concept.md","value":{"title":"5. Plug-in design concept","path":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/5. Plug-in design concept.md","outlink":["MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/9. For Developer.md"],"backlink":["MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/2. Use example - QuoteSelector and CodeSelector.md"]}},{"id":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/9. For Developer.md","value":{"title":"9. For Developer","path":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/9. For Developer.md","outlink":[],"backlink":[]}},{"id":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/2. Use example - QuoteSelector and CodeSelector.md","value":{"title":"2. Use example - QuoteSelector and CodeSelector","path":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/2. Use example - QuoteSelector and CodeSelector.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/5. Plug-in design concept.md","target":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/9. For Developer.md"},{"source":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/2. Use example - QuoteSelector and CodeSelector.md","target":"MdNote_Public/ProductDoc/AnyBlock/v2 old docs/docs/en/5. Plug-in design concept.md"}]}}}`);export{g as comp,b as data};
