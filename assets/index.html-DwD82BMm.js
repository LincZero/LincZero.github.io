import{_ as s,e as a,g as n,o as l}from"./app-EuS-Ookm.js";const e={};function t(p,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="readme" tabindex="-1"><a class="header-anchor" href="#readme"><span>README</span></a></h1><h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言"><span>引言</span></a></h2><p>先读：[../How to build](../How to build.md)</p><p>在那篇文章中，说了各种编程语言/框架项目的编译/运行流程。而其中cpp在编译流中工具的种类比较多、选择比较灵活。依然是之前的四个通用步骤</p><ol><li>安装通用环境/依赖</li><li>下载/编写项目</li><li>安装项目专用环境/依赖</li><li>运行/编译项目</li></ol><p>像JavaScript就是：</p><ul><li>准备node.js、npm/pnpm/xpm等环境</li><li>下载/编写项目</li><li>安装依赖，如 <code>npm install</code></li><li>运行/编译项目，如 <code>npm run build</code></li></ul><h2 id="step1-通用环境-依赖" tabindex="-1"><a class="header-anchor" href="#step1-通用环境-依赖"><span>step1 通用环境/依赖</span></a></h2><ul><li>windows是去node官网安装node.js</li><li>linux直接用命令安装 (如apt，但一般这样安装版本会很旧) <ul><li>重点：linux 更新和版本管理问题</li></ul></li></ul><h2 id="step2-下载-编写项目" tabindex="-1"><a class="header-anchor" href="#step2-下载-编写项目"><span>step2 下载/编写项目</span></a></h2><p>略</p><h2 id="step3-项目环境-依赖" tabindex="-1"><a class="header-anchor" href="#step3-项目环境-依赖"><span>step3 项目环境/依赖</span></a></h2><p>略</p><h2 id="step4-编译-运行" tabindex="-1"><a class="header-anchor" href="#step4-编译-运行"><span>step4 编译/运行</span></a></h2><p>分以下几种情况：</p><ul><li>解释环境的运行：npm run dev</li><li>编译为静态资源: npm run build</li><li>编译为非解释环境可用的可执行程序</li></ul><p>这里可以选择很多东西，Next还是CommondJS、构建打包器、ts转js</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ----------------- ts编译器 ------------------------</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ts-node/tsc</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 介绍: ts编译器</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应依赖: \`npm install -D ts-node\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应配置: \`tsconfig.json\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;ts:dev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ts-node src/index.ts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;tsc:build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tsc -noEmit -skipLibCheck &amp;&amp; node esbuild.config.mjs production&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ----------------- 打包工具 -------------------------</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // node esbuild</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 介绍: 打包工具    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应依赖: \`npm install -D esbuild\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应配置: \`esbuild.config.mjs\`/\`esbuild.config.ts\`/\`esbuild.js\`</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;esbuild:dev&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;node esbuild.config.mjs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // vite</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 介绍: 打包工具，vue项目比较常用这个</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应依赖: \`npm install -D vite\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应配置: \`vite.config.js\`</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;vite:dev1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vite build --watch --mode=development&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;vite:dev&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vite --config ./src/App/vite.config.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">		&quot;vite:build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vite build --config ./src/App/vite.config.js&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // webpack</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 介绍: 打包工具。以前用这个，现在用得不多了</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应配置: \`webpack.config.js\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ----------------- 可执行程序生成器 ------------------</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // pkg</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 介绍: 可执行程序生成器。构建无需node.js依赖的可执行程序</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应依赖: \`npm install -D pkg\`</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应配置: package.json里的pkg字段</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;pkg:build&quot;</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;pkg . --out-path build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按功能分类：</p><ul><li>ts-node/tsc: ts编译器</li><li>vite/esbulid/webpack: 打包器。可以包括编译器的功能，可以减少文件数量 (看情况，像插件一般减少为一，网络资源就根据只加载部分资源和cdn加速的情况来减少)，可以压缩文件大小，等</li><li>pkg: 可执行程序生成器</li></ul><h3 id="打包器、配置" tabindex="-1"><a class="header-anchor" href="#打包器、配置"><span>打包器、配置</span></a></h3><p>略</p><h3 id="可执行文件" tabindex="-1"><a class="header-anchor" href="#可执行文件"><span>可执行文件</span></a></h3><p>其中重点说一下怎么打包为可执行文件:</p><h4 id="pkg-要用分支版本" tabindex="-1"><a class="header-anchor" href="#pkg-要用分支版本"><span>Pkg (要用分支版本)</span></a></h4><p>参考: https://zhuanlan.zhihu.com/p/66411743</p><p>Pkg可将 <a href="https://zhida.zhihu.com/search?content_id=102886924&amp;content_type=Article&amp;match_order=1&amp;q=Node.js&amp;zhida_source=entity" target="_blank" rel="noopener noreferrer">Node.js</a> 项目打包为一个单独的可执行文件，可在未安装Nodejs的机器上运行。支持win、linux等多系统。</p><p>注意：https://github.com/vercel/pkg 官方仓库已经存档弃用，官方说明如下：</p><div class="callout" data-callout="warning"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-alert-triangle"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg></div><div class="callout-title-inner">Warning</div></div><div class="callout-content"><p></p><p>pkg has been deprecated with 5.8.1 as the last release. There are a number of successful forked versions of pkg already with various feature additions. Further, we’re excited about Node.js 21’s support for single executable applications. Thank you for the support and contributions over the years. The repository will remain open and archived.</p><p>PKG已在5.8.1版本中弃用。pkg已经有了许多成功的分支版本，并添加了各种功能。此外，我们对 <strong>Node.js 21</strong> 对单个可执行应用程序的支持感到兴奋。感谢您多年来的支持和贡献。存储库将保持打开状态并存档。</p></div></div><p>（话说我刚开始没留意到，直接用了。后面报错找不到 node20 相关的东西，然后去github搜，才发现不维护了）</p><p>所以现在有两种选择：</p><ol><li><strong>使用已经被开发并且有新增功能的 fork 版本</strong>：你可以选择一个已经成功 fork 并且添加了新功能的 pkg 版本。这些 fork 版本通常会继续维护，并且可能会有你需要的功能。 <ul><li>这里我调研了一下，有个 <a href="https://github.com/vercel/pkg-fetch" target="_blank" rel="noopener noreferrer">Vercel/pkg-fetch</a></li></ul></li><li><strong>升级到 Node.js 21</strong>：Node.js 21 支持单一可执行文件应用程序，你可以考虑升级到 Node.js 21 并使用内置的功能来替代 pkg。</li></ol><h4 id="esa-node21新特性" tabindex="-1"><a class="header-anchor" href="#esa-node21新特性"><span>ESA (Node21新特性)</span></a></h4><p>从21版本开始支持，但这里复习下：Node的版本和Linux一样，都遵循双数LTS，单数beta的原则。所以我这里用Node22</p><blockquote><p>笔者写到这里的时候，2025-03-18，官方上显示的最新版本为：Node.js v22.14.0 LTS，beta v23.10.0</p></blockquote><p>核心：<strong>原生单可执行文件（SEA）功能</strong></p><ul><li>Node.js 21 开始原生支持<strong>单可执行应用</strong>（Single Executable Applications），无需第三方工具即可将项目打包为独立可执行文件。这是官方推荐的长期方案 <code>[citation:用户提供]</code>。</li><li>优势： <ul><li>原生支持，兼容性和稳定性更高。</li><li>无需额外依赖，简化部署流程。</li></ul></li><li>限制： <ul><li>目前功能可能不如 pkg 完善（如跨平台支持需进一步验证） <code>[citation:用户提供]</code>。</li></ul></li></ul><p>sea-config.json</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;main&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;dist/index.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;output&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sea-prep.blob&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>package.json</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;module&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node --experimental-sea-config sea-config.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后注意，这样只能生成 <code>.blob</code> 文件，接下来要将该文件注入你电脑上的 <code>node.js</code> 可执行文件 (如windows上的node.exe)，才是一个真正的可执行文件</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Program Files\\nodejs\\node.exe&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ello.exe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> postject</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hello</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NODE_SEA_BLOB</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sea-prep.blob</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --sentinel-fuse</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> NODE_SEA_FUSE_fce680ab2cc467b6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多技术细节可参考：<a href="https://nodejs.org/api/single-executable-applications.html" target="_blank" rel="noopener noreferrer">Node.js SEA 文档</a>、<a href="https://bun.sh/docs" target="_blank" rel="noopener noreferrer">Bun 官方文档</a>。</p><h3 id="可执行文件-比较" tabindex="-1"><a class="header-anchor" href="#可执行文件-比较"><span>可执行文件 - 比较</span></a></h3><p>会发现 Pkg 和 ESA 不同</p><p>直接生成 <code>.exe</code> 文件的工具（比如 <code>pkg</code>）和 Node.js 22 的 <strong>SEA（Single Executable Applications）</strong> 确实是两种不同的实现方式，它们的底层原理和步骤有所不同。</p><h4 id="pkg" tabindex="-1"><a class="header-anchor" href="#pkg"><span>pkg</span></a></h4><p><code>pkg</code> 工具的原理</p><p><code>pkg</code>（如 <a href="https://github.com/vercel/pkg" target="_blank" rel="noopener noreferrer">vercel/pkg</a>）是第三方工具，它的核心逻辑是：</p><ul><li>将你的 JavaScript 代码和 Node.js 运行时<strong>预先打包</strong>成一个独立的可执行文件。</li><li>通过“虚拟文件系统”在运行时动态加载代码（无需手动注入 <code>blob</code>）。</li><li>直接生成 <code>.exe</code>/二进制文件，用户无需额外操作。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 安装 pkg</span></span>
<span class="line"><span>npm install -g pkg</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 直接生成 exe 文件</span></span>
<span class="line"><span>pkg hello.js --targets node22-win-x64 --output hello.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优点：简单直接，无需手动操作 Node.js 可执行文件。</li><li>缺点：依赖第三方工具，生成的文件体积较大（因为内置了完整的 Node.js 运行时）。</li></ul><h4 id="sea" tabindex="-1"><a class="header-anchor" href="#sea"><span>SEA</span></a></h4><p>Node.js 22 的 SEA 特性</p><p>SEA 是 Node.js 官方实验性功能，它的逻辑是：</p><ul><li>将你的代码编译成一个二进制 blob 文件</li><li>将这个 blob 注入到已有的 Node.js 可执行文件中（需要依赖宿主机的 Node.js 文件）</li><li>生成的可执行文件是原版 Node.js 的修改版（附加了你的代码）</li></ul><p>为什么需要“注入”？</p><ul><li>SEA 的设计目标是轻量化，它复用宿主机的 Node.js 可执行文件，而不是重新打包一个完整的运行时</li><li>因此你需要手动复制 Node.js 的 node.exe，并将 blob 注入其中（类似“寄生”模式）</li></ul><h4 id="两者的关键区别" tabindex="-1"><a class="header-anchor" href="#两者的关键区别"><span>两者的关键区别</span></a></h4><table><thead><tr><th>特性</th><th><code>pkg</code></th><th>Node.js SEA</th></tr></thead><tbody><tr><td>实现方式</td><td>第三方工具（Vercel）</td><td>Node.js 官方实验性功能</td></tr><tr><td>打包方式</td><td>完整运行时 + 代码</td><td>复用宿主机的 Node.exe + 代码注入</td></tr><tr><td>生成文件</td><td>直接生成 <code>.exe</code></td><td>需手动注入生成 <code>.exe</code></td></tr><tr><td>文件体积</td><td>较大（含完整运行时）</td><td>较小（复用已有 Node.exe）</td></tr><tr><td>跨平台</td><td><strong>支持</strong></td><td>需手动复制不同平台的 Node.exe</td></tr><tr><td>代码保护</td><td>可加密/混淆</td><td>依赖注入机制（较透明）</td></tr></tbody></table><h2 id="all-workflows" tabindex="-1"><a class="header-anchor" href="#all-workflows"><span>all_Workflows</span></a></h2><p>Github 默认给你推荐的相关工作流有：</p><ul><li>Grunt | 用npm和grunt构建一个NodeJS项目</li><li>Gulp | 用npm和gulp构建一个NodeJS项目</li><li>Webpack | 用npm和webpack构建一个NodeJS项目</li><li>Deno | 测试你的Deno项目</li><li>Publish Node.js Package to Github Packages | 将Node.js包发布到GitHub Packages</li><li>Publish Node.js Package | 将Node.js包发布到npm</li><li>... | (话说居然没搜到用vite和esbuild的)</li></ul><p>deepseek给的工作流:</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Build and Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      matrix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        node-version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">20.x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Use Node.js \${{ matrix.node-version }}</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      uses</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        node-version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${{ matrix.node-version }}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">npm ci</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Build with tsc</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">npm run tsc:build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Build with esbuild</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">npm run esbuild:build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Build with Vite</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">npm run vite:build</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Build executable</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        npm run tsc:build</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        npm run pkg:build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="all-docker" tabindex="-1"><a class="header-anchor" href="#all-docker"><span>all_Docker</span></a></h2><p>略</p>`,68)]))}const d=s(e,[["render",t],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/JavaScript/","title":"README","lang":"zh-CN","frontmatter":{"description":"README 引言 先读：[../How to build](../How to build.md) 在那篇文章中，说了各种编程语言/框架项目的编译/运行流程。而其中cpp在编译流中工具的种类比较多、选择比较灵活。依然是之前的四个通用步骤 安装通用环境/依赖 下载/编写项目 安装项目专用环境/依赖 运行/编译项目 像JavaScript就是： 准备no...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/How%20to%20build/JavaScript/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"README"}],["meta",{"property":"og:description","content":"README 引言 先读：[../How to build](../How to build.md) 在那篇文章中，说了各种编程语言/框架项目的编译/运行流程。而其中cpp在编译流中工具的种类比较多、选择比较灵活。依然是之前的四个通用步骤 安装通用环境/依赖 下载/编写项目 安装项目专用环境/依赖 运行/编译项目 像JavaScript就是： 准备no..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"README\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":6.74,"words":2021},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/JavaScript/README.md","excerpt":"\\n<h2>引言</h2>\\n<p>先读：[../How to build](../How to build.md)</p>\\n<p>在那篇文章中，说了各种编程语言/框架项目的编译/运行流程。而其中cpp在编译流中工具的种类比较多、选择比较灵活。依然是之前的四个通用步骤</p>\\n<ol>\\n<li>安装通用环境/依赖</li>\\n<li>下载/编写项目</li>\\n<li>安装项目专用环境/依赖</li>\\n<li>运行/编译项目</li>\\n</ol>\\n<p>像JavaScript就是：</p>\\n<ul>\\n<li>准备node.js、npm/pnpm/xpm等环境</li>\\n<li>下载/编写项目</li>\\n<li>安装依赖，如 <code>npm install</code></li>\\n<li>运行/编译项目，如 <code>npm run build</code></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/JavaScript/README.md","value":{"title":"How to build/","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/How to build/JavaScript/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,k as data};
