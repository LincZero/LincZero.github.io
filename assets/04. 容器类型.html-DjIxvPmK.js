import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as s,c,a as l,b as e,d as i,e as t}from"./app-Bl6HAa8e.js";const r={},d=t('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="容器类型" tabindex="-1"><a class="header-anchor" href="#容器类型"><span>容器类型</span></a></h1><h2 id="可迭代对象泛操作" tabindex="-1"><a class="header-anchor" href="#可迭代对象泛操作"><span>可迭代对象泛操作</span></a></h2><h3 id="列表解析" tabindex="-1"><a class="header-anchor" href="#列表解析"><span>列表解析</span></a></h3><p>也叫<strong>列表推导式</strong></p><ul><li><p>适用</p><ul><li>使用：<code>[值 for i in L]</code></li></ul></li><li><p>适用举例</p><ul><li><p><code>[x^2 for x in range(10)]</code><mark>【Python特有】</mark></p><p>等价于<code>list[map(lambda x: x**2, range(10))]</code></p></li><li><p>复杂点的举例：<code>[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</code></p></li><li><p>嵌套的举例：<code>[[row[i] for row in matrix] for i in range(4)]</code></p></li></ul></li><li><p>适用范围：列表/元组/集合/字典</p><ul><li>（对于字典，要写完整的键值，例如<code>{x: x**2 for x in (2, 4, 6)}</code>）</li></ul></li></ul><h3 id="len" tabindex="-1"><a class="header-anchor" href="#len"><span>len</span></a></h3><ul><li>使用举例 <ul><li><code>len(dict)</code>，<mark>返回</mark>可迭代对象的长度</li></ul></li><li>适用范围：列表/字典/元组/集合/字符串</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>[]</span></a></h3><ul><li>使用举例 <ul><li><code>list[i]</code>索引</li></ul></li><li>适用范围：列表/字典/元组/集合/字符串 <ul><li>（对于字典，中括号内容为<strong>键名</strong>，不可为序列）（本质是hash表）</li><li>（对于列表，i 内容除了可以是序列，也可以是切片表达）</li></ul></li></ul><h3 id="del" tabindex="-1"><a class="header-anchor" href="#del"><span>del</span></a></h3><ul><li>使用举例 <ul><li><code>del list[i]</code>，从列表<mark>删除</mark>元素、切片、全部</li><li><code>del dict[&#39;key&#39;]</code>，从字典<mark>删除</mark>键值对、全部</li></ul></li><li>适用范围：列表/字典/集合 <ul><li>（对于可迭代对象，可以不加[]序列，删除整个对象）</li><li>（对于字典，中括号内容为<strong>键名</strong>）</li><li>（对于列表，i 内容除了可以是序列，也可以是切片表达）</li><li>（对于字符串和元组，不可编辑元素）</li></ul></li></ul><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3><ul><li>适用举例 <ul><li><code>for i in list:</code></li></ul></li><li>适用范围：列表/字典/元组/集合/字符串 <ul><li>对于字典，根据遍历对象的不同有不同写法，默认是遍历键 <ul><li><strong>遍历字典键</strong>：<code>for k in dict.keys():</code>，<code>for k in dict:</code></li><li><strong>遍历字典值</strong>：<code>for v in dict.values():</code></li><li><strong>遍历字典键值对</strong>：<code>for k,v in dict.items():</code></li></ul></li><li>对于可迭代对象，根据遍历对象的不同也有不同的写法 <ul><li><strong>只遍历项</strong>：<code>for item in list: print(item)</code></li><li><strong>遍历序列</strong>：<code>for i in range(len(list)): print(i, list[i])</code></li><li><strong>遍历序列与值</strong>：<code>for i, v in enumerate(list): print(i, v)</code></li></ul></li></ul></li></ul><h3 id="顺序类-需要为线性序列对象" tabindex="-1"><a class="header-anchor" href="#顺序类-需要为线性序列对象"><span>顺序类（需要为线性序列对象）</span></a></h3><ul><li><code>list.sort()</code>，对列表中的元素就地进行永久性<mark>排序</mark>，额外参数<code>[reverse=False]</code></li><li><code>list.sorted()</code>，对列表中的元素就地进行临时性<mark>排序</mark>，额外参数<code>[reverse=False]</code><ul><li>一般临时性排序可用于循环序列中倒叙输出</li></ul></li><li><code>list.reverse()</code>，就地倒<mark>排序</mark>列表中的元素</li></ul><h2 id="对象类型-列表" tabindex="-1"><a class="header-anchor" href="#对象类型-列表"><span>对象类型 &gt; 列表</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><ul><li>性质 <ul><li><strong>可变</strong>：不像不可变的字符串，列表是可变的，它允许修改元素，故可以对索引或切片进行赋值</li><li><strong>任意类型</strong>：列表的元素不必是同一类型</li></ul></li><li>使用基础（背后原理） <ul><li>略</li></ul></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3>',21),u=l("p",null,"字面量方式",-1),p=l("li",null,[l("p",null,[l("strong",null,"列表字面量"),e("：用方括号（"),l("code",null,"[]"),e("）来表示列表，并用逗号分隔")])],-1),h=l("strong",null,"列表索引",-1),m={href:"https://docs.python.org/3/glossary.html#term-sequence",target:"_blank",rel:"noopener noreferrer"},g=l("strong",null,"列表切片",-1),k={href:"https://docs.python.org/3/glossary.html#term-sequence",target:"_blank",rel:"noopener noreferrer"},x=l("li",null,[l("p",null,[l("strong",null,"列表拼接"),e("：列表也支持用"),l("code",null,"+"),e("连接这样的操作")])],-1),_={href:"https://www.runoob.com/manual/pythontutorial3/docs/html/datastructures.html",target:"_blank",rel:"noopener noreferrer"},f=t("<ul><li><code>list.append(X)</code> ，在列表的末尾<mark>添加</mark>新的元素，相当于 <code>a[len(a):] = [x]</code>， <code>a.insert(len(a), x)</code></li><li><code>list.extend(L)</code>，将一个给定列表中的所有元素都<mark>添加</mark>到另一个列表中，相当于 <code>a[len(a):] = L</code></li><li><code>list.insert(i,x)</code>，在指定位置<mark>添加</mark>插入一个元素</li><li><code>list.remove(x)</code>，<mark>删除</mark>列表中值为 <em>x</em> 的第一个元素。如果没有这样的元素，就会返回一个<code>错误</code></li><li><code>list.pop([i=len])</code>，从列表的指定位置<mark>删除</mark>元素，并将其返回。如果没有指定索引，返回最后一个元素</li><li><code>list.clear()</code>，从列表中<mark>删除</mark>所有元素。相当于 <code>del a[:]</code></li><li><code>list.index(x)</code>，<mark>返回</mark>列表中第一个值为 <em>x</em> 的元素的索引，相当于<code>a[i]</code>，如果没有匹配的元素就会返回一个<code>错误</code></li><li><code>list.count(x)</code>，<mark>返回</mark> <em>x</em> 在列表中出现的次数</li><li><code>list.copy()</code>，返回列表的一个浅<mark>拷贝</mark>。等同于 <code>a[:]</code></li></ul>",1),y=t("<li><p>内置函数</p><ul><li><code>len(list)</code>，<mark>返回</mark>列表长度</li><li><code>del list[i]</code>，从列表<mark>删除</mark>元素、切片、甚至全部</li><li><code>range(start,stop[,step])</code>，快速<mark>创建</mark>等差数字列表，相当于<code>[i for i in range(start,stop[,step])]</code></li></ul></li>",1),b=l("p",null,"技巧",-1),v=l("li",null,[l("strong",null,"当堆栈用"),e("：使用"),l("code",null,"append()"),e("和"),l("code",null,"pop()"),e("方法可以当堆栈用")],-1),E=l("strong",null,"当队列用",-1),w={href:"https://docs.python.org/3/library/collections.html#collections.deque",target:"_blank",rel:"noopener noreferrer"},B=l("li",null,[l("strong",null,"遍历列表"),e("："),l("code",null,"for i in list:")],-1),A=l("li",null,[l("strong",null,"拷贝"),e("：捋清楚：对象数据类型的赋值、浅拷贝和深拷贝三者的关系。具体详见其他笔记的编程术语一篇")],-1),q=l("h3",{id:"原理",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#原理"},[l("span",null,"原理")])],-1),P=l("p",null,[e("python的列表不仅不定长，而且还随意存储各种格式，存整型、浮点、字符串、甚至还可以嵌套"),l("code",null,"list"),e("等其他容器。 在C++中如果想要实现相同的效果，可能需要用 "),l("code",null,"Boost::any")],-1),L=l("p",null,"原理",-1),M=l("p",null,"参考：https://cloud.tencent.com/developer/article/1820193",-1),N={href:"https://cloud.tencent.com/product/tke?from=10680",target:"_blank",rel:"noopener noreferrer"},D=l("code",null,"list",-1),C=l("code",null,"set",-1),F=l("code",null,"dict",-1),z=l("code",null,"str",-1),T=t('<p>简述</p><p>从细节上看，Python中的列表是由<strong>对其它对象的引用组成的连续数组</strong>。</p><p>这意味着，<s>每次添加或删除一个元素时</s>，由引用组成的数组需要该标大小（重新分配），当然，实际使用的是指数分配的方式。</p><h2 id="对象类型-元组-元素不可变" tabindex="-1"><a class="header-anchor" href="#对象类型-元组-元素不可变"><span>对象类型 &gt; 元组（元素不可变）</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><ul><li>性质 <ul><li><strong>不可变性</strong>：就是相当于不可变的列表，其他和列表差不多 （存储元组的变量可变，元组元素不可变，为区别于常量其更贴切的说法是<code>元素不可变性</code>）</li></ul></li></ul><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><ul><li><p>字面量方式</p><ul><li><p><strong>元组字面量</strong>：用圆括号（<code>()</code>）来表示元组，并用逗号分隔，也可以不加括号</p><p>例如<code>tuple = 123, 456, &#39;hello&#39;</code></p></li><li><p><strong>创建包含零个或一个元素的元组</strong>：零个时不能省略圆括号，一个时可在后面加单个逗号</p><p>例如<code>empty_tuple = ()</code>，<code>single_tuple = &#39;hello&#39;,</code></p></li></ul></li><li><p>技巧</p><ul><li><strong>遍历元组</strong>：<code>for i in tuple:</code></li></ul></li></ul><h2 id="对象类型-字典" tabindex="-1"><a class="header-anchor" href="#对象类型-字典"><span>对象类型 &gt; 字典</span></a></h2><h3 id="简概-2" tabindex="-1"><a class="header-anchor" href="#简概-2"><span>简概</span></a></h3><ul><li>性质 <ul><li><strong>无序</strong>：用for遍历时顺序完全随机</li></ul></li></ul><h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2"><span>使用</span></a></h3><ul><li>注意项 <ul><li>关键字可以为任意不可变类型，适用范围：字符串、数值、只包含字符串和数字的元组</li></ul></li><li>字面量方式 <ul><li><strong>字典字面量</strong>：<code>{k1:b1, k2:v2}</code></li><li><strong>字典增加或修改</strong>：<code>dict[key]=value</code></li></ul></li><li>对象方法（类方法） <ul><li><code>dict.items()</code>，<mark>返回</mark>键值对</li><li><code>dict.keys()</code>，<mark>返回</mark>键</li><li><code>dict.values()</code>，<mark>返回</mark>值</li></ul></li><li>内置函数 <ul><li><code>len(dict)</code>，<mark>返回</mark>字典长度</li><li><code>del dict[&#39;key&#39;]</code>，从字典<mark>删除</mark>键值对</li><li><code>set(dict)</code>，<mark>返回</mark>不重复的集合</li></ul></li></ul><h2 id="对象类型-集合" tabindex="-1"><a class="header-anchor" href="#对象类型-集合"><span>对象类型 &gt; 集合</span></a></h2><h3 id="简概-3" tabindex="-1"><a class="header-anchor" href="#简概-3"><span>简概</span></a></h3><ul><li>性质 <ul><li><strong>无序</strong>：用for遍历时顺序完全随机</li><li><strong>不重复</strong></li></ul></li></ul><h3 id="使用-3" tabindex="-1"><a class="header-anchor" href="#使用-3"><span>使用</span></a></h3><ul><li>字面量方式 <ul><li><strong>集合字面量</strong>：<code>{}</code>包裹，逗号隔开。也可以用set()方式创建 <ul><li>但注意的是，如果创建空集合，只能用创建对象方式<code>set()</code>，例如<code>a = set()</code></li><li>（<code>set()</code>本质是对象构造函数，也是类型转换方法，即构造函数用作转换函数并重载）</li></ul></li></ul></li><li>对象方法（类方法） <ul><li><code>union</code>，联合</li><li><code>intersection</code>，交</li><li><code>difference</code>，差</li><li><code>sysmmetric difference</code>，对称差集</li></ul></li><li>符号方法 <ul><li><code>set_a - set_b</code>，差集</li><li><code>set_a | set_b</code>，并集</li><li><code>set_a &amp; set_b</code>，交集</li><li><code>set_a ^ set_b</code>，非交集（交集的补集）</li></ul></li><li>补充 <ul><li>集合对象还支持 union（联合），intersection（交），difference（差）和 sysmmetric difference（对称差集）等数学运算</li></ul></li></ul><h2 id="对象类型-对象数据类型的嵌套" tabindex="-1"><a class="header-anchor" href="#对象类型-对象数据类型的嵌套"><span>对象类型 &gt; 对象数据类型的嵌套</span></a></h2>',19),V=l("ul",null,[l("li",null,[l("p",null,[l("strong",null,"嵌套"),e("：列表、元组、字典、集合均允许嵌套列表")])]),l("li",null,[l("p",null,"嵌套技巧"),l("ul",null,[l("li",null,[l("strong",null,[e("列表"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"∋")]),l("annotation",{encoding:"application/x-tex"},"\\ni")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),l("span",{class:"mrel"},"∋")])])]),e("列表")]),e("：嵌套分组")]),l("li",null,[l("strong",null,[e("列表"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"∋")]),l("annotation",{encoding:"application/x-tex"},"\\ni")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),l("span",{class:"mrel"},"∋")])])]),e("字典")]),e("：有多种个体，每个个体有不同属性")]),l("li",null,[l("strong",null,[e("字典"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"∋")]),l("annotation",{encoding:"application/x-tex"},"\\ni")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),l("span",{class:"mrel"},"∋")])])]),e("列表")]),e("：对象有多个属性，每个属性有多个选项")]),l("li",null,[l("strong",null,[e("字典"),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mo",null,"∋")]),l("annotation",{encoding:"application/x-tex"},"\\ni")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),l("span",{class:"mrel"},"∋")])])]),e("字典")]),e("：对象有多个属性，每个属性有多个子属性")])])]),l("li",null,[l("p",null,"内置函数"),l("ul",null,[l("li",null,[l("p",null,[l("code",null,"zip()")]),l("ul",null,[l("li",null,[l("p",null,"打包（一维打包成多维）")]),l("li",null,[l("div",{class:"language-python line-numbers-mode","data-ext":"py","data-title":"py"},[l("pre",{class:"language-python"},[l("code",null,[e("questions "),l("span",{class:"token operator"},"="),e(),l("span",{class:"token punctuation"},"["),l("span",{class:"token string"},"'name'"),l("span",{class:"token punctuation"},","),e(),l("span",{class:"token string"},"'quest'"),l("span",{class:"token punctuation"},","),e(),l("span",{class:"token string"},"'favorite color'"),l("span",{class:"token punctuation"},"]"),e(`
answers `),l("span",{class:"token operator"},"="),e(),l("span",{class:"token punctuation"},"["),l("span",{class:"token string"},"'lancelot'"),l("span",{class:"token punctuation"},","),e(),l("span",{class:"token string"},"'the holy grail'"),l("span",{class:"token punctuation"},","),e(),l("span",{class:"token string"},"'blue'"),l("span",{class:"token punctuation"},"]"),e(`
`),l("span",{class:"token keyword"},"for"),e(" q"),l("span",{class:"token punctuation"},","),e(" a "),l("span",{class:"token keyword"},"in"),e(),l("span",{class:"token builtin"},"zip"),l("span",{class:"token punctuation"},"("),e("questions"),l("span",{class:"token punctuation"},","),e(" answers"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},":"),e(`
    `),l("span",{class:"token keyword"},"print"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'What is your {0}?  It is {1}.'"),l("span",{class:"token punctuation"},"."),l("span",{class:"token builtin"},"format"),l("span",{class:"token punctuation"},"("),e("q"),l("span",{class:"token punctuation"},","),e(" a"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},")"),e(`
`)])]),l("div",{class:"line-numbers","aria-hidden":"true"},[l("div",{class:"line-number"}),l("div",{class:"line-number"}),l("div",{class:"line-number"}),l("div",{class:"line-number"})])])])])])])])],-1),I=t('<h2 id="队列【外部类】" tabindex="-1"><a class="header-anchor" href="#队列【外部类】"><span>队列【外部类】</span></a></h2><ul><li>导入：<code>from collections import deque</code></li><li>字面量方式 <ul><li>定义：例如<code>queue = deque([&quot;2&quot;, &quot;3&quot;, &quot;4&quot;])</code></li></ul></li><li>对象方法 <ul><li><code>queue.append(X)</code>，末尾增加</li><li><code>queue.popleft()</code>，左侧弹出</li></ul></li></ul>',2);function Z(S,X){const n=o("ExternalLinkIcon");return s(),c("div",null,[d,l("ul",null,[l("li",null,[u,l("ul",null,[p,l("li",null,[l("p",null,[h,e("：就像字符串(以及其它所有内建的 "),l("a",m,[e("序列"),i(n)]),e(" 类型)一样，列表可以被索引和切片")])]),l("li",null,[l("p",null,[g,e("：就像字符串(以及其它所有内建的 "),l("a",k,[e("序列"),i(n)]),e(" 类型)一样，列表可以被索引和切片 所有的切片操作都会返回一个包含请求的元素的新列表，即返回列表一个新的（浅）拷贝副本")])]),x])]),l("li",null,[l("p",null,[l("a",_,[e("对象方法"),i(n)]),e("（类方法）")]),f]),y,l("li",null,[b,l("ul",null,[v,l("li",null,[E,e("：效率不高，在头部插入和弹出很慢（因为，为了一个元素，要移动整个列表中的所有元素） 要实现队列，使用 "),l("a",w,[e("collections.deque"),i(n)]),e("，它为在首尾两端快速插入和删除而设计")]),B,A])])]),q,P,L,M,l("p",null,[e("python中的"),l("a",N,[e("容器"),i(n)]),e("对象真的不多，平常我们会很心安理得的根据需求来使用对应的容器，不定长数据用"),D,e("，想去重用"),C,e("，想快速进行匹配用"),F,e("，字符处理用"),z]),T,V,I])}const O=a(r,[["render",Z],["__file","04. 容器类型.html.vue"]]),R=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 容器类型 可迭代对象泛操作 列表解析 也叫列表推导式 适用 使用：[值 for i in L] 适用举例 [x^2 for x in range(10)]【Python特有】 等价于list[map(lambda x: x**2, range(10))] 复杂点的举例：[(x, y) for x in [1,2,3] for y i...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 容器类型 可迭代对象泛操作 列表解析 也叫列表推导式 适用 使用：[值 for i in L] 适用举例 [x^2 for x in range(10)]【Python特有】 等价于list[map(lambda x: x**2, range(10))] 复杂点的举例：[(x, y) for x in [1,2,3] for y i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"容器类型","slug":"容器类型","link":"#容器类型","children":[{"level":2,"title":"可迭代对象泛操作","slug":"可迭代对象泛操作","link":"#可迭代对象泛操作","children":[{"level":3,"title":"列表解析","slug":"列表解析","link":"#列表解析","children":[]},{"level":3,"title":"len","slug":"len","link":"#len","children":[]},{"level":3,"title":"[]","slug":"","link":"#","children":[]},{"level":3,"title":"del","slug":"del","link":"#del","children":[]},{"level":3,"title":"循环","slug":"循环","link":"#循环","children":[]},{"level":3,"title":"顺序类（需要为线性序列对象）","slug":"顺序类-需要为线性序列对象","link":"#顺序类-需要为线性序列对象","children":[]}]},{"level":2,"title":"对象类型 > 列表","slug":"对象类型-列表","link":"#对象类型-列表","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"对象类型 > 元组（元素不可变）","slug":"对象类型-元组-元素不可变","link":"#对象类型-元组-元素不可变","children":[{"level":3,"title":"简概","slug":"简概-1","link":"#简概-1","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]}]},{"level":2,"title":"对象类型 > 字典","slug":"对象类型-字典","link":"#对象类型-字典","children":[{"level":3,"title":"简概","slug":"简概-2","link":"#简概-2","children":[]},{"level":3,"title":"使用","slug":"使用-2","link":"#使用-2","children":[]}]},{"level":2,"title":"对象类型 > 集合","slug":"对象类型-集合","link":"#对象类型-集合","children":[{"level":3,"title":"简概","slug":"简概-3","link":"#简概-3","children":[]},{"level":3,"title":"使用","slug":"使用-3","link":"#使用-3","children":[]}]},{"level":2,"title":"对象类型 > 对象数据类型的嵌套","slug":"对象类型-对象数据类型的嵌套","link":"#对象类型-对象数据类型的嵌套","children":[]},{"level":2,"title":"队列【外部类】","slug":"队列【外部类】","link":"#队列【外部类】","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.13,"words":2140},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/02. 数据+算法/04. 容器类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>容器类型</h1>\\n<h2>可迭代对象泛操作</h2>\\n<h3>列表解析</h3>\\n<p>也叫<strong>列表推导式</strong></p>\\n<ul>\\n<li>\\n<p>适用</p>\\n<ul>\\n<li>使用：<code>[值 for i in L]</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>适用举例</p>\\n<ul>\\n<li>\\n<p><code>[x^2 for x in range(10)]</code><mark>【Python特有】</mark></p>\\n<p>等价于<code>list[map(lambda x: x**2, range(10))]</code></p>\\n</li>\\n<li>\\n<p>复杂点的举例：<code>[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</code></p>\\n</li>\\n<li>\\n<p>嵌套的举例：<code>[[row[i] for row in matrix] for i in range(4)]</code></p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>适用范围：列表/元组/集合/字典</p>\\n<ul>\\n<li>（对于字典，要写完整的键值，例如<code>{x: x**2 for x in (2, 4, 6)}</code>）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{O as comp,R as data};
