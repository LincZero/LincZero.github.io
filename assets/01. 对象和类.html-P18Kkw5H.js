import{_ as s,e as a,g as l,o as n}from"./app-CuJixpuN.js";const e={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="面向对象编程-封装" tabindex="-1"><a class="header-anchor" href="#面向对象编程-封装"><span>面向对象编程（封装）</span></a></h1><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><h3 id="简概-1" tabindex="-1"><a class="header-anchor" href="#简概-1"><span>简概</span></a></h3><p>Python 的类机制通过最小的新语法和语义在语言中实现了类。<strong>它是<code>C++</code>或者<code>Modula-3语言</code>中类机制的混合</strong></p><p>就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障（指的是C++设了），而是依赖于用户不去“强行闯入定义”的优雅</p><p>类的大多数重要特性都被完整的保留下来：</p><ul><li>类继承机制允许多重继承（C++也是，Java好像比较严谨，不让）</li><li>派生类可以覆盖（override）基类中的任何方法或类</li><li>可以使用相同的方法名称调用基类的方法</li><li>对象可以包含任意数量的私有数据</li></ul><h3 id="作用域与命名空间-不是很懂" tabindex="-1"><a class="header-anchor" href="#作用域与命名空间-不是很懂"><span>作用域与命名空间（<mark>不是很懂</mark>）</span></a></h3><h4 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间"><span>命名空间</span></a></h4><ul><li><p>命名空间 概念</p><ul><li><code>命名空间</code>是从命名到对象的映射</li></ul></li><li><p>命名空间 术语</p></li><li><p>一般称 Python 中任何一个“.”之后的命名为<strong>属性</strong></p></li><li><p>命名空间实现方法</p><ul><li>当前命名空间主要是通过 Python <strong>字典</strong>实现的</li><li>不过通常不关心具体的实现方式（除非出于性能考虑），以后也有可能会改变其实现方式</li></ul></li><li><p>命名空间 的一些例子</p><ul><li>内置命名（像 <a href="https://docs.python.org/3/library/functions.html#abs" target="_blank" rel="noopener noreferrer">abs()</a> 这样的函数，以及内置异常名）集</li><li>模块中的全局命名</li><li>函数调用中的局部命名</li><li>某种意义上讲对象的属性集也是一个命名空间</li></ul></li><li><p>命名空间 作用</p><ul><li>关于命名空间需要了解的一件很重要的事就是不同命名空间中的命名没有任何联系，例如两个不同的模块可能都会定义一个名为 <code>maximize</code> 的函数而不会发生混淆－用户必须以模块名为前缀来引用它们。</li></ul></li><li><p>命名空间 与生命周期</p><ul><li><p>不同的命名空间在不同的时刻创建，有不同的生存期</p><ul><li><p>例如：包含<strong>内置命名</strong>的命名空间在Python解释器<strong>启动时创建，会一直保留，不被删除</strong></p></li><li><p>例如：<strong>模块的全局命名空间</strong>在模块定义<strong>被读入时创建</strong>，通常，模块命名空间也会一直<strong>保存到解释器退出</strong></p><p>（内置命名也同样被包含在一个模块中，它被称作 <a href="https://docs.python.org/3/library/builtins.html#module-builtins" target="_blank" rel="noopener noreferrer">builtins</a> ）</p></li><li><p>例如：当调用函数时，就会为它创建一个<strong>局部命名空间</strong>，并且在函数<strong>返回或抛出一个并没有在函数内部处理的异常时被删除</strong>（遗忘）</p><p>（其中，每个递归调用都有自己的局部命名空间）</p></li></ul></li></ul></li></ul><h4 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h4><ul><li>至少有三个命名空间可以直接访问的作用域嵌套在一起 <ul><li>三个命名空间 <ul><li>首先搜索包含局部命名的使用域，它包含局部命名任意函数包含的作用域，包含非局部、但是也非全局的命名</li><li>其次搜索的是中层的作用域，这里包含了同级的函数，包含当前模块的全局命名</li><li>最后搜索最外面的作用域，它包含内置命名，包含内置命名的命名空间</li></ul></li></ul></li></ul><h4 id="作用域和命名空间demo" tabindex="-1"><a class="header-anchor" href="#作用域和命名空间demo"><span>作用域和命名空间demo</span></a></h4><ul><li><a href="https://docs.python.org/3/reference/simple_stmts.html#global" target="_blank" rel="noopener noreferrer"><code>global</code></a>语句，用以指明某个特定的变量为全局作用域，并重新绑定它</li><li><a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" target="_blank" rel="noopener noreferrer"><code>nonlocal</code></a>语句，用以指明某个特定的变量为封闭作用域，并重新绑定它</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> scope_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 仅改变作用域</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        spam </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;local spam&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_nonlocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        nonlocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> spam				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 能改变上一层的作用域</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        spam </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;nonlocal spam&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> do_global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> spam					</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 能改变全局（模块级）的作用域（但不能改变上一层的作用域）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        spam </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;global spam&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    spam </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;test spam&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    do_local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;After local assignment:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, spam)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    do_nonlocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;After nonlocal assignment:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, spam)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    do_global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;After global assignment:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, spam)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">scope_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;In global scope:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, spam)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39; 输出</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">After local assignment: test spam</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">After nonlocal assignment: nonlocal spam</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">After global assignment: nonlocal spam</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">In global scope: global spam</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;&#39;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><ul><li><p>使用</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Dog</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 定义（括号在不需要继承时可省略）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">          self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.m_name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  my_dog </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Dog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;willie&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>类对象</p><ul><li>支持两种操作：属性引用和实例化 <ul><li>属性引用：<code>类名.属性</code>，其中属性可以是数据或方法属性，也可以是<code>__doc__</code>、<code>__annotations__</code>等隐藏属性</li><li>实例化：<code>对象实例名 = 类名(参数)</code></li></ul></li></ul></li><li><p>调试相关</p><ul><li>每个值都是一个对象，因此每个值都有一个 类( <em>class</em> ) （也称为它的 类型( <em>type</em> ) ），它存储为<code>object.__class__</code></li></ul></li><li><p>注意项</p><ul><li><p>数据属性会覆盖同名的方法属性</p><p>为了避免意外的名称冲突，这在大型程序中是极难发现的 Bug，使用一些约定来减少冲突的机会是明智的</p><p>可能的约定包括：大写方法名称的首字母，使用一个唯一的小字符串（也许只是一个下划线）作为数据属性名称的前缀，或者方法使用动词而数据属性使用名词</p></li></ul></li></ul><h3 id="类内函数" tabindex="-1"><a class="header-anchor" href="#类内函数"><span>类内函数</span></a></h3><ul><li>构造函数：使用<code>__init__()</code>方法进行实例化</li><li>成员函数：方法的第一个参数被命名为 <code>self</code>，包括实例化函数（看起来与C++不同）。但这仅仅是一个约定<code>self</code>绝对没有任何特殊含义</li></ul><h3 id="共享" tabindex="-1"><a class="header-anchor" href="#共享"><span>共享</span></a></h3><h4 id="类变量与实例变量" tabindex="-1"><a class="header-anchor" href="#类变量与实例变量"><span>类变量与实例变量</span></a></h4><p>一般来说，实例变量用于对每一个实例都是唯一的数据，类变量用于类的所有实例共享的属性和方法（仅保留一份副本）</p><ul><li><p>共享方法</p><ul><li><p>在<code>class</code>中，<strong>构造函数前</strong>进行定义（在C++这样做等价于列表初始化语法）</p><p>且当定义的类型为<code>可变对象</code>时，所有类实例共享这一个可变对象</p></li></ul></li><li><p>不共享方法</p><ul><li>如想避免该共享行为，需要在<strong>构造函数里</strong>去初始化<code>可变对象</code></li></ul></li></ul><h4 id="公有-or-私有-不是很懂" tabindex="-1"><a class="header-anchor" href="#公有-or-私有-不是很懂"><span>公有 or 私有（<mark>不是很懂</mark>）</span></a></h4><p>私有变量</p><ul><li><p>私有变量（前面一个下划线）</p><ul><li><p>描述：只能从对像内部访问的“私有”实例变量，在 Python 中不存在（？）然而，也有一个变通的访问用于大多数 Python 代码</p><p>需要注意的是编码规则设计为尽可能的避免冲突，被认作为私有的变量仍然有可能被访问或修改。在特定的场合它也是有用的，比如调试的时候</p></li><li><p>举例：以一个下划线开头的命名（例如 <code>_spam</code> ）会被处理为 API 的非公开部分（无论它是一个函数、方法或数据成员）</p></li></ul></li><li><p>命名编码（前面至少两个下划线，后面至多一个）</p><ul><li>描述：私有变量不会命名冲突，Python 提供了对这种结构的有限支持，称为<code>命名编码</code>（<em>name mangling</em>）</li><li>举例：任何形如 <code>__spam</code> 的标识，被替代为 <code>_classname__spam</code></li></ul></li></ul><h2 id="类的示例" tabindex="-1"><a class="header-anchor" href="#类的示例"><span>类的示例</span></a></h2><h3 id="模拟记录或结构" tabindex="-1"><a class="header-anchor" href="#模拟记录或结构"><span>模拟记录或结构</span></a></h3><p>有时类似于 Pascal 中“记录（record）”或 C 中“结构（struct）”的数据类型很有用，它将一组已命名的数据项绑定在一起</p><p>一个空的类定义可以很好的实现它：（其他编译型语言的类很难做到这一点）</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">john </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Employee</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Create an empty employee record</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fill the fields of the record</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">john.name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;John Doe&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">john.dept </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;computer lab&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">john.salary </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h3><p>用户自定义异常也可以是类。利用这个机制可以创建可扩展的异常体系</p><p>一般异常类继承<code>Exception</code>类</p><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2"><span>使用</span></a></h3><ul><li><p>使用</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      	pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ElectricCar</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">          super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(make, model, year)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示调用父类的构造方法但不传self，super用于将父类和子类关联起来</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Python2.7的使用（<code>super()</code>需要两个实参）</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      	pass</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ElectricCar</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Car</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> make</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> year</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">          super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ElectriCar, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(make, model, year)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>概念</p><ul><li>C++里叫<code>基类</code>和<code>派生类</code>，更通俗的叫法为<code>父类</code>/<code>超类</code>（<em>superclass</em>）和<code>子类</code>，名称<code>super</code>因此得名</li></ul></li><li><p>底层原理</p><ul><li>对于 C++ 程序员来说，Python 中的所有方法本质上都是<code>虚方法</code>（C++程序猿狂喜）</li></ul></li><li><p>Python 有两个用于继承的函数：</p><ul><li><p>函数 <a href="https://docs.python.org/3/library/functions.html#isinstance" target="_blank" rel="noopener noreferrer">isinstance()</a> 用于检查实例类型</p><ul><li>例如：<code>isinstance(obj, int)</code>，只有在<code>obj.__class__</code>是<a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener noreferrer">int</a>或其它从<a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener noreferrer">int</a>继承的类型时返回<code>True</code></li></ul></li><li><p>函数 <a href="https://docs.python.org/3/library/functions.html#issubclass" target="_blank" rel="noopener noreferrer">issubclass()</a> 用于检查类继承</p><ul><li><p>例如：<code>issubclass(bool, int)</code>，为 <code>True</code>，因为 <a href="https://docs.python.org/3/library/functions.html#bool" target="_blank" rel="noopener noreferrer">bool</a> 是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener noreferrer">int</a> 的子类</p></li><li><p>例如：<code>issubclass(float, int)</code>，为 <code>False</code>，因为 <a href="https://docs.python.org/3/library/functions.html#float" target="_blank" rel="noopener noreferrer">float</a> 不是 <a href="https://docs.python.org/3/library/functions.html#int" target="_blank" rel="noopener noreferrer">int</a> 的子类</p></li></ul></li></ul></li></ul><h3 id="多继承" tabindex="-1"><a class="header-anchor" href="#多继承"><span>多继承</span></a></h3><ul><li><p>使用</p><ul><li><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DerivedClassName</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base1</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base2</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Base3</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">statement</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      .</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">      &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">statement</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">N</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>底层原理与解析顺序（与C++原理不同，C++是编译性的，不会动态查找地址）</p><ul><li><p>解析顺序</p><ul><li><p>父类继承的深度优先、左到右搜索，而不是搜索两次在同一个类层次结构中</p></li><li><p>例如</p><p>如果在<code>DerivedClassName</code>中没有找到某个属性，就会搜索<code>Base1</code>，然后（递归的）搜索其基类</p><p>如果最终没有找到，就搜索 <code>Base2</code>，以此类推</p></li></ul></li><li><p>改变解析顺序</p><ul><li><a href="https://docs.python.org/3/library/functions.html#super" target="_blank" rel="noopener noreferrer">super()</a> 可以动态的改变解析顺序。这个方式可见于其它的一些多继承语言，类似 call-next-method，比单继承语言中的 super 更强大</li><li>动态调整顺序十分必要的，因为所有的多继承会有一到多个菱形关系。为了防止重复访问基类，通过动态的线性化算法，每个类都按从左到右的顺序特别指定了顺序，每个祖先类只调用一次</li></ul></li></ul></li></ul>`,42)]))}const k=s(e,[["render",t],["__file","01. 对象和类.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 面向对象编程（封装） 简概 简概 Python 的类机制通过最小的新语法和语义在语言中实现了类。它是C++或者Modula-3语言中类机制的混合 就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障（指的是C++设了），而是依赖于用户不去“强行闯入定义”的优雅 类的大多数重要特性都被完整的保留下来： 类继承机制允许多...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 面向对象编程（封装） 简概 简概 Python 的类机制通过最小的新语法和语义在语言中实现了类。它是C++或者Modula-3语言中类机制的混合 就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障（指的是C++设了），而是依赖于用户不去“强行闯入定义”的优雅 类的大多数重要特性都被完整的保留下来： 类继承机制允许多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":7.98,"words":2394},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/06. 面向对象/01. 对象和类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>面向对象编程（封装）</h1>\\n<h2>简概</h2>\\n<h3>简概</h3>\\n<p>Python 的类机制通过最小的新语法和语义在语言中实现了类。<strong>它是<code>C++</code>或者<code>Modula-3语言</code>中类机制的混合</strong></p>\\n<p>就像模块一样，Python 的类并没有在用户和定义之间设立绝对的屏障（指的是C++设了），而是依赖于用户不去“强行闯入定义”的优雅</p>\\n<p>类的大多数重要特性都被完整的保留下来：</p>\\n<ul>\\n<li>类继承机制允许多重继承（C++也是，Java好像比较严谨，不让）</li>\\n<li>派生类可以覆盖（override）基类中的任何方法或类</li>\\n<li>可以使用相同的方法名称调用基类的方法</li>\\n<li>对象可以包含任意数量的私有数据</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/06. 面向对象/01. 对象和类.md","value":{"title":"01. 对象和类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/06. 面向对象/01. 对象和类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
