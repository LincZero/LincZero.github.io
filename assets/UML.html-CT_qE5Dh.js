import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as s}from"./app-KyGddx9G.js";const t={},l=s(`<h1 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="uml基本使用" tabindex="-1"><a class="header-anchor" href="#uml基本使用"><span>UML基本使用</span></a></h1><h2 id="画图软件" tabindex="-1"><a class="header-anchor" href="#画图软件"><span>画图软件</span></a></h2><p>略、Typora的mermaid有类图、gizon渲染umlpattern也行（忘单词了）</p><h2 id="抽象类和接口类的区别" tabindex="-1"><a class="header-anchor" href="#抽象类和接口类的区别"><span>抽象类和接口类的区别</span></a></h2><p>见设计模式笔记</p><h2 id="箭头关系" tabindex="-1"><a class="header-anchor" href="#箭头关系"><span>箭头关系</span></a></h2><p>https://blog.csdn.net/wglla/article/details/52225571</p><p>泛化和实现</p><div class="language-mermaid line-numbers-mode" data-ext="mermaid" data-title="mermaid"><pre class="language-mermaid"><code><span class="token keyword">classDiagram</span>

father <span class="token arrow operator">&lt;|--</span> son<span class="token operator">:</span> 继承、泛化
IDog <span class="token arrow operator">&lt;|..</span> Dog<span class="token operator">:</span> 实现
<span class="token keyword">class</span> IDog<span class="token punctuation">{</span>
	<span class="token annotation important">&lt;&lt;Interface&gt;&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">direction</span> LR
A <span class="token arrow operator">..&gt;</span> B<span class="token operator">:</span> 使用、依赖
<span class="token keyword">class</span> A<span class="token punctuation">{</span>
	+method<span class="token text string">(B b)</span>
<span class="token punctuation">}</span>
Teacher <span class="token arrow operator">--&gt;</span> Course<span class="token operator">:</span> 包含、关联
<span class="token keyword">class</span> Teacher<span class="token punctuation">{</span>
	+Course
<span class="token punctuation">}</span>

Teacher2 <span class="token string">&quot;1&quot;</span><span class="token arrow operator">o--</span><span class="token string">&quot;n&quot;</span> Student<span class="token operator">:</span> 聚合,关联的一种特例、has-a
<span class="token keyword">class</span> Teacher2<span class="token punctuation">{</span>
	+Course
	+Students
<span class="token punctuation">}</span>
Human <span class="token arrow operator">*--</span> Leg
Human <span class="token arrow operator">*--</span> Leg2<span class="token operator">:</span> 组合，关联的一种特例、contains-a
Human <span class="token arrow operator">*--</span> Head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),i=[l];function o(r,p){return a(),e("div",null,i)}const u=n(t,[["render",o],["__file","UML.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/03.%20%E5%BC%80%E5%8F%91%E5%B1%82/UML/UML.html","title":"UML","lang":"zh-CN","frontmatter":{"description":"UML 目录 UML基本使用 画图软件 略、Typora的mermaid有类图、gizon渲染umlpattern也行（忘单词了） 抽象类和接口类的区别 见设计模式笔记 箭头关系 https://blog.csdn.net/wglla/article/details/52225571 泛化和实现","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/03.%20%E5%BC%80%E5%8F%91%E5%B1%82/UML/UML.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"UML"}],["meta",{"property":"og:description","content":"UML 目录 UML基本使用 画图软件 略、Typora的mermaid有类图、gizon渲染umlpattern也行（忘单词了） 抽象类和接口类的区别 见设计模式笔记 箭头关系 https://blog.csdn.net/wglla/article/details/52225571 泛化和实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UML\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"UML基本使用","slug":"uml基本使用","link":"#uml基本使用","children":[{"level":2,"title":"画图软件","slug":"画图软件","link":"#画图软件","children":[]},{"level":2,"title":"抽象类和接口类的区别","slug":"抽象类和接口类的区别","link":"#抽象类和接口类的区别","children":[]},{"level":2,"title":"箭头关系","slug":"箭头关系","link":"#箭头关系","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.44,"words":133},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/03. 开发层/UML/UML.md","autoDesc":true}');export{u as comp,m as data};
