import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,a as i}from"./app-Bmv5Ekr9.js";const n={},E=i('<h2 id="libevent的封装层次与原理浅析" tabindex="-1"><a class="header-anchor" href="#libevent的封装层次与原理浅析"><span>libevent的封装层次与原理浅析</span></a></h2><h2 id="libevent的封装层次" tabindex="-1"><a class="header-anchor" href="#libevent的封装层次"><span>libevent的封装层次</span></a></h2><p>[list2mermaid]</p><ul><li>事件检测 <ul><li>事件管理器 <ul><li>构建对象:event_base_new</li><li>构建对象:event_base_new_with_config</li><li>销毁对象:event_base_free</li><li>事件循环:event_base_loop</li><li>事件循环退出: <ul><li>event_base_loopbreak</li><li>event_base_loopexit</li></ul></li></ul></li><li>事件 <ul><li>构建事件对象:event_new <ul><li>event_set</li><li>event_base_set</li></ul></li><li>销毁事件对象:event_free</li><li>注册事件:event_add</li><li>销毁事件:event_del</li><li>修改事件:event_assign</li></ul></li></ul></li></ul><p>如果你不想自己管理I/O，希望由libevent库完成读写I/O的处理后自己仅需从缓冲区中读数据来完成事件的逻辑处理，那么可以从较高的封装层次上来使用libevent。它提供了关于网络I/O的连接事件、读写事件等等的事件操作接口，调用者需要做的仅仅是注册这些事件并且在事件处理函数被回调时从相应的buffer中读写业务数据。除了I/O事件，libevent还提供对定时事件和信号处理事件的管理，十分方便。</p>',5),o=[E];function a(r,_){return t(),l("div",null,o)}const c=e(n,[["render",a],["__file","09. 理解封装层次.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/09.%20%E7%90%86%E8%A7%A3%E5%B0%81%E8%A3%85%E5%B1%82%E6%AC%A1.html","title":"","lang":"zh-CN","frontmatter":{"description":"libevent的封装层次与原理浅析 libevent的封装层次 [list2mermaid] 事件检测 事件管理器 构建对象:event_base_new 构建对象:event_base_new_with_config 销毁对象:event_base_free 事件循环:event_base_loop 事件循环退出: event_base_loopb...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/09.%20%E7%90%86%E8%A7%A3%E5%B0%81%E8%A3%85%E5%B1%82%E6%AC%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"libevent的封装层次与原理浅析 libevent的封装层次 [list2mermaid] 事件检测 事件管理器 构建对象:event_base_new 构建对象:event_base_new_with_config 销毁对象:event_base_free 事件循环:event_base_loop 事件循环退出: event_base_loopb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"libevent的封装层次与原理浅析","slug":"libevent的封装层次与原理浅析","link":"#libevent的封装层次与原理浅析","children":[]},{"level":2,"title":"libevent的封装层次","slug":"libevent的封装层次","link":"#libevent的封装层次","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.82,"words":247},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libevent/09. 理解封装层次.md","autoDesc":true}');export{c as comp,p as data};
