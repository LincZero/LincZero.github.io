import{_ as i,c as e,e as a,a as l,o as n}from"./app-BHdORQJ2.js";const t={};function r(h,s){return n(),e("div",null,s[0]||(s[0]=[a('<h1 id="虚拟内存-vm" tabindex="-1"><a class="header-anchor" href="#虚拟内存-vm"><span>虚拟内存 (VM)</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li>作用：是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，为每个<strong>进程</strong>提供一个大的、一致的、私有的地址空间</li><li>三个优点： <ul><li><strong>高效</strong>：将主存看作是磁盘上的空间的高速<strong>缓存</strong>，高效利用的<strong>主存</strong></li><li><strong>简化</strong>：每个进程的地址空间都<strong>一致</strong>，便于<strong>管理</strong></li><li><strong>保护</strong>：保护每个进程的空间不被其他进程破坏</li></ul></li><li>为什么是进程？ <ul><li>进程有独立的虚拟内存，一个进程的多个线程共享一个虚拟内存（线程只有比较小的独立空间，用来放栈等）</li><li>进程也是系统分配 (这里就是分配虚拟内存) 资源的单位（线程是CPU调度的单位）</li></ul></li><li>学习 <ul><li>为什么需要学习 <ul><li>核心</li><li>强大</li><li>危险</li></ul></li><li>如何学习 <ul><li>先了解：如何工作</li><li>再了解：如何使用和管理</li></ul></li></ul></li><li>一些例子 <ul><li>假如程序需要4G，但你内存只有1G，能让你以为真的在4G空间里运行</li></ul></li></ul><h2 id="物理和虚拟寻址" tabindex="-1"><a class="header-anchor" href="#物理和虚拟寻址"><span>物理和虚拟寻址</span></a></h2><ul><li>物理地址 (Physical Address, PA) <ul><li>物理寻址 (physical addressing)</li><li>早期计算机使用</li></ul></li><li>虚拟地址 (Virtual Address, VA) <ul><li>虚拟寻址</li><li>现代处理器使用</li></ul></li></ul><p>虚拟寻址的原理：先转换为物理地址，这个任务叫 <strong>地址翻译</strong> (address translation)。虚拟地址--&gt;转换成物理地址--&gt;访问物理内存</p><p>地址翻译的实现方式是：CPU芯片上的一个专用硬件 —— <strong>内存管理单元 (Memory Management Unit, MMU)</strong></p><h2 id="地址空间-address-sapce" tabindex="-1"><a class="header-anchor" href="#地址空间-address-sapce"><span>地址空间 (address sapce)</span></a></h2><p>keyword</p><ul><li>线性地址空间 (linear address space)</li><li>n位地址空间：包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个地址空间</li><li>物理地址空间 (physical address space)</li><li>虚拟地址空间 (virtualaddress space)</li></ul><h2 id="虚拟内存三大功能" tabindex="-1"><a class="header-anchor" href="#虚拟内存三大功能"><span>虚拟内存三大功能</span></a></h2><p>任意时刻，虚拟页面的集合都分为这些不相交的子集：</p><ul><li>未分配页 (<strong>不会占用物理磁盘空间</strong>，C中未初始化的变量也是属于这种情况：有虚拟内存但没有相对应的物理内存)</li><li>已分配页</li></ul><h3 id="虚拟内存作为缓存的工具" tabindex="-1"><a class="header-anchor" href="#虚拟内存作为缓存的工具"><span>虚拟内存作为缓存的工具</span></a></h3><ul><li>虚拟页 (Virtual Page, VP)</li><li>物理页 (Physical Page, PP)、也叫页帧 (page frame)</li></ul><p>任意时刻，虚拟页面的集合都分为这些不相交的子集：</p><ul><li>未分配页 (<strong>不会占用物理磁盘空间</strong>，C中未初始化的变量也是属于这种情况：有虚拟内存但没有相对应的物理内存)</li><li>已分配页 <ul><li>缓存的</li><li>未缓存的</li></ul></li></ul><p>（这里有几个图很不错，一看就明白，有时间再拍照上来）</p><h4 id="dram缓存的组织结构" tabindex="-1"><a class="header-anchor" href="#dram缓存的组织结构"><span>DRAM缓存的组织结构</span></a></h4><p>速度由高到低</p><ul><li>CPU位置 <ul><li>寄存器</li><li>三级缓存 (lscpu可以看，L1&gt;L2&gt;L3)</li></ul></li><li>主存位置 (内存位置) <ul><li>SRAM</li><li>DRAM (慢SRAM 10倍，DRAM的不命中比SRAM要昂贵得多，DRAM不命中就要给磁盘了，因此虚拟页通常很大，4KB~2MB)</li></ul></li><li>磁盘位置 (慢DRAM 10w倍)</li></ul><h4 id="页表" tabindex="-1"><a class="header-anchor" href="#页表"><span>页表</span></a></h4><ul><li>页表项 / PTE (Page Table Entry)</li><li>有效位 (valid bit)</li></ul><h4 id="页替换算法" tabindex="-1"><a class="header-anchor" href="#页替换算法"><span>页替换算法</span></a></h4><h4 id="页命中" tabindex="-1"><a class="header-anchor" href="#页命中"><span>页命中</span></a></h4><h4 id="页不命中-缺页" tabindex="-1"><a class="header-anchor" href="#页不命中-缺页"><span>页不命中 (缺页)</span></a></h4><p>有点类似 &quot;cache miss&quot; 了，和缓存那里的概念应该是差不多的，同理的</p><ul><li>缺页 (page fault)</li><li>交换 (swapping)</li><li>页面调度 (paging)</li><li>按需页面调度 (demand paging)</li></ul><h4 id="分配页面" tabindex="-1"><a class="header-anchor" href="#分配页面"><span>分配页面</span></a></h4><h4 id="又是局部性救了我们" tabindex="-1"><a class="header-anchor" href="#又是局部性救了我们"><span>又是局部性救了我们</span></a></h4><ul><li>局部性 (locality)</li><li>局部性原则：…… <ul><li>工作集 (working set)</li><li>常驻集合 (resident set)</li></ul></li><li>抖动 (thrashing)</li></ul><h3 id="虚拟内存作为内存管理的工具" tabindex="-1"><a class="header-anchor" href="#虚拟内存作为内存管理的工具"><span>虚拟内存作为内存管理的工具</span></a></h3><p><strong>当VM比PM更大时，VM作为缓存工具很有用。而早期VM比PM更小，但VM也同样很有用。此时VM的另一个主要作用是 —— 内存管理的工具</strong></p><p>大大简化了内存管理</p><ul><li>简化链接</li><li>简化加载</li><li>简化共享</li><li>简化内存分配</li></ul><h3 id="虚拟内存作为内存保护的工具" tabindex="-1"><a class="header-anchor" href="#虚拟内存作为内存保护的工具"><span>虚拟内存作为内存保护的工具</span></a></h3><p>略</p><h2 id="地址翻译" tabindex="-1"><a class="header-anchor" href="#地址翻译"><span>地址翻译</span></a></h2><h3 id="结合高速缓存和虚拟内存" tabindex="-1"><a class="header-anchor" href="#结合高速缓存和虚拟内存"><span>结合高速缓存和虚拟内存</span></a></h3><h3 id="利用tlb加速地址翻译" tabindex="-1"><a class="header-anchor" href="#利用tlb加速地址翻译"><span>利用TLB加速地址翻译</span></a></h3><h3 id="多级页表" tabindex="-1"><a class="header-anchor" href="#多级页表"><span>多级页表</span></a></h3><h3 id="综合-端到端的地址翻译" tabindex="-1"><a class="header-anchor" href="#综合-端到端的地址翻译"><span>综合：端到端的地址翻译</span></a></h3><h2 id="案例研究-inter-core-i7-linux-内存系统" tabindex="-1"><a class="header-anchor" href="#案例研究-inter-core-i7-linux-内存系统"><span>案例研究：Inter Core i7 / Linux 内存系统</span></a></h2><h3 id="core-i7-地址翻译" tabindex="-1"><a class="header-anchor" href="#core-i7-地址翻译"><span>Core i7 地址翻译</span></a></h3><h3 id="linux虚拟内存系统" tabindex="-1"><a class="header-anchor" href="#linux虚拟内存系统"><span>Linux虚拟内存系统</span></a></h3><h2 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射"><span>内存映射</span></a></h2><ul><li>内存映射 (memory mapping)</li><li>文件区 (section)</li><li>请求二进制零的页 (demand-zero page)</li><li>交换文件 (swap file)，也叫交换空间 (swap space) 或者 交换区域 (swap area)</li></ul><h3 id="再看共享对象" tabindex="-1"><a class="header-anchor" href="#再看共享对象"><span>再看共享对象</span></a></h3><h3 id="再看fork函数" tabindex="-1"><a class="header-anchor" href="#再看fork函数"><span>再看fork函数</span></a></h3><h3 id="再看execve函数" tabindex="-1"><a class="header-anchor" href="#再看execve函数"><span>再看execve函数</span></a></h3><h3 id="使用mmap函数的用户级内存映射" tabindex="-1"><a class="header-anchor" href="#使用mmap函数的用户级内存映射"><span>使用mmap函数的用户级内存映射</span></a></h3><h2 id="动态内存分配" tabindex="-1"><a class="header-anchor" href="#动态内存分配"><span>动态内存分配</span></a></h2><p>虽然可以使用低级的<strong>mmap</strong>和<strong>munmap</strong>函数来创建和删除虚拟内存的区域， 但是C程序员会觉得用<strong>动态内存分配器 (dynamic memory allocator)</strong> 更方便，移植性更好</p><ul><li>堆 (heap)，向上 (低地址) 生长，指向堆顶的变量brk (读作&quot;break&quot;)</li><li>分配器原理 <ul><li>将堆视为一组不同大小的块 (block) 的集合来维护</li><li>每个块是一个连续的虚拟内存片 (chunk)，要么已分配、要么空闲</li></ul></li><li>分配器的两种风格 <ul><li>显式分配器 (explicit allocator)：C的 malloc/free，或C++的 new/delete</li><li>隐式分配器 (implicit allocator)：垃圾收集器 (garbage collector, GC)，垃圾收集 (garbage collection, GC)，如Lisp、ML、Java等语言</li></ul></li></ul><h3 id="malloc-和-free-函数" tabindex="-1"><a class="header-anchor" href="#malloc-和-free-函数"><span>malloc 和 free 函数</span></a></h3><p>更细节的底层原理见：“malloc、free和new、delete” 相关笔记</p><p>malloc</p><p>malloc，在32位和64位模式中，为8/16的倍数</p><p>malloc如果遇到问题（如要求的内存块比虚拟内存还大），则返回NULL，并设置errno</p><p>其他函数：malloc不初始化返回内存，要初始话可以使用calloc (基于malloc的瘦包装函数)，改变一个已分配块的大小：realloc函数</p><p>底层实现：malloc通过使用mmap和munmap函数，或者还可以使用sbrk函数</p><p>free</p><p>指向的位置必须是分配块的起始位置，否则出现未定义行为，且不会报错（free知道释放多大内存的原因是：malloc会<strong>多申请16Byte</strong>）</p><h3 id="为什么要用动态内存" tabindex="-1"><a class="header-anchor" href="#为什么要用动态内存"><span>为什么要用动态内存</span></a></h3><p>利用需要用户输入一个数字，然后生成对应大小的数组。</p><p>与之相反的做法就是硬编码大小来分配数组（指定数组的最大值，然后只使用一部分），缺点是无法使用超过MAX_N的数组</p><h3 id="分配器的要求和目标" tabindex="-1"><a class="header-anchor" href="#分配器的要求和目标"><span>分配器的要求和目标</span></a></h3><p>显式分配器必须在一些相当严格的约束下工作：</p><ul><li>处理任意请求序列</li><li>立即响应请求</li><li>只使用堆</li><li>对齐块 (对齐要求)</li><li>不修改已分配的块</li></ul><p>在这些限制条件下，分配器使用中尝试实现<strong>吞吐率最大化</strong>和<strong>内存使用率最大化</strong>，而这两个性能指标通常是冲突的</p><ul><li>目标1 最大化吞吐率</li><li>目标2 最大化内存利用率</li></ul><p>用来描述分配器使用堆的效率如何：</p>',72),l("ul",null,[l("li",null,[l("p",null,"峰值利用率 (peak utilization)"),l("ul",null,[l("li",null,[l("p",null,"有效载荷 (payload)")]),l("li",null,[l("p",null,"聚集有效载荷 (aggregate payload)")]),l("li",null,[l("p",null,"公式："),l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("msub",null,[l("mi",null,"U"),l("mi",null,"k")]),l("mo",null,"="),l("mfrac",null,[l("mrow",null,[l("munder",null,[l("mrow",null,[l("mi",null,"max"),l("mo",null,"⁡")]),l("mrow",null,[l("mi",null,"i"),l("mo",null,"≤"),l("mi",null,"k")])]),l("msub",null,[l("mi",null,"P"),l("mi",null,"i")])]),l("msub",null,[l("mi",null,"H"),l("mi",null,"k")])]),l("mspace",{linebreak:"newline"}),l("mtext",null," "),l("mspace",{linebreak:"newline"}),l("mtext",null,"其中："),l("mspace",{linebreak:"newline"}),l("msub",null,[l("mi",null,"U"),l("mi",null,"k")]),l("mtext",null,"为前"),l("mi",null,"k"),l("mo",null,"+"),l("mn",null,"1"),l("mtext",null,"个请求的峰值利用率，分配器目标是使该值最大化"),l("mspace",{linebreak:"newline"}),l("msub",null,[l("mi",null,"H"),l("mi",null,"k")]),l("mtext",null,"为堆当前的"),l("mo",{stretchy:"false"},"("),l("mtext",null,"单调非递减的"),l("mo",{stretchy:"false"},")"),l("mtext",null,"大小，"),l("mspace",{linebreak:"newline"}),l("msub",null,[l("mi",null,"P"),l("mi",null,"k")]),l("mtext",null,"为聚集有效载荷")]),l("annotation",{encoding:"application/x-tex"},"U_k = \\frac{\\max_{i\\leq k}P_i}{H_k}\\\\~\\\\ 其中：\\\\U_k为前k+1个请求的峰值利用率，分配器目标 是使该值最大化\\\\H_k为堆当前的(单调非递减的)大小，\\\\P_k为聚集有效载荷 ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])]),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"2.1963em","vertical-align":"-0.836em"}}),l("span",{class:"mord"},[l("span",{class:"mopen nulldelimiter"}),l("span",{class:"mfrac"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.3603em"}},[l("span",{style:{top:"-2.314em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.0813em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])])])]),l("span",{style:{top:"-3.23em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),l("span",{style:{top:"-3.677em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mop"},[l("span",{class:"mop"},"max"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mathnormal mtight"},"i"),l("span",{class:"mrel mtight"},"≤"),l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.2452em"}},[l("span")])])])])]),l("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3117em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight"},"i")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])])])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.836em"}},[l("span")])])])]),l("span",{class:"mclose nulldelimiter"})])]),l("span",{class:"mspace newline"}),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0em"}}),l("span",{class:"mspace nobreak"}," ")]),l("span",{class:"mspace newline"}),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord cjk_fallback"},"其中：")]),l("span",{class:"mspace newline"}),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"U"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])]),l("span",{class:"mord cjk_fallback"},"为前"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mord cjk_fallback"},"个请求的峰值利用率，分配器目标是使该值最大化")]),l("span",{class:"mspace newline"}),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.0813em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])]),l("span",{class:"mord cjk_fallback"},"为堆当前的"),l("span",{class:"mopen"},"("),l("span",{class:"mord cjk_fallback"},"单调非递减的"),l("span",{class:"mclose"},")"),l("span",{class:"mord cjk_fallback"},"大小，")]),l("span",{class:"mspace newline"}),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.3361em"}},[l("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.15em"}},[l("span")])])])])]),l("span",{class:"mord cjk_fallback"},"为聚集有效载荷")])])])])])]),l("li",null,[l("p",null,"从公式中可以发现，两个目标是互相牵引的 (最大化吞吐率和最大化内存利用率)。很容易弄以堆利用率为代价写吞吐率最大化的分配器。 分配器设计的一个挑战是从中找到平衡")])])])],-1),a(`<h3 id="碎片-fragmentation" tabindex="-1"><a class="header-anchor" href="#碎片-fragmentation"><span>碎片 (fragmentation)</span></a></h3><p>造成堆利用率很低的主要原因：碎片</p><p>碎片有两种：</p><ul><li>内部碎片 (internal fragmentation) <ul><li>发生：已分配块比有效载荷大时发生，具体原因有很多（例如可能指定一个较大的数组但只使用了其中一部分）</li><li>量化：比较简单，已分配块大小和有效载荷大小差的和</li></ul></li><li>外部碎片 (external fragmentation) <ul><li>发生：空闲内存总和满足一个内存分配，但没有一个单独的空闲块足够大</li><li>量化：困难得多，且不可预测</li><li>避免：分配器通常采用启发式策略，来试图维持少量大空闲块，而不是维持大量的小空闲块</li></ul></li></ul><h3 id="实现问题" tabindex="-1"><a class="header-anchor" href="#实现问题"><span>实现问题</span></a></h3><p>吞吐量和利用率之间的平衡，考虑以下问题：</p><ul><li>空闲块组织</li><li>放置</li><li>分割</li><li>合并</li></ul><h3 id="隐式空闲链表-及堆块的格式" tabindex="-1"><a class="header-anchor" href="#隐式空闲链表-及堆块的格式"><span>隐式空闲链表 (及堆块的格式)</span></a></h3><p>任何分配器都需要一些数据结构，来区分<strong>块边界</strong>、区分<strong>已分配块</strong>和<strong>空闲块</strong>（对应的物理地址信息不存在这，也没必要，MMU会处理）</p><p>堆块的格式：</p><ul><li>头部 <ul><li>块大小 (free通过这里知道释放多少，free处理的指针必须是块的起始指针，否则是未定义行为(而非报错))</li><li>已分配 / 空闲的 (后三位)</li></ul></li><li>有效载荷 (只包含已分配的块)</li><li>填充 (可选，填充原因可能是分配器策略的一部分，用来对付外部碎片，或对齐要求等。块大小不知道包含填充部分不？)</li></ul><p>隐式空闲链表：将堆组织为一个连续的已分配块和空闲块序列（通过头部的大小）</p><h3 id="放置已分配的块-放置策略" tabindex="-1"><a class="header-anchor" href="#放置已分配的块-放置策略"><span>放置已分配的块 (放置策略)</span></a></h3><p>当应用请求一个k字节块，分配器搜索空闲链表，查找一个足够大可以放置的空闲块，这个搜索是由 <strong>放置策略</strong> 确定的</p><p>常见的 放置策略 (placement policy)：</p><ul><li>首次适配 (first fit) <ul><li>方法：从头开始搜索，选择第一个合适的空闲块</li><li>优点：趋向于将大空闲块保留在链表后</li><li>缺点：在靠近链表起始处留下很多小空闲块的 “碎片”，增大了对大块的搜索时间</li></ul></li><li>下一次适配 (next fit) <ul><li>方法：类似首次适配，但每次从上一次搜索结束的位置开始</li><li>优点：Donald Knuth 作为首次适配的代替品提出，<strong>运行速度</strong>加快</li><li>缺点：但一些研究表明，<strong>利用率</strong>要比首次适配低得多</li></ul></li><li>最佳适配 (best fit) <ul><li>选择适合请求大小的最小空闲块</li><li>优点：<strong>利用率</strong></li><li>缺点：要求对堆进行彻底的搜索，<strong>慢</strong></li></ul></li></ul><h3 id="分隔空闲块" tabindex="-1"><a class="header-anchor" href="#分隔空闲块"><span>分隔空闲块</span></a></h3><p>分配器找到匹配的空闲块后，需要决定分配这个空闲块多少空间</p><h3 id="获取额外的堆空间" tabindex="-1"><a class="header-anchor" href="#获取额外的堆空间"><span>获取额外的堆空间</span></a></h3><ol><li>一个选择是通过合并那些在内存中物理相邻的空闲块来创建一个更大的空闲块（下一节描述）</li><li>当空闲块最大程度合并了，还是无法生成。则另一个选择是向核请求额外的堆内存</li></ol><h3 id="合并空闲块-合并策略" tabindex="-1"><a class="header-anchor" href="#合并空闲块-合并策略"><span>合并空闲块 (合并策略)</span></a></h3><p>当分配器释放一个分配块后，可能会有 假碎片 (fault fragmentation)：即相邻的空闲块没有合并在一起</p><p>解决：任何实际的分配器都必须合并相邻的空闲块，这个过程为 合并 (coalescing)</p><p>这又分合并策略：</p><ol><li>立即合并 (immediate coalescing) <ul><li>方法：每次一个块被释放，就合并所有相邻的块</li><li>缺点：对于某些请求模式，会产生一种形式的抖动，块会反复合并然后马上分割。例如在只剩6字大小空间时，反复分配和释放一个三个字的块</li></ul></li><li>推迟合并 (deferred coalescing) <ul><li>方法：等到某个稍晚的时间再合并（例如等到某个分配请求失败，然后扫描整个堆，合并所有的空闲块。这里只是例如，情况可能有所不同）</li><li>优点：解决立即合并的缺点，通常采用</li></ul></li></ol><h3 id="带边界标记的合并" tabindex="-1"><a class="header-anchor" href="#带边界标记的合并"><span>带边界标记的合并</span></a></h3><p>分配器如何实现合并的</p><ul><li>边界标记 (boundary tag) <ul><li>方法：Knuth提出，在每个块的结尾添加一个脚部 (footer，边界标记)</li></ul></li></ul><h3 id="综合-实现一个简单的分配器" tabindex="-1"><a class="header-anchor" href="#综合-实现一个简单的分配器"><span>综合：实现一个简单的分配器</span></a></h3><h3 id="显式空闲链表" tabindex="-1"><a class="header-anchor" href="#显式空闲链表"><span>显式空闲链表</span></a></h3><h3 id="分离的空闲链表" tabindex="-1"><a class="header-anchor" href="#分离的空闲链表"><span>分离的空闲链表</span></a></h3><h2 id="垃圾收集" tabindex="-1"><a class="header-anchor" href="#垃圾收集"><span>垃圾收集</span></a></h2><p>介绍：略</p><ul><li>垃圾收集器 (garbage collector)：一种动态内存分配器，显式分配块但从不显示释放他们</li><li>垃圾 (garbage)：程序不再需要的已分配块</li><li>垃圾收集 (garbage collection)</li><li>垃圾分类算法：很多。重点讨论 Mark&amp;Sweep (标记清除法) 方法，也因为它可以建立在malloc包的基础上</li></ul><h3 id="垃圾收集器的基本知识-可达图" tabindex="-1"><a class="header-anchor" href="#垃圾收集器的基本知识-可达图"><span>垃圾收集器的基本知识 (可达图)</span></a></h3><ul><li><p>有向可达图 (reachability graph)：垃圾收集器将内存视为一张有向可达图</p><ul><li>节点：节点分被分一组根节点 (root node) 和一组堆节点 (heap node)，每个堆节点对应堆中的一个已分配块</li><li>可达：当存在一条任意节点出发并到达p的又向路径时，我们说p是可达的 (reachable)</li><li>回收：在任何时刻，不可达节点对应于垃圾</li></ul></li><li><p>有GC语言：像ML、Java这种语言，对如何创建和使用指针有严格的控制，能够维护精确的可达图，因此能回收所有垃圾</p></li><li><p>无GC语言：通常不能维持精确的可达图，这种收集器也叫做 保守的垃圾收集器 (conservative garbage collector)。 保守的意思是：每个可达块都被正确标记为可达，而一些不可达节点却可能被错误地标记为可达</p></li></ul><h3 id="mark-sweep垃圾收集器-标记清除法" tabindex="-1"><a class="header-anchor" href="#mark-sweep垃圾收集器-标记清除法"><span>Mark&amp;Sweep垃圾收集器 (标记清除法)</span></a></h3><p>Mark&amp;Sweep (标记清除法) 方法，可以建立在malloc包的基础上 （和C++的shared_ptr的引用次数的原理是不同的，这个是要使用堆头信息的，且只记录是否被标记，而不记录引用次数）</p><p>由标记 (mark) 和清除 (sweep) 阶段组成</p><ul><li>标记阶段：记出根节点的所有可达和已分配的后继</li><li>清除阶段：释放每个未被标记的已分配块</li><li>（其中块头部中空闲的低位中的一位用来表示这个块是否被清除）</li></ul><p>一些所需方法：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ptr </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isPtr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 是否指向一个已经分配块的某个字</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockMarked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 是否已标记</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> blockAllocated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 是否已分配</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">			// 返回块b的以字为单位的长度 (不含头部)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> markBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 设为已标记</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unmarkBlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 设为未标记</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ptr </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextBloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 返回堆中块b的后续</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图示：</p><p>(略)</p><h3 id="c程序的保守mark-sweep" tabindex="-1"><a class="header-anchor" href="#c程序的保守mark-sweep"><span>C程序的保守Mark&amp;Sweep</span></a></h3><p>Mark&amp;Sweep 对C程序的垃圾回收是一种合适的方法，因为可以就地工作，而不需要移动任何块。</p><p>然而，C语言为isPtr函数的实现造成了一些有趣的挑战</p><ol><li><p>C不会用任何类型信息来标记内存位置</p></li><li><p>就算我们知道p是指针，isPtr也没有明显方法来判断p是否指向一个已分配块的有效载荷中的某个位置</p><p>解决方法：将已分配块集合维护成一棵平衡二叉树</p></li></ol><p>……</p><p>……</p><p>……</p><h2 id="c程序中常见的与内存有关的错误" tabindex="-1"><a class="header-anchor" href="#c程序中常见的与内存有关的错误"><span>C程序中常见的与内存有关的错误</span></a></h2><h3 id="间接引用坏指针" tabindex="-1"><a class="header-anchor" href="#间接引用坏指针"><span>间接引用坏指针</span></a></h3><h3 id="读未初始化的内存" tabindex="-1"><a class="header-anchor" href="#读未初始化的内存"><span>读未初始化的内存</span></a></h3><h3 id="允许栈缓冲溢出" tabindex="-1"><a class="header-anchor" href="#允许栈缓冲溢出"><span>允许栈缓冲溢出</span></a></h3><h3 id="假设指针和它们指向的对象是相同大小的" tabindex="-1"><a class="header-anchor" href="#假设指针和它们指向的对象是相同大小的"><span>假设指针和它们指向的对象是相同大小的</span></a></h3><h3 id="造成错位错误" tabindex="-1"><a class="header-anchor" href="#造成错位错误"><span>造成错位错误</span></a></h3><h3 id="引用指针-而不是它所指向的对象" tabindex="-1"><a class="header-anchor" href="#引用指针-而不是它所指向的对象"><span>引用指针，而不是它所指向的对象</span></a></h3><h3 id="误解指针运算" tabindex="-1"><a class="header-anchor" href="#误解指针运算"><span>误解指针运算</span></a></h3><h3 id="引用不存在的变量" tabindex="-1"><a class="header-anchor" href="#引用不存在的变量"><span>引用不存在的变量</span></a></h3><h3 id="引用空闲堆块中的数据" tabindex="-1"><a class="header-anchor" href="#引用空闲堆块中的数据"><span>引用空闲堆块中的数据</span></a></h3><h3 id="引起内存泄露" tabindex="-1"><a class="header-anchor" href="#引起内存泄露"><span>引起内存泄露</span></a></h3><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2>`,63)]))}const c=i(t,[["render",r],["__file","09. 虚拟内存.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/02.%20%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/09.%20%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.html","title":"虚拟内存 (VM)","lang":"zh-CN","frontmatter":{"description":"虚拟内存 (VM) 目录 作用：是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，为每个进程提供一个大的、一致的、私有的地址空间 三个优点： 高效：将主存看作是磁盘上的空间的高速缓存，高效利用的主存 简化：每个进程的地址空间都一致，便于管理 保护：保护每个进程的空间不被其他进程破坏 为什么是进程？ 进程有独立的虚拟内存，一个进程的多个线程共...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/02.%20%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%8A%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/09.%20%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"虚拟内存 (VM)"}],["meta",{"property":"og:description","content":"虚拟内存 (VM) 目录 作用：是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，为每个进程提供一个大的、一致的、私有的地址空间 三个优点： 高效：将主存看作是磁盘上的空间的高速缓存，高效利用的主存 简化：每个进程的地址空间都一致，便于管理 保护：保护每个进程的空间不被其他进程破坏 为什么是进程？ 进程有独立的虚拟内存，一个进程的多个线程共..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"虚拟内存 (VM)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"虚拟内存 (VM)","slug":"虚拟内存-vm","link":"#虚拟内存-vm","children":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"物理和虚拟寻址","slug":"物理和虚拟寻址","link":"#物理和虚拟寻址","children":[]},{"level":2,"title":"地址空间 (address sapce)","slug":"地址空间-address-sapce","link":"#地址空间-address-sapce","children":[]},{"level":2,"title":"虚拟内存三大功能","slug":"虚拟内存三大功能","link":"#虚拟内存三大功能","children":[{"level":3,"title":"虚拟内存作为缓存的工具","slug":"虚拟内存作为缓存的工具","link":"#虚拟内存作为缓存的工具","children":[{"level":4,"title":"DRAM缓存的组织结构","slug":"dram缓存的组织结构","link":"#dram缓存的组织结构","children":[]},{"level":4,"title":"页表","slug":"页表","link":"#页表","children":[]},{"level":4,"title":"页替换算法","slug":"页替换算法","link":"#页替换算法","children":[]},{"level":4,"title":"页命中","slug":"页命中","link":"#页命中","children":[]},{"level":4,"title":"页不命中 (缺页)","slug":"页不命中-缺页","link":"#页不命中-缺页","children":[]},{"level":4,"title":"分配页面","slug":"分配页面","link":"#分配页面","children":[]},{"level":4,"title":"又是局部性救了我们","slug":"又是局部性救了我们","link":"#又是局部性救了我们","children":[]}]},{"level":3,"title":"虚拟内存作为内存管理的工具","slug":"虚拟内存作为内存管理的工具","link":"#虚拟内存作为内存管理的工具","children":[]},{"level":3,"title":"虚拟内存作为内存保护的工具","slug":"虚拟内存作为内存保护的工具","link":"#虚拟内存作为内存保护的工具","children":[]}]},{"level":2,"title":"地址翻译","slug":"地址翻译","link":"#地址翻译","children":[{"level":3,"title":"结合高速缓存和虚拟内存","slug":"结合高速缓存和虚拟内存","link":"#结合高速缓存和虚拟内存","children":[]},{"level":3,"title":"利用TLB加速地址翻译","slug":"利用tlb加速地址翻译","link":"#利用tlb加速地址翻译","children":[]},{"level":3,"title":"多级页表","slug":"多级页表","link":"#多级页表","children":[]},{"level":3,"title":"综合：端到端的地址翻译","slug":"综合-端到端的地址翻译","link":"#综合-端到端的地址翻译","children":[]}]},{"level":2,"title":"案例研究：Inter Core i7 / Linux 内存系统","slug":"案例研究-inter-core-i7-linux-内存系统","link":"#案例研究-inter-core-i7-linux-内存系统","children":[{"level":3,"title":"Core i7 地址翻译","slug":"core-i7-地址翻译","link":"#core-i7-地址翻译","children":[]},{"level":3,"title":"Linux虚拟内存系统","slug":"linux虚拟内存系统","link":"#linux虚拟内存系统","children":[]}]},{"level":2,"title":"内存映射","slug":"内存映射","link":"#内存映射","children":[{"level":3,"title":"再看共享对象","slug":"再看共享对象","link":"#再看共享对象","children":[]},{"level":3,"title":"再看fork函数","slug":"再看fork函数","link":"#再看fork函数","children":[]},{"level":3,"title":"再看execve函数","slug":"再看execve函数","link":"#再看execve函数","children":[]},{"level":3,"title":"使用mmap函数的用户级内存映射","slug":"使用mmap函数的用户级内存映射","link":"#使用mmap函数的用户级内存映射","children":[]}]},{"level":2,"title":"动态内存分配","slug":"动态内存分配","link":"#动态内存分配","children":[{"level":3,"title":"malloc 和 free 函数","slug":"malloc-和-free-函数","link":"#malloc-和-free-函数","children":[]},{"level":3,"title":"为什么要用动态内存","slug":"为什么要用动态内存","link":"#为什么要用动态内存","children":[]},{"level":3,"title":"分配器的要求和目标","slug":"分配器的要求和目标","link":"#分配器的要求和目标","children":[]},{"level":3,"title":"碎片 (fragmentation)","slug":"碎片-fragmentation","link":"#碎片-fragmentation","children":[]},{"level":3,"title":"实现问题","slug":"实现问题","link":"#实现问题","children":[]},{"level":3,"title":"隐式空闲链表 (及堆块的格式)","slug":"隐式空闲链表-及堆块的格式","link":"#隐式空闲链表-及堆块的格式","children":[]},{"level":3,"title":"放置已分配的块 (放置策略)","slug":"放置已分配的块-放置策略","link":"#放置已分配的块-放置策略","children":[]},{"level":3,"title":"分隔空闲块","slug":"分隔空闲块","link":"#分隔空闲块","children":[]},{"level":3,"title":"获取额外的堆空间","slug":"获取额外的堆空间","link":"#获取额外的堆空间","children":[]},{"level":3,"title":"合并空闲块 (合并策略)","slug":"合并空闲块-合并策略","link":"#合并空闲块-合并策略","children":[]},{"level":3,"title":"带边界标记的合并","slug":"带边界标记的合并","link":"#带边界标记的合并","children":[]},{"level":3,"title":"综合：实现一个简单的分配器","slug":"综合-实现一个简单的分配器","link":"#综合-实现一个简单的分配器","children":[]},{"level":3,"title":"显式空闲链表","slug":"显式空闲链表","link":"#显式空闲链表","children":[]},{"level":3,"title":"分离的空闲链表","slug":"分离的空闲链表","link":"#分离的空闲链表","children":[]}]},{"level":2,"title":"垃圾收集","slug":"垃圾收集","link":"#垃圾收集","children":[{"level":3,"title":"垃圾收集器的基本知识 (可达图)","slug":"垃圾收集器的基本知识-可达图","link":"#垃圾收集器的基本知识-可达图","children":[]},{"level":3,"title":"Mark&Sweep垃圾收集器 (标记清除法)","slug":"mark-sweep垃圾收集器-标记清除法","link":"#mark-sweep垃圾收集器-标记清除法","children":[]},{"level":3,"title":"C程序的保守Mark&Sweep","slug":"c程序的保守mark-sweep","link":"#c程序的保守mark-sweep","children":[]}]},{"level":2,"title":"C程序中常见的与内存有关的错误","slug":"c程序中常见的与内存有关的错误","link":"#c程序中常见的与内存有关的错误","children":[{"level":3,"title":"间接引用坏指针","slug":"间接引用坏指针","link":"#间接引用坏指针","children":[]},{"level":3,"title":"读未初始化的内存","slug":"读未初始化的内存","link":"#读未初始化的内存","children":[]},{"level":3,"title":"允许栈缓冲溢出","slug":"允许栈缓冲溢出","link":"#允许栈缓冲溢出","children":[]},{"level":3,"title":"假设指针和它们指向的对象是相同大小的","slug":"假设指针和它们指向的对象是相同大小的","link":"#假设指针和它们指向的对象是相同大小的","children":[]},{"level":3,"title":"造成错位错误","slug":"造成错位错误","link":"#造成错位错误","children":[]},{"level":3,"title":"引用指针，而不是它所指向的对象","slug":"引用指针-而不是它所指向的对象","link":"#引用指针-而不是它所指向的对象","children":[]},{"level":3,"title":"误解指针运算","slug":"误解指针运算","link":"#误解指针运算","children":[]},{"level":3,"title":"引用不存在的变量","slug":"引用不存在的变量","link":"#引用不存在的变量","children":[]},{"level":3,"title":"引用空闲堆块中的数据","slug":"引用空闲堆块中的数据","link":"#引用空闲堆块中的数据","children":[]},{"level":3,"title":"引起内存泄露","slug":"引起内存泄露","link":"#引起内存泄露","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"git":{},"readingTime":{"minutes":12.67,"words":3800},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/02. 在系统上运行程序/09. 虚拟内存.md","excerpt":"\\n<h2>目录</h2>\\n<ul>\\n<li>作用：是硬件异常、硬件地址翻译、主存、磁盘文件和内核软件的完美交互，为每个<strong>进程</strong>提供一个大的、一致的、私有的地址空间</li>\\n<li>三个优点：\\n<ul>\\n<li><strong>高效</strong>：将主存看作是磁盘上的空间的高速<strong>缓存</strong>，高效利用的<strong>主存</strong></li>\\n<li><strong>简化</strong>：每个进程的地址空间都<strong>一致</strong>，便于<strong>管理</strong></li>\\n<li><strong>保护</strong>：保护每个进程的空间不被其他进程破坏</li>\\n</ul>\\n</li>\\n<li>为什么是进程？\\n<ul>\\n<li>进程有独立的虚拟内存，一个进程的多个线程共享一个虚拟内存（线程只有比较小的独立空间，用来放栈等）</li>\\n<li>进程也是系统分配 (这里就是分配虚拟内存) 资源的单位（线程是CPU调度的单位）</li>\\n</ul>\\n</li>\\n<li>学习\\n<ul>\\n<li>为什么需要学习\\n<ul>\\n<li>核心</li>\\n<li>强大</li>\\n<li>危险</li>\\n</ul>\\n</li>\\n<li>如何学习\\n<ul>\\n<li>先了解：如何工作</li>\\n<li>再了解：如何使用和管理</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>一些例子\\n<ul>\\n<li>假如程序需要4G，但你内存只有1G，能让你以为真的在4G空间里运行</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/02. 在系统上运行程序/09. 虚拟内存.md","value":{"title":"09. 虚拟内存","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/02. 在系统上运行程序/09. 虚拟内存.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,d as data};
