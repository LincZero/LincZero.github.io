import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as p,c as i,b as n,e as s,d as t,a as e}from"./app-9z1y9ucS.js";const r={},c=e('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h2>',4),u={href:"https://docs.python.org/3/reference/compound_stmts.html#for",target:"_blank",rel:"noopener noreferrer"},d=n("ul",null,[n("li",null,"列表"),n("li",null,"元组"),n("li",null,"字典"),n("li",null,"字符串")],-1),k=n("li",null,[n("p",null,"优点"),n("ul",null,[n("li",null,"这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一")])],-1),_=n("p",null,"原理",-1),h={href:"https://docs.python.org/3/library/functions.html#iter",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"iter()",-1),m={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"__next__()",-1),g={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"__next__()",-1),f={href:"https://docs.python.org/3/library/exceptions.html#StopIteration",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.python.org/3/reference/compound_stmts.html#for",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"__next__()",-1),w={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"__next__()",-1),A=e(`<li><p>以下是其工作原理的示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> it
<span class="token operator">&lt;</span>iterator <span class="token builtin">object</span> at <span class="token number">0x00A1DB50</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;a&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;b&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;c&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?
    <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
StopIteration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),q=e(`<li><p>使用（给自己的类添加迭代器）</p><ul><li><p>例如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Reverse</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>							<span class="token comment"># 迭代器</span>
        <span class="token keyword">return</span> self
    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>							<span class="token comment"># 返回</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        self<span class="token punctuation">.</span>index <span class="token operator">=</span> self<span class="token punctuation">.</span>index <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
    
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rev <span class="token operator">=</span> Reverse<span class="token punctuation">(</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Reverse <span class="token builtin">object</span> at <span class="token number">0x00A1DB50</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> rev<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
m
a
p
s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1),N=n("h2",{id:"生成器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#生成器"},[n("span",null,"生成器")])],-1),L=n("li",null,[n("p",null,"概念"),n("ul",null,[n("li",null,"是创建迭代器的简单而强大的工具")])],-1),D=n("p",null,"写法",-1),I={href:"https://docs.python.org/3/reference/simple_stmts.html#yield",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"yield",-1),C={href:"https://docs.python.org/3/library/functions.html#next",target:"_blank",rel:"noopener noreferrer"},F=e(`<li><p>以下示例演示了生成器可以很简单的创建出来:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
&gt;&gt;&gt; for char in reverse(&#39;golf&#39;):
...     print(char)
...
f
l
o
g
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),T=n("p",null,"原理",-1),j={href:"https://docs.python.org/3/reference/datamodel.html#object.__iter__",target:"_blank",rel:"noopener noreferrer"},M=n("strong",null,"iter",-1),R={href:"https://docs.python.org/3/reference/expressions.html#generator.__next__",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"next",-1);function Z(z,J){const a=l("ExternalLinkIcon");return p(),i("div",null,[c,n("ul",null,[n("li",null,[n("p",null,[s("现在你可能注意到大多数容器对象都可以用 "),n("a",u,[s("for"),t(a)]),s(" 遍历：")]),d]),k,n("li",null,[_,n("ul",null,[n("li",null,[n("p",null,[s("在后台，for语句在容器对象中调用"),n("a",h,[v,t(a)]),s("，该函数返回一个定义了"),n("a",m,[b,t(a)]),s("方法的迭代器对象，它在容器中逐一访问元素")])]),n("li",null,[n("p",null,[s("没有后续的元素时，"),n("a",g,[y,t(a)]),s("抛出一个 "),n("a",f,[s("StopIteration"),t(a)]),s(" 异常通知 "),n("a",x,[s("for"),t(a)]),s(" 语句循环结束")])]),n("li",null,[n("p",null,[s("你可以是用内建的"),n("a",E,[B,t(a)]),s("函数调用"),n("a",w,[P,t(a)]),s("方法")])]),A])]),q]),N,n("ul",null,[L,n("li",null,[D,n("ul",null,[n("li",null,[n("p",null,[s("它们写起来就像是正规的函数，需要返回数据的时候使用"),n("a",I,[S,t(a)]),s("语句")])]),n("li",null,[n("p",null,[s("每次 "),n("a",C,[s("next()"),t(a)]),s(" 被调用时，生成器回复它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）")])]),F])]),n("li",null,[T,n("ul",null,[n("li",null,[s("自动创建了 "),n("a",j,[M,s("()"),t(a)]),s(" 和 "),n("a",R,[V,s("()"),t(a)]),s(" 方法，生成器显得如此简洁")])])])])])}const H=o(r,[["render",Z],["__file","02. 泛型.html.vue"]]),K=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":2,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":2,"title":"生成器","slug":"生成器","link":"#生成器","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.58,"words":475},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/05. 封装/02. 泛型.md","autoDesc":true}');export{H as comp,K as data};
