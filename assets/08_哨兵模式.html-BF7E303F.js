import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,a}from"./app-COGYeYB8.js";const l={},s=a(`<h1 id="redis哨兵模式" tabindex="-1"><a class="header-anchor" href="#redis哨兵模式"><span>Redis哨兵模式</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>之前模式的缺点：</p><blockquote><p>前面 主从模式 笔记中设置了一个一主二从的简单集群，但存在一些缺点：</p><p>例如如果主节点宕机了，需要将一个节点提升为主节点</p><p>这时产生了人工干预，没有自动故障转移。而哨兵模式可以解决这个问题。</p></blockquote><p>哨兵模式</p><blockquote><p>大致原理：哨兵会以一个独立的进程运行在集群中并监控各个节点。</p><p>主要执行的功能：</p><ol><li>监控。不断发送命令来检查节点是否正常</li><li>通知。当发现节点出现问题后，哨兵通过发布订阅模式来通知其他节点</li><li>自动故障转移。当主节点不能正常工作时，开始自动故障转移，将一个从节点升级为主节点，再让其他节点指向新主节点</li></ol></blockquote><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>先添加哨兵节点</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">vi</span> sentinel.conf					<span class="token comment"># 配置哨兵节点</span>
sentinel monitor master <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token number">1</span>	<span class="token comment"># 这个端口是主节点的端口，哨兵自身的端口是随机的</span>
$ redis-sentinel sentinel.conf		<span class="token comment"># 启动哨兵节点</span>

<span class="token comment"># 在主节点服务器所在终端Ctrl+C来模拟主节点宕机</span>
<span class="token comment"># 然后等待一下，就能看在启动哨兵节点的终端看到检测到了，并将6381节点设置成了新的主节点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="哨兵节点宕机问题" tabindex="-1"><a class="header-anchor" href="#哨兵节点宕机问题"><span>哨兵节点宕机问题</span></a></h3><p>因为哨兵节点的进程也有可能挂掉，实际生产环境中，往往设置三个哨兵节点保证高可用。</p><p>三个哨兵节点会通过选举方式选出一个领导者，来进行监听。领导者挂掉后剩余哨兵节点会重新选举</p><h3 id="个人疑问" tabindex="-1"><a class="header-anchor" href="#个人疑问"><span>（个人疑问）</span></a></h3><p>个人Q：主从节点连接的发起端是从节点，但你哨兵设置新节点是新端口而非沿用之前的端口，那么从节点应该没办法连接到新的主节点吧？何况哨兵端口也是随机的</p>`,15),i=[s];function o(p,r){return n(),t("div",null,i)}const h=e(l,[["render",o],["__file","08_哨兵模式.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/01.%20Redis/03_%E5%85%B6%E4%BB%96/08_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html","title":"Redis哨兵模式","lang":"zh-CN","frontmatter":{"description":"Redis哨兵模式 概念 之前模式的缺点： 前面 主从模式 笔记中设置了一个一主二从的简单集群，但存在一些缺点： 例如如果主节点宕机了，需要将一个节点提升为主节点 这时产生了人工干预，没有自动故障转移。而哨兵模式可以解决这个问题。 哨兵模式 大致原理：哨兵会以一个独立的进程运行在集群中并监控各个节点。 主要执行的功能： 监控。不断发送命令来检查节点是否...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/01.%20Redis/03_%E5%85%B6%E4%BB%96/08_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Redis哨兵模式"}],["meta",{"property":"og:description","content":"Redis哨兵模式 概念 之前模式的缺点： 前面 主从模式 笔记中设置了一个一主二从的简单集群，但存在一些缺点： 例如如果主节点宕机了，需要将一个节点提升为主节点 这时产生了人工干预，没有自动故障转移。而哨兵模式可以解决这个问题。 哨兵模式 大致原理：哨兵会以一个独立的进程运行在集群中并监控各个节点。 主要执行的功能： 监控。不断发送命令来检查节点是否..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis哨兵模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Redis哨兵模式","slug":"redis哨兵模式","link":"#redis哨兵模式","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"哨兵节点宕机问题","slug":"哨兵节点宕机问题","link":"#哨兵节点宕机问题","children":[]},{"level":3,"title":"（个人疑问）","slug":"个人疑问","link":"#个人疑问","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.7,"words":511},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Web/04. 后端/数据库/01. Redis/03_其他/08_哨兵模式.md","excerpt":"\\n<h2>概念</h2>\\n<p>之前模式的缺点：</p>\\n<blockquote>\\n<p>前面 主从模式 笔记中设置了一个一主二从的简单集群，但存在一些缺点：</p>\\n<p>例如如果主节点宕机了，需要将一个节点提升为主节点</p>\\n<p>这时产生了人工干预，没有自动故障转移。而哨兵模式可以解决这个问题。</p>\\n</blockquote>\\n<p>哨兵模式</p>\\n<blockquote>\\n<p>大致原理：哨兵会以一个独立的进程运行在集群中并监控各个节点。</p>\\n<p>主要执行的功能：</p>\\n<ol>\\n<li>监控。不断发送命令来检查节点是否正常</li>\\n<li>通知。当发现节点出现问题后，哨兵通过发布订阅模式来通知其他节点</li>\\n<li>自动故障转移。当主节点不能正常工作时，开始自动故障转移，将一个从节点升级为主节点，再让其他节点指向新主节点</li>\\n</ol>\\n</blockquote>","autoDesc":true}');export{h as comp,m as data};
