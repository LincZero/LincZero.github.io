import{_ as s,c as a,a as e,o as t}from"./app-rdPRYmDk.js";const i={};function p(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="带注释的示例" tabindex="-1"><a class="header-anchor" href="#带注释的示例"><span>带注释的示例</span></a></h1><p>示例代码片段的集合正在不断增加……</p><h2 id="comfyui-的-ui-偏好设置" tabindex="-1"><a class="header-anchor" href="#comfyui-的-ui-偏好设置"><span>ComfyUI 的 UI 偏好设置</span></a></h2><h3 id="添加和读取设置" tabindex="-1"><a class="header-anchor" href="#添加和读取设置"><span>添加和读取设置</span></a></h3><div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>import { app } from &quot;../../scripts/app.js&quot;;

/* In setup(), add the setting */
    app.ui.settings.addSetting({
        id: &quot;unique.setting.name&quot;,
        name: &quot;Switch my cool extension on?&quot;,
        type: &quot;boolean&quot;, // &quot;text&quot; is another simple option
        defaultValue: false,
        /* To listen for changes, add an onChange parameter
        onChange: (newVal, oldVal) =&gt; { console.log(&quot;Setting got changed!&quot;) },
        */
    });

/* then elsewhere, read it (with a default value just in case) */
    if (app.ui.settings.getSettingValue(&quot;unique.setting.name&quot;, false)) { 
        /* do something */
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字滑块" tabindex="-1"><a class="header-anchor" href="#数字滑块"><span>数字滑块</span></a></h3><p>该类型 <code>slider</code> 允许用户直接或通过滑块输入值：</p><div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>    app.ui.settings.addSetting({
        id: &quot;unique.setting.slider&quot;,
        name: &quot;Move me around&quot;,
        type: &quot;slider&quot;,
        attrs: { min: -1, max: 500, step: 1, },
        defaultValue: 0,
        onChange: (newVal, oldVal) =&gt; { console.log(\`Setting got changed to \${newVal}\`) },
    });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="右键菜单" tabindex="-1"><a class="header-anchor" href="#右键菜单"><span>右键菜单</span></a></h2><h3 id="背景菜单" tabindex="-1"><a class="header-anchor" href="#背景菜单"><span>背景菜单</span></a></h3><p>主背景菜单（在画布上单击鼠标右键）通过调用 生成<br><code>LGraph.getCanvasMenuOptions</code>。添加自己的菜单选项的一种方法是劫持此调用：</p><div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>/* in setup() */
    const original_getCanvasMenuOptions = LGraphCanvas.prototype.getCanvasMenuOptions;
    LGraphCanvas.prototype.getCanvasMenuOptions = function () {
        // get the basic options 
        const options = original_getCanvasMenuOptions.apply(this, arguments);
        options.push(null); // inserts a divider
        options.push({
            content: &quot;The text for the menu&quot;,
            callback: async () =&gt; {
                // do whatever
            }
        })
        return options;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="节点菜单" tabindex="-1"><a class="header-anchor" href="#节点菜单"><span>节点菜单</span></a></h3><p>当你右键点击一个节点时，菜单同样由 生成 <code>node.getExtraMenuOptions</code>。但是它不返回选项对象，而是将其传入...</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* in beforeRegisterNodeDef() */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType<span class="token operator">?.</span>comfyClass<span class="token operator">==</span><span class="token string">&quot;MyNodeClass&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> original_getExtraMenuOptions <span class="token operator">=</span> nodeType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getExtraMenuOptions<span class="token punctuation">;</span>
    nodeType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getExtraMenuOptions</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        original_getExtraMenuOptions<span class="token operator">?.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Do something fun&quot;</span><span class="token punctuation">,</span>
            <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// fun thing</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子菜单" tabindex="-1"><a class="header-anchor" href="#子菜单"><span>子菜单</span></a></h3><p><code>LiteGraph.ContextMenu</code> 如果您想要一个子菜单，请提供用于创建它的回调：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">make_submenu</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> options<span class="token punctuation">,</span> e<span class="token punctuation">,</span> menu<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> submenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiteGraph<span class="token punctuation">.</span>ContextMenu</span><span class="token punctuation">(</span>
        <span class="token punctuation">[</span><span class="token string">&quot;option 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;option 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;option 3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> 
            <span class="token literal-property property">event</span><span class="token operator">:</span> e<span class="token punctuation">,</span> 
            <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token comment">// do something with v (==&quot;option x&quot;)</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> 
            <span class="token literal-property property">parentMenu</span><span class="token operator">:</span> menu<span class="token punctuation">,</span> 
            <span class="token literal-property property">node</span><span class="token operator">:</span>node
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/* ... */</span>
    options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;Menu with options&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">has_submenu</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token literal-property property">callback</span><span class="token operator">:</span> make_submenu<span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="捕获-ui-事件" tabindex="-1"><a class="header-anchor" href="#捕获-ui-事件"><span>捕获 UI 事件</span></a></h2><p>这与您所期望的一样 - 在 DOM 中找到 UI 元素并添加一个事件监听器。<code>setup()</code> 这是一个执行此操作的好地方，因为页面已完全加载。例如，要检测对“队列”按钮的点击：</p><div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>function queue_button_pressed() { console.log(&quot;Queue button was pressed!&quot;) }
document.getElementById(&quot;queue-button&quot;).addEventListener(&quot;click&quot;, queue_button_pressed);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检测工作流程何时开始" tabindex="-1"><a class="header-anchor" href="#检测工作流程何时开始"><span>检测工作流程何时开始</span></a></h2><p>这是众多活动之一 <code>api</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> api <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../../scripts/api.js&quot;</span><span class="token punctuation">;</span>
<span class="token comment">/* in setup() */</span>
    <span class="token keyword">function</span> <span class="token function">on_execution_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">/* do whatever */</span>
    <span class="token punctuation">}</span>
    api<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;execution_start&quot;</span><span class="token punctuation">,</span> on_execution_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检测中断的工作流程" tabindex="-1"><a class="header-anchor" href="#检测中断的工作流程"><span>检测中断的工作流程</span></a></h2><p>劫持api的一个简单示例：</p><div class="language-Javascript line-numbers-mode" data-ext="Javascript" data-title="Javascript"><pre class="language-Javascript"><code>import { api } from &quot;../../scripts/api.js&quot;;
/* in setup() */
    const original_api_interrupt = api.interrupt;
    api.interrupt = function () {
        /* Do something before the original method is called */
        original_api_interrupt.apply(this, arguments);
        /* Or after */
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="捕获节点上的点击次数" tabindex="-1"><a class="header-anchor" href="#捕获节点上的点击次数"><span>捕获节点上的点击次数</span></a></h2><p><code>node</code> 有一个可以劫持的 mouseDown 方法。这次我们要小心传递任何返回值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">nodeCreated</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">?.</span>comfyClass <span class="token operator">===</span> <span class="token string">&quot;My Node Name&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> original_onMouseDown <span class="token operator">=</span> node<span class="token punctuation">.</span>onMouseDown<span class="token punctuation">;</span>
        node<span class="token punctuation">.</span><span class="token function-variable function">onMouseDown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">e<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> canvas</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;ouch!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> original_onMouseDown<span class="token operator">?.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30)]))}const c=s(i,[["render",p],["__file","04. 带注释的示例.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/04.%20%E5%B8%A6%E6%B3%A8%E9%87%8A%E7%9A%84%E7%A4%BA%E4%BE%8B.html","title":"带注释的示例","lang":"zh-CN","frontmatter":{"description":"带注释的示例 示例代码片段的集合正在不断增加…… ComfyUI 的 UI 偏好设置 添加和读取设置 数字滑块 该类型 slider 允许用户直接或通过滑块输入值： 右键菜单 背景菜单 主背景菜单（在画布上单击鼠标右键）通过调用 生成 LGraph.getCanvasMenuOptions。添加自己的菜单选项的一种方法是劫持此调用： 节点菜单 当你右键...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/04.%20%E5%B8%A6%E6%B3%A8%E9%87%8A%E7%9A%84%E7%A4%BA%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"带注释的示例"}],["meta",{"property":"og:description","content":"带注释的示例 示例代码片段的集合正在不断增加…… ComfyUI 的 UI 偏好设置 添加和读取设置 数字滑块 该类型 slider 允许用户直接或通过滑块输入值： 右键菜单 背景菜单 主背景菜单（在画布上单击鼠标右键）通过调用 生成 LGraph.getCanvasMenuOptions。添加自己的菜单选项的一种方法是劫持此调用： 节点菜单 当你右键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"带注释的示例\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"带注释的示例","slug":"带注释的示例","link":"#带注释的示例","children":[{"level":2,"title":"ComfyUI 的 UI 偏好设置","slug":"comfyui-的-ui-偏好设置","link":"#comfyui-的-ui-偏好设置","children":[{"level":3,"title":"添加和读取设置","slug":"添加和读取设置","link":"#添加和读取设置","children":[]},{"level":3,"title":"数字滑块","slug":"数字滑块","link":"#数字滑块","children":[]}]},{"level":2,"title":"右键菜单","slug":"右键菜单","link":"#右键菜单","children":[{"level":3,"title":"背景菜单","slug":"背景菜单","link":"#背景菜单","children":[]},{"level":3,"title":"节点菜单","slug":"节点菜单","link":"#节点菜单","children":[]},{"level":3,"title":"子菜单","slug":"子菜单","link":"#子菜单","children":[]}]},{"level":2,"title":"捕获 UI 事件","slug":"捕获-ui-事件","link":"#捕获-ui-事件","children":[]},{"level":2,"title":"检测工作流程何时开始","slug":"检测工作流程何时开始","link":"#检测工作流程何时开始","children":[]},{"level":2,"title":"检测中断的工作流程","slug":"检测中断的工作流程","link":"#检测中断的工作流程","children":[]},{"level":2,"title":"捕获节点上的点击次数","slug":"捕获节点上的点击次数","link":"#捕获节点上的点击次数","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/04. 带注释的示例.md","excerpt":"\\n<p>示例代码片段的集合正在不断增加……</p>\\n<h2>ComfyUI 的 UI 偏好设置</h2>\\n<h3>添加和读取设置</h3>\\n<div class=\\"language-Javascript\\" data-ext=\\"Javascript\\" data-title=\\"Javascript\\"><pre class=\\"language-Javascript\\"><code>import { app } from \\"../../scripts/app.js\\";\\n\\n/* In setup(), add the setting */\\n    app.ui.settings.addSetting({\\n        id: \\"unique.setting.name\\",\\n        name: \\"Switch my cool extension on?\\",\\n        type: \\"boolean\\", // \\"text\\" is another simple option\\n        defaultValue: false,\\n        /* To listen for changes, add an onChange parameter\\n        onChange: (newVal, oldVal) =&gt; { console.log(\\"Setting got changed!\\") },\\n        */\\n    });\\n\\n/* then elsewhere, read it (with a default value just in case) */\\n    if (app.ui.settings.getSettingValue(\\"unique.setting.name\\", false)) { \\n        /* do something */\\n    }\\n</code></pre></div>","autoDesc":true}');export{c as comp,u as data};
