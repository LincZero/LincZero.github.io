import{_ as o,c as l,e as p,a as s,d as a,b as e,o as r,r as i}from"./app-CLosF8Eu.js";const u={},c={href:"https://docs.python.org/3/reference/compound_stmts.html#for",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.python.org/3/library/functions.html#iter",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.python.org/3/library/exceptions.html#StopIteration",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.python.org/3/reference/compound_stmts.html#for",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.python.org/3/library/stdtypes.html#iterator.__next__",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.python.org/3/reference/simple_stmts.html#yield",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.python.org/3/library/functions.html#next",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.python.org/3/reference/datamodel.html#object.__iter__",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.python.org/3/reference/expressions.html#generator.__next__",target:"_blank",rel:"noopener noreferrer"};function w(P,n){const t=i("ExternalLinkIcon");return r(),l("div",null,[n[42]||(n[42]=p('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h1><h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h2>',4)),s("ul",null,[s("li",null,[s("p",null,[n[1]||(n[1]=a("现在你可能注意到大多数容器对象都可以用 ")),s("a",c,[n[0]||(n[0]=a("for")),e(t)]),n[2]||(n[2]=a(" 遍历："))]),n[3]||(n[3]=s("ul",null,[s("li",null,"列表"),s("li",null,"元组"),s("li",null,"字典"),s("li",null,"字符串")],-1))]),n[23]||(n[23]=s("li",null,[s("p",null,"优点"),s("ul",null,[s("li",null,"这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一")])],-1)),s("li",null,[n[22]||(n[22]=s("p",null,"原理",-1)),s("ul",null,[s("li",null,[s("p",null,[n[6]||(n[6]=a("在后台，for语句在容器对象中调用")),s("a",k,[n[4]||(n[4]=s("code",null,"iter()",-1)),e(t)]),n[7]||(n[7]=a("，该函数返回一个定义了")),s("a",d,[n[5]||(n[5]=s("code",null,"__next__()",-1)),e(t)]),n[8]||(n[8]=a("方法的迭代器对象，它在容器中逐一访问元素"))])]),s("li",null,[s("p",null,[n[12]||(n[12]=a("没有后续的元素时，")),s("a",g,[n[9]||(n[9]=s("code",null,"__next__()",-1)),e(t)]),n[13]||(n[13]=a("抛出一个 ")),s("a",b,[n[10]||(n[10]=a("StopIteration")),e(t)]),n[14]||(n[14]=a(" 异常通知 ")),s("a",v,[n[11]||(n[11]=a("for")),e(t)]),n[15]||(n[15]=a(" 语句循环结束"))])]),s("li",null,[s("p",null,[n[18]||(n[18]=a("你可以是用内建的")),s("a",m,[n[16]||(n[16]=s("code",null,"__next__()",-1)),e(t)]),n[19]||(n[19]=a("函数调用")),s("a",f,[n[17]||(n[17]=s("code",null,"__next__()",-1)),e(t)]),n[20]||(n[20]=a("方法"))])]),n[21]||(n[21]=p(`<li><p>以下是其工作原理的示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> it
<span class="token operator">&lt;</span>iterator <span class="token builtin">object</span> at <span class="token number">0x00A1DB50</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;a&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;b&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token string">&#39;c&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?
    <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
StopIteration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))])]),n[24]||(n[24]=p(`<li><p>使用（给自己的类添加迭代器）</p><ul><li><p>例如</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Reverse</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>							<span class="token comment"># 迭代器</span>
        <span class="token keyword">return</span> self
    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>							<span class="token comment"># 返回</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> StopIteration
        self<span class="token punctuation">.</span>index <span class="token operator">=</span> self<span class="token punctuation">.</span>index <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>self<span class="token punctuation">.</span>index<span class="token punctuation">]</span>
    
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> rev <span class="token operator">=</span> Reverse<span class="token punctuation">(</span><span class="token string">&#39;spam&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Reverse <span class="token builtin">object</span> at <span class="token number">0x00A1DB50</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> char <span class="token keyword">in</span> rev<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
m
a
p
s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,1))]),n[43]||(n[43]=s("h2",{id:"生成器",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#生成器"},[s("span",null,"生成器")])],-1)),s("ul",null,[n[41]||(n[41]=s("li",null,[s("p",null,"概念"),s("ul",null,[s("li",null,"是创建迭代器的简单而强大的工具")])],-1)),s("li",null,[n[32]||(n[32]=s("p",null,"写法",-1)),s("ul",null,[s("li",null,[s("p",null,[n[26]||(n[26]=a("它们写起来就像是正规的函数，需要返回数据的时候使用")),s("a",y,[n[25]||(n[25]=s("code",null,"yield",-1)),e(t)]),n[27]||(n[27]=a("语句"))])]),s("li",null,[s("p",null,[n[29]||(n[29]=a("每次 ")),s("a",h,[n[28]||(n[28]=a("next()")),e(t)]),n[30]||(n[30]=a(" 被调用时，生成器回复它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）"))])]),n[31]||(n[31]=p(`<li><p>以下示例演示了生成器可以很简单的创建出来:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
&gt;&gt;&gt; for char in reverse(&#39;golf&#39;):
...     print(char)
...
f
l
o
g
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1))])]),s("li",null,[n[40]||(n[40]=s("p",null,"原理",-1)),s("ul",null,[s("li",null,[n[37]||(n[37]=a("自动创建了 ")),s("a",_,[n[33]||(n[33]=s("strong",null,"iter",-1)),n[34]||(n[34]=a("()")),e(t)]),n[38]||(n[38]=a(" 和 ")),s("a",x,[n[35]||(n[35]=s("strong",null,"next",-1)),n[36]||(n[36]=a("()")),e(t)]),n[39]||(n[39]=a(" 方法，生成器显得如此简洁"))])])])])])}const B=o(u,[["render",w],["__file","02. 泛型.html.vue"]]),q=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/02.%20%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 泛型 迭代器 现在你可能注意到大多数容器对象都可以用 for 遍历： 列表 元组 字典 字符串 优点 这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一 原理 在后台，for语句在容器对象中调用iter()，该函数返回一个定义了__next__()方法的迭代器对象，它在容器中逐一访问元素 没有后续的元素时，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":2,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":2,"title":"生成器","slug":"生成器","link":"#生成器","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.58,"words":475},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>泛型</h1>\\n<h2>迭代器</h2>\\n<ul>\\n<li>\\n<p>现在你可能注意到大多数容器对象都可以用 <a href=\\"https://docs.python.org/3/reference/compound_stmts.html#for\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">for</a> 遍历：</p>\\n<ul>\\n<li>列表</li>\\n<li>元组</li>\\n<li>字典</li>\\n<li>字符串</li>\\n</ul>\\n</li>\\n<li>\\n<p>优点</p>\\n<ul>\\n<li>这种形式的访问清晰、简洁、方便。迭代器的用法在 Python 中普遍而且统一</li>\\n</ul>\\n</li>\\n<li>\\n<p>原理</p>\\n<ul>\\n<li>\\n<p>在后台，for语句在容器对象中调用<a href=\\"https://docs.python.org/3/library/functions.html#iter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>iter()</code></a>，该函数返回一个定义了<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>方法的迭代器对象，它在容器中逐一访问元素</p>\\n</li>\\n<li>\\n<p>没有后续的元素时，<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>抛出一个 <a href=\\"https://docs.python.org/3/library/exceptions.html#StopIteration\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">StopIteration</a> 异常通知 <a href=\\"https://docs.python.org/3/reference/compound_stmts.html#for\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">for</a> 语句循环结束</p>\\n</li>\\n<li>\\n<p>你可以是用内建的<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>函数调用<a href=\\"https://docs.python.org/3/library/stdtypes.html#iterator.__next__\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>__next__()</code></a>方法</p>\\n</li>\\n<li>\\n<p>以下是其工作原理的示例：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> s <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'abc'</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> it <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">iter</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> it\\n<span class=\\"token operator\\">&lt;</span>iterator <span class=\\"token builtin\\">object</span> at <span class=\\"token number\\">0x00A1DB50</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">(</span>it<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token string\\">'a'</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">(</span>it<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token string\\">'b'</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">(</span>it<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token string\\">'c'</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">(</span>it<span class=\\"token punctuation\\">)</span>\\nTraceback <span class=\\"token punctuation\\">(</span>most recent call last<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n  File <span class=\\"token string\\">\\"&lt;stdin&gt;\\"</span><span class=\\"token punctuation\\">,</span> line <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">in</span> ?\\n    <span class=\\"token builtin\\">next</span><span class=\\"token punctuation\\">(</span>it<span class=\\"token punctuation\\">)</span>\\nStopIteration\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>使用（给自己的类添加迭代器）</p>\\n<ul>\\n<li>\\n<p>例如</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Reverse</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Iterator for looping over a sequence backwards.\\"\\"\\"</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>data <span class=\\"token operator\\">=</span> data\\n        self<span class=\\"token punctuation\\">.</span>index <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__iter__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\"># 迭代器</span>\\n        <span class=\\"token keyword\\">return</span> self\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__next__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\t\\t\\t\\t\\t\\t\\t<span class=\\"token comment\\"># 返回</span>\\n        <span class=\\"token keyword\\">if</span> self<span class=\\"token punctuation\\">.</span>index <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">raise</span> StopIteration\\n        self<span class=\\"token punctuation\\">.</span>index <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>index <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">[</span>self<span class=\\"token punctuation\\">.</span>index<span class=\\"token punctuation\\">]</span>\\n    \\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> rev <span class=\\"token operator\\">=</span> Reverse<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'spam'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">iter</span><span class=\\"token punctuation\\">(</span>rev<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&lt;</span>__main__<span class=\\"token punctuation\\">.</span>Reverse <span class=\\"token builtin\\">object</span> at <span class=\\"token number\\">0x00A1DB50</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">for</span> char <span class=\\"token keyword\\">in</span> rev<span class=\\"token punctuation\\">:</span>\\n<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>     <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>char<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\nm\\na\\np\\ns\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","value":{"title":"02. 泛型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/02. 泛型.md","outlink":[],"backlink":[]}}],"links":[]}}}`);export{B as comp,q as data};
