import{_ as s,c as l,e as a,o as n}from"./app-CZqDObZ4.js";const t={};function e(h,i){return n(),l("div",null,i[0]||(i[0]=[a(`<h1 id="系统级io" tabindex="-1"><a class="header-anchor" href="#系统级io"><span>系统级IO</span></a></h1><ul><li><p>输入：IO设备复制数据到主存</p></li><li><p>输出：主存复制数据到IO设备</p></li><li><p>Unix I/O</p></li><li><p>标准 I/O</p></li></ul><h2 id="unix-io" tabindex="-1"><a class="header-anchor" href="#unix-io"><span>Unix IO</span></a></h2><p>所有的IO设备（例如网络、磁盘、终端）都被模型化为文件，所有输入输出都能被当作相应文件的读写来执行。</p><p>这种将设备优雅地映射到文件的方式，得到一个简单、低级的应用接口，称为 Unix I/O</p><ul><li>打开文件 <ul><li>本质：宣告它要访问一个I/O设备，内核返回一个小的非负整数 —— 描述符。应用程序只需记住这个描述符</li><li>默认打开的文件：Linux Shell 创建的每个进程开始时都有三个打开的文件：标准输入 (描述符0)、标准输出 (描述符1)、标准错误 (描述符2)</li></ul></li><li>改变当前文件的位置 (指读写位置) <ul><li>概念：对于每个打开的文件，内核保持着一个文件位置k，初始为0。是从文件开头的字节偏移量。</li><li>修改：应用程序能通过 <code>seek</code> 操作，设置文件的当前位置</li></ul></li><li>读写文件 <ul><li>读操作：就是从文件中复制n&gt;0字节到内存，然后k=k+n</li><li>写操作：同理。注意往m大小文件读k时，会触发 end-of-file (EOF)</li></ul></li><li>关闭文件 <ul><li>本质：通知内核关闭这个文件（或程序终止）。内核会将该描述符<strong>恢复到可用的描述符池中</strong></li></ul></li></ul><h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件"><span>文件</span></a></h2><p>每个Linux文件都有一个类型 (type)</p><ul><li><p>普通文件 (regular file)：</p><ul><li>文本文件 (text file)：只含有ASCII或U你错de字符的普通文件（Linux文本文件换行符是LF、0x0a）</li><li>二进制文件 (binary file)：文本文件以外的所有文件</li></ul></li><li><p>目录 (directory)</p><ul><li><p>包含一组链接 (link) 的文件，每个链接都将一个文件名 (filename) 映射到一个文件，这个文件可能是另一个目录</p><p>特殊：“.” 是到该目录自身的链接，“..” 是到目录层次结构中父目录的链接。相关指令：mkdir、ls、rmdir</p></li></ul></li><li><p>套结字 (socket)</p><ul><li>用来和另一个进程进行跨网络通信的文件</li></ul></li></ul><p>每个进程都有一个 当前工作目录 (current working directory, cwd, 不同于启动位置ed)，用来确定其在目录层次结构中的当前位置</p><ul><li>绝对路径名 (absolute pathname)</li><li>相对路径名 (relative pathname)</li></ul><h2 id="打开和关闭文件" tabindex="-1"><a class="header-anchor" href="#打开和关闭文件"><span>打开和关闭文件</span></a></h2><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open"><span>open</span></a></h3><p>open函数打开或创建一个新的文件</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;sys/stat.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fcntl.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * 打开文件，将filename转换为一个文件描述符，并返回描述符数字</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> filename</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 文件名</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> (可用与逻辑叠加)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *   控制1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_RDONLY：只读</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_WRONLY：只写</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_RDWR：读写</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *   控制2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_CREAT：不存在则创建</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_TRUNC：存在则截断</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *     O_APPEND：每次写操作前，设置文件内位置到文件结尾</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 成功则文件描述符，出错-1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> flags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> mode_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用举例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fd </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo.txt&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> O_WRONLY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">O_APPEND</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建有访问权限的文件" tabindex="-1"><a class="header-anchor" href="#创建有访问权限的文件"><span>创建有访问权限的文件</span></a></h3><p>访问权限位（sys/stat.h中定义）：略</p><table><thead><tr><th>掩码</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close"><span>close</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 成功0，出错-1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读和写文件" tabindex="-1"><a class="header-anchor" href="#读和写文件"><span>读和写文件</span></a></h2><h3 id="read、write" tabindex="-1"><a class="header-anchor" href="#read、write"><span>read、write</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;unistd.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 成功返回读的字节数，EOF则0，出错-1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ssize_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 成功返回成功写的字节数，出错-1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ssize_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> fd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lseek" tabindex="-1"><a class="header-anchor" href="#lseek"><span>lseek</span></a></h3><p>能修改当前的文件内位置</p><h2 id="用rio包健壮地读写" tabindex="-1"><a class="header-anchor" href="#用rio包健壮地读写"><span>用RIO包健壮地读写</span></a></h2><p>RIO (Robust I/O，健壮的I/O包)</p><p>提供了两类不同的函数：</p><ul><li>RIO的无缓存的输入输出函数</li><li>RIO的带缓存的输入函数</li></ul><h3 id="rio的无缓存的输入输出函数" tabindex="-1"><a class="header-anchor" href="#rio的无缓存的输入输出函数"><span>RIO的无缓存的输入输出函数</span></a></h3><h3 id="rio的带缓存的输入函数" tabindex="-1"><a class="header-anchor" href="#rio的带缓存的输入函数"><span>RIO的带缓存的输入函数</span></a></h3><h2 id="读取文件元数据" tabindex="-1"><a class="header-anchor" href="#读取文件元数据"><span>读取文件元数据</span></a></h2><h2 id="读取目录内容" tabindex="-1"><a class="header-anchor" href="#读取目录内容"><span>读取目录内容</span></a></h2><h2 id="共享文件" tabindex="-1"><a class="header-anchor" href="#共享文件"><span>共享文件</span></a></h2><h2 id="io重定向" tabindex="-1"><a class="header-anchor" href="#io重定向"><span>IO重定向</span></a></h2><h2 id="标准io" tabindex="-1"><a class="header-anchor" href="#标准io"><span>标准IO</span></a></h2><h2 id="综合-我该使用哪些io函数" tabindex="-1"><a class="header-anchor" href="#综合-我该使用哪些io函数"><span>综合：我该使用哪些IO函数？</span></a></h2><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2>`,38)]))}const p=s(t,[["render",e],["__file","10. 系统级IO.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/03.%20%E7%A8%8B%E5%BA%8F%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%92%8C%E9%80%9A%E4%BF%A1/10.%20%E7%B3%BB%E7%BB%9F%E7%BA%A7IO.html","title":"系统级IO","lang":"zh-CN","frontmatter":{"description":"系统级IO 输入：IO设备复制数据到主存 输出：主存复制数据到IO设备 Unix I/O 标准 I/O Unix IO 所有的IO设备（例如网络、磁盘、终端）都被模型化为文件，所有输入输出都能被当作相应文件的读写来执行。 这种将设备优雅地映射到文件的方式，得到一个简单、低级的应用接口，称为 Unix I/O 打开文件 本质：宣告它要访问一个I/O设备，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E3%80%8B/03.%20%E7%A8%8B%E5%BA%8F%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%92%8C%E9%80%9A%E4%BF%A1/10.%20%E7%B3%BB%E7%BB%9F%E7%BA%A7IO.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"系统级IO"}],["meta",{"property":"og:description","content":"系统级IO 输入：IO设备复制数据到主存 输出：主存复制数据到IO设备 Unix I/O 标准 I/O Unix IO 所有的IO设备（例如网络、磁盘、终端）都被模型化为文件，所有输入输出都能被当作相应文件的读写来执行。 这种将设备优雅地映射到文件的方式，得到一个简单、低级的应用接口，称为 Unix I/O 打开文件 本质：宣告它要访问一个I/O设备，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统级IO\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"系统级IO","slug":"系统级io","link":"#系统级io","children":[{"level":2,"title":"Unix IO","slug":"unix-io","link":"#unix-io","children":[]},{"level":2,"title":"文件","slug":"文件","link":"#文件","children":[]},{"level":2,"title":"打开和关闭文件","slug":"打开和关闭文件","link":"#打开和关闭文件","children":[{"level":3,"title":"open","slug":"open","link":"#open","children":[]},{"level":3,"title":"创建有访问权限的文件","slug":"创建有访问权限的文件","link":"#创建有访问权限的文件","children":[]},{"level":3,"title":"close","slug":"close","link":"#close","children":[]}]},{"level":2,"title":"读和写文件","slug":"读和写文件","link":"#读和写文件","children":[{"level":3,"title":"read、write","slug":"read、write","link":"#read、write","children":[]},{"level":3,"title":"lseek","slug":"lseek","link":"#lseek","children":[]}]},{"level":2,"title":"用RIO包健壮地读写","slug":"用rio包健壮地读写","link":"#用rio包健壮地读写","children":[{"level":3,"title":"RIO的无缓存的输入输出函数","slug":"rio的无缓存的输入输出函数","link":"#rio的无缓存的输入输出函数","children":[]},{"level":3,"title":"RIO的带缓存的输入函数","slug":"rio的带缓存的输入函数","link":"#rio的带缓存的输入函数","children":[]}]},{"level":2,"title":"读取文件元数据","slug":"读取文件元数据","link":"#读取文件元数据","children":[]},{"level":2,"title":"读取目录内容","slug":"读取目录内容","link":"#读取目录内容","children":[]},{"level":2,"title":"共享文件","slug":"共享文件","link":"#共享文件","children":[]},{"level":2,"title":"IO重定向","slug":"io重定向","link":"#io重定向","children":[]},{"level":2,"title":"标准IO","slug":"标准io","link":"#标准io","children":[]},{"level":2,"title":"综合：我该使用哪些IO函数？","slug":"综合-我该使用哪些io函数","link":"#综合-我该使用哪些io函数","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"git":{},"readingTime":{"minutes":3.24,"words":972},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/03. 程序间的交互和通信/10. 系统级IO.md","excerpt":"\\n<ul>\\n<li>\\n<p>输入：IO设备复制数据到主存</p>\\n</li>\\n<li>\\n<p>输出：主存复制数据到IO设备</p>\\n</li>\\n<li>\\n<p>Unix I/O</p>\\n</li>\\n<li>\\n<p>标准 I/O</p>\\n</li>\\n</ul>\\n<h2>Unix IO</h2>\\n<p>所有的IO设备（例如网络、磁盘、终端）都被模型化为文件，所有输入输出都能被当作相应文件的读写来执行。</p>\\n<p>这种将设备优雅地映射到文件的方式，得到一个简单、低级的应用接口，称为 Unix I/O</p>\\n<ul>\\n<li>打开文件\\n<ul>\\n<li>本质：宣告它要访问一个I/O设备，内核返回一个小的非负整数 —— 描述符。应用程序只需记住这个描述符</li>\\n<li>默认打开的文件：Linux Shell 创建的每个进程开始时都有三个打开的文件：标准输入 (描述符0)、标准输出 (描述符1)、标准错误 (描述符2)</li>\\n</ul>\\n</li>\\n<li>改变当前文件的位置 (指读写位置)\\n<ul>\\n<li>概念：对于每个打开的文件，内核保持着一个文件位置k，初始为0。是从文件开头的字节偏移量。</li>\\n<li>修改：应用程序能通过 <code>seek</code> 操作，设置文件的当前位置</li>\\n</ul>\\n</li>\\n<li>读写文件\\n<ul>\\n<li>读操作：就是从文件中复制n&gt;0字节到内存，然后k=k+n</li>\\n<li>写操作：同理。注意往m大小文件读k时，会触发 end-of-file (EOF)</li>\\n</ul>\\n</li>\\n<li>关闭文件\\n<ul>\\n<li>本质：通知内核关闭这个文件（或程序终止）。内核会将该描述符<strong>恢复到可用的描述符池中</strong></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/03. 程序间的交互和通信/10. 系统级IO.md","value":{"title":"10. 系统级IO","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《深入理解计算机系统》/03. 程序间的交互和通信/10. 系统级IO.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,r as data};
