import{_ as l,c as t,e as i,o as n}from"./app-DQC9V0Al.js";const s={};function o(a,e){return n(),t("div",null,e[0]||(e[0]=[i('<h1 id="pluginsystem" tabindex="-1"><a class="header-anchor" href="#pluginsystem"><span>PluginSystem</span></a></h1><h2 id="参考各种插件系统" tabindex="-1"><a class="header-anchor" href="#参考各种插件系统"><span>参考各种插件系统</span></a></h2><p>话说我以前试过分别尝试js和python体系的架构的插件，发现js架构可以很方便地导入的打包其他依赖到一个js文件中，但python的依赖似乎比较难以打包在一起 (?可能我不知道方法)</p><h3 id="什么是插件" tabindex="-1"><a class="header-anchor" href="#什么是插件"><span>什么是插件</span></a></h3><ul><li>宏观插件 - <strong>任意语言</strong> 其实所有的语言，宏观上都属于插件。例如python、js可以看作是依赖于浏览器和解释器的插件、需要编译的语言也能看作是依赖于编译器的插件。</li><li>狭义插件 - <strong>库插件</strong> 例如Python和Js库，C的纯头文件库等。VuePress插件/Markdown-it插件 典型的特点是：易于在开发阶段任意加载卸载和启停。</li><li>狭义插件 - <strong>软件插件</strong> 只是我这里的所说的“插件”是更易用更规范的东西，对用于来说代码无感 典型的特点是：易于在用户端任意加载卸载和启停。更少的编译时间和依赖、更规范的写法(有注释id、注册名等)、更规范的统一注册。</li></ul><h3 id="根据语言" tabindex="-1"><a class="header-anchor" href="#根据语言"><span>根据语言</span></a></h3><ul><li>js，插件的典型有很多 <ul><li>utools、obsidian、浏览器插件、油猴脚本等</li></ul></li><li>可视化/蓝图类型：还有一些特殊 <ul><li>quicker</li><li>autohotkey，自定义语言</li></ul></li><li>python，不多见 <ul><li>除了我之前自己折腾的一个项目外（由于依赖原因只能算半成品，放弃）</li><li>ComfyUI</li></ul></li></ul><h3 id="根据通信类型" tabindex="-1"><a class="header-anchor" href="#根据通信类型"><span>根据通信类型</span></a></h3><ul><li>聊天机器人，http/websocket方式 <ul><li>支持许多语言，python、c#等</li></ul></li><li>dll方式 <ul><li>QQ聊天机器人一般用</li></ul></li><li>脚本/打包方式 <ul><li>js、python(包?)、lua等</li></ul></li><li>无需编译，纯代码脚本 <ul><li>js、python等解释型语言的插件一般可以用这种情况</li><li>Qt/PyQt的插件系统，但是不是很优雅</li></ul></li></ul><h3 id="插件开发参考" tabindex="-1"><a class="header-anchor" href="#插件开发参考"><span>插件开发参考</span></a></h3><p>js (obsidian、油猴脚本、vuepress插件、markdown-it插件)、python (ComfyUI插件)、机器人插件、autohotkey 的插件的开发，我应该都有笔记记录，可以去看一下。</p><p>至于浏览器扩展、uTools、quicker插件，我暂时了解还不算太多</p>',12)]))}const p=l(s,[["render",o],["__file","PluginSystem.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/README/PluginSystem.html","title":"PluginSystem","lang":"zh-CN","frontmatter":{"description":"PluginSystem 参考各种插件系统 话说我以前试过分别尝试js和python体系的架构的插件，发现js架构可以很方便地导入的打包其他依赖到一个js文件中，但python的依赖似乎比较难以打包在一起 (?可能我不知道方法) 什么是插件 宏观插件 - 任意语言 其实所有的语言，宏观上都属于插件。例如python、js可以看作是依赖于浏览器和解释器的...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/README/PluginSystem.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"PluginSystem"}],["meta",{"property":"og:description","content":"PluginSystem 参考各种插件系统 话说我以前试过分别尝试js和python体系的架构的插件，发现js架构可以很方便地导入的打包其他依赖到一个js文件中，但python的依赖似乎比较难以打包在一起 (?可能我不知道方法) 什么是插件 宏观插件 - 任意语言 其实所有的语言，宏观上都属于插件。例如python、js可以看作是依赖于浏览器和解释器的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PluginSystem\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"PluginSystem","slug":"pluginsystem","link":"#pluginsystem","children":[{"level":2,"title":"参考各种插件系统","slug":"参考各种插件系统","link":"#参考各种插件系统","children":[{"level":3,"title":"什么是插件","slug":"什么是插件","link":"#什么是插件","children":[]},{"level":3,"title":"根据语言","slug":"根据语言","link":"#根据语言","children":[]},{"level":3,"title":"根据通信类型","slug":"根据通信类型","link":"#根据通信类型","children":[]},{"level":3,"title":"插件开发参考","slug":"插件开发参考","link":"#插件开发参考","children":[]}]}]}],"git":{},"readingTime":{"minutes":1.78,"words":534},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/README/PluginSystem.md","excerpt":"\\n<h2>参考各种插件系统</h2>\\n<p>话说我以前试过分别尝试js和python体系的架构的插件，发现js架构可以很方便地导入的打包其他依赖到一个js文件中，但python的依赖似乎比较难以打包在一起 (?可能我不知道方法)</p>\\n<h3>什么是插件</h3>\\n<ul>\\n<li>宏观插件 - <strong>任意语言</strong>\\n其实所有的语言，宏观上都属于插件。例如python、js可以看作是依赖于浏览器和解释器的插件、需要编译的语言也能看作是依赖于编译器的插件。</li>\\n<li>狭义插件 - <strong>库插件</strong>\\n例如Python和Js库，C的纯头文件库等。VuePress插件/Markdown-it插件\\n典型的特点是：易于在开发阶段任意加载卸载和启停。</li>\\n<li>狭义插件 - <strong>软件插件</strong>\\n只是我这里的所说的“插件”是更易用更规范的东西，对用于来说代码无感\\n典型的特点是：易于在用户端任意加载卸载和启停。更少的编译时间和依赖、更规范的写法(有注释id、注册名等)、更规范的统一注册。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/README/PluginSystem.md","value":{"title":"PluginSystem","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/README/PluginSystem.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,h as data};
