import{_ as l,c as t,e as a,o as i}from"./app-DEUP2Tjk.js";const n="/assets/%E6%B5%81%E6%B0%B4%E7%BA%BF-BW9VTs80.png",r="/assets/%E6%A6%82%E5%BF%B5%E6%B5%81%E6%B0%B4%E7%BA%BF-BYr7dtkY.png",d="/assets/CopyDataToGPU-B2uFXErk.png",s="/assets/SetRenderState-BDI2jWyx.png",p="/assets/DrawCall-Bfy0lsaR.png",h="/assets/GPU%E6%B5%81%E6%B0%B4%E7%BA%BF-Wp4eROQC.png",c="/assets/VertexShaderProcess-BQOfZ7rL.png",o="/assets/Clipping-BpIsaxLl.png",g="/assets/ScreenMapping-DiHKVyDR.png",u="/assets/TriangleSetupAndTraversal-BoLaTb5L.png",m="/assets/FragmentShader-BZ0fkkFb.png",B="/assets/Blending-D9VbtKnn.png",b="/assets/why_early_depth_test-D0VwRg1L.png",f="/assets/OpenGL%E5%92%8CDirectX-DYZuseKw.png",k="/assets/CommandBuffer-O60EJ9Se.png",D="/assets/SmallCommand-CAkUkKbY.png",y="/assets/Batching-COQlVV5x.png",S={};function C(P,e){return i(),t("div",null,e[0]||(e[0]=[a('<h1 id="《unityshadow》" tabindex="-1"><a class="header-anchor" href="#《unityshadow》"><span>《UnityShadow》</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="渲染流水线-书顺序" tabindex="-1"><a class="header-anchor" href="#渲染流水线-书顺序"><span>渲染流水线（书顺序）</span></a></h1><h2 id="综述" tabindex="-1"><a class="header-anchor" href="#综述"><span>综述</span></a></h2><h3 id="什么是流水线" tabindex="-1"><a class="header-anchor" href="#什么是流水线"><span>什么是流水线</span></a></h3><ul><li>优点：可以提高单位时间的生产量</li><li>吐槽：书上的说法有点误导，用来和现实情况类比是不恰当的。这应该是硬件功能的单一性所决定的</li></ul><p>图2.1　真实生活中的流水线</p><p><img src="'+n+'" alt="流水线.png-83.4kB" loading="lazy"></p><h3 id="什么是渲染流水线" tabindex="-1"><a class="header-anchor" href="#什么是渲染流水线"><span>什么是渲染流水线</span></a></h3><p>渲染流程：《Real-Time Rendering，Third Edition》一书将渲染流程分成下面三个阶段（概念流水线，而非GPU流水线）</p><p>图2.2 渲染流水线中的三个概念阶段</p><p><img src="'+r+'" alt="概念流水线.png-16.9kB" loading="lazy"></p><p>概念补充</p><ul><li>渲染图元：可以是点、线、三角面等</li></ul><h4 id="应用阶段-application-stage-cpu实现" tabindex="-1"><a class="header-anchor" href="#应用阶段-application-stage-cpu实现"><span>应用阶段（<em>Application Stage</em>）（CPU实现）</span></a></h4><p>三个主要任务</p><ul><li><p>(1) 准备好场景数据（例如：摄像机位置、视锥体、场景中包含哪些模型、使用了哪些光源等等）</p></li><li><p>(2) 为了提高渲染性能，需要作一个粗粒度剔除（<em>culling</em>）工作，剔除不可见物体不提交给集合阶段</p><p>（注：这里的不可见是指被隐藏而非被遮挡而不可见）</p></li><li><p>(3) 需要设置好每个模型的渲染状态（例如：使用的材质（漫反射颜色、高光反射颜色）、纹理、Shader等等）</p></li></ul><h4 id="几何阶段-geometry-stage-gpu实现" tabindex="-1"><a class="header-anchor" href="#几何阶段-geometry-stage-gpu实现"><span>几何阶段（<em>Geometry Stage</em>）（GPU实现）</span></a></h4><p>负责和每个渲染图元打交道，进行逐顶点、逐多边形操作。可细分成更小的流水线阶段</p><h4 id="光栅化阶段-rasterizer-stage-gpu实现" tabindex="-1"><a class="header-anchor" href="#光栅化阶段-rasterizer-stage-gpu实现"><span>光栅化阶段（<em>Rasterizer Stage</em>）（GPU实现）</span></a></h4><p>产生屏幕上的像素，并渲染出最终的图像。可细分成更小的流水线阶段</p><p>有两个重要的目标：计算每个图元覆盖了哪些像素，以及为这些像素计算它们的颜色</p><h2 id="cpu和gpu通信" tabindex="-1"><a class="header-anchor" href="#cpu和gpu通信"><span>CPU和GPU通信</span></a></h2><p>CPU和GPU通信的过程大致分为三个阶段</p><h3 id="把数据加载到到显存中" tabindex="-1"><a class="header-anchor" href="#把数据加载到到显存中"><span>把数据加载到到显存中</span></a></h3><ul><li>目的 <ul><li>显卡对显存的访问速度更快</li><li>大多数显卡对RAM没有直接访问权利</li></ul></li><li>过程补充 <ul><li>之后RAM中的数据就可以移除了。但对于一些数据来说CPU仍需要访问，不移除该数据</li><li>例如：访问网格数据来进行碰撞检测</li></ul></li></ul><p>图2.3 渲染所需的数据（两张纹理以及3个网格）从硬盘最终加载到显存中。在渲染时，GPU可以快速访问这些数据</p><p><img src="'+d+'" alt="CopyDataToGPU.png-86.5kB" loading="lazy"></p><h3 id="设置渲染状态" tabindex="-1"><a class="header-anchor" href="#设置渲染状态"><span>设置渲染状态</span></a></h3><p>例如：使用哪个顶点着色器/片元着色器、光源属性、材质等等</p><p>如果没有更改渲染状态，那么所有网格都使用同一种渲染状态</p><p>图2.4 在同一状态下渲染三个网格。由于没有更改渲染状态，因此三个网格的外观看起来像是同一种材质的物体</p><p><img src="'+s+'" alt="SetRenderState.png-157.1kB" loading="lazy"></p><h3 id="调用draw-call" tabindex="-1"><a class="header-anchor" href="#调用draw-call"><span>调用Draw Call</span></a></h3><ul><li>Draw Call：是一个命令。发起方CPU，接收方GPU，参数为需要被渲染的图元（<em>primitives</em>）列表</li></ul><p>图2.5 CPU通过调用Draw Call来告诉GPU开始进行一个渲染过程。一个Draw Call会指向本次调用需要渲染的图元列表</p><p><img src="'+p+'" alt="DrawCall.png-59.1kB" loading="lazy"></p><h2 id="gpu流水线" tabindex="-1"><a class="header-anchor" href="#gpu流水线"><span>GPU流水线</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>图2.6 GPU的渲染流水线实现。颜色表示了不同阶段的可配置性或可编程性：</p><ul><li>绿色表示该流水线阶段是完全可编程控制的</li><li>黄色表示该流水线阶段可以配置但不是可编程的</li><li>蓝色表示该流水线阶段是由GPU固定实现的，开发者没有任何控制权</li><li>实线表示该shader必须由开发者编程实现</li><li>虚线表示该Shader是可选的</li></ul><p><img src="'+h+'" alt="GPU流水线.png-82.2kB" loading="lazy"></p><p>整理</p><table><thead><tr><th>步骤</th><th>作用</th><th>是否能变成控制</th><th>输入（上一阶段的输出）</th></tr></thead><tbody><tr><td>顶点数据</td><td>————</td><td>————</td><td></td></tr><tr><td>顶点着色器</td><td>坐标变换、逐顶点光照</td><td><code>可编程控制</code></td><td>图元列表</td></tr><tr><td>曲面细分着色器（可选）</td><td>细分图元</td><td><code>可编程控制</code></td><td>略</td></tr><tr><td>几何着色器（可选）</td><td>执行逐图元的着色操作，或者被用于产生更多的图元</td><td><code>可编程控制</code></td><td>略</td></tr><tr><td>裁剪</td><td>将不在摄像机视野内的顶点裁剪掉，并剔除某些三角图元的面片</td><td><strong>可配置不可编程</strong></td><td>带归一化的设备坐标的图元</td></tr><tr><td>屏幕映射</td><td>负责把每个图元的坐标转换到屏幕坐标系</td><td>不可配置不可编程</td><td>裁剪过的图元</td></tr><tr><td>三角形设置</td><td>计算光栅化一个三角网格所需的信息</td><td>不可配置不可编程</td><td>z轴缩放过的图元</td></tr><tr><td>三角形遍历</td><td>检查每个像素是否被一个三角网格所覆盖</td><td>不可配置不可编程</td><td>三角网格表示的数据</td></tr><tr><td>片元着色器（可选）</td><td>完成一些渲染技术</td><td><code>可编程控制</code></td><td>片元序列、顶点的插值信息</td></tr><tr><td>逐片元操作</td><td>逐片元的着色操作</td><td><strong>可配置不可编程</strong></td><td>一个或多个颜色值</td></tr><tr><td>屏幕图像</td><td>————</td><td>————</td><td>真正的像素颜色</td></tr></tbody></table><h3 id="顶点着色器-vertex-shader-可编程" tabindex="-1"><a class="header-anchor" href="#顶点着色器-vertex-shader-可编程"><span>顶点着色器（<em>Vertex Shader</em>）（可编程）</span></a></h3><ul><li><p>主要工作：坐标变换、逐顶点光照</p></li><li><p>坐标变换：把顶点坐标从<code>模型空间</code>转换到<code>齐次裁剪空间</code>，然后在由硬件做透视除法，得到<code>归一化的设备坐标</code>(<em>Normalized Device Coordinates</em>，NDC)</p><p><mark>（具体细节第四章还会讲，但我猜测是三维坐标变成了指定透视参数（摄像机位置和视锥体）的透视图坐标）</mark></p></li><li><p>补充 - OpenGL与DirectX区别</p><ul><li>OpenGL：NDC的z分量范围为[-1,1]，也是Unity使用的NDC</li><li>DirectX：NDC的z分量范围为[0,1]</li></ul></li></ul><p>图2.7 GPU在每个输入的网格顶点上都会调用顶点着色器。顶点着色器必须进行顶点的坐标变换，需要时还可以计算和输出顶点的颜色。例如，我们可能需要进行逐顶点的光照</p><p><img src="'+c+'" alt="VertexShaderProcess.png-43kB" loading="lazy"></p><p>图2.8 顶点着色器会将模型顶点的位置变换到齐次裁剪坐标空间下，进行输出后再由硬件做透视除法得到NDC下的坐标</p><p>![Vertex Shader.png-34.9kB](1-02.%20渲染流水线.assets/Vertex Shader.png)</p><h3 id="曲面细分着色器-tessellation-shader-可编程、可选" tabindex="-1"><a class="header-anchor" href="#曲面细分着色器-tessellation-shader-可编程、可选"><span>曲面细分着色器（<em>Tessellation Shader</em>）（可编程、可选）</span></a></h3><ul><li>作用：细分图元</li></ul><h3 id="几何着色器-geometry-shader-可编程、可选" tabindex="-1"><a class="header-anchor" href="#几何着色器-geometry-shader-可编程、可选"><span>几何着色器（<em>Geometry Shader</em>）（可编程、可选）</span></a></h3><ul><li>作用：执行逐图元（<em>Per-Primitive</em>）的着色操作，或者被用于产生更多的图元</li></ul><h3 id="裁剪-clipping-可配置" tabindex="-1"><a class="header-anchor" href="#裁剪-clipping-可配置"><span>裁剪（<em>Clipping</em>）（可配置）</span></a></h3><ul><li>作用：将不在摄像机视野内的顶点裁剪掉，并剔除某些三角图元的面片</li><li>可配置：自定义裁剪平面、控制裁剪三角图元的正面还是背面</li><li>原理详解 <ul><li>完全在视野内：继续传递</li><li>完全在视野外：不向下传递</li><li>部分在视野内：裁剪（例如一条线在交界处被插入一个新的顶点）</li></ul></li></ul><p>图2.9 只有在单位立方体的图元才需要被继续处理。因此，完全在单位立方体外部的图元（红色三角形）被舍弃，完全在单位立方体内部的图元（绿色三角形）将被保留。和单位立方体相交的图元（黄色三角形）会被裁剪，新的顶点会被生成，原来在外部的顶点会被舍弃</p><p><img src="'+o+'" alt="Clipping.png-25.5kB" loading="lazy"></p><h3 id="屏幕映射-screen-mapping-固定" tabindex="-1"><a class="header-anchor" href="#屏幕映射-screen-mapping-固定"><span>屏幕映射（<em>Screen Mapping</em>）（固定）</span></a></h3><ul><li>作用：负责把每个图元的坐标转换到屏幕坐标系（<em>Screen Coordinates</em>）中</li><li>实现细则：把场景渲染到一个窗口上，这是一个缩放的过程。其中z坐标不做任何处理</li><li>坐标系：<code>屏幕坐标系</code>（<em>Screen Coordinates</em>）与z坐标系一起构成<code>窗口坐标系</code>（<em>Window Coordinates</em>）</li></ul><p>图2.10 屏幕映射将x、y坐标从（-1, 1）范围转换到屏幕坐标系中</p><p><img src="'+g+'" alt="ScreenMapping.png-22.6kB" loading="lazy"></p><ul><li><p>OpenGL和DirectX的屏幕坐标差异，如下</p><p>产生这种差异的原因：微软的窗口都使用了DirectX的坐标系统（比如QT开发），这也与我们的阅读方式是一致的：从左到右，从上到下，并且很多图像文件也是按这样的格式存储的</p></li></ul><p>图2.11 OpenGL和DirectX的屏幕坐标系差异。对于一张512*512大小的图像，在OpenGL中其（0, 0）点在左下角，而在DirectX中其(0, 0)点在左上角</p><p>![Screen Mapping_OpenGL_DirectX.png-26.9kB](1-02.%20渲染流水线.assets/Screen Mapping_OpenGL_DirectX.png)</p><h3 id="三角形设置-triangle-setup-固定" tabindex="-1"><a class="header-anchor" href="#三角形设置-triangle-setup-固定"><span>三角形设置（<em>Triangle Setup</em>）（固定）</span></a></h3><ul><li>作用：计算光栅化一个三角网格所需的信息（在此之前处理的都是图元中的点）</li></ul><h3 id="三角形遍历-triangle-traversal-固定" tabindex="-1"><a class="header-anchor" href="#三角形遍历-triangle-traversal-固定"><span>三角形遍历（<em>Triangle Traversal</em>）（固定）</span></a></h3><ul><li>作用：检查每个像素是否被一个三角网格所覆盖，这个阶段也被称为<code>扫描变换</code>（<em>Scan Conversion</em>）</li><li>输出：<code>片元序列</code>，并不是真正意义上像素，而是包含了很多用于计算像素最终颜色的状态（例如屏幕坐标、深度信息、顶点信息（法线、纹理坐标）等）</li></ul><p>图2.12 三角形遍历的过程。根据几何阶段输出的顶点信息，最终得到该三角网格覆盖的像素位置。对应像素会生成一个片元，而片元中的状态是对三个顶点的信息进行插值得到的。例如，对图2.12中三个顶点的深度进行插值得到其重心位置对应的片元的深度值为-10.0</p><p><img src="'+u+'" alt="TriangleSetupAndTraversal.png-80kB" loading="lazy"></p><h3 id="片元着色器-fragment-shader-可编程、可选-这步不太懂" tabindex="-1"><a class="header-anchor" href="#片元着色器-fragment-shader-可编程、可选-这步不太懂"><span>片元着色器（<em>Fragment Shader</em>）（可编程、可选）<mark>这步不太懂</mark></span></a></h3><ul><li>作用：完成一些渲染技术（例如纹理采样）</li><li>输入：对顶点信息插值得到的结果</li><li>输出：是一个或者多个颜色值</li><li>别名：DirectX中称为<code>像素着色器</code>(<em>pixel Shader</em>)，但<code>片元着色器</code>（<em>Fragment Shader</em>）的名字更佳，因为此时片元还不是像素</li><li>局限：仅可以影响单个片元，不可用将自己的任何结果直接发个邻居（导数信息除外）</li></ul><p>图2.12 三角形遍历的过程。根据几何阶段输出的顶点信息，最终得到该三角网格覆盖的像素位置。对应像素会生成一个片元，而片元中的状态是对三个顶点的信息进行插值得到的。例如，对图2.12中三个顶点的深度进行插值得到其重心位置对应的片元的深度值为-10.0</p><p><img src="'+m+'" alt="FragmentShader.png-42.4kB" loading="lazy"></p><h3 id="逐片元操作-per-fragment-operations-可配置" tabindex="-1"><a class="header-anchor" href="#逐片元操作-per-fragment-operations-可配置"><span>逐片元操作（<em>Per-Fragment Operations</em>）（可配置）</span></a></h3><ul><li>作用：逐片元（<em>Per-Fragment Operations</em>）的着色操作（例如修改颜色、深度缓冲、进行魂环等等）</li><li>别名 <ul><li>OpenGL：<code>逐片元操作</code>（<em>Per-Fragment Operations</em>）</li><li>DirectX：<code>输出合并阶段</code>（<em>Output-Merger</em>）</li></ul></li><li>实现细节 <ul><li>决定每个片元的可见性。这涉及很多测试工作（例如深度测试、模板测试等等）</li><li>如果一个片元通过了所有测试，就需要把这个片元的颜色值和已经存储在颜色缓冲区的颜色进行合并，或者说是混合</li></ul></li></ul><p>图2.14 逐片元操作阶段所做的操作。只有通过了所有的测试后，新生成的片元才能和颜色缓冲区中已经存在的像素颜色进行混合，最后再写入颜色缓冲区中</p><p>![Per-fragment Operations.png-23.1kB](1-02.%20渲染流水线.assets/Per-fragment Operations.png)</p><h4 id="模板测试-stencil-test" tabindex="-1"><a class="header-anchor" href="#模板测试-stencil-test"><span>模板测试（<em>Stencil Test</em>）</span></a></h4><ul><li>模板测试补充：与之相关的是模板缓冲</li><li>模板测试高级用法：渲染阴影、轮廓渲染等</li><li>深度测试：齐次就是</li></ul><p>图2.15 模板测试和深度测试的简化流程图</p><p>![Stencil Test_Depth Test.png-93.5kB](1-02.%20渲染流水线.assets/Stencil Test_Depth Test.png)</p><h4 id="深度测试-depth-test" tabindex="-1"><a class="header-anchor" href="#深度测试-depth-test"><span>深度测试（<em>Depth Test</em>）</span></a></h4><ul><li>深度测试补充：对于被其他物体遮挡的就不需要出现在屏幕上</li></ul><h4 id="混合-blend" tabindex="-1"><a class="header-anchor" href="#混合-blend"><span>混合（<em>Blend</em>）</span></a></h4><ul><li>混合补充：对于不透明物体，可以关闭混合操作</li><li>混合函数：透明度、混合模式等</li></ul><p>图2.16 混合操作的简化流程图</p><p><img src="'+B+'" alt="Blending.png-67.6kB" loading="lazy"></p><h4 id="补充-提前执行技术" tabindex="-1"><a class="header-anchor" href="#补充-提前执行技术"><span>补充：提前执行技术</span></a></h4><ul><li>提前执行技术：测试顺序并不是唯一的，对于大多数GPU来说，会尽可能在片元着色器之前进行测试，以提前筛掉不需要的片元</li><li>Early-Z：将深度测试提前执行的技术通常也被称为<code>Early-Z</code>技术</li><li>缺陷：有时候提前执行测试会引发冲突，如果有冲突就禁用提前测试，而这会导致性能上的下降 <ul><li>举例：透明度与深度提前测试冲突，即透明度测试会导致性能下降的一个原因</li></ul></li></ul><p>图2.17 图示场景中包含了两个对象：球和长方体，绘制顺序是先绘制球（在屏幕上显示为圆），再绘制长方体（在屏幕上显示为长方形）。如果深度测试在片元着色器之后执行，那么在渲染长方体时，虽然它的大部分区域都被遮挡在球的后面，即它所覆盖的绝大部分片元根本无法通过深度测试，但是我们仍然需要对这些片元执行片元着色器，造成了很大的性能浪费</p><p><img src="'+b+'" alt="why_early_depth_test.png-18.7kB" loading="lazy"></p><h4 id="补充-双重缓冲-double-buffering-策略" tabindex="-1"><a class="header-anchor" href="#补充-双重缓冲-double-buffering-策略"><span>补充：双重缓冲（<em>Double Buffering</em>）策略</span></a></h4><ul><li>简概：一旦场景被渲染到后置缓冲中，GPU就会交换<code>后置缓冲区</code>（<em>Back Buffer</em>）和<code>前置缓冲区</code>（<em>Front Buffer</em>）中的内容</li><li>优点：前置缓冲区是之前显示在屏幕上的图像，这保证了我们看到的图像总是连续的==（没太懂最后一句话）==</li></ul><h2 id="一些容易困惑的地方" tabindex="-1"><a class="header-anchor" href="#一些容易困惑的地方"><span>一些容易困惑的地方</span></a></h2><h3 id="什么是opengl-directx" tabindex="-1"><a class="header-anchor" href="#什么是opengl-directx"><span>什么是OpenGL/DirectX</span></a></h3><ul><li>OpenGL和DirectX：是图像应用编程接口，这些接口用于渲染二维或三维图形。是上层应用程序和底层GPU之间的沟通桥梁</li><li>显卡驱动作用：接口一次向显卡驱动（<em>Graphics Driver</em>）发送渲染命令，显卡驱动将OpenGL或DirectX的函数调用翻译成GPU能听懂的语言</li><li>显存（<em>Video Random Access Meory</em>，VRAM）</li></ul><p>图2.18 CPU、OpenGL/DirectX、显卡驱动和GPU之间的关系</p><p><img src="'+f+'" alt="OpenGL和DirectX.png-56.1kB" loading="lazy"></p><h3 id="什么是hlsl、glsl、cg" tabindex="-1"><a class="header-anchor" href="#什么是hlsl、glsl、cg"><span>什么是HLSL、GLSL、CG</span></a></h3><ul><li><p>概念：可编程的着色器阶段能使用高级的<code>着色语言</code>（<em>Shading Language</em>）编写</p></li><li><p>分类与特点</p><ul><li><table><thead><tr><th>语言</th><th>优点</th><th>缺点</th><th>原因</th></tr></thead><tbody><tr><td>DirectX的<code>HLSL</code><br>（<em>High Level Shading Language</em>）</td><td>不同硬件的编译结果一样<br>（版本相同时）</td><td>平台相对有限，几乎都是微软</td><td>微软控制着色器的编译</td></tr><tr><td>OpenGl的<code>GLSL</code><br>（<em>OpenGL Shading Language</em>）</td><td>跨平台性</td><td>不同硬件供应商的编译实现可能不同</td><td>其着色器编译器由显卡驱动来完成</td></tr><tr><td>NVIDIA的<code>CG</code><br>（C for Graphic）</td><td>真正意义上的跨平台<br>可以无缝移植成HLSL</td><td>无法完全发挥出OpenGL的最新特性</td><td>根据平台不同而编译成相应的中间语言<br>与微软的合作</td></tr></tbody></table></li></ul></li></ul><h3 id="什么是draw-call" tabindex="-1"><a class="header-anchor" href="#什么是draw-call"><span>什么是Draw Call</span></a></h3><h4 id="问题一-cpu和gpu是如何实现并行工作的" tabindex="-1"><a class="header-anchor" href="#问题一-cpu和gpu是如何实现并行工作的"><span>问题一：CPU和GPU是如何实现并行工作的</span></a></h4><ul><li>解决方法：使用一个<code>命令缓冲区</code>（<em>Command Buffer</em>） <ul><li>命令缓冲区包含一个命令队列，由CPU向其中添加命令，而GPU从中读取队列</li></ul></li><li>补充：这也解释了为什么说：<code>Draw Call</code>中造成性能问题的原因往往是CPU</li></ul><p>图2.19 命令缓冲区。CPU通过图像编程接口向命令缓冲区中添加命令，而GPU从中读取命令并执行。黄色方框内的命令就是Draw Call，而红色方框内的命令用于改变渲染状态。我们使用红色方框来表示改变渲染状态的命令，\u2028是因为这些命令往往更加耗时</p><p><img src="'+k+'" alt="CommandBuffer.png-49.9kB" loading="lazy"></p><h4 id="为什么draw-call多了会影响帧率" tabindex="-1"><a class="header-anchor" href="#为什么draw-call多了会影响帧率"><span>为什么Draw Call多了会影响帧率</span></a></h4><ul><li>类比：复制10000个1KB文件比复制一个单独的10MB文件慢很多。复制需要很多额外操作，例如分配内存、创建各种元数据等</li><li>结论：如果Draw Call数量太多，CPU会把大量时间花费在提交Draw Call上，造成CPU的过载</li></ul><p>图2.20 命令缓冲区中的虚线方框表示GPU已经完成的命令。此时，命令缓冲区中没有可以执行的命令了，GPU处于空闲状态，而CPU还没有准备好下一个渲染命令</p><p><img src="'+D+'" alt="SmallCommand.png-107.7kB" loading="lazy"></p><h4 id="如何减少draw-call" tabindex="-1"><a class="header-anchor" href="#如何减少draw-call"><span>如何减少Draw Call？</span></a></h4><ul><li>方法：有很多，这里仅讨论使用<code>批处理</code>（<em>Batching</em>）的方法 <ul><li>批处理 <ul><li>方法：把很多很小的DrawCall合并成一个大的Draw Call，比如在CPU内存中合并网格，合并的过程需要消耗时间</li><li>局限：更适合那些静态物体。如果对动态物体进行批处理，会一帧都需要重新合并物体，效率低</li></ul></li><li>开发启示 <ul><li>避免使用大量很小的网格，当不可避免时应当考虑是否合并它们</li><li>避免使用过多的材质。尽量在不同的网格之间共用同一个材质</li></ul></li></ul></li></ul><p>图2.21 利用批处理，CPU在RAM把多个网格合并成一个更大的网格，再发送给GPU，然后在一个Draw Call中渲染它们。但要注意的是，使用批处理合并的网格将会使用同一种渲染状态。也就是说，如果网格之间需要使用不同的渲染状态，那么就无法使用批处理技</p><p><img src="'+y+'" alt="Batching.png-70.3kB" loading="lazy"></p><h3 id="什么是固定管线渲染" tabindex="-1"><a class="header-anchor" href="#什么是固定管线渲染"><span>什么是固定管线渲染</span></a></h3><p>3种图像接口从固定管线向可编程管线进化的版本</p><table><thead><tr><th>3D API</th><th>最后支持固定管线的版本</th><th>第一个支持可编程管线的版本</th></tr></thead><tbody><tr><td>OpenGL</td><td>1.5</td><td>2.0</td></tr><tr><td>OpenGL ES</td><td>1.1</td><td>2.0</td></tr><tr><td>DirectX</td><td>7.0</td><td>8.0</td></tr></tbody></table>',118)]))}const U=l(S,[["render",C],["__file","1-02. 渲染流水线.html.vue"]]),G=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/3D/Render/%E3%80%8AUnityShadow%E3%80%8B/1-02.%20%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF.html","title":"《UnityShadow》","lang":"zh-CN","frontmatter":{"description":"《UnityShadow》 目录 渲染流水线（书顺序） 综述 什么是流水线 优点：可以提高单位时间的生产量 吐槽：书上的说法有点误导，用来和现实情况类比是不恰当的。这应该是硬件功能的单一性所决定的 图2.1 真实生活中的流水线 流水线.png-83.4kB 什么是渲染流水线 渲染流程：《Real-Time Rendering，Third Edition...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/3D/Render/%E3%80%8AUnityShadow%E3%80%8B/1-02.%20%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《UnityShadow》"}],["meta",{"property":"og:description","content":"《UnityShadow》 目录 渲染流水线（书顺序） 综述 什么是流水线 优点：可以提高单位时间的生产量 吐槽：书上的说法有点误导，用来和现实情况类比是不恰当的。这应该是硬件功能的单一性所决定的 图2.1 真实生活中的流水线 流水线.png-83.4kB 什么是渲染流水线 渲染流程：《Real-Time Rendering，Third Edition..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《UnityShadow》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《UnityShadow》","slug":"《unityshadow》","link":"#《unityshadow》","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"渲染流水线（书顺序）","slug":"渲染流水线-书顺序","link":"#渲染流水线-书顺序","children":[{"level":2,"title":"综述","slug":"综述","link":"#综述","children":[{"level":3,"title":"什么是流水线","slug":"什么是流水线","link":"#什么是流水线","children":[]},{"level":3,"title":"什么是渲染流水线","slug":"什么是渲染流水线","link":"#什么是渲染流水线","children":[{"level":4,"title":"应用阶段（Application Stage）（CPU实现）","slug":"应用阶段-application-stage-cpu实现","link":"#应用阶段-application-stage-cpu实现","children":[]},{"level":4,"title":"几何阶段（Geometry Stage）（GPU实现）","slug":"几何阶段-geometry-stage-gpu实现","link":"#几何阶段-geometry-stage-gpu实现","children":[]},{"level":4,"title":"光栅化阶段（Rasterizer Stage）（GPU实现）","slug":"光栅化阶段-rasterizer-stage-gpu实现","link":"#光栅化阶段-rasterizer-stage-gpu实现","children":[]}]}]},{"level":2,"title":"CPU和GPU通信","slug":"cpu和gpu通信","link":"#cpu和gpu通信","children":[{"level":3,"title":"把数据加载到到显存中","slug":"把数据加载到到显存中","link":"#把数据加载到到显存中","children":[]},{"level":3,"title":"设置渲染状态","slug":"设置渲染状态","link":"#设置渲染状态","children":[]},{"level":3,"title":"调用Draw Call","slug":"调用draw-call","link":"#调用draw-call","children":[]}]},{"level":2,"title":"GPU流水线","slug":"gpu流水线","link":"#gpu流水线","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"顶点着色器（Vertex Shader）（可编程）","slug":"顶点着色器-vertex-shader-可编程","link":"#顶点着色器-vertex-shader-可编程","children":[]},{"level":3,"title":"曲面细分着色器（Tessellation Shader）（可编程、可选）","slug":"曲面细分着色器-tessellation-shader-可编程、可选","link":"#曲面细分着色器-tessellation-shader-可编程、可选","children":[]},{"level":3,"title":"几何着色器（Geometry Shader）（可编程、可选）","slug":"几何着色器-geometry-shader-可编程、可选","link":"#几何着色器-geometry-shader-可编程、可选","children":[]},{"level":3,"title":"裁剪（Clipping）（可配置）","slug":"裁剪-clipping-可配置","link":"#裁剪-clipping-可配置","children":[]},{"level":3,"title":"屏幕映射（Screen Mapping）（固定）","slug":"屏幕映射-screen-mapping-固定","link":"#屏幕映射-screen-mapping-固定","children":[]},{"level":3,"title":"三角形设置（Triangle Setup）（固定）","slug":"三角形设置-triangle-setup-固定","link":"#三角形设置-triangle-setup-固定","children":[]},{"level":3,"title":"三角形遍历（Triangle Traversal）（固定）","slug":"三角形遍历-triangle-traversal-固定","link":"#三角形遍历-triangle-traversal-固定","children":[]},{"level":3,"title":"片元着色器（Fragment Shader）（可编程、可选）这步不太懂","slug":"片元着色器-fragment-shader-可编程、可选-这步不太懂","link":"#片元着色器-fragment-shader-可编程、可选-这步不太懂","children":[]},{"level":3,"title":"逐片元操作（Per-Fragment Operations）（可配置）","slug":"逐片元操作-per-fragment-operations-可配置","link":"#逐片元操作-per-fragment-operations-可配置","children":[{"level":4,"title":"模板测试（Stencil Test）","slug":"模板测试-stencil-test","link":"#模板测试-stencil-test","children":[]},{"level":4,"title":"深度测试（Depth Test）","slug":"深度测试-depth-test","link":"#深度测试-depth-test","children":[]},{"level":4,"title":"混合（Blend）","slug":"混合-blend","link":"#混合-blend","children":[]},{"level":4,"title":"补充：提前执行技术","slug":"补充-提前执行技术","link":"#补充-提前执行技术","children":[]},{"level":4,"title":"补充：双重缓冲（Double Buffering）策略","slug":"补充-双重缓冲-double-buffering-策略","link":"#补充-双重缓冲-double-buffering-策略","children":[]}]}]},{"level":2,"title":"一些容易困惑的地方","slug":"一些容易困惑的地方","link":"#一些容易困惑的地方","children":[{"level":3,"title":"什么是OpenGL/DirectX","slug":"什么是opengl-directx","link":"#什么是opengl-directx","children":[]},{"level":3,"title":"什么是HLSL、GLSL、CG","slug":"什么是hlsl、glsl、cg","link":"#什么是hlsl、glsl、cg","children":[]},{"level":3,"title":"什么是Draw Call","slug":"什么是draw-call","link":"#什么是draw-call","children":[{"level":4,"title":"问题一：CPU和GPU是如何实现并行工作的","slug":"问题一-cpu和gpu是如何实现并行工作的","link":"#问题一-cpu和gpu是如何实现并行工作的","children":[]},{"level":4,"title":"为什么Draw Call多了会影响帧率","slug":"为什么draw-call多了会影响帧率","link":"#为什么draw-call多了会影响帧率","children":[]},{"level":4,"title":"如何减少Draw Call？","slug":"如何减少draw-call","link":"#如何减少draw-call","children":[]}]},{"level":3,"title":"什么是固定管线渲染","slug":"什么是固定管线渲染","link":"#什么是固定管线渲染","children":[]}]}]}],"git":{},"readingTime":{"minutes":15.08,"words":4524},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-02. 渲染流水线.md","excerpt":"\\n<h1>目录</h1>\\n<h1>渲染流水线（书顺序）</h1>\\n<h2>综述</h2>\\n<h3>什么是流水线</h3>\\n<ul>\\n<li>优点：可以提高单位时间的生产量</li>\\n<li>吐槽：书上的说法有点误导，用来和现实情况类比是不恰当的。这应该是硬件功能的单一性所决定的</li>\\n</ul>\\n<p>图2.1　真实生活中的流水线</p>\\n<p></p>\\n<h3>什么是渲染流水线</h3>\\n<p>渲染流程：《Real-Time Rendering，Third Edition》一书将渲染流程分成下面三个阶段（概念流水线，而非GPU流水线）</p>\\n<p>图2.2 渲染流水线中的三个概念阶段</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-02. 渲染流水线.md","value":{"title":"1-02. 渲染流水线","path":"MdNote_Public/01. DesignAndDevelop/3D/Render/《UnityShadow》/1-02. 渲染流水线.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{U as comp,G as data};
