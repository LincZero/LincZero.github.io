import{_ as s,c as a,a as e,o as t}from"./app-CbY8iZ9G.js";const p={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="bcc" tabindex="-1"><a class="header-anchor" href="#bcc"><span>BCC</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="用例实践" tabindex="-1"><a class="header-anchor" href="#用例实践"><span>用例实践</span></a></h1><h2 id="网络项" tabindex="-1"><a class="header-anchor" href="#网络项"><span>网络项</span></a></h2><h3 id="tunnel-monitor" tabindex="-1"><a class="header-anchor" href="#tunnel-monitor"><span>tunnel_monitor</span></a></h3><h4 id="坑1-chord-transitions-仓库丢失" tabindex="-1"><a class="header-anchor" href="#坑1-chord-transitions-仓库丢失"><span>坑1，chord-transitions 仓库丢失</span></a></h4><p>https://github.com/iovisor/bcc/tree/master/examples/networking/tunnel_monitor</p><p>这个好像没办法用，setup.sh 里的clone仓库发现是不存在的。后来发现需要修改里面的仓库地址为：https://github.com/sghall/chord-transitions.git</p><h4 id="坑1-2-bower-json-丢失" tabindex="-1"><a class="header-anchor" href="#坑1-2-bower-json-丢失"><span>坑1.2，bower.json 丢失</span></a></h4><p>但好像还是不行，还是会报这个错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bower                           ENOENT No bower.json present
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="坑1-3-setup卡住" tabindex="-1"><a class="header-anchor" href="#坑1-3-setup卡住"><span>坑1.3，setup卡住</span></a></h4><p>一直卡在这里：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/git/public/bcc/examples/networking/tunnel_monitor$ ./setup.sh
<span class="token function">npm</span> WARN old lockfile
<span class="token function">npm</span> WARN old lockfile The package-lock.json <span class="token function">file</span> was created with an old version of npm,
<span class="token function">npm</span> WARN old lockfile so supplemental metadata must be fetched from the registry.
<span class="token function">npm</span> WARN old lockfile
<span class="token function">npm</span> WARN old lockfile This is a one-time fix-up, please be patient<span class="token punctuation">..</span>.
<span class="token function">npm</span> WARN old lockfile
<span class="token punctuation">(</span>⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂⠂<span class="token punctuation">)</span> ⠏ idealTree:inflate:code-point-at: sill inflate node_modules/code-point-at
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还有关于一直 <code>npm WARN old lockfile</code> 的警告。</p><p>更新npm，现在尝试从官网中更新node.js</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 更新apt</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> upgrade

<span class="token comment"># 更新nodejs</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span>
<span class="token comment"># 命令解释：curl 用于从 NodeSource 存储库下载 Node.js 安装脚本，，将下载的脚本数据传递给 bash 以 root 权限执行</span>
<span class="token function">curl</span> <span class="token parameter variable">-sL</span> https://deb.nodesource.com/setup_lts.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token parameter variable">-E</span> <span class="token function">bash</span> - <span class="token comment"># 这里的lts.x可以替换为具体的版本号，如18.17。</span>
<span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nodejs

<span class="token comment"># 如果由于残留原因报错，尝试卸载旧版本再重装</span>
<span class="token function">apt-get</span> remove nodejs libnode-dev
<span class="token function">apt-get</span> autoremove
<span class="token function">curl</span> <span class="token parameter variable">-sL</span> https://deb.nodesource.com/setup_lts.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token parameter variable">-E</span> <span class="token function">bash</span> -
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> nodejs

<span class="token comment"># 验证版本</span>
<span class="token function">node</span> <span class="token parameter variable">-v</span>
<span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑1-4-insert-of-undefined" tabindex="-1"><a class="header-anchor" href="#坑1-4-insert-of-undefined"><span>坑1.4，&#39;insert&#39; of undefined</span></a></h4><p>错误：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> ERR<span class="token operator">!</span> Cannot <span class="token builtin class-name">read</span> property <span class="token string">&#39;insert&#39;</span> of undefined

<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:
<span class="token function">npm</span> ERR<span class="token operator">!</span>     /root/.npm/_logs/2023-07-28T03_32_20_463Z-debug-0.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应于 setup.sh 里的 <code>npm install bower</code> 命令。</p><p>建议还是更新npm，现在尝试从官网中更新node.js</p><p>……</p><p>（话说我wsl npm@6.14.4 是可以的，为什么208的 npm@8.5.1 不行呢，就很奇怪）</p><h4 id="坑2-pyroute2库存在问题" tabindex="-1"><a class="header-anchor" href="#坑2-pyroute2库存在问题"><span>坑2，pyroute2库存在问题</span></a></h4><p>若无视上面的setup.sh直接运行tunnel_monitor.py，则会报错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;./main.py&quot;</span>, line <span class="token number">80</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    sim.start<span class="token punctuation">(</span><span class="token punctuation">)</span>
  File <span class="token string">&quot;./main.py&quot;</span>, line <span class="token number">36</span>, <span class="token keyword">in</span> start
    with self.ipdb.create<span class="token punctuation">(</span>ifname<span class="token operator">=</span><span class="token string">&quot;br100&quot;</span>, <span class="token assign-left variable">kind</span><span class="token operator">=</span><span class="token string">&quot;bridge&quot;</span><span class="token punctuation">)</span> as br100:
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/ipdb/main.py&quot;</span>, line <span class="token number">1202</span>, <span class="token keyword">in</span> create
    <span class="token builtin class-name">return</span> self.interfaces.add<span class="token punctuation">(</span>kind, ifname, reuse, **kwarg<span class="token punctuation">)</span>
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/ipdb/interfaces.py&quot;</span>, line <span class="token number">1230</span>, <span class="token keyword">in</span> <span class="token function">add</span>
    raise CreateException<span class="token punctuation">(</span><span class="token string">&quot;interface %s exists&quot;</span> % ifname<span class="token punctuation">)</span>
pyroute2.ipdb.exceptions.CreateException: interface br100 exists
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实运行其他脚本也有这个库的问题，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/git/public/bcc/examples/networking$ python3 ./simple_tc.py
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;./simple_tc.py&quot;</span>, line <span class="token number">23</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    ipr.tc<span class="token punctuation">(</span><span class="token string">&quot;add-filter&quot;</span>, <span class="token string">&quot;bpf&quot;</span>, idx, <span class="token string">&quot;:1&quot;</span>, <span class="token assign-left variable">fd</span><span class="token operator">=</span>fn.fd,
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/iproute/linux.py&quot;</span>, line <span class="token number">1931</span>, <span class="token keyword">in</span> tc
    <span class="token builtin class-name">return</span> tuple<span class="token punctuation">(</span>self.nlm_request<span class="token punctuation">(</span>msg, <span class="token assign-left variable">msg_type</span><span class="token operator">=</span>command, <span class="token assign-left variable">msg_flags</span><span class="token operator">=</span>flags<span class="token punctuation">))</span>
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/netlink/nlsocket.py&quot;</span>, line <span class="token number">870</span>, <span class="token keyword">in</span> nlm_request
    <span class="token builtin class-name">return</span> tuple<span class="token punctuation">(</span>self._genlm_request<span class="token punctuation">(</span>*argv, **kwarg<span class="token punctuation">))</span>
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/netlink/nlsocket.py&quot;</span>, line <span class="token number">1214</span>, <span class="token keyword">in</span> nlm_request
    <span class="token keyword">for</span> <span class="token for-or-select variable">msg</span> <span class="token keyword">in</span> self.get<span class="token punctuation">(</span>
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/netlink/nlsocket.py&quot;</span>, line <span class="token number">873</span>, <span class="token keyword">in</span> get
    <span class="token builtin class-name">return</span> tuple<span class="token punctuation">(</span>self._genlm_get<span class="token punctuation">(</span>*argv, **kwarg<span class="token punctuation">))</span>
  File <span class="token string">&quot;/usr/local/lib/python3.8/dist-packages/pyroute2/netlink/nlsocket.py&quot;</span>, line <span class="token number">550</span>, <span class="token keyword">in</span> get
    raise msg<span class="token punctuation">[</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span>
pyroute2.netlink.exceptions.NetlinkError: <span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">&#39;No such file or directory&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误是由 Python 的 pyroute2 库抛出的一个 NetlinkError 异常。具体来说，这个错误表示在尝试与内核通信进行网络操作时，找不到预期的文件或目录（错误码 2 表示 &quot;No such file or directory&quot;）。</p><p>从给出的代码片段来看，这个错误发生在尝试添加一个 BPF 过滤器到网络接口时。为了解决这个问题，你可以尝试以下步骤：</p><p>这个是wsl里出现的错误，后来试了下实机是没有这个问题的。实机是其他问题：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/git/public/bcc/examples/networking$ python tunnel_monitor/main.py
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;/home/msy/git/public/bcc/examples/networking/tunnel_monitor/main.py&quot;</span>, line <span class="token number">11</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from simulation <span class="token function">import</span> Simulation
  File <span class="token string">&quot;/home/msy/git/public/bcc/examples/networking/tunnel_monitor/simulation.py&quot;</span>, line <span class="token number">1</span>
    <span class="token punctuation">..</span>/simulation.py
    ^
SyntaxError: invalid syntax

/git/public/bcc/examples/networking$ python ./simple_tc.py
BPF tc functionality - SCHED_CLS: OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="坑3-无效语法-找不到simulation-py" tabindex="-1"><a class="header-anchor" href="#坑3-无效语法-找不到simulation-py"><span>坑3，无效语法，找不到simulation.py</span></a></h4><p>这里应该是仓库作者为了压缩空间，但是又懒得做路由重定义。这里需要手动复制一下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 错误</span>
root@msy:/home/msy/git/public/bcc/examples/networking$ python3 tunnel_monitor/main.py
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;/home/msy/git/public/bcc/examples/networking/tunnel_monitor/main.py&quot;</span>, line <span class="token number">11</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    from simulation <span class="token function">import</span> Simulation
  File <span class="token string">&quot;/home/msy/git/public/bcc/examples/networking/tunnel_monitor/simulation.py&quot;</span>, line <span class="token number">1</span>
    <span class="token punctuation">..</span>/simulation.py
    ^
SyntaxError: invalid syntax

root@msy:/home/msy/git/public/bcc/examples/networking$ <span class="token function">ls</span>
CMakeLists.txt      http_filter       simple_tc.py   tc_perf_event.py  vlan_filter
distributed_bridge  neighbor_sharing  simulation.py  tcp_mon_block     vlan_learning
dns_matching        net_monitor.py    sockmap.py     tunnel_monitor    xdp

<span class="token comment"># 修复</span>
root@msy:/home/msy/git/public/bcc/examples/networking$ <span class="token function">cp</span> simulation.py ./tunnel_monitor/simulation.py

root@msy:/home/msy/git/public/bcc/examples/networking$ python3 tunnel_monitor/main.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他项" tabindex="-1"><a class="header-anchor" href="#其他项"><span>其他项</span></a></h2><h3 id="undump" tabindex="-1"><a class="header-anchor" href="#undump"><span>undump</span></a></h3><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@msy:/home/msy/git/public/bcc/examples/tracing<span class="token comment"># python ./undump.py</span>
Tracing UNIX socket packets <span class="token punctuation">..</span>. Hit Ctrl-C to end
Recv <span class="token number">260</span> bytes
    6c 04 01 01 <span class="token number">54</span> 00 00 00 <span class="token number">35</span> 00 00 00 9a 00 00 00
    01 01 6f 00 <span class="token number">38</span> 00 00 00 2f 6f <span class="token number">72</span> <span class="token number">67</span> 2f <span class="token number">66</span> <span class="token number">72</span> <span class="token number">65</span>
    <span class="token number">65</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">73</span> 6b <span class="token number">74</span> 6f <span class="token number">70</span> 2f <span class="token number">55</span> <span class="token number">44</span> <span class="token number">69</span> <span class="token number">73</span> 6b <span class="token number">73</span> <span class="token number">32</span>
    2f <span class="token number">64</span> <span class="token number">72</span> <span class="token number">69</span> <span class="token number">76</span> <span class="token number">65</span> <span class="token number">73</span> 2f <span class="token number">54</span> <span class="token number">53</span> <span class="token number">31</span> <span class="token number">32</span> <span class="token number">30</span> <span class="token number">47</span> <span class="token number">53</span> <span class="token number">53</span>
    <span class="token number">44</span> <span class="token number">32</span> <span class="token number">32</span> <span class="token number">30</span> <span class="token number">53</span> 5f <span class="token number">45</span> <span class="token number">36</span> <span class="token number">30</span> <span class="token number">38</span> <span class="token number">39</span> <span class="token number">36</span> <span class="token number">30</span> <span class="token number">32</span> <span class="token number">34</span> <span class="token number">36</span>
    00 00 00 00 00 00 00 00 02 01 <span class="token number">73</span> 00 1f 00 00 00
    6f <span class="token number">72</span> <span class="token number">67</span> 2e <span class="token number">66</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">65</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">73</span> 6b <span class="token number">74</span> 6f <span class="token number">70</span> 2e
    <span class="token number">44</span> <span class="token number">42</span> <span class="token number">75</span> <span class="token number">73</span> 2e <span class="token number">50</span> <span class="token number">72</span> 6f <span class="token number">70</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">74</span> <span class="token number">69</span> <span class="token number">65</span> <span class="token number">73</span> 00
    08 01 <span class="token number">67</span> 00 08 <span class="token number">73</span> <span class="token number">61</span> 7b <span class="token number">73</span> <span class="token number">76</span> 7d <span class="token number">61</span> <span class="token number">73</span> 00 00 00
    03 01 <span class="token number">73</span> 00 <span class="token number">11</span> 00 00 00 <span class="token number">50</span> <span class="token number">72</span> 6f <span class="token number">70</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">74</span> <span class="token number">69</span>
    <span class="token number">65</span> <span class="token number">73</span> <span class="token number">43</span> <span class="token number">68</span> <span class="token number">61</span> 6e <span class="token number">67</span> <span class="token number">65</span> <span class="token number">64</span> 00 00 00 00 00 00 00
    <span class="token number">21</span> 00 00 00 6f <span class="token number">72</span> <span class="token number">67</span> 2e <span class="token number">66</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">65</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">73</span> 6b
    <span class="token number">74</span> 6f <span class="token number">70</span> 2e <span class="token number">55</span> <span class="token number">44</span> <span class="token number">69</span> <span class="token number">73</span> 6b <span class="token number">73</span> <span class="token number">32</span> 2e <span class="token number">44</span> <span class="token number">72</span> <span class="token number">69</span> <span class="token number">76</span>
    <span class="token number">65</span> 2e <span class="token number">41</span> <span class="token number">74</span> <span class="token number">61</span> 00 00 00 <span class="token number">20</span> 00 00 00 00 00 00 00
    0c 00 00 00 <span class="token number">53</span> 6d <span class="token number">61</span> <span class="token number">72</span> <span class="token number">74</span> <span class="token number">55</span> <span class="token number">70</span> <span class="token number">64</span> <span class="token number">61</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">64</span>
    00 01 <span class="token number">74</span> 00 00 00 00 00 <span class="token number">33</span> <span class="token number">64</span> c3 <span class="token number">64</span> 00 00 00 00
    00 00 00 00
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序（undump.py）是用来抓取和打印通过 <strong>UNIX socket（通常被用于进程间通信）</strong> 传输的数据包的。它使用了一个名为<code>bcc</code>的库，该库允许在内核中运行eBPF程序来捕获事件。在本例中，这个程序捕获了连接到UNIX socket的进程的发送和接收数据包的事件。</p><p>由于UNIX socket主要用于本地进程间通信，数据包的传输可能不像网络包那样频繁。因此，在运行und_dump.py程序时，可能要等待一段时间才能抓取到足够的UNIX socket数据包并将其打印出来。</p><p>此外，这个程序可能会因操作系统的不同和权限设置而产生不同的结果。在一些系统上，为了获取UNIX socket传输的数据包信息，需要在root身份下运行该程序。请确保您是以最高权限运行这个程序，以便于获取更多相关数据包。</p><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python</span>
<span class="token comment"># @lint-avoid-python-3-compatibility-imports</span>
<span class="token comment">#</span>
<span class="token comment"># undump        Dump UNIX socket packets.</span>
<span class="token comment">#               For Linux, uses BCC, eBPF. Embedded C.</span>
<span class="token comment"># USAGE: undump [-h] [-t] [-p PID]</span>
<span class="token comment">#</span>
<span class="token comment"># This uses dynamic tracing of kernel functions, and will need to be updated</span>
<span class="token comment"># to match kernel changes.</span>
<span class="token comment">#</span>
<span class="token comment"># Copyright (c) 2021 Rong Tao.</span>
<span class="token comment"># Licensed under the GPL License, Version 2.0</span>
<span class="token comment">#</span>
<span class="token comment"># 27-Aug-2021   Rong Tao   Created this.</span>
<span class="token comment"># 17-Sep-2021   Rong Tao   Simplify according to chenhengqi&#39;s suggestion</span>
<span class="token comment">#                           https://github.com/iovisor/bcc/pull/3615</span>
<span class="token comment">#</span>
<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF
<span class="token keyword">from</span> bcc<span class="token punctuation">.</span>containers <span class="token keyword">import</span> filter_by_containers
<span class="token keyword">from</span> bcc<span class="token punctuation">.</span>utils <span class="token keyword">import</span> printb
<span class="token keyword">import</span> argparse
<span class="token keyword">from</span> socket <span class="token keyword">import</span> inet_ntop<span class="token punctuation">,</span> ntohs<span class="token punctuation">,</span> AF_INET<span class="token punctuation">,</span> AF_INET6
<span class="token keyword">from</span> struct <span class="token keyword">import</span> pack
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">import</span> sys

<span class="token comment"># 参数</span>
examples <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;examples:
    ./undump           # trace/dump all UNIX packets
    ./undump -p 181    # only trace/dump PID 181
&quot;&quot;&quot;</span>
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>
    description<span class="token operator">=</span><span class="token string">&quot;Dump UNIX socket packets&quot;</span><span class="token punctuation">,</span>
    formatter_class<span class="token operator">=</span>argparse<span class="token punctuation">.</span>RawDescriptionHelpFormatter<span class="token punctuation">,</span>
    epilog<span class="token operator">=</span>examples<span class="token punctuation">)</span>

parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;-p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;--pid&quot;</span><span class="token punctuation">,</span>
        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;trace this PID only&quot;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 定义BPF程序</span>
bpf_text <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;...&quot;&quot;&quot;</span>

<span class="token keyword">if</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">:</span>
    bpf_text <span class="token operator">=</span> bpf_text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;FILTER_PID&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;if (pid != %s) { return 0; }&#39;</span> <span class="token operator">%</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>

bpf_text <span class="token operator">=</span> bpf_text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;FILTER_PID&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># process event</span>
<span class="token keyword">def</span> <span class="token function">print_recv_pkg</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    event <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token string">&quot;unix_recv_events&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>event<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;PID \\033[1;31m%s\\033[m &quot;</span> <span class="token operator">%</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Recv \\033[1;31m%d\\033[m bytes&quot;</span> <span class="token operator">%</span> event<span class="token punctuation">.</span>recv_len<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>recv_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%02x &quot;</span> <span class="token operator">%</span> event<span class="token punctuation">.</span>pkt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;    &quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># initialize BPF</span>
b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>text<span class="token operator">=</span>bpf_text<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>attach_kprobe<span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">&quot;unix_stream_read_actor&quot;</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">&quot;trace_unix_stream_read_actor&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Tracing \\033[1;31mPID=%s\\033[m UNIX socket packets ... Hit Ctrl-C to end&quot;</span> <span class="token operator">%</span> args<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Tracing UNIX socket packets ... Hit Ctrl-C to end&quot;</span><span class="token punctuation">)</span>

start_ts <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment"># read events</span>
b<span class="token punctuation">[</span><span class="token string">&quot;unix_recv_events&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open_perf_buffer<span class="token punctuation">(</span>print_recv_pkg<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        b<span class="token punctuation">.</span>perf_buffer_poll<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>0</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;uapi/linux/ptrace.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/sock.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bcc/proto.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/aio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/socket.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/net.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/mount.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/sock.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/af_unix.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_PKT</span> <span class="token expression"><span class="token number">512</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">recv_data_t</span> <span class="token punctuation">{</span>
    u32 recv_len<span class="token punctuation">;</span>
    u8  pkt<span class="token punctuation">[</span>MAX_PKT<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// single element per-cpu array to hold the current event off the stack</span>
<span class="token function">BPF_PERCPU_ARRAY</span><span class="token punctuation">(</span>unix_data<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">recv_data_t</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">BPF_PERF_OUTPUT</span><span class="token punctuation">(</span>unix_recv_events<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">trace_unix_stream_read_actor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>ctx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u32 zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">PT_REGS_RC</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    u64 pid_tgid <span class="token operator">=</span> <span class="token function">bpf_get_current_pid_tgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    u32 pid <span class="token operator">=</span> pid_tgid <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">;</span>
    u32 tid <span class="token operator">=</span> pid_tgid<span class="token punctuation">;</span>

    FILTER_PID

    <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PT_REGS_PARM1</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">struct</span> <span class="token class-name">recv_data_t</span> <span class="token operator">*</span>data <span class="token operator">=</span> unix_data<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> data_len <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data_len <span class="token operator">&gt;</span> MAX_PKT<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token operator">*</span>iodata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    data<span class="token operator">-&gt;</span>recv_len <span class="token operator">=</span> data_len<span class="token punctuation">;</span>

    <span class="token function">bpf_probe_read</span><span class="token punctuation">(</span>data<span class="token operator">-&gt;</span>pkt<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> iodata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    unix_recv_events<span class="token punctuation">.</span><span class="token function">perf_submit</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tcp专项" tabindex="-1"><a class="header-anchor" href="#tcp专项"><span>tcp专项</span></a></h2><h3 id="tcpdump" tabindex="-1"><a class="header-anchor" href="#tcpdump"><span>tcpdump</span></a></h3><p>这个好像不是eBPF程序，而是原生命令。tcpdump是一个基于命令行的网络抓包工具，用于捕获和分析网络数据包。它可以帮助您诊断和调试网络问题，以及深入了解网络通讯的细节。通过使用不同的过滤器和选项，您可以定制tcpdump来捕获特定类型的数据包，非常灵活地进行网路通讯分析。</p><p>这里只收1次tcp往返包，208发给209再让209返回给208：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root@msy:/home/msy/SatelliteTester$ tcpdump
tcpdump: verbose output suppressed, use -v<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token keyword">for</span> full protocol decode
listening on enp4s0f0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, snapshot length <span class="token number">262144</span> bytes
07:55:54.617982 IP <span class="token number">192.168</span>.208.1.57237 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.208.199.8811: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1274094941</span>:1274095017, ack <span class="token number">3189192749</span>, win <span class="token number">502</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">422140321</span> ecr <span class="token number">68892766</span><span class="token punctuation">]</span>, length <span class="token number">76</span>
07:55:54.618245 IP <span class="token number">192.168</span>.208.199.8811 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.208.1.57237: Flags <span class="token punctuation">[</span>P.<span class="token punctuation">]</span>, <span class="token function">seq</span> <span class="token number">1</span>:77, ack <span class="token number">76</span>, win <span class="token number">509</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">68902766</span> ecr <span class="token number">422140321</span><span class="token punctuation">]</span>, length <span class="token number">76</span>
07:55:54.618259 IP <span class="token number">192.168</span>.208.1.57237 <span class="token operator">&gt;</span> <span class="token number">192.168</span>.208.199.8811: Flags <span class="token punctuation">[</span>.<span class="token punctuation">]</span>, ack <span class="token number">77</span>, win <span class="token number">502</span>, options <span class="token punctuation">[</span>nop,nop,TS val <span class="token number">422140321</span> ecr <span class="token number">68902766</span><span class="token punctuation">]</span>, length <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tclcalls" tabindex="-1"><a class="header-anchor" href="#tclcalls"><span>tclcalls</span></a></h3><p>lib/ucalls_example.txt</p><h3 id="tclflow" tabindex="-1"><a class="header-anchor" href="#tclflow"><span>tclflow</span></a></h3><p>lib/uflow_example.txt</p><h3 id="tclobjnew" tabindex="-1"><a class="header-anchor" href="#tclobjnew"><span>tclobjnew</span></a></h3><p>lib/uobjnew_example.txt</p><h3 id="tclstat" tabindex="-1"><a class="header-anchor" href="#tclstat"><span>tclstat</span></a></h3><p>lib/ustat_example.txt</p><h3 id="tcpaccept" tabindex="-1"><a class="header-anchor" href="#tcpaccept"><span>tcpaccept</span></a></h3><p>tcpaccept的演示，Linux eBPF/bcc版本</p><p>该工具跟踪接受TCP套接字连接的内核函数 (例如，a passive connection via accept(); not connect())。</p><p>一些示例输出 (更改IP地址以保护无辜) :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpaccept</span>
PID    COMM         IP RADDR            RPORT  LADDR            LPORT
<span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">192.168</span>.56.1     <span class="token number">32324</span>  <span class="token number">192.168</span>.56.102   <span class="token number">22</span>
<span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">39866</span>  <span class="token number">127.0</span>.0.1        <span class="token number">22</span>
<span class="token number">5389</span>   perl         <span class="token number">6</span>  <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">52352</span> <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">7001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This output shows three connections, two IPv4 connections to PID 907, an &quot;sshd&quot; process listening on port 22, and one IPv6 connection to a &quot;perl&quot; process listening on port 7001.</p><p>The overhead of this tool should be negligible, since it is only tracing the kernel function performing accept. It is not tracing every packet and then filtering.</p><p>This tool only traces successful TCP accept()s. Connection attempts to closed ports will not be shown (those can be traced via other functions).</p><p>The -t option prints a timestamp column:</p><p>该输出显示了三个连接，两个到PID 907的IPv4连接，一个监听端口22的 “sshd” 进程，以及一个监听端口7001的 “perl” 进程的IPv6连接。</p><p>这个工具的开销应该可以忽略不计，因为它只跟踪执行accept的内核函数。它不是跟踪每个包，然后过滤。</p><p>此工具仅跟踪成功的TCP accept()。将不会显示对关闭端口的连接尝试(这些尝试可以通过其他功能跟踪)。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpaccept -t</span>
TIME<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  PID    COMM         IP RADDR            RPORT LADDR            LPORT
<span class="token number">0.000</span>    <span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">53700</span> <span class="token number">127.0</span>.0.1        <span class="token number">22</span>
<span class="token number">0.010</span>    <span class="token number">5389</span>   perl         <span class="token number">6</span>  <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">40614</span> <span class="token number">1234</span>:ab12:2040:5020:2299:0:5:0 <span class="token number">7001</span>
<span class="token number">0.992</span>    <span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">32548</span> <span class="token number">127.0</span>.0.1        <span class="token number">22</span>
<span class="token number">1.984</span>    <span class="token number">907</span>    sshd         <span class="token number">4</span>  <span class="token number">127.0</span>.0.1        <span class="token number">51250</span> <span class="token number">127.0</span>.0.1        <span class="token number">22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The --cgroupmap option filters based on a cgroup set. It is meant to be used with an externally created map.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpaccept --cgroupmap /sys/fs/bpf/test01</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For more details, see docs/special_filtering.md</p><p>USAGE message:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># ./tcpaccept -h</span>
usage: tcpaccept.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-T<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p PID<span class="token punctuation">]</span> <span class="token punctuation">[</span>-P PORT<span class="token punctuation">]</span> <span class="token punctuation">[</span>-4 <span class="token operator">|</span> -6<span class="token punctuation">]</span> <span class="token punctuation">[</span>--cgroupmap CGROUPMAP<span class="token punctuation">]</span>

Trace TCP accepts

optional arguments:
  -h, <span class="token parameter variable">--help</span>            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>
  -T, <span class="token parameter variable">--time</span>            include <span class="token function">time</span> <span class="token function">column</span> on output <span class="token punctuation">(</span>HH:MM:SS<span class="token punctuation">)</span>
  -t, <span class="token parameter variable">--timestamp</span>       include timestamp on output
  <span class="token parameter variable">-p</span> PID, <span class="token parameter variable">--pid</span> PID     trace this PID only
  <span class="token parameter variable">-P</span> PORT, <span class="token parameter variable">--port</span> PORT  comma-separated list of <span class="token builtin class-name">local</span> ports to trace
  -4, <span class="token parameter variable">--ipv4</span>            trace IPv4 family only
  -6, <span class="token parameter variable">--ipv6</span>            trace IPv6 family only
  <span class="token parameter variable">--cgroupmap</span> CGROUPMAP
                        trace cgroups <span class="token keyword">in</span> this BPF map only

examples:
    ./tcpaccept           <span class="token comment"># trace all TCP accept()s</span>
    ./tcpaccept <span class="token parameter variable">-t</span>        <span class="token comment"># include timestamps</span>
    ./tcpaccept <span class="token parameter variable">-P</span> <span class="token number">80,81</span>  <span class="token comment"># only trace port 80 and 81</span>
    ./tcpaccept <span class="token parameter variable">-p</span> <span class="token number">181</span>    <span class="token comment"># only trace PID 181</span>
    ./tcpaccept <span class="token parameter variable">--cgroupmap</span> mappath  <span class="token comment"># only trace cgroups in this BPF map</span>
    ./tcpaccept <span class="token parameter variable">--mntnsmap</span> mappath   <span class="token comment"># only trace mount namespaces in the map</span>
    ./tcpaccept <span class="token parameter variable">-4</span>        <span class="token comment"># trace IPv4 family only</span>
    ./tcpaccept <span class="token parameter variable">-6</span>        <span class="token comment"># trace IPv6 family only</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcptop" tabindex="-1"><a class="header-anchor" href="#tcptop"><span>tcptop</span></a></h3><p>​</p>`,80)]))}const i=s(p,[["render",l],["__file","09.2. 用例实践.html.vue"]]),r=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/09.2.%20%E7%94%A8%E4%BE%8B%E5%AE%9E%E8%B7%B5.html","title":"BCC","lang":"zh-CN","frontmatter":{"description":"BCC 目录 用例实践 网络项 tunnel_monitor 坑1，chord-transitions 仓库丢失 https://github.com/iovisor/bcc/tree/master/examples/networking/tunnel_monitor 这个好像没办法用，setup.sh 里的clone仓库发现是不存在的。后来发现需要修...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/BCC%20(eBPF)/09.2.%20%E7%94%A8%E4%BE%8B%E5%AE%9E%E8%B7%B5.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"BCC"}],["meta",{"property":"og:description","content":"BCC 目录 用例实践 网络项 tunnel_monitor 坑1，chord-transitions 仓库丢失 https://github.com/iovisor/bcc/tree/master/examples/networking/tunnel_monitor 这个好像没办法用，setup.sh 里的clone仓库发现是不存在的。后来发现需要修..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BCC\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"BCC","slug":"bcc","link":"#bcc","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"用例实践","slug":"用例实践","link":"#用例实践","children":[{"level":2,"title":"网络项","slug":"网络项","link":"#网络项","children":[{"level":3,"title":"tunnel_monitor","slug":"tunnel-monitor","link":"#tunnel-monitor","children":[{"level":4,"title":"坑1，chord-transitions 仓库丢失","slug":"坑1-chord-transitions-仓库丢失","link":"#坑1-chord-transitions-仓库丢失","children":[]},{"level":4,"title":"坑1.2，bower.json 丢失","slug":"坑1-2-bower-json-丢失","link":"#坑1-2-bower-json-丢失","children":[]},{"level":4,"title":"坑1.3，setup卡住","slug":"坑1-3-setup卡住","link":"#坑1-3-setup卡住","children":[]},{"level":4,"title":"坑1.4，'insert' of undefined","slug":"坑1-4-insert-of-undefined","link":"#坑1-4-insert-of-undefined","children":[]},{"level":4,"title":"坑2，pyroute2库存在问题","slug":"坑2-pyroute2库存在问题","link":"#坑2-pyroute2库存在问题","children":[]},{"level":4,"title":"坑3，无效语法，找不到simulation.py","slug":"坑3-无效语法-找不到simulation-py","link":"#坑3-无效语法-找不到simulation-py","children":[]}]}]},{"level":2,"title":"其他项","slug":"其他项","link":"#其他项","children":[{"level":3,"title":"undump","slug":"undump","link":"#undump","children":[{"level":4,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":4,"title":"代码","slug":"代码","link":"#代码","children":[]}]}]},{"level":2,"title":"tcp专项","slug":"tcp专项","link":"#tcp专项","children":[{"level":3,"title":"tcpdump","slug":"tcpdump","link":"#tcpdump","children":[]},{"level":3,"title":"tclcalls","slug":"tclcalls","link":"#tclcalls","children":[]},{"level":3,"title":"tclflow","slug":"tclflow","link":"#tclflow","children":[]},{"level":3,"title":"tclobjnew","slug":"tclobjnew","link":"#tclobjnew","children":[]},{"level":3,"title":"tclstat","slug":"tclstat","link":"#tclstat","children":[]},{"level":3,"title":"tcpaccept","slug":"tcpaccept","link":"#tcpaccept","children":[]},{"level":3,"title":"tcptop","slug":"tcptop","link":"#tcptop","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.79,"words":2636},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/BCC (eBPF)/09.2. 用例实践.md","excerpt":"\\n<h1>目录</h1>\\n<h1>用例实践</h1>\\n<h2>网络项</h2>\\n<h3>tunnel_monitor</h3>\\n<h4>坑1，chord-transitions 仓库丢失</h4>\\n<p>https://github.com/iovisor/bcc/tree/master/examples/networking/tunnel_monitor</p>\\n<p>这个好像没办法用，setup.sh 里的clone仓库发现是不存在的。后来发现需要修改里面的仓库地址为：https://github.com/sghall/chord-transitions.git</p>\\n<h4>坑1.2，bower.json 丢失</h4>","autoDesc":true}`);export{i as comp,r as data};
