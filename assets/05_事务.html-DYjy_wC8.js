import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as e,e as a}from"./app-CKlzH9Ze.js";const t={},i=a(`<h1 id="redis事务" tabindex="-1"><a class="header-anchor" href="#redis事务"><span>Redis事务</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Redis支持事务 —— 一个请求中执行多个命令</p><h3 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h3><p>通过 MULTI 和 EXEC/DISCARD 来实现。MULTI 开启一个事务，然后命令加如一个队列，然后 EXEC 命令执行全部</p><h3 id="区别-reids-vs-关系型" tabindex="-1"><a class="header-anchor" href="#区别-reids-vs-关系型"><span>区别 (Reids VS 关系型 )</span></a></h3><p>Redis事务和关系型数据库 (Oracle) 是不一样的。</p><ul><li>关系型数据库： <ul><li>(安全) 事务是原子操作。<strong>要么全部执行成功，要么全部执行失败</strong></li></ul></li><li>Redis： <ul><li>(危险) 不能保证命令执行成功。EXEC命令之后命令依次执行，<strong>若有命令失败则其他命令依然会被执行</strong></li><li>(安全) 事务执行过程中，其他客户端的请求不会被插入到事务的命令序列中</li></ul></li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MULTI						<span class="token comment"># 进入事务模式</span>
OK
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> SET k1 v1
QUEUED						<span class="token comment"># 不是OK而是Queued，表示命令被放入到队列里了。# 此时命令未被执行，其他终端无法通过 \`GET k1\` 获取到k1</span>
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> SET k2 v2
QUEUED
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> OK						<span class="token comment"># 执行成功。此时其他终端可以通过 \`GET k1\` 获取到k1</span>
<span class="token number">2</span><span class="token punctuation">)</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中途失败" tabindex="-1"><a class="header-anchor" href="#中途失败"><span>中途失败</span></a></h3><p>感觉这里不是很安全……可能是为了性能考虑的妥协吧</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MULTI
OK
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> INCR k3	<span class="token comment"># k3是3</span>
QUEUED
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> INCR k4	<span class="token comment"># k4是&quot;v4&quot;，字符串类型，待会会失败</span>
QUEUED
<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> INCR k5	<span class="token comment"># k5是5</span>
QUEUED
<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range	<span class="token comment"># 事务中某个命令失败并不影响其他</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),l=[i];function p(o,c){return s(),e("div",null,l)}const u=n(t,[["render",p],["__file","05_事务.html.vue"]]),E=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/03_%E5%85%B6%E4%BB%96/05_%E4%BA%8B%E5%8A%A1.html","title":"Redis事务","lang":"zh-CN","frontmatter":{"description":"Redis事务 概念 Redis支持事务 —— 一个请求中执行多个命令 操作 通过 MULTI 和 EXEC/DISCARD 来实现。MULTI 开启一个事务，然后命令加如一个队列，然后 EXEC 命令执行全部 区别 (Reids VS 关系型 ) Redis事务和关系型数据库 (Oracle) 是不一样的。 关系型数据库： (安全) 事务是原子操作。...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/04.%20%E5%90%8E%E7%AB%AF/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/03_%E5%85%B6%E4%BB%96/05_%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Redis事务"}],["meta",{"property":"og:description","content":"Redis事务 概念 Redis支持事务 —— 一个请求中执行多个命令 操作 通过 MULTI 和 EXEC/DISCARD 来实现。MULTI 开启一个事务，然后命令加如一个队列，然后 EXEC 命令执行全部 区别 (Reids VS 关系型 ) Redis事务和关系型数据库 (Oracle) 是不一样的。 关系型数据库： (安全) 事务是原子操作。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Redis事务","slug":"redis事务","link":"#redis事务","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":3,"title":"区别 (Reids VS 关系型 )","slug":"区别-reids-vs-关系型","link":"#区别-reids-vs-关系型","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"中途失败","slug":"中途失败","link":"#中途失败","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.23,"words":368},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Web/04. 后端/数据库/Redis/03_其他/05_事务.md","excerpt":"\\n<h2>概念</h2>\\n<p>Redis支持事务 —— 一个请求中执行多个命令</p>\\n<h3>操作</h3>\\n<p>通过 MULTI 和 EXEC/DISCARD 来实现。MULTI 开启一个事务，然后命令加如一个队列，然后 EXEC 命令执行全部</p>\\n<h3>区别 (Reids VS 关系型 )</h3>\\n<p>Redis事务和关系型数据库 (Oracle) 是不一样的。</p>\\n<ul>\\n<li>关系型数据库：\\n<ul>\\n<li>(安全) 事务是原子操作。<strong>要么全部执行成功，要么全部执行失败</strong></li>\\n</ul>\\n</li>\\n<li>Redis：\\n<ul>\\n<li>(危险) 不能保证命令执行成功。EXEC命令之后命令依次执行，<strong>若有命令失败则其他命令依然会被执行</strong></li>\\n<li>(安全) 事务执行过程中，其他客户端的请求不会被插入到事务的命令序列中</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,E as data};
