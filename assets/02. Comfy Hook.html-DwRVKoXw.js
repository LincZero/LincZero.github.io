import{_ as s,c as e,e as a,o as n}from"./app-BG6lKC-Y.js";const t={};function l(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<h1 id="comfy-hook-comfy钩子" tabindex="-1"><a class="header-anchor" href="#comfy-hook-comfy钩子"><span>Comfy Hook (Comfy钩子)</span></a></h1><h2 id="extension-hooks" tabindex="-1"><a class="header-anchor" href="#extension-hooks"><span>Extension hooks</span></a></h2><p>在 Comfy 执行期间的不同时刻，应用程序会使用挂钩名称调用 <code>#invokeExtensionsAsync</code> 或 <code>#invokeExtensions</code>。这些在所有注册的扩展上调用适当命名的方法（如果存在），例如上面示例中的 <code>setup </code>。</p><p>Comfy 为自定义扩展代码提供了各种挂钩，用于修改客户端行为</p><div class="callout" data-callout="tip"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-inner">Tip</div></div><div class="callout-content"><p>这些hook在创建和修改 Comfy 客户端元素期间被调用。<br> 工作流执行期间的事件由 <code>apiUpdateHandlers</code> 处理</p></div></div><h3 id="常用钩子" tabindex="-1"><a class="header-anchor" href="#常用钩子"><span>常用钩子</span></a></h3><p>由于 Comfy 正在积极开发中，会不时添加额外的钩子，因此建议在 <code>app.js</code> 中搜索 <code>#invokeExtensions</code> 以查找所有可用的钩子。另请参见调用钩子的 <a href="https://docs.comfy.org/essentials/javascript_hooks#call-sequences" target="_blank" rel="noopener noreferrer">顺序</a>。</p><p>下面描述了一些最重要的钩子。</p><h4 id="beforeregisternodedef-注册节点前" tabindex="-1"><a class="header-anchor" href="#beforeregisternodedef-注册节点前"><span>beforeRegisterNodeDef()，注册节点前</span></a></h4><blockquote><h5 id="重要性" tabindex="-1"><a class="header-anchor" href="#重要性"><span>重要性</span></a></h5></blockquote><p>从 <code>beforeRegisterNodeDef</code> 开始，大多数扩展都使用它，并且通常是唯一需要的。</p><blockquote><h5 id="作用、钩子位置" tabindex="-1"><a class="header-anchor" href="#作用、钩子位置"><span>作用、钩子位置</span></a></h5></blockquote><p>为每种节点类型（AddNode 菜单中可用的节点列表）调用一次，用于修改节点的行为。</p><blockquote><h5 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h5></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beforeRegisterNodeDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nodeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nodeData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重要参数：</p><p><code>nodeType.prototype</code></p><p>在 <code>nodeType</code> 参数中传递的对象本质上充当将创建的该类型的所有节点的模板，因此对 <code>nodeType.prototype</code> 所做的修改将应用于该类型的所有节点。 <code>nodeData</code> 是对 Python 代码中定义的节点的各个方面的封装，例如其类别、输入和输出。<code>app</code> 是对主要 Comfy 应用程序对象的引用（无论如何您已经导入了！）</p><div class="callout" data-callout="tip"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-inner">Tip</div></div><div class="callout-content"><p>在每个注册的扩展上，针对每个节点类型（而不仅仅是该扩展添加的节点类型）调用此方法。</p></div></div><p><code>nodeType.ComfyClass</code></p><p>通常的做法是检查 <code>nodeType.ComfyClass</code>，它保存了与该节点对应的Python类名，看看是否需要修改该节点。通常，这意味着修改您添加的自定义节点，尽管您有时可能需要修改其他节点的行为（或者其他自定义节点可能会修改您的！），在这种情况下，应注意确保互操作性。</p><div class="callout" data-callout="tip"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-flame"><path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"></path></svg></div><div class="callout-title-inner">Tip</div></div><div class="callout-content"><p>由于其他扩展也可能会修改节点，因此应编写尽可能少做假设的代码。并且尽可能隔离您的更改。</p></div></div><blockquote><h5 id="常见用法demo" tabindex="-1"><a class="header-anchor" href="#常见用法demo"><span>常见用法demo</span></a></h5></blockquote><p><code>beforeRegisterNodeDef</code> 中一个非常常见的习惯用法是 “劫持”(hijack) 现有方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beforeRegisterNodeDef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nodeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">nodeData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">nodeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ComfyClass</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;MyNodeClass&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> onConnectionsChange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> nodeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">onConnectionsChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">		nodeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onConnectionsChange</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">side</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">link_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {     </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> r</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> onConnectionsChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// \`?.apply\` 确保如果没有方法仍然安全</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">			console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Someone changed my connection!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">			return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：在这个习惯用法中，现有的原型方法被存储，然后被替换。替换调用原始方法，然后执行其他操作。根据您的代码逻辑，您可能需要将 <code>apply</code> 放置在替换代码中的其他位置，甚至使其成为有条件的调用。</p><p>当以这种方式劫持方法时，您将需要查看核心代码（断点是您的朋友）来检查并符合方法签名。</p><h4 id="nodecreated-节点创建" tabindex="-1"><a class="header-anchor" href="#nodecreated-节点创建"><span>nodeCreated()，节点创建</span></a></h4><blockquote><h5 id="作用、钩子位置-1" tabindex="-1"><a class="header-anchor" href="#作用、钩子位置-1"><span>作用、钩子位置</span></a></h5></blockquote><p>当创建节点的特定实例时调用（就在充当构造函数的 nodeType 上的 ComfyNode() 函数末尾）。在此钩子中，您可以对节点的各个实例进行修改。</p><p>如上所述，适用于所有实例的更改最好添加到 beforeRegisterNodeDef 中的原型中。</p><blockquote><h5 id="原型-1" tabindex="-1"><a class="header-anchor" href="#原型-1"><span>原型</span></a></h5></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nodeCreated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">node</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="init-初始化" tabindex="-1"><a class="header-anchor" href="#init-初始化"><span>init()，初始化</span></a></h4><blockquote><h5 id="原型-2" tabindex="-1"><a class="header-anchor" href="#原型-2"><span>原型</span></a></h5></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><h5 id="作用、钩子位置-2" tabindex="-1"><a class="header-anchor" href="#作用、钩子位置-2"><span>作用、钩子位置</span></a></h5></blockquote><p>当加载（或重新加载）Comfy 网页时调用。该调用是在创建图形对象之后、注册或创建任何节点之前进行的。它可用于通过劫持应用程序或图形（LiteGraph 对象）的方法来修改核心 Comfy 行为。这将在舒适对象中进一步讨论。</p><p>权力越大，责任越大。劫持核心行为使您的节点更有可能与其他自定义节点或未来的 Comfy 更新不兼容</p><h4 id="setup-设置" tabindex="-1"><a class="header-anchor" href="#setup-设置"><span>setup()，设置</span></a></h4><blockquote><h5 id="原型-3" tabindex="-1"><a class="header-anchor" href="#原型-3"><span>原型</span></a></h5></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><h5 id="作用、钩子位置-3" tabindex="-1"><a class="header-anchor" href="#作用、钩子位置-3"><span>作用、钩子位置</span></a></h5></blockquote><p>在启动过程结束时调用。一个添加事件监听器（Comfy 事件或 DOM 事件）或添加到全局菜单的好地方，这两个事件都会在其他地方讨论。</p><p>要在工作流程加载后执行某些操作，请使用 afterConfigureGraph，而不是 setup</p><h3 id="调用序列" tabindex="-1"><a class="header-anchor" href="#调用序列"><span>调用序列</span></a></h3><p>这些序列是通过将日志记录代码插入 Comfy app.js 文件中获得的。您可能会发现类似的代码有助于理解执行流程。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* approx line 220 at time of writing: */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">#</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invokeExtensions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`invokeExtensions      </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">method</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// this line added</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* approx line 250 at time of writing: */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> #</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invokeExtensionsAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`invokeExtensionsAsync </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">method</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// this line added</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="网页加载" tabindex="-1"><a class="header-anchor" href="#网页加载"><span>网页加载</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>invokeExtensionsAsync init</span></span>
<span class="line"><span>invokeExtensionsAsync addCustomNodeDefs</span></span>
<span class="line"><span>invokeExtensionsAsync getCustomWidgets</span></span>
<span class="line"><span>invokeExtensionsAsync beforeRegisterNodeDef    [repeated multiple times]</span></span>
<span class="line"><span>invokeExtensionsAsync registerCustomNodes</span></span>
<span class="line"><span>invokeExtensionsAsync beforeConfigureGraph</span></span>
<span class="line"><span>invokeExtensionsAsync nodeCreated</span></span>
<span class="line"><span>invokeExtensions      loadedGraphNode</span></span>
<span class="line"><span>invokeExtensionsAsync afterConfigureGraph</span></span>
<span class="line"><span>invokeExtensionsAsync setup</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加载工作流程" tabindex="-1"><a class="header-anchor" href="#加载工作流程"><span>加载工作流程</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>invokeExtensionsAsync beforeConfigureGraph</span></span>
<span class="line"><span>invokeExtensionsAsync beforeRegisterNodeDef   [zero, one, or multiple times]</span></span>
<span class="line"><span>invokeExtensionsAsync nodeCreated             [repeated multiple times]</span></span>
<span class="line"><span>invokeExtensions      loadedGraphNode         [repeated multiple times]</span></span>
<span class="line"><span>invokeExtensionsAsync afterConfigureGraph</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加新节点" tabindex="-1"><a class="header-anchor" href="#添加新节点"><span>添加新节点</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>invokeExtensionsAsync nodeCreated</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,54)]))}const d=s(t,[["render",l],["__file","02. Comfy Hook.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/02.%20Comfy%20Hook.html","title":"Comfy Hook (Comfy钩子)","lang":"zh-CN","frontmatter":{"description":"Comfy Hook (Comfy钩子) Extension hooks 在 Comfy 执行期间的不同时刻，应用程序会使用挂钩名称调用 #invokeExtensionsAsync 或 #invokeExtensions。这些在所有注册的扩展上调用适当命名的方法（如果存在），例如上面示例中的 setup 。 Comfy 为自定义扩展代码提供了各种挂钩...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Plugin_ComfyUI/03.%20%E5%AE%A2%E6%88%B7%E7%AB%AF%20(Javascript)/02.%20Comfy%20Hook.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Comfy Hook (Comfy钩子)"}],["meta",{"property":"og:description","content":"Comfy Hook (Comfy钩子) Extension hooks 在 Comfy 执行期间的不同时刻，应用程序会使用挂钩名称调用 #invokeExtensionsAsync 或 #invokeExtensions。这些在所有注册的扩展上调用适当命名的方法（如果存在），例如上面示例中的 setup 。 Comfy 为自定义扩展代码提供了各种挂钩..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Comfy Hook (Comfy钩子)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Comfy Hook (Comfy钩子)","slug":"comfy-hook-comfy钩子","link":"#comfy-hook-comfy钩子","children":[{"level":2,"title":"Extension hooks","slug":"extension-hooks","link":"#extension-hooks","children":[{"level":3,"title":"常用钩子","slug":"常用钩子","link":"#常用钩子","children":[{"level":4,"title":"beforeRegisterNodeDef()，注册节点前","slug":"beforeregisternodedef-注册节点前","link":"#beforeregisternodedef-注册节点前","children":[]},{"level":4,"title":"nodeCreated()，节点创建","slug":"nodecreated-节点创建","link":"#nodecreated-节点创建","children":[]},{"level":4,"title":"init()，初始化","slug":"init-初始化","link":"#init-初始化","children":[]},{"level":4,"title":"setup()，设置","slug":"setup-设置","link":"#setup-设置","children":[]}]},{"level":3,"title":"调用序列","slug":"调用序列","link":"#调用序列","children":[{"level":4,"title":"网页加载","slug":"网页加载","link":"#网页加载","children":[]},{"level":4,"title":"加载工作流程","slug":"加载工作流程","link":"#加载工作流程","children":[]},{"level":4,"title":"添加新节点","slug":"添加新节点","link":"#添加新节点","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":4.1,"words":1231},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/02. Comfy Hook.md","excerpt":"\\n<h2>Extension hooks</h2>\\n<p>在 Comfy 执行期间的不同时刻，应用程序会使用挂钩名称调用 <code>#invokeExtensionsAsync</code> 或 <code>#invokeExtensions</code>。这些在所有注册的扩展上调用适当命名的方法（如果存在），例如上面示例中的 <code>setup </code>。</p>\\n<p>Comfy 为自定义扩展代码提供了各种挂钩，用于修改客户端行为</p>\\n\\n<div class=\\"callout\\" data-callout=\\"tip\\">\\n<div class=\\"callout-title\\">\\n<div class=\\"callout-title-icon\\">\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"lucide lucide-flame\\"><path d=\\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\\"></path></svg>\\n</div>\\n<div class=\\"callout-title-inner\\">Tip</div>\\n</div>\\n<div class=\\"callout-content\\"><p>这些hook在创建和修改 Comfy 客户端元素期间被调用。<br>\\n工作流执行期间的事件由 <code>apiUpdateHandlers</code> 处理</p>\\n</div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/02. Comfy Hook.md","value":{"title":"02. Comfy Hook","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Plugin_ComfyUI/03. 客户端 (Javascript)/02. Comfy Hook.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,o as data};
