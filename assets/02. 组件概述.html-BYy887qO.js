import{_ as i,c as l,e as t,o as a}from"./app-CAfWfcmi.js";const n="/assets/cilium-arch-BQMdj1k8.png",r={};function o(s,e){return a(),l("div",null,e[0]||(e[0]=[t('<h1 id="cilium" tabindex="-1"><a class="header-anchor" href="#cilium"><span>Cilium</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="组件概述" tabindex="-1"><a class="header-anchor" href="#组件概述"><span>组件概述</span></a></h1><img src="'+n+'" alt="../../_images/cilium-arch.png" style="zoom:50%;"><p>Cilium 和 Hubble 的部署由在集群中运行的以下组件组成：</p><h2 id="cilium-1" tabindex="-1"><a class="header-anchor" href="#cilium-1"><span>Cilium</span></a></h2><h3 id="agent-代理人" tabindex="-1"><a class="header-anchor" href="#agent-代理人"><span>Agent 代理人</span></a></h3><p>Cilium 代理 ( <code>cilium-agent</code> ) 在集群中的每个节点上运行。在较高级别上，代理通过 Kubernetes 或 API 接受配置，这些配置描述了网络、服务负载平衡、网络策略以及可见性和监控要求。</p><p>Cilium 代理侦听来自 Kubernetes 等编排系统的事件，以了解容器或工作负载何时启动和停止。它管理 Linux 内核用来控制这些容器进出的所有网络访问的 eBPF 程序。</p><h3 id="client-cli-客户端-命令行" tabindex="-1"><a class="header-anchor" href="#client-cli-客户端-命令行"><span>Client (CLI) 客户端（命令行）</span></a></h3><p>Cilium CLI 客户端 ( <code>cilium</code> ) 是一个与 Cilium 代理一起安装的命令行工具。它与在同一节点上运行的 Cilium 代理的 REST API 进行交互。 CLI 允许检查本地代理的状态和状况。它还提供了直接访问 eBPF 映射以验证其状态的工具。</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>此处描述的代理内 Cilium CLI 客户端不应与 <a href="https://github.com/cilium/cilium-cli" target="_blank" rel="noopener noreferrer">用于在 Kubernetes 集群上快速安装、管理 Cilium 和进行故障排除的命令行工具</a> 相混淆，后者也具有名称 <code>cilium</code> 。该工具通常安装在远离集群的地方，并使用 <code>kubeconfig</code> 信息通过 Kubernetes API 访问在集群上运行的 Cilium。</p></div></div><h3 id="operator" tabindex="-1"><a class="header-anchor" href="#operator"><span>Operator</span></a></h3><p>Cilium Operator 负责管理集群中的职责，逻辑上应该为整个集群处理一次，而不是为集群中的每个节点处理一次。 Cilium 运营商并不处于任何转发或网络策略决策的关键路径中。如果操作员暂时不可用，集群通常会继续运行。但是，根据配置的不同，操作员无法使用可能会导致：</p><ul><li>如果 <a href="https://docs.cilium.io/en/stable/network/concepts/ipam/#address-management" target="_blank" rel="noopener noreferrer">运营商 (IP Address Management, IPAM</a> 需要分配新的 IP 地址，则 IP 地址管理 (IPAM) 会出现延迟，从而导致新工作负载的调度出现延迟</li><li>未能更新 kvstore 心跳密钥将导致代理声明 kvstore 不健康并重新启动。</li></ul><h3 id="cni插件" tabindex="-1"><a class="header-anchor" href="#cni插件"><span>CNI插件</span></a></h3><p>当在节点上调度或终止 pod 时，Kubernetes 会调用 CNI 插件 ( <code>cilium-cni</code> )。它与节点的 Cilium API 交互，触发必要的数据路径配置，为 pod 提供网络、负载平衡和网络策略。</p><h2 id="hubble" tabindex="-1"><a class="header-anchor" href="#hubble"><span>Hubble</span></a></h2><h3 id="服务器" tabindex="-1"><a class="header-anchor" href="#服务器"><span>服务器</span></a></h3><p>Hubble 服务器在每个节点上运行，并从 Cilium 检索基于 eBPF 的可见性。它被嵌入到 Cilium 代理中以实现高性能和低开销。它提供 gRPC 服务来检索流和 Prometheus 指标。</p><h3 id="relay-中继" tabindex="-1"><a class="header-anchor" href="#relay-中继"><span>Relay 中继</span></a></h3><p>Relay ( <code>hubble-relay</code> ) 是一个独立组件，它了解所有正在运行的 Hubble 服务器，并通过连接到各自的 gRPC API 并提供代表集群中所有服务器的 API 来提供集群范围内的可见性。</p><h3 id="client-cli-客户端-命令行-1" tabindex="-1"><a class="header-anchor" href="#client-cli-客户端-命令行-1"><span>Client (CLI) 客户端（命令行）</span></a></h3><p>Hubble CLI ( <code>hubble</code> ) 是一个命令行工具，能够连接到 <code>hubble-relay</code> 的 gRPC API 或本地服务器来检索流事件。</p><h3 id="图形用户界面-gui" tabindex="-1"><a class="header-anchor" href="#图形用户界面-gui"><span>图形用户界面 (GUI)</span></a></h3><p>图形用户界面 ( <code>hubble-ui</code> ) 利用基于中继的可见性来提供图形服务依赖关系和连接图。</p><h2 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h2><p>eBPF 是一个 Linux 内核字节码解释器，最初是为了过滤网络数据包而引入的，例如tcpdump 和套接字过滤器。此后，它已通过附加数据结构（例如哈希表和数组）以及附加操作进行了扩展，以支持数据包修改、转发、封装等。内核内验证器可确保 eBPF 程序安全运行，并且 JIT 编译器可转换字节码CPU 架构特定指令以提高本机执行效率。 eBPF 程序可以在内核中的各个挂钩点运行，例如针对传入和传出数据包。</p><p>Cilium 能够探测 Linux 内核的可用功能，并在检测到更新的功能时自动使用它们。</p><p>有关内核版本的更多详细信息，请参阅：<a href="https://docs.cilium.io/en/stable/operations/system_requirements/#admin-kernel-version" target="_blank" rel="noopener noreferrer">Linux 内核</a></p><h2 id="data-store" tabindex="-1"><a class="header-anchor" href="#data-store"><span>Data Store</span></a></h2><p>Cilium 需要数据存储来在代理之间传播状态。它支持以下数据存储：</p><h3 id="kubernetes-crds-默认" tabindex="-1"><a class="header-anchor" href="#kubernetes-crds-默认"><span>Kubernetes CRDs（默认）</span></a></h3><p>存储任何数据和传播状态的默认选择是使用 Kubernetes 自定义资源定义 (CRD)。 CRD 由 Kubernetes 为集群组件提供，以通过 Kubernetes 资源表示配置和状态。</p><h3 id="key-value-store-键值存储" tabindex="-1"><a class="header-anchor" href="#key-value-store-键值存储"><span>Key-Value Store 键值存储</span></a></h3><p>状态存储和传播的所有要求都可以通过 Cilium 默认配置中配置的 Kubernetes CRD 来满足。可以选择将键值存储用作优化，以提高集群的可扩展性，因为通过直接使用键值存储，更改通知和存储要求会更加高效。</p><p>目前支持的键值存储有：</p><ul><li><a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener noreferrer">etcd 等</a></li></ul><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>可以直接利用 Kubernetes 的 etcd 集群，也可以维护专用的 etcd 集群。</p></div></div>',39)]))}const u=i(r,[["render",o],["__file","02. 组件概述.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/01.%20%E7%AE%80%E4%BB%8B/02.%20%E7%BB%84%E4%BB%B6%E6%A6%82%E8%BF%B0.html","title":"Cilium","lang":"zh-CN","frontmatter":{"description":"Cilium 目录 组件概述 ../../_images/cilium-arch.png Cilium 和 Hubble 的部署由在集群中运行的以下组件组成： Cilium Agent 代理人 Cilium 代理 ( cilium-agent ) 在集群中的每个节点上运行。在较高级别上，代理通过 Kubernetes 或 API 接受配置，这些配置描述...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/01.%20%E7%AE%80%E4%BB%8B/02.%20%E7%BB%84%E4%BB%B6%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Cilium"}],["meta",{"property":"og:description","content":"Cilium 目录 组件概述 ../../_images/cilium-arch.png Cilium 和 Hubble 的部署由在集群中运行的以下组件组成： Cilium Agent 代理人 Cilium 代理 ( cilium-agent ) 在集群中的每个节点上运行。在较高级别上，代理通过 Kubernetes 或 API 接受配置，这些配置描述..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cilium\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Cilium","slug":"cilium","link":"#cilium","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"组件概述","slug":"组件概述","link":"#组件概述","children":[{"level":2,"title":"Cilium","slug":"cilium-1","link":"#cilium-1","children":[{"level":3,"title":"Agent 代理人","slug":"agent-代理人","link":"#agent-代理人","children":[]},{"level":3,"title":"Client (CLI) 客户端（命令行）","slug":"client-cli-客户端-命令行","link":"#client-cli-客户端-命令行","children":[]},{"level":3,"title":"Operator","slug":"operator","link":"#operator","children":[]},{"level":3,"title":"CNI插件","slug":"cni插件","link":"#cni插件","children":[]}]},{"level":2,"title":"Hubble","slug":"hubble","link":"#hubble","children":[{"level":3,"title":"服务器","slug":"服务器","link":"#服务器","children":[]},{"level":3,"title":"Relay 中继","slug":"relay-中继","link":"#relay-中继","children":[]},{"level":3,"title":"Client (CLI) 客户端（命令行）","slug":"client-cli-客户端-命令行-1","link":"#client-cli-客户端-命令行-1","children":[]},{"level":3,"title":"图形用户界面 (GUI)","slug":"图形用户界面-gui","link":"#图形用户界面-gui","children":[]}]},{"level":2,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":2,"title":"Data Store","slug":"data-store","link":"#data-store","children":[{"level":3,"title":"Kubernetes CRDs（默认）","slug":"kubernetes-crds-默认","link":"#kubernetes-crds-默认","children":[]},{"level":3,"title":"Key-Value Store 键值存储","slug":"key-value-store-键值存储","link":"#key-value-store-键值存储","children":[]}]}]}],"git":{},"readingTime":{"minutes":4.07,"words":1220},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/02. 组件概述.md","excerpt":"\\n<h1>目录</h1>\\n<h1>组件概述</h1>\\n\\n<p>Cilium 和 Hubble 的部署由在集群中运行的以下组件组成：</p>\\n<h2>Cilium</h2>\\n<h3>Agent 代理人</h3>\\n<p>Cilium 代理 ( <code>cilium-agent</code> ) 在集群中的每个节点上运行。在较高级别上，代理通过 Kubernetes 或 API 接受配置，这些配置描述了网络、服务负载平衡、网络策略以及可见性和监控要求。</p>\\n<p>Cilium 代理侦听来自 Kubernetes 等编排系统的事件，以了解容器或工作负载何时启动和停止。它管理 Linux 内核用来控制这些容器进出的所有网络访问的 eBPF 程序。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/02. 组件概述.md","value":{"title":"02. 组件概述","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/02. 组件概述.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,d as data};
