import{_ as s,c as a,e as t,o as e}from"./app-Cv0SG700.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h3 id="类型与方法-动态弱类型" tabindex="-1"><a class="header-anchor" href="#类型与方法-动态弱类型"><span>类型与方法 - 动态弱类型</span></a></h3><p>静态变量、弱类型语言</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span>、<span class="token keyword">let</span>、<span class="token keyword">const</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基础对象操作Demo —— 字符串、数组、Json 转换方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// str -&gt; int</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment">// str -&gt; json</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">students</span><span class="token operator">:</span> students<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// json -&gt; str</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token operator">+</span><span class="token string">&quot;&quot;</span>       <span class="token comment">// xx -&gt; str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组方法</p><blockquote><p>注意！<code>push()</code>方法直接修改<code>arrayObject</code>而不是创建一个新数组</p><p><code>push()</code>方法和<code>pop()</code>方法使用数组提供的先进后出栈的功能</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>                        <span class="token comment">// 数组末尾添加，直接入栈，改变原数组并返回长度</span>
<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment">// 末尾删除，直接出栈，改变原数组并返回出栈项</span>
<span class="token function">splice</span><span class="token punctuation">(</span>deleteId<span class="token punctuation">,</span> deleteNum<span class="token punctuation">)</span>       <span class="token comment">// 截取数组，splice(序列下标 [,删多少个])</span>
<span class="token function">splice</span><span class="token punctuation">(</span>deleteId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> addContent<span class="token punctuation">)</span>   <span class="token comment">// 插入元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串方法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>                      <span class="token comment">// 截取字符串，substr(起始序列下标 ,截取几个字符)</span>
<span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 同上           // 截取字符串，substring(起始序列下标 ,结束序列下表-不填则到最末)</span>
<span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>                       <span class="token comment">// 截取字符串</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">slice</span><span class="token template-punctuation string">\`</span></span>与<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">substring</span><span class="token template-punctuation string">\`</span></span>区别：
    str<span class="token operator">=</span><span class="token string">&quot;12345.67&quot;</span>而言
    str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>为<span class="token string">&quot;23&quot;</span>
    str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>为<span class="token string">&quot;12&quot;</span>，总是把较小的数作为起始
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h4 id="支持字面量" tabindex="-1"><a class="header-anchor" href="#支持字面量"><span>支持字面量</span></a></h4></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字面量方法创建数组</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化构造函数方法创建数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const i=s(p,[["render",o],["__file","01. 数据_算法.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/JavaScript/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"description":"类型与方法 - 动态弱类型 静态变量、弱类型语言 基础对象操作Demo —— 字符串、数组、Json 转换方法 数组方法 注意！push()方法直接修改arrayObject而不是创建一个新数组 push()方法和pop()方法使用数组提供的先进后出栈的功能 字符串方法 支持字面量","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/JavaScript/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"类型与方法 - 动态弱类型 静态变量、弱类型语言 基础对象操作Demo —— 字符串、数组、Json 转换方法 数组方法 注意！push()方法直接修改arrayObject而不是创建一个新数组 push()方法和pop()方法使用数组提供的先进后出栈的功能 字符串方法 支持字面量"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":3,"title":"类型与方法 - 动态弱类型","slug":"类型与方法-动态弱类型","link":"#类型与方法-动态弱类型","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.05,"words":314},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/JavaScript/02. 数据+算法/01. 数据+算法.md","excerpt":"<h3>类型与方法 - 动态弱类型</h3>\\n<p>静态变量、弱类型语言</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span>、<span class=\\"token keyword\\">let</span>、<span class=\\"token keyword\\">const</span>\\n</code></pre></div><p>基础对象操作Demo —— 字符串、数组、Json\\n转换方法</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/JavaScript/02. 数据+算法/01. 数据+算法.md","value":{"title":"01. 数据+算法","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/JavaScript/02. 数据+算法/01. 数据+算法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{i as comp,u as data};
