import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as p,b as n,e,d as t,a}from"./app-BAt33Ddg.js";const c={},i=a('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h1><h2 id="语法错误和异常" tabindex="-1"><a class="header-anchor" href="#语法错误和异常"><span>语法错误和异常</span></a></h2><p>Python 中（至少）有两种错误</p><ul><li><code>语法错误</code>（<em>syntax errors</em>） <ul><li>也被称为解析错误，<code>语法分析器</code>指出错误行，并且在检测到错误的位置前面显示一个小“箭头”</li></ul></li><li><code>异常</code>（<em>exceptions</em>） <ul><li>运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误</li></ul></li></ul><h2 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型"><span>异常类型</span></a></h2><p>异常有不同的类型，异常类型做为错误信息的一部分显示出来</p><p>常见的有</p>',9),u={href:"https://docs.python.org/3/library/exceptions.html#ZeroDivisionError",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.python.org/3/library/exceptions.html#NameError",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.python.org/3/library/exceptions.html#TypeError",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"异常处理-try-except-else-raise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异常处理-try-except-else-raise"},[n("span",null,"异常处理（try-except-else & raise）")])],-1),k=n("h3",{id:"try-except-else-使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#try-except-else-使用"},[n("span",null,"try-except-else 使用")])],-1),y=n("li",null,[n("p",null,"使用"),n("ul",null,[n("li",null,[n("code",null,"try-except-else"),e(" & "),n("code",null,"raise")])])],-1),m=n("p",null,"处理流程",-1),f=n("em",null,"try",-1),g={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.python.org/3/reference/compound_stmts.html#except",target:"_blank",rel:"noopener noreferrer"},x=n("em",null,"except",-1),v={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,"如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。",-1),B={href:"https://docs.python.org/3/reference/compound_stmts.html#except",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.python.org/3/reference/compound_stmts.html#except",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[e("如果最终仍找不到对应的处理语句，它就成为一个 "),n("em",null,"未处理异常"),e("，终止程序运行，显示提示信息")],-1),C=n("p",null,"使用补充",-1),M={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,[e("最后一个 except 子句可以"),n("strong",null,"省略异常名称"),e("，以作为通配符使用")],-1),D=n("h3",{id:"else子句-使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#else子句-使用"},[n("span",null,"else子句 使用")])],-1),T=n("li",null,[n("p",null,"作用"),n("ul",null,[n("li",null,[n("p",null,[e("可以带有一个"),n("code",null,"else"),e("子句，该子句只能出现在所有 except 子句之后")])]),n("li",null,[n("p",null,"当 try 语句没有抛出异常时，需要执行一些代码，可以使用这个子句")])])],-1),F=n("p",null,"使用场景",-1),Z={href:"https://docs.python.org/3/reference/compound_stmts.html#else",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},V={href:"https://docs.python.org/3/reference/compound_stmts.html#try",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.python.org/3/reference/compound_stmts.html#except",target:"_blank",rel:"noopener noreferrer"},I=a('<h3 id="finally子句-使用" tabindex="-1"><a class="header-anchor" href="#finally子句-使用"><span>finally子句 使用</span></a></h3><ul><li><p>作用</p><ul><li><p>语句还有另一个可选的子句<code>finally</code>，目的在于定义在任何情况下都一定要执行的功能</p><p>（不管有没有发生异常、不管异常有没有被捕捉到、不管以break/continue/return等任何方式退出）</p></li></ul></li><li><p>处理流程：</p><ul><li>若发生了未被except捕获的异常，则先执行finally子句，然后再重新抛出</li></ul></li><li><p>使用场景</p><ul><li>定义清理行为。比如用于释放外部资源，无论它们在使用过程中是否出错</li></ul></li><li><p>使用实例</p><ul><li><code>with open(&quot;...&quot;) as f:</code>的本质就是<code>try-finally</code>，即该语句能确保发生异常时也能顺利关闭文件f</li></ul></li></ul><h3 id="raise-使用" tabindex="-1"><a class="header-anchor" href="#raise-使用"><span>raise 使用</span></a></h3>',3),S=n("p",null,"作用",-1),j={href:"https://docs.python.org/3/reference/simple_stmts.html#raise",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"raise",-1),O={href:"https://docs.python.org/3/reference/simple_stmts.html#raise",target:"_blank",rel:"noopener noreferrer"},R={href:"https://docs.python.org/3/library/exceptions.html#Exception",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"用户自定义异常",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#用户自定义异常"},[n("span",null,"用户自定义异常")])],-1),H={href:"https://docs.python.org/3/library/exceptions.html#Exception",target:"_blank",rel:"noopener noreferrer"},K=a(`<p>例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">except</span> MyError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My exception occurred, value:&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
My exception occurred<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token string">&#39;oops!&#39;</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> ?
__main__<span class="token punctuation">.</span>MyError<span class="token punctuation">:</span> <span class="token string">&#39;oops!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Q(U,W){const s=o("ExternalLinkIcon");return r(),p("div",null,[i,n("ul",null,[n("li",null,[e("零除错误（ "),n("a",u,[e("ZeroDivisionError"),t(s)]),e(" ）")]),n("li",null,[e("命名错误（ "),n("a",h,[e("NameError"),t(s)]),e("）")]),n("li",null,[e("类型错误（ "),n("a",d,[e("TypeError"),t(s)]),e(" ）")])]),_,k,n("ul",null,[y,n("li",null,[m,n("ul",null,[n("li",null,[n("p",null,[e("首先，执行 "),f,e(" 子句 （在 "),n("a",g,[e("try"),t(s)]),e(" 和 "),n("a",b,[e("except"),t(s)]),e(" 关键字之间的部分）。")])]),n("li",null,[n("p",null,[e("如果没有异常发生， "),x,e(" 子句 在 "),n("a",v,[e("try"),t(s)]),e(" 语句执行完毕后就被忽略了。")])]),n("li",null,[E,n("p",null,[e("如果异常匹配于 "),n("a",B,[e("except"),t(s)]),e(" 关键字后面指定的异常类型，就执行对应的except子句。然后继续执行 "),n("a",P,[e("try"),t(s)]),e(" 语句之后的代码。")])]),n("li",null,[n("p",null,[e("如果发生了一个异常，在 "),n("a",w,[e("except"),t(s)]),e(" 子句中没有与之匹配的分支，它就会传递到上一级 "),n("a",A,[e("try"),t(s)]),e(" 语句中。")]),N])])]),n("li",null,[C,n("ul",null,[n("li",null,[e("一个 "),n("a",M,[e("try"),t(s)]),e(" 语句可能包含多个 except 子句，分别指定处理不同的异常。至多只会有一个分支被执行")]),L])])]),D,n("ul",null,[T,n("li",null,[F,n("ul",null,[n("li",null,[e("使用 "),n("a",Z,[e("else"),t(s)]),e(" 子句比在 "),n("a",q,[e("try"),t(s)]),e(" 子句中附加代码要好，因为这样可以避免 "),n("a",V,[e("try"),t(s)]),e(" … "),n("a",z,[e("except"),t(s)]),e(" 意外的截获本来不属于它们保护的那些代码抛出的异常")])])])]),I,n("ul",null,[n("li",null,[S,n("ul",null,[n("li",null,[n("p",null,[n("a",j,[J,t(s)]),e("语句允许程序员强制抛出一个指定的异常")])]),n("li",null,[n("p",null,[e("要抛出的异常由 "),n("a",O,[e("raise"),t(s)]),e(" 的唯一参数标识。它必需是一个异常实例或异常类（继承自 "),n("a",R,[e("Exception"),t(s)]),e(" 的类）")])])])])]),G,n("p",null,[e("异常类通常应该直接或间接的从 "),n("a",H,[e("Exception"),t(s)]),e(" 类派生")]),K])}const $=l(c,[["render",Q],["__file","02. 异常.html.vue"]]),nn=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/02.%20%E5%BC%82%E5%B8%B8.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 异常 语法错误和异常 Python 中（至少）有两种错误 语法错误（syntax errors） 也被称为解析错误，语法分析器指出错误行，并且在检测到错误的位置前面显示一个小“箭头” 异常（exceptions） 运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误 异常类型 异常有不同的类型，异...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/02.%20%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 异常 语法错误和异常 Python 中（至少）有两种错误 语法错误（syntax errors） 也被称为解析错误，语法分析器指出错误行，并且在检测到错误的位置前面显示一个小“箭头” 异常（exceptions） 运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误 异常类型 异常有不同的类型，异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"异常","slug":"异常","link":"#异常","children":[{"level":2,"title":"语法错误和异常","slug":"语法错误和异常","link":"#语法错误和异常","children":[]},{"level":2,"title":"异常类型","slug":"异常类型","link":"#异常类型","children":[]},{"level":2,"title":"异常处理（try-except-else & raise）","slug":"异常处理-try-except-else-raise","link":"#异常处理-try-except-else-raise","children":[{"level":3,"title":"try-except-else 使用","slug":"try-except-else-使用","link":"#try-except-else-使用","children":[]},{"level":3,"title":"else子句 使用","slug":"else子句-使用","link":"#else子句-使用","children":[]},{"level":3,"title":"finally子句 使用","slug":"finally子句-使用","link":"#finally子句-使用","children":[]},{"level":3,"title":"raise 使用","slug":"raise-使用","link":"#raise-使用","children":[]}]},{"level":2,"title":"用户自定义异常","slug":"用户自定义异常","link":"#用户自定义异常","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.09,"words":927},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/04. 优化/02. 异常.md","autoDesc":true}');export{$ as comp,nn as data};
