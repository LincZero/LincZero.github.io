import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as i,a as s,b as n,d as p,e as a}from"./app-wsUEcXLu.js";const o={},u=a('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="try-the-lab" tabindex="-1"><a class="header-anchor" href="#try-the-lab"><span>Try the Lab</span></a></h1>',3),r={href:"https://play.instruqt.com/embed/isovalent/tracks/ebpf-getting-started",target:"_blank",rel:"noopener noreferrer"},d=a('<h2 id="先导" tabindex="-1"><a class="header-anchor" href="#先导"><span>先导</span></a></h2><p>这个在线实验台在开始时会有些提示，这是因为这里要准备虚拟环境需要耗费比较多的时间（1min），给点东西给你看防止你那么闷。 但其实内容都是在官网中 “What is eBPF” 提到过了，没什么意义。</p><p>我会把这部分内容在 What is eBPF 笔记中重复一次，此处不再赘述</p><p>然后整个Lab实验一共有4个环节：</p><ol><li>构建并运行 opensnoop</li><li>检查BPF对象文件</li><li>使用bpftool查看加载到内核中的BPF程序</li><li>添加您自己的跟踪消息</li><li>eBPF入门测验</li></ol><h2 id="构建并运行-opensnoop" tabindex="-1"><a class="header-anchor" href="#构建并运行-opensnoop"><span>构建并运行 opensnoop</span></a></h2><h3 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍"><span>项目介绍</span></a></h3><p>在左侧，您将看到一个选项卡 &gt;_ 1️⃣ 终端 1。当前工作目录 ( <code>/opt/ebpf/bcc/libbpf-tools</code> ) 包含 BCC 项目中<strong>许多可观察性工具的源代码</strong>。</p>',8),b={href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Makefile            cachestat.bpf.c     fsdist.c              mountsnoop.c           slabratetop.h         tcptop.bpf.c
Makefile.btfgen     cachestat.c         fsdist.h              mountsnoop.h           softirqs.bpf.c        tcptop.c
README.md           capable.bpf.c       fsslower.bpf.c        numamove.bpf.c         softirqs.c            tcptop.h
arm64               capable.c           fsslower.c            numamove.c             softirqs.h            tcptracer.bpf.c
bashreadline.bpf.c  capable.h           fsslower.h            offcputime.bpf.c       solisten.bpf.c        tcptracer.c
bashreadline.c      compat.bpf.h        funclatency.bpf.c     offcputime.c           solisten.c            tcptracer.h
bashreadline.h      compat.c            funclatency.c         offcputime.h           solisten.h            trace_helpers.c
bindsnoop.bpf.c     compat.h            funclatency.h         oomkill.bpf.c          stat.h                trace_helpers.h
bindsnoop.c         core_fixes.bpf.h    gethostlatency.bpf.c  oomkill.c              statsnoop.bpf.c       uprobe_helpers.c
bindsnoop.h         cpudist.bpf.c       gethostlatency.c      oomkill.h              statsnoop.c           uprobe_helpers.h
biolatency.bpf.c    cpudist.c           gethostlatency.h      opensnoop.bpf.c        statsnoop.h           vfsstat.bpf.c
biolatency.c        cpudist.h           hardirqs.bpf.c        opensnoop.c            syscall_helpers.c     vfsstat.c
biolatency.h        cpufreq.bpf.c       hardirqs.c            opensnoop.h            syscall_helpers.h     vfsstat.h
biopattern.bpf.c    cpufreq.c           hardirqs.h            powerpc                syscount.bpf.c        wakeuptime.bpf.c
biopattern.c        cpufreq.h           javagc.bpf.c          readahead.bpf.c        syscount.c            wakeuptime.c
biopattern.h        drsnoop.bpf.c       javagc.c              readahead.c            syscount.h            wakeuptime.h
biosnoop.bpf.c      drsnoop.c           javagc.h              readahead.h            tcpconnect.bpf.c      x86
biosnoop.c          drsnoop.h           kernel.config         riscv                  tcpconnect.c   
biosnoop.h          drsnoop_example.txt klockstat.bpf.c       runqlat.bpf.c          tcpconnect.h   
biostacks.bpf.c     errno_helpers.c     klockstat.c           runqlat.c              tcpconnlat.bpf.c
biostacks.c         errno_helpers.h     klockstat.h           runqlat.h              tcpconnlat.c   
biostacks.h         execsnoop.bpf.c     ksnoop.bpf.c          runqlen.bpf.c          tcpconnlat.h   
biotop.bpf.c        execsnoop.c         ksnoop.c              runqlen.c              tcplife.bpf.c  
biotop.c            execsnoop.h         ksnoop.h              runqlen.h              tcplife.c      
biotop.h            exitsnoop.bpf.c     llcstat.bpf.c         runqslower.bpf.c       tcplife.h      
bitesize.bpf.c      exitsnoop.c         llcstat.c             runqslower.c           tcprtt.bpf.c   
bitesize.c          exitsnoop.h         llcstat.h             runqslower.h           tcprtt.c       
bitesize.h          filelife.bpf.c      map_helpers.c         runqslower_example.txt tcprtt.h       
bits.bpf.h          filelife.c          map_helpers.h         sigsnoop.bpf.c         tcpstates.bpf.c
blazesym            filelife.h          maps.bpf.h            sigsnoop.c             tcpstates.c    
blk_types.h         filetop.bpf.c       mdflush.bpf.c         sigsnoop.h             tcpstates.h    
bpftool             filetop.c           mdflush.c             sigsnoop_example.txt   tcpsynbl.bpf.c 
btf_helpers.c       filetop.h           mdflush.h             slabratetop.bpf.c      tcpsynbl.c     
btf_helpers.h       fsdist.bpf.c        mountsnoop.bpf.c      slabratetop.c          tcpsynbl.h     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于其简单性，我们将在本示例中只使用其中的 <code>opensnoop</code> 。 <code>opensnoop</code> 可以跟踪系统范围内的 <code>open()</code> 系统调用，并打印各种详细信息。因此，它是展示简单 eBPF 用例的优秀第一个程序。</p><h3 id="程序组成" tabindex="-1"><a class="header-anchor" href="#程序组成"><span>程序组成</span></a></h3><p>eBPF 应用程序通常由至少两部分组成：</p><ul><li>一个用户空间程序（USP），它声明内核空间程序并将其附加到相关的跟踪点/探针。</li><li>一旦满足跟踪点/探针，内核空间程序（KSP）就会被触发并在内核内部运行。这是实际的 eBPF 逻辑实现的地方。</li></ul>`,5),v={href:"https://docs.kernel.org/bpf/maps.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><p>让我们构建可执行文件，这大约需要 15 秒，然后会生成一个opensnoop可执行文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> opensnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h3><p>要实际运行已编译的 <code>opensnoop</code> 二进制文件，需要 <code>CAP_BPF</code> Linux 功能。这是强制性的，因为我们的逻辑使用特权 BPF 操作（例如，将 eBPF 代码加载到内核中），同时许多 Linux 发行版不允许非特权 eBPF。 <code>CAP_BPF</code> 自 Linux 内核 5.8 起可用，允许加载所有类型的 BPF 程序、创建大多数地图类型、加载 BTF、迭代程序和地图。引入它是为了将 BPF 功能与重载的 <code>CAP_SYS_ADMIN</code> 功能分开。</p><p>然而，由于在这个演示环境中我们无论如何都是以 root 身份运行的，所以这不是问题。运行 <code>opensnoop</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./opensnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用程序" tabindex="-1"><a class="header-anchor" href="#使用程序"><span>使用程序</span></a></h3><p><code>opensnoop</code> 现在将在每次打开文件时显示输出。但由于像我们这样的小型虚拟机中几乎没有发生任何事情，因此我们将生成一些事件。</p><p>顶部左侧，切换到第二个&gt;_2️⃣Terminal 2选项卡，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/os-release

<span class="token comment"># 输出：</span>
<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">&quot;Ubuntu 22.04.2 LTS&quot;</span>
<span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">&quot;Ubuntu&quot;</span>
<span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">&quot;22.04&quot;</span>
<span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">&quot;22.04.2 LTS (Jammy Jellyfish)&quot;</span>
<span class="token assign-left variable">VERSION_CODENAME</span><span class="token operator">=</span>jammy
<span class="token assign-left variable">ID</span><span class="token operator">=</span>ubuntu
<span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span>debian
<span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">&quot;https://www.ubuntu.com/&quot;</span>
<span class="token assign-left variable">SUPPORT_URL</span><span class="token operator">=</span><span class="token string">&quot;https://help.ubuntu.com/&quot;</span>
<span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span>
<span class="token assign-left variable">PRIVACY_POLICY_URL</span><span class="token operator">=</span><span class="token string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span>
<span class="token assign-left variable">UBUNTU_CODENAME</span><span class="token operator">=</span>jammy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切换回第一个&gt;_1️⃣Terminal 1选项卡，查看输出：已经访问了多个文件，直到 <code>cat</code> 最终输出文件内容。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>PID    COMM              FD ERR PATH
2903   cat                3   0 /etc/ld.so.cache
2902   opensnoop         21   0 /etc/localtime
2903   cat                3   0 /lib/x86_64-linux-gnu/libc.so.6
2903   cat                3   0 /usr/lib/locale/locale-archive
2903   cat                3   0 /usr/share/locale/locale.alias
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_IDENTIFICATION
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_IDENTIFICATION
2903   cat                3   0 /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_MEASUREMENT
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_MEASUREMENT
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_TELEPHONE
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_TELEPHONE
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_ADDRESS
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_ADDRESS
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_NAME
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_NAME
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_PAPER
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_PAPER
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_MESSAGES
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_MESSAGES
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_MESSAGES/SYS_LC_MESSAGES
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_MONETARY
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_MONETARY
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_COLLATE
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_COLLATE
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_TIME
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_TIME
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_NUMERIC
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_NUMERIC
2903   cat               -1   2 /usr/lib/locale/C.UTF-8/LC_CTYPE
2903   cat                3   0 /usr/lib/locale/C.utf8/LC_CTYPE
2903   cat                3   0 /etc/os-release
2495   bash               3   0 /root/.bash_history
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您保持 <code>opensnoop</code> 运行，您有时可能会看到虚拟机上运行的其他进程生成的输出，例如 <code>systemd</code> 。</p><p>现在，您可以单击“检查”按钮并转到下一部分，我们将在其中进行更深入的研究。</p><h2 id="检查bpf对象文件" tabindex="-1"><a class="header-anchor" href="#检查bpf对象文件"><span>检查BPF对象文件</span></a></h2><p>笔记者：这部分 readelf 应该在汇编分析里是常规操作了，我不太熟悉，另外找了些资料：</p><ul><li>readelf是一个用于查看二进制可执行文件和共享库的程序。 它可以用来 <strong>查看 ELF</strong>（Executable and Linking Format）文件的信息</li><li>ELF是一种用于Unix类操作系统中可执行文件和共享库的标准文件格式，它是一种自描述、可重定位、可扩展、可升级、跨平台的文件格式。 内容包含了： <ul><li>文件头信息</li><li>程序指令、数据</li><li>程序头表</li><li>节头表</li><li>符号表</li><li>动态节表</li><li>重定向表</li><li>……等各种详细信息</li></ul></li><li>.o文件是目标文件，包含了编译器编译源代码产生的汇编代码和符号表等信息，它通常是被编译器转换成可执行文件或库文件的中间过程。 因此，.o文件<strong>实际上是一种未完成的ELF文件</strong>。 它包含了ELF文件的部分信息，包括文件头、节头表、段数据等，这也是为什么可以使用readelf命令查看.o文件的原因。通过查看.o文件的信息，可以获得编译器将源代码和库文件编译为可执行文件或共享库的一些提示，比如符号表、重定位信息等，对于程序调试和分析非常有用。</li></ul><h3 id="readelf" tabindex="-1"><a class="header-anchor" href="#readelf"><span>readelf</span></a></h3><p>在左侧的 &gt;_ 1️⃣ 终端中，使用 <code>readelf</code> 检查我们之前作为 <code>make</code> 命令的一部分构建的 BPF 对象文件。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>readelf --section-details <span class="token parameter variable">--headers</span> .output/opensnoop.bpf.o

<span class="token comment"># 输出：</span>
ELF Header:
  Magic:   7f <span class="token number">45</span> 4c <span class="token number">46</span> 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              <span class="token number">2</span>&#39;s complement, little endian
  Version:                           <span class="token number">1</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span>
  OS/ABI:                            UNIX - System V
  ABI Version:                       <span class="token number">0</span>
  Type:                              REL <span class="token punctuation">(</span>Relocatable <span class="token function">file</span><span class="token punctuation">)</span>
  Machine:                           Linux BPF
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          <span class="token number">0</span> <span class="token punctuation">(</span>bytes into <span class="token function">file</span><span class="token punctuation">)</span>
  Start of section headers:          <span class="token number">11960</span> <span class="token punctuation">(</span>bytes into <span class="token function">file</span><span class="token punctuation">)</span>
  Flags:                             0x0
  Size of this header:               <span class="token number">64</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
  Size of program headers:           <span class="token number">0</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
  Number of program headers:         <span class="token number">0</span>
  Size of section headers:           <span class="token number">64</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
  Number of section headers:         <span class="token number">20</span>
  Section header string table index: <span class="token number">1</span>

Section Headers:
  <span class="token punctuation">[</span>Nr<span class="token punctuation">]</span> Name
       Type              Address          Offset            Link
       Size              EntSize          Info              Align
       Flags
  <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">]</span> 
       NULL             0000000000000000  0000000000000000  <span class="token number">0</span>
       0000000000000000 0000000000000000  <span class="token number">0</span>                 <span class="token number">0</span>
       <span class="token punctuation">[</span>0000000000000000<span class="token punctuation">]</span>: 
  <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span> .strtab
       STRTAB           0000000000000000  0000000000002c93  <span class="token number">0</span>
       0000000000000224 0000000000000000  <span class="token number">0</span>                 <span class="token number">1</span>
       <span class="token punctuation">[</span>0000000000000000<span class="token punctuation">]</span>: 
  <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">]</span> .text
       PROGBITS         0000000000000000  0000000000000040  <span class="token number">0</span>
       0000000000000000 0000000000000000  <span class="token number">0</span>                 <span class="token number">4</span>
       <span class="token punctuation">[</span>0000000000000006<span class="token punctuation">]</span>: ALLOC, EXEC
  <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">]</span> tracepoint/syscalls/sys_enter_open
       PROGBITS         0000000000000000  0000000000000040  <span class="token number">0</span>
       0000000000000170 0000000000000000  <span class="token number">0</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000006<span class="token punctuation">]</span>: ALLOC, EXEC
  <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">]</span> .reltracepoint/syscalls/sys_enter_open
       REL              0000000000000000  00000000000022d8  <span class="token number">19</span>
       0000000000000040 0000000000000010  <span class="token number">3</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">]</span> tracepoint/syscalls/sys_enter_openat
       PROGBITS         0000000000000000  00000000000001b0  <span class="token number">0</span>
       0000000000000170 0000000000000000  <span class="token number">0</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000006<span class="token punctuation">]</span>: ALLOC, EXEC
  <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">]</span> .reltracepoint/syscalls/sys_enter_openat
       REL              0000000000000000  0000000000002318  <span class="token number">19</span>
       0000000000000040 0000000000000010  <span class="token number">5</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">]</span> tracepoint/syscalls/sys_exit_open
       PROGBITS         0000000000000000  0000000000000320  <span class="token number">0</span>
       0000000000000330 0000000000000000  <span class="token number">0</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000006<span class="token punctuation">]</span>: ALLOC, EXEC
  <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">]</span> .reltracepoint/syscalls/sys_exit_open
       REL              0000000000000000  0000000000002358  <span class="token number">19</span>
       0000000000000040 0000000000000010  <span class="token number">7</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">]</span> tracepoint/syscalls/sys_exit_openat
       PROGBITS         0000000000000000  0000000000000650  <span class="token number">0</span>
       0000000000000330 0000000000000000  <span class="token number">0</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000006<span class="token punctuation">]</span>: ALLOC, EXEC
  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> .reltracepoint/syscalls/sys_exit_openat
       REL              0000000000000000  0000000000002398  <span class="token number">19</span>
       0000000000000040 0000000000000010  <span class="token number">9</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> .rodata
       PROGBITS         0000000000000000  0000000000000980  <span class="token number">0</span>
       000000000000000d 0000000000000000  <span class="token number">0</span>                 <span class="token number">4</span>
       <span class="token punctuation">[</span>0000000000000002<span class="token punctuation">]</span>: ALLOC
  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> .maps
       PROGBITS         0000000000000000  0000000000000990  <span class="token number">0</span>
       0000000000000038 0000000000000000  <span class="token number">0</span>                 <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000003<span class="token punctuation">]</span>: WRITE, ALLOC
  <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> license
       PROGBITS         0000000000000000  00000000000009c8  <span class="token number">0</span>
       0000000000000004 0000000000000000  <span class="token number">0</span>                 <span class="token number">1</span>
       <span class="token punctuation">[</span>0000000000000003<span class="token punctuation">]</span>: WRITE, ALLOC
  <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> .BTF
       PROGBITS         0000000000000000  00000000000009cc  <span class="token number">0</span>
       0000000000000d8e 0000000000000000  <span class="token number">0</span>                 <span class="token number">4</span>
       <span class="token punctuation">[</span>0000000000000000<span class="token punctuation">]</span>: 
  <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> .rel.BTF
       REL              0000000000000000  00000000000023d8  <span class="token number">19</span>
       0000000000000070 0000000000000010  <span class="token number">14</span>                <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> .BTF.ext
       PROGBITS         0000000000000000  000000000000175c  <span class="token number">0</span>
       00000000000008ac 0000000000000000  <span class="token number">0</span>                 <span class="token number">4</span>
       <span class="token punctuation">[</span>0000000000000000<span class="token punctuation">]</span>: 
  <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> .rel.BTF.ext
       REL              0000000000000000  0000000000002448  <span class="token number">19</span>
       0000000000000840 0000000000000010  <span class="token number">16</span>                <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000040<span class="token punctuation">]</span>: INFO LINK
  <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> .llvm_addrsig
       LOOS+0xfff4c03   0000000000000000  0000000000002c88  <span class="token number">0</span>
       000000000000000b 0000000000000000  <span class="token number">0</span>                 <span class="token number">1</span>
       <span class="token punctuation">[</span>0000000080000000<span class="token punctuation">]</span>: EXCLUDE
  <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> .symtab
       SYMTAB           0000000000000000  0000000000002008  <span class="token number">1</span>
       00000000000002d0 0000000000000018  <span class="token number">19</span>                <span class="token number">8</span>
       <span class="token punctuation">[</span>0000000000000000<span class="token punctuation">]</span>: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="elf格式" tabindex="-1"><a class="header-anchor" href="#elf格式"><span>ELF格式</span></a></h3><p>目标文件为 ELF 格式（Executable and Linkable Format，可执行和可链接格式）。 它代表可执行文件、目标代码、共享库和核心转储的通用标准文件格式。它也是 x86 处理器上二进制文件的标准文件格式。</p><h3 id="四个可执行节" tabindex="-1"><a class="header-anchor" href="#四个可执行节"><span>四个可执行节</span></a></h3><p>需要观察一些有趣的事情：</p><ul><li>机器是 <code>Linux BPF</code> 。因此，这个二进制代码应该在 BPF 内核虚拟机内运行。</li><li>该文件中包含 BTF 信息。 BTF 是元数据格式，对与 BPF 程序/映射相关的调试信息进行编码。此调试信息用于地图漂亮打印、函数签名等。</li><li>在表中名为 <code>.text</code> 的节头 (对应[2]那里) 之后，有四个以 <code>tracepoint</code> 开头的可执行节。它们对应于四个 BPF 程序 (对应[3~10, 8条，每个追踪点2条])。</li></ul><p>让我们在 BPF 源代码中找到这四个程序。在第二个选项卡 编辑器中，您可以打开文件 <code>opensnoop.bpf.c</code> - 我们的内核空间程序 (KSP)。 向下滚动找到四个不同的函数，</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// 其名称以 \`int tracepoint__syscalls...\` 开头。您应该在第 50、68、125 和 131 行找到它们</span>

<span class="token comment">/** 程序解释
 * SEC()宏：
 *     对应于 \`readelf\` 列出的可执行部分，定义了代码应附加到的 eBPF [钩子](https://ebpf.io/what-is-ebpf/#hook-overview)
 *     固定格式：SEC(&quot;tracepoint/&lt;category&gt;/&lt;name&gt;
 * 跟踪点：
 *     eBPF 跟踪点 这里设置了4个
 *     每当发出 open()/enpenat() 系统调用时，就会执行相应的eBPF代码函数。
 *     跟踪点是内核代码中的静态标记，可用于在正在运行的内核中附加 (eBPF) 代码。这些跟踪点通常放置在有趣的位置或常见的位置来测量性能。
 * 四个可执行点：
 *     每当发出 open()/enpenat() 系统调用时，就会执行相应的eBPF代码函数。然后解析调用的参数（文件名等）并将此信息写入 BPF 映射。
 *     从 BPF映射 那里，我们编译的 \`opensnoop.c\` 二进制部分 - 我们的用户空间程序 (USP) - 可以读取它并将其打印到 STDOUT
 */</span>

<span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_enter_open&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_enter_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_enter</span><span class="token operator">*</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// 50行</span>

<span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_enter_openat&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_enter_openat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_enter</span><span class="token operator">*</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// 68行</span>
    
<span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_exit_open&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_exit_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_exit</span><span class="token operator">*</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// 125行</span>

<span class="token function">SEC</span><span class="token punctuation">(</span><span class="token string">&quot;tracepoint/syscalls/sys_exit_openat&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">tracepoint__syscalls__sys_exit_openat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">trace_event_raw_sys_exit</span><span class="token operator">*</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token comment">// 131行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3>`,29),f={href:"https://isovalent.com/ebpf/",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>但这如何与 Linux 内核结合在一起呢？单击“下一步”以了解下一部分的内容。</p><h2 id="使用-bpftool-查看加载到内核中的bpf程序" tabindex="-1"><a class="header-anchor" href="#使用-bpftool-查看加载到内核中的bpf程序"><span>使用 <code>bpftool</code> 查看加载到内核中的BPF程序</span></a></h2><p>查看内核中的 BPF 程序：现在我们知道 BPF 代码正在运行，让我们看一下内核方面的事情。为此，我们将使用 <code>bpftool</code> 来查看我们已加载到内核中的内容。</p><p>当前 <code>opensnoop</code> 未运行。让我们看看我们的机器上是否有运行任何 eBPF 程序。我们可以利用 <code>bpftool</code> 来实现这一点。</p><p>bpftool是与 eBPF 一起使用的瑞士军刀。它可以在 GitHub 上找到，或者对于某些 Linux 发行版（例如 Ubuntu 和 Fedora），可以直接在 Linux 内核存储库中找到。</p><h3 id="查看运行的ebpf程序-bpftool-prog-list" tabindex="-1"><a class="header-anchor" href="#查看运行的ebpf程序-bpftool-prog-list"><span>查看运行的eBPF程序 <code>bpftool prog list</code></span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bpftool prog list

<span class="token comment"># 输出</span>
<span class="token number">65</span>: cgroup_device  tag 28a890580b33b0dc  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 560B  jited 352B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">66</span>: cgroup_device  tag c8b47a902f1cc68b  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 464B  jited 289B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">70</span>: cgroup_device  tag e3dbd137be8d6168  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 504B  jited 310B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">71</span>: cgroup_device  tag 0ecd07b7b633809f  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 496B  jited 308B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">72</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">73</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">74</span>: cgroup_device  tag e3dbd137be8d6168  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 504B  jited 310B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">75</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">76</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">80</span>: cgroup_device  tag 8b9c33f36f812014  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 744B  jited 448B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">81</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">82</span>: cgroup_skb  tag 6deef7357e7b4530  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:34:43+0000  uid <span class="token number">0</span>
        xlated 64B  jited 55B  memlock 4096B
        pids systemd<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些解释：</p><ul><li>您应该看到两种条目： <code>cgroup_skb</code> 和 <code>cgroup_device</code> 。两者均由 Systemd 组件 systemd.resource-control 管理，并用于管理 Systemd 单元对网络设备（请参阅示例）和文件系统的访问。</li><li>目前不应有任何 <code>tracepoint</code> 类型的条目</li></ul><p>在第二个终端，我们运行 <code>opensnoop</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./opensnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当它运行时，切换回第一个终端，然后重新运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bpftool prog list

<span class="token comment"># 输出（相较于第一次调用时，多出来了四个追踪点）</span>
<span class="token number">98</span>: tracepoint  name tracepoint__syscalls__sys_enter_open  tag 07014be5359438f8  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:54:41+0000  uid <span class="token number">0</span>
        xlated 240B  jited 137B  memlock 4096B  map_ids <span class="token number">9,6</span>
        btf_id <span class="token number">60</span>
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">100</span>: tracepoint  name tracepoint__syscalls__sys_enter_openat  tag 8ee3432dcd98ffc3  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:54:41+0000  uid <span class="token number">0</span>
        xlated 240B  jited 137B  memlock 4096B  map_ids <span class="token number">9,6</span>
        btf_id <span class="token number">60</span>
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">101</span>: tracepoint  name tracepoint__syscalls__sys_exit_open  tag 37f628f9e857b071  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:54:41+0000  uid <span class="token number">0</span>
        xlated 792B  jited 546B  memlock 4096B  map_ids <span class="token number">6,9</span>,7
        btf_id <span class="token number">60</span>
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">102</span>: tracepoint  name tracepoint__syscalls__sys_exit_openat  tag 37f628f9e857b071  gpl
        loaded_at <span class="token number">2023</span>-07-19T05:54:41+0000  uid <span class="token number">0</span>
        xlated 792B  jited 546B  memlock 4096B  map_ids <span class="token number">6,9</span>,7
        btf_id <span class="token number">60</span>
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您会看到另外加载了四个 BPF 程序！这些对应于前面提到的四个 opensnoop BPF 程序。 请注意，名称被截断，因此您无法真正看到哪个是用于进入或退出的。 但是，它们每个都引用两个或三个地图 ID，例如 <code>map_ids 11,8</code> （数字可能不同）。让我们利用这些信息吧！</p><h3 id="加载到内核中的映射-bpftool-map-list" tabindex="-1"><a class="header-anchor" href="#加载到内核中的映射-bpftool-map-list"><span>加载到内核中的映射 <code>bpftool map list</code></span></a></h3><p>当 opensnoop 仍在第二个 &gt;_2️⃣ 终端 2 中运行时，留在第一个 &gt;_1️⃣ 终端 1 中并观察加载到内核中的映射</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bpftool map list

<span class="token comment"># 输出，输出显示了一些现有的 BPF 映射</span>
<span class="token number">6</span>: <span class="token builtin class-name">hash</span>  name start  flags 0x0
        key 4B  value 16B  max_entries <span class="token number">10240</span>  memlock 245760B
        btf_id <span class="token number">60</span>
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">7</span>: perf_event_array  name events  flags 0x0
        key 4B  value 4B  max_entries <span class="token number">1</span>  memlock 4096B
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">9</span>: array  name opensnoo.rodata  flags 0x480
        key 4B  value 13B  max_entries <span class="token number">1</span>  memlock 4096B
        btf_id <span class="token number">60</span>  frozen
        pids opensnoop<span class="token punctuation">(</span><span class="token number">2941</span><span class="token punctuation">)</span>
<span class="token number">17</span>: array  name pid_iter.rodata  flags 0x480
        key 4B  value 4B  max_entries <span class="token number">1</span>  memlock 4096B
        btf_id <span class="token number">76</span>  frozen
        pids bpftool<span class="token punctuation">(</span><span class="token number">2951</span><span class="token punctuation">)</span>
<span class="token number">18</span>: array  name libbpf_det_bind  flags 0x0
        key 4B  value 32B  max_entries <span class="token number">1</span>  memlock 4096B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些解释：</p><ul><li>观察到有一个名为 <code>start</code> 的哈希表和一个名为 <code>events</code> 的性能事件数组。这些在源代码中的 <code>~/bcc/libbpf-tools/opensnoop.bpf.c</code> 第 13-24 行中定义。在 编辑器中查看一下。</li><li>还有一个用于 opensnoop 只读数据的数组 ( <code>array name opensnoo.rodata</code> )。</li><li>另请注意，每行开头的地图 ID 与之前 <code>bpftool prog list</code> 引用的 ID 相对应。</li></ul><h3 id="观察程序字节码-bpftool-prog-dump-xlated-id-98-linum" tabindex="-1"><a class="header-anchor" href="#观察程序字节码-bpftool-prog-dump-xlated-id-98-linum"><span>观察程序字节码 <code>bpftool prog dump xlated id 98 linum</code></span></a></h3><p>让我们看一下其中一个程序的字节码。为此，让我们再次查看一下 prog 列表。在 &gt;_ 1️⃣ 终端 1 中执行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bpftool prog list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在每行的开头，您可以看到相应 BPF 程序的 ID。获取 <code>tracepoint</code> 程序的 ID，并转储字节码（在我们的运行中，编号为 <code>46</code> ，您的编号可能不同）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bpftool prog dump xlated <span class="token function">id</span> <span class="token number">98</span> linum

<span class="token comment"># 输出</span>
int tracepoint__syscalls__sys_enter_open<span class="token punctuation">(</span>struct trace_event_raw_sys_enter * ctx<span class="token punctuation">)</span>:
<span class="token punctuation">;</span> int tracepoint__syscalls__sys_enter_open<span class="token punctuation">(</span>struct trace_event_raw_sys_enter* ctx<span class="token punctuation">)</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:50 line_col:0<span class="token punctuation">]</span>
   <span class="token number">0</span>: <span class="token punctuation">(</span>bf<span class="token punctuation">)</span> r6 <span class="token operator">=</span> r1
<span class="token punctuation">;</span> u64 <span class="token function">id</span> <span class="token operator">=</span> bpf_get_current_pid_tgid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:52 line_col:11<span class="token punctuation">]</span>
   <span class="token number">1</span>: <span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span> call bpf_get_current_pid_tgid<span class="token comment">#186208</span>
<span class="token punctuation">;</span> u32 pid <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:55 line_col:6<span class="token punctuation">]</span>
   <span class="token number">2</span>: <span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span> *<span class="token punctuation">(</span>u32 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r10 -4<span class="token punctuation">)</span> <span class="token operator">=</span> r0
<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targ_tgid <span class="token operator">&amp;&amp;</span> targ_tgid <span class="token operator">!=</span> tgid<span class="token punctuation">)</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:36 line_col:6<span class="token punctuation">]</span>
   <span class="token number">3</span>: <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> map<span class="token punctuation">[</span>id:9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>+4
   <span class="token number">5</span>: <span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span> r2 <span class="token operator">=</span> *<span class="token punctuation">(</span>u32 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r1 +0<span class="token punctuation">)</span>
<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targ_pid <span class="token operator">&amp;&amp;</span> targ_pid <span class="token operator">!=</span> pid<span class="token punctuation">)</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:38 line_col:6<span class="token punctuation">]</span>
   <span class="token number">6</span>: <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> map<span class="token punctuation">[</span>id:9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>+0
   <span class="token number">8</span>: <span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span> r2 <span class="token operator">=</span> *<span class="token punctuation">(</span>u32 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r1 +0<span class="token punctuation">)</span>
<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid_uid<span class="token punctuation">(</span>targ_uid<span class="token punctuation">))</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:40 line_col:16<span class="token punctuation">]</span>
   <span class="token number">9</span>: <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r7 <span class="token operator">=</span> map<span class="token punctuation">[</span>id:9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>+8
  <span class="token number">11</span>: <span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> *<span class="token punctuation">(</span>u32 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r7 +0<span class="token punctuation">)</span>
  <span class="token number">12</span>: <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r2 <span class="token operator">=</span> 0xffffffff
<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targ_uid <span class="token operator">!=</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:42 line_col:7<span class="token punctuation">]</span>
  <span class="token number">14</span>: <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r1 <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">;</span> struct args_t args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:59 line_col:17<span class="token punctuation">]</span>
  <span class="token number">15</span>: <span class="token punctuation">(</span>7b<span class="token punctuation">)</span> *<span class="token punctuation">(</span>u64 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r10 -16<span class="token punctuation">)</span> <span class="token operator">=</span> r1
<span class="token punctuation">;</span> args.fname <span class="token operator">=</span> <span class="token punctuation">(</span>const char *<span class="token punctuation">)</span>ctx-<span class="token operator">&gt;</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:60 line_col:30<span class="token punctuation">]</span>
  <span class="token number">16</span>: <span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> *<span class="token punctuation">(</span>u64 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r6 +16<span class="token punctuation">)</span>
<span class="token punctuation">;</span> args.fname <span class="token operator">=</span> <span class="token punctuation">(</span>const char *<span class="token punctuation">)</span>ctx-<span class="token operator">&gt;</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:60 line_col:14<span class="token punctuation">]</span>
  <span class="token number">17</span>: <span class="token punctuation">(</span>7b<span class="token punctuation">)</span> *<span class="token punctuation">(</span>u64 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r10 -24<span class="token punctuation">)</span> <span class="token operator">=</span> r1
<span class="token punctuation">;</span> args.flags <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span>ctx-<span class="token operator">&gt;</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:61 line_col:21<span class="token punctuation">]</span>
  <span class="token number">18</span>: <span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> *<span class="token punctuation">(</span>u64 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r6 +24<span class="token punctuation">)</span>
<span class="token punctuation">;</span> args.flags <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span>ctx-<span class="token operator">&gt;</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:61 line_col:14<span class="token punctuation">]</span>
  <span class="token number">19</span>: <span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span> *<span class="token punctuation">(</span>u32 *<span class="token punctuation">)</span><span class="token punctuation">(</span>r10 -16<span class="token punctuation">)</span> <span class="token operator">=</span> r1
  <span class="token number">20</span>: <span class="token punctuation">(</span>bf<span class="token punctuation">)</span> r2 <span class="token operator">=</span> r10
<span class="token punctuation">;</span> struct args_t args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:59 line_col:17<span class="token punctuation">]</span>
  <span class="token number">21</span>: <span class="token punctuation">(</span>07<span class="token punctuation">)</span> r2 <span class="token operator">+=</span> <span class="token parameter variable">-4</span>
  <span class="token number">22</span>: <span class="token punctuation">(</span>bf<span class="token punctuation">)</span> r3 <span class="token operator">=</span> r10
  <span class="token number">23</span>: <span class="token punctuation">(</span>07<span class="token punctuation">)</span> r3 <span class="token operator">+=</span> <span class="token parameter variable">-24</span>
<span class="token punctuation">;</span> bpf_map_update_elem<span class="token punctuation">(</span><span class="token operator">&amp;</span>start, <span class="token operator">&amp;</span>pid, <span class="token operator">&amp;</span>args, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:62 line_col:3<span class="token punctuation">]</span>
  <span class="token number">24</span>: <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> map<span class="token punctuation">[</span>id:6<span class="token punctuation">]</span>
  <span class="token number">26</span>: <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r4 <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token number">27</span>: <span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span> call htab_map_update_elem<span class="token comment">#220464</span>
<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>file:/opt/ebpf/bcc/libbpf-tools/opensnoop.bpf.c line_num:64 line_col:2<span class="token punctuation">]</span>
  <span class="token number">28</span>: <span class="token punctuation">(</span>b7<span class="token punctuation">)</span> r0 <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token number">29</span>: <span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，这显示了有关源代码的信息。切换到 编辑器选项卡并打开文件 <code>opensnoop.bpf.c</code> 。将 &gt;_1️⃣ 终端 1 中输出的行号与源代码文件中的行号进行比较，看看它们是否匹配。这使得比较 BPF 编译对象和它背后的源代码变得相当容易！</p><p>（与原代码相比，这里有一些区别）</p><p>能够编写自己的 BPF 代码不是很棒吗？单击下一步并执行此操作！</p><h2 id="添加您自己的跟踪消息" tabindex="-1"><a class="header-anchor" href="#添加您自己的跟踪消息"><span>添加您自己的跟踪消息</span></a></h2><p>编写我们自己的代码：现在我们知道如何运行 eBPF 工具，如何观察它们的行为，检查内核中加载的内容，甚至获取与实际源代码相比实际发生的情况的信息。接下来，我们要编写实际的代码！为此，我们将把我们自己的跟踪消息添加到代码中！</p><h3 id="两种调试打印方法" tabindex="-1"><a class="header-anchor" href="#两种调试打印方法"><span>两种调试打印方法</span></a></h3><p>eBPF 程序可以出于调试目的编写跟踪消息。对于通常通过 <code>trace_pipe</code> 完成的快速示例，可以从 <code>/sys/kernel/debug/tracing/trace_pipe</code> 读取。 但是，它有一些限制：最大 3 个参数，trace_pipe 是全局共享的（因此并发程序将产生冲突的输出），等等。 因此，您不应该将其用于高效的 eBPF 代码。您应该通过 <code>BPF_PERF_OUTPUT()</code> 界面来完成此操作。 尽管如此，为了简单起见，我们在本实验中通过 <code>trace_pipe</code> 进行操作，并将我们自己的消息添加到 <code>opensnoop</code> 中。</p><h3 id="修改程序并重新运行" tabindex="-1"><a class="header-anchor" href="#修改程序并重新运行"><span>修改程序并重新运行</span></a></h3><p>在 编辑器选项卡的文件列表左侧，向下滚动并选择文件 <code>opensnoop.bpf.c</code> 。找到 <code>cleanup:</code> 标签，它应该位于第 119 行左右。在其中，在其上方添加以下行 <code>bpf_printk(&quot;Hello world&quot;);</code>，修改后文件应如下所示：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>   <span class="token comment">/* emit event */</span>
   <span class="token function">bpf_perf_event_output</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>events<span class="token punctuation">,</span> BPF_F_CURRENT_CPU<span class="token punctuation">,</span>
                 <span class="token operator">&amp;</span>event<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">bpf_printk</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加这一行，其他不动</span>
cleanup<span class="token operator">:</span> <span class="token comment">// 原来处于第119行</span>
   <span class="token function">bpf_map_delete_elem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单击 编辑器窗口顶部选项卡中的 💾 保存文件。</p><p>在 &gt;_ 1️⃣ Terminal 1 选项卡中，重建现在更改的 <code>opensnoop</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> opensnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，在执行新构建之前，开始读取第二个&gt;_2️⃣终端 2 中的内核跟踪输出文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /sys/kernel/debug/tracing/trace_pipe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开始时不会显示任何输出 - 它正在等待数据</p><p>现在，在第一个&gt;_1️⃣终端1中，运行 <code>opensnoop</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./opensnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们只需要生成文件访问权限。在 编辑器中，单击任意文件。在编辑器中加载文件会生成很多事件。 切换到 &gt;_ 1️⃣ 运行 <code>opensnoop</code> 的终端 1，观察有大量文件访问。 转到第二个 &gt;_ 2️⃣ 终端 2，我们的 <code>cat</code> 进程仍在运行，并观察到打印了很多跟踪消息！</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>   sandbox-agent-1778    <span class="token punctuation">[</span>000<span class="token punctuation">]</span> d<span class="token punctuation">..</span>.1  <span class="token number">2066.381919</span>: bpf_trace_printk: Hello world
   sandbox-agent-1778    <span class="token punctuation">[</span>000<span class="token punctuation">]</span> d<span class="token punctuation">..</span>.1  <span class="token number">2066.381932</span>: bpf_trace_printk: Hello world
   sandbox-agent-1778    <span class="token punctuation">[</span>000<span class="token punctuation">]</span> d<span class="token punctuation">..</span>.1  <span class="token number">2066.381951</span>: bpf_trace_printk: Hello world
   sandbox-agent-1778    <span class="token punctuation">[</span>000<span class="token punctuation">]</span> d<span class="token punctuation">..</span>.1  <span class="token number">2066.381970</span>: bpf_trace_printk: Hello world
   sandbox-agent-1778    <span class="token punctuation">[</span>000<span class="token punctuation">]</span> d<span class="token punctuation">..</span>.1  <span class="token number">2066.381989</span>: bpf_trace_printk: Hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h3><p>恭喜，您已经编写了一些 eBPF 代码并在内核中运行它！</p><p>请注意，除了显示您定义的字符串外，跟踪行还包括其他有用的上下文信息 - 例如，可执行文件的名称和触发运行程序的事件的进程 ID - 在本例中为 <code>sandbox-agent</code> 运行。</p><p>这说明了 eBPF 程序如何收集有关触发它的事件的有用信息 - 例如，可以出于可观察性目的将其报告给用户空间。</p><h2 id="ebpf入门测验" tabindex="-1"><a class="header-anchor" href="#ebpf入门测验"><span>eBPF入门测验</span></a></h2><p>（蒙了几次才蒙对了）</p><ul><li>❌ eBPF 程序始终需要 Linux 功能“CAP_BPF” 和 “CAP_SYS_ADMIN”</li><li>✅ ELF 代表 x86 架构上可执行文件的通用标准文件格式</li><li>✅ eBPF 程序使用 BPF 映射与用户空间应用程序交换数据</li><li>❌ “BPF_PERF_OUTPUT()” 接口可用于通过向用户空间提供消息来对内核空间程序进行故障排除。</li><li>✅ 每当用户空间程序尝试与内核空间程序交换数据时，它们都需要使用 eBPF 映射</li></ul>`,51);function _(g,B){const e=l("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[s("a",r,[n("官网在线虚拟机"),p(e)])]),d,s("p",null,[n("这个工作目录是开源的，是 "),s("a",b,[n("iovisor/bcc"),p(e)]),n(" 项目。")]),m,s("p",null,[n("由于这两个程序无法直接相互通信（根据设计），因此它们需要一个缓冲区来交换数据。对于 eBPF，它是通过 "),s("a",v,[n("不同类型的 BPF 映射"),p(e)]),n(" 实现的。")]),k,s("p",null,[n("如果您想了解有关这四个 BPF 程序正在做什么的更多详细信息，请参阅 Liz Rice 所著的 "),s("a",f,[n("《What is eBPF ?》by Liz Rice"),p(e)]),n(" 一书的第 3 章。")]),h])}const y=t(o,[["render",_],["__file","02. Try the Lab.html.vue"]]),F=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E5%AE%98%E7%BD%91/02.%20Try%20the%20Lab.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 Try the Lab 官网在线虚拟机 先导 这个在线实验台在开始时会有些提示，这是因为这里要准备虚拟环境需要耗费比较多的时间（1min），给点东西给你看防止你那么闷。 但其实内容都是在官网中 “What is eBPF” 提到过了，没什么意义。 我会把这部分内容在 What is eBPF 笔记中重复一次，此处不再赘述 然后整个Lab...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/eBPF/%E5%AE%98%E7%BD%91/02.%20Try%20the%20Lab.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 Try the Lab 官网在线虚拟机 先导 这个在线实验台在开始时会有些提示，这是因为这里要准备虚拟环境需要耗费比较多的时间（1min），给点东西给你看防止你那么闷。 但其实内容都是在官网中 “What is eBPF” 提到过了，没什么意义。 我会把这部分内容在 What is eBPF 笔记中重复一次，此处不再赘述 然后整个Lab..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"Try the Lab","slug":"try-the-lab","link":"#try-the-lab","children":[{"level":2,"title":"先导","slug":"先导","link":"#先导","children":[]},{"level":2,"title":"构建并运行 opensnoop","slug":"构建并运行-opensnoop","link":"#构建并运行-opensnoop","children":[{"level":3,"title":"项目介绍","slug":"项目介绍","link":"#项目介绍","children":[]},{"level":3,"title":"程序组成","slug":"程序组成","link":"#程序组成","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]},{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]},{"level":3,"title":"使用程序","slug":"使用程序","link":"#使用程序","children":[]}]},{"level":2,"title":"检查BPF对象文件","slug":"检查bpf对象文件","link":"#检查bpf对象文件","children":[{"level":3,"title":"readelf","slug":"readelf","link":"#readelf","children":[]},{"level":3,"title":"ELF格式","slug":"elf格式","link":"#elf格式","children":[]},{"level":3,"title":"四个可执行节","slug":"四个可执行节","link":"#四个可执行节","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"使用 bpftool 查看加载到内核中的BPF程序","slug":"使用-bpftool-查看加载到内核中的bpf程序","link":"#使用-bpftool-查看加载到内核中的bpf程序","children":[{"level":3,"title":"查看运行的eBPF程序 bpftool prog list","slug":"查看运行的ebpf程序-bpftool-prog-list","link":"#查看运行的ebpf程序-bpftool-prog-list","children":[]},{"level":3,"title":"加载到内核中的映射 bpftool map list","slug":"加载到内核中的映射-bpftool-map-list","link":"#加载到内核中的映射-bpftool-map-list","children":[]},{"level":3,"title":"观察程序字节码 bpftool prog dump xlated id 98 linum","slug":"观察程序字节码-bpftool-prog-dump-xlated-id-98-linum","link":"#观察程序字节码-bpftool-prog-dump-xlated-id-98-linum","children":[]}]},{"level":2,"title":"添加您自己的跟踪消息","slug":"添加您自己的跟踪消息","link":"#添加您自己的跟踪消息","children":[{"level":3,"title":"两种调试打印方法","slug":"两种调试打印方法","link":"#两种调试打印方法","children":[]},{"level":3,"title":"修改程序并重新运行","slug":"修改程序并重新运行","link":"#修改程序并重新运行","children":[]},{"level":3,"title":"补充","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"eBPF入门测验","slug":"ebpf入门测验","link":"#ebpf入门测验","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":17.24,"words":5173},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/eBPF/官网/02. Try the Lab.md","excerpt":"\\n<h1>目录</h1>\\n<h1>Try the Lab</h1>\\n<p><a href=\\"https://play.instruqt.com/embed/isovalent/tracks/ebpf-getting-started\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网在线虚拟机</a></p>\\n<h2>先导</h2>\\n<p>这个在线实验台在开始时会有些提示，这是因为这里要准备虚拟环境需要耗费比较多的时间（1min），给点东西给你看防止你那么闷。\\n但其实内容都是在官网中 “What is eBPF” 提到过了，没什么意义。</p>\\n<p>我会把这部分内容在 What is eBPF 笔记中重复一次，此处不再赘述</p>","autoDesc":true}');export{y as comp,F as data};
