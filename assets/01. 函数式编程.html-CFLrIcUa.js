import{_ as p,c as o,e as a,a as s,b as t,d as l,o as i,r as c}from"./app-DEbg6qWK.js";const u={},r={href:"https://www.runoob.com/python/python-built-in-functions.html",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const e=c("ExternalLinkIcon");return i(),o("div",null,[n[4]||(n[4]=a('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="函数式编程-封装" tabindex="-1"><a class="header-anchor" href="#函数式编程-封装"><span>函数式编程（封装）</span></a></h1><h2 id="内置函数-内嵌在解释器中" tabindex="-1"><a class="header-anchor" href="#内置函数-内嵌在解释器中"><span>内置函数（内嵌在解释器中）</span></a></h2><h3 id="查看所有内置函数" tabindex="-1"><a class="header-anchor" href="#查看所有内置函数"><span>查看所有内置函数</span></a></h3><p>三种方法：</p>',6)),s("ul",null,[n[2]||(n[2]=s("li",null,[s("code",null,"dir(__builtins__)")],-1)),n[3]||(n[3]=s("li",null,[s("code",null,"import builtins"),t("、"),s("code",null,"dir(builtins)")],-1)),s("li",null,[s("a",r,[n[0]||(n[0]=s("code",null,"菜鸟 - 内置函数",-1)),l(e)]),n[1]||(n[1]=t("里查看"))])]),n[5]||(n[5]=a(`<h3 id="内置辅助工具" tabindex="-1"><a class="header-anchor" href="#内置辅助工具"><span>内置辅助工具</span></a></h3><p>内置函数里有很多辅助开发、调试、学习的工具。而且很多都是==【Python特有】==的</p><ul><li><p><strong>查看变量的数据类型的所有方法</strong>：<code>dir(var)</code></p><ul><li><p>var可以是具体的变量，如<code>1、&#39;str&#39;</code></p></li><li><p>也可以是type的结果，如<code>str、list、tuple、dict、set</code>、<code>int、float、bool、complex</code></p><p><mark>（这些type不是关键词，是一种被初始化了的自带变量，可以被重赋值，重赋值后以重赋值的值为准）</mark></p></li><li><p>也可以为空，提示里面可以填的特殊值，比如<code>__builtins__</code>能查看所有python内置函数</p></li></ul></li><li><p><strong>查看变量的数据类型的某一方法用处</strong>：<code>help(var[.method])</code></p><ul><li><p>var可以是具体的变量，如<code>1、&#39;str&#39;</code></p></li><li><p>也可以是type的结果，如<code>str、list、tuple、dict、set</code>、<code>int、float、bool、complex</code></p><p><mark>（这些type不是关键词，是一种被初始化了的自带变量，可以被重赋值，重赋值后以重赋值的值为准）</mark></p></li><li><p>也可以不填方法，只传var</p></li><li><p>也可以为空，进入连续输入模式</p></li><li><p>查看时</p><ul><li>如<code>append(self, object, /)</code>，<code>insert(self, index, object, /)</code>，可以知道传哪些变量</li><li>如<code>sort(*, key=None, reverse=False)</code></li></ul></li></ul></li><li><p><strong>变量类型</strong>：</p><ul><li>type函数：<code>type(var)</code>，var是具体的变量</li><li>也可以直接输入type查看是否有这种类型，如<code>str、list、tuple、dict、set</code>、<code>int、float、bool、complex</code></li></ul></li><li><p><strong>变量的id或地址值</strong>：<code>id(var)</code></p></li><li><p><strong>查看模块名</strong>：<code>__name__</code>属性，其中main文件的该属性值为<code>__main__</code>而非文件名</p></li><li><p><strong>查看值所属的类</strong>：<code>object.__class__</code></p></li><li><p><strong>查看相关文档</strong>：<code>__doc__</code>属性（基于文档字符串）</p></li><li><p><strong>查看函数注解</strong>：<code>__annotations__</code>属性（基于函数注解）</p></li></ul><h3 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h3><p>python的输入输出函数的内置函数（C语言的是标准库函数）</p><ul><li><strong>输入</strong>：<code>input()</code>函数</li><li><strong>输出</strong>：<code>print()</code>函数 <ul><li><strong>原始字符串</strong>：</li><li><strong>格式化输出</strong>：</li></ul></li><li><strong>python2区别</strong>：python2的<code>print</code>可以不包含括号（python3必须包含）</li></ul><h2 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数"><span>自定义函数</span></a></h2><p>字面量形式</p><ul><li>定义：<code>def function_name(argument):</code></li><li>调用：<code>function_name()</code></li><li>顺序：先定义再调用（无需声明原型）</li></ul><p>补充</p><ul><li><p>形参声明（不同于C）</p><ul><li>形参不用声明类型</li></ul></li><li><p>传参方式</p><ul><li><p><strong>位置传参</strong>：声明：<code>def fun(arg1,arg2):</code>，调用：<code>fun(1,2)</code></p></li><li><p><strong>关键字传参</strong>：声明：<code>def fun(arg1,arg2):</code>，调用：<code>fun(arg1=1,arg2=2)</code></p></li><li><p><strong>可不传参（默认参）</strong>：声明：<code>def fun(arg1=1,arg2=2):</code></p><ul><li><p><strong>重要警告【大坑】</strong>：默认值只会被赋值一次（相当于局部静态变量）</p><p>这使得当默认值是<strong>可变对象</strong>时会不同，比如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">return</span> L

<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [1]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 2]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想累积，则应将默认值变为<strong>不可变对象</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> L <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token keyword">return</span> L
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>任意数量传参</strong>（类似于Js ES6中的<code>rest</code>参数）</p><ul><li>列表型：声明：<code>def fun(arg1,list):</code>，调用：<code>fun(1,[2,3])</code></li><li>封装到元组：声明：<code>def fun(arg1,*args):</code>，参数自动封装到<code>元组</code>中，调用：<code>fun(1,2,3)</code></li><li>封装到二维元组：声明：<code>def fun(arg1,**args):</code>，参数自动封装到<code>二维元组</code>中，调用：<code>fun(1,a=2,b=3)</code></li></ul></li></ul></li><li><p>返回（不同于C）</p><ul><li>无需定义函数时声明：是否有返回值、和返回值类型</li><li>return后面可为空，来表示返回<code>None</code></li></ul></li></ul><h2 id="lambda形式" tabindex="-1"><a class="header-anchor" href="#lambda形式"><span>Lambda形式</span></a></h2><ul><li><p>简概</p><ul><li>与C++中的Lambda函数类似，可以创建短小的匿名函数</li></ul></li><li><p>使用</p><ul><li>举例：<code>sum = lambda a, b: a+b</code>返回两个参数的和</li></ul></li><li><p>作用</p><ul><li>能进行嵌套函数定义</li><li>可以中外部作用域引用变量（可不受作用域影响函数内部引用外部变量，可以理解为是Lambda是调用了另一个在全局的函数）</li></ul></li><li><p>应用举例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>aboutAct <span class="token operator">=</span> QAction<span class="token punctuation">(</span><span class="token string">&quot;关于&quot;</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> statusTip<span class="token operator">=</span><span class="token string">&quot;关于界面&quot;</span>
                                <span class="token punctuation">,</span> triggered<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&quot;About MDI&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WWWWWWWWWWWWW&quot;</span><span class="token punctuation">)</span>
                                <span class="token punctuation">)</span>  <span class="token comment"># def about(self);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="函数的装饰器" tabindex="-1"><a class="header-anchor" href="#函数的装饰器"><span>函数的装饰器</span></a></h2><p>参考：https://zhuanlan.zhihu.com/p/311503904</p><h3 id="property" tabindex="-1"><a class="header-anchor" href="#property"><span>@property</span></a></h3><p>作用</p><blockquote><p>将<strong>调用方法</strong>改为了<strong>调用对象</strong>， <mark>即 p.name() 改为了 p.name</mark></p><p>即当<code>obj.function1</code>时自动触发 <code>@property def</code> 中的方法</p></blockquote><p>应用场景</p><blockquote><p>好像还有让成员延迟初始化的作用？？</p></blockquote><h3 id="xxx-setter" tabindex="-1"><a class="header-anchor" href="#xxx-setter"><span>@xxx.setter</span></a></h3><p>作用</p><blockquote><p>@name.setter 装饰器不仅将<strong>调用方法</strong>改为了获取<strong>指定对象的属性</strong>， <mark>即 p.name3 对应于 p.name() 亦 p.name。</mark></p><p>此外，对其赋值时相当于调用了方法， <mark>即有 p.name3 = n 对应于 p.name3(n)</mark></p><p>即当<code>obj.attr1 =</code> 时自动触发 <code>@attr1.setter</code> 中的方法</p></blockquote><p>应用场景</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 比如令</span>
title <span class="token operator">=</span> xxx
<span class="token comment"># 时，自动进行以下操作</span>
title <span class="token operator">=</span> xxx
grTitle <span class="token operator">=</span> xxx<span class="token operator">+</span><span class="token number">1</span>

<span class="token comment"># 有点接近C++的等号运算符重载但也不是</span>
<span class="token comment"># python的方便很多</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xxx-getter" tabindex="-1"><a class="header-anchor" href="#xxx-getter"><span><s>@xxx.getter</s></span></a></h3><p>同理setter，还没setter复杂</p><p>而且@property应该就是@xxx.getter吧</p><h3 id="使用举例" tabindex="-1"><a class="header-anchor" href="#使用举例"><span>使用举例</span></a></h3><p>@property</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token number">12</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;property&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x

        
<span class="token comment"># sehll</span>
t <span class="token operator">=</span> T<span class="token punctuation">(</span><span class="token punctuation">)</span>
t			<span class="token comment"># &lt;__main__.T object at 0x000002ACD3B41188&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>_x<span class="token punctuation">)</span> <span class="token comment"># 12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>x<span class="token punctuation">)</span>  <span class="token comment"># property    12</span>
t<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">58</span>		<span class="token comment"># 报错：AttributeError: can&#39;t set attribute。因为没有这个变量，t.x调用的是方法</span>
t<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token number">58</span>		<span class="token comment"># 不报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>_x<span class="token punctuation">)</span> <span class="token comment"># 58</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>x<span class="token punctuation">)</span>  <span class="token comment"># property    58</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@x.setter</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    本质
    	实际存储的是变量 _x
    	但无论是设置值还是获取值，都是字面量都是 x
    意义
    	1：相当于做了一层封装不直接暴露数据、暴露的是函数，一个字面量优化过的函数
    	2：相当于数据绑定。
    		Vue中的视图绑定数据或数据绑定数据，这里只要_x一变多个绑定他的数据都会自动改变
    		也能绑定操作，例如 self.title = title 时自动改变某对象的标题
    	3：不要init _x。只能先set后get，否则崩溃
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token number">12</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;property&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_x
    <span class="token decorator annotation punctuation">@x<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">x</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;set&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_x <span class="token operator">=</span> value
        
<span class="token comment"># sehll</span>
t <span class="token operator">=</span> T<span class="token punctuation">(</span><span class="token punctuation">)</span>
t			<span class="token comment"># &lt;__main__.T object at 0x000002ACD3B41188&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>_x<span class="token punctuation">)</span> <span class="token comment"># 12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>x<span class="token punctuation">)</span>  <span class="token comment"># property    12</span>
t<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">58</span>		<span class="token comment"># 不报错</span>
t<span class="token punctuation">.</span>_x <span class="token operator">=</span> <span class="token number">58</span>		<span class="token comment"># 不报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>_x<span class="token punctuation">)</span> <span class="token comment"># 58</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>x<span class="token punctuation">)</span>  <span class="token comment"># property    58</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name1 <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>name2 <span class="token operator">=</span> <span class="token string">&#39;小白&#39;</span>

    <span class="token comment"># 利用property装饰器将获取name方法转换为获取对象的属性</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name1 <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span>

    <span class="token comment"># 利用property装饰器将设置name方法转换为获取对象的属性</span>
    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>setter</span>  <span class="token comment"># @属性名.setter</span>
    <span class="token keyword">def</span> <span class="token function">name3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name1 <span class="token operator">=</span> <span class="token string">&#39;小绿&#39;</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">&#39;小灰&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;小宝&#39;</span>


p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;小黑&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name1<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name2<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name3<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name3 <span class="token operator">=</span> <span class="token string">&#39;小灰&#39;</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name1<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name2<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name3<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name3 <span class="token operator">=</span> <span class="token string">&#39;小2&#39;</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name1<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name2<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name3<span class="token punctuation">)</span>
p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不支持函数重载" tabindex="-1"><a class="header-anchor" href="#不支持函数重载"><span>不支持函数重载</span></a></h2><p>Python 不支持函数重载，而其他语言大都支持</p><p>如果我们在同一命名空间中定义的多个函数是同名的，最后一个将覆盖前面的各函数，也就是函数的名称只能是唯一的</p><p><strong>原因</strong></p><p>函数重载主要是为了解决两个问题。</p><ol><li>可变参数类型 <ul><li>Python中不需要处理，python可以接受任何类型的参数</li></ul></li><li>可变参数个数 <ul><li>可以使用缺省参数</li></ul></li></ol><p><strong>补充</strong></p><p>Python3是可以通过metaclass + parameter annotation使某个类<strong>假装支持function overloading</strong></p>`,43))])}const v=p(u,[["render",d],["__file","01. 函数式编程.html.vue"]]),b=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/01.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 函数式编程（封装） 内置函数（内嵌在解释器中） 查看所有内置函数 三种方法： dir(__builtins__) import builtins、dir(builtins) 菜鸟 - 内置函数里查看 内置辅助工具 内置函数里有很多辅助开发、调试、学习的工具。而且很多都是==【Python特有】==的 查看变量的数据类型的所有方法：d...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/01.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 函数式编程（封装） 内置函数（内嵌在解释器中） 查看所有内置函数 三种方法： dir(__builtins__) import builtins、dir(builtins) 菜鸟 - 内置函数里查看 内置辅助工具 内置函数里有很多辅助开发、调试、学习的工具。而且很多都是==【Python特有】==的 查看变量的数据类型的所有方法：d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"函数式编程（封装）","slug":"函数式编程-封装","link":"#函数式编程-封装","children":[{"level":2,"title":"内置函数（内嵌在解释器中）","slug":"内置函数-内嵌在解释器中","link":"#内置函数-内嵌在解释器中","children":[{"level":3,"title":"查看所有内置函数","slug":"查看所有内置函数","link":"#查看所有内置函数","children":[]},{"level":3,"title":"内置辅助工具","slug":"内置辅助工具","link":"#内置辅助工具","children":[]},{"level":3,"title":"输入输出","slug":"输入输出","link":"#输入输出","children":[]}]},{"level":2,"title":"自定义函数","slug":"自定义函数","link":"#自定义函数","children":[]},{"level":2,"title":"Lambda形式","slug":"lambda形式","link":"#lambda形式","children":[]},{"level":2,"title":"函数的装饰器","slug":"函数的装饰器","link":"#函数的装饰器","children":[{"level":3,"title":"@property","slug":"property","link":"#property","children":[]},{"level":3,"title":"@xxx.setter","slug":"xxx-setter","link":"#xxx-setter","children":[]},{"level":3,"title":"@xxx.getter","slug":"xxx-getter","link":"#xxx-getter","children":[]},{"level":3,"title":"使用举例","slug":"使用举例","link":"#使用举例","children":[]}]},{"level":2,"title":"不支持函数重载","slug":"不支持函数重载","link":"#不支持函数重载","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.76,"words":1727},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/05. 封装/01. 函数式编程.md","excerpt":"\\n<h1>目录</h1>\\n<h1>函数式编程（封装）</h1>\\n<h2>内置函数（内嵌在解释器中）</h2>\\n<h3>查看所有内置函数</h3>\\n<p>三种方法：</p>\\n<ul>\\n<li><code>dir(__builtins__)</code></li>\\n<li><code>import builtins</code>、<code>dir(builtins)</code></li>\\n<li><a href=\\"https://www.runoob.com/python/python-built-in-functions.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>菜鸟 - 内置函数</code></a>里查看</li>\\n</ul>","autoDesc":true}');export{v as comp,b as data};
