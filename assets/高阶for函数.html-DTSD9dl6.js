import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,e}from"./app-DueyHMnL.js";const t={},p=e(`<h1 id="高阶for函数" tabindex="-1"><a class="header-anchor" href="#高阶for函数"><span>高阶for函数</span></a></h1><h2 id="一般的for" tabindex="-1"><a class="header-anchor" href="#一般的for"><span>一般的for</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>lebgth<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="for-in" tabindex="-1"><a class="header-anchor" href="#for-in"><span>for in</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="for-of" tabindex="-1"><a class="header-anchor" href="#for-of"><span>for of</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="for-each" tabindex="-1"><a class="header-anchor" href="#for-each"><span>for each</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="filter、map、reduce" tabindex="-1"><a class="header-anchor" href="#filter、map、reduce"><span>filter、map、reduce</span></a></h2><p>数组高阶函数方法</p><p><strong>注意：不会改变原有数组！要赋给新值！</strong></p><p>编程范式：命令式编程（js）、声明式编程（vue）</p><p>编程范式：面向对象编程（第一公民：对象）、函数式编程（第一公民：函数）</p><p>这里的高阶函数就是函数式编程</p><p>据说和java8的lambda表达式类似？</p><h3 id="filter过滤。回调返回布尔" tabindex="-1"><a class="header-anchor" href="#filter过滤。回调返回布尔"><span>filter过滤。回调返回布尔</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="map映射。回调返回新值" tabindex="-1"><a class="header-anchor" href="#map映射。回调返回新值"><span>map映射。回调返回新值</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="reduce汇总-减少" tabindex="-1"><a class="header-anchor" href="#reduce汇总-减少"><span>reduce汇总（减少）</span></a></h3><p>用ts写的，因为重载，回调函数可传1/2个参而不会覆盖</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">preValue<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> preValue<span class="token operator">+</span>n <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 这里preValue表示前一次，n表示遍历的当前项，reduce第二个参是初始值 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="综合" tabindex="-1"><a class="header-anchor" href="#综合"><span>综合</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre<span class="token operator">+</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,25),o=[p];function c(r,l){return n(),s("div",null,o)}const d=a(t,[["render",c],["__file","高阶for函数.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/01.%20%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/03.1%20JavaScript/%E9%AB%98%E9%98%B6for%E5%87%BD%E6%95%B0.html","title":"高阶for函数","lang":"zh-CN","frontmatter":{"last_time":"2020.06.13","tag":"有道云","description":"高阶for函数 一般的for for in for of for each filter、map、reduce 数组高阶函数方法 注意：不会改变原有数组！要赋给新值！ 编程范式：命令式编程（js）、声明式编程（vue） 编程范式：面向对象编程（第一公民：对象）、函数式编程（第一公民：函数） 这里的高阶函数就是函数式编程 据说和java8的lambda表...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Web/01.%20%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/03.1%20JavaScript/%E9%AB%98%E9%98%B6for%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"高阶for函数"}],["meta",{"property":"og:description","content":"高阶for函数 一般的for for in for of for each filter、map、reduce 数组高阶函数方法 注意：不会改变原有数组！要赋给新值！ 编程范式：命令式编程（js）、声明式编程（vue） 编程范式：面向对象编程（第一公民：对象）、函数式编程（第一公民：函数） 这里的高阶函数就是函数式编程 据说和java8的lambda表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["meta",{"property":"article:tag","content":"有道云"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高阶for函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"高阶for函数","slug":"高阶for函数","link":"#高阶for函数","children":[{"level":2,"title":"一般的for","slug":"一般的for","link":"#一般的for","children":[]},{"level":2,"title":"for in","slug":"for-in","link":"#for-in","children":[]},{"level":2,"title":"for of","slug":"for-of","link":"#for-of","children":[]},{"level":2,"title":"for each","slug":"for-each","link":"#for-each","children":[]},{"level":2,"title":"filter、map、reduce","slug":"filter、map、reduce","link":"#filter、map、reduce","children":[{"level":3,"title":"filter过滤。回调返回布尔","slug":"filter过滤。回调返回布尔","link":"#filter过滤。回调返回布尔","children":[]},{"level":3,"title":"map映射。回调返回新值","slug":"map映射。回调返回新值","link":"#map映射。回调返回新值","children":[]},{"level":3,"title":"reduce汇总（减少）","slug":"reduce汇总-减少","link":"#reduce汇总-减少","children":[]},{"level":3,"title":"综合","slug":"综合","link":"#综合","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.85,"words":255},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Web/01. 前端三件套/03.1 JavaScript/高阶for函数.md","excerpt":"\\n<h2>一般的for</h2>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> index <span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>books<span class=\\"token punctuation\\">.</span>lebgth<span class=\\"token punctuation\\">;</span> index<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
