import{_ as e,c as o,a as s,d as a,e as p,b as i,o as l,r as c}from"./app-DWLYIH0A.js";const u="/assets/image-20240320233534755-wn-1-zPG.png",r="/assets/image-20240320233601799-DpmdKRSO.png",d={},k={href:"https://www.bilibili.com/video/BV12X4y187gd",target:"_blank",rel:"noopener noreferrer"};function v(b,n){const t=c("ExternalLinkIcon");return l(),o("div",null,[n[2]||(n[2]=s("h1",{id:"boost-asio视频",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#boost-asio视频"},[s("span",null,"Boost.Asio视频")])],-1)),n[3]||(n[3]=s("p",null,"参考：",-1)),s("ul",null,[s("li",null,[s("a",k,[n[0]||(n[0]=a("（C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例")),p(t)]),n[1]||(n[1]=a(" (1:38:46)"))])]),n[4]||(n[4]=i('<h2 id="调研-跨平台网络库" tabindex="-1"><a class="header-anchor" href="#调研-跨平台网络库"><span>调研 - 跨平台网络库</span></a></h2><h3 id="调研-跨平台网络库-1" tabindex="-1"><a class="header-anchor" href="#调研-跨平台网络库-1"><span>调研 - 跨平台网络库</span></a></h3><ul><li>主要用于linux，事件回调 <ul><li>libevnet (用过)</li><li>libev</li><li>libuv</li><li>libhv (用过)</li></ul></li><li>异步IO <ul><li>boost.asio</li></ul></li></ul><h3 id="同步io与异步io" tabindex="-1"><a class="header-anchor" href="#同步io与异步io"><span>同步io与异步io</span></a></h3><h4 id="接口上差异" tabindex="-1"><a class="header-anchor" href="#接口上差异"><span>接口上差异</span></a></h4><ul><li>同步io <ul><li>阻塞io网络模式：read、accept、connect、write</li></ul></li><li>异步io <ul><li>原生系统IO API：fcntl() 设置socket为非阻塞IO</li><li>libevent库：onWrite、onRead / onMessage、onConnect</li><li>asio库：WSARecv、AcceptEx、ConnectEx、WSASend</li></ul></li></ul><h4 id="系统-io-api" tabindex="-1"><a class="header-anchor" href="#系统-io-api"><span>系统 IO API</span></a></h4><ul><li>select：<strong>跨平台</strong></li><li>poll：<strong>跨平台</strong></li><li>epoll：<strong>Windows不支持</strong></li><li>icop：<strong>Linux不支持</strong></li></ul><h4 id="网络模型" tabindex="-1"><a class="header-anchor" href="#网络模型"><span>网络模型</span></a></h4><ul><li>reactor模型：又称反应器模式，基于事件回调。通常是Linux使用</li><li>iocp (I/O Completion Port，输入/输出完成端口) 网络模型：基于事件回调。通常Windows使用</li><li>Proactor模型</li></ul><h4 id="库" tabindex="-1"><a class="header-anchor" href="#库"><span>库</span></a></h4><ul><li>asio <ul><li>同步/异步：支持同步和异步IO</li><li>网络模型：支持Reactor模型和Proactor模型</li><li>系统 IO API <ul><li>Unix/Linux，Asio使用epoll，kqueue，/dev/poll，select等系统调用</li><li>Windows，Asio使用IOCP</li></ul></li></ul></li><li>libevent <ul><li>网络模型：Reactor模型</li><li>系统 IO API <ul><li>Unix/Linux/Windows，均为Reactor模型。Linux的epoll, BSD的kqueue，Windows的select</li><li>Windows上，虽然libevent也支持使用IOCP，但并不是作为主要的I/O模型，而是作为一种优化手段，在大量并发连接时会比select等方式效率更高</li></ul></li></ul></li></ul><h4 id="原理上差异" tabindex="-1"><a class="header-anchor" href="#原理上差异"><span>原理上差异</span></a></h4><ul><li>阻塞io：去菜鸟驿站等货物到</li><li>reactor io：注册一次，有货物来了就告诉我（不会送过来），货物到了后自己去取 <ul><li>epoll 检测，非阻塞io操作io，事件循环处理</li></ul></li><li>asio io、异步io：把篮子带过去，如果货物来了就驿站就将货物放篮子里并送货到家。然后需要将篮子再带过去等待下次货物</li></ul><p><img src="'+u+'" alt="image-20240320233534755" loading="lazy"></p><p><img src="'+r+`" alt="image-20240320233601799" loading="lazy"></p><blockquote><h5 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>tips</span></a></h5></blockquote><p>一开始我将 reactor 看成是 react 了，要区分一下这两者</p><ul><li>reactor (/riˈæktər/)：reactor模型、reactor io</li><li>react (/riˈækt/)：前端三大框架之一</li></ul><h3 id="boost-asio-两个命名空间" tabindex="-1"><a class="header-anchor" href="#boost-asio-两个命名空间"><span>boost.asio 两个命名空间</span></a></h3><p>需要知道两个命名空间：</p><ul><li><p><code>boost::asio</code></p><ul><li>核心类及函数：io_context</li><li>同步IO函数：posix api (connect、accept、read_some、write_some)</li><li>异步IO函数：(async_connect、async_accept、async_read_some、async_write_some)</li></ul></li><li><p><code>boost::assio::ip</code></p><ul><li><p>其中，boost::asio::ip 封装了socket、L4、L3</p><ul><li><p>用户态</p></li><li><p>内核态</p><ul><li>socket</li><li>L4 tcp/udp/icmp</li><li>L3 ip</li><li>L2 mac</li><li>L1 网卡</li></ul></li><li><p>网卡</p></li></ul></li><li><p>接口</p><ul><li>ip地址：ip::address</li><li>端点：ip::tcp::endpoint、ip::udp::endpoint</li><li>socket：ip::tcp::socket、ip::udp:socket</li><li>套接字控制：set_option、get_option、io_control</li></ul></li></ul></li></ul><h2 id="开始" tabindex="-1"><a class="header-anchor" href="#开始"><span>开始</span></a></h2><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><ul><li><p>同步io</p><ul><li><p>boost同步io函数有两种结果接口：抛异常、错误码</p><p>例如：connect(socket, boost::system::error_code err);</p></li></ul></li><li><p>异步io</p><ul><li>例如：<code>async_read_some(buffer(data, length), [](boost::system::error_code err, size_t transferedBytes){});</code> 这里的buffer是一个boost::asio::buffer对象</li></ul></li></ul><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>Windows默认安装位置：C:/local/boost_1_82_0/</p><ul><li>boost/, 头文件</li><li>doc/</li><li>lib64-msvc-14.2/, (我没有这个文件夹)，用VS时，库文件</li><li>libs/</li><li>more/</li><li>status/</li><li>tools/</li></ul><p>要写根目录到环境变量，且不是Path里，而是BOOST_ROOT里</p><h3 id="项目创建" tabindex="-1"><a class="header-anchor" href="#项目创建"><span>项目创建</span></a></h3><p>VS创建一个CMake项目</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><pre class="language-cmake"><code><span class="token keyword">cmake_minimum_required</span> <span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.8</span><span class="token punctuation">)</span>

<span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">BOOST_ROOT</span> $<span class="token variable">ENV</span>{<span class="token variable">BOOST_ROOT</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># 获取环境变量里的路径 (可以去检查下有无设置)，存储在该文件的变量里</span>

<span class="token keyword">find_package</span><span class="token punctuation">(</span>Boost <span class="token number">1.82</span> REQUIRED system regex<span class="token punctuation">)</span>

<span class="token comment"># 链接库</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>BOSST_LIBRARY_DIR <span class="token punctuation">\${</span><span class="token variable">BOOT_ROOT</span><span class="token punctuation">}</span>/lib64-msvc-<span class="token number">14.2</span><span class="token punctuation">)</span>  <span class="token comment"># 但我没有这个路径</span>
<span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">\${</span>BOOST_LIBRARY_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>asio <span class="token string">&quot;asio.cpp&quot;</span> <span class="token string">&quot;asio.h&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>asio <span class="token namespace">PUBLIC</span> <span class="token inserted class-name">Boost::system</span> <span class="token inserted class-name">Boost::regex</span><span class="token punctuation">)</span>

<span class="token comment"># 头文件</span>
<span class="token keyword">set</span><span class="token punctuation">(</span>BOOST_INCLUDE_DIR <span class="token punctuation">\${</span><span class="token variable">BOOT_ROOT</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">target_include_directiories</span><span class="token punctuation">(</span>asio <span class="token namespace">PUBLIC</span> <span class="token punctuation">\${</span>BOOST_INCLUDE_DIR<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本cpp</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;asio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/asio.hpp&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>asio<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>asio<span class="token double-colon punctuation">::</span>io<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    io_context io_ctx<span class="token punctuation">;</span>
    io_ctx<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞等待，相当于reactor中的事件循环</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充完善</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;asio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/asio.hpp&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>asio<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>asio<span class="token double-colon punctuation">::</span>io<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Seesion</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">enable_shared_form_this</span><span class="token operator">&lt;</span><span class="token class-name">Session</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span> 
    <span class="token function">Session</span><span class="token punctuation">(</span>tcp<span class="token double-colon punctuation">::</span>socket sock<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">socket_</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">do_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">do_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        boost<span class="token double-colon punctuation">::</span>system<span class="token double-colon punctuation">::</span>error_code err<span class="token punctuation">;</span>
        socket_<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">do_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token function">shared_form_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给自己的引用次数+1</span>
        socket_<span class="token punctuation">.</span><span class="token function">async_read_some</span><span class="token punctuation">(</span><span class="token function">buffer</span><span class="token punctuation">(</span>readBuffer_<span class="token punctuation">,</span> max_packet_len<span class="token punctuation">)</span><span class="token punctuation">,</span> 
			<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">,</span> self<span class="token punctuation">]</span><span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>system<span class="token double-colon punctuation">::</span>error_code err<span class="token punctuation">,</span> size_t transfered<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 希望回调函数调用时，socket依然存在，这里需要用智能指针延长该类的生命周期</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">do_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token function">do_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">void</span> <span class="token function">do_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">auto</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token function">shared_from_this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        socket_<span class="token punctuation">.</span><span class="token function">async_write_some</span><span class="token punctuation">(</span><span class="token function">buffer</span><span class="token punctuation">(</span>readBuffer_<span class="token punctuation">,</span> max_packet_len<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">,</span> self<span class="token punctuation">]</span><span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>system<span class="token double-colon punctuation">::</span>error_code err<span class="token punctuation">,</span> size_t transfered<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">do_close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">do_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        	<span class="token punctuation">}</span>
		<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    tcp<span class="token double-colon punctuation">::</span>socket socket_<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token punctuation">{</span>max_packet_len <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>max_packet_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Server</span><span class="token punctuation">(</span>io_context <span class="token operator">&amp;</span>io_ctx<span class="token punctuation">,</span> <span class="token keyword">short</span> port<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">acceptor_</span><span class="token punctuation">(</span>io_ctx<span class="token punctuation">,</span> tcp<span class="token double-colon punctuation">::</span><span class="token function">endpoint</span><span class="token punctuation">(</span>tcp<span class="token double-colon punctuation">::</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">do_accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        acceptor_<span class="token punctuation">.</span><span class="token function">async_accept</span><span class="token punctuation">(</span>
        	<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span>boost<span class="token double-colon punctuation">::</span>system<span class="token double-colon punctuation">::</span>error_code err<span class="token punctuation">,</span> tcp<span class="token double-colon punctuation">::</span>socket_sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Session<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    tcp<span class="token double-colon punctuation">::</span>acceptor acceptor_<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    io_context io_ctx<span class="token punctuation">;</span>
    
    <span class="token comment">// tcp::acceptor accept_(io_ctx, 000);</span>
    
    io_ctx<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 阻塞等待，相当于reactor中的事件循环</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36))])}const h=e(d,[["render",v],["__file","index.html.vue"]]),_=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%912/","title":"Boost.Asio视频","lang":"zh-CN","frontmatter":{"description":"Boost.Asio视频 参考： （C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例 (1:38:46) 调研 - 跨平台网络库 调研 - 跨平台网络库 主要用于linux，事件回调 libevnet (用过) libev libuv libhv (用过) 异步IO boost.asio 同步io与异步io 接口上差异 同步i...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/Boost/02.%20%E7%BD%91%E7%BB%9C/Boost.Asio%20%E8%A7%86%E9%A2%912/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Boost.Asio视频"}],["meta",{"property":"og:description","content":"Boost.Asio视频 参考： （C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例 (1:38:46) 调研 - 跨平台网络库 调研 - 跨平台网络库 主要用于linux，事件回调 libevnet (用过) libev libuv libhv (用过) 异步IO boost.asio 同步io与异步io 接口上差异 同步i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Boost.Asio视频\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Boost.Asio视频","slug":"boost-asio视频","link":"#boost-asio视频","children":[{"level":2,"title":"调研 - 跨平台网络库","slug":"调研-跨平台网络库","link":"#调研-跨平台网络库","children":[{"level":3,"title":"调研 - 跨平台网络库","slug":"调研-跨平台网络库-1","link":"#调研-跨平台网络库-1","children":[]},{"level":3,"title":"同步io与异步io","slug":"同步io与异步io","link":"#同步io与异步io","children":[{"level":4,"title":"接口上差异","slug":"接口上差异","link":"#接口上差异","children":[]},{"level":4,"title":"系统 IO API","slug":"系统-io-api","link":"#系统-io-api","children":[]},{"level":4,"title":"网络模型","slug":"网络模型","link":"#网络模型","children":[]},{"level":4,"title":"库","slug":"库","link":"#库","children":[]},{"level":4,"title":"原理上差异","slug":"原理上差异","link":"#原理上差异","children":[]}]},{"level":3,"title":"boost.asio 两个命名空间","slug":"boost-asio-两个命名空间","link":"#boost-asio-两个命名空间","children":[]}]},{"level":2,"title":"开始","slug":"开始","link":"#开始","children":[{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"项目创建","slug":"项目创建","link":"#项目创建","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.55,"words":1064},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/07. 模块库/Boost/02. 网络/Boost.Asio 视频2/README.md","excerpt":"\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV12X4y187gd\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">（C++后台开发）C++网络编程：网络库 Boost.Asio入门、应用案例</a> (1:38:46)</li>\\n</ul>\\n<h2>调研 - 跨平台网络库</h2>\\n<h3>调研 - 跨平台网络库</h3>\\n<ul>\\n<li>主要用于linux，事件回调\\n<ul>\\n<li>libevnet (用过)</li>\\n<li>libev</li>\\n<li>libuv</li>\\n<li>libhv (用过)</li>\\n</ul>\\n</li>\\n<li>异步IO\\n<ul>\\n<li>boost.asio</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{h as comp,_ as data};
