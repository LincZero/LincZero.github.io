import{_ as p,c as l,b as s,d as e,e as t,a as o,o as r,r as c}from"./app-rdPRYmDk.js";const i={},u={href:"https://vuepress.github.io/zh/reference/client-api.html#useroutes",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vuepress.github.io/zh/reference/client-api.html#resolveroutepath",target:"_blank",rel:"noopener noreferrer"},k={href:"https://vuepress.github.io/zh/reference/client-api.html#resolveroute",target:"_blank",rel:"noopener noreferrer"};function m(v,n){const a=c("ExternalLinkIcon");return r(),l("div",null,[n[9]||(n[9]=s("h1",{id:"解析路由",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#解析路由"},[s("span",null,"解析路由")])],-1)),n[10]||(n[10]=s("h2",{id:"获取全部路由",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#获取全部路由"},[s("span",null,"获取全部路由")])],-1)),s("p",null,[n[1]||(n[1]=e("在开发主题和插件时，你可能希望获取所有页面的信息。通过 ")),s("a",u,[n[0]||(n[0]=e("useRoutes")),t(a)]),n[2]||(n[2]=e(" 就可以获取所有页面的路由记录。"))]),n[11]||(n[11]=o(`<p><code>useRoutes</code> 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRoutes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress/client&#39;</span>

<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   &#39;/&#39;: { meta: { title: &#39;Home&#39; }, loader: HomePageLoader },</span>
<span class="token comment">//   &#39;/404.html&#39;: { meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader },</span>
<span class="token comment">//   ...</span>
<span class="token comment">// }</span>

<span class="token keyword">const</span> routePaths <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>routes<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; [’/‘, &#39;/404.html&#39;, &#39;/foo/&#39;, &#39;/bar/&#39;, ...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由地址" tabindex="-1"><a class="header-anchor" href="#解析路由地址"><span>解析路由地址</span></a></h2>`,3)),s("p",null,[n[4]||(n[4]=e("你可以使用 ")),s("a",d,[n[3]||(n[3]=e("resolveRoutePath")),t(a)]),n[5]||(n[5]=e(" 来解析给定的链接对应的路由路径。"))]),n[12]||(n[12]=o(`<p><code>resolveRoutePath</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由地址:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveRoutePath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress/client&#39;</span>

<span class="token keyword">const</span> routePath <span class="token operator">=</span> <span class="token function">resolveRoutePath</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;/foo/&#39;</span>
<span class="token keyword">const</span> routePath <span class="token operator">=</span> <span class="token function">resolveRoutePath</span><span class="token punctuation">(</span><span class="token string">&#39;baz.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/foo/bar.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; &#39;/foo/baz.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由信息" tabindex="-1"><a class="header-anchor" href="#解析路由信息"><span>解析路由信息</span></a></h2>`,3)),s("p",null,[n[7]||(n[7]=e("你可以使用 ")),s("a",k,[n[6]||(n[6]=e("resolveRoute")),t(a)]),n[8]||(n[8]=e(" 来解析给定的链接对应的路由信息。"))]),n[13]||(n[13]=o(`<p><code>resolveRoute</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由信息:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuepress/client&#39;</span>

<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">resolveRoute</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; { notFound: false, path: &#39;/foo/&#39;, meta: { title: &#39;Foo&#39; }, loader: FooPageLoader }</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">resolveRoute</span><span class="token punctuation">(</span><span class="token string">&#39;baz.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/foo/bar.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; { notFound: false, path: &#39;/foo/baz.html&#39;, meta: { title: &#39;Baz&#39; }, loader: BazPageLoader }</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">resolveRoute</span><span class="token punctuation">(</span><span class="token string">&#39;/not-exist.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; { notFound: true, path: &#39;/not-exist.html&#39;, meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由信息中存在一个 <code>notFound</code> 字段，用于标识给定的路径是否存在对应的路由。当路由不存在时，返回值中的 <code>notFound</code> 字段为 <code>true</code>，其 <code>path</code> 字段为规范化后的路径，而 <code>meta</code> 和 <code>loader</code> 字段则会指向默认的 404 页面。</p>`,3))])}const h=p(i,[["render",m],["__file","07. 解析路由.html.vue"]]),b=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3/04.%20Cookbook/07.%20%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1.html","title":"解析路由","lang":"zh-CN","frontmatter":{"description":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 useRoutes 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 resolveRoutePath 来解析给定的链接对应的路由路径。 r...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/VuePress2%20(Vue3)/%E5%AE%98%E7%BD%91%E6%96%87%E6%A1%A3/04.%20Cookbook/07.%20%E8%A7%A3%E6%9E%90%E8%B7%AF%E7%94%B1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"解析路由"}],["meta",{"property":"og:description","content":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 useRoutes 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 resolveRoutePath 来解析给定的链接对应的路由路径。 r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解析路由\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"解析路由","slug":"解析路由","link":"#解析路由","children":[{"level":2,"title":"获取全部路由","slug":"获取全部路由","link":"#获取全部路由","children":[]},{"level":2,"title":"解析路由地址","slug":"解析路由地址","link":"#解析路由地址","children":[]},{"level":2,"title":"解析路由信息","slug":"解析路由信息","link":"#解析路由信息","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.35,"words":406},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/VuePress2 (Vue3)/官网文档/04. Cookbook/07. 解析路由.md","excerpt":"\\n<h2>获取全部路由</h2>\\n<p>在开发主题和插件时，你可能希望获取所有页面的信息。通过 <a href=\\"https://vuepress.github.io/zh/reference/client-api.html#useroutes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">useRoutes</a> 就可以获取所有页面的路由记录。</p>\\n<p><code>useRoutes</code> 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> useRoutes <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vuepress/client'</span>\\n\\n<span class=\\"token keyword\\">const</span> routes <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useRoutes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// {</span>\\n<span class=\\"token comment\\">//   '/': { meta: { title: 'Home' }, loader: HomePageLoader },</span>\\n<span class=\\"token comment\\">//   '/404.html': { meta: { title: 'Not Found' }, loader: NotFoundPageLoader },</span>\\n<span class=\\"token comment\\">//   ...</span>\\n<span class=\\"token comment\\">// }</span>\\n\\n<span class=\\"token keyword\\">const</span> routePaths <span class=\\"token operator\\">=</span> <span class=\\"token function\\">computed</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span>routes<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// =&gt; [’/‘, '/404.html', '/foo/', '/bar/', ...]</span>\\n</code></pre></div>","autoDesc":true}`);export{h as comp,b as data};
