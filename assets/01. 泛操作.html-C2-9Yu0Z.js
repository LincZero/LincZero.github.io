import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as i,a as n,b as e,d as t,e as s}from"./app-DueyHMnL.js";const p={},d=s('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="泛操作" tabindex="-1"><a class="header-anchor" href="#泛操作"><span>泛操作</span></a></h1><p>Python比起C/C++内置支持高级的数据结构类型</p><h2 id="常量泛操作" tabindex="-1"><a class="header-anchor" href="#常量泛操作"><span>常量泛操作</span></a></h2><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><h4 id="内置常量" tabindex="-1"><a class="header-anchor" href="#内置常量"><span>内置常量</span></a></h4>',7),r=s("<li><code>False</code>：bool类型的假值</li><li><code>True</code>：bool类型的真值</li><li><code>None</code>：NoneType类型的唯一值。 None 经常用于表示缺少值，给其赋值是非法的并会引发SyntaxError</li><li><code>NotImplemented</code>：双目运算特殊方法应返回的特殊值，用于表示运算没有针对其他类型的实现 也可由原地双目运算特殊方法，出于同样的目的而返回</li><li><code>Ellipsis</code>：与省略号文字字面 “<code>...</code>” 相同。 特殊值主要与用户定义的容器数据类型的扩展切片语法结合使用</li>",5),u=n("code",null,"__debug__",-1),h={href:"https://docs.python.org/zh-cn/3/using/cmdline.html#cmdoption-o",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"-O",-1),m={href:"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#assert",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"assert",-1),v=s(`<h2 id="变量泛操作-内置" tabindex="-1"><a class="header-anchor" href="#变量泛操作-内置"><span>变量泛操作（内置）</span></a></h2><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><h4 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量"><span>内置变量</span></a></h4><p>像<code>str、list、tuple、dict、set</code>、<code>int、float、bool、complex</code>这种</p><p><mark>（这些type不是关键词，是一种被初始化了的自带变量，可以被重赋值，重赋值后以重赋值的值为准）</mark></p><h4 id="声明、命名、赋值" tabindex="-1"><a class="header-anchor" href="#声明、命名、赋值"><span>声明、命名、赋值</span></a></h4><ul><li><strong>变量声明</strong>：不声明变量类型</li><li><strong>变量命名</strong>：略，推荐snake case</li><li><strong>赋值写法</strong>：使用<code>=</code><ul><li><p><strong>解压缩简写</strong>：Python字面量支持解压缩简写特性：<code>x, y, x = list</code><mark>【Python特有，但JS的ES6有类似的用法】</mark></p><ul><li><p>等式右侧可以是任意<strong>线性序列</strong>，可称之为<strong>序列拆封</strong>（字典应为无序，所以用不了）</p></li><li><p>该写法本质是元组封装，其逆操作为元组赋值：<code>tuple = x, y, z</code></p></li></ul></li><li><p><strong>连等号简写</strong>：和C/C++语言一样支持：<code>x = y = c = k</code>（但C语言的连等号是依赖于表达式的广义性，原理不同）</p></li><li><p><strong>不具备表达式广义性</strong>：不能像C/C++那样可以将<code>值和符号的组合</code>看作表达式，不能这样写：<code>x = (y = 1) + 1</code></p></li></ul></li></ul><h4 id="符号" tabindex="-1"><a class="header-anchor" href="#符号"><span>符号</span></a></h4><ul><li><strong>算术运算符</strong>：<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>//</code> <code>%</code> <code>**</code> （和C不同，Python斜杠是小数除法，双斜杠才是整数floor除法） （而且Python支持**表示平方，而C用math.h库的mod）</li><li><strong>比较运算符</strong>：<code>==</code> <code>!=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>&gt;&lt;</code>，连续比较<code>a &lt; b &lt; c &lt; d</code><mark>【Python特有】</mark><ul><li><strong>线性序列的可迭代对象的重载</strong>（列表/元组/字符串）：一个一个元素比较，相同则比较下一个，直到遇到不相同的项，比较出大小</li><li><strong>值的比较</strong>：整数和小数仅比较值，整数可以等于小数</li><li><strong>字符的比较</strong>：字符串比较与可迭代对象相同，本质是比较字符。而字符比较的是ASCII顺序（不是自然排序）</li></ul></li><li><strong>逻辑运算符</strong>：<code>and</code> <code>or</code> <code>not</code>，其中and和or并成为短路操作符</li><li><strong>逻辑操作符</strong><ul><li><strong>区间判断</strong>：<code>in</code> <code>not in</code>，使用举例：<code>if item in list</code>、<code>if item not in list</code>、<code>if list</code></li><li><strong>等同判断</strong>：<code>is</code> <code>is not</code></li></ul></li><li><strong>组合赋值运算符</strong>：<code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code>（和C语言一样）</li></ul><h4 id="类型查看-泛型" tabindex="-1"><a class="header-anchor" href="#类型查看-泛型"><span>类型查看（泛型）</span></a></h4><p><strong>变量判断</strong>：<code>type()</code>函数</p><h4 id="类型转换-泛型" tabindex="-1"><a class="header-anchor" href="#类型转换-泛型"><span>类型转换（泛型）</span></a></h4><p>类型转换内置函数</p><ul><li>转数值，<code>int()</code></li><li>转字典，<code>dict()</code></li><li>转字符串，<code>str()</code></li><li>转列表，<code>list()</code><ul><li>字符串切割为列表：<code>[str].split(s)</code></li></ul></li><li>转集合，<code>set()</code></li><li>打包，<code>zip(a1,a2)</code><ul><li>可以把两个一维打包成一个深度为2的一维而不是二维（即可以使用两个序列来只遍历一次）</li></ul></li><li>线性序列（一维）转换成enumerate对象（二维），<code>enumerate()</code></li></ul><p>使用技巧</p><ul><li>如 <ul><li><code>dict([(&#39;sape&#39;, 4139), (&#39;guido&#39;, 4127), (&#39;jack&#39;, 4098)])</code></li><li><code>dict(sape=4139, guido=4127, jack=4098)</code></li></ul></li></ul><h2 id="判断类型-包括类" tabindex="-1"><a class="header-anchor" href="#判断类型-包括类"><span>判断类型（包括类）</span></a></h2><h3 id="非类判断" tabindex="-1"><a class="header-anchor" href="#非类判断"><span>非类判断</span></a></h3><p>其他</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">is</span> <span class="token keyword">in</span> 
<span class="token keyword">is</span> none
<span class="token operator">==</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指数枚举值，用&amp;和|来判断</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> QDMGraphicsEdge<span class="token punctuation">)</span> <span class="token keyword">or</span> item <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Shift加左键 -&gt; 伪装事件：按Shift修饰键时同时自动按Ctrl修饰键</span>
    <span class="token keyword">if</span> event<span class="token punctuation">.</span>modifiers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Qt<span class="token punctuation">.</span>ShiftModifier<span class="token punctuation">:</span>
        event<span class="token punctuation">.</span>ignore<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fake_event <span class="token operator">=</span> QMouseEvent<span class="token punctuation">(</span>QEvent<span class="token punctuation">.</span>MouseButtonPress<span class="token punctuation">,</span> event<span class="token punctuation">.</span>localPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>screenPos<span class="token punctuation">(</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">,</span> Qt<span class="token punctuation">.</span>LeftButton<span class="token punctuation">,</span> event<span class="token punctuation">.</span>buttons<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Qt<span class="token punctuation">.</span>LeftButton
                                 <span class="token punctuation">,</span> event<span class="token punctuation">.</span>modifiers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> Qt<span class="token punctuation">.</span>ControlModifier<span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mousePressEvent<span class="token punctuation">(</span>fake_event<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断对象的类" tabindex="-1"><a class="header-anchor" href="#判断对象的类"><span>判断对象的类</span></a></h3><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># &#39;&#39;&#39;</span>
该文件中用了三种判断方法
<span class="token punctuation">(</span>一<span class="token punctuation">)</span>
    <span class="token builtin">type</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">is</span> QDMGraphicsSocket
    直接判断类型
<span class="token punctuation">(</span>二<span class="token punctuation">)</span>    
    <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> QDMGraphicsEdge<span class="token punctuation">)</span>
    可以判断派生类，这里的QDMGraphicsEdge有两个派生类
<span class="token punctuation">(</span>三<span class="token punctuation">)</span>    
    <span class="token builtin">hasattr</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">)</span>
    用于判断对象是否包含对应的属性，这里node里有<span class="token punctuation">:</span> 
    grNode、socket <span class="token operator">-</span> grSocket、title_item、content <span class="token operator">-</span> grContent
<span class="token comment"># &#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function b(y,E){const a=l("ExternalLinkIcon");return c(),i("div",null,[d,n("ul",null,[r,n("li",null,[u,e("：如果 Python 没有以 "),n("a",h,[k,t(a)]),e(" 选项启动，则此常量为真值。 另请参见 "),n("a",m,[g,t(a)]),e(" 语句")])]),v])}const x=o(p,[["render",b],["__file","01. 泛操作.html.vue"]]),P=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 泛操作 Python比起C/C++内置支持高级的数据结构类型 常量泛操作 使用 内置常量 False：bool类型的假值 True：bool类型的真值 None：NoneType类型的唯一值。 None 经常用于表示缺少值，给其赋值是非法的并会引发SyntaxError NotImplemented：双目运算特殊方法应返回的特殊值，...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/01.%20%E6%B3%9B%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 泛操作 Python比起C/C++内置支持高级的数据结构类型 常量泛操作 使用 内置常量 False：bool类型的假值 True：bool类型的真值 None：NoneType类型的唯一值。 None 经常用于表示缺少值，给其赋值是非法的并会引发SyntaxError NotImplemented：双目运算特殊方法应返回的特殊值，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"泛操作","slug":"泛操作","link":"#泛操作","children":[{"level":2,"title":"常量泛操作","slug":"常量泛操作","link":"#常量泛操作","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[{"level":4,"title":"内置常量","slug":"内置常量","link":"#内置常量","children":[]}]}]},{"level":2,"title":"变量泛操作（内置）","slug":"变量泛操作-内置","link":"#变量泛操作-内置","children":[{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[{"level":4,"title":"内置变量","slug":"内置变量","link":"#内置变量","children":[]},{"level":4,"title":"声明、命名、赋值","slug":"声明、命名、赋值","link":"#声明、命名、赋值","children":[]},{"level":4,"title":"符号","slug":"符号","link":"#符号","children":[]},{"level":4,"title":"类型查看（泛型）","slug":"类型查看-泛型","link":"#类型查看-泛型","children":[]},{"level":4,"title":"类型转换（泛型）","slug":"类型转换-泛型","link":"#类型转换-泛型","children":[]}]}]},{"level":2,"title":"判断类型（包括类）","slug":"判断类型-包括类","link":"#判断类型-包括类","children":[{"level":3,"title":"非类判断","slug":"非类判断","link":"#非类判断","children":[]},{"level":3,"title":"判断对象的类","slug":"判断对象的类","link":"#判断对象的类","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.42,"words":1025},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/02. 数据+算法/01. 泛操作.md","excerpt":"\\n<h1>目录</h1>\\n<h1>泛操作</h1>\\n<p>Python比起C/C++内置支持高级的数据结构类型</p>\\n<h2>常量泛操作</h2>\\n<h3>使用</h3>\\n<h4>内置常量</h4>\\n<ul>\\n<li><code>False</code>：bool类型的假值</li>\\n<li><code>True</code>：bool类型的真值</li>\\n<li><code>None</code>：NoneType类型的唯一值。 None 经常用于表示缺少值，给其赋值是非法的并会引发SyntaxError</li>\\n<li><code>NotImplemented</code>：双目运算特殊方法应返回的特殊值，用于表示运算没有针对其他类型的实现\\n也可由原地双目运算特殊方法，出于同样的目的而返回</li>\\n<li><code>Ellipsis</code>：与省略号文字字面 “<code>...</code>” 相同。 特殊值主要与用户定义的容器数据类型的扩展切片语法结合使用</li>\\n<li><code>__debug__</code>：如果 Python 没有以 <a href=\\"https://docs.python.org/zh-cn/3/using/cmdline.html#cmdoption-o\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>-O</code></a> 选项启动，则此常量为真值。 另请参见 <a href=\\"https://docs.python.org/zh-cn/3/reference/simple_stmts.html#assert\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>assert</code></a> 语句</li>\\n</ul>","autoDesc":true}');export{x as comp,P as data};
