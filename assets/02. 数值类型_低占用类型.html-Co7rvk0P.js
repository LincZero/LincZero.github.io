import{_ as h,c as e,e as l,a as s,f as a,b as n,o as k,r as p}from"./app-DEUP2Tjk.js";const d={};function r(g,i){const t=p("VPIcon");return k(),e("div",null,[i[9]||(i[9]=l('<h1 id="rust基本类型" tabindex="-1"><a class="header-anchor" href="#rust基本类型"><span>Rust基本类型</span></a></h1><h2 id="类型-整型" tabindex="-1"><a class="header-anchor" href="#类型-整型"><span>类型 - 整型</span></a></h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><p>整形再分类：</p>',4)),s("ul",null,[i[8]||(i[8]=s("li",null,[s("p",null,"按符号"),s("ul",null,[s("li",null,[s("p",null,"有符号整型，英文 signed，既可以存储正数，也可以存储负数。")]),s("li",null,[s("p",null,"无符号整型，因为 unsigned，只能存储正数。")])])],-1)),s("li",null,[i[7]||(i[7]=s("p",null,"按存储大小",-1)),s("ul",null,[i[5]||(i[5]=s("li",null,"整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节",-1)),i[6]||(i[6]=s("li",null,"整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch 的整数在 x86 机器上为 32 位，在 x64 机器上为 64 位",-1)),s("li",null,[i[4]||(i[4]=a("技巧：最大和最小值范围可以分别这样打印： ")),s("ul",null,[s("li",null,[i[0]||(i[0]=a("最大值 std")),n(t,{icon:"u128"}),i[1]||(i[1]=a("MAX，值为 340282366920938463463374607431768211455"))]),s("li",null,[i[2]||(i[2]=a("最小值 std")),n(t,{icon:"i128"}),i[3]||(i[3]=a("MIN，值为 -170141183460469231731687303715884105728"))])])])])])]),i[10]||(i[10]=l(`<table><thead><tr><th>大小</th><th></th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8 bit</td><td>1 Byte</td><td>i8</td><td>u8</td></tr><tr><td>16 bit</td><td>2 Byte</td><td>i16</td><td>u16</td></tr><tr><td>32 bit (默认)</td><td>4 Byte (默认)</td><td>i32</td><td>u32</td></tr><tr><td>64 bit</td><td>8 Byte</td><td>i64</td><td>u64</td></tr><tr><td>128 bit</td><td>16 Byte</td><td>i128</td><td>u128</td></tr><tr><td>Arch</td><td></td><td>isize</td><td>usize</td></tr></tbody></table><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// i32 默认</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">u32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">300</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">isize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 400</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">usize</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price is {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price is 100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price2 is {} and price3 is {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price2 is -300 and price3 is 200</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price4 is {} and price5 is {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price4 is 400 and price5 is 500</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="技巧-编译器提示" tabindex="-1"><a class="header-anchor" href="#技巧-编译器提示"><span>技巧：编译器提示</span></a></h3><p>Rust有非常好的报错提示，报错非常清晰</p><p>类型和值不匹配</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 66.66</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编译不会通过，并且编译器报错如下</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mismatched</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">E0308</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">found</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整型溢出</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i8</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 我们已经计算了 i8 的最大值是 127。我给一个更大的数值会如何呢？</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price7 is {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 报错如下，很明确的告诉你超出了 i8 的范围</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i8</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">                   ^^^</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> note</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: \`</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[deny(overflowing_literals)]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">on</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> by</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> default</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> note</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">the</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> literal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">does</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> not</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fit</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> into</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">whose</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> range</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> is</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">128</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">127</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> help</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">consider</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> using</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">u8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\` </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">instead</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-浮点型" tabindex="-1"><a class="header-anchor" href="#类型-浮点型"><span>类型 - 浮点型</span></a></h2><h3 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1"><span>分类</span></a></h3><p>按照存储大小，把浮点型划分为 f32 和 f64。其中 f64 是默认的浮点类型。</p><ul><li>f32 又称为 单精度浮点型。</li><li>f64 又称为 双精度浮点型，它是 Rust 默认的浮点类型.</li></ul><p>Rust 中不能将 0.0 赋值给任意一个整型，也不能将 0 赋值给任意一个浮点型。</p><h3 id="代码示例-1" tabindex="-1"><a class="header-anchor" href="#代码示例-1"><span>代码示例</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 99</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">报错：</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mismatched</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> types</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">E0308</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">expected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">found</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> \`</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price9</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 18.00</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;        			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 默认是 f64</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f32</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8.88</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 168.125</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 双精度浮点型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price9 {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); 		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price9 18</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price10 {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price10 8.88</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price11 {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price11 168.125</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="技巧-下划线" tabindex="-1"><a class="header-anchor" href="#技巧-下划线"><span>技巧：下划线</span></a></h3><p>当数字很大的时候，Rust 可以用 **(_下划线) ** ，来让数字变得可读性更好。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price12</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1_000_000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price12 {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price12 1000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> price13</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1_000_000.666_123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;price13 {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">price13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 price13 1000000.666123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-布尔" tabindex="-1"><a class="header-anchor" href="#类型-布尔"><span>类型 - 布尔</span></a></h2><p>Rust 使用 bool 关键字来声明一个 布尔类型 的变量。 布尔类型 取值是 true 或 false 。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> checked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;checked {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">checked</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 checked true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型-字符" tabindex="-1"><a class="header-anchor" href="#类型-字符"><span>类型 - 字符</span></a></h2><p>字符(char) ，就是字符串的基本组成部分，也就是单个字符或字。</p><p>Rust 使用 UTF-8 作为底层的编码 ，而不是常见的使用 ASCII 作为底层编码。 Rust 中的 字符数据类型 包含了 数字、字母、Unicode 和 其它特殊字符。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;R&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出 c R</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><p>Rust 语言支持以下四种运算符</p><ul><li>算术运算符</li><li>位运算符</li><li>关系运算符</li><li>逻辑运算符</li></ul><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th></tr></thead><tbody><tr><td>加</td><td>+</td></tr><tr><td>减</td><td>-</td></tr><tr><td>乘</td><td>*</td></tr><tr><td>除</td><td>/</td></tr><tr><td>求余</td><td>%</td></tr></tbody></table><p>注：Rust 语言<strong>不支持</strong>自增自减运算符 ++ 和 --</p><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>大于</td><td>&gt;</td><td>如果左操作数大于右操作数则返回 true 否则返回 false</td></tr><tr><td>小于</td><td>&lt;</td><td>如果左操作数小于于右操作数则返回 true 否则返回 false</td></tr><tr><td>大于等于</td><td>&gt;=</td><td>如果左操作数大于或等于右操作数则返回 true 否则返回 false</td></tr><tr><td>小于等于</td><td>&lt;=</td><td>如果左操作数小于或等于右操作数则返回 true 否则返回 false</td></tr><tr><td>等于</td><td>==</td><td>如果左操作数等于右操作数则返回 true 否则返回 false</td></tr><tr><td>不等于</td><td>!=</td><td>如果左操作数不等于右操作数则返回 true 否则返回 false</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>逻辑与</td><td>&amp;&amp;</td><td>两边的条件表达式都为真则返回 true 否则返回 false</td></tr><tr><td>逻辑或</td><td>||</td><td>两边的条件表达式只要有一个为真则返回 true 否则返回 false</td></tr><tr><td>逻辑非</td><td>!</td><td>如果表达式为真则返回 false 否则返回 true</td></tr></tbody></table><h3 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h3><table><thead><tr><th>名称</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>位与</td><td>&amp;</td><td>相同位都是 1 则返回 1 否则返回 0</td></tr><tr><td>位或</td><td>|</td><td>相同位只要有一个是 1 则返回 1 否则返回 0</td></tr><tr><td>异或</td><td>^</td><td>相同位不相同则返回 1 否则返回 0</td></tr><tr><td>位非</td><td>!</td><td>把位中的 1 换成 0 ， 0 换成 1</td></tr><tr><td>左移</td><td>&lt;&lt;</td><td>操作数中的所有位向左移动指定位数，右边的位补 0</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>操作数中的所有位向右移动指定位数，左边的位补 0</td></tr></tbody></table>`,38))])}const B=h(d,[["render",r],["__file","02. 数值类型_低占用类型.html.vue"]]),y=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html","title":"Rust基本类型","lang":"zh-CN","frontmatter":{"description":"Rust基本类型 类型 - 整型 分类 整形再分类： 按符号 有符号整型，英文 signed，既可以存储正数，也可以存储负数。 无符号整型，因为 unsigned，只能存储正数。 按存储大小 整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节 整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/02.%20%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B_%E4%BD%8E%E5%8D%A0%E7%94%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust基本类型"}],["meta",{"property":"og:description","content":"Rust基本类型 类型 - 整型 分类 整形再分类： 按符号 有符号整型，英文 signed，既可以存储正数，也可以存储负数。 无符号整型，因为 unsigned，只能存储正数。 按存储大小 整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节 整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust基本类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust基本类型","slug":"rust基本类型","link":"#rust基本类型","children":[{"level":2,"title":"类型 - 整型","slug":"类型-整型","link":"#类型-整型","children":[{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"技巧：编译器提示","slug":"技巧-编译器提示","link":"#技巧-编译器提示","children":[]}]},{"level":2,"title":"类型 - 浮点型","slug":"类型-浮点型","link":"#类型-浮点型","children":[{"level":3,"title":"分类","slug":"分类-1","link":"#分类-1","children":[]},{"level":3,"title":"代码示例","slug":"代码示例-1","link":"#代码示例-1","children":[]},{"level":3,"title":"技巧：下划线","slug":"技巧-下划线","link":"#技巧-下划线","children":[]}]},{"level":2,"title":"类型 - 布尔","slug":"类型-布尔","link":"#类型-布尔","children":[]},{"level":2,"title":"类型 - 字符","slug":"类型-字符","link":"#类型-字符","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"位运算","slug":"位运算","link":"#位运算","children":[]}]}]}],"git":{},"readingTime":{"minutes":4.1,"words":1230},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/02. 数值类型+低占用类型.md","excerpt":"\\n<h2>类型 - 整型</h2>\\n<h3>分类</h3>\\n<p>整形再分类：</p>\\n<ul>\\n<li>\\n<p>按符号</p>\\n<ul>\\n<li>\\n<p>有符号整型，英文 signed，既可以存储正数，也可以存储负数。</p>\\n</li>\\n<li>\\n<p>无符号整型，因为 unsigned，只能存储正数。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>按存储大小</p>\\n<ul>\\n<li>整型可以进一步划分为 1字节、2字节、4字节、8字节、16字节</li>\\n<li>整型的长度还可以是 arch。arch 是由 CPU 构架决定的大小的整型类型。大小为 arch 的整数在 x86 机器上为 32 位，在 x64 机器上为 64 位</li>\\n<li>技巧：最大和最小值范围可以分别这样打印：\\n<ul>\\n<li>最大值 std</li>\\n<li>最小值 std</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/02. 数值类型+低占用类型.md","value":{"title":"02. 数值类型+低占用类型","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/02. 数据+算法/02. 数值类型+低占用类型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{B as comp,y as data};
