import{_ as o,c as d,e as c,o as t}from"./app-DQC9V0Al.js";const n={};function r(a,e){return t(),d("div",null,e[0]||(e[0]=[c('<h1 id="pcie" tabindex="-1"><a class="header-anchor" href="#pcie"><span>PCIe</span></a></h1><p>![numa forwarding model](06. PCIe.assets/numa-forwarding-model.jpg)</p><p><code>PCI Express</code>（<code>Peripheral Component Interconnect Express</code>）又称<code>PCIe</code>，它是一种高速串行通信互联标准。<code>PCIe</code>规范遵循开放系统互联参考模型（<code>OSI</code>），自上而下分为事务传输层、数据链路层、物理层。对于特定的网卡，<code>PCIe</code>一般作为处理器外部接口。一般网卡采用<code>DMA</code>控制器通过<code>PCIe Bus</code>访问内存，除了对以太网数据内容的读写外，还有DMA描述符操作相关的读写，这些操作也由<code>MRd/MWr</code>来完成。</p><p>![PCIe By OSI](06. PCIe.assets/dpdk-pcie-by-osi.jpg)</p><p>PCIe包格式示例，对于一个完整的TLP包来说，除去有效载荷，额外还有24B的开销（TLP头部以16B计算）。</p><p>![PCIe layer](06. PCIe.assets/dpdk-pcie-layer.jpg)</p><p>![PCIe packet structure](06. PCIe.assets/dpdk-pcie-packet-structure.jpg)</p><p>要查看特定<code>PCIe</code>设备的链路能力和当前速率，可以用<code>Linux</code>工具<a href="https://linux.die.net/man/8/lspci" target="_blank" rel="noopener noreferrer">lspci</a>读取<code>PCIe</code>的配置寄存器。</p><h2 id="网卡dma描述符环形队列" tabindex="-1"><a class="header-anchor" href="#网卡dma描述符环形队列"><span>网卡DMA描述符环形队列</span></a></h2><p>DMA（Direct Memory Access，直接存储器访问）是一种高速的数据传输方式，允许在外部设备和存储器之间直接读写数据。数据既不通过CPU，也不需要CPU干预。整个数据传输操作在DMA控制器的控制下进行。网卡DMA控制器通过环形队列与CPU交互。环形队列的内容部分位于主存中，控制部分通过访问外设寄存器的方式完成。</p><p>![PICe DMA queue and structure](06. PCIe.assets/pcie-dma-queue-and-structure.jpg)</p><h2 id="转发操作" tabindex="-1"><a class="header-anchor" href="#转发操作"><span>转发操作</span></a></h2><p>![img](06. PCIe.assets/pcie-forwarding-flow.jpg)</p><p>优化的考虑</p><ol><li>减少<code>MMIO</code>访问的频度。接收包时，尾寄存器（<code>tail register</code>）的更新发生在新缓冲区分配以及描述符重填之后。只要将每包分配并重填描述符的行为修改为滞后的批量分配并重填描述符，接收侧的尾寄存器更新次数将大大减少。<code>DPDK</code>是在判断空置率小于一定值后才触发重填来完成这个操作的。发送包时，就不能采用类似的方法。因为只有及时地更新尾寄存器，才会通知网卡进行发包。但仍可以采用批量发包接口的方式，填充一批等待发送的描述符后，统一更新尾寄存器。</li><li>提高<code>PCIe</code>传输的效率。如果能把4个操作合并成整<code>Cache Line</code>大小来作为<code>PCIe</code>的事务请求（<code>PCIe</code>净荷为<code>64Byte</code>），带宽利用率就能得到提升。</li><li>尽量避免<code>Cache Line</code>的部分写。<code>Cache Line</code>的部分写会引发内存访问<code>read-modify-write</code>的合并操作，增加额外的读操作，也会降低整体性能。所以，DPDK在<code>Mempool</code>中分配<code>buffer</code>的时候，会要求对齐到<code>Cache Line</code>大小。</li></ol><blockquote><p>每转发一个64字节的包的平均转发开销接近于168字节（<code>96+24+8+8+32</code>）。如果计算包转发率，就会得出<code>64B</code>报文的最大转发速率为<code>4000MB/s/168B=23.8Mp/s</code>。</p></blockquote><h2 id="mbuf" tabindex="-1"><a class="header-anchor" href="#mbuf"><span>Mbuf</span></a></h2><p>为了高效访问数据，<code>DPDK</code>将内存封装在<code>Mbuf</code>（<code>struct rte_mbuf</code>）结构体内。Mbuf主要用来封装网络帧缓存，也可用来封装通用控制信息缓存（缓存类型需使用<code>CTRL_MBUF_FLAG</code>来指定）。网络帧元数据的一部分内容由<code>DPDK</code>的网卡驱动写入。这些内容包括<code>VLAN</code>标签、<code>RSS</code>哈希值、网络帧入口端口号以及巨型帧所占的<code>Mbuf</code>个数等。对于巨型帧，网络帧元数据仅出现在第一个帧的<code>Mbuf</code>结构中，其他的帧该信息为空。</p><p>单帧结构</p><p>![single-frame-structure](06. PCIe.assets/single-frame-structure.jpg)</p><p>巨型帧结构</p><p>![jumbo-frame-structure](06. PCIe.assets/jumbo-frame-structure.jpg)</p><h2 id="mempool" tabindex="-1"><a class="header-anchor" href="#mempool"><span>Mempool</span></a></h2><p>在<code>DPDK</code>中，数据包的内存操作对象被抽象化为<code>Mbuf</code>结构，而有限的<code>rte_mbuf</code>结构对象则存储在内存池中。内存池使用环形缓存区来保存空闲对象。</p><p>当一个网络帧被网卡接收时，<code>DPDK</code>的网卡驱动将其存储在一个高效的环形缓存区中，同时在<code>Mbuf</code>的环形缓存区中创建一个<code>Mbuf</code>对象。当然，两个行为都不涉及向系统申请内存，这些内存已经在内存池被创建时就申请好了。<code>Mbuf</code>对象被创建好后，网卡驱动根据分析出的帧信息将其初始化，并将其和实际帧对象逻辑相连。对网络帧的分析处理都集中于<code>Mbuf</code>，仅在必要的时候访问实际网络帧。这就是内存池的双环形缓存区结构。为增加对<code>Mbuf</code>的访问效率，内存池还拥有内存通道/<code>Rank</code>对齐辅助方法。内存池还允许用户设置核心缓存区大小来调节环形内存块读写的频率。</p><p>![mbuf-packet](06. PCIe.assets/mbuf-packet.jpg)</p><p>实践证明，在内存对象之间补零，以确保每个对象和内存的一个通道和<code>Rank</code>起始处对齐，能大幅减少未命中的发生概率且增加存取效率。在<code>L3</code>转发和流分类应用中尤为如此。内存池以更大内存占有量的代价来支持此项技术。在创建一个内存池时，用户可选择是否启用该技术。</p><p>多核 CPU 访问同一个内存池或者同一个环形缓存区时，因为每次读写时都要进行<code>Compare-and-Set</code>操作来保证期间数据未被其他核心修改，所以存取效率较低。<code>DPDK</code>的解决方法是使用单核本地缓存一部分数据，实时对环形缓存区进行块读写操作，以减少访问环形缓存区的次数。单核<code>CPU</code>对自己缓存的操作无须中断，访问效率因而得到提高。当然，这个方法也并非全是好处：该方法要求每个核<code>CPU</code>都有自己私用的缓存（大小可由用户定义，也可为0，或禁用该方法），而这些缓存在绝大部分时间都没有能得到百分之百运用，因此一部分内存空间将被浪费。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://linux.die.net/man/8/lspci" target="_blank" rel="noopener noreferrer">lspci</a></li><li><a href="https://www.slideshare.net/garyachy/dpdk-44585840" target="_blank" rel="noopener noreferrer">Understanding DPDK</a></li></ul>',30)]))}const s=o(n,[["render",r],["__file","06. PCIe.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/06.%20PCIe.html","title":"PCIe","lang":"zh-CN","frontmatter":{"description":"PCIe ![numa forwarding model](06. PCIe.assets/numa-forwarding-model.jpg) PCI Express（Peripheral Component Interconnect Express）又称PCIe，它是一种高速串行通信互联标准。PCIe规范遵循开放系统互联参考模型（OSI），自上而下...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/06.%20PCIe.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"PCIe"}],["meta",{"property":"og:description","content":"PCIe ![numa forwarding model](06. PCIe.assets/numa-forwarding-model.jpg) PCI Express（Peripheral Component Interconnect Express）又称PCIe，它是一种高速串行通信互联标准。PCIe规范遵循开放系统互联参考模型（OSI），自上而下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PCIe\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"PCIe","slug":"pcie","link":"#pcie","children":[{"level":2,"title":"网卡DMA描述符环形队列","slug":"网卡dma描述符环形队列","link":"#网卡dma描述符环形队列","children":[]},{"level":2,"title":"转发操作","slug":"转发操作","link":"#转发操作","children":[]},{"level":2,"title":"Mbuf","slug":"mbuf","link":"#mbuf","children":[]},{"level":2,"title":"Mempool","slug":"mempool","link":"#mempool","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{},"readingTime":{"minutes":5.19,"words":1557},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/06. PCIe.md","excerpt":"\\n<p>![numa forwarding model](06. PCIe.assets/numa-forwarding-model.jpg)</p>\\n<p><code>PCI Express</code>（<code>Peripheral Component Interconnect Express</code>）又称<code>PCIe</code>，它是一种高速串行通信互联标准。<code>PCIe</code>规范遵循开放系统互联参考模型（<code>OSI</code>），自上而下分为事务传输层、数据链路层、物理层。对于特定的网卡，<code>PCIe</code>一般作为处理器外部接口。一般网卡采用<code>DMA</code>控制器通过<code>PCIe Bus</code>访问内存，除了对以太网数据内容的读写外，还有DMA描述符操作相关的读写，这些操作也由<code>MRd/MWr</code>来完成。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/06. PCIe.md","value":{"title":"06. PCIe","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/06. PCIe.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,l as data};
