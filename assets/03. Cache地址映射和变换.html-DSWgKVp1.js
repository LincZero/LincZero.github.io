import{_ as t,c as n,e,a as l,f as a,o as c}from"./app-Dnpl954R.js";const i="/assets/Image00074-26aKsVpZ.jpg",p="/assets/Image00077-4tEOyegZ.jpg",r="/assets/Image00081-DGDFOgra.jpg",h={};function m(o,s){return c(),n("div",null,s[0]||(s[0]=[e('<h1 id="cache地址映射和变换" tabindex="-1"><a class="header-anchor" href="#cache地址映射和变换"><span>Cache地址映射和变换</span></a></h1><p>这章的重点是：<strong>Cache和内存的 数据交换</strong>，关系Cache和内存的读写。</p><h2 id="底层细节和术语" tabindex="-1"><a class="header-anchor" href="#底层细节和术语"><span>底层细节和术语</span></a></h2><p>为了进行Cache和内存的数据交换，这里介绍一点底层细节和术语：</p><h3 id="分块机制" tabindex="-1"><a class="header-anchor" href="#分块机制"><span>分块机制</span></a></h3><p>这里的分“块”指的“块”也叫“CacheLine”，Cache和内存以块为单位进行数据交换，块的大小通常以在内存的一个存储周期中能够访问到的数据长度为限。</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>(GPT) 术语：<strong>Cache Line (缓存行)</strong></p><ul><li>概念：缓存行是内存中基本单位/<strong>最小的数据单位，它可以被加载到缓存中</strong>。</li><li>包含内容：一个缓存行通常包含： <ul><li>实际的数据</li><li>一些元数据（例如有效位、脏位、共享状态等）</li></ul></li><li>大小：是最小数据单位。且其大小通常是固定的，并且因不同的处理器架构而异。常见的有： <ul><li>32字节： 较早的ARM、1990年~2000年早期的x86和PowerPC</li><li>64字节： 较新的ARM和x86</li><li>128字节： 较新的Power ISA机器</li></ul></li><li><strong>机制 - 整个加载以利用局部性原理</strong>：每次从主内存读取数据时，不仅仅是请求的特定字节会被加载，而是整个缓存行都会被加载到缓存中。 这样做的目的是为了利用局部性原理（Locality Principle），即程序往往连续访问内存中的数据或在短时间内重复访问相同的数据。</li><li><strong>机制 - 缓存行对齐以确保高效加载</strong>：数据在内存中的位置需要与缓存行边界对齐</li></ul></div></div><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>(GPT) 术语：<strong>Cache Entry (缓存条目)</strong></p><ul><li><p>概念：缓存条目是指缓存中用于存储数据的一个<strong>位置</strong>。</p></li><li><p>被组织方式：缓存可以按照多种方式组织缓存条目：</p><ul><li>直接映射（Direct Mapped）</li><li>全相联（Fully Associative）</li><li>组相联（Set Associative）</li></ul></li><li><p>包含内容：每个缓存条目通常包括：</p><ul><li>数据部分（Data）</li><li>标记部分（Tag）</li><li>控制信息（如有效位、脏位等）</li></ul><p>另外。一个缓存条目可以包含一个或多个缓存行，具体取决于缓存的设计。</p></li><li><p>机制 - 替换策略：当缓存满了需要加载新数据时，会根据某种替换策略来决定哪个缓存条目将被替换掉，常见的策略有：</p><ul><li>LRU（Least Recently Used 最近最少使用）</li><li>FIFO（First In First Out 先进先出</li><li>等</li></ul></li></ul></div></div><h3 id="映射算法" tabindex="-1"><a class="header-anchor" href="#映射算法"><span>映射算法</span></a></h3><p>而映射算法是指<strong>把内存地址空间映射到Cache地址空间</strong>。</p><p>具体来说，就是把存放在内存中的内容按照某种规则装入到Cache中，并建立内存地址与Cache地址之间的对应关系。当内容已经装入到Cache之后，在实际运行过程中，当处理器需要访问这个数据块内容时，则需要<strong>把内存地址转换成Cache地址，从而在Cache中找到该数据块，最终返回给处理器</strong>。</p><h2 id="三类cache-粗" tabindex="-1"><a class="header-anchor" href="#三类cache-粗"><span>三类Cache (粗)</span></a></h2><p>三类Cache</p><p>根据Cache和内存之间的映射关系的不同，Cache可以分为三类：</p><ul><li>第一类：全关联型 Cache（full associative cache）</li><li>第二类：直接关联型 Cache（direct mapped cache）</li><li>第三类：组关联型 Cache（N-ways associative cache）</li></ul><h3 id="提前总结、比较" tabindex="-1"><a class="header-anchor" href="#提前总结、比较"><span>提前总结、比较</span></a></h3><p>共同点：</p><ul><li>无论哪种都会在Cache中建立一个目录表，根据不同的映射方案，目录表内容不同</li></ul><p>不同点：</p><table><thead><tr><th></th><th>全关联型Cache</th><th>直接关联型Cache</th><th>组关联型Cache</th></tr></thead><tbody><tr><td>目录表</td><td>内存地址<br>Cache块号<br>有效位</td><td>区号<br>_<br>有效位</td><td>“区号+块号”<br>Cache块号<br>有效位</td></tr><tr><td>映射数</td><td></td><td></td><td></td></tr><tr><td>优点</td><td>无块冲突，利用率高</td><td>实现简单，匹配快</td><td>(各取所长)</td></tr><tr><td>缺点</td><td>大容量导致电路设计复杂</td><td>Cache命中率低</td><td></td></tr><tr><td>选用</td><td>小容量Cache</td><td></td><td></td></tr></tbody></table><h3 id="全关联型cache-full-associative-cache" tabindex="-1"><a class="header-anchor" href="#全关联型cache-full-associative-cache"><span>全关联型Cache（full associative cache）</span></a></h3><ul><li><p>特点：全关联型Cache是指主存中的<em>任何一块内存都可以映射到Cache中的任意一块位置上</em>。</p></li><li><p>原理 - 目录表：三部分组成：</p><ul><li>内存地址</li><li>Cache块号</li><li>有效位</li></ul></li><li><p>原理 - 查找：</p><p>当处理器需要访问某个内存地址时，首先通过该目录表查询是否该内容缓存在Cache中，具体过程如下图所示：</p><p><img src="'+i+'" alt="img" loading="lazy"></p><p>首先，用内存的块地址A在Cache的目录表中进行查询，如果找到等值的内存块地址，检查有效位是否有效</p><ul><li>有效的情况下，能通过Cache块号在Cache中找到缓存的内存，并且加上块内地址B，找到相应数据，这时则称为<strong>Cache命中</strong>，处理器拿到数据返回；</li><li>否则为<strong>Cache Miss</strong>，处理器则需要在内存中读取相应的数据。</li></ul></li><li><p>优点：块的冲突最小（没有冲突），Cache的利用率也高，但是需要一个访问速度很快的相联存储器。</p></li><li><p>缺点：随着Cache容量的增加，其电路设计变得十分复杂</p></li><li><p>场景：因此只有容量很小的Cache才会设计成全关联型的（如一些英特尔处理器中的TLB Cache）</p></li></ul><h3 id="直接关联型cache-direct-mapped-cache" tabindex="-1"><a class="header-anchor" href="#直接关联型cache-direct-mapped-cache"><span>直接关联型Cache（direct mapped cache）</span></a></h3>',23),l("ul",null,[l("li",null,[l("p",null,[a("特点：直接关联型Cache是指主存中的"),l("em",null,"一块内存只能映射到Cache的一个特定的块中"),a("。")]),l("p",null,[a("假设一个Cache中总共存在N个Cache line，那么内存被分成N等分，其中每一等分对应一个Cache line。举个简单的例子，假设Cache的大小是2K，而一个Cache line的大小是64B，那么就一共有 "),l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[l("semantics",null,[l("mrow",null,[l("mn",null,"2"),l("mi",null,"K"),l("mi",{mathvariant:"normal"},"/"),l("mn",null,"64"),l("mi",null,"B"),l("mo",null,"="),l("mn",null,"32"),l("mtext",null,"个")]),l("annotation",{encoding:"application/x-tex"},"2K/64B=32个")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),l("span",{class:"mord"},"2"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"K"),l("span",{class:"mord"},"/64"),l("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"="),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.6833em"}}),l("span",{class:"mord"},"32"),l("span",{class:"mord cjk_fallback"},"个")])])]),a(" Cache line，那么对应我们的这些内存：")]),l("p",{class:"katex-block"},[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[l("mtr",null,[l("mtd",{class:"mtr-glue"}),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mtext",null,"第 "),l("mn",null,"1"),l("mtext",null,"块 地址：")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mrow"),l("mn",null,"0"),l("mo",null,"∼"),l("mn",null,"63")])])]),l("mtd",{class:"mtr-glue"}),l("mtd",{class:"mml-eqn-num"})]),l("mtr",null,[l("mtd",{class:"mtr-glue"}),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mtext",null,"第"),l("mn",null,"33"),l("mtext",null,"块 地址：")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mrow"),l("mn",null,"64"),l("mo",null,"∗"),l("mn",null,"32"),l("mo",null,"∼"),l("mn",null,"64"),l("mo",null,"∗"),l("mn",null,"33"),l("mo",null,"−"),l("mn",null,"1")])])]),l("mtd",{class:"mtr-glue"}),l("mtd",{class:"mml-eqn-num"})]),l("mtr",null,[l("mtd",{class:"mtr-glue"}),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mtext",null,"第"),l("mo",{stretchy:"false"},"("),l("mi",null,"N"),l("mo",null,"∗"),l("mn",null,"32"),l("mo",null,"+"),l("mn",null,"1"),l("mo",{stretchy:"false"},")"),l("mtext",null,"块 地址：")])])]),l("mtd",null,[l("mstyle",{scriptlevel:"0",displaystyle:"true"},[l("mrow",null,[l("mrow"),l("mn",null,"64"),l("mo",null,"∗"),l("mo",{stretchy:"false"},"("),l("mi",null,"N"),l("mo",null,"−"),l("mn",null,"1"),l("mo",{stretchy:"false"},")"),l("mo",null,"∼"),l("mn",null,"64"),l("mo",null,"∗"),l("mi",null,"N"),l("mo",null,"−"),l("mn",null,"1")])])]),l("mtd",{class:"mtr-glue"}),l("mtd",{class:"mml-eqn-num"})])]),l("annotation",{encoding:"application/x-tex"},"\\begin{align} 第~1块~地址：& 0\\sim63\\\\ 第33块~地址：& 64*32\\sim64*33-1\\\\ 第(N*32+1)块~地址：& 64*(N-1)\\sim 64*N-1\\\\ \\end{align} ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"4.5em","vertical-align":"-2em"}}),l("span",{class:"mtable"},[l("span",{class:"col-align-r"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2.5em"}},[l("span",{style:{top:"-4.66em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord cjk_fallback"},"第"),l("span",{class:"mspace nobreak"}," "),l("span",{class:"mord"},"1"),l("span",{class:"mord cjk_fallback"},"块"),l("span",{class:"mspace nobreak"}," "),l("span",{class:"mord cjk_fallback"},"地址：")])]),l("span",{style:{top:"-3.16em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord cjk_fallback"},"第"),l("span",{class:"mord"},"33"),l("span",{class:"mord cjk_fallback"},"块"),l("span",{class:"mspace nobreak"}," "),l("span",{class:"mord cjk_fallback"},"地址：")])]),l("span",{style:{top:"-1.66em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord cjk_fallback"},"第"),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"∗"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"32"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")"),l("span",{class:"mord cjk_fallback"},"块"),l("span",{class:"mspace nobreak"}," "),l("span",{class:"mord cjk_fallback"},"地址：")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2em"}},[l("span")])])])]),l("span",{class:"col-align-l"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2.5em"}},[l("span",{style:{top:"-4.66em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"}),l("span",{class:"mord"},"0"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"∼"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mord"},"63")])]),l("span",{style:{top:"-3.16em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"}),l("span",{class:"mord"},"64"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"∗"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"32"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"∼"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mord"},"64"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"∗"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"33"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"1")])]),l("span",{style:{top:"-1.66em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"}),l("span",{class:"mord"},"64"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"∗"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mopen"},"("),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"1"),l("span",{class:"mclose"},")"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"∼"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mord"},"64"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"∗"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"−"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"1")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2em"}},[l("span")])])])])])]),l("span",{class:"tag"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2.5em"}},[l("span",{style:{top:"-4.5em"}},[l("span",{class:"pstrut",style:{height:"2.84em"}}),l("span",{class:"eqn-num"})]),l("span",{style:{top:"-3em"}},[l("span",{class:"pstrut",style:{height:"2.84em"}}),l("span",{class:"eqn-num"})]),l("span",{style:{top:"-1.5em"}},[l("span",{class:"pstrut",style:{height:"2.84em"}}),l("span",{class:"eqn-num"})])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"2em"}},[l("span")])])])])])])])]),l("p",null,"都被映射到Cache第一块中；"),l("p",null,"同理，第2块，第34块，以及第（N*32+2）块都被映射到Cache第二块中；可以依次类推其他内存块。")]),l("li",null,[l("p",null,"原理 - 目录表：两部分组成："),l("ul",null,[l("li",null,[l("p",null,"区号")]),l("li",null,[l("p",null,"有效位")])])]),l("li",null,[l("p",null,"原理 - 查找："),l("p",null,"其查找过程如下图所示。"),l("p",null,"首先，内存地址被分成三部分：区号A、块号B和块内地址C。根据区号A在目录表中找到完全相等的区号，"),l("ul",null,[l("li",null,[a("并且在有效位有效的情况下，说明该数据"),l("strong",null,"Cache命中"),a("，然后通过内存地址的块号B获得在Cache中的块地址，加上块内地址C，最终找到数据。")]),l("li",null,[a("如果在目录表中找不到相等的区号，或者有效位无效的情况下，则说明该内容"),l("strong",null,"Cache Miss"),a("，需要到内存中读取。")])]),l("p",null,"图2-6　直接相联Cache查找过程"),l("p",null,[l("img",{src:p,alt:"img",loading:"lazy"})]),l("p",null,"可以看出，直接关联是一种很“死”的映射方法，当映射到同一个Cache块的多个内存块同时需要缓存在Cache中时，只有一个内存块能够缓存，其他块需要被“淘汰”掉。")]),l("li",null,[l("p",null,"优点：其实现方式最为简单，匹配速度也最快。")]),l("li",null,[l("p",null,"缺点：但直接关联型命中率是最低的")])],-1),e('<h3 id="组关联型cache-n-ways-associative-cache" tabindex="-1"><a class="header-anchor" href="#组关联型cache-n-ways-associative-cache"><span>组关联型Cache（N-ways associative cache）</span></a></h3><ul><li><p>特点</p><p>组关联型Cache是目前Cache中用的比较广泛的一种方式，是<strong>前两种Cache的折中形式</strong>。</p><p>在这种方式下，内存被分为很多组，一个组的大小为多个Cache line的大小，一个组映射到对应的多个连续的Cache line，也就是一个Cache组，并且该组内的任意一块可以映射到对应Cache组的任意一个。可以看出：</p><ul><li>在组外，其采用直接关联型Cache的映射方式</li><li>在组内，其采用全关联型Cache的映射方式。</li></ul><p>假设有一个4路组关联型Cache，其大小为1M，一个Cache line的大小为64B，那么总共有16K个Cache line，但是在4路组关联的情况下，我们并不是简简单单拥有16K个Cache line，而是拥有了4K个组，每个组有4个Cache line。一个内存单元可以缓存到它所对应的组中的任意一个Cache line中去。</p></li><li><p>原理 - 目录表：三部分组成：</p><ul><li>“区号+块号”</li><li>Cache块号</li><li>有效位</li></ul></li><li><p>原理 - 查找</p><p>图2-7以4路组关联型Cache为例介绍其在Cache中的查找过程。当收到一个内存地址时，该地址被分成四部分：区号A、组号B、块号C和块内地址D。首先，根据组号B按地址查找到一组目录表项，在4路组关联中，则有四个表项，每个表项都有可能存放该内存块；然后，根据区号A和块号C在该组表项中进行关联查找（即并行查找，为了提高效率），如果匹配且有效位有效，则表明该数据块缓存在Cache中，得到Cache块号，加上块内地址D，可以得到该内存地址在Cache中映射的地址，得到数据；如果没有找到匹配项或者有效位无效，则表示该内存块不在Cache中，需要处理器到内存中读取。</p><p>图2-7　4路组关联型Cache查找过程</p><p><img src="'+r+'" alt="img" loading="lazy"></p><p>实际上，直接关联型Cache和全关联型Cache只是组关联型Cache的特殊情况。</p><ul><li>当组内Cache Line数目为1时，即为直接关联型Cache。</li><li>而当组内Cache Line数目和Cache大小相等时，即整个Cache只有一个组，这成为全关联型Cache。</li></ul></li></ul>',2)]))}const u=t(h,[["render",m],["__file","03. Cache地址映射和变换.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/02.%20Cache%E5%92%8C%E5%86%85%E5%AD%98/03.%20Cache%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%92%8C%E5%8F%98%E6%8D%A2.html","title":"Cache地址映射和变换","lang":"zh-CN","frontmatter":{"description":"Cache地址映射和变换 这章的重点是：Cache和内存的 数据交换，关系Cache和内存的读写。 底层细节和术语 为了进行Cache和内存的数据交换，这里介绍一点底层细节和术语： 分块机制 这里的分“块”指的“块”也叫“CacheLine”，Cache和内存以块为单位进行数据交换，块的大小通常以在内存的一个存储周期中能够访问到的数据长度为限。 Not...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/02.%20Cache%E5%92%8C%E5%86%85%E5%AD%98/03.%20Cache%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%92%8C%E5%8F%98%E6%8D%A2.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Cache地址映射和变换"}],["meta",{"property":"og:description","content":"Cache地址映射和变换 这章的重点是：Cache和内存的 数据交换，关系Cache和内存的读写。 底层细节和术语 为了进行Cache和内存的数据交换，这里介绍一点底层细节和术语： 分块机制 这里的分“块”指的“块”也叫“CacheLine”，Cache和内存以块为单位进行数据交换，块的大小通常以在内存的一个存储周期中能够访问到的数据长度为限。 Not..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cache地址映射和变换\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Cache地址映射和变换","slug":"cache地址映射和变换","link":"#cache地址映射和变换","children":[{"level":2,"title":"底层细节和术语","slug":"底层细节和术语","link":"#底层细节和术语","children":[{"level":3,"title":"分块机制","slug":"分块机制","link":"#分块机制","children":[]},{"level":3,"title":"映射算法","slug":"映射算法","link":"#映射算法","children":[]}]},{"level":2,"title":"三类Cache (粗)","slug":"三类cache-粗","link":"#三类cache-粗","children":[{"level":3,"title":"提前总结、比较","slug":"提前总结、比较","link":"#提前总结、比较","children":[]},{"level":3,"title":"全关联型Cache（full associative cache）","slug":"全关联型cache-full-associative-cache","link":"#全关联型cache-full-associative-cache","children":[]},{"level":3,"title":"直接关联型Cache（direct mapped cache）","slug":"直接关联型cache-direct-mapped-cache","link":"#直接关联型cache-direct-mapped-cache","children":[]},{"level":3,"title":"组关联型Cache（N-ways associative cache）","slug":"组关联型cache-n-ways-associative-cache","link":"#组关联型cache-n-ways-associative-cache","children":[]}]}]}],"git":{},"readingTime":{"minutes":8.02,"words":2405},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/03. Cache地址映射和变换.md","excerpt":"\\n<p>这章的重点是：<strong>Cache和内存的 数据交换</strong>，关系Cache和内存的读写。</p>\\n<h2>底层细节和术语</h2>\\n<p>为了进行Cache和内存的数据交换，这里介绍一点底层细节和术语：</p>\\n<h3>分块机制</h3>\\n<p>这里的分“块”指的“块”也叫“CacheLine”，Cache和内存以块为单位进行数据交换，块的大小通常以在内存的一个存储周期中能够访问到的数据长度为限。</p>\\n\\n<div class=\\"callout\\" data-callout=\\"note\\">\\n<div class=\\"callout-title\\">\\n<div class=\\"callout-title-icon\\">\\n<svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"lucide lucide-pencil\\"><path d=\\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\\"></path><path d=\\"m15 5 4 4\\"></path></svg>\\n</div>\\n<div class=\\"callout-title-inner\\">Note</div>\\n</div>\\n<div class=\\"callout-content\\"><p></p>\\n<p>(GPT) 术语：<strong>Cache Line (缓存行)</strong></p>\\n<ul>\\n<li>概念：缓存行是内存中基本单位/<strong>最小的数据单位，它可以被加载到缓存中</strong>。</li>\\n<li>包含内容：一个缓存行通常包含：\\n<ul>\\n<li>实际的数据</li>\\n<li>一些元数据（例如有效位、脏位、共享状态等）</li>\\n</ul>\\n</li>\\n<li>大小：是最小数据单位。且其大小通常是固定的，并且因不同的处理器架构而异。常见的有：\\n<ul>\\n<li>32字节： 较早的ARM、1990年~2000年早期的x86和PowerPC</li>\\n<li>64字节： 较新的ARM和x86</li>\\n<li>128字节： 较新的Power ISA机器</li>\\n</ul>\\n</li>\\n<li><strong>机制 - 整个加载以利用局部性原理</strong>：每次从主内存读取数据时，不仅仅是请求的特定字节会被加载，而是整个缓存行都会被加载到缓存中。\\n这样做的目的是为了利用局部性原理（Locality Principle），即程序往往连续访问内存中的数据或在短时间内重复访问相同的数据。</li>\\n<li><strong>机制 - 缓存行对齐以确保高效加载</strong>：数据在内存中的位置需要与缓存行边界对齐</li>\\n</ul>\\n</div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/03. Cache地址映射和变换.md","value":{"title":"03. Cache地址映射和变换","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/03. Cache地址映射和变换.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,g as data};
