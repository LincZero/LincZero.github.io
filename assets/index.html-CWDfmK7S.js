import{_ as e,e as l,g as n,o as a}from"./app-HvNDXJEG.js";const t="/assets/3-%E6%8F%90%E7%BA%B2-C0flc2tj.jpg",o="/assets/4-%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4-0UBgrp3p.jpg",s={};function r(p,i){return a(),l("div",null,i[0]||(i[0]=[n('<h1 id="进程通信方式" tabindex="-1"><a class="header-anchor" href="#进程通信方式"><span>进程通信方式</span></a></h1><h2 id="六种进程通信" tabindex="-1"><a class="header-anchor" href="#六种进程通信"><span>六种进程通信</span></a></h2><p><img src="'+t+'" alt="img" loading="lazy"></p><h3 id="六种方式1" tabindex="-1"><a class="header-anchor" href="#六种方式1"><span>六种方式1</span></a></h3><ol><li>套接字 Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li><li>管道 pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 <ul><li>命名管道 FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li></ul></li><li>消息队列 MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>共享存储 SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li><li>信号量 Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>信号 Sinal ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h3 id="六种方式2" tabindex="-1"><a class="header-anchor" href="#六种方式2"><span>六种方式2</span></a></h3><ol><li>匿名管道 <ul><li>缺点1：<strong>效率低、无格式、单向</strong>。通信的数据是无格式的流并且大小受限，通信的方式是单向的，数据只能在一个方向上流动，如果要双向通信，需要创建两个管道</li><li>缺点2：<strong>需亲缘关系</strong>。匿名管道是只能用于存在父子关系的进程间通信，匿名管道的生命周期随着进程创建而建立，随着进程终止而消失。</li><li>本质：<strong>内核缓存</strong></li></ul></li><li>命名管道 <ul><li>改进1：<strong>非亲缘</strong>。突破了匿名管道只能在亲缘关系进程间的通信限制，因为使用命名管道的前提，需要在文件系统创建一个类型为 p 的设备文件，那么毫无关系的进程就可以通过这个设备文件进行通信。</li><li>本质：<strong>内核缓存、先进先出</strong>。另外，不管是匿名管道还是命名管道，进程写入的数据都是缓存在内核中，另一个进程读取数据时候自然也是从内核中获取，同时通信数据都遵循先进先出原则，不支持 lseek 之类的文件定位操作。</li></ul></li><li>消息队列 <ul><li>改进1：<strong>有格式</strong>。克服了管道通信的数据是无格式的字节流的问题，消息队列实际上是保存在内核的「消息链表」，消息队列的消息体是可以用户自定义的数据类型，发送数据时，会被分成一个一个独立的消息体，当然接收数据时，也要与发送方发送的消息体的数据类型保持一致，这样才能保证读取的数据是正确的。</li><li>缺点：<strong>有用户内核态切换损耗</strong>。消息队列通信的速度不是最及时的，毕竟每次数据的写入和读取都需要经过用户态与内核态之间的拷贝过程。</li><li>本质：<strong>内核的消息链表</strong></li></ul></li><li>共享内存 <ul><li>改进：<strong>无用户内核态切换损耗</strong>。可以解决消息队列通信中用户态与内核态之间数据拷贝过程带来的开销，它直接分配一个共享空间，每个进程都可以直接访问，就像访问进程自己的空间一样快捷方便，不需要陷入内核态或者系统调用，大大提高了通信的速度，享有最快的进程间通信方式之名。</li><li>缺点：<strong>进程竞争负担</strong>。但是便捷高效的共享内存通信，带来新的问题，多进程竞争同个共享资源会造成数据的错乱。</li><li>本质：<strong>两个虚拟内存的某段映射到同一物理空间</strong></li></ul></li><li>信号量 <ul><li>改进1：<strong>互斥进程竞争</strong>。那么，就需要信号量来保护共享资源，以确保任何时刻只能有一个进程访问共享资源，这种方式就是互斥访问。</li><li>新功能：<strong>可以进行互斥和同步</strong>。信号量不仅可以实现访问的互斥性，还可以实现进程间的同步，信号量其实是一个计数器，表示的是资源个数，其值可以通过两个原子操作来控制，分别是 P 操作和 V 操作</li><li>本质：<strong>整型的计数器</strong></li></ul></li><li>信号 <ul><li>特点：<strong>唯一的异步通信机制</strong>。进程间通信机制中唯一的异步通信机制</li></ul></li><li>Socket <ul><li>特点：<strong>能跨主机通信</strong>。前面说到的通信机制，都是工作于同一台主机，如果要与不同主机的进程间通信，那么就需要 Socket 通信了。</li></ul></li></ol><h2 id="总结与比较六种通信方式" tabindex="-1"><a class="header-anchor" href="#总结与比较六种通信方式"><span>总结与比较六种通信方式</span></a></h2><h3 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点"><span>共同点</span></a></h3><p>每个进程的用户地址空间都是独立的，一般而言是不能互相访问的，但内核空间是每个进程都共享的，所以<strong>进程之间要通信必须通过内核</strong>。</p><p>上面六种进程通信方式都是通过Linux内核来提供的</p><p><img src="'+o+'" alt="img" loading="lazy"></p><h3 id="选用" tabindex="-1"><a class="header-anchor" href="#选用"><span>选用</span></a></h3><ul><li>匿名管道：简单，单向，无格式字节流</li><li>命名管道：Super：可不亲缘</li><li>信息队列：Super：有格式</li><li>共享内存：Super：</li><li>不同主机 <ul><li>Socket</li></ul></li></ul><h2 id="线程通信" tabindex="-1"><a class="header-anchor" href="#线程通信"><span>线程通信</span></a></h2><p>以上，就是进程间通信的主要机制了。你可能会问了，那线程通信间的方式呢？</p><p>同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信，比如全局变量。</p><p><strong>所以对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题</strong>，信号量也同样可以在线程间实现互斥与同步：</p><ul><li>互斥的方式，可保证任意时刻只有一个线程访问共享资源；</li><li>同步的方式，可保证线程 A 应在线程 B 之前执行；</li></ul><h2 id="旧笔记" tabindex="-1"><a class="header-anchor" href="#旧笔记"><span>（旧笔记）</span></a></h2><h3 id="信号" tabindex="-1"><a class="header-anchor" href="#信号"><span>信号</span></a></h3><p>Linux提供了几十种信号，分别代表着不同的意义。信号之间依靠他们的值来区分，但是通常在程序中使用信号的名字来表示一个信号。在Linux系统中，这些信号和以他们的名称命名的常量被定义在/usr/includebitssignum.h文件中。通常程序中直接包含 <code>&lt;signal.h&gt;</code> 就好。</p><p>信号事件有两个来源：</p><ol><li>硬件来源，例如按下了cltr+C，通常产生中断信号sigint</li><li>软件来源，例如使用系统调用或者命令发出信号。最常用的发送信号的系统函数是kill,raise,setitimer,sigation,sigqueue函数。软件来源还包括一些非法运算等操作。</li></ol><p>一旦有信号产生，用户进程对信号产生的相应有三种方式：</p><ol><li>执行默认操作，linux对每种信号都规定了默认操作。</li><li>捕捉信号，定义信号处理函数，当信号发生时，执行相应的处理函数。</li><li>忽略信号，当不希望接收到的信号对进程的执行产生影响，而让进程继续执行时，可以忽略该信号，即不对信号进程作任何处理。<br> 有两个信号是应用进程无法捕捉和忽略的，即SIGKILL和SEGSTOP，这是为了使系统管理员能在任何时候中断或结束某一特定的进程。</li></ol><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道"><span>管道</span></a></h3><p>管道允许在进程之间按先进先出的方式传送数据，是进程间通信的一种常见方式。</p><p>管道是Linux 支持的最初Unix IPC形式之一，具有以下特点：</p><ol><li>管道是<strong>半双工的</strong>，数据只能向一个方向流动；<strong>需要双方通信时，需要建立起两个管道</strong>；</li><li>匿名管道只能用于父子进程或者兄弟进程之间（具有亲缘关系的进程）；</li><li>单独构成一种独立的文件系统：管道对于管道两端的进程而言，就是一个文件，但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在与内存中。</li></ol><h4 id="无名管道" tabindex="-1"><a class="header-anchor" href="#无名管道"><span>无名管道</span></a></h4><h4 id="命名管道" tabindex="-1"><a class="header-anchor" href="#命名管道"><span>命名管道</span></a></h4><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><p>消息队列，就是一个消息的链表，是一系列保存在内核中消息的列表。用户进程可以向消息队列添加消息，也可以向消息队列读取消息。</p><p>消息队列与管道通信相比，其优势是对每个消息指定特定的消息类型，接收的时候不需要按照队列次序，而是可以根据自定义条件接收特定类型的消息。</p><h3 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存"><span>共享内存</span></a></h3><h4 id="内存映射" tabindex="-1"><a class="header-anchor" href="#内存映射"><span>内存映射</span></a></h4>',37)]))}const c=e(s,[["render",r],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/02.%20%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/","title":"进程通信方式","lang":"zh-CN","frontmatter":{"description":"进程通信方式 六种进程通信 img 六种方式1 套接字 Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。 管道 pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 命名管道 FIFO：有名管道也是半双工的通信方式，但是它允许无...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/02.%20%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"进程通信方式"}],["meta",{"property":"og:description","content":"进程通信方式 六种进程通信 img 六种方式1 套接字 Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。 管道 pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。 命名管道 FIFO：有名管道也是半双工的通信方式，但是它允许无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程通信方式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":8.08,"words":2424},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/README.md","excerpt":"\\n<h2>六种进程通信</h2>\\n<p></p>\\n<h3>六种方式1</h3>\\n<ol>\\n<li>套接字 Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li>\\n<li>管道 pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\\n<ul>\\n<li>命名管道 FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li>\\n</ul>\\n</li>\\n<li>消息队列 MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li>\\n<li>共享存储 SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li>\\n<li>信号量 Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li>\\n<li>信号 Sinal ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/README.md","value":{"title":"05. 进程管理/","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/02. 通信方式/README.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,d as data};
