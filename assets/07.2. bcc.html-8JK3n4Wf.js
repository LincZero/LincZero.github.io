import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-D0lUbzfA.js";const i={},r=n("h1",{id:"bcc-bpf-compiler-collection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#bcc-bpf-compiler-collection"},[n("span",null,"BCC (BPF Compiler Collection)")])],-1),u=n("code",null,"BPF Compiler Collection",-1),d=n("code",null,"BCC",-1),k=n("code",null,"eBPF",-1),b=n("code",null,"Linux",-1),m={href:"https://github.com/iovisor/bcc",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="bcc包括的一些工具" tabindex="-1"><a class="header-anchor" href="#bcc包括的一些工具"><span>BCC包括的一些工具</span></a></h2><p>![Linux bcc/BPF Tracing Tools](07.2. bcc.assets/bcc_tracing_tools_2016.png)</p><h2 id="安装bcc" tabindex="-1"><a class="header-anchor" href="#安装bcc"><span>安装BCC</span></a></h2><p><code>Ubuntu</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/iovisor.list
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> bcc-tools libbcc-examples python-bcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CentOS</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;[iovisor]\\nbaseurl=https://repo.iovisor.org/yum/nightly/f23/$basearch\\nenabled=1\\ngpgcheck=0&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/iovisor.repo
yum <span class="token function">install</span> <span class="token parameter variable">-y</span> bcc-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完成后，<code>bcc</code>工具会放到<code>/usr/share/bcc/tools</code>目录中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">ls</span> /usr/share/bcc/tools
argdist       cachestat  ext4dist        hardirqs        offwaketime  softirqs    tcpconnect  vfscount
bashreadline  cachetop   ext4slower      killsnoop       old          solisten    tcpconnlat  vfsstat
biolatency    capable    filelife        llcstat         oomkill      sslsniff    tcplife     wakeuptime
biosnoop      cpudist    fileslower      mdflush         opensnoop    stackcount  tcpretrans  xfsdist
biotop        dcsnoop    filetop         memleak         pidpersec    stacksnoop  tcptop      xfsslower
bitesize      dcstat     funccount       mountsnoop      profile      statsnoop   tplist      zfsdist
btrfsdist     doc        funclatency     mysqld_qslower  runqlat      syncsnoop   trace       zfsslower
btrfsslower   execsnoop  gethostlatency  offcputime      slabratetop  tcpaccept   ttysnoop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用工具示例" tabindex="-1"><a class="header-anchor" href="#常用工具示例"><span>常用工具示例</span></a></h2><h3 id="capable" tabindex="-1"><a class="header-anchor" href="#capable"><span>capable</span></a></h3><p><code>capable</code>检查<code>Linux</code>进程的<code>security capabilities</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ capable
TIME      <span class="token environment constant">UID</span>    PID    COMM             CAP  NAME                 AUDIT
<span class="token number">22</span>:11:23  <span class="token number">114</span>    <span class="token number">2676</span>   snmpd            <span class="token number">12</span>   CAP_NET_ADMIN        <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">6990</span>   run              <span class="token number">24</span>   CAP_SYS_RESOURCE     <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7003</span>   <span class="token function">chmod</span>            <span class="token number">3</span>    CAP_FOWNER           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7003</span>   <span class="token function">chmod</span>            <span class="token number">4</span>    CAP_FSETID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7005</span>   <span class="token function">chmod</span>            <span class="token number">4</span>    CAP_FSETID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7005</span>   <span class="token function">chmod</span>            <span class="token number">4</span>    CAP_FSETID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7006</span>   <span class="token function">chown</span>            <span class="token number">4</span>    CAP_FSETID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">7006</span>   <span class="token function">chown</span>            <span class="token number">4</span>    CAP_FSETID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">6990</span>   setuidgid        <span class="token number">6</span>    CAP_SETGID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">6990</span>   setuidgid        <span class="token number">6</span>    CAP_SETGID           <span class="token number">1</span>
<span class="token number">22</span>:11:23  <span class="token number">0</span>      <span class="token number">6990</span>   setuidgid        <span class="token number">7</span>    CAP_SETUID           <span class="token number">1</span>
<span class="token number">22</span>:11:24  <span class="token number">0</span>      <span class="token number">7013</span>   run              <span class="token number">24</span>   CAP_SYS_RESOURCE     <span class="token number">1</span>
<span class="token number">22</span>:11:24  <span class="token number">0</span>      <span class="token number">7026</span>   <span class="token function">chmod</span>            <span class="token number">3</span>    CAP_FOWNER           <span class="token number">1</span>
<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcpconnect" tabindex="-1"><a class="header-anchor" href="#tcpconnect"><span>tcpconnect</span></a></h3><p><code>tcpconnect</code>检查活跃的<code>TCP</code>连接，并输出源和目的地址：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./tcpconnect
 PID    COMM         IP SADDR            DADDR            DPORT
 <span class="token number">2462</span>   <span class="token function">curl</span>         <span class="token number">4</span>  <span class="token number">192.168</span>.1.99       <span class="token number">74.125</span>.23.138    <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcptop" tabindex="-1"><a class="header-anchor" href="#tcptop"><span>tcptop</span></a></h3><p><code>tcptop</code>统计TCP发送和接受流量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./tcptop <span class="token parameter variable">-C</span> <span class="token number">1</span> <span class="token number">3</span>
Tracing<span class="token punctuation">..</span>. Output every <span class="token number">1</span> secs. Hit Ctrl-C to end

08:06:45 loadavg: <span class="token number">0.04</span> <span class="token number">0.01</span> <span class="token number">0.00</span> <span class="token number">2</span>/174 <span class="token number">3099</span>

PID    COMM         LADDR                 RADDR                  RX_KB  TX_KB
<span class="token number">1740</span>   sshd         <span class="token number">192.168</span>.1.99:22         <span class="token number">192.168</span>.0.29:60315         <span class="token number">0</span>      <span class="token number">0</span>

08:06:46 loadavg: <span class="token number">0.04</span> <span class="token number">0.01</span> <span class="token number">0.00</span> <span class="token number">2</span>/174 <span class="token number">3099</span>

PID    COMM         LADDR                 RADDR                  RX_KB  TX_KB
<span class="token number">1740</span>   sshd         <span class="token number">192.168</span>.1.99:22         <span class="token number">192.168</span>.0.29:60315         <span class="token number">0</span>      <span class="token number">0</span>

08:06:47 loadavg: <span class="token number">0.04</span> <span class="token number">0.01</span> <span class="token number">0.00</span> <span class="token number">2</span>/174 <span class="token number">3099</span>

PID    COMM         LADDR                 RADDR                  RX_KB  TX_KB
<span class="token number">1740</span>   sshd         <span class="token number">192.168</span>.1.99:22         <span class="token number">192.168</span>.0.29:60315         <span class="token number">0</span>      <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展工具" tabindex="-1"><a class="header-anchor" href="#扩展工具"><span>扩展工具</span></a></h2><p>基于<code>eBPF</code>和<code>bcc</code>，可以很方便的扩展功能。<code>bcc</code>目前支持以下事件</p><ul><li><code>kprobe__kernel_function_name</code> (<code>BPF.attach_kprobe()</code>)</li><li><code>kretprobe__kernel_function_name</code> (<code>BPF.attach_kretprobe()</code>)</li><li><code>TRACEPOINT_PROBE(category, event)</code>，支持的<code>event</code>列表参见<code>/sys/kernel/debug/tracing/events/category/event/format</code></li><li><code>BPF.attach_uprobe()</code>和<code>BPF.attach_uretprobe()</code></li><li>用户自定义探针(USDT) <code>USDT.enable_probe()</code></li></ul><h3 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF

text<span class="token operator">=</span><span class="token string">&#39;int kprobe__sys_sync(void *ctx) { bpf_trace_printk(&quot;Hello, World!\\\\n&quot;); return 0; }&#39;</span>
prog<span class="token operator">=</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
int hello(void *ctx) {
        bpf_trace_printk(&quot;Hello, World!\\\\n&quot;);
        return 0;
}
&quot;&quot;&quot;</span>

b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>text<span class="token operator">=</span>prog<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>attach_kprobe<span class="token punctuation">(</span>event<span class="token operator">=</span><span class="token string">&quot;sys_clone&quot;</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-18s %-16s %-6s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&quot;TIME(s)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;COMM&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MESSAGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token punctuation">(</span>task<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> ts<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">.</span>trace_fields<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-18.9f %-16s %-6d %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>ts<span class="token punctuation">,</span> task<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用bpf-perf-output" tabindex="-1"><a class="header-anchor" href="#使用bpf-perf-output"><span>使用<code>BPF_PERF_OUTPUT</code></span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF
<span class="token keyword">import</span> ctypes <span class="token keyword">as</span> ct

<span class="token comment"># load BPF program</span>
b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
struct data_t {
    u64 ts;
};

BPF_PERF_OUTPUT(events);

void kprobe__sys_sync(void *ctx) {
    struct data_t data = {};
    data.ts = bpf_ktime_get_ns() / 1000;
    events.perf_submit(ctx, &amp;data, sizeof(data));
};
&quot;&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _fields_ <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token string">&quot;ts&quot;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

<span class="token comment"># header</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-18s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&quot;TIME(s)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CALL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># process event</span>
<span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    event <span class="token operator">=</span> ct<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ct<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contents
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-18.9f sync()&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>ts<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># loop with callback to print_event</span>
b<span class="token punctuation">[</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open_perf_buffer<span class="token punctuation">(</span>print_event<span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    b<span class="token punctuation">.</span>kprobe_poll<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),h={href:"https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md",target:"_blank",rel:"noopener noreferrer"},_=t(`<h3 id="用户自定义探针示例" tabindex="-1"><a class="header-anchor" href="#用户自定义探针示例"><span>用户自定义探针示例</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function
<span class="token keyword">from</span> bcc <span class="token keyword">import</span> BPF
<span class="token keyword">from</span> time <span class="token keyword">import</span> strftime
<span class="token keyword">import</span> ctypes <span class="token keyword">as</span> ct

<span class="token comment"># load BPF program</span>
bpf_text <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
#include &lt;uapi/linux/ptrace.h&gt;

struct str_t {
    u64 pid;
    char str[80];
};

BPF_PERF_OUTPUT(events);

int printret(struct pt_regs *ctx) {
    struct str_t data  = {};
    u32 pid;
    if (!PT_REGS_RC(ctx))
        return 0;
    pid = bpf_get_current_pid_tgid();
    data.pid = pid;
    bpf_probe_read(&amp;data.str, sizeof(data.str), (void *)PT_REGS_RC(ctx));
    events.perf_submit(ctx,&amp;data,sizeof(data));

    return 0;
};
&quot;&quot;&quot;</span>
STR_DATA <span class="token operator">=</span> <span class="token number">80</span>

<span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>Structure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    _fields_ <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token string">&quot;pid&quot;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>c_ulonglong<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>c_char <span class="token operator">*</span> STR_DATA<span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

b <span class="token operator">=</span> BPF<span class="token punctuation">(</span>text<span class="token operator">=</span>bpf_text<span class="token punctuation">)</span>
b<span class="token punctuation">.</span>attach_uretprobe<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">,</span> sym<span class="token operator">=</span><span class="token string">&quot;readline&quot;</span><span class="token punctuation">,</span> fn_name<span class="token operator">=</span><span class="token string">&quot;printret&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># header</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-9s %-6s %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&quot;TIME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;COMMAND&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">print_event</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    event <span class="token operator">=</span> ct<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>data<span class="token punctuation">,</span> ct<span class="token punctuation">.</span>POINTER<span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contents
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%-9s %-6d %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%H:%M:%S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

b<span class="token punctuation">[</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open_perf_buffer<span class="token punctuation">(</span>print_event<span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
    b<span class="token punctuation">.</span>kprobe_poll<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># ./bashreadline</span>
TIME      PID    COMMAND
<span class="token number">08</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">44</span>  <span class="token number">2070</span>   ls <span class="token operator">/</span>
<span class="token number">08</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">56</span>  <span class="token number">2070</span>   ping <span class="token operator">-</span>c3 google<span class="token punctuation">.</span>com

<span class="token comment"># ./gethostlatency</span>
TIME      PID    COMM                  LATms HOST
<span class="token number">08</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">26</span>  <span class="token number">3370</span>   ping                   <span class="token number">2.00</span> google<span class="token punctuation">.</span>com
<span class="token number">08</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">37</span>  <span class="token number">3372</span>   ping                  <span class="token number">56.00</span> baidu<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,3),g={href:"https://www.iovisor.org/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.iovisor.org/technology/ebpf",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.iovisor.org/technology/xdp",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/iovisor/bpf-docs",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.kernel.org/doc/Documentation/networking/filter.txt",target:"_blank",rel:"noopener noreferrer"},y={href:"https://events.linuxfoundation.org/sites/events/files/slides/iovisor-lc-bof-2016.pdf",target:"_blank",rel:"noopener noreferrer"},q={href:"https://suchakra.wordpress.com/2015/08/12/bpf-internals-ii/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/cilium/cilium",target:"_blank",rel:"noopener noreferrer"};function w(A,D){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[u,s(" ("),d,s(")是基于"),k,s("的"),b,s("内核分析、跟踪、网络监控工具。其源码存放于"),n("a",m,[s("iovisor/bcc"),e(a)]),s("。")]),v,n("p",null,[s("更多的示例参考"),n("a",h,[s("bbc/docs/tutorial_bcc_python_developer.md"),e(a)]),s("。")]),_,n("ul",null,[n("li",null,[n("a",g,[s("iovisor.org"),e(a)])]),n("li",null,[n("a",f,[s("iovisor.org - ebpf"),e(a)])]),n("li",null,[n("a",B,[s("iovisor.org - xdp"),e(a)])]),n("li",null,[n("a",E,[s("iovisor/bpf-docs"),e(a)])]),n("li",null,[n("a",C,[s("kernel.org - fitler"),e(a)])]),n("li",null,[n("a",y,[s("iovisor-lc-bof-2016"),e(a)])]),n("li",null,[n("a",q,[s("BPF Internals – II"),e(a)])]),n("li",null,[n("a",P,[s("Dive into BPF: a list of reading material"),e(a)])]),n("li",null,[n("a",x,[s("cilium/cilium"),e(a)])])])])}const R=o(i,[["render",w],["__file","07.2. bcc.html.vue"]]),I=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.2.%20bcc.html","title":"BCC (BPF Compiler Collection)","lang":"zh-CN","frontmatter":{"tags":["源码"],"description":"BCC (BPF Compiler Collection) BPF Compiler Collection (BCC)是基于eBPF的Linux内核分析、跟踪、网络监控工具。其源码存放于iovisor/bcc。 BCC包括的一些工具 ![Linux bcc/BPF Tracing Tools](07.2. bcc.assets/bcc_tracing_...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/07.2.%20bcc.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"BCC (BPF Compiler Collection)"}],["meta",{"property":"og:description","content":"BCC (BPF Compiler Collection) BPF Compiler Collection (BCC)是基于eBPF的Linux内核分析、跟踪、网络监控工具。其源码存放于iovisor/bcc。 BCC包括的一些工具 ![Linux bcc/BPF Tracing Tools](07.2. bcc.assets/bcc_tracing_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["meta",{"property":"article:tag","content":"源码"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BCC (BPF Compiler Collection)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"BCC (BPF Compiler Collection)","slug":"bcc-bpf-compiler-collection","link":"#bcc-bpf-compiler-collection","children":[{"level":2,"title":"BCC包括的一些工具","slug":"bcc包括的一些工具","link":"#bcc包括的一些工具","children":[]},{"level":2,"title":"安装BCC","slug":"安装bcc","link":"#安装bcc","children":[]},{"level":2,"title":"常用工具示例","slug":"常用工具示例","link":"#常用工具示例","children":[{"level":3,"title":"capable","slug":"capable","link":"#capable","children":[]},{"level":3,"title":"tcpconnect","slug":"tcpconnect","link":"#tcpconnect","children":[]},{"level":3,"title":"tcptop","slug":"tcptop","link":"#tcptop","children":[]}]},{"level":2,"title":"扩展工具","slug":"扩展工具","link":"#扩展工具","children":[{"level":3,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":3,"title":"使用BPF_PERF_OUTPUT","slug":"使用bpf-perf-output","link":"#使用bpf-perf-output","children":[]},{"level":3,"title":"用户自定义探针示例","slug":"用户自定义探针示例","link":"#用户自定义探针示例","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/07.2. bcc.md","excerpt":"\\n<p><code>BPF Compiler Collection</code> (<code>BCC</code>)是基于<code>eBPF</code>的<code>Linux</code>内核分析、跟踪、网络监控工具。其源码存放于<a href=\\"https://github.com/iovisor/bcc\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">iovisor/bcc</a>。</p>\\n<h2>BCC包括的一些工具</h2>\\n<p>![Linux bcc/BPF Tracing Tools](07.2. bcc.assets/bcc_tracing_tools_2016.png)</p>","autoDesc":true}');export{R as comp,I as data};
