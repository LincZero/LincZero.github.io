import{_ as o,e as n,g as s,o as r}from"./app-HvNDXJEG.js";const t={};function a(i,e){return r(),n("div",null,e[0]||(e[0]=[s('<h1 id="msys2-vs-cygwin" tabindex="-1"><a class="header-anchor" href="#msys2-vs-cygwin"><span>Msys2 Vs Cygwin</span></a></h1><h2 id="msys2-vs-other" tabindex="-1"><a class="header-anchor" href="#msys2-vs-other"><span>Msys2 Vs Other</span></a></h2><p>Take from https://www.msys2.org/docs/what-is-msys2/</p><div class="hint-container note"><p class="hint-container-title">注</p><p>MSYS2 与其他项目对比</p><p>如果您想看到更多比较或认为可以改进，请告诉我们。</p><h3 id="msys2-与-wsl" tabindex="-1"><a class="header-anchor" href="#msys2-与-wsl"><span>MSYS2 与 WSL</span></a></h3><p>MSYS2 允许您构建本机 Windows 程序，而使用 <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noopener noreferrer">WSL</a>您只能交叉编译它们，这会使事情变得更加复杂。如果您只是在寻找 Linux CLI 工具，或者无论如何都想构建最终在 Linux 服务器上运行的软件，那么 WSL 是更好的选择。</p><h3 id="msys2-与-chocolatey-的比较" tabindex="-1"><a class="header-anchor" href="#msys2-与-chocolatey-的比较"><span>MSYS2 与 Chocolatey 的比较</span></a></h3><p><a href="https://chocolatey.org/" target="_blank" rel="noopener noreferrer">Chocolatey</a>主要捆绑已构建的（开源和闭源）软件，并使其易于安装/更新。另一方面，在 MSYS2 中，所有软件包都是从源代码构建的，您可以轻松地在您的机器上重现构建。Chocolatey 软件包的优势在于，捆绑的安装程序通常具有更好的 Windows 集成，因为它们设置了文件关联、快捷方式等。而且由于它们不是从源代码构建的，因此还有很多用于 Visual Studio 等闭源软件的软件包，否则很难管理/更新。</p><h3 id="msys2-与-cygwin-的比较" tabindex="-1"><a class="header-anchor" href="#msys2-与-cygwin-的比较"><span>MSYS2 与 Cygwin 的比较</span></a></h3><p>MSYS2 中的 unixy 工具直接基于<a href="https://cygwin.com/" target="_blank" rel="noopener noreferrer">Cygwin</a>，因此存在一些重叠。Cygwin 专注于在 Windows 上构建 Unix 软件，而 MSYS2 专注于构建针对 Windows API 构建的本机软件。</p><h3 id="msys2-与-arch-linux-的比较" tabindex="-1"><a class="header-anchor" href="#msys2-与-arch-linux-的比较"><span>MSYS2 与 Arch Linux 的比较</span></a></h3><p>MSYS2 和<a href="https://www.archlinux.org/" target="_blank" rel="noopener noreferrer">Arch Linux</a>共享软件包管理器及其附带的所有内容，例如构建定义、如何打包规则、更新工作方式、软件包签名方式、软件包运送方式、滚动发布性质等。通过重复使用此功能和概念，我们可以专注于实际软件包，并从 Arch Linux 开发人员的经验和工作中获益。已经熟悉 Arch Linux 的用户也将更容易上手。</p><h3 id="msys2-与-scoop-的比较" tabindex="-1"><a class="header-anchor" href="#msys2-与-scoop-的比较"><span>MSYS2 与 Scoop 的比较</span></a></h3><p>由于缺乏使用<a href="https://scoop.sh/" target="_blank" rel="noopener noreferrer">scoop</a>的经验，请参阅其比较页面：</p><ul><li><a href="https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison" target="_blank" rel="noopener noreferrer">https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison</a></li><li><a href="https://github.com/lukesampson/scoop/wiki/Cygwin-and-MSYS-Comparison" target="_blank" rel="noopener noreferrer">https://github.com/lukesampson/scoop/wiki/Cygwin-and-MSYS-Comparison</a></li></ul></div><h2 id="msys2" tabindex="-1"><a class="header-anchor" href="#msys2"><span>Msys2</span></a></h2><p>Website: https://www.msys2.org/</p><div class="callout" data-callout="quote"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-quote"><path d="M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z"></path><path d="M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z"></path></svg></div><div class="callout-title-inner">Quote</div></div><div class="callout-content"><p></p><p>MSYS2 —— 适用于 Windows 的软件分发和构建平台</p><p><strong>MSYS2</strong>是一组工具和库，为您提供一个易于使用的环境来构建、安装和运行原生 Windows 软件。</p><p><a href="https://mintty.github.io/" target="_blank" rel="noopener noreferrer">它由一个名为mintty</a>的命令行终端 、bash、git 和 subversion 等版本控制系统、tar 和 awk 等工具甚至 autotools 等构建系统组成，所有这些都基于<a href="https://cygwin.com/" target="_blank" rel="noopener noreferrer">Cygwin</a>的修改版本。尽管其中一些核心部分基于 Cygwin，但 MSYS2 的主要重点是为本机 Windows 软件提供构建环境，并且将 Cygwin 使用部分保持在最低限度。MSYS2 为 GCC、mingw-w64、CPython、CMake、Meson、OpenSSL、FFmpeg、Rust、Ruby 等提供了最新的本机构建，仅举几例。</p><p>为了便于安装软件包并保持更新，它提供了一个名为 <a href="https://wiki.archlinux.org/index.php/pacman" target="_blank" rel="noopener noreferrer">Pacman</a>的软件包管理系统，Arch Linux 用户应该很熟悉它。它带来了许多强大的功能，例如依赖项解析和简单的完整系统升级，以及直接且可重复的软件包构建。我们的软件包存储库包含<a href="https://packages.msys2.org/base" target="_blank" rel="noopener noreferrer">3300 多个</a>可立即安装的预构建软件包。</p><p>有关更多详细信息，请参阅<a href="https://www.msys2.org/docs/what-is-msys2/" target="_blank" rel="noopener noreferrer">“什么是 MSYS2？”</a>，其中还将 MSYS2 与其他软件发行版和开发环境（如<a href="https://cygwin.com/" target="_blank" rel="noopener noreferrer">Cygwin</a>、 <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noopener noreferrer">WSL</a>、 <a href="https://chocolatey.org/" target="_blank" rel="noopener noreferrer">Chocolatey</a>、<a href="https://scoop.sh/" target="_blank" rel="noopener noreferrer">Scoop</a>等）进行了比较， 以及<a href="https://www.msys2.org/docs/who-is-using-msys2/" target="_blank" rel="noopener noreferrer">“谁在使用 MSYS2？”，</a>以了解哪些项目正在使用 MSYS2 以及用于什么目的。</p></div></div><h2 id="cygwin" tabindex="-1"><a class="header-anchor" href="#cygwin"><span>Cygwin</span></a></h2><p>略</p>',9)]))}const h=o(t,[["render",a],["__file","Msys2 Vs Cygwin.html.vue"]]),l=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/Build%20Tools/Msys2%20Vs%20Cygwin.html","title":"Msys2 Vs Cygwin","lang":"zh-CN","frontmatter":{"create_time":"2025-02-05T00:00:00.000Z","Author":"LincZero","description":"Msys2 Vs Cygwin Msys2 Vs Other Take from https://www.msys2.org/docs/what-is-msys2/ 注 MSYS2 与其他项目对比 如果您想看到更多比较或认为可以改进，请告诉我们。 MSYS2 与 WSL MSYS2 允许您构建本机 Windows 程序，而使用 WSL您只能交叉编译它们...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E5%BC%80%E5%8F%91%E5%B1%82/Build%20Tools/Msys2%20Vs%20Cygwin.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Msys2 Vs Cygwin"}],["meta",{"property":"og:description","content":"Msys2 Vs Cygwin Msys2 Vs Other Take from https://www.msys2.org/docs/what-is-msys2/ 注 MSYS2 与其他项目对比 如果您想看到更多比较或认为可以改进，请告诉我们。 MSYS2 与 WSL MSYS2 允许您构建本机 Windows 程序，而使用 WSL您只能交叉编译它们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Msys2 Vs Cygwin\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.01,"words":903},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/Msys2 Vs Cygwin.md","excerpt":"\\n<h2>Msys2 Vs Other</h2>\\n<p>Take from https://www.msys2.org/docs/what-is-msys2/</p>\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>MSYS2 与其他项目对比</p>\\n<p>如果您想看到更多比较或认为可以改进，请告诉我们。</p>\\n<h3>MSYS2 与 WSL</h3>\\n<p>MSYS2 允许您构建本机 Windows 程序，而使用&nbsp;<a href=\\"https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">WSL</a>您只能交叉编译它们，这会使事情变得更加复杂。如果您只是在寻找 Linux CLI 工具，或者无论如何都想构建最终在 Linux 服务器上运行的软件，那么 WSL 是更好的选择。</p>\\n<h3>MSYS2 与 Chocolatey 的比较</h3>\\n<p><a href=\\"https://chocolatey.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Chocolatey</a>主要捆绑已构建的（开源和闭源）软件，并使其易于安装/更新。另一方面，在 MSYS2 中，所有软件包都是从源代码构建的，您可以轻松地在您的机器上重现构建。Chocolatey 软件包的优势在于，捆绑的安装程序通常具有更好的 Windows 集成，因为它们设置了文件关联、快捷方式等。而且由于它们不是从源代码构建的，因此还有很多用于 Visual Studio 等闭源软件的软件包，否则很难管理/更新。</p>\\n<h3>MSYS2 与 Cygwin 的比较</h3>\\n<p>MSYS2 中的 unixy 工具直接基于<a href=\\"https://cygwin.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Cygwin</a>，因此存在一些重叠。Cygwin 专注于在 Windows 上构建 Unix 软件，而 MSYS2 专注于构建针对 Windows API 构建的本机软件。</p>\\n<h3>MSYS2 与 Arch Linux 的比较</h3>\\n<p>MSYS2 和<a href=\\"https://www.archlinux.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Arch Linux</a>共享软件包管理器及其附带的所有内容，例如构建定义、如何打包规则、更新工作方式、软件包签名方式、软件包运送方式、滚动发布性质等。通过重复使用此功能和概念，我们可以专注于实际软件包，并从 Arch Linux 开发人员的经验和工作中获益。已经熟悉 Arch Linux 的用户也将更容易上手。</p>\\n<h3>MSYS2 与 Scoop 的比较</h3>\\n<p>由于缺乏使用<a href=\\"https://scoop.sh/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">scoop</a>的经验，请参阅其比较页面：</p>\\n<ul>\\n<li><a href=\\"https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/lukesampson/scoop/wiki/Chocolatey-Comparison</a></li>\\n<li><a href=\\"https://github.com/lukesampson/scoop/wiki/Cygwin-and-MSYS-Comparison\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/lukesampson/scoop/wiki/Cygwin-and-MSYS-Comparison</a></li>\\n</ul>\\n</div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/Msys2 Vs Cygwin.md","value":{"title":"Msys2 Vs Cygwin","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/Msys2 Vs Cygwin.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{h as comp,l as data};
