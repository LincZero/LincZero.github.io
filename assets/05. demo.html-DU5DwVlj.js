import{_ as s,c as a,e as t,o as p}from"./app-xgHpiPmZ.js";const e={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<p>参考：https://blog.csdn.net/caoshangpa/article/details/52839488</p><p>比较抽象的缩写：</p><ul><li>bev：<strong>b</strong>uffer<strong>ev</strong>ent</li></ul><p>服务器</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/bufferevent.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/buffer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/listener.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/util.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/event.h&gt;</span></span>
 
<span class="token keyword">const</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">listener_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evconnlistener</span> <span class="token operator">*</span><span class="token punctuation">,</span> evutil_socket_t<span class="token punctuation">,</span> <span class="token comment">// 监听cb</span>
                 <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> socklen<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">conn_writecb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写</span>
<span class="token keyword">void</span> <span class="token function">conn_readcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读</span>
<span class="token keyword">void</span> <span class="token function">conn_eventcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接</span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am server\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WIN32</span></span>
    WSAData wsaData<span class="token punctuation">;</span>
    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> sin<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sin<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    sin<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">struct</span> <span class="token class-name">evconnlistener</span> <span class="token operator">*</span>listener<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">event_base</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token function">event_base_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not initialize libevent\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    listener <span class="token operator">=</span> <span class="token function">evconnlistener_new_bind</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> listener_cb<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>base<span class="token punctuation">,</span> <span class="token comment">// 事件组1，监听事件</span>
        LEV_OPT_REUSEABLE<span class="token operator">|</span>LEV_OPT_CLOSE_ON_FREE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sin<span class="token punctuation">,</span>
        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listener<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not create a listener\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token function">event_base_dispatch</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">evconnlistener_free</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">event_base_free</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">listener_cb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">evconnlistener</span> <span class="token operator">*</span>listener<span class="token punctuation">,</span> evutil_socket_t fd<span class="token punctuation">,</span>
                 <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>sa<span class="token punctuation">,</span> <span class="token keyword">int</span> socklen<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Detect an connection\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">event_base</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">event_base</span> <span class="token operator">*</span><span class="token punctuation">)</span>user_data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">;</span>
 
    bev <span class="token operator">=</span> <span class="token function">bufferevent_socket_new</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> BEV_OPT_CLOSE_ON_FREE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bev<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not create a bufferevent\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">event_base_loopbreak</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">bufferevent_setcb</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> conn_readcb<span class="token punctuation">,</span> conn_writecb<span class="token punctuation">,</span> conn_eventcb<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件组2，连接成功后，为bufferevent增加事件</span>
    <span class="token function">bufferevent_enable</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> EV_READ<span class="token operator">|</span>EV_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//服务器监听到连接时，给客户端发送第一条消息</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>reply_msg <span class="token operator">=</span> <span class="token string">&quot;I receive a message from server&quot;</span><span class="token punctuation">;</span>
    <span class="token function">bufferevent_write</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> reply_msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">//conn_writecwritecb函数将在bufferevent中的output evbuffer缓冲区发送完成后被调用。</span>
<span class="token comment">//此时evbuffer_get_length(output) = 0，说明output evbuffer缓冲区被清空。</span>
<span class="token comment">//假设发现有10000条记录要发送出去，1次发送10000条将占用大量内存，所以，我们要分批发送</span>
<span class="token comment">//先发送100条数据，假设每条数据为1024字节bufferevent_write(bev,buf,1024 *100);</span>
<span class="token comment">//系统在这100条记录发送完成后将调用conn_writecbb回调函数,然后在该函数中循环发送剩下的</span>
<span class="token comment">//数据</span>
<span class="token keyword">void</span> <span class="token function">conn_writecb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//    struct evbuffer *output = bufferevent_get_output(bev);</span>
<span class="token comment">//    if (evbuffer_get_length(output) == 0)</span>
<span class="token comment">//    {</span>
<span class="token comment">//        printf(&quot;Output evbuffer is flushed\\n&quot;);</span>
<span class="token comment">//        bufferevent_free(bev);</span>
<span class="token comment">//    }</span>
    <span class="token comment">//delay 1 second</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> msg_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> reply_msg<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;I receive a message from server &quot;</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>reply_msg<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>msg_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bufferevent_write</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> reply_msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg_num<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">conn_readcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">evbuffer</span> <span class="token operator">*</span>input <span class="token operator">=</span><span class="token function">bufferevent_get_input</span><span class="token punctuation">(</span>bev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t sz<span class="token operator">=</span><span class="token function">evbuffer_get_length</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> msg<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">bufferevent_read</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">conn_eventcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">short</span> events<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> BEV_EVENT_EOF<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Connection closed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> BEV_EVENT_ERROR<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Got an error on the connection: %s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">bufferevent_free</span><span class="token punctuation">(</span>bev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   clock_t start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/bufferevent.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/buffer.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/listener.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/util.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;event2/event.h&gt;</span></span>
 
<span class="token keyword">const</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> BUFFER_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">conn_writecb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">conn_readcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">conn_eventcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am client\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">WIN32</span></span>
    WSAData wsaData<span class="token punctuation">;</span>
    <span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> srv<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>srv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    srv<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    srv<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
    srv<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">struct</span> <span class="token class-name">event_base</span> <span class="token operator">*</span>base <span class="token operator">=</span> <span class="token function">event_base_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>base<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Could not initialize libevent\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">struct</span> <span class="token class-name">bufferevent</span><span class="token operator">*</span> bev <span class="token operator">=</span> <span class="token function">bufferevent_socket_new</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
                             BEV_OPT_CLOSE_ON_FREE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bufferevent_setcb</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> conn_readcb<span class="token punctuation">,</span> conn_writecb<span class="token punctuation">,</span> conn_eventcb<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件组1</span>
    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token function">bufferevent_socket_connect</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>srv<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bufferevent_enable</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> EV_READ <span class="token operator">|</span> EV_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>flag<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Connect failed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token function">event_base_dispatch</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">event_base_free</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">//conn_writecwritecb函数将在bufferevent中的output evbuffer缓冲区发送完成后被调用。</span>
<span class="token comment">//此时evbuffer_get_length(output) = 0，说明output evbuffer缓冲区被清空。</span>
<span class="token comment">//假设发现有10000条记录要发送出去，1次发送10000条将占用大量内存，所以，我们要分批发送</span>
<span class="token comment">//先发送100条数据，假设每条数据为1024字节bufferevent_write(bev,buf,1024 *100);</span>
<span class="token comment">//系统在这100条记录发送完成后将调用conn_writecbb回调函数,然后在该函数中循环发送剩下的</span>
<span class="token comment">//数据</span>
<span class="token keyword">void</span> <span class="token function">conn_writecb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//    struct evbuffer *output = bufferevent_get_output(bev);</span>
<span class="token comment">//    if (evbuffer_get_length(output) == 0)</span>
<span class="token comment">//    {</span>
<span class="token comment">//        printf(&quot;Output evbuffer is flushed\\n&quot;);</span>
<span class="token comment">//        bufferevent_free(bev);</span>
<span class="token comment">//    }</span>
    <span class="token comment">//delay 1 second</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> msg_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> reply_msg<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;I receive a message from client &quot;</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sprintf</span><span class="token punctuation">(</span>reply_msg<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>msg_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bufferevent_write</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> reply_msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    msg_num<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">conn_readcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">evbuffer</span> <span class="token operator">*</span>input <span class="token operator">=</span><span class="token function">bufferevent_get_input</span><span class="token punctuation">(</span>bev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t sz<span class="token operator">=</span><span class="token function">evbuffer_get_length</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> msg<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">bufferevent_read</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">conn_eventcb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bufferevent</span> <span class="token operator">*</span>bev<span class="token punctuation">,</span> <span class="token keyword">short</span> events<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> BEV_EVENT_EOF<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Connection closed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> BEV_EVENT_ERROR<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Got an error on the connection: %s\\n&quot;</span><span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> events <span class="token operator">&amp;</span> BEV_EVENT_CONNECTED<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Connect succeed\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//客户端链接成功后，给服务器发送第一条消息</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>reply_msg <span class="token operator">=</span> <span class="token string">&quot;I receive a message from client&quot;</span><span class="token punctuation">;</span>
        <span class="token function">bufferevent_write</span><span class="token punctuation">(</span>bev<span class="token punctuation">,</span> reply_msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>reply_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token function">bufferevent_free</span><span class="token punctuation">(</span>bev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">int</span> ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   clock_t start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会发现，服务端比客户端会多一个事件组</p>`,8)]))}const u=s(e,[["render",o],["__file","05. demo.html.vue"]]),i=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/05.%20demo.html","title":"","lang":"zh-CN","frontmatter":{"description":"参考：https://blog.csdn.net/caoshangpa/article/details/52839488 比较抽象的缩写： bev：bufferevent 服务器 客户端 会发现，服务端比客户端会多一个事件组","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libevent/05.%20demo.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"参考：https://blog.csdn.net/caoshangpa/article/details/52839488 比较抽象的缩写： bev：bufferevent 服务器 客户端 会发现，服务端比客户端会多一个事件组"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.48,"words":1043},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libevent/05. demo.md","excerpt":"<p>参考：https://blog.csdn.net/caoshangpa/article/details/52839488</p>\\n<p>比较抽象的缩写：</p>\\n<ul>\\n<li>bev：<strong>b</strong>uffer<strong>ev</strong>ent</li>\\n</ul>\\n<p>服务器</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;time.h&gt;</span></span>\\n \\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;event2/bufferevent.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;event2/buffer.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;event2/listener.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;event2/util.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;event2/event.h&gt;</span></span>\\n \\n<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> PORT <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2500</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span> BUFFER_SIZE <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">listener_cb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">evconnlistener</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> evutil_socket_t<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 监听cb</span>\\n                 <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> socklen<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_writecb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 写</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_readcb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 读</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_eventcb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">short</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 连接</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">delay</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> ms<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> argc<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span><span class=\\"token operator\\">*</span>argv<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"I am server\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifdef</span> <span class=\\"token expression\\">WIN32</span></span>\\n    WSAData wsaData<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">WSAStartup</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">MAKEWORD</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>wsaData<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr_in</span> sin<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>sin<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>sin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    sin<span class=\\"token punctuation\\">.</span>sin_family <span class=\\"token operator\\">=</span> AF_INET<span class=\\"token punctuation\\">;</span>\\n    sin<span class=\\"token punctuation\\">.</span>sin_port <span class=\\"token operator\\">=</span> <span class=\\"token function\\">htons</span><span class=\\"token punctuation\\">(</span>PORT<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">evconnlistener</span> <span class=\\"token operator\\">*</span>listener<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">event_base</span> <span class=\\"token operator\\">*</span>base <span class=\\"token operator\\">=</span> <span class=\\"token function\\">event_base_new</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>base<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Could not initialize libevent\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    listener <span class=\\"token operator\\">=</span> <span class=\\"token function\\">evconnlistener_new_bind</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> listener_cb<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>base<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// 事件组1，监听事件</span>\\n        LEV_OPT_REUSEABLE<span class=\\"token operator\\">|</span>LEV_OPT_CLOSE_ON_FREE<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>sin<span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>sin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>listener<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Could not create a listener\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n \\n    <span class=\\"token function\\">event_base_dispatch</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">evconnlistener_free</span><span class=\\"token punctuation\\">(</span>listener<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">event_base_free</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n \\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"done\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">listener_cb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">evconnlistener</span> <span class=\\"token operator\\">*</span>listener<span class=\\"token punctuation\\">,</span> evutil_socket_t fd<span class=\\"token punctuation\\">,</span>\\n                 <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span> <span class=\\"token operator\\">*</span>sa<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> socklen<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>user_data<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Detect an connection\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">event_base</span> <span class=\\"token operator\\">*</span>base <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">event_base</span> <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span>user_data<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span>bev<span class=\\"token punctuation\\">;</span>\\n \\n    bev <span class=\\"token operator\\">=</span> <span class=\\"token function\\">bufferevent_socket_new</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> fd<span class=\\"token punctuation\\">,</span> BEV_OPT_CLOSE_ON_FREE<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>bev<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Could not create a bufferevent\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">event_base_loopbreak</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">bufferevent_setcb</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">,</span> conn_readcb<span class=\\"token punctuation\\">,</span> conn_writecb<span class=\\"token punctuation\\">,</span> conn_eventcb<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">NULL</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 事件组2，连接成功后，为bufferevent增加事件</span>\\n    <span class=\\"token function\\">bufferevent_enable</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">,</span> EV_READ<span class=\\"token operator\\">|</span>EV_WRITE<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//服务器监听到连接时，给客户端发送第一条消息</span>\\n    <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>reply_msg <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"I receive a message from server\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">bufferevent_write</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">,</span> reply_msg<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>reply_msg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token comment\\">//conn_writecwritecb函数将在bufferevent中的output evbuffer缓冲区发送完成后被调用。</span>\\n<span class=\\"token comment\\">//此时evbuffer_get_length(output) = 0，说明output evbuffer缓冲区被清空。</span>\\n<span class=\\"token comment\\">//假设发现有10000条记录要发送出去，1次发送10000条将占用大量内存，所以，我们要分批发送</span>\\n<span class=\\"token comment\\">//先发送100条数据，假设每条数据为1024字节bufferevent_write(bev,buf,1024 *100);</span>\\n<span class=\\"token comment\\">//系统在这100条记录发送完成后将调用conn_writecbb回调函数,然后在该函数中循环发送剩下的</span>\\n<span class=\\"token comment\\">//数据</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_writecb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span>bev<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>user_data<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token comment\\">//    struct evbuffer *output = bufferevent_get_output(bev);</span>\\n<span class=\\"token comment\\">//    if (evbuffer_get_length(output) == 0)</span>\\n<span class=\\"token comment\\">//    {</span>\\n<span class=\\"token comment\\">//        printf(\\"Output evbuffer is flushed\\\\n\\");</span>\\n<span class=\\"token comment\\">//        bufferevent_free(bev);</span>\\n<span class=\\"token comment\\">//    }</span>\\n    <span class=\\"token comment\\">//delay 1 second</span>\\n    <span class=\\"token function\\">delay</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> msg_num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> reply_msg<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token char\\">'\\\\0'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> <span class=\\"token operator\\">*</span>str <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"I receive a message from server \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">memcpy</span><span class=\\"token punctuation\\">(</span>reply_msg<span class=\\"token punctuation\\">,</span>str<span class=\\"token punctuation\\">,</span><span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">sprintf</span><span class=\\"token punctuation\\">(</span>reply_msg<span class=\\"token operator\\">+</span><span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"%d\\"</span><span class=\\"token punctuation\\">,</span>msg_num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">bufferevent_write</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">,</span> reply_msg<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>reply_msg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    msg_num<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_readcb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span>bev<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>user_data<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">evbuffer</span> <span class=\\"token operator\\">*</span>input <span class=\\"token operator\\">=</span><span class=\\"token function\\">bufferevent_get_input</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    size_t sz<span class=\\"token operator\\">=</span><span class=\\"token function\\">evbuffer_get_length</span><span class=\\"token punctuation\\">(</span>input<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sz <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">char</span> msg<span class=\\"token punctuation\\">[</span>BUFFER_SIZE<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token char\\">'\\\\0'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">bufferevent_read</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">,</span> msg<span class=\\"token punctuation\\">,</span> sz<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%s\\\\n\\"</span><span class=\\"token punctuation\\">,</span> msg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">conn_eventcb</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bufferevent</span> <span class=\\"token operator\\">*</span>bev<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">short</span> events<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>user_data<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>events <span class=\\"token operator\\">&amp;</span> BEV_EVENT_EOF<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Connection closed\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>events <span class=\\"token operator\\">&amp;</span> BEV_EVENT_ERROR<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Got an error on the connection: %s\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">strerror</span><span class=\\"token punctuation\\">(</span>errno<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token function\\">bufferevent_free</span><span class=\\"token punctuation\\">(</span>bev<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">delay</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> ms<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n   clock_t start <span class=\\"token operator\\">=</span> <span class=\\"token function\\">clock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">clock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> start <span class=\\"token operator\\">&lt;</span> ms<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{u as comp,i as data};
