import{_ as e,c as r,e as n,o as l}from"./app-DEUP2Tjk.js";const i={};function a(d,t){return l(),r("div",null,t[0]||(t[0]=[n('<h1 id="《c-设计模式》视频-李建忠" tabindex="-1"><a class="header-anchor" href="#《c-设计模式》视频-李建忠"><span>《C++设计模式》视频_李建忠</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="设计模式分类与使用建议" tabindex="-1"><a class="header-anchor" href="#设计模式分类与使用建议"><span>设计模式分类与使用建议</span></a></h1><h2 id="gof-23模式分类" tabindex="-1"><a class="header-anchor" href="#gof-23模式分类"><span>GOF-23模式分类</span></a></h2><ul><li><p>从目的来看（《设计模式：可复用面向对象》中的分类）</p><ul><li><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">中译</th><th style="text-align:center;">设计模式</th></tr></thead><tbody><tr><td style="text-align:center;">创建型模式<br>（Creational）<br>5</td><td style="text-align:center;">抽象工厂<br>构建器（生成器）<br>工厂方法<br>原型<br>单件（单例）</td><td style="text-align:center;">Abstract Factory<br>Builder<br>Factory Method<br>Prototype<br>Singleton</td></tr><tr><td style="text-align:center;">结构型模式<br>（Structural）<br>7</td><td style="text-align:center;">适配器<br>桥接模式<br>组成<br>装饰<br>外观（门面）<br>享元<br>代理</td><td style="text-align:center;">Adapter<br>Bridge<br>Composite<br>Decorator<br>Facade<br>Flyweight<br>Proxy</td></tr><tr><td style="text-align:center;">行为型模式<br>（Behavioral）<br>11</td><td style="text-align:center;">职责链<br>命令<br>解释器（解析器）<br>迭代器<br>中介者<br>备忘录<br>观察者<br>状态<br>策略<br>模板方法<br>访问者</td><td style="text-align:center;">Chain of Responsibility<br>Command<br>Interpreter<br>Iterator<br>Mediator<br>Memento<br>Observer<br>State<br>Strategy<br>Template Method<br>Visitor</td></tr></tbody></table></li></ul></li><li><p>从范围来看</p><ul><li>类模式：处理类与子类的静态关系（偏重继承方案）</li><li>对象模式：处理对象间的动态关系（偏重组合方案）</li></ul></li><li><p>从封装变化角度对模式分类（《设计模式_李建忠视频》中的分类）（其中划掉部分表示比较少用或过时）</p><ul><li><table><thead><tr><th style="text-align:center;">分类</th><th style="text-align:center;">中译</th><th style="text-align:center;">设计模式</th><th style="text-align:center;">目的分类</th></tr></thead><tbody><tr><td style="text-align:center;">组件协作</td><td style="text-align:center;">模板方法<br>策略模式<br>观察者模式</td><td style="text-align:center;">Template Method<br>Strategy<br>Observer/Event</td><td style="text-align:center;">行为型</td></tr><tr><td style="text-align:center;">单一职责</td><td style="text-align:center;">装饰模式<br>桥接模式</td><td style="text-align:center;">Decorator<br>Bridge</td><td style="text-align:center;">结构型</td></tr><tr><td style="text-align:center;">对象创建</td><td style="text-align:center;">工厂模式<br>抽象工厂<br>原型模式<br><s>构建器模式</s></td><td style="text-align:center;">Factory Method<br>Abstract Factory<br>Prototype<br>Builder</td><td style="text-align:center;">创建型</td></tr><tr><td style="text-align:center;">对象性能</td><td style="text-align:center;">单件模式<br>享元模式</td><td style="text-align:center;">Singleton<br>Flyweight</td><td style="text-align:center;">创建型<br>结构型</td></tr><tr><td style="text-align:center;">接口隔离</td><td style="text-align:center;">门面模式<br>代理模式<br>适配器<br><s>中介者模式</s></td><td style="text-align:center;">Facade<br>Proxy<br>Adapter<br>Mediator</td><td style="text-align:center;">结构型<br>行为型</td></tr><tr><td style="text-align:center;">状态变化</td><td style="text-align:center;">状态模式<br><s>备忘录模式</s></td><td style="text-align:center;">State<br>Memento</td><td style="text-align:center;">行为型</td></tr><tr><td style="text-align:center;">数据结构</td><td style="text-align:center;">组合模式<br><s>迭代器模式</s><br><s>职责链模式</s></td><td style="text-align:center;">Composite<br>Iterator<br>Chain of Responsibility</td><td style="text-align:center;">结构型<br>行为型</td></tr><tr><td style="text-align:center;">行为变化</td><td style="text-align:center;"><s>命令模式</s><br><s>访问器模式</s></td><td style="text-align:center;">Command<br>Visitor</td><td style="text-align:center;">行为型</td></tr><tr><td style="text-align:center;">领域问题</td><td style="text-align:center;"><s>解析器模式</s></td><td style="text-align:center;">Interpreter</td><td style="text-align:center;">行为型</td></tr></tbody></table></li></ul></li></ul><h2 id="重构-refactoring-to-patterns-学习建议" tabindex="-1"><a class="header-anchor" href="#重构-refactoring-to-patterns-学习建议"><span>重构 Refactoring to Patterns（学习建议）</span></a></h2><ul><li>重构获得模式 Refactoring to Patterns（这里的 “重构” 特指 “重构代码”） <ul><li>面向对象设计是 “好的面向对象设计”，所谓 “好的面向对象设计” 是指那些可以<strong>满足 “应对变化”</strong>，提高复用性的设计</li><li>现代软件设计的特征是 “需求的频繁变化”。<strong>设计模式的要点是 “寻找变化点”，然后在变化点应用设计模式</strong>，从而来更好地应对需求的变化。“什么时候、什么地点应用设计模式” 比 “理解设计模式结构本身” 更为重要</li><li>设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的 <strong>“Refactoring to Patterns”</strong> 是目前普遍公认最好的使用设计模式的方法</li></ul></li><li>重构关键技法 <ul><li>静态 --&gt; 动态</li><li>早绑定 --&gt; 晚绑定</li><li>继承 --&gt; 组合</li><li>编译时依赖 --&gt; 运行时依赖</li><li>紧耦合 --&gt; 松耦合</li></ul></li><li>推荐书籍 <ul><li>《重构——改善既有代码的设计》</li><li>《重构与模式》</li></ul></li></ul><h2 id="菜鸟教程中多出来的10种设计模式" tabindex="-1"><a class="header-anchor" href="#菜鸟教程中多出来的10种设计模式"><span>菜鸟教程中多出来的10种设计模式</span></a></h2><ul><li>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>MVC模式（Model-View-Controller（模型-视图-控制器））（话说中介者模式不是属于MVVM模式吗？）</li><li>业务代表模式（Business Delegate Pattern）</li><li>组合实体模式（Composite Entity Pattern）</li><li>数据访问对象模式（Data Access Object Pattern）</li><li>前端控制器模式（Front Controller Pattern）</li><li>拦截过滤器模式（Intercepting Filter Pattern）</li><li>服务定位器模式（Service Locator Pattern）</li><li>传输对象模式（Transfer Object Pattern）</li></ul>',9)]))}const o=e(i,[["render",a],["__file","00.3. 设计模式分类与使用建议.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/00.3.%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE.html","title":"《C++设计模式》视频_李建忠","lang":"zh-CN","frontmatter":{"description":"《C++设计模式》视频_李建忠 目录 设计模式分类与使用建议 GOF-23模式分类 从目的来看（《设计模式：可复用面向对象》中的分类） 从范围来看 类模式：处理类与子类的静态关系（偏重继承方案） 对象模式：处理对象间的动态关系（偏重组合方案） 从封装变化角度对模式分类（《设计模式_李建忠视频》中的分类）（其中划掉部分表示比较少用或过时） 重构 Refa...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AC__%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E8%A7%86%E9%A2%91_%E6%9D%8E%E5%BB%BA%E5%BF%A0/00.3.%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《C++设计模式》视频_李建忠"}],["meta",{"property":"og:description","content":"《C++设计模式》视频_李建忠 目录 设计模式分类与使用建议 GOF-23模式分类 从目的来看（《设计模式：可复用面向对象》中的分类） 从范围来看 类模式：处理类与子类的静态关系（偏重继承方案） 对象模式：处理对象间的动态关系（偏重组合方案） 从封装变化角度对模式分类（《设计模式_李建忠视频》中的分类）（其中划掉部分表示比较少用或过时） 重构 Refa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《C++设计模式》视频_李建忠\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《C++设计模式》视频_李建忠","slug":"《c-设计模式》视频-李建忠","link":"#《c-设计模式》视频-李建忠","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"设计模式分类与使用建议","slug":"设计模式分类与使用建议","link":"#设计模式分类与使用建议","children":[{"level":2,"title":"GOF-23模式分类","slug":"gof-23模式分类","link":"#gof-23模式分类","children":[]},{"level":2,"title":"重构 Refactoring to Patterns（学习建议）","slug":"重构-refactoring-to-patterns-学习建议","link":"#重构-refactoring-to-patterns-学习建议","children":[]},{"level":2,"title":"菜鸟教程中多出来的10种设计模式","slug":"菜鸟教程中多出来的10种设计模式","link":"#菜鸟教程中多出来的10种设计模式","children":[]}]}],"git":{},"readingTime":{"minutes":3.52,"words":1057},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.3. 设计模式分类与使用建议.md","excerpt":"\\n<h1>目录</h1>\\n<h1>设计模式分类与使用建议</h1>\\n<h2>GOF-23模式分类</h2>\\n<ul>\\n<li>\\n<p>从目的来看（《设计模式：可复用面向对象》中的分类）</p>\\n<ul>\\n<li>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">分类</th>\\n<th style=\\"text-align:center\\">中译</th>\\n<th style=\\"text-align:center\\">设计模式</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">创建型模式<br>（Creational）<br>5</td>\\n<td style=\\"text-align:center\\">抽象工厂<br>构建器（生成器）<br>工厂方法<br>原型<br>单件（单例）</td>\\n<td style=\\"text-align:center\\">Abstract Factory<br>Builder<br>Factory Method<br>Prototype<br>Singleton</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">结构型模式<br>（Structural）<br>7</td>\\n<td style=\\"text-align:center\\">适配器<br>桥接模式<br>组成<br>装饰<br>外观（门面）<br>享元<br>代理</td>\\n<td style=\\"text-align:center\\">Adapter<br>Bridge<br>Composite<br>Decorator<br>Facade<br>Flyweight<br>Proxy</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">行为型模式<br>（Behavioral）<br>11</td>\\n<td style=\\"text-align:center\\">职责链<br>命令<br>解释器（解析器）<br>迭代器<br>中介者<br>备忘录<br>观察者<br>状态<br>策略<br>模板方法<br>访问者</td>\\n<td style=\\"text-align:center\\">Chain of Responsibility<br>Command<br>Interpreter<br>Iterator<br>Mediator<br>Memento<br>Observer<br>State<br>Strategy<br>Template Method<br>Visitor</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>从范围来看</p>\\n<ul>\\n<li>类模式：处理类与子类的静态关系（偏重继承方案）</li>\\n<li>对象模式：处理对象间的动态关系（偏重组合方案）</li>\\n</ul>\\n</li>\\n<li>\\n<p>从封装变化角度对模式分类（《设计模式_李建忠视频》中的分类）（其中划掉部分表示比较少用或过时）</p>\\n<ul>\\n<li>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">分类</th>\\n<th style=\\"text-align:center\\">中译</th>\\n<th style=\\"text-align:center\\">设计模式</th>\\n<th style=\\"text-align:center\\">目的分类</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">组件协作</td>\\n<td style=\\"text-align:center\\">模板方法<br>策略模式<br>观察者模式</td>\\n<td style=\\"text-align:center\\">Template Method<br>Strategy<br>Observer/Event</td>\\n<td style=\\"text-align:center\\">行为型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">单一职责</td>\\n<td style=\\"text-align:center\\">装饰模式<br>桥接模式</td>\\n<td style=\\"text-align:center\\">Decorator<br>Bridge</td>\\n<td style=\\"text-align:center\\">结构型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">对象创建</td>\\n<td style=\\"text-align:center\\">工厂模式<br>抽象工厂<br>原型模式<br><s>构建器模式</s></td>\\n<td style=\\"text-align:center\\">Factory Method<br>Abstract Factory<br>Prototype<br>Builder</td>\\n<td style=\\"text-align:center\\">创建型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">对象性能</td>\\n<td style=\\"text-align:center\\">单件模式<br>享元模式</td>\\n<td style=\\"text-align:center\\">Singleton<br>Flyweight</td>\\n<td style=\\"text-align:center\\">创建型<br>结构型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">接口隔离</td>\\n<td style=\\"text-align:center\\">门面模式<br>代理模式<br>适配器<br><s>中介者模式</s></td>\\n<td style=\\"text-align:center\\">Facade<br>Proxy<br>Adapter<br>Mediator</td>\\n<td style=\\"text-align:center\\">结构型<br>行为型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">状态变化</td>\\n<td style=\\"text-align:center\\">状态模式<br><s>备忘录模式</s></td>\\n<td style=\\"text-align:center\\">State<br>Memento</td>\\n<td style=\\"text-align:center\\">行为型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">数据结构</td>\\n<td style=\\"text-align:center\\">组合模式<br><s>迭代器模式</s><br><s>职责链模式</s></td>\\n<td style=\\"text-align:center\\">Composite<br>Iterator<br>Chain of Responsibility</td>\\n<td style=\\"text-align:center\\">结构型<br>行为型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">行为变化</td>\\n<td style=\\"text-align:center\\"><s>命令模式</s><br><s>访问器模式</s></td>\\n<td style=\\"text-align:center\\">Command<br>Visitor</td>\\n<td style=\\"text-align:center\\">行为型</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">领域问题</td>\\n<td style=\\"text-align:center\\"><s>解析器模式</s></td>\\n<td style=\\"text-align:center\\">Interpreter</td>\\n<td style=\\"text-align:center\\">行为型</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.3. 设计模式分类与使用建议.md","value":{"title":"00.3. 设计模式分类与使用建议","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/01. 多类管理/设计模式/《C++设计模式》视频_李建忠/00.3. 设计模式分类与使用建议.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,c as data};
