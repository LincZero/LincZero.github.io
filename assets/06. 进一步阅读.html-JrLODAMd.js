import{_ as e,c as t,e as n,o as i}from"./app-_6RECMRt.js";const l={};function o(r,p){return i(),t("div",null,p[0]||(p[0]=[n('<h1 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf"><span>eBPF</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="进一步阅读" tabindex="-1"><a class="header-anchor" href="#进一步阅读"><span>进一步阅读</span></a></h1><p>略，去看原文去</p><h2 id="内核开发-faq" tabindex="-1"><a class="header-anchor" href="#内核开发-faq"><span>内核开发 FAQ</span></a></h2><h2 id="使用bpf的项目" tabindex="-1"><a class="header-anchor" href="#使用bpf的项目"><span>使用BPF的项目</span></a></h2><p>以下列表包括精选的使用 BPF 的开源项目，分别为 BPF 提供工具。在这种情况下，eBPF 指令集专门用于代替使用旧版 cBPF 的项目：</p><ul><li><p>追踪类</p><ul><li><p><strong>BCC</strong></p><p>BCC 代表 BPF 编译器集合，其主要功能是提供一组易于使用且高效的内核跟踪实用程序，所有这些实用程序都基于 BPF 程序，这些程序挂钩到基于 kprobes、kretprobes、tracepoints、uprobes、uretprobes 以及 USDT 探针的内核基础设施。该集合提供了近百个针对整个堆栈的不同层（从应用程序、系统库到各种不同内核子系统）的工具，以便分析系统的性能特征或问题。此外，BCC 还提供 API 以便用作其他项目的库。</p><p>https://github.com/iovisor/bcc</p></li><li><p><strong>bpftrace</strong></p><p>bpftrace 是一款适用于 Linux 的 DTrace 风格的动态跟踪工具，使用 LLVM 作为后端将脚本编译为 BPF 字节码，并利用 BCC 与内核的 BPF 跟踪基础设施进行交互。与本机 BCC 相比，它提供了一种用于实现跟踪脚本的高级语言。</p><p>https://github.com/ajor/bpftrace</p></li><li><p><strong>perf</strong></p><p>perf 工具由 Linux 内核社区开发，作为内核源代码树的一部分，提供了一种通过传统的 perf record 子命令加载跟踪 BPF 程序的方法，其中可以检索来自 BPF 的聚合数据并在 perf.data 中进行后处理。通过perf脚本等方式。</p><p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf</p></li><li><p><strong>ply</strong></p><p>ply 是一个跟踪工具，遵循过去的“小语言”方法，并将 ply 脚本编译为附加到内核中的 kprobes 和跟踪点的 Linux BPF 程序。这些脚本具有类似 C 的语法，很大程度上受到 DTrace 和扩展 awk 的启发。 ply 将依赖关系保持在最低限度，并且在构建时只需要 flex 和 bison，在运行时只需要 libc。</p><p>https://github.com/wkz/ply</p></li><li><p><strong>systemtap</strong></p><p>systemtap 是一种脚本语言和工具，用于提取、过滤和汇总数据，以诊断和分析性能或功能问题。它带有一个名为 stapbpf 的 BPF 后端，无需额外的编译器即可将脚本直接转换为 BPF，并将探测器注入内核。因此，与 stap 的内核模块不同，它既没有外部依赖项，也不需要加载内核模块。</p><p>https://sourceware.org/git/gitweb.cgi?p=systemtap.git;a=summary</p></li><li><p><strong>PCP</strong></p><p>Performance Co-Pilot (PCP) 是一个系统性能和分析框架，能够通过各种代理收集指标，并实时或使用历史数据分析收集到的系统性能指标。借助 pmdabcc，PCP 拥有基于 BCC 的性能指标域代理，它通过 BPF 和 BCC 从内核中提取数据。</p><p>https://github.com/performancecopilot/pcp</p></li><li><p><strong>Weave Scope</strong></p><p>Weave Scope 是一种云监控工具，通过结合使用 BPF 和 kprobes 来收集有关进程、网络连接或其他系统数据的数据。 Weave Scope 在 gobpf 库之上工作，以便将 BPF ELF 文件加载到内核中，并附带一个 tcptracer-bpf 工具，用于监视连接、接受和关闭调用以跟踪 TCP 事件。</p><p>https://github.com/weaveworks/scope</p></li></ul></li><li><p>联网类</p><ul><li><p><strong>Cilium</strong></p><p>Cilium 提供并透明地保护应用程序容器或进程等应用程序工作负载之间的网络连接和负载平衡。 Cilium 在第 3/4 层运行，提供传统网络和安全服务，也在第 7 层运行，以保护和安全使用现代应用程序协议（例如 HTTP、gRPC 和 Kafka）。它已集成到 Kubernetes 等编排框架中。 BPF 是 Cilium 的基础部分，在内核的网络数据路径中运行。</p><p>https://github.com/cilium/cilium</p></li><li><p><strong>Suricata</strong></p><p>Suricata 是一个网络 IDS、IPS 和 NSM 引擎，并在三个不同的领域利用 BPF 和 XDP，即作为 BPF 过滤器以处理或绕过某些数据包，作为基于 BPF 的负载均衡器以允许可编程负载平衡以及 XDP 在高数据包速率下实现旁路或丢弃机制。</p><p>https://suricata.readthedocs.io/en/suricata-5.0.2/capture-hardware/ebpf-xdp.html</p><p>https://github.com/OISF/suricata</p></li><li><p><strong>systemd</strong></p><p>systemd 允许 IPv4/v6 记账，并基于 BPF 的 cgroup 入口和出口挂钩为其 systemd 单元实施网络访问控制。计费基于数据包/字节，ACL 可以指定为允许/拒绝规则的地址前缀。更多信息请访问：</p><p>http://0pointer.net/blog/ip-accounting-and-access-lists-with-systemd.html</p><p>https://github.com/systemd/systemd</p></li><li><p><strong>iproute2</strong></p><p>iproute2 能够将 BPF 程序作为 LLVM 生成的 ELF 文件加载到内核中。 iproute2 通过通用 BPF 加载器后端支持 XDP BPF 程序以及 tc BPF 程序。 tc 和 ip 命令行实用程序为用户启用加载程序和内省功能。</p><p>https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/</p></li><li><p><strong>p4c-xdp</strong></p><p>p4c-xdp 提供了一个针对 BPF 和 XDP 的 P4 编译器后端。 P4 是一种领域特定语言，描述了可编程网络元件（例如 NIC、设备或交换机）的数据平面如何处理数据包，并且在 p4c-xdp 的帮助下，P4 程序可以转换为 BPF C 程序，可以通过以下方式编译： clang / LLVM 并作为 BPF 程序加载到 XDP 层的内核中，以实现高性能数据包处理。</p><p>https://github.com/vmware/p4c-xdp</p></li></ul></li><li><p>其他</p><ul><li><p><strong>LLVM</strong></p><p>clang / LLVM 提供了 BPF 后端，以便将 C BPF 程序编译为 ELF 文件中包含的 BPF 指令。 LLVM BPF 后端与 Linux 内核中的 BPF 核心基础设施一起开发，并由同一社区维护。 clang / LLVM 是开发 BPF 程序的工具链中的关键部分。</p><p>https://llvm.org/</p></li><li><p><strong>libbpf</strong></p><p>libbpf 是一个通用 BPF 库，由 Linux 内核社区作为内核源代码树的一部分开发，允许将 BPF 程序从 LLVM 生成的 ELF 文件加载并附加到内核中。该库被其他内核项目使用，例如 perf 和 bpftool。</p><p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/lib/bpf</p></li><li><p><strong>bpftool</strong></p><p>bpftool 是用于自省和调试 BPF 程序和 BPF 映射的主要工具，与 libbpf 一样，都是由 Linux 内核社区开发的。它允许转储系统中所有活动的 BPF 程序和映射、转储和反汇编程序中的 BPF 或 JITed BPF 指令以及转储和操作系统中的 BPF 映射。 bpftool 支持与 BPF 文件系统交互，将各种程序类型从目标文件加载到内核中等等。</p><p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/bpf/bpftool</p></li><li><p><strong>cilium/ebpf 纤毛/ebpf</strong></p><p><code>cilium/ebpf</code> (ebpf-go) 是一个纯 Go 库，提供用于加载、编译和调试 eBPF 程序的实用程序。它具有最小的外部依赖性，旨在用于长时间运行的进程。</p><p>它的 <code>bpf2go</code> 实用程序自动编译 eBPF C 程序并将其嵌入到 Go 二进制文件中。</p><p>它实现将程序附加到各种内核挂钩，以及用于跟踪任意内核和用户空间函数的 kprobes 和 uprobes。它还具有一个完整的汇编器，允许使用 Go 在运行时构建 eBPF 程序，或者在从 ELF 对象加载它们后对其进行修改。</p><p>https://github.com/cilium/ebpf</p></li><li><p><strong>ebpf_asm ebpf_asm</strong></p><p>ebpf_asm 为以类似于 Intel 的汇编语法编写的 BPF 程序提供了一个汇编器，因此为程序相当小且简单且不需要 clang / LLVM 工具链的情况提供了直接在汇编中编写 BPF 程序的替代方案。</p><p>https://github.com/Xilinx-CNS/ebpf_asm</p></li></ul></li></ul><h2 id="xdp-newbies" tabindex="-1"><a class="header-anchor" href="#xdp-newbies"><span>XDP Newbies</span></a></h2><h2 id="bpf-时事通讯" tabindex="-1"><a class="header-anchor" href="#bpf-时事通讯"><span>BPF 时事通讯</span></a></h2><h2 id="博客" tabindex="-1"><a class="header-anchor" href="#博客"><span>博客</span></a></h2><h2 id="博客文章" tabindex="-1"><a class="header-anchor" href="#博客文章"><span>博客文章</span></a></h2><h2 id="图书" tabindex="-1"><a class="header-anchor" href="#图书"><span>图书</span></a></h2><h2 id="会谈" tabindex="-1"><a class="header-anchor" href="#会谈"><span>会谈</span></a></h2><h2 id="更多文档" tabindex="-1"><a class="header-anchor" href="#更多文档"><span>更多文档</span></a></h2>',15)]))}const a=e(l,[["render",o],["__file","06. 进一步阅读.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/10.%20BPF%E5%92%8CXDP%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/06.%20%E8%BF%9B%E4%B8%80%E6%AD%A5%E9%98%85%E8%AF%BB.html","title":"eBPF","lang":"zh-CN","frontmatter":{"description":"eBPF 目录 进一步阅读 略，去看原文去 内核开发 FAQ 使用BPF的项目 以下列表包括精选的使用 BPF 的开源项目，分别为 BPF 提供工具。在这种情况下，eBPF 指令集专门用于代替使用旧版 cBPF 的项目： 追踪类 BCC BCC 代表 BPF 编译器集合，其主要功能是提供一组易于使用且高效的内核跟踪实用程序，所有这些实用程序都基于 BP...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/10.%20BPF%E5%92%8CXDP%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/06.%20%E8%BF%9B%E4%B8%80%E6%AD%A5%E9%98%85%E8%AF%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"eBPF"}],["meta",{"property":"og:description","content":"eBPF 目录 进一步阅读 略，去看原文去 内核开发 FAQ 使用BPF的项目 以下列表包括精选的使用 BPF 的开源项目，分别为 BPF 提供工具。在这种情况下，eBPF 指令集专门用于代替使用旧版 cBPF 的项目： 追踪类 BCC BCC 代表 BPF 编译器集合，其主要功能是提供一组易于使用且高效的内核跟踪实用程序，所有这些实用程序都基于 BP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"eBPF\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"eBPF","slug":"ebpf","link":"#ebpf","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"进一步阅读","slug":"进一步阅读","link":"#进一步阅读","children":[{"level":2,"title":"内核开发 FAQ","slug":"内核开发-faq","link":"#内核开发-faq","children":[]},{"level":2,"title":"使用BPF的项目","slug":"使用bpf的项目","link":"#使用bpf的项目","children":[]},{"level":2,"title":"XDP Newbies","slug":"xdp-newbies","link":"#xdp-newbies","children":[]},{"level":2,"title":"BPF 时事通讯","slug":"bpf-时事通讯","link":"#bpf-时事通讯","children":[]},{"level":2,"title":"博客","slug":"博客","link":"#博客","children":[]},{"level":2,"title":"博客文章","slug":"博客文章","link":"#博客文章","children":[]},{"level":2,"title":"图书","slug":"图书","link":"#图书","children":[]},{"level":2,"title":"会谈","slug":"会谈","link":"#会谈","children":[]},{"level":2,"title":"更多文档","slug":"更多文档","link":"#更多文档","children":[]}]}],"git":{},"readingTime":{"minutes":6.04,"words":1811},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/10. BPF和XDP参考指南/06. 进一步阅读.md","excerpt":"\\n<h1>目录</h1>\\n<h1>进一步阅读</h1>\\n<p>略，去看原文去</p>\\n<h2>内核开发 FAQ</h2>\\n<h2>使用BPF的项目</h2>\\n<p>以下列表包括精选的使用 BPF 的开源项目，分别为 BPF 提供工具。在这种情况下，eBPF 指令集专门用于代替使用旧版 cBPF 的项目：</p>\\n<ul>\\n<li>\\n<p>追踪类</p>\\n<ul>\\n<li>\\n<p><strong>BCC</strong></p>\\n<p>BCC 代表 BPF 编译器集合，其主要功能是提供一组易于使用且高效的内核跟踪实用程序，所有这些实用程序都基于 BPF 程序，这些程序挂钩到基于  kprobes、kretprobes、tracepoints、uprobes、uretprobes 以及 USDT  探针的内核基础设施。该集合提供了近百个针对整个堆栈的不同层（从应用程序、系统库到各种不同内核子系统）的工具，以便分析系统的性能特征或问题。此外，BCC 还提供 API 以便用作其他项目的库。</p>\\n<p>https://github.com/iovisor/bcc</p>\\n</li>\\n<li>\\n<p><strong>bpftrace</strong></p>\\n<p>bpftrace 是一款适用于 Linux 的 DTrace 风格的动态跟踪工具，使用 LLVM 作为后端将脚本编译为 BPF 字节码，并利用 BCC 与内核的 BPF 跟踪基础设施进行交互。与本机 BCC 相比，它提供了一种用于实现跟踪脚本的高级语言。</p>\\n<p>https://github.com/ajor/bpftrace</p>\\n</li>\\n<li>\\n<p><strong>perf</strong></p>\\n<p>perf 工具由 Linux 内核社区开发，作为内核源代码树的一部分，提供了一种通过传统的 perf record 子命令加载跟踪 BPF 程序的方法，其中可以检索来自 BPF 的聚合数据并在 perf.data 中进行后处理。通过perf脚本等方式。</p>\\n<p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/perf</p>\\n</li>\\n<li>\\n<p><strong>ply</strong></p>\\n<p>ply 是一个跟踪工具，遵循过去的“小语言”方法，并将 ply 脚本编译为附加到内核中的 kprobes 和跟踪点的 Linux BPF  程序。这些脚本具有类似 C 的语法，很大程度上受到 DTrace 和扩展 awk 的启发。 ply 将依赖关系保持在最低限度，并且在构建时只需要 flex 和 bison，在运行时只需要 libc。</p>\\n<p>https://github.com/wkz/ply</p>\\n</li>\\n<li>\\n<p><strong>systemtap</strong></p>\\n<p>systemtap 是一种脚本语言和工具，用于提取、过滤和汇总数据，以诊断和分析性能或功能问题。它带有一个名为 stapbpf 的 BPF  后端，无需额外的编译器即可将脚本直接转换为 BPF，并将探测器注入内核。因此，与 stap  的内核模块不同，它既没有外部依赖项，也不需要加载内核模块。</p>\\n<p>https://sourceware.org/git/gitweb.cgi?p=systemtap.git;a=summary</p>\\n</li>\\n<li>\\n<p><strong>PCP</strong></p>\\n<p>Performance Co-Pilot (PCP) 是一个系统性能和分析框架，能够通过各种代理收集指标，并实时或使用历史数据分析收集到的系统性能指标。借助  pmdabcc，PCP 拥有基于 BCC 的性能指标域代理，它通过 BPF 和 BCC 从内核中提取数据。</p>\\n<p>https://github.com/performancecopilot/pcp</p>\\n</li>\\n<li>\\n<p><strong>Weave Scope</strong></p>\\n<p>Weave Scope 是一种云监控工具，通过结合使用 BPF 和 kprobes 来收集有关进程、网络连接或其他系统数据的数据。 Weave Scope 在 gobpf 库之上工作，以便将 BPF ELF 文件加载到内核中，并附带一个 tcptracer-bpf  工具，用于监视连接、接受和关闭调用以跟踪 TCP 事件。</p>\\n<p>https://github.com/weaveworks/scope</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>联网类</p>\\n<ul>\\n<li>\\n<p><strong>Cilium</strong></p>\\n<p>Cilium 提供并透明地保护应用程序容器或进程等应用程序工作负载之间的网络连接和负载平衡。 Cilium 在第 3/4  层运行，提供传统网络和安全服务，也在第 7 层运行，以保护和安全使用现代应用程序协议（例如 HTTP、gRPC 和 Kafka）。它已集成到  Kubernetes 等编排框架中。 BPF 是 Cilium 的基础部分，在内核的网络数据路径中运行。</p>\\n<p>https://github.com/cilium/cilium</p>\\n</li>\\n<li>\\n<p><strong>Suricata</strong></p>\\n<p>Suricata 是一个网络 IDS、IPS 和 NSM 引擎，并在三个不同的领域利用 BPF 和 XDP，即作为 BPF 过滤器以处理或绕过某些数据包，作为基于 BPF 的负载均衡器以允许可编程负载平衡以及 XDP 在高数据包速率下实现旁路或丢弃机制。</p>\\n<p>https://suricata.readthedocs.io/en/suricata-5.0.2/capture-hardware/ebpf-xdp.html</p>\\n<p>https://github.com/OISF/suricata</p>\\n</li>\\n<li>\\n<p><strong>systemd</strong></p>\\n<p>systemd 允许 IPv4/v6 记账，并基于 BPF 的 cgroup 入口和出口挂钩为其 systemd 单元实施网络访问控制。计费基于数据包/字节，ACL 可以指定为允许/拒绝规则的地址前缀。更多信息请访问：</p>\\n<p>http://0pointer.net/blog/ip-accounting-and-access-lists-with-systemd.html</p>\\n<p>https://github.com/systemd/systemd</p>\\n</li>\\n<li>\\n<p><strong>iproute2</strong></p>\\n<p>iproute2 能够将 BPF 程序作为 LLVM 生成的 ELF 文件加载到内核中。 iproute2 通过通用 BPF 加载器后端支持 XDP BPF 程序以及 tc BPF 程序。 tc 和 ip 命令行实用程序为用户启用加载程序和内省功能。</p>\\n<p>https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/</p>\\n</li>\\n<li>\\n<p><strong>p4c-xdp</strong></p>\\n<p>p4c-xdp 提供了一个针对 BPF 和 XDP 的 P4 编译器后端。 P4 是一种领域特定语言，描述了可编程网络元件（例如  NIC、设备或交换机）的数据平面如何处理数据包，并且在 p4c-xdp 的帮助下，P4 程序可以转换为 BPF C 程序，可以通过以下方式编译： clang / LLVM 并作为 BPF 程序加载到 XDP 层的内核中，以实现高性能数据包处理。</p>\\n<p>https://github.com/vmware/p4c-xdp</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>其他</p>\\n<ul>\\n<li>\\n<p><strong>LLVM</strong></p>\\n<p>clang / LLVM 提供了 BPF 后端，以便将 C BPF 程序编译为 ELF 文件中包含的 BPF 指令。 LLVM BPF 后端与 Linux 内核中的 BPF 核心基础设施一起开发，并由同一社区维护。 clang / LLVM 是开发 BPF 程序的工具链中的关键部分。</p>\\n<p>https://llvm.org/</p>\\n</li>\\n<li>\\n<p><strong>libbpf</strong></p>\\n<p>libbpf 是一个通用 BPF 库，由 Linux 内核社区作为内核源代码树的一部分开发，允许将 BPF 程序从 LLVM 生成的 ELF 文件加载并附加到内核中。该库被其他内核项目使用，例如 perf 和 bpftool。</p>\\n<p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/lib/bpf</p>\\n</li>\\n<li>\\n<p><strong>bpftool</strong></p>\\n<p>bpftool 是用于自省和调试 BPF 程序和 BPF 映射的主要工具，与 libbpf 一样，都是由 Linux  内核社区开发的。它允许转储系统中所有活动的 BPF 程序和映射、转储和反汇编程序中的 BPF 或 JITed BPF 指令以及转储和操作系统中的 BPF 映射。 bpftool 支持与 BPF 文件系统交互，将各种程序类型从目标文件加载到内核中等等。</p>\\n<p>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/bpf/bpftool</p>\\n</li>\\n<li>\\n<p><strong>cilium/ebpf 纤毛/ebpf</strong></p>\\n<p><code>cilium/ebpf</code> (ebpf-go) 是一个纯 Go 库，提供用于加载、编译和调试 eBPF 程序的实用程序。它具有最小的外部依赖性，旨在用于长时间运行的进程。</p>\\n<p>它的 <code>bpf2go</code> 实用程序自动编译 eBPF C 程序并将其嵌入到 Go 二进制文件中。</p>\\n<p>它实现将程序附加到各种内核挂钩，以及用于跟踪任意内核和用户空间函数的 kprobes 和 uprobes。它还具有一个完整的汇编器，允许使用 Go 在运行时构建 eBPF 程序，或者在从 ELF 对象加载它们后对其进行修改。</p>\\n<p>https://github.com/cilium/ebpf</p>\\n</li>\\n<li>\\n<p><strong>ebpf_asm ebpf_asm</strong></p>\\n<p>ebpf_asm 为以类似于 Intel 的汇编语法编写的 BPF 程序提供了一个汇编器，因此为程序相当小且简单且不需要 clang / LLVM 工具链的情况提供了直接在汇编中编写 BPF 程序的替代方案。</p>\\n<p>https://github.com/Xilinx-CNS/ebpf_asm</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/10. BPF和XDP参考指南/06. 进一步阅读.md","value":{"title":"06. 进一步阅读","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/10. BPF和XDP参考指南/06. 进一步阅读.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,c as data};
