import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,a as i}from"./app-Bh75ISgc.js";const o={},a=i('<h1 id="语言特色总结" tabindex="-1"><a class="header-anchor" href="#语言特色总结"><span>语言特色总结</span></a></h1><h2 id="与其他语言不同-的点" tabindex="-1"><a class="header-anchor" href="#与其他语言不同-的点"><span><strong>与其他语言不同</strong> 的点</span></a></h2><p>Go 就像 C/C++ 混合 TypeScript/Python 的版本，像 js 更多一些</p><p>特点：</p><ul><li>语法特点 <ul><li>简洁</li><li>一个实现只有一种写法</li></ul></li><li>性能特点</li></ul><h3 id="简洁原则优于单一写法原则-吐槽" tabindex="-1"><a class="header-anchor" href="#简洁原则优于单一写法原则-吐槽"><span>简洁原则优于单一写法原则 (吐槽)</span></a></h3><blockquote><p>Linc：吐槽：</p><p>若 “一种写法” 与 “简洁” 冲突，则语言委员那边似乎更倾向于 “简洁”，即他们会通过增加语法与语法糖达到简洁目的而忽略 “一种写法” 原则。 并且哪怕语法糖的目的只能多省略两个符号（他们或许认为 “简洁” 最直观的体现是少敲点键盘，而不是语法统一性，这点我不太认可）</p><p>我感觉这一点非常不好 —— 就为了两个符号就额外多一种语法。反观 Java 中有一个观点我比较喜欢：</p><blockquote><p>Java设计者很长时间以来一直拒绝增加这个特性 (传递代码段)。Java非常重视其简单性和一致性。 他们认为如果只要一个特性能够让代码稍简洁一些，就把这个特性增加到语言中，这个语言很快就会变得一团糟，无法管理。</p></blockquote><p>_</p></blockquote><p>（必须省略的那种不在该吐槽范围内，本次主要吐槽的是：为两个符号而新增一种语法的情况） （不是一股脑不让省略，一部分我认可，一部分我认为没必要省，一部分我认为既然给了新语法也应该删除旧语法，维护单一写法语法原则）</p><p>举例：</p><ul><li>可省略 <ul><li>省略分号：收益1个键，但高频操作</li><li>:=写法：<code>i int := 1</code> 比 <code>var i int = 1</code> 少3个字符，收益2个键</li><li>可省略()：少2字符，收益3个键，如单函数返回值</li><li>for死循环省略两分号：收益2键</li><li>批量导入：少写若干 <code>import</code>，收益 (4+6*n, n&gt;=-1) 键。官方建议总是用批量写法</li><li>批量声明</li></ul></li><li>必须省略 <ul><li>省略()：少2字符，收益3个键</li><li>case省略break：收益5键 (必须省略)，if及for的括号</li></ul></li><li>无省略但多出来的语法 <ul><li>break标签、continue标签</li></ul></li><li>减少的语法 <ul><li>取消在表达式中使用 i++ 和 ++i</li></ul></li></ul>',10),n=[a];function r(c,p){return t(),l("div",null,n)}const u=e(o,[["render",r],["__file","03_语言特色总结.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/01_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/03_%E8%AF%AD%E8%A8%80%E7%89%B9%E8%89%B2%E6%80%BB%E7%BB%93.html","title":"语言特色总结","lang":"zh-CN","frontmatter":{"description":"语言特色总结 与其他语言不同 的点 Go 就像 C/C++ 混合 TypeScript/Python 的版本，像 js 更多一些 特点： 语法特点 简洁 一个实现只有一种写法 性能特点 简洁原则优于单一写法原则 (吐槽) Linc：吐槽： 若 “一种写法” 与 “简洁” 冲突，则语言委员那边似乎更倾向于 “简洁”，即他们会通过增加语法与语法糖达到简洁目...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/01_%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/03_%E8%AF%AD%E8%A8%80%E7%89%B9%E8%89%B2%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"语言特色总结"}],["meta",{"property":"og:description","content":"语言特色总结 与其他语言不同 的点 Go 就像 C/C++ 混合 TypeScript/Python 的版本，像 js 更多一些 特点： 语法特点 简洁 一个实现只有一种写法 性能特点 简洁原则优于单一写法原则 (吐槽) Linc：吐槽： 若 “一种写法” 与 “简洁” 冲突，则语言委员那边似乎更倾向于 “简洁”，即他们会通过增加语法与语法糖达到简洁目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语言特色总结\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"语言特色总结","slug":"语言特色总结","link":"#语言特色总结","children":[{"level":2,"title":"与其他语言不同 的点","slug":"与其他语言不同-的点","link":"#与其他语言不同-的点","children":[{"level":3,"title":"简洁原则优于单一写法原则 (吐槽)","slug":"简洁原则优于单一写法原则-吐槽","link":"#简洁原则优于单一写法原则-吐槽","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.9,"words":570},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Go/01_编程语言/03_语言特色总结.md","autoDesc":true}');export{u as comp,d as data};
