import{_ as i,c as s,e as l,o as n}from"./app-BgHc8lP1.js";const a={};function t(r,e){return n(),s("div",null,e[0]||(e[0]=[l(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h1><h2 id="语法错误和异常" tabindex="-1"><a class="header-anchor" href="#语法错误和异常"><span>语法错误和异常</span></a></h2><p>Python 中（至少）有两种错误</p><ul><li><code>语法错误</code>（<em>syntax errors</em>） <ul><li>也被称为解析错误，<code>语法分析器</code>指出错误行，并且在检测到错误的位置前面显示一个小“箭头”</li></ul></li><li><code>异常</code>（<em>exceptions</em>） <ul><li>运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误</li></ul></li></ul><h2 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型"><span>异常类型</span></a></h2><p>异常有不同的类型，异常类型做为错误信息的一部分显示出来</p><p>常见的有</p><ul><li>零除错误（ <a href="https://docs.python.org/3/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener noreferrer">ZeroDivisionError</a> ）</li><li>命名错误（ <a href="https://docs.python.org/3/library/exceptions.html#NameError" target="_blank" rel="noopener noreferrer">NameError</a>）</li><li>类型错误（ <a href="https://docs.python.org/3/library/exceptions.html#TypeError" target="_blank" rel="noopener noreferrer">TypeError</a> ）</li></ul><h2 id="异常处理-try-except-else-raise" tabindex="-1"><a class="header-anchor" href="#异常处理-try-except-else-raise"><span>异常处理（try-except-else &amp; raise）</span></a></h2><h3 id="try-except-else-使用" tabindex="-1"><a class="header-anchor" href="#try-except-else-使用"><span>try-except-else 使用</span></a></h3><ul><li><p>使用</p><ul><li><code>try-except-else</code> &amp; <code>raise</code></li></ul></li><li><p>处理流程</p><ul><li><p>首先，执行 <em>try</em> 子句 （在 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 和 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer">except</a> 关键字之间的部分）。</p></li><li><p>如果没有异常发生， <em>except</em> 子句 在 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 语句执行完毕后就被忽略了。</p></li><li><p>如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。</p><p>如果异常匹配于 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer">except</a> 关键字后面指定的异常类型，就执行对应的except子句。然后继续执行 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 语句之后的代码。</p></li><li><p>如果发生了一个异常，在 <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer">except</a> 子句中没有与之匹配的分支，它就会传递到上一级 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 语句中。</p><p>如果最终仍找不到对应的处理语句，它就成为一个 <em>未处理异常</em>，终止程序运行，显示提示信息</p></li></ul></li><li><p>使用补充</p><ul><li>一个 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 语句可能包含多个 except 子句，分别指定处理不同的异常。至多只会有一个分支被执行</li><li>最后一个 except 子句可以<strong>省略异常名称</strong>，以作为通配符使用</li></ul></li></ul><h3 id="else子句-使用" tabindex="-1"><a class="header-anchor" href="#else子句-使用"><span>else子句 使用</span></a></h3><ul><li><p>作用</p><ul><li><p>可以带有一个<code>else</code>子句，该子句只能出现在所有 except 子句之后</p></li><li><p>当 try 语句没有抛出异常时，需要执行一些代码，可以使用这个子句</p></li></ul></li><li><p>使用场景</p><ul><li>使用 <a href="https://docs.python.org/3/reference/compound_stmts.html#else" target="_blank" rel="noopener noreferrer">else</a> 子句比在 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> 子句中附加代码要好，因为这样可以避免 <a href="https://docs.python.org/3/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer">try</a> … <a href="https://docs.python.org/3/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer">except</a> 意外的截获本来不属于它们保护的那些代码抛出的异常</li></ul></li></ul><h3 id="finally子句-使用" tabindex="-1"><a class="header-anchor" href="#finally子句-使用"><span>finally子句 使用</span></a></h3><ul><li><p>作用</p><ul><li><p>语句还有另一个可选的子句<code>finally</code>，目的在于定义在任何情况下都一定要执行的功能</p><p>（不管有没有发生异常、不管异常有没有被捕捉到、不管以break/continue/return等任何方式退出）</p></li></ul></li><li><p>处理流程：</p><ul><li>若发生了未被except捕获的异常，则先执行finally子句，然后再重新抛出</li></ul></li><li><p>使用场景</p><ul><li>定义清理行为。比如用于释放外部资源，无论它们在使用过程中是否出错</li></ul></li><li><p>使用实例</p><ul><li><code>with open(&quot;...&quot;) as f:</code>的本质就是<code>try-finally</code>，即该语句能确保发生异常时也能顺利关闭文件f</li></ul></li></ul><h3 id="raise-使用" tabindex="-1"><a class="header-anchor" href="#raise-使用"><span>raise 使用</span></a></h3><ul><li><p>作用</p><ul><li><p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener noreferrer"><code>raise</code></a>语句允许程序员强制抛出一个指定的异常</p></li><li><p>要抛出的异常由 <a href="https://docs.python.org/3/reference/simple_stmts.html#raise" target="_blank" rel="noopener noreferrer">raise</a> 的唯一参数标识。它必需是一个异常实例或异常类（继承自 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener noreferrer">Exception</a> 的类）</p></li></ul></li></ul><h2 id="用户自定义异常" tabindex="-1"><a class="header-anchor" href="#用户自定义异常"><span>用户自定义异常</span></a></h2><p>异常类通常应该直接或间接的从 <a href="https://docs.python.org/3/library/exceptions.html#Exception" target="_blank" rel="noopener noreferrer">Exception</a> 类派生</p><p>例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyError</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">Exception</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __str__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">         return</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> repr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.value)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     raise</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> MyError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MyError </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">     print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;My exception occurred, value:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, e.value)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">My exception occurred, value: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> raise</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> MyError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;oops!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Traceback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  File </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;stdin&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, line </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;"> ?</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__main__.MyError: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;oops!&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const p=i(a,[["render",t],["__file","02. 异常.html.vue"]]),o=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/02.%20%E5%BC%82%E5%B8%B8.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 异常 语法错误和异常 Python 中（至少）有两种错误 语法错误（syntax errors） 也被称为解析错误，语法分析器指出错误行，并且在检测到错误的位置前面显示一个小“箭头” 异常（exceptions） 运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误 异常类型 异常有不同的类型，异...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/02.%20%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 异常 语法错误和异常 Python 中（至少）有两种错误 语法错误（syntax errors） 也被称为解析错误，语法分析器指出错误行，并且在检测到错误的位置前面显示一个小“箭头” 异常（exceptions） 运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误 异常类型 异常有不同的类型，异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"异常","slug":"异常","link":"#异常","children":[{"level":2,"title":"语法错误和异常","slug":"语法错误和异常","link":"#语法错误和异常","children":[]},{"level":2,"title":"异常类型","slug":"异常类型","link":"#异常类型","children":[]},{"level":2,"title":"异常处理（try-except-else & raise）","slug":"异常处理-try-except-else-raise","link":"#异常处理-try-except-else-raise","children":[{"level":3,"title":"try-except-else 使用","slug":"try-except-else-使用","link":"#try-except-else-使用","children":[]},{"level":3,"title":"else子句 使用","slug":"else子句-使用","link":"#else子句-使用","children":[]},{"level":3,"title":"finally子句 使用","slug":"finally子句-使用","link":"#finally子句-使用","children":[]},{"level":3,"title":"raise 使用","slug":"raise-使用","link":"#raise-使用","children":[]}]},{"level":2,"title":"用户自定义异常","slug":"用户自定义异常","link":"#用户自定义异常","children":[]}]}],"git":{},"readingTime":{"minutes":3.09,"words":927},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/04. 优化/02. 异常.md","excerpt":"\\n<h1>目录</h1>\\n<h1>异常</h1>\\n<h2>语法错误和异常</h2>\\n<p>Python 中（至少）有两种错误</p>\\n<ul>\\n<li><code>语法错误</code>（<em>syntax errors</em>）\\n<ul>\\n<li>也被称为解析错误，<code>语法分析器</code>指出错误行，并且在检测到错误的位置前面显示一个小“箭头”</li>\\n</ul>\\n</li>\\n<li><code>异常</code>（<em>exceptions</em>）\\n<ul>\\n<li>运行期检测到的错误称为异常，最终会产生一个错误信息，错误信息的最后一行指出发生了什么错误</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/04. 优化/02. 异常.md","value":{"title":"02. 异常","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/04. 优化/02. 异常.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,o as data};
