import{_ as i,e as a,g as n,o as l}from"./app-CuJixpuN.js";const e={};function t(p,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="高级功能" tabindex="-1"><a class="header-anchor" href="#高级功能"><span>高级功能</span></a></h1><h2 id="高级功能-1" tabindex="-1"><a class="header-anchor" href="#高级功能-1"><span>高级功能</span></a></h2><h3 id="虚拟按键" tabindex="-1"><a class="header-anchor" href="#虚拟按键"><span>虚拟按键</span></a></h3><p>您最多可以定义 767 个虚拟键。这些键不直接映射到任何物理按键的按下或释放。虚拟键可以通过特殊操作激活：</p><ul><li><code>（on-press &lt;操作&gt; &lt;虚拟键名称&gt;）或 on↓</code>：按下相关输入键时激活虚拟键操作。</li><li><code>(on-release &lt;动作&gt; &lt;虚拟键名称&gt;) 或 on↑</code>：释放关联的输入键时激活虚拟键动作。</li><li><code>(on-idle &lt;空闲时间&gt; &lt;操作&gt; &lt;虚拟键名称&gt;)</code>：当 kanata 空闲至少空闲时间毫秒时激活虚拟键操作。</li><li><code>(hold-for-duration &lt;保持时间&gt; &lt;虚拟键名称&gt;)</code>：按虚拟键保持时间毫秒。如果在释放之前在虚拟键上重新触发按住持续时间，则时间将重置，无需其他按下/释放事件。</li></ul><p><code>&lt;action&gt;</code> 参数可以是以下之一：</p><ul><li>点击虚拟键| tap-vkey：按下并释放虚拟键。如果该键已被按下，则只会将其释放。</li><li>按虚拟键 | press-vkey：按虚拟键。在另一个操作触发释放或点击之前，它不会被释放。如果该键已被按下，则不会执行任何操作。</li><li>发布虚拟键 | release-vkey：释放虚拟密钥。如果尚未按下，则不会执行任何操作。</li><li>切换虚拟键 | toggle-vkey：如果尚未按下虚拟键，则按下该虚拟键，否则释放它。</li></ul><p>虚拟键可以在 defvirtualkeys 配置条目中定义。配置此条目类似于 defalias，但您不能使用内部别名来缩短操作。您可以参考之前定义的虚拟按键。</p><p>进一步扩展空闲动作，“kanata”已经空闲的措辞很重要。即使键盘空闲，kanata 也可能还没有空闲。例如，如果正在播放长时间运行的宏，或者 kanata 正在等待大写单词或踢踏舞等操作超时，则 kanata 尚未空闲，并且 <code>&lt;idle time&gt;</code> 参数的滴答计数不会即使您不再按下任何键盘按键，也要进行计数。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defvirtualkeys</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; Define some virtual keys that perform modifier actions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ctl lctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  sft lsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  met lmet</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  alt lalt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; A virtual key that toggles all modifier virtual keys above</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tal (multi</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (on-press toggle-virtualkey ctl)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (on-press toggle-virtualkey sft)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (on-press toggle-virtualkey met)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        (on-press toggle-virtualkey alt)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; Virtual key that activates a macro</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  vkmacro (macro h e l l o spc w o r l d)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  psf (on-press press-virtualkey   sft)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  rsf (on-press release-virtualkey sft)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tal (on-press tap-vkey tal)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  mac (on-press tap-vkey vkmacro)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  isf (on-idle </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tap-vkey sft)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  hfd (hold-for-duration </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> met)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer use-virtual-keys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @psf @rsf @tal @mac a s d f @isf @hfd</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>较旧的假钥匙文档</p><p>有关更多背景信息，您可以阅读引发虚拟键创建的问题。</p><p>虚拟按键值得注意的一点是，它们并不总是会打断活跃的踢踏舞渴望的状态。如果将宏动作分配给虚拟键，则不会中断踢踏舞。然而，大多数其他动作类型，尤其是像 rsft 这样的“正常”关键动作，仍然会打断踢踏舞。</p><h3 id="序列" tabindex="-1"><a class="header-anchor" href="#序列"><span>序列</span></a></h3><p>sldr动作使kanata进入“序列”模式。动作名称是“序列领导者”的缩写。这来自 Vim，它具有可配置序列引导键的概念。在序列模式下，不会键入按键（默认情况下），但会保存按键，直到发生以下情况之一：</p><ul><li>键入的键与任何序列都不匹配</li><li>自最近一次按键以来经过的序列超时毫秒数</li></ul><p>序列的配置与 defvirtualkey 类似。对的第一个参数必须是定义的虚拟键名称。第二个参数是按键列表，按定义的顺序键入时将激活虚拟按键。更准确地说，触发的动作是：</p><p><code>（按下时 tap-vkey &lt;虚拟键名称&gt;）</code></p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defseq git-status (g s </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defvirtualkeys git-status (macro g i </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> spc s </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> u s))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias rcl (tap-hold-release </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sldr rctl))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defseq</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dotcom (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-3)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dotorg (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-4)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;;     The shifted letters in parentheses means a single press of lsft</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;;     must remain held while both h and then s are pressed.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;;     This is not the same as S-h S-s, which means that the lsft key</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;;     must be released and repressed between the h and s presses.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    https (S-(h s))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defvirtualkeys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dotcom (macro </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c o m)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dotorg (macro </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> o r g)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    https (macro h </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p s S-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; / /)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有 10 个特殊键，名称为 nop0-nop9，kanata 特别对待。 Kanata 永远不会发送这些键的操作系统事件，但它们仍然可以参与序列。</p><p>请参阅下面使用 nop 键与模板一起定义序列的示例。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc f7   f8   f9   f10)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer base</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sldr nop0 nop1 nop2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate seq (vk-name input-keys output-action)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sldr(defvirtualkeys $vk-name $output-action)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sldr(defseq $vk-name $input-keys)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; template-expand has a shortened form: t!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(t! seq dotcom (nop0 nop1) (macro </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c o m))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(t! seq dotorg (nop0 nop2) (macro </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> o r g))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 10 个特殊 nop 键看起来不够，您可以对序列进行创意，并将其中一些视为前缀修饰符。例如，您可以通过将 nop0-nop5 视为正常，同时将 nop6-nop9 视为始终后跟第二个 nop 键的前缀来获得 24 个“键”。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop0 nop0</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop5 nop5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop6 (macro nop6 nop0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop11 (macro nop6 nop5)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop18 (macro nop9 nop0)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ;; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  nop23 (macro nop9 nop5)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="以任意顺序重叠键" tabindex="-1"><a class="header-anchor" href="#以任意顺序重叠键"><span>以任意顺序重叠键</span></a></h4><p>在 defseq 配置项的按键列表中，特殊的 O-list 前缀可用于表示一组按键，在释放任何按键之前必须先按下这些按键才能匹配序列。</p><p>例如，O-(a b c) 等价于 O-(c b a)。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defvirtualkey hello (macro h (unshift e l) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (unshift l o)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defseq hello (O-(h l o)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>警告</td><td>序列在幕后实现此功能的方式是为重叠键的每个排列生成一个序列。这会使 kanata 占用大量内存。因此，给定 O-(…​) 列表中允许的最大键数为 6，但您仍然可以向序列添加更多键，包括更多 O-(…​) 列表。执行上述操作可以增加 kanata 的内存消耗。</td></tr></tbody></table><p>更高级用法的示例</p><h4 id="覆盖全局超时和输入模式" tabindex="-1"><a class="header-anchor" href="#覆盖全局超时和输入模式"><span>覆盖全局超时和输入模式</span></a></h4><p>使用 sldr 的替代方法是序列操作。语法是（序列&lt;超时&gt;）。这会进入序列模式，序列超时时间与全局配置的不同。</p><p>还可以使用第二个参数来调用序列操作。第二个参数是序列输入模式的覆盖：</p><p>(<code>sequence &lt;timeout&gt; &lt;input-mode&gt;</code>)</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; Enter sequence mode and input . with a timeout of 250</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias dot-sequence (macro (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">sequence</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 250</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> .</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; Enter sequence mode and input . with a timeout of 250 and using hidden-delay-type</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias dot-sequence (macro (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">sequence</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 250</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> hidden-delay-type) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> .</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="有关序列的更多信息" tabindex="-1"><a class="header-anchor" href="#有关序列的更多信息"><span>有关序列的更多信息</span></a></h4><p>有关序列的更多背景信息，您可以阅读序列的设计和动机。您可能还对描述序列中和弦的文档感兴趣，以了解序列中和弦的行为方式。</p><h3 id="输入和弦" tabindex="-1"><a class="header-anchor" href="#输入和弦"><span>输入和弦</span></a></h3><p>不要与输出和弦混淆，和弦操作允许您根据同时按下输入键的特定组合来执行各种操作。这种无序的键组合称为“和弦”。每个和弦可以执行不同的动作，允许您将最多 2^n - 1 个不同的动作绑定到 n 个键。</p><p>输入和弦的配置与 defalias 类似，在每个 defchords 组的开头有两个额外的参数：组的名称和超时值，在该超时值后，如果不是通过释放按键或按下非和弦来触发和弦，则和弦将被触发超时到期前的密钥。</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc a b c)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer default</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @cha @chb @chc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  cha (chord example a)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  chb (chord example b)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  chc (chord example c)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defchords example </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (a      ) a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (   b   ) b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (a     c) C-v</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (a  b  c) @three</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每对的第一项指定组成给定和弦的键。每对的第二项是按下给定和弦时要执行的动作，并且可以是任何常规或高级动作，包括别名。然而，它目前不能包含另一个和弦动作。</p><p>请注意，与 defseq 不同，这些键并不直接对应于真实的键，而只是在和弦上下文中有意义的任意标签。通过将层中的键配置为映射到（和弦名称键）动作，将它们映射到层中的真实键，其中名称是和弦组的名称（上面的示例），键是这些任意标签之一。</p><p>将这些进入“和弦模式”的和弦动作嵌套在踢踏舞等其他动作中是完全有效的，并且会像人们预期的那样工作。然而，这仅适用于用于进入“和弦模式”的第一个键。一旦“和弦模式”激活，所有其他键将直接由“和弦模式”处理，而不考虑包装器操作；例如如果按下某个键并且将其映射到带有和弦的敲击保持作为其中的保持动作，则该和弦键将立即激活，而不是需要在超时期间保持的键。</p><p><strong>释放行为</strong></p><p>对于单键操作和输出和弦（如 lctl 或 S-tab）以及按住时的分层，只有当属于输入和弦的所有键都已释放时，输入和弦才会释放操作。换句话说，如果即使为输入和弦按住一个键，那么输出动作将继续被保持，但仅限于提到的动作类别。当在 multi 内部使用但不适用于任何其他操作时，该行为也适用于上述操作。</p><p>对于通常适用的动作类别，上述行为的一个例外是发生和弦分解。当您输入不对应于任何动作的和弦时，就会发生和弦分解。发生这种情况时，kanata 会将按键分开，以激活输入和弦组件中的其他操作。在这种情况下，将发生下一段中描述的行为。</p><p>对于和弦分解和所有其他动作类别，释放行为更令人困惑：在超时期间释放任何键时输出动作将结束，或者如果超时到期，则在和弦中按下第一个键时输出动作结束被释放。这种不一致是当前实现的限制。在这些情况下，如果您想继续按住，建议按住所有键；如果您想释放，建议释放所有键。这是因为可能很难知道首先按下的是哪个键。</p><p>如果您想绕过为和弦输出按住按键的行为，您可以将和弦输出操作更改为宏。使用宏将保证输出键的快速按下+释放。</p><h3 id="去混叠环境" tabindex="-1"><a class="header-anchor" href="#去混叠环境"><span>去混叠环境</span></a></h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>笔记</td><td>该配置项较旧，您可能想使用更新且更通用的环境条件配置。</td></tr></tbody></table><p>defalias 有一个变体：defaliasenvcond。此变体的解析方式类似，但在所有名称-操作对之前必须有一个额外的列表参数。</p><p>该列表必须包含两个字符串。这些字符串依次为：环境变量名称和环境变量值。当启动 kanata 时，名称定义的环境变量具有相应的值，其中的别名将被激活。否则，将跳过别名。</p><p>defaliasenvcond 的一个用例是当一个人拥有多个按键布局不同的设备时，例如底行有不同的特殊键。使用环境变量，当这些物理按键位置处的硬件按键不相同时，可以在这些多个设备上使用相同的 kanata 配置，同时更改按键行为以保持多个设备上特定按键位置的行为一致。</p><p>例子：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defaliasenvcond (LAPTOP lp1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  met @lp1met</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defaliasenvcond (LAPTOP lp2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  met @lp2met</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前终端进程中设置环境变量：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># powershell</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">$env</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:VAR_NAME </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;var_value&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># bash</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VAR_NAME=var_value</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板" tabindex="-1"><a class="header-anchor" href="#模板"><span>模板</span></a></h3><p>顶级配置项deftemplate声明了一个可以通过列表项template-expand多次展开的模板。 template-expand 的缩写形式是 t!。</p><p>deftemplate 的参数按顺序为：</p><ul><li>模板名称</li><li>模板变量列表</li><li>模板内容（列表/字符串的任意组合）</li></ul><p>在模板内容中，以 $ 为前缀的变量名称将替换为传递到 template-expand 中的表达式。</p><p>列表项 template-expand 可以放置为顶级列表或另一个列表中。其参数按顺序为：</p><ul><li>模板名称</li><li>替换到模板中的参数</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>笔记</td><td>模板扩展发生在文件包含之后和任何其他解析之前。这种早期解析的结果之一是，在 template-expand 内部使用时，defvar 中定义的变量不会被替换。这会对条件内容产生影响，例如与 if-equal 一起使用。这将在示例 5 中进一步讨论。</td></tr></tbody></table><p>示例1：</p><p>举一个简单的例子，假设您想设置一大组按键，以便在按住 alt 时执行不同的操作。是的，这也可以通过将 alt 重新映射到图层移位来处理，但有些情况下您不希望这样做。您可以像这样模板化它，而不是多次使用 fork 和 unmod （以释放 alt）重新输入代码：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate alt-fork (original-action new-action)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (fork $original-action (multi (unmod (ralt lalt) nop0) $new-action) (lalt ralt))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias fn1 (template-expand alt-fork </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f1))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; Templates are a simple text substitution, so the above is exactly equivalent to:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; (defalias fn1 (fork 1 (multi (unmod (ralt lalt) nop0) f1) (lalt ralt)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias fn2 (template-expand alt-fork </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f2))</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; You can use t! as a short form of template-expand</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defalias fn3 (t! alt-fork </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f3))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer default @fn1 @fn2 @fn3)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defvar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> chord-timeout </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defcfg process-unmapped-keys yes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; This template defines a chord group and aliases that use the chord group.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; The purpose is to easily define the same chord position behaviour</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; for multiple layers that have different underlying keys.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate left-hand-chords (chordgroupname k1 k2 k3 k4 alias1 alias2 alias3 alias4)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (defalias</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $alias1 (chord $chordgroupname $k1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $alias2 (chord $chordgroupname $k2)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $alias3 (chord $chordgroupname $k3)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $alias4 (chord $chordgroupname $k4)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (defchords $chordgroupname $chord-timeout</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k1) $k1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k2) $k2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k3) $k3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k4) $k4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k1 $k2) lctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ($k3 $k4) lsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(template-expand left-hand-chords qwerty a s d f qwa qws qwd qwf)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; t! is short for template-expand</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(t! left-hand-chords dvorak a o e u dva dvo dve dvu)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc a s d f)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer dvorak @dva @dvo @dve @dvu)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer qwerty @qwa @qws @qwd @qwf)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例3：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; This template defines a home row that customizes a single key&#39;s behaviour</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate home-row (j-behaviour)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a s d f g h $j-behaviour k l </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grv  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bspc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tab  q    w    e    r    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    y    u    i    o    p    [    ]    \\</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       ;; usable even inside defsrc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  caps (t! home-row j)                            ret</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lsft z    x    c    v    b    n    m    ,    </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lctl lmet lalt           spc            ralt rmet rctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer base</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grv  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bspc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tab  q    w    e    r    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    y    u    i    o    p    [    ]    \\</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                                 ;; lists can be passed in too!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  caps (t! home-row (tap-hold </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j lctl))    ret</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lsft z    x    c    v    b    n    m    ,    </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lctl lmet lalt           spc            ralt rmet rctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如果等于" tabindex="-1"><a class="header-anchor" href="#如果等于"><span>如果等于</span></a></h4><p>在模板内，您可以使用列表项 if-equal 来在模板内包含有条件使用的项目。</p><p>它至少接受 2 个参数。前两个参数必须是字符串并相互比较。如果它们匹配，则将以下参数插入到模板中代替 if-equal 列表。否则，如果字符串不匹配，则整个 if-equal 列表将从模板中删除。</p><p>示例4：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate home-row (version)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a s d f g h</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (if-equal $version v1 j)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (if-equal $version v2 (tap-hold </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j lctl))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   k l </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defsrc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grv  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bspc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tab  q    w    e    r    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    y    u    i    o    p    [    ]    \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  caps (template-expand home-row v1)                            ret</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lsft z    x    c    v    b    n    m    ,    </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lctl lmet lalt           spc            ralt rmet rctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deflayer base</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  grv  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    2</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    5</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    6</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    7</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    9</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    -</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    bspc</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tab  q    w    e    r    </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    y    u    i    o    p    [    ]    \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  caps (template-expand home-row v2)                            ret</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lsft z    x    c    v    b    n    m    ,    </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rsft</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  lctl lmet lalt           spc            ralt rmet rctl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 if-equal 类似的是模板的另外三个条件运算符：</p><ul><li><code>if-not-equal</code><ul><li>如果前两个字符串参数不相等，则使用内容</li></ul></li><li><code>if-in-list</code><ul><li>如果第一个字符串参数存在于第二个字符串列表参数中，则使用该内容</li></ul></li><li><code>if-not-in-list</code><ul><li>如果第二个字符串列表参数中不存在第一个字符串参数，则使用该内容</li></ul></li></ul><p>实施例5：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; defvar is parsed AFTER template expansion occurs.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">defvar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a hello)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate template1 (var1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a (if-equal hello $var1 b) c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; Below will expand to: \`a c\` because the string</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; $a itself is compared against the string hello</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; and they are not equal.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(template-expand template1 $a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(deftemplate template2 (var1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a (if-equal $a $var1 b) c</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; Below will expand to: \`a b c\` because the string</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; $a is compared against the string $a and they are equal.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; But note that the variable $a is still not substituted</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; with its defvar value of: hello.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(template-expand template2 $a)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="deftemplate-中的-concat" tabindex="-1"><a class="header-anchor" href="#deftemplate-中的-concat"><span>deftemplate 中的 concat</span></a></h4><p>与 defvar 中的 concat 类似，deftemplate 内容中以 concat 开头的列表将被替换为单个字符串，该字符串由列表中相互连接的所有后续项组成。</p><h3 id="自定义点击保持行为" tabindex="-1"><a class="header-anchor" href="#自定义点击保持行为"><span>自定义点击保持行为</span></a></h3><p>目前，如果不修改源代码，这是无法配置的，但如果您愿意和/或有能力，目前还没有公开点击保持行为。利用这种行为，人们可以通过使用额外的信息来非常明确点击与按住的激活时间和方式。可以使用的可用信息确切地说是按下或释放了哪些键以及按下这些键的时间（以毫秒为单位）。 Tap-hold-release-keys 操作利用了部分功能，但没有充分利用此功能的强大功能。</p><p>有关更多背景信息，您可以阅读自定义点击保持行为的动机。</p><h3 id="花哨的钥匙符号" tabindex="-1"><a class="header-anchor" href="#花哨的钥匙符号"><span>花哨的钥匙符号</span></a></h3><p>您可以使用更短、更明显的键符号，例如 ‹⇧，而不是对特殊键使用相同的 a-z 字母（例如，用 lsft 表示 LeftShift）。</p><p>有关更多详细信息，请参阅符号列表和示例配置，它不仅在图层定义中使用这些符号，而且还将 ⎇› 和 ⇧› ⎇› 键重新调整为“符号”键，允许您通过按键插入这些奇特的符号，例如,</p><ul><li>按住 ⎇› 并点击删除将插入 ␡</li></ul><h3 id="仅-windows-在提升的窗口中启用" tabindex="-1"><a class="header-anchor" href="#仅-windows-在提升的窗口中启用"><span>仅 Windows：在提升的窗口中启用</span></a></h3><p>默认的 kanata.exe 二进制文件无法在提升的窗口（以管理权限运行）中工作，例如控制面板。但是，您可以使用 AutoHotkey 的“EnableUIAccess”脚本对二进制文件进行自签名，将其移动到“Program Files”，然后从那里启动 kanata 也可以在这些提升的窗口中工作。请参阅包含脚本及其所需库的 EnableUIAccess 文件夹（需要安装 AutoHotkey v2）</p><p>如果自己编译，则应添加功能标志 win_manifest 以启用 EnableUIAccess 脚本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>cargo build --win_manifest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="仅限-windows-win-托盘" tabindex="-1"><a class="header-anchor" href="#仅限-windows-win-托盘"><span>仅限 Windows：win 托盘</span></a></h3><p>Kanata 可以编译为带有功能标志 gui 的 Windows GUI 托盘应用程序。通过将 .lnk 放置在 %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 中，可以简化用户登录时启动应用程序的过程，并根据配置显示自定义图标指示器</p><p><a href="https://github.com/jtroo/kanata/blob/main/docs/win-tray/win-tray-screen.png" target="_blank" rel="noopener noreferrer"><img src="https://github.com/jtroo/kanata/raw/main/docs/win-tray/win-tray-screen.png" alt="icon indicator per config" loading="lazy"></a></p><p>以及每层的动态图标指示器（可能需要点击下面的 gif 才能播放）</p><p><a href="https://github.com/jtroo/kanata/blob/main/docs/win-tray/win-tray-layer-change.gif" target="_blank" rel="noopener noreferrer"><img src="https://github.com/jtroo/kanata/raw/main/docs/win-tray/win-tray-layer-change.gif" alt="icon indicator per layer" loading="lazy"></a></p><p>（仅限 Windows：win-tray）。它还支持（重新）加载配置。</p><p>目前唯一支持的配置是每个配置文件的托盘图标，所有其他配置应通过在 .lnk 的目标字段中传递 cli 标志来完成，例如 <code>&quot;C:\\Program Files\\kanata\\kanata.exe&quot; -d -n</code> 启动kanata 在调试模式下没有延迟</p><p>从命令行启动时，应用程序会将日志输出到控制台，但除此之外，日志当前只能通过能够查看 OutputDebugString 调试的应用程序（例如 TraceSpy）获得。</p><h3 id="测试你的配置" tabindex="-1"><a class="header-anchor" href="#测试你的配置"><span>测试你的配置</span></a></h3><p>Kanata 有一个 kanata_simulated_input 工具，可以帮助以可预测的方式测试您的配置。</p><p>您可以在 GitHub 页面上尝试一下。</p><p>CLI 工具的代码可以在simulated_input 下找到。</p><p>您可以在 sim.txt 文件中编写一系列按键，然后使用您的配置运行该工具，而不是亲自键入来测试某些内容，并想知道是否因为配置错误或输入错误而没有得到预期结果。并获得输入/输出事件的“时间线”视图，这可以帮助了解 kanata 如何将您的输入转换为各种按键/鼠标按下。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>警告</td><td>此视图的格式可能会更改。表情符号输出可能会破坏垂直对齐。</td></tr></tbody></table><p>有关更多详细信息，请下载以下文件并运行 kanata_simulated_input -c sim.kbd -s sim.txt</p><ul><li>具有简单主行 mod 绑定的示例配置</li><li>输入序列示例</li><li>示例输出序列</li></ul><p>输入序列文件格式：前缀的空格不敏感列表：密钥对，其中前缀是以下之一：</p><ul><li>🕐、t 或刻度以添加关键事件之间的时间（以毫秒为单位）</li><li>↓、d、向下或按</li><li>↑、u、向上或释放</li><li>⟳、r 或重复</li></ul><p>并且键名在 str_to_oscode 函数中定义，例如 1 代表数字键 1 或 kp1/🔢₁ 代表小键盘数字键 1</p><p>使用 unicode 符号 🕐,↓,↑,⟳ 可以跳过 : 分隔符，例如 ↓k ≝ ↓:k ≝ d:k</p><h3 id="拉链和弦" tabindex="-1"><a class="header-anchor" href="#拉链和弦"><span>拉链和弦</span></a></h3><p><strong>参考</strong></p><p>您可以定义单个 defzippy-experimental 配置项。正如 -experimental 标签所示，此功能相对较新。使用此功能时，出现错误和重大更改的可能性更高。</p><p>kanata 配置中的配置语法</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defzippy-experimental</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  $zippy-filename </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; required</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  on-first-press-chord-deadline $deadline-millis  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  idle-reactivate-time          $idle-time-millis </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  smart-space                   $smart-space-cfg  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  smart-space-punctuation (                       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $punc1 $punc2 ... $puncN)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  output-character-mappings (    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;; optional</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $character1 $output-mapping1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $character2 $output-mapping2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;; ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $characterN $output-mappingN</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>$zippy-文件名</code></td><td>相对或绝对文件路径。如果是相对路径，则其路径是相对于包含 kanata 配置文件的目录。这必须是 defzippy-experimental 之后的第一项。</td></tr><tr><td><code>$deadline-millis</code></td><td>毫秒数。启用 zippy 后第一次按下后，如果在配置的时间内没有激活和弦，则暂时禁用 zippy。</td></tr><tr><td><code>$空闲时间毫秒</code></td><td>毫秒数。输入结束并且经过此配置的毫秒数后，zippy 将从暂时禁用状态重新启用。</td></tr><tr><td><code>$智能空间cfg</code></td><td>确定智能空间行为。选项包括“无”、“仅添加空间”和“完整”。如果没有，输出将按原样键入。使用仅添加空格时，会在输出后自动添加空格，这些输出既不以空格也不以退格键结束。对于 full，仅添加空格行为与其他行为一起应用：在 zippy 激活后键入标点符号（默认字符： , . ;）将删除先前自动添加的空格。</td></tr><tr><td><code>$punc</code></td><td>输出字符映射中定义的字符或已知的键名称，应将其视为标点符号。 smart-space-punctuation 配置将覆盖 smart-space 考虑的默认标点符号列表；如果要包含默认字符，则必须将它们包含在此配置中。</td></tr><tr><td><code>$字符</code></td><td>用于 zippy 配置文件的输出列中的单个 unicode 代码点。</td></tr><tr><td><code>$输出映射</code></td><td>键或输出和弦，告诉 kanata 在 zippy 文件输出列中看到时如何键入 $character。必须是单键或输出和弦。输出和弦可能包含 AG- 告诉 kanata 按 AltGr，并且可能包含 S- 告诉 kanata 按 Shift。<br><br>列表项 no-erase 和 single-output 也可用于此位置。</td></tr><tr><td><code>不擦除</code></td><td>接受单个键或输出和弦作为参数。如果超集和弦或后续和弦自动擦除，zippy 系统不会退格该字符。用于死键或组合键。</td></tr><tr><td><code>单输出</code></td><td>接受一个或多个键或输出和弦作为参数。 zippy 系统仅发送一个退格键，以防被超集和弦或后续和弦自动擦除。用于死键或用一个输出符号组成键序列。</td></tr></tbody></table><p>关于输出映射，您可以通过以下行配置特殊 Lisp 语法字符 ) ( &quot; 的输出：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $right-paren-output</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;(&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    $left-paren-output</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    r#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;# $double-quote-output</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，对于美国布局，这些应该是正确的行：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     S-0</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;(&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     S-9</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    r#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;#  S-&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>zippy 配置文件中的配置语法</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">//</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> This is a comment.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">//</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          inputs            ↹  outputs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$chord1 $follow-chord1.1...1.M	$output1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$chord2 $follow-chord2.1...2.M	$output2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">//</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$chordN $follow-chordN.1...N.M	$outputN</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式是由一个制表符分隔的两列。第一列是输入，第二列是输出。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>$和弦</code></td><td>一组字符。您可以通过将空格作为和弦中的第一个字符来使用空格；有关示例，请参阅下面示例中的字母表。对于 0 个可选的跟随和弦，当启用 zippy 并且同时按下所有定义的和弦键时，同一行上的相应输出 ($output) 将激活。按下的顺序并不重要。</td></tr><tr><td><code>$和弦跟随</code></td><td>0个或多个和弦，使用方式与$chord相同。具有跟随和弦意味着在首次激活同一行中较早的和弦、释放所有键并按下 $chord-followN.M 中的键时，同一行上的 $output 将激活。跟随和弦与前一个和弦之间用空格分隔。如果在跟随和弦中使用空格，则使用两个空格；有关示例，请参阅下面示例中的华盛顿。</td></tr><tr><td><code>$输出</code></td><td>当用户按下和弦和可选跟随和弦时要输入的字符。它通过一个制表符与输入和弦列分隔开。这些字符按顺序键入，并且必须都是单数键名称，如在 defsrc 中配置的那样。大写的单字符键名将被成功解析，并且这些将与 Shift 一起输出以输出大写的键。此外，输出字符映射配置可用于通知 kanata 可能使用 Shift 或 AltGr 的其他映射。</td></tr></tbody></table><p><strong>示例</strong></p><p>kanata 配置示例</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(defzippy-experimental</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  zippy.txt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  on-first-press-chord-deadline </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  idle-reactivate-time          </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  smart-space-punctuation (? ! </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> , </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">; :)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  output-character-mappings (</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ;; This should work for US international.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ! S-1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ? S-/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    % S-5</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;(&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-9</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    : S-</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-,</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> S-.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    r#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;# S-&#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    | S-\\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    _ S--</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ® AG-r</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ’ (no-erase \`)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    é (single-output &#39; e)</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  )</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 zippy 文件内容</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dy	day</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dy </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	Monday</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dy </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	Tuesday</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> abc	alphabet</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> w  a	Washington</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi	git</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi f p	git fetch -p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>描述</strong></p><p>Zippychord 是 Kanata 中的另一种和弦机制。其背后的灵感主要来自于 zipchord 项目。名字很相似；它被命名为“zippy”而不是“zip”，因为 Kanata 的实现不是一个端口，也不以 100% 的行为兼容性为目标。</p><p>预期的用例是速记，或加速字符输出。在 zippychord 中，输入是键码和弦或序列，输出也是纯粹的键码。换句话说，所有其他操作均不受支持；例如层、切换、一次性。</p><p>Zippychord 对输出的键码起作用，即 kanata 完成处理您的输入、图层、开关逻辑和其他配置后的键输出。这与序列的操作方式类似，但与和弦(v1) 和和弦v2 不同。此外，输出都是急切的，就像序列上的可见退格一样。如果发生拉链和弦激活，则键入的键将退格。</p><p>举个例子，如果使用如下行配置 zippychord：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi	git</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么以下任一键入事件序列将擦除输入字符，然后继续键入输出“git”，就像它是（宏 bspc bspc g i t）一样。</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(press g) (press i)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(press i) (press g)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，没有列出任何发布事件。相比之下，以下事件序列不会导致激活：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(press g) (release g) (press i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Zippychord 支持完全重叠的和弦和音序。例如，允许这样的配置：</p><div class="language-lisp line-numbers-mode" data-highlighter="shiki" data-ext="lisp" data-title="lisp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi	git␣</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi s	git␣status</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi c	git checkout␣</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi c b	git checkout -b␣</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi c a	git commit --amend␣</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi c n	git commit --amend --no-edit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">gi c a m	git commit --amend -m </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">FIX_THIS_COMMIT_MESSAGE&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您以 (g i) 和弦开始时，您可以跟进各种字符序列以输出不同的 git 命令。这个用例与 git 别名非常相似。 zippychord 的优点之一是它会在您键入时立即向您显示真正的底层命令。</p>`,153)]))}const d=i(e,[["render",t],["__file","06. 高级功能.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Kanata/docs/config/06.%20%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD.html","title":"高级功能","lang":"zh-CN","frontmatter":{"description":"高级功能 高级功能 虚拟按键 您最多可以定义 767 个虚拟键。这些键不直接映射到任何物理按键的按下或释放。虚拟键可以通过特殊操作激活： （on-press <操作> <虚拟键名称>）或 on↓：按下相关输入键时激活虚拟键操作。 (on-release <动作> <虚拟键名称>) 或 on↑：释放关联的输入键时激活虚拟键动作。 (on-idle <空闲...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Script/Kanata/docs/config/06.%20%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"高级功能"}],["meta",{"property":"og:description","content":"高级功能 高级功能 虚拟按键 您最多可以定义 767 个虚拟键。这些键不直接映射到任何物理按键的按下或释放。虚拟键可以通过特殊操作激活： （on-press <操作> <虚拟键名称>）或 on↓：按下相关输入键时激活虚拟键操作。 (on-release <动作> <虚拟键名称>) 或 on↑：释放关联的输入键时激活虚拟键动作。 (on-idle <空闲..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/jtroo/kanata/raw/main/docs/win-tray/win-tray-screen.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级功能\\",\\"image\\":[\\"https://github.com/jtroo/kanata/raw/main/docs/win-tray/win-tray-screen.png\\",\\"https://github.com/jtroo/kanata/raw/main/docs/win-tray/win-tray-layer-change.gif\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":22.73,"words":6820},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/06. 高级功能.md","excerpt":"\\n<h2>高级功能</h2>\\n<h3>虚拟按键</h3>\\n<p>您最多可以定义 767 个虚拟键。这些键不直接映射到任何物理按键的按下或释放。虚拟键可以通过特殊操作激活：</p>\\n<ul>\\n<li><code>（on-press &lt;操作&gt; &lt;虚拟键名称&gt;）或 on↓</code>：按下相关输入键时激活虚拟键操作。</li>\\n<li><code>(on-release &lt;动作&gt; &lt;虚拟键名称&gt;) 或 on↑</code>：释放关联的输入键时激活虚拟键动作。</li>\\n<li><code>(on-idle &lt;空闲时间&gt; &lt;操作&gt; &lt;虚拟键名称&gt;)</code>：当 kanata 空闲至少空闲时间毫秒时激活虚拟键操作。</li>\\n<li><code>(hold-for-duration &lt;保持时间&gt; &lt;虚拟键名称&gt;)</code>：按虚拟键保持时间毫秒。如果在释放之前在虚拟键上重新触发按住持续时间，则时间将重置，无需其他按下/释放事件。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/06. 高级功能.md","value":{"title":"06. 高级功能","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Script/Kanata/docs/config/06. 高级功能.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,k as data};
