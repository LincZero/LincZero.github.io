import{_ as i,c as l,e as s,o as n}from"./app-DQC9V0Al.js";const d="/assets/redis%E5%85%AB%E8%82%A1%E6%96%87%E6%8F%90%E7%BA%B2-BEE551oN.png",t="/assets/redis%E7%AE%80%E4%BB%8B-CdSeGy8A.jpeg",r="/assets/37e4378d2edcb5e217b00e5f12973efd-vuqwpLen.png",a={};function o(p,e){return n(),l("div",null,e[0]||(e[0]=[s('<h1 id="redis-常见面试题" tabindex="-1"><a class="header-anchor" href="#redis-常见面试题"><span>Redis 常见面试题</span></a></h1><p>不知不觉《图解 Redis》系列文章写了很多了，考虑到一些同学面试突击 Redis，所以我整理了 3 万字 + 40 张图的 Redis 八股文，共收集了 40 多个面试题。</p><p>发车！</p><p><img src="'+d+'" alt="提纲" loading="lazy"></p><h2 id="redis-简介" tabindex="-1"><a class="header-anchor" href="#redis-简介"><span>Redis 简介</span></a></h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h3><p>我们直接看 Redis 官方是怎么介绍自己的。</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p>Redis 官方的介绍原版是英文的，我翻译成了中文后截图的，所以有些文字读起来会比较拗口，没关系，我会把里面比较重要的特性抽出来讲一下。</p><ul><li>特点： <ul><li><strong>基于内存</strong>。对数据的读写操作都是在内存中完成，因此<strong>读写速度非常快</strong></li><li>对数据类型的操作都是<strong>原子性</strong>的，因为执行命令由<strong>单线程</strong>负责的，不存在并发竞争的问题</li></ul></li><li>应用场景： <ul><li><strong>缓存，消息队列、分布式锁等场景</strong></li></ul></li><li>功能： <ul><li><strong>提供了多种数据类型来支持不同的业务场景</strong>。比如 String (字符串)、Hash (哈希)、 List (列表)、Set (集合)、Zset (有序集合)、Bitmaps (位图)、HyperLogLog (基数统计)、GEO (地理信息)、Stream (流)</li><li>支持 <strong>事务 、持久化、Lua 脚本、多种集群方案（主从复制模式、哨兵模式、切片机群模式）、发布/订阅模式，内存淘汰机制、过期删除机制</strong> 等等</li></ul></li></ul><h3 id="【比较】redis-和-memcached" tabindex="-1"><a class="header-anchor" href="#【比较】redis-和-memcached"><span>【比较】Redis 和 Memcached</span></a></h3><p>很多人都说用 Redis 作为缓存，但是 Memcached 也是基于内存的数据库，为什么不选择它作为缓存呢？要解答这个问题，我们就要弄清楚 Redis 和 Memcached 的共同点和区别。</p><h4 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点"><span>共同点</span></a></h4><ol><li>基于内存的数据库，一般都用来当做缓存使用</li><li>有过期策略</li><li>高性能</li></ol><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><ul><li><p>数据类型丰富度</p><ul><li>Redis： 支持的数据类型更丰富（String、Hash、List、Set、ZSet）</li><li>Memcached： 只支持最简单的 key-value 数据类型</li></ul></li><li><p>是否支持持久化</p><ul><li>Redis： 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li><li>Memcached： 没有持久化功能，数据全部存在内存之中，Memcached 重启或者挂掉后，数据就没了</li></ul></li><li><p>集群支持</p><ul><li>Redis： 原生支持集群模式</li><li>Memcached： 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据</li></ul></li><li><p>额外的功能</p><ul><li>Redis： 支持发布订阅模型、Lua 脚本、事务等功能</li><li>Memcached： 不支持</li></ul></li></ul><h3 id="为什么用-redis-作为-mysql-的缓存" tabindex="-1"><a class="header-anchor" href="#为什么用-redis-作为-mysql-的缓存"><span>为什么用 Redis 作为 MySQL 的缓存？</span></a></h3><p>主要是因为 <strong>Redis 具备「高性能」和「高并发」两种特性</strong>。</p><h4 id="redis-具备高性能" tabindex="-1"><a class="header-anchor" href="#redis-具备高性能"><span>Redis 具备高性能</span></a></h4><ul><li>无Redis缓存的情况下：假如用户第一次访问 MySQL 中的某些数据，此时Redis缓存还没有资源。会从<em>硬盘</em>上读取的，这个过程会比较<em>慢</em>。</li><li>在Redis缓存的情况下：该用户访问的数据缓存在 Redis 中，下一次再访问这些数据的时候就可以直接从缓存中获取了。操作 Redis 缓存就是直接操作<em>内存</em>，所以速度相当<em>快</em>。</li></ul><p><img src="'+r+'" alt="img" loading="lazy"></p><p>如果 MySQL 中的对应数据改变的之后，同步改变 Redis 缓存中相应的数据即可，不过这里会有 <strong>Redis 和 MySQL 双写一致性</strong> 的问题，后面我们会提到。</p><h4 id="redis-具备高并发" tabindex="-1"><a class="header-anchor" href="#redis-具备高并发"><span>Redis 具备高并发</span></a></h4><p>单台设备的 Redis 的 QPS（Query Per Second，每秒钟处理完请求的次数） 是 MySQL 的 10 倍</p><ul><li>Redis 单机的 QPS： 轻松破 10w</li><li>MySQL 单机的 QPS： 很难破 1w</li></ul><p>所以，直接访问 Redis 能够承受的请求是远远大于直接访问 MySQL 的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><hr><p>剩余部分见本文件夹外的其他内容</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li>《Redis 设计与实现》</li><li>《Redis 实战》</li><li>《Redis 核心技术与实战》</li><li>《Redis 核心原理与实战 》</li></ul>',30)]))}const h=i(a,[["render",o],["__file","01. 常见面试题.html.vue"]]),g=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/04.%20%E5%9B%BE%E8%A7%A3Redis/01.%20%E9%9D%A2%E8%AF%95%E7%AF%87/01.%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Redis 常见面试题","lang":"zh-CN","frontmatter":{"description":"Redis 常见面试题 不知不觉《图解 Redis》系列文章写了很多了，考虑到一些同学面试突击 Redis，所以我整理了 3 万字 + 40 张图的 Redis 八股文，共收集了 40 多个面试题。 发车！ 提纲 Redis 简介 简介 我们直接看 Redis 官方是怎么介绍自己的。 img Redis 官方的介绍原版是英文的，我翻译成了中文后截图的，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/04.%20%E5%9B%BE%E8%A7%A3Redis/01.%20%E9%9D%A2%E8%AF%95%E7%AF%87/01.%20%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Redis 常见面试题"}],["meta",{"property":"og:description","content":"Redis 常见面试题 不知不觉《图解 Redis》系列文章写了很多了，考虑到一些同学面试突击 Redis，所以我整理了 3 万字 + 40 张图的 Redis 八股文，共收集了 40 多个面试题。 发车！ 提纲 Redis 简介 简介 我们直接看 Redis 官方是怎么介绍自己的。 img Redis 官方的介绍原版是英文的，我翻译成了中文后截图的，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 常见面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Redis 常见面试题","slug":"redis-常见面试题","link":"#redis-常见面试题","children":[{"level":2,"title":"Redis 简介","slug":"redis-简介","link":"#redis-简介","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"【比较】Redis 和 Memcached","slug":"【比较】redis-和-memcached","link":"#【比较】redis-和-memcached","children":[{"level":4,"title":"共同点","slug":"共同点","link":"#共同点","children":[]},{"level":4,"title":"区别","slug":"区别","link":"#区别","children":[]}]},{"level":3,"title":"为什么用 Redis 作为 MySQL 的缓存？","slug":"为什么用-redis-作为-mysql-的缓存","link":"#为什么用-redis-作为-mysql-的缓存","children":[{"level":4,"title":"Redis 具备高性能","slug":"redis-具备高性能","link":"#redis-具备高性能","children":[]},{"level":4,"title":"Redis 具备高并发","slug":"redis-具备高并发","link":"#redis-具备高并发","children":[]}]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}]}],"git":{},"readingTime":{"minutes":3.37,"words":1011},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/01. 常见面试题.md","excerpt":"\\n<p>不知不觉《图解 Redis》系列文章写了很多了，考虑到一些同学面试突击 Redis，所以我整理了 3 万字 + 40 张图的 Redis 八股文，共收集了 40 多个面试题。</p>\\n<p>发车！</p>\\n<p></p>\\n<h2>Redis 简介</h2>\\n<h3>简介</h3>\\n<p>我们直接看 Redis 官方是怎么介绍自己的。</p>\\n<p></p>\\n<p>Redis 官方的介绍原版是英文的，我翻译成了中文后截图的，所以有些文字读起来会比较拗口，没关系，我会把里面比较重要的特性抽出来讲一下。</p>\\n<ul>\\n<li>特点：\\n<ul>\\n<li><strong>基于内存</strong>。对数据的读写操作都是在内存中完成，因此<strong>读写速度非常快</strong></li>\\n<li>对数据类型的操作都是<strong>原子性</strong>的，因为执行命令由<strong>单线程</strong>负责的，不存在并发竞争的问题</li>\\n</ul>\\n</li>\\n<li>应用场景：\\n<ul>\\n<li><strong>缓存，消息队列、分布式锁等场景</strong></li>\\n</ul>\\n</li>\\n<li>功能：\\n<ul>\\n<li><strong>提供了多种数据类型来支持不同的业务场景</strong>。比如 String (字符串)、Hash (哈希)、 List (列表)、Set (集合)、Zset (有序集合)、Bitmaps (位图)、HyperLogLog (基数统计)、GEO (地理信息)、Stream (流)</li>\\n<li>支持 <strong>事务 、持久化、Lua 脚本、多种集群方案（主从复制模式、哨兵模式、切片机群模式）、发布/订阅模式，内存淘汰机制、过期删除机制</strong> 等等</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/01. 常见面试题.md","value":{"title":"01. 常见面试题","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/01. 常见面试题.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{h as comp,g as data};
