import{_ as s,e as n,g as e,o as a}from"./app-BapqMaOt.js";const l={};function t(p,i){return a(),n("div",null,i[0]||(i[0]=[e(`<p>vue中有没有“继承”的概念，或者有哪些方式看起来像继承</p><hr><p>在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。</p><ol><li>组件组合（Component Composition）</li></ol><p>组件可以通过嵌套成为父子关系。通过将子组件包含在父组件的模板中，可以实现父组件与子组件之间的交互和数据传递。这样的组合可以实现类似继承的功能。</p><ol><li>混入（Mixins）</li></ol><p>混入是Vue的一种功能，允许在不同组件之间共享选项对象和方法。混入对象可以包含任何组件选项，将混入对象传递给Vue.extend()或Vue.mixin()可以使组件继承或扩展混入对象的一些功能。</p><p>例如：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mixin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            msg</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    methods</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        displayMsg</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            alert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mixin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> app</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    el</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#app&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式允许您在Vue组件中使用共享的方法、数据、计算属性、监听等选项，实现类似继承的功能。</p><ol><li>自定义指令</li></ol><p>Vue.js允许开发人员创建自定义指令，并在组件模板中使用。 自定义指令可以实现对DOM对象的更细致操作，如事件监听、属性绑定等。 这有助于在Vue组件中实现共享功能。</p><ol><li>作用域CSS</li></ol><p>在Vue中，您可以使用scoped关键字来限制CSS仅在组件中生效。 这为在父组件和子组件之间共享样式提供了一种机制，实现类似继承的功能。</p><p>总结，Vue.js可能没有明确的继承概念，但通过组件组合、混入(mixins)、自定义指令、作用域CSS等方式，可以有效地实现类似继承的功能。 我们可以通过这些技术组合，调整组件复用和扩展需求。</p>`,15)]))}const k=s(l,[["render",t],["__file","FAQ.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/FAQ.html","title":"FAQ","lang":"zh-CN","frontmatter":{"description":"vue中有没有“继承”的概念，或者有哪些方式看起来像继承 在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。 组件组合（Component Composition） 组件可以通过嵌套成为父子关系。通过将子组件包含在父组件...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Platform/Web/02.%20%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/Vue3/FAQ.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"vue中有没有“继承”的概念，或者有哪些方式看起来像继承 在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。 组件组合（Component Composition） 组件可以通过嵌套成为父子关系。通过将子组件包含在父组件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":1.69,"words":507},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/FAQ.md","excerpt":"<p>vue中有没有“继承”的概念，或者有哪些方式看起来像继承</p>\\n<hr>\\n<p>在Vue.js中，尽管没有直接提供类似于面向对象编程中的“继承”概念，但有几种方法可以实现类似继承的功能。 这主要包括Vue组件的组合、混入(mixins)、自定义指令和作用域CSS。</p>\\n<ol>\\n<li>组件组合（Component Composition）</li>\\n</ol>\\n<p>组件可以通过嵌套成为父子关系。通过将子组件包含在父组件的模板中，可以实现父组件与子组件之间的交互和数据传递。这样的组合可以实现类似继承的功能。</p>\\n<ol>\\n<li>混入（Mixins）</li>\\n</ol>\\n<p>混入是Vue的一种功能，允许在不同组件之间共享选项对象和方法。混入对象可以包含任何组件选项，将混入对象传递给Vue.extend()或Vue.mixin()可以使组件继承或扩展混入对象的一些功能。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/FAQ.md","value":{"title":"FAQ","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Platform/Web/02. 前端框架/Vue/Vue3/FAQ.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,r as data};
