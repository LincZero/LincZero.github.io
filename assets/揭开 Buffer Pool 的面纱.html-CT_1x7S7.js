import{_ as e,c as l,e as p,o as r}from"./app-BgHc8lP1.js";const n="/assets/e5a23e5c53ef471b947b5007866229fe-oLLSC66Z.png",i="/assets/%E7%BC%93%E5%86%B2%E6%B1%A0.drawio-C3pm1mDo.png",s="/assets/bufferpool%E5%86%85%E5%AE%B9.drawio-nikMWpvo.png",t="/assets/%E7%BC%93%E5%AD%98%E9%A1%B5.drawio-BK9xJ6DA.png",a="/assets/freelist.drawio-ufdmt-NW.png",f="/assets/Flush.drawio-BffCcX9q.png",u="/assets/lru-CP5DSDEx.png",g="/assets/lru2-ClcGxvp1.png",d="/assets/lru3-C2gqPzCX.png",c="/assets/bufferpoll_page-FpEtujZu.png",B="/assets/youngBold-BPvyKKz3.png",h="/assets/lrutwo.drawio-BPbNTUae.png",y="/assets/lrutwo2-Du8RY8Bv.png",m="/assets/lrutwo3-5f6vx8o0.png",P="/assets/lruthree.drawio-D2OEWHXD.png",b="/assets/lruthree1-BIuoD9Kq.png",_={};function E(k,o){return r(),l("div",null,o[0]||(o[0]=[p('<h1 id="揭开-buffer-pool-的面纱" tabindex="-1"><a class="header-anchor" href="#揭开-buffer-pool-的面纱"><span>揭开 Buffer Pool 的面纱</span></a></h1><p>今天就聊 MySQL 的 Buffer Pool，发车！</p><p><img src="'+n+'" alt="img" loading="lazy"></p><h2 id="buffer-pool-概念" tabindex="-1"><a class="header-anchor" href="#buffer-pool-概念"><span>Buffer Pool 概念</span></a></h2><h3 id="buffer-pool-需求-——-性能" tabindex="-1"><a class="header-anchor" href="#buffer-pool-需求-——-性能"><span>Buffer Pool 需求 —— 性能</span></a></h3><p>虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。</p><p>要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下次查询同样的数据的时候，直接从内存中读取。</p><p>为此，Innodb 存储引擎设计了一个<strong>缓冲池（Buffer Pool）</strong>，来提高数据库的读写<strong>性能</strong>。</p><p><img src="'+i+'" alt="img" loading="lazy"></p><p>有了缓冲池后：</p><ul><li>当读取数据时，如果数据存在于 Buffer Pool 中，客户端就会直接读取 Buffer Pool 中的数据，否则再去磁盘中读取。</li><li>当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，最后由后台线程将脏页写入到磁盘。</li></ul><h3 id="buffer-pool-大小" tabindex="-1"><a class="header-anchor" href="#buffer-pool-大小"><span>Buffer Pool 大小</span></a></h3><p>Buffer Pool 是在 MySQL 启动的时候，向操作系统申请的一片连续的内存空间</p><ul><li>默认配置下 Buffer Pool 只有 <code>128MB</code></li><li>也可以配置：通过调整 <code>innodb_buffer_pool_size</code> 参数来设置 Buffer Pool 的大小，一般建议设置成可用物理内存的 60%~80%</li></ul><h3 id="buffer-pool-缓存文人骚客" tabindex="-1"><a class="header-anchor" href="#buffer-pool-缓存文人骚客"><span>Buffer Pool 缓存文人骚客</span></a></h3><p>InnoDB 会把存储的数据划分为若干个「页」，以页作为磁盘和内存交互的基本单位，一个页的默认大小为 16KB。因此，Buffer Pool 同样需要按「页」来划分。</p><p>在 MySQL 启动的时候，<strong>InnoDB 会为 Buffer Pool 申请一片连续的内存空间，然后按照默认的<code>16KB</code>的大小划分出一个个的页， Buffer Pool 中的页就叫做缓存页</strong>。此时这些缓存页都是空闲的，之后随着程序的运行，才会有磁盘上的页被缓存到 Buffer Pool 中。</p><p>所以，MySQL 刚启动的时候，你会观察到使用的虚拟内存空间很大，而使用到的物理内存空间却很小，这是因为只有这些虚拟内存被访问后，操作系统才会触发缺页中断，接着将虚拟地址和物理地址建立映射关系。</p><p>Buffer Pool 除了缓存「索引页」和「数据页」，还包括了 undo 页，插入缓存、自适应哈希索引、锁信息等等。</p><p><img src="'+s+'" alt="img" loading="lazy"></p><p>为了更好的管理这些在 Buffer Pool 中的缓存页，InnoDB 为每一个缓存页都创建了一个<strong>控制块</strong>，控制块信息包括「缓存页的表空间、页号、缓存页地址、链表节点」等等。</p><p>控制块也是占有内存空间的，它是放在 Buffer Pool 的最前面，接着才是缓存页，如下图：</p><p><img src="'+t+'" alt="img" loading="lazy"></p><p>上图中控制块和缓存页之间灰色部分称为碎片空间。</p><blockquote><p>为什么会有碎片空间呢？</p></blockquote><p>你想想啊，每一个控制块都对应一个缓存页，那在分配足够多的控制块和缓存页后，可能剩余的那点儿空间不够一对控制块和缓存页的大小，自然就用不到喽，这个用不到的那点儿内存空间就被称为碎片了。</p><p>当然，如果你把 Buffer Pool 的大小设置的刚刚好的话，也可能不会产生碎片。</p><blockquote><p>查询一条记录，就只需要缓冲一条记录吗？</p></blockquote><p>不是的。</p><p>当我们查询一条记录时，InnoDB 是会把整个页的数据加载到 Buffer Pool 中，因为，通过索引只能定位到磁盘中的页，而不能定位到页中的一条记录。将页加载到 Buffer Pool 后，再通过页里的页目录去定位到某条具体的记录。</p><p>关于页结构长什么样和索引怎么查询数据的问题可以在这篇找到答案：<a href="https://mp.weixin.qq.com/s/A5gNVXMNE-iIlY3oofXtLw" target="_blank" rel="noopener noreferrer">换一个角度看 B+ 树</a></p><p><a href="https://mp.weixin.qq.com/s/A5gNVXMNE-iIlY3oofXtLw" target="_blank" rel="noopener noreferrer"></a></p><p><a href="https://mp.weixin.qq.com/s/A5gNVXMNE-iIlY3oofXtLw" target="_blank" rel="noopener noreferrer"> (opens new window)</a></p><h2 id="buffer-pool-的管理" tabindex="-1"><a class="header-anchor" href="#buffer-pool-的管理"><span>Buffer Pool 的管理</span></a></h2><h3 id="如何管理空闲页" tabindex="-1"><a class="header-anchor" href="#如何管理空闲页"><span>如何管理空闲页？</span></a></h3><p>Buffer Pool 是一片连续的内存空间，当 MySQL 运行一段时间后，这片连续的内存空间中的缓存页既有空闲的，也有被使用的。</p><p>那当我们从磁盘读取数据的时候，总不能通过遍历这一片连续的内存空间来找到空闲的缓存页吧，这样效率太低了。</p><p>所以，为了能够快速找到空闲的缓存页，可以使用链表结构，将空闲缓存页的「控制块」作为链表的节点，这个链表称为 <strong>Free 链表</strong>（空闲链表）。</p><p><img src="'+a+'" alt="img" loading="lazy"></p><p>Free 链表上除了有控制块，还有一个头节点，该头节点包含链表的头节点地址，尾节点地址，以及当前链表中节点的数量等信息。</p><p>Free 链表节点是一个一个的控制块，而每个控制块包含着对应缓存页的地址，所以相当于 Free 链表节点都对应一个空闲的缓存页。</p><p>有了 Free 链表后，每当需要从磁盘中加载一个页到 Buffer Pool 中时，就从 Free链表中取一个空闲的缓存页，并且把该缓存页对应的控制块的信息填上，然后把该缓存页对应的控制块从 Free 链表中移除。</p><h3 id="如何管理脏页" tabindex="-1"><a class="header-anchor" href="#如何管理脏页"><span>如何管理脏页？</span></a></h3><p>设计 Buffer Pool 除了能提高读性能，还能提高写性能，也就是更新数据的时候，不需要每次都要写入磁盘，而是将 Buffer Pool 对应的缓存页标记为<strong>脏页</strong>，然后再由后台线程将脏页写入到磁盘。</p><p>那为了能快速知道哪些缓存页是脏的，于是就设计出 <strong>Flush 链表</strong>，它跟 Free 链表类似的，链表的节点也是控制块，区别在于 Flush 链表的元素都是脏页。</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>有了 Flush 链表后，后台线程就可以遍历 Flush 链表，将脏页写入到磁盘。</p><h3 id="如何提高缓存命中率" tabindex="-1"><a class="header-anchor" href="#如何提高缓存命中率"><span>如何提高缓存命中率？</span></a></h3><p>Buffer Pool 的大小是有限的，对于一些频繁访问的数据我们希望可以一直留在 Buffer Pool 中，而一些很少访问的数据希望可以在某些时机可以淘汰掉，从而保证 Buffer Pool 不会因为满了而导致无法再缓存新的数据，同时还能保证常用数据留在 Buffer Pool 中。</p><p>要实现这个，最容易想到的就是 LRU（Least recently used）算法。</p><p>该算法的思路是，链表头部的节点是最近使用的，而链表末尾的节点是最久没被使用的。那么，当空间不够了，就淘汰最久没被使用的节点，从而腾出空间。</p><p>简单的 LRU 算法的实现思路是这样的：</p><ul><li>当访问的页在 Buffer Pool 里，就直接把该页对应的 LRU 链表节点移动到链表的头部。</li><li>当访问的页不在 Buffer Pool 里，除了要把页放入到 LRU 链表的头部，还要淘汰 LRU 链表末尾的节点。</li></ul><p>比如下图，假设 LRU 链表长度为 5，LRU 链表从左到右有 1，2，3，4，5 的页。</p><p><img src="'+u+'" alt="img" loading="lazy"></p><p>如果访问了 3 号的页，因为 3 号页在 Buffer Pool 里，所以把 3 号页移动到头部即可。</p><p><img src="'+g+'" alt="img" loading="lazy"></p><p>而如果接下来，访问了 8 号页，因为 8 号页不在 Buffer Pool 里，所以需要先淘汰末尾的 5 号页，然后再将 8 号页加入到头部。</p><p><img src="'+d+'" alt="img" loading="lazy"></p><p>到这里我们可以知道，Buffer Pool 里有三种页和链表来管理数据。</p><p><img src="'+c+'" alt="img" loading="lazy"></p><p>图中：</p><ul><li>Free Page（空闲页），表示此页未被使用，位于 Free 链表；</li><li>Clean Page（干净页），表示此页已被使用，但是页面未发生修改，位于LRU 链表。</li><li>Dirty Page（脏页），表示此页「已被使用」且「已经被修改」，其数据和磁盘上的数据已经不一致。当脏页上的数据写入磁盘后，内存数据和磁盘数据一致，那么该页就变成了干净页。脏页同时存在于 LRU 链表和 Flush 链表。</li></ul><p>简单的 LRU 算法并没有被 MySQL 使用，因为简单的 LRU 算法无法避免下面这两个问题：</p><ul><li>预读失效；</li><li>Buffer Pool 污染；</li></ul><blockquote><p>什么是预读失效？</p></blockquote><p>先来说说 MySQL 的预读机制。程序是有空间局部性的，靠近当前被访问数据的数据，在未来很大概率会被访问到。</p><p>所以，MySQL 在加载数据页时，会提前把它相邻的数据页一并加载进来，目的是为了减少磁盘 IO。</p><p>但是可能这些<strong>被提前加载进来的数据页，并没有被访问</strong>，相当于这个预读是白做了，这个就是<strong>预读失效</strong>。</p><p>如果使用简单的 LRU 算法，就会把预读页放到 LRU 链表头部，而当 Buffer Pool空间不够的时候，还需要把末尾的页淘汰掉。</p><p>如果这些预读页如果一直不会被访问到，就会出现一个很奇怪的问题，不会被访问的预读页却占用了 LRU 链表前排的位置，而末尾淘汰的页，可能是频繁访问的页，这样就大大降低了缓存命中率。</p><blockquote><p>怎么解决预读失效而导致缓存命中率降低的问题？</p></blockquote><p>我们不能因为害怕预读失效，而将预读机制去掉，大部分情况下，局部性原理还是成立的。</p><p>要避免预读失效带来影响，最好就是<strong>让预读的页停留在 Buffer Pool 里的时间要尽可能的短，让真正被访问的页才移动到 LRU 链表的头部，从而保证真正被读取的热数据留在 Buffer Pool 里的时间尽可能长</strong>。</p><p>那到底怎么才能避免呢？</p><p>MySQL 是这样做的，它改进了 LRU 算法，将 LRU 划分了 2 个区域：<strong>old 区域 和 young 区域</strong>。</p><p>young 区域在 LRU 链表的前半部分，old 区域则是在后半部分，如下图：</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>old 区域占整个 LRU 链表长度的比例可以通过 <code>innodb_old_blocks_pct</code> 参数来设置，默认是 37，代表整个 LRU 链表中 young 区域与 old 区域比例是 63:37。</p><p><strong>划分这两个区域后，预读的页就只需要加入到 old 区域的头部，当页被真正访问的时候，才将页插入 young 区域的头部</strong>。如果预读的页一直没有被访问，就会从 old 区域移除，这样就不会影响 young 区域中的热点数据。</p><p>接下来，给大家举个例子。</p><p>假设有一个长度为 10 的 LRU 链表，其中 young 区域占比 70 %，old 区域占比 30 %。</p><p><img src="'+h+'" alt="img" loading="lazy"></p><p>现在有个编号为 20 的页被预读了，这个页只会被插入到 old 区域头部，而 old 区域末尾的页（10号）会被淘汰掉。</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>如果 20 号页一直不会被访问，它也没有占用到 young 区域的位置，而且还会比 young 区域的数据更早被淘汰出去。</p><p>如果 20 号页被预读后，立刻被访问了，那么就会将它插入到 young 区域的头部，young 区域末尾的页（7号），会被挤到 old 区域，作为 old 区域的头部，这个过程并不会有页被淘汰。</p><p><img src="'+m+'" alt="img" loading="lazy"></p><p>虽然通过划分 old 区域 和 young 区域避免了预读失效带来的影响，但是还有个问题无法解决，那就是 Buffer Pool 污染的问题。</p><blockquote><p>什么是 Buffer Pool 污染？</p></blockquote><p>当某一个 SQL 语句<strong>扫描了大量的数据</strong>时，在 Buffer Pool 空间比较有限的情况下，可能会将 <strong>Buffer Pool 里的所有页都替换出去，导致大量热数据被淘汰了</strong>，等这些热数据又被再次访问的时候，由于缓存未命中，就会产生大量的磁盘 IO，MySQL 性能就会急剧下降，这个过程被称为 <strong>Buffer Pool 污染</strong>。</p><p>注意， Buffer Pool 污染并不只是查询语句查询出了大量的数据才出现的问题，即使查询出来的结果集很小，也会造成 Buffer Pool 污染。</p><p>比如，在一个数据量非常大的表，执行了这条语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t_user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;%xiaolin%&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可能这个查询出来的结果就几条记录，但是由于这条语句会发生索引失效，所以这个查询过程是全表扫描的，接着会发生如下的过程：</p><ul><li>从磁盘读到的页加入到 LRU 链表的 old 区域头部；</li><li>当从页里读取行记录时，也就是页被访问的时候，就要将该页放到 young 区域头部；</li><li>接下来拿行记录的 name 字段和字符串 xiaolin 进行模糊匹配，如果符合条件，就加入到结果集里；</li><li>如此往复，直到扫描完表中的所有记录。</li></ul><p>经过这一番折腾，原本 young 区域的热点数据都会被替换掉。</p><p>举个例子，假设需要批量扫描：21，22，23，24，25 这五个页，这些页都会被逐一访问（读取页里的记录）。</p><p><img src="'+P+'" alt="img" loading="lazy"></p><p>在批量访问这些数据的时候，会被逐一插入到 young 区域头部。</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>可以看到，原本在 young 区域的热点数据 6 和 7 号页都被淘汰了，这就是 Buffer Pool 污染的问题。</p><blockquote><p>怎么解决出现 Buffer Pool 污染而导致缓存命中率下降的问题？</p></blockquote><p>像前面这种全表扫描的查询，很多缓冲页其实只会被访问一次，但是它却只因为被访问了一次而进入到 young 区域，从而导致热点数据被替换了。</p><p>LRU 链表中 young 区域就是热点数据，只要我们提高进入到 young 区域的门槛，就能有效地保证 young 区域里的热点数据不会被替换掉。</p><p>MySQL 是这样做的，进入到 young 区域条件增加了一个<strong>停留在 old 区域的时间判断</strong>。</p><p>具体是这样做的，在对某个处在 old 区域的缓存页进行第一次访问时，就在它对应的控制块中记录下来这个访问时间：</p><ul><li>如果后续的访问时间与第一次访问的时间<strong>在某个时间间隔内</strong>，那么<strong>该缓存页就不会被从 old 区域移动到 young 区域的头部</strong>；</li><li>如果后续的访问时间与第一次访问的时间<strong>不在某个时间间隔内</strong>，那么<strong>该缓存页移动到 young 区域的头部</strong>；</li></ul><p>这个间隔时间是由 <code>innodb_old_blocks_time</code> 控制的，默认是 1000 ms。</p><p>也就说，<strong>只有同时满足「被访问」与「在 old 区域停留时间超过 1 秒」两个条件，才会被插入到 young 区域头部</strong>，这样就解决了 Buffer Pool 污染的问题 。</p><p>另外，MySQL 针对 young 区域其实做了一个优化，为了防止 young 区域节点频繁移动到头部。young 区域前面 1/4 被访问不会移动到链表头部，只有后面的 3/4被访问了才会。</p><h3 id="脏页什么时候会被刷入磁盘" tabindex="-1"><a class="header-anchor" href="#脏页什么时候会被刷入磁盘"><span>脏页什么时候会被刷入磁盘？</span></a></h3><p>引入了 Buffer Pool 后，当修改数据时，首先是修改 Buffer Pool 中数据所在的页，然后将其页设置为脏页，但是磁盘中还是原数据。</p><p>因此，脏页需要被刷入磁盘，保证缓存和磁盘数据一致，但是若每次修改数据都刷入磁盘，则性能会很差，因此一般都会在一定时机进行批量刷盘。</p><p>可能大家担心，如果在脏页还没有来得及刷入到磁盘时，MySQL 宕机了，不就丢失数据了吗？</p><p>这个不用担心，InnoDB 的更新操作采用的是 Write Ahead Log 策略，即先写日志，再写入磁盘，通过 redo log 日志让 MySQL 拥有了崩溃恢复能力。</p><p>下面几种情况会触发脏页的刷新：</p><ul><li>当 redo log 日志满了的情况下，会主动触发脏页刷新到磁盘；</li><li>Buffer Pool 空间不足时，需要将一部分数据页淘汰掉，如果淘汰的是脏页，需要先将脏页同步到磁盘；</li><li>MySQL 认为空闲时，后台线程会定期将适量的脏页刷入到磁盘；</li><li>MySQL 正常关闭之前，会把所有的脏页刷入到磁盘；</li></ul><p>在我们开启了慢 SQL 监控后，如果你发现**「偶尔」会出现一些用时稍长的 SQL**，这可能是因为脏页在刷新到磁盘时可能会给数据库带来性能开销，导致数据库操作抖动。</p><p>如果间断出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Innodb 存储引擎设计了一个<strong>缓冲池（*Buffer Pool*）</strong>，来提高数据库的读写性能。</p><p>Buffer Pool 以页为单位缓冲数据，可以通过 <code>innodb_buffer_pool_size</code> 参数调整缓冲池的大小，默认是 128 M。</p><p>Innodb 通过三种链表来管理缓页：</p><ul><li>Free List （空闲页链表），管理空闲页；</li><li>Flush List （脏页链表），管理脏页；</li><li>LRU List，管理脏页+干净页，将最近且经常查询的数据缓存在其中，而不常查询的数据就淘汰出去。；</li></ul><p>InnoDB 对 LRU 做了一些优化，我们熟悉的 LRU 算法通常是将最近查询的数据放到 LRU 链表的头部，而 InnoDB 做 2 点优化：</p><ul><li>将 LRU 链表 分为<strong>young 和 old 两个区域</strong>，加入缓冲池的页，优先插入 old 区域；页被访问时，才进入 young 区域，目的是为了解决预读失效的问题。</li><li>当**「页被访问」且「 old 区域停留时间超过 <code>innodb_old_blocks_time</code> 阈值（默认为1秒）」**时，才会将页插入到 young 区域，否则还是插入到 old 区域，目的是为了解决批量数据访问，大量热数据淘汰的问题。</li></ul><p>可以通过调整 <code>innodb_old_blocks_pct</code> 参数，设置 young 区域和 old 区域比例。</p><p>在开启了慢 SQL 监控后，如果你发现「偶尔」会出现一些用时稍长的 SQL，这可因为脏页在刷新到磁盘时导致数据库性能抖动。如果在很短的时间出现这种现象，就需要调大 Buffer Pool 空间或 redo log 日志的大小。</p>',129)]))}const A=e(_,[["render",E],["__file","揭开 Buffer Pool 的面纱.html.vue"]]),D=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/03.%20%E5%9B%BE%E8%A7%A3MySQL/06.%20%E5%86%85%E5%AD%98/%E6%8F%AD%E5%BC%80%20Buffer%20Pool%20%E7%9A%84%E9%9D%A2%E7%BA%B1.html","title":"揭开 Buffer Pool 的面纱","lang":"zh-CN","frontmatter":{"description":"揭开 Buffer Pool 的面纱 今天就聊 MySQL 的 Buffer Pool，发车！ img Buffer Pool 概念 Buffer Pool 需求 —— 性能 虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。 要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/03.%20%E5%9B%BE%E8%A7%A3MySQL/06.%20%E5%86%85%E5%AD%98/%E6%8F%AD%E5%BC%80%20Buffer%20Pool%20%E7%9A%84%E9%9D%A2%E7%BA%B1.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"揭开 Buffer Pool 的面纱"}],["meta",{"property":"og:description","content":"揭开 Buffer Pool 的面纱 今天就聊 MySQL 的 Buffer Pool，发车！ img Buffer Pool 概念 Buffer Pool 需求 —— 性能 虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。 要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"揭开 Buffer Pool 的面纱\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"揭开 Buffer Pool 的面纱","slug":"揭开-buffer-pool-的面纱","link":"#揭开-buffer-pool-的面纱","children":[{"level":2,"title":"Buffer Pool 概念","slug":"buffer-pool-概念","link":"#buffer-pool-概念","children":[{"level":3,"title":"Buffer Pool 需求 —— 性能","slug":"buffer-pool-需求-——-性能","link":"#buffer-pool-需求-——-性能","children":[]},{"level":3,"title":"Buffer Pool 大小","slug":"buffer-pool-大小","link":"#buffer-pool-大小","children":[]},{"level":3,"title":"Buffer Pool 缓存文人骚客","slug":"buffer-pool-缓存文人骚客","link":"#buffer-pool-缓存文人骚客","children":[]}]},{"level":2,"title":"Buffer Pool 的管理","slug":"buffer-pool-的管理","link":"#buffer-pool-的管理","children":[{"level":3,"title":"如何管理空闲页？","slug":"如何管理空闲页","link":"#如何管理空闲页","children":[]},{"level":3,"title":"如何管理脏页？","slug":"如何管理脏页","link":"#如何管理脏页","children":[]},{"level":3,"title":"如何提高缓存命中率？","slug":"如何提高缓存命中率","link":"#如何提高缓存命中率","children":[]},{"level":3,"title":"脏页什么时候会被刷入磁盘？","slug":"脏页什么时候会被刷入磁盘","link":"#脏页什么时候会被刷入磁盘","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{},"readingTime":{"minutes":15.38,"words":4613},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/06. 内存/揭开 Buffer Pool 的面纱.md","excerpt":"\\n<p>今天就聊 MySQL 的 Buffer Pool，发车！</p>\\n<p></p>\\n<h2>Buffer Pool 概念</h2>\\n<h3>Buffer Pool 需求 —— 性能</h3>\\n<p>虽然说 MySQL 的数据是存储在磁盘里的，但是也不能每次都从磁盘里面读取数据，这样性能是极差的。</p>\\n<p>要想提升查询性能，加个缓存就行了嘛。所以，当数据从磁盘中取出后，缓存内存中，下次查询同样的数据的时候，直接从内存中读取。</p>\\n<p>为此，Innodb 存储引擎设计了一个<strong>缓冲池（Buffer Pool）</strong>，来提高数据库的读写<strong>性能</strong>。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/06. 内存/揭开 Buffer Pool 的面纱.md","value":{"title":"揭开 Buffer Pool 的面纱","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/03. 图解MySQL/06. 内存/揭开 Buffer Pool 的面纱.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{A as comp,D as data};
