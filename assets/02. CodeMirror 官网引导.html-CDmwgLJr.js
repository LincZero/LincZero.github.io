import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as e,e as s,d as n,a}from"./app-CtAObfkX.js";const l={},d=a('<h1 id="codemirror-官网引导-系统指南-guide" tabindex="-1"><a class="header-anchor" href="#codemirror-官网引导-系统指南-guide"><span>CodeMirror 官网引导 - 系统指南（Guide）</span></a></h1><p>https://codemirror.net/docs/guide/</p><h2 id="架构概述" tabindex="-1"><a class="header-anchor" href="#架构概述"><span>架构概述</span></a></h2><h3 id="模块化-modularity" tabindex="-1"><a class="header-anchor" href="#模块化-modularity"><span>模块化（Modularity）</span></a></h3><p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p><p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p>',6),u={href:"https://codemirror.net/docs/ref/#state",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"@codemirror/state",-1),k={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},m={href:"https://codemirror.net/docs/ref/#state.Transaction",target:"_blank",rel:"noopener noreferrer"},f={href:"https://codemirror.net/docs/ref/#view",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"@codemirror/view",-1),v={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},g={href:"https://codemirror.net/docs/ref/#commands",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"@codemirror/commands",-1),y={href:"https://codemirror.net/docs/ref/#commands.defaultKeymap",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>这就是一个最小可行的编辑器的样子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/state&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>EditorView<span class="token punctuation">,</span> keymap<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/view&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>defaultKeymap<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/commands&quot;</span>

<span class="token keyword">let</span> startState <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>keymap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>defaultKeymap<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EditorView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> startState<span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),E={href:"https://codemirror.net/docs/ref/#view.lineNumbers",target:"_blank",rel:"noopener noreferrer"},x={href:"https://codemirror.net/docs/ref/#h_undo_history",target:"_blank",rel:"noopener noreferrer"},S={href:"https://codemirror.net/docs/ref/#codemirror",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"codemirror",-1),M=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorView<span class="token punctuation">,</span> basicSetup<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;codemirror&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>javascript<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/lang-javascript&quot;</span>

<span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EditorView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span>basicSetup<span class="token punctuation">,</span> <span class="token function">javascript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules",target:"_blank",rel:"noopener noreferrer"},j={href:"https://rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://webpack.js.org/",target:"_blank",rel:"noopener noreferrer"},A=e("h3",{id:"功能核心-命令式外壳-functional-core-imperative-shell",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#功能核心-命令式外壳-functional-core-imperative-shell"},[e("span",null,"功能核心，命令式外壳（Functional Core, Imperative Shell）")])],-1),T=e("p",null,[n("指导 CodeMirror 架构的一种态度是，"),e("strong",null,"功能"),n("性（纯）代码创造新的价值而不是产生副作用，它比"),e("strong",null,"命令式"),n("代码更容易使用。 但是浏览器 DOM 显然是"),e("strong",null,"命令式"),n("的，与 CodeMirror 集成的许多系统一样。")],-1),V={href:"https://codemirror.net/docs/ref/#state.Text",target:"_blank",rel:"noopener noreferrer"},B={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},O={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},F={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>TypeScript 接口试图通过将数组和对象属性标记为<code>readonly</code>. 当使用普通的旧 JavaScript 时，可能更难记住这一点。但作为一般规则，除非在文档中明确描述，否则不支持在库创建的对象中重新分配属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> state <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// BAD WRONG NO GOOD CODE:</span>
state<span class="token punctuation">.</span>doc <span class="token operator">=</span> Text<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- DON&#39;T DO THIS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="状态和更新-state-and-updates" tabindex="-1"><a class="header-anchor" href="#状态和更新-state-and-updates"><span>状态和更新（State and Updates）</span></a></h3>`,3),N={href:"https://redux.js.org/",target:"_blank",rel:"noopener noreferrer"},J={href:"https://guide.elm-lang.org/architecture/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://codemirror.net/docs/ref/#view.EditorView",target:"_blank",rel:"noopener noreferrer"},L={href:"https://codemirror.net/docs/ref/#view.EditorView.state",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"state",-1),I={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"EditorState",-1),z={href:"https://codemirror.net/docs/ref/#state.EditorState.update",target:"_blank",rel:"noopener noreferrer"},U={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://codemirror.net/docs/ref/#state.Transaction",target:"_blank",rel:"noopener noreferrer"},K={href:"https://codemirror.net/docs/ref/#view.EditorView.dispatch",target:"_blank",rel:"noopener noreferrer"},H=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// (Assume view is an EditorView instance holding the document &quot;123&quot;.)</span>
<span class="token keyword">let</span> transaction <span class="token operator">=</span> view<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">changes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;0123&quot;</span>
<span class="token comment">// At this point the view still shows the old state.</span>
view<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span>
<span class="token comment">// And now it shows the new state.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>典型用户交互期间的数据流如下所示：</p>`,2),Y=a('<p>视图监听事件。当 DOM 事件进入时，它（或绑定到键的命令，或由扩展注册的事件处理程序）将它们转换为状态事务并分发它们。这建立了一个新的状态。当新状态被提供给视图时，它会自行更新。</p><h3 id="扩展-extension" tabindex="-1"><a class="header-anchor" href="#扩展-extension"><span>扩展（Extension）</span></a></h3><h3 id="文档偏移-document-offsets" tabindex="-1"><a class="header-anchor" href="#文档偏移-document-offsets"><span>文档偏移（Document offsets）</span></a></h3><h2 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型"><span>数据模型</span></a></h2><h3 id="文件变更-document-changes" tabindex="-1"><a class="header-anchor" href="#文件变更-document-changes"><span>文件变更（Document-changes）</span></a></h3><h3 id="选择-selection" tabindex="-1"><a class="header-anchor" href="#选择-selection"><span>选择（selection）</span></a></h3><h3 id="配置-configuration" tabindex="-1"><a class="header-anchor" href="#配置-configuration"><span>配置（Configuration）</span></a></h3><h3 id="处理-transactions-机翻是交易" tabindex="-1"><a class="header-anchor" href="#处理-transactions-机翻是交易"><span>处理（Transactions 机翻是交易？）</span></a></h3>',8),Q={href:"https://codemirror.net/docs/ref/#state.EditorState.update",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"update",-1),$={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.changes",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.selection",target:"_blank",rel:"noopener noreferrer"},en={href:"https://codemirror.net/docs/ref/#state.EditorSelection.map",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.scrollIntoView",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.annotations",target:"_blank",rel:"noopener noreferrer"},an={href:"https://codemirror.net/docs/ref/#state.Transaction%5EuserEvent",target:"_blank",rel:"noopener noreferrer"},on=e("code",null,"userEvent",-1),rn={href:"https://codemirror.net/docs/ref/#state.TransactionSpec.effects",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://codemirror.net/docs/ref/#state.StateEffect%5Ereconfigure",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://codemirror.net/docs/ref/#state.Compartment.reconfigure",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://codemirror.net/docs/ref/#state.Compartment",target:"_blank",rel:"noopener noreferrer"},dn=a('<p>要完全重置状态（例如加载新文档），建议创建新状态而不是事务。这将确保不会出现不需要的状态（例如撤消历史事件）。</p><h2 id="the-view" tabindex="-1"><a class="header-anchor" href="#the-view"><span>The View</span></a></h2><h3 id="视口-viewport" tabindex="-1"><a class="header-anchor" href="#视口-viewport"><span>视口（Viewport）</span></a></h3><h3 id="更新周期-update-cycle" tabindex="-1"><a class="header-anchor" href="#更新周期-update-cycle"><span>更新周期（Update-cycle）</span></a></h3><h3 id="dom结构-dom-structure" tabindex="-1"><a class="header-anchor" href="#dom结构-dom-structure"><span>DOM结构（Dom-structure）</span></a></h3><h3 id="风格和主题-styles-and-themes" tabindex="-1"><a class="header-anchor" href="#风格和主题-styles-and-themes"><span>风格和主题（Styles-and-themes）</span></a></h3><h3 id="命令-commands" tabindex="-1"><a class="header-anchor" href="#命令-commands"><span>命令（Commands）</span></a></h3><h2 id="扩展cm-extending-codemirror" tabindex="-1"><a class="header-anchor" href="#扩展cm-extending-codemirror"><span>扩展CM（Extending-codemirror）</span></a></h2><p>有许多不同的方法可以扩展 CodeMirror，并且为给定的用例选择正确的方法并不总是显而易见的。本节介绍编写编辑器扩展需要熟悉的各种概念。</p><h3 id="状态字段-state-fields" tabindex="-1"><a class="header-anchor" href="#状态字段-state-fields"><span>状态字段（State-fields）</span></a></h3><p>（可参考：[OB-状态字段](../Plugin_Obsidian/01. Obsidian插件开发.md/###状态字段 <code>StateField</code> - OB) ）</p>',11),un={href:"https://codemirror.net/docs/ref/#commands.history",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://codemirror.net/docs/ref/#h_folding",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://codemirror.net/docs/ref/#state.StateField",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://codemirror.net/docs/ref/#state.EditorState",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://redux.js.org/basics/reducers/",target:"_blank",rel:"noopener noreferrer"},_n=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>EditorState<span class="token punctuation">,</span> StateField<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/state&quot;</span>

<span class="token keyword">let</span> countDocChanges <span class="token operator">=</span> StateField<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">{</span>						<span class="token comment">// 定义一个状态字段 —— countDocChanges</span>
  <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> tr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> tr<span class="token punctuation">.</span>docChanged <span class="token operator">?</span> value <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> value <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> state <span class="token operator">=</span> EditorState<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">extensions</span><span class="token operator">:</span> countDocChanges<span class="token punctuation">}</span><span class="token punctuation">)</span>	<span class="token comment">// 根据该状态字段 创建一个编辑器状态</span>
state <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">changes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">insert</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>state	<span class="token comment">// 更新状态</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span>countDocChanges<span class="token punctuation">)</span><span class="token punctuation">)</span> 						<span class="token comment">// 打印状态字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vn={href:"https://codemirror.net/docs/ref/#state.Annotation",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://codemirror.net/docs/ref/#state.StateEffect",target:"_blank",rel:"noopener noreferrer"},bn=e("p",null,[n("尝试避免采取将状态放入实际状态字段的步骤可能很诱人——声明一个状态有点冗长，并且为每个状态更改触发整个事务可能感觉有点重量级。但在几乎所有情况下，将您的状态绑定到编辑器范围的状态更新周期中是一个"),e("em",null,"非常"),n("好的主意，因为它使保持所有内容同步变得容易得多。")],-1),yn=e("h3",{id:"影响视图-affecting-the-view",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#影响视图-affecting-the-view"},[e("span",null,"影响视图（Affecting-the-view）")])],-1),wn={href:"https://codemirror.net/docs/ref/#view.ViewPlugin",target:"_blank",rel:"noopener noreferrer"},En=a(`<p>这个简单的插件<strong>在编辑器的角落显示文档大小</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>ViewPlugin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@codemirror/view&quot;</span>

<span class="token keyword">const</span> docSizePlugin <span class="token operator">=</span> ViewPlugin<span class="token punctuation">.</span><span class="token function">fromClass</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">view</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> view<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 创建一个dom元素</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span>
      <span class="token string">&quot;position: absolute; inset-block-start: 2px; inset-inline-end: 5px&quot;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>textContent <span class="token operator">=</span> view<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>length					<span class="token comment">// 用来显示文档的长度</span>
  <span class="token punctuation">}</span>

  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">update</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>update<span class="token punctuation">.</span>docChanged<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>textContent <span class="token operator">=</span> update<span class="token punctuation">.</span>state<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>length				<span class="token comment">// 视图刷新时更新文档的长度</span>
  <span class="token punctuation">}</span>

  <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图插件通常不应保持（非派生）状态。它们最适合作为对保存在编辑器状态中的数据的浅层视图。</p><p>当状态被重新配置时，不属于新配置的视图插件将被销毁（这就是为什么，如果他们对编辑器进行了更改，他们应该定义一个<code>destroy</code>方法来撤消这些更改）。</p><p>当视图插件崩溃时，它会自动禁用以避免关闭整个视图。</p><h3 id="装饰文档-decorating-the-document" tabindex="-1"><a class="header-anchor" href="#装饰文档-decorating-the-document"><span><s>装饰文档（Decorating-the-document）</s></span></a></h3><p><mark>（详见 Decoration 专题）</mark></p><p>如果没有另行通知，CodeMirror 会将文档绘制为纯文本。<em>修饰</em>是一种机制，扩展可以通过这种机制影响文档的外观。它们有四种类型：</p>`,8),xn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Emark",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Ewidget",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Ereplace",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://codemirror.net/docs/ref/#view.Decoration%5Eline",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://codemirror.net/docs/ref/#view.EditorView%5Edecorations",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://codemirror.net/docs/ref/#state.RangeSet",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://codemirror.net/docs/ref/#state.RangeSet.map",target:"_blank",rel:"noopener noreferrer"},An={href:"https://codemirror.net/docs/ref/#state.RangeSetBuilder",target:"_blank",rel:"noopener noreferrer"},Tn=e("p",null,"提供装饰的方式有两种",-1),Vn=e("li",null,"直接",-1),Bn={href:"https://codemirror.net/docs/ref/#state.StateField%5Edefine%5Econfig.provide",target:"_blank",rel:"noopener noreferrer"},On={href:"https://codemirror.net/docs/ref/#view.EditorView.visibleRanges",target:"_blank",rel:"noopener noreferrer"},Fn=e("h3",{id:"扩展架构-extension-architecture",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#扩展架构-extension-architecture"},[e("span",null,"扩展架构（Extension-architecture）")])],-1),Pn=e("p",null,"要创建给定的编辑器功能，您通常需要组合不同类型的扩展：用于保持状态的状态字段、用于提供样式的基本主题、用于管理输入和输出的视图插件、一些命令，可能是用于配置的方面.",-1),Nn=e("p",null,"一种常见的模式是导出一个函数，该函数返回使您的功能正常工作所需的扩展值。使它成为一个函数，即使它（还）不接受参数也是一个好主意——它使得以后添加配置选项成为可能，而不会破坏向后兼容性。",-1),Jn=e("p",null,"由于扩展可以引入其他扩展，因此考虑多次包含您的扩展时会发生什么会很有用。对于某些类型的扩展，例如键盘映射，只做多次它正在做的事情是合适的。但通常那样会很浪费，甚至会破坏某些东西。",-1),Gn=e("p",null,"通常可以通过重复删除相同的扩展值来多次使用扩展，只要做正确的事情——如果你确保只创建一次静态扩展值（主题、状态字段、视图插件等），并且总是从你的扩展构造函数返回相同的实例，你只会在编辑器中得到它们的一个副本。",-1),Ln=e("p",null,"但是当您的扩展允许配置时，您的其他逻辑可能需要访问它。当扩展的不同实例有不同的配置时，你会怎么做？",-1),Rn={href:"https://codemirror.net/docs/ref/#state.Facet%5Edefine%5Econfig.combine",target:"_blank",rel:"noopener noreferrer"},In={href:"https://codemirror.net/examples/zebra",target:"_blank",rel:"noopener noreferrer"};function Wn(zn,Un){const t=o("ExternalLinkIcon"),r=o("Mermaid");return c(),i("div",null,[d,e("ul",null,[e("li",null,[e("a",u,[h,s(t)]),n("，它定义了表示"),e("a",k,[n("编辑器状态"),s(t)]),n("和 对该状态的"),e("a",m,[n("更改"),s(t)]),n("的数据结构。")]),e("li",null,[e("a",f,[_,s(t)]),n("，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的"),e("a",v,[n("显示组件。"),s(t)])]),e("li",null,[e("a",g,[b,s(t)]),n("，为它们定义了很多编辑命令和一些"),e("a",y,[n("键绑定"),s(t)]),n("。")])]),w,e("p",null,[n("您在编辑器中期望的许多东西，例如"),e("a",E,[n("行号间距"),s(t)]),n("或"),e("a",x,[n("撤消历史记录"),s(t)]),n("，都是作为通用核心的扩展实现的，需要显式添加到要启用的配置中。为了便于入门，该"),e("a",S,[C,s(t)]),n("包引入了基线编辑器所需的大部分内容（语言包除外）。")]),M,e("p",null,[n("这些包作为"),e("a",D,[n("ES6 模块"),s(t)]),n("分发。这意味着如果没有某种捆绑器（将模块化程序打包到单个大 JavaScript 文件中）或模块加载器，目前运行该库是不切实际的。如果您不熟悉捆绑，我建议您查看"),e("a",j,[n("rollup"),s(t)]),n("或 "),e("a",q,[n("Webpack"),s(t)]),n("。")]),A,T,e("p",null,[n("为了解决这个矛盾，库的状态表示是严格函数式的——"),e("a",V,[n("文档"),s(t)]),n("和 "),e("a",B,[n("状态"),s(t)]),n("数据结构是不可变的，对它们的操作是纯函数，而"),e("a",O,[n("视图组件"),s(t)]),n("和命令接口将它们包装在一个命令式接口中。")]),e("p",null,[n("这意味着即使编辑器移动到新状态，旧状态值也会保持不变。在处理状态更改时，同时拥有旧状态和新状态通常非常有用。这也意味着直接更改状态值，或以命令方式编写附加"),e("a",F,[n("状态字段等"),s(t)]),n("扩展不会达到您希望的效果（并且可能只会破坏事物）。")]),P,e("p",null,[e("a",N,[n("该库以受Redux"),s(t)]),n("或 "),e("a",J,[n("Elm"),s(t)]),n("等方法启发的方式处理更新 。除了少数例外（如组合和拖放处理）， "),e("a",G,[n("视图"),s(t)]),n("的状态完全由其"),e("a",L,[R,s(t)]),n("属性中的"),e("a",I,[W,s(t)]),n("值决定。")]),e("p",null,[e("a",z,[n("通过创建"),s(t)]),n("描述对文档、选择或其他状态"),e("a",U,[n("字段"),s(t)]),n("的更改的 "),e("a",Z,[n("事务"),s(t)]),n("，该状态的更改发生在功能代码中 。然后可以 "),e("a",K,[n("分派"),s(t)]),n("这样的事务，它告诉视图更新其状态，此时它将其 DOM 表示与新状态同步。")]),H,s(r,{id:"mermaid-75",code:"eJxLL0osyFDwCeJy8fd9sqv7ye5tCrq6dgolRYl5xYnJJZn5eWB+Xmp5fHFJYkkqmFeWmVoOZsA1cQEA2iwbLA=="}),Y,e("p",null,[n("使用状态 "),e("a",Q,[X,s(t)]),n("方法创建的交易结合了许多效果（都是可选的）：")]),e("ul",null,[e("li",null,[n("它可以应用"),e("a",$,[n("文档更改"),s(t)]),n("。")]),e("li",null,[n("它可以显式移动 "),e("a",nn,[n("选择"),s(t)]),n("。请注意，当有文档更改但没有明确的新选择时，选择将 通过这些更改隐式"),e("a",en,[n("映射。"),s(t)])]),e("li",null,[n("它可以设置一个"),e("a",sn,[n("标志"),s(t)]),n("，指示视图将（主要）选择头滚动到视图中。")]),e("li",null,[n("它可以有任意数量的 "),e("a",tn,[n("注解"),s(t)]),n("，用于存储描述（整个）交易的额外元数据。例如，"),e("a",an,[on,s(t)]),n(" 注释可用于识别为某些常见操作（如键入或粘贴）生成的事务。")]),e("li",null,[n("它可以有"),e("a",rn,[n("effects"),s(t)]),n("，这是独立的附加效果，通常在某些扩展的状态上（例如折叠代码或启动自动完成）。")]),e("li",null,[n("它可以通过提供一组"),e("a",pn,[n("全新"),s(t)]),n("的扩展或"),e("a",cn,[n("替换"),s(t)]),n("配置的 特定"),e("a",ln,[n("部分"),s(t)]),n("来影响状态的配置。")])]),dn,e("p",null,[n("扩展通常需要在状态中存储额外的信息。撤消"),e("a",un,[n("历史"),s(t)]),n("需要存储可撤消的更改，代码"),e("a",hn,[n("折叠"),s(t)]),n("扩展需要跟踪已折叠的内容，等等。")]),e("p",null,[n("为此，扩展可以定义额外的"),e("a",kn,[n("状态字段"),s(t)]),n("。存在于纯功能"),e("a",mn,[n("状态"),s(t)]),n("数据结构中的状态字段必须存储不可变值。")]),e("p",null,[n("状态字段使用类似于"),e("a",fn,[n("reducer"),s(t)]),n("的东西与状态的其余部分保持同步。每次状态更新时，都会用字段的当前值和交易调用一个函数，它应该返回字段的新值。")]),_n,e("p",null,[n("您通常会希望使用"),e("a",vn,[n("注释"),s(t)]),n("或 "),e("a",gn,[n("效果"),s(t)]),n("来传达您的状态字段正在发生的事情。")]),bn,yn,e("p",null,[e("a",wn,[n("视图插件"),s(t)]),n("为扩展提供了一种在视图中运行命令式组件的方法。这对于事件处理程序、添加和管理 DOM 元素以及执行依赖于当前视口的操作等非常有用。")]),En,e("ul",null,[e("li",null,[e("a",xn,[n("标记装饰"),s(t)]),n("将样式或 DOM 属性添加到给定范围内的文本。")]),e("li",null,[e("a",Sn,[n("小部件装饰"),s(t)]),n("在文档中的给定位置插入一个 DOM 元素。")]),e("li",null,[e("a",Cn,[n("替换装饰"),s(t)]),n("隐藏部分文档或用给定的 DOM 节点替换它。")]),e("li",null,[e("a",Mn,[n("线条装饰"),s(t)]),n("可以将属性添加到线条的环绕元素。")])]),e("p",null,[n("装饰是通过 "),e("a",Dn,[n("facet"),s(t)]),n("提供的。每次更新视图时，此方面的内容都用于设置可见内容的样式。")]),e("p",null,[n("装饰保存在"),e("a",jn,[n("sets"),s(t)]),n("中，这也是不可变的数据结构。此类集合可以 跨更改"),e("a",qn,[n("映射"),s(t)]),n("（调整其内容的位置以补偿更改）或 在更新时"),e("a",An,[n("重建"),s(t)]),n("，具体取决于用例。")]),Tn,e("ul",null,[Vn,e("li",null,[n("通过将范围集值放在构面中（通常通过 从字段"),e("a",Bn,[n("派生"),s(t)]),n("），或间接地，通过提供从视图到范围集的函数。")])]),e("p",null,[n("只有直接提供的装饰集可能会影响编辑器的垂直块结构，但只有间接（indirectly）提供的装饰集才能读取编辑器的视口。例如，如果你想只装饰 可见内容（"),e("a",On,[n("visible content"),s(t)]),n("），这可能很有用。 此限制的原因是视口是从块结构计算的，因此在读取视口之前必须知道这一点。")]),Fn,Pn,Nn,Jn,Gn,Ln,e("p",null,[n("有时，这只是一个错误。但通常可以定义协调它们的策略。方面为此工作得很好。您可以将配置放在模块私有的方面，并使其 "),e("a",Rn,[n("组合"),s(t)]),n("功能协调配置或在不可能时抛出错误。然后需要访问当前配置的代码可以读取该方面。")]),e("p",null,[n("有关此方法的说明，请参见"),e("a",In,[n("斑马条纹"),s(t)]),n("示例。")])])}const Hn=p(l,[["render",Wn],["__file","02. CodeMirror 官网引导.html.vue"]]),Yn=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html","title":"CodeMirror 官网引导 - 系统指南（Guide）","lang":"zh-CN","frontmatter":{"description":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/03.%20Tools/PrismJS%E3%80%81CodeMirror%E3%80%81Shiki/CodeMirror/02.%20CodeMirror%20%E5%AE%98%E7%BD%91%E5%BC%95%E5%AF%BC.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"CodeMirror 官网引导 - 系统指南（Guide）"}],["meta",{"property":"og:description","content":"CodeMirror 官网引导 - 系统指南（Guide） https://codemirror.net/docs/guide/ 架构概述 模块化（Modularity） CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CodeMirror 官网引导 - 系统指南（Guide）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"CodeMirror 官网引导 - 系统指南（Guide）","slug":"codemirror-官网引导-系统指南-guide","link":"#codemirror-官网引导-系统指南-guide","children":[{"level":2,"title":"架构概述","slug":"架构概述","link":"#架构概述","children":[{"level":3,"title":"模块化（Modularity）","slug":"模块化-modularity","link":"#模块化-modularity","children":[]},{"level":3,"title":"功能核心，命令式外壳（Functional Core, Imperative Shell）","slug":"功能核心-命令式外壳-functional-core-imperative-shell","link":"#功能核心-命令式外壳-functional-core-imperative-shell","children":[]},{"level":3,"title":"状态和更新（State and Updates）","slug":"状态和更新-state-and-updates","link":"#状态和更新-state-and-updates","children":[]},{"level":3,"title":"扩展（Extension）","slug":"扩展-extension","link":"#扩展-extension","children":[]},{"level":3,"title":"文档偏移（Document offsets）","slug":"文档偏移-document-offsets","link":"#文档偏移-document-offsets","children":[]}]},{"level":2,"title":"数据模型","slug":"数据模型","link":"#数据模型","children":[{"level":3,"title":"文件变更（Document-changes）","slug":"文件变更-document-changes","link":"#文件变更-document-changes","children":[]},{"level":3,"title":"选择（selection）","slug":"选择-selection","link":"#选择-selection","children":[]},{"level":3,"title":"配置（Configuration）","slug":"配置-configuration","link":"#配置-configuration","children":[]},{"level":3,"title":"处理（Transactions 机翻是交易？）","slug":"处理-transactions-机翻是交易","link":"#处理-transactions-机翻是交易","children":[]}]},{"level":2,"title":"The View","slug":"the-view","link":"#the-view","children":[{"level":3,"title":"视口（Viewport）","slug":"视口-viewport","link":"#视口-viewport","children":[]},{"level":3,"title":"更新周期（Update-cycle）","slug":"更新周期-update-cycle","link":"#更新周期-update-cycle","children":[]},{"level":3,"title":"DOM结构（Dom-structure）","slug":"dom结构-dom-structure","link":"#dom结构-dom-structure","children":[]},{"level":3,"title":"风格和主题（Styles-and-themes）","slug":"风格和主题-styles-and-themes","link":"#风格和主题-styles-and-themes","children":[]},{"level":3,"title":"命令（Commands）","slug":"命令-commands","link":"#命令-commands","children":[]}]},{"level":2,"title":"扩展CM（Extending-codemirror）","slug":"扩展cm-extending-codemirror","link":"#扩展cm-extending-codemirror","children":[{"level":3,"title":"状态字段（State-fields）","slug":"状态字段-state-fields","link":"#状态字段-state-fields","children":[]},{"level":3,"title":"影响视图（Affecting-the-view）","slug":"影响视图-affecting-the-view","link":"#影响视图-affecting-the-view","children":[]},{"level":3,"title":"装饰文档（Decorating-the-document）","slug":"装饰文档-decorating-the-document","link":"#装饰文档-decorating-the-document","children":[]},{"level":3,"title":"扩展架构（Extension-architecture）","slug":"扩展架构-extension-architecture","link":"#扩展架构-extension-architecture","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.7,"words":3209},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/03. Tools/PrismJS、CodeMirror、Shiki/CodeMirror/02. CodeMirror 官网引导.md","excerpt":"\\n<p>https://codemirror.net/docs/guide/</p>\\n<h2>架构概述</h2>\\n<h3>模块化（Modularity）</h3>\\n<p>CodeMirror 被设置为独立模块的集合，这些模块一起提供了一个功能齐全的文本和代码编辑器。从好的方面来说，这意味着您可以挑选和选择您需要的功能，如果需要，甚至可以用自定义实现替换核心功能。不利的一面是，这意味着设置编辑器需要您将一堆片段放在一起。</p>\\n<p>组装部分并不难，但您必须安装并导入所需的部分。核心包是：</p>\\n<ul>\\n<li><a href=\\"https://codemirror.net/docs/ref/#state\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/state</code></a>，它定义了表示<a href=\\"https://codemirror.net/docs/ref/#state.EditorState\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">编辑器状态</a>和 对该状态的<a href=\\"https://codemirror.net/docs/ref/#state.Transaction\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">更改</a>的数据结构。</li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#view\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/view</code></a>，一个知道如何向用户显示编辑器状态并将基本编辑操作转换为状态更新的<a href=\\"https://codemirror.net/docs/ref/#view.EditorView\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">显示组件。</a></li>\\n<li><a href=\\"https://codemirror.net/docs/ref/#commands\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>@codemirror/commands</code></a>，为它们定义了很多编辑命令和一些<a href=\\"https://codemirror.net/docs/ref/#commands.defaultKeymap\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">键绑定</a>。</li>\\n</ul>","autoDesc":true}');export{Hn as comp,Yn as data};
