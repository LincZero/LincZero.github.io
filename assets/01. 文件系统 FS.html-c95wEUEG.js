import{_ as i,e as n,g as a,o as s}from"./app-DeGPQmv-.js";const l="/assets/%E7%9B%AE%E5%BD%95%E9%A1%B9%E5%92%8C%E7%B4%A2%E5%BC%95%E5%85%B3%E7%B3%BB%E5%9B%BE-S1keekxF.png",t={};function r(o,e){return s(),n("div",null,e[0]||(e[0]=[a(`<h1 id="文件系统-fs-未" tabindex="-1"><a class="header-anchor" href="#文件系统-fs-未"><span>文件系统 FS (未)</span></a></h1><h2 id="文件系统-fs" tabindex="-1"><a class="header-anchor" href="#文件系统-fs"><span>文件系统 (<em>FS</em>)</span></a></h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>持久化：文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以<strong>持久化</strong>的保存文件。</li><li>组织方式：文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成<strong>不同的文件系统</strong>。</li><li>一切皆文件：Linux 最经典的一句话是：「<strong>一切皆文件</strong>」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</li></ul><h3 id="几个文件相关的概念-等待重新梳理" tabindex="-1"><a class="header-anchor" href="#几个文件相关的概念-等待重新梳理"><span>几个文件相关的概念（等待重新梳理）</span></a></h3><h4 id="文件-文件对象" tabindex="-1"><a class="header-anchor" href="#文件-文件对象"><span>文件 / 文件对象</span></a></h4><p>Linux 文件系统会为每个文件分配两个数据结构：<strong>索引节点（<em>index node</em>）和目录项（<em>directory entry</em>）</strong>，它们主要用来记录文件的元信息和目录层次结构。</p><h4 id="目录-目录文件" tabindex="-1"><a class="header-anchor" href="#目录-目录文件"><span>目录 (目录文件)</span></a></h4><p>目录也属于是文件，自然继承了文件的特性，也存在对应的inode和目录项</p><h4 id="索引节点-inode-index-node" tabindex="-1"><a class="header-anchor" href="#索引节点-inode-index-node"><span>索引节点 (<em>inode = index node</em>)</span></a></h4><ul><li><p>内容（文件的<strong>元信息</strong>）</p><ul><li><p>inode 编号</p></li><li><p>文件大小</p></li><li><p>访问权限</p></li><li><p>创建时间</p></li><li><p>修改时间</p></li><li><p>数据在磁盘的位置</p></li><li><p>……等等</p></li></ul></li><li><p>唯一标识：索引节点是文件的唯一标识，它们之间一一对应</p></li><li><p>存放：<strong>存放于磁盘</strong>。inode存储在磁盘上的特定区域，这个区域被称为inode表。每个文件系统分区都有自己的inode表。inode的位置和数量在文件系统创建时就已经确定，不会再改变。</p></li></ul><h4 id="目录项-dentry-directory-entry" tabindex="-1"><a class="header-anchor" href="#目录项-dentry-directory-entry"><span>目录项 (<em>dentry = directory entry</em>)</span></a></h4><ul><li>内容 <ul><li>文件的名字</li><li><strong>索引节点指针</strong></li><li>与其他目录项的层级关联关系</li></ul></li><li>存放：<strong>存放于内存</strong>（目录结构的一部分。目录结构是内核数据结构，目录项相当于是这个数据结构里的一部分）</li><li>例如：/home/xxx/yyy.txt 中，/、home、xxx、yyy.txt 都是一个目录项</li></ul><h4 id="目录结构-目录树-目录项集" tabindex="-1"><a class="header-anchor" href="#目录结构-目录树-目录项集"><span>目录结构 / 目录树 / 目录项集</span></a></h4><ul><li>内容 <ul><li>多个目录项关联起来，就会形成目录结构 (目录树)</li></ul></li><li>存放：<strong>存放于内存</strong>：但它与索引节点不同的是，目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存。</li></ul><h3 id="几个文件相关的概念-梳理" tabindex="-1"><a class="header-anchor" href="#几个文件相关的概念-梳理"><span>几个文件相关的概念 - 梳理</span></a></h3><h4 id="目录-目录项" tabindex="-1"><a class="header-anchor" href="#目录-目录项"><span>目录 != 目录项</span></a></h4><p>虽然名字很相近，但是它们不是一个东西：</p><ul><li>目录：是个文件，持久化存储在<strong>磁盘</strong></li><li>目录项：是内核一个数据结构，缓存在<strong>内存</strong><ul><li>如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。</li></ul></li></ul><p>注意，目录项这个数据结构不只是表示目录，也是可以表示文件的。</p><h4 id="索引节点与目录的关系-多对一" tabindex="-1"><a class="header-anchor" href="#索引节点与目录的关系-多对一"><span>索引节点与目录的关系 (多对一)</span></a></h4><p>每个文件有两个数据结构：</p><ul><li>索引节点（<em>index node</em>）</li><li>目录项（<em>directory entry</em>）</li></ul><p>由于索引节点唯一标识一个文件，而目录项记录着文件的名字，所以目录项和索引节点的关系是多对一。也就是说，一个文件可以有多个别名。</p><p>比如：<strong>硬链接</strong>的实现就是多个目录项中的索引节点指向同一个文件。</p><p>注意，目录也是文件，也是用索引节点唯一标识，和普通文件不同的是，普通文件在磁盘里面保存的是文件数据，而目录文件在磁盘里面保存子目录或文件</p><h2 id="磁盘与文件数据" tabindex="-1"><a class="header-anchor" href="#磁盘与文件数据"><span>磁盘与文件数据</span></a></h2><p>那文件数据是如何存储在磁盘的呢？</p><h3 id="扇区-512b" tabindex="-1"><a class="header-anchor" href="#扇区-512b"><span>扇区 (512B)</span></a></h3><p>磁盘读写的最小单位是<strong>扇区</strong>，扇区的大小只有 <code>512B</code> 大小，很明显，如果每次读写都以这么小为单位，那这读写的效率会非常低。</p><h3 id="逻辑块-4kb-8扇区" tabindex="-1"><a class="header-anchor" href="#逻辑块-4kb-8扇区"><span>逻辑块 (4KB，8扇区)</span></a></h3><p>所以，文件系统把多个扇区组成了一个<strong>逻辑块</strong>，每次读写的最小单位就是逻辑块（数据块），Linux 中的逻辑块大小为 <code>4KB</code>，也就是一次性读写 8 个扇区，这将大大提高了磁盘的读写的效率。</p><blockquote><p>Linc 补充：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> df</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">文件系统</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1K的块</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 可用</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已用%</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 挂载点</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 “1K的块” 指显示方式是K，方便你看块的大小总和是多少，而不是说每个逻辑块的大小真的是1K</p></blockquote><h3 id="磁盘区域-超级块、inode区、数据块区" tabindex="-1"><a class="header-anchor" href="#磁盘区域-超级块、inode区、数据块区"><span>磁盘区域 (超级块、inode区、数据块区)</span></a></h3><p>另外，磁盘进行格式化的时候，会被分成三个存储区域，分别是 超级块、索引节点区和数据块区。</p><ul><li>超级块：用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。</li><li>索引节点区：用来存储索引节点；</li><li>数据块区：用来存储文件或目录数据；</li></ul><p>我们不可能把超级块和索引节点区全部加载到内存，这样内存肯定撑不住，所以只有当需要使用的时候，才将其加载进内存，它们加载进内存的时机是不同的：</p><ul><li>超级块：当文件系统挂载时进入内存；</li><li>索引节点区：当文件被访问时进入内存；</li></ul><h3 id="关系总结" tabindex="-1"><a class="header-anchor" href="#关系总结"><span>关系总结</span></a></h3><p>以上就是索引节点、目录项以及文件数据的关系，下面这个图就很好的展示了它们之间的关系：</p><p><img src="`+l+'" alt="img" loading="lazy"></p><p>索引节点是存储在硬盘上的数据，那么为了加速文件的访问，通常会把索引节点加载到内存中。</p>',42)]))}const h=i(t,[["render",r],["__file","01. 文件系统 FS.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/01.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%20FS.html","title":"文件系统 FS (未)","lang":"zh-CN","frontmatter":{"description":"文件系统 FS (未) 文件系统 (FS) 特点 持久化：文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。 组织方式：文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。 一切皆文...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/01.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%20FS.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"文件系统 FS (未)"}],["meta",{"property":"og:description","content":"文件系统 FS (未) 文件系统 (FS) 特点 持久化：文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。 组织方式：文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。 一切皆文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件系统 FS (未)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":4.98,"words":1493},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/01. 文件系统 FS.md","excerpt":"\\n<h2>文件系统 (<em>FS</em>)</h2>\\n<h3>特点</h3>\\n<ul>\\n<li>持久化：文件系统是操作系统中负责管理持久数据的子系统，说简单点，就是负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以<strong>持久化</strong>的保存文件。</li>\\n<li>组织方式：文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成<strong>不同的文件系统</strong>。</li>\\n<li>一切皆文件：Linux 最经典的一句话是：「<strong>一切皆文件</strong>」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/01. 文件系统 FS.md","value":{"title":"01. 文件系统 FS","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/01. 文件系统 FS.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{h as comp,d as data};
