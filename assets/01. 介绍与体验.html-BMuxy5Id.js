import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as p,a as n,b as s,d as t,e}from"./app-CdBXVQbh.js";const r={},c=e('<h2 id="名称由来" tabindex="-1"><a class="header-anchor" href="#名称由来"><span>名称由来</span></a></h2><p><code>libhv</code>是一个类似于<code>libevent、libev、libuv</code>的跨平台网络库，提供了带非阻塞IO和定时器的事件循环。 libhv的名称也正是继承此派，寓意高性能的事件循环<code>High-performance event loop library</code>。</p><h2 id="libhv能干什么" tabindex="-1"><a class="header-anchor" href="#libhv能干什么"><span>libhv能干什么</span></a></h2><ul><li>编写跨平台c/c++程序；</li><li>基于TCP/UDP/SSL开发自定义协议网络程序；</li><li>编写HTTP客户端/服务端程序；</li><li>编写WebSocket客户端/服务端程序；</li><li>学习实践网络编程；</li></ul><h2 id="libhv和libevent、libev、libuv有什么不同" tabindex="-1"><a class="header-anchor" href="#libhv和libevent、libev、libuv有什么不同"><span>libhv和libevent、libev、libuv有什么不同</span></a></h2>',5),d=e("<li>libevent <ul><li>最为古老、有历史包袱，bufferevent虽为精妙，却也难以上手；</li></ul></li><li>libev <ul><li>可以说是libevent的简化版，代码极为精简，但宏定义用的过多，代码可读性不强，且在Windows上实现不佳；</li></ul></li><li>libuv <ul><li>是nodejs的c底层库，最先也是由libevent+对Windows IOCP支持，后来才改写自成一体，同时实现了管道、文件的异步读写，很强大，但结构体比较多，封装比较深；</li></ul></li><li>libhv <ul><li>本身是参考了libevent、libev、libuv的实现思路，它们的核心都是事件循环（即在一个事件循环中处理IO、定时器等事件），但提供的接口最为精简，API接近原生系统调用，最容易上手；</li></ul></li>",4),v={href:"https://github.com/ithewei/libhv/tree/master/echo-servers",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,"此外libhv支持心跳、转发、拆包、多线程安全write和close等特性，提供了HTTP、WebSocket等协议实现；",-1),b=n("li",null,"当然这几个库的性能是接近的，都将非阻塞IO多路复用用到了极致;",-1),m=e(`<h2 id="体验" tabindex="-1"><a class="header-anchor" href="#体验"><span>体验</span></a></h2><p>linux与mac下的用户可直接执行<code>./getting_started.sh</code>脚本，即可体验使用libhv编写的http服务端<code>httpd</code>与http客户端<code>curl</code>的便利之处。</p><p>运行效果如下:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./getting_started.sh
Welcome to libhv<span class="token operator">!</span>
Press any key to run <span class="token punctuation">..</span>.

bin/httpd <span class="token parameter variable">-c</span> etc/httpd.conf <span class="token parameter variable">-s</span> restart <span class="token parameter variable">-d</span>

httpd start/running
hw               <span class="token number">83110</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">5100160</span>    <span class="token number">588</span>   ??  S     <span class="token number">4</span>:14下午   <span class="token number">0</span>:00.00 httpd: worker process
hw               <span class="token number">83109</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">4951680</span>    <span class="token number">580</span>   ??  S     <span class="token number">4</span>:14下午   <span class="token number">0</span>:00.00 httpd: worker process
hw               <span class="token number">83108</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">4820608</span>    <span class="token number">572</span>   ??  S     <span class="token number">4</span>:14下午   <span class="token number">0</span>:00.00 httpd: worker process
hw               <span class="token number">83107</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">4689536</span>    <span class="token number">600</span>   ??  S     <span class="token number">4</span>:14下午   <span class="token number">0</span>:00.00 httpd: worker process
hw               <span class="token number">83103</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>  <span class="token number">4950656</span>    <span class="token number">808</span>   ??  Ss    <span class="token number">4</span>:14下午   <span class="token number">0</span>:00.00 httpd: master process

bin/curl <span class="token parameter variable">-v</span> localhost:8080

GET / HTTP/1.1
Accept: */*
Connection: keep-alive
Content-Length: <span class="token number">0</span>
Host: localhost:8080
User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/63.0.3239.132 Safari/537.36


HTTP/1.1 <span class="token number">200</span> OK
Connection: keep-alive
Content-Length: <span class="token number">130</span>
Content-Type: text/html
Date: Fri, 05 Feb <span class="token number">2021</span> 08:14:14 GMT
Etag: <span class="token string">&quot;5fc1057e-82&quot;</span>
Last-Modified: Fri, <span class="token number">27</span> Nov <span class="token number">2020</span> <span class="token number">13</span>:56:14 GMT
Server: httpd/1.21.2.5

<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>httpd<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>center<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Welcome to httpd<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token operator">&lt;</span>/center<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"https://github.com/ithewei/libhv/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ bin/httpd <span class="token parameter variable">-h</span>
Usage: httpd <span class="token punctuation">[</span>hvc:ts:dp:<span class="token punctuation">]</span>
Options:

  -h<span class="token operator">|</span>--help                 Print this information
  -v<span class="token operator">|</span>--version              Print version
  -c<span class="token operator">|</span>--confile <span class="token operator">&lt;</span>confile<span class="token operator">&gt;</span>    Set configure file, default etc/<span class="token punctuation">{</span>program<span class="token punctuation">}</span>.conf
  -t<span class="token operator">|</span>--test                 Test configure <span class="token function">file</span> and <span class="token builtin class-name">exit</span>
  -s<span class="token operator">|</span>--signal <span class="token operator">&lt;</span>signal<span class="token operator">&gt;</span>      Send <span class="token operator">&lt;</span>signal<span class="token operator">&gt;</span> to process,
                            <span class="token operator">&lt;</span>signal<span class="token operator">&gt;=</span><span class="token punctuation">[</span>start,stop,restart,status,reload<span class="token punctuation">]</span>
  -d<span class="token operator">|</span>--daemon               Daemonize
  -p<span class="token operator">|</span>--port <span class="token operator">&lt;</span>port<span class="token operator">&gt;</span>          Set listen port
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ bin/curl <span class="token parameter variable">-h</span>
Usage: <span class="token function">curl</span> <span class="token punctuation">[</span>hVvX:H:d:F:n:<span class="token punctuation">]</span> url
Options:
    -h<span class="token operator">|</span>--help           Print this message.
    -V<span class="token operator">|</span>--version        Print version.
    -v<span class="token operator">|</span>--verbose        Show verbose infomation.
    -X<span class="token operator">|</span>--method         Set http method.
    -H<span class="token operator">|</span>--header         Add http headers, <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json Accept:*/*&quot;</span>
    -d<span class="token operator">|</span>--data           Set http body.
    -F<span class="token operator">|</span>--form           Set http form, <span class="token parameter variable">-F</span> <span class="token string">&quot;name1=content;name2=@filename&quot;</span>
    -n<span class="token operator">|</span>--count          Send request count, used <span class="token keyword">for</span> <span class="token builtin class-name">test</span> keep-alive
       <span class="token parameter variable">--http2</span>          Use http2
       <span class="token parameter variable">--grpc</span>           Use grpc over http2
Examples:
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/hello
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/query?page_no<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">page_size</span><span class="token operator">=</span><span class="token number">10</span>
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/echo  <span class="token parameter variable">-d</span> <span class="token string">&#39;hello,world!&#39;</span>
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/kv    <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/x-www-form-urlencoded&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;user=admin&amp;pswd=123456&#39;</span>
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/json  <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span>                  <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;user&quot;:&quot;admin&quot;,&quot;pswd&quot;:&quot;123456&quot;}&#39;</span>
    <span class="token function">curl</span> <span class="token parameter variable">-v</span> localhost:8080/form  <span class="token parameter variable">-F</span> <span class="token string">&#39;file=@filename&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然你也可以通过浏览器访问，地址栏输入：</p><ul><li>127.0.0.1:8080/</li><li>127.0.0.1:8080/downloads/</li><li>127.0.0.1:8080/ping</li></ul>`,4);function E(g,B){const a=i("ExternalLinkIcon");return o(),p("div",null,[c,n("ul",null,[d,n("li",null,[s("总结 "),n("ul",null,[n("li",null,[s("具体这几个库的写法比较见"),n("a",v,[s("echo-servers"),t(a)]),s("，可见libhv是最简单的；")]),u,b])])]),m,n("p",null,[s("httpd与curl代码均可在"),n("a",k,[s("examples"),t(a)]),s("目录下找到，是完整的命令行程序。")]),h])}const A=l(r,[["render",E],["__file","01. 介绍与体验.html.vue"]]),T=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libhv/01.%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%93%E9%AA%8C.html","title":"","lang":"zh-CN","frontmatter":{"description":"名称由来 libhv是一个类似于libevent、libev、libuv的跨平台网络库，提供了带非阻塞IO和定时器的事件循环。 libhv的名称也正是继承此派，寓意高性能的事件循环High-performance event loop library。 libhv能干什么 编写跨平台c/c++程序； 基于TCP/UDP/SSL开发自定义协议网络程序； ...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E9%80%9A%E7%94%A8%E5%BA%93/Libhv/01.%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%93%E9%AA%8C.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"名称由来 libhv是一个类似于libevent、libev、libuv的跨平台网络库，提供了带非阻塞IO和定时器的事件循环。 libhv的名称也正是继承此派，寓意高性能的事件循环High-performance event loop library。 libhv能干什么 编写跨平台c/c++程序； 基于TCP/UDP/SSL开发自定义协议网络程序； ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"名称由来","slug":"名称由来","link":"#名称由来","children":[]},{"level":2,"title":"libhv能干什么","slug":"libhv能干什么","link":"#libhv能干什么","children":[]},{"level":2,"title":"libhv和libevent、libev、libuv有什么不同","slug":"libhv和libevent、libev、libuv有什么不同","link":"#libhv和libevent、libev、libuv有什么不同","children":[]},{"level":2,"title":"体验","slug":"体验","link":"#体验","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.93,"words":879},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/通用库/Libhv/01. 介绍与体验.md","excerpt":"<h2>名称由来</h2>\\n<p><code>libhv</code>是一个类似于<code>libevent、libev、libuv</code>的跨平台网络库，提供了带非阻塞IO和定时器的事件循环。 libhv的名称也正是继承此派，寓意高性能的事件循环<code>High-performance event loop library</code>。</p>\\n<h2>libhv能干什么</h2>\\n<ul>\\n<li>编写跨平台c/c++程序；</li>\\n<li>基于TCP/UDP/SSL开发自定义协议网络程序；</li>\\n<li>编写HTTP客户端/服务端程序；</li>\\n<li>编写WebSocket客户端/服务端程序；</li>\\n<li>学习实践网络编程；</li>\\n</ul>","autoDesc":true}');export{A as comp,T as data};
