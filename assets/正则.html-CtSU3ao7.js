import{_ as o,c as l,e as t,a as s,d as a,b as p,o as c,r as i}from"./app-D9x9tU0e.js";const r={},d={href:"https://docs.python.org/3/library/re.html#module-re",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.jianshu.com/p/9fd05dfdde48",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const e=i("ExternalLinkIcon");return c(),l("div",null,[n[4]||(n[4]=t(`<h1 id="正则" tabindex="-1"><a class="header-anchor" href="#正则"><span>正则</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="qt的pro文件" tabindex="-1"><a class="header-anchor" href="#qt的pro文件"><span>QT的Pro文件</span></a></h1><p><code>~=</code>操作符，使用指定的值替换符合正则表达式的值（例如<code>SOURCE ~= s/\\.cpp\\b/.cxx</code>使用.cxx替换所有.cpp文件的扩展名）</p><h1 id="qt的qregexp" tabindex="-1"><a class="header-anchor" href="#qt的qregexp"><span>QT的QRegExp</span></a></h1><p>Qt的<code>QRegExp</code>类是正则表达式的表示类，基于Perl的正则表达式语言，完全支持Unicode</p><ul><li><p>组成：正则表达式由三部分组成</p><ul><li>表达式（<em>expressions</em>）</li><li>量词（<em>quantifiers</em>）</li><li>断言（<em>assertions</em>）</li></ul></li><li><p>表达式</p><ul><li>最简单的表达式是一个字符</li><li>字符集举例 <ul><li><code>[AEIOU]</code>表示匹配所有的大写元音字母</li><li><code>[^AEIOU]</code>表示匹配所有非元音字母，即辅音字母</li><li><code>[a-z]</code>表示匹配所有的小写英文字母</li></ul></li></ul></li><li><p>量词</p><ul><li><p>说明表达式出现的次数</p></li><li><p>举例</p><ul><li><code>x[1,2]</code>表示x为1或2个</li><li><code>[A-Za-z_]+[A-Za-z_0-9]*</code>匹配计算机语言的标识符</li></ul></li><li><p>正则表达式的量词（<code>E</code>是表达式的意思）（<strong>这里的方括号好像要变成花括号才对，不知道为什么书上的是方括号</strong>）</p><table><thead><tr><th>量词</th><th>含义</th></tr></thead><tbody><tr><td><code>E?</code></td><td>匹配0次或1次，等同<code>E[0,1]</code></td></tr><tr><td><code>E+</code></td><td>匹配1次或多次，等同<code>E[1,]</code></td></tr><tr><td><code>E*</code></td><td>匹配0次或多次，等同<code>E[0,]</code></td></tr><tr><td><code>E[n]</code></td><td>匹配n次</td></tr><tr><td><code>E[n,]</code></td><td>匹配至少n次</td></tr><tr><td><code>E[,m]</code></td><td>匹配最多m次，等同<code>E[0,m]</code></td></tr><tr><td><code>E[n,m]</code></td><td>匹配n次到m次</td></tr></tbody></table></li></ul></li><li><p>断言</p><ul><li><p>举例</p><ul><li><code>using(?=E\\s+namespace)</code>，匹配后面接 namespace 的 using</li><li><code>using(?!E\\s+namespace)</code>，匹配后面不接 namespace 的 using</li><li><code>using\\s+namespace</code>，匹配 using namespace</li></ul></li><li><p>正则表达式的断言</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>^</code></td><td>字符串开头进行匹配</td></tr><tr><td><code>$</code></td><td>字符串结尾进行匹配</td></tr><tr><td><code>\\b</code></td><td>单词边界</td></tr><tr><td><code>\\B</code></td><td>非单词边界</td></tr><tr><td><code>(?=E)</code></td><td>表达式后紧随E才匹配</td></tr><tr><td><code>(?!E)</code></td><td>表达式后不跟随E才匹配</td></tr></tbody></table></li></ul></li></ul><h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>MySQL</span></a></h1><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> last_name <span class="token operator">REGEXP</span> <span class="token string">&#39;field&#39;</span>  <span class="token comment">--正则表达式</span>
                 <span class="token comment">-- 正则表达式，组合特殊字符建立复杂筛选</span>
                 <span class="token string">&#39;field&#39;</span>包含，<span class="token string">&#39;^field&#39;</span>以开头，<span class="token string">&#39;field$&#39;</span>以结尾
                 <span class="token string">&#39;aa|bb&#39;</span>并行，<span class="token string">&#39;[abcd]e&#39;</span>单字符并行，<span class="token string">&#39;[a-d]e&#39;</span>并行优化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="js" tabindex="-1"><a class="header-anchor" href="#js"><span>JS</span></a></h1><p>RegExp 提供正则表达式的模式匹配</p><h1 id="python-重复-修改时要连同python笔记一起修改" tabindex="-1"><a class="header-anchor" href="#python-重复-修改时要连同python笔记一起修改"><span>Python <mark>（重复，修改时要连同Python笔记一起修改）</mark></span></a></h1><h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法"><span>字符串方法</span></a></h2><p>只需简单的操作时，字符串方法最好用，因为它们易读，又容易调试:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;tea for too&#39;</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;too&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;tea for two&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="re-基本使用" tabindex="-1"><a class="header-anchor" href="#re-基本使用"><span>re 基本使用</span></a></h2>`,16)),s("p",null,[s("a",d,[n[0]||(n[0]=a("re")),p(e)]),n[1]||(n[1]=a(" 模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案："))]),n[5]||(n[5]=t(`<h3 id="findall、sub" tabindex="-1"><a class="header-anchor" href="#findall、sub"><span>findall、sub</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;\\bf[a-z]*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;which foot or hand fell fastest&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 匹配</span>
<span class="token punctuation">[</span><span class="token string">&#39;foot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fell&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fastest&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\b[a-z]+) \\1&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;\\1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat in the the hat&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 替换。注意sub()方法替换字符串的时候如果不匹配，就会返回原字符串。很容易出错</span>
<span class="token string">&#39;cat in the hat&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>详见文档</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 扫描整个 字符串 找到匹配样式的第一个位置，并返回一个相应的 匹配对象。如果没有匹配，就返回一个 None ； 注意这和找到一个零长度匹配是不同的。</span>

re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 如果 string 开始的0或者多个字符匹配到了正则表达式样式，就返回一个相应的 匹配对象 。 如果没有匹配，就返回 None ；注意它跟零长度匹配是不同的。</span>

re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> string<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 返回通过使用 repl 替换在 string 最左边非重叠出现的 pattern 而获得的字符串。 如果样式没有找到，则不加改变地返回 string。 repl 可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理。 也就是说，\\n 会被转换为一个换行符，\\r 会被转换为一个回车符，依此类推。 未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。 其他未知转义序列例如 \\&amp; 会保持原样。 向后引用像是 \\6 会用样式中第 6 组所匹配到的子字符串来替换。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rearch和match的区别</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># match()和search()都只匹配一个结果，但是match()是从字符串的开头开始匹配的，如果匹配的字符不是在开头处，那么它将会报错，匹配成功返回结果，没有返回None。而search()是从头开始匹配，匹配整一个字符串得出结果</span>
<span class="token keyword">import</span> re
result1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;liadadafbba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment"># li None</span>

<span class="token keyword">import</span> re
<span class="token comment"># result1 = re.match(&#39;li&#39;, &#39;liadadafbba&#39;)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>  <span class="token comment"># 报错</span>

<span class="token keyword">import</span> re
result1 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;liadadafbba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment"># li li</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取子串-坑点" tabindex="-1"><a class="header-anchor" href="#取子串-坑点"><span>取子串（坑点）</span></a></h3><p>坑的地方在于：序列0是完整匹配（默认是0），序列1才是第一个，非常反直觉......</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&quot;(\\w+) (\\w+)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Isaac Newton, physicist&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment"># The entire match</span>
<span class="token string">&#39;Isaac Newton&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment"># The first parenthesized subgroup.</span>
<span class="token string">&#39;Isaac&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment"># The second parenthesized subgroup.</span>
<span class="token string">&#39;Newton&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># Multiple arguments give us a tuple.</span>
<span class="token punctuation">(</span><span class="token string">&#39;Isaac&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Newton&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过话说其他程序中的正则也是，例如QT C++的 <code>&lt;QRegularExpression&gt;</code> 模块</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>QRegularExpression re(R&quot;(^OnGetWebViewPageFinish:(.+?/log)$)&quot;);
QString line = in.readLine();
QRegularExpressionMatch match = re.match(line);
if(match.hasMatch())
{
    qDebug()&lt;&lt;&quot;WishUrl1: &quot;&lt;&lt;match.captured(1);	// 序列1才是第一个匹配项
    return match.captured(1);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战-匹配并替换内容" tabindex="-1"><a class="header-anchor" href="#实战-匹配并替换内容"><span>实战 - 匹配并替换内容</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re
pattern <span class="token operator">=</span> <span class="token string">r&quot;元&quot;</span>	 <span class="token comment"># 模式字符串</span>
str1 <span class="token operator">=</span> <span class="token string">&quot;75元、89元&quot;</span>  <span class="token comment"># 匹配字符串</span>
replace <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&quot;美元&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>	 <span class="token comment"># &quot;75美元、89美元&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="在线工具" tabindex="-1"><a class="header-anchor" href="#在线工具"><span>在线工具</span></a></h1><p>https://tool.oschina.net/regex</p><h1 id="之前写过的一些正则参考" tabindex="-1"><a class="header-anchor" href="#之前写过的一些正则参考"><span>之前写过的一些正则参考</span></a></h1><h2 id="obsidian插件-——-自制" tabindex="-1"><a class="header-anchor" href="#obsidian插件-——-自制"><span>Obsidian插件 —— 自制</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 4. 切换鼠标所在行的复选框状态</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&#39;切换鼠标所在行的复选框状态&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">editorCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>editor<span class="token operator">:</span> Editor<span class="token punctuation">,</span> view<span class="token operator">:</span> MarkdownView<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>


        <span class="token keyword">let</span> s1 <span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getLine</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>line<span class="token punctuation">)</span> <span class="token comment">// 获取序列行的内容</span>

        <span class="token keyword">let</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^\\\\s*- \\\\[[( )]\\\\](.*)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^\\\\s*- \\\\[[(*+-x)]\\\\](.*)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;[ ]&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;[*]&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 这里写得比较简陋，会有bug，比如- [ ] [ ]</span>
            <span class="token keyword">let</span> ss  <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;[*]&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;[ ]&quot;</span><span class="token punctuation">)</span>
            s1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        editor<span class="token punctuation">.</span><span class="token function">setLine</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>line<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="obsidian插件-——-chat-view" tabindex="-1"><a class="header-anchor" href="#obsidian插件-——-chat-view"><span>Obsidian插件 —— Chat View</span></a></h2><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 正则匹配</span>
<span class="token keyword">class</span> <span class="token class-name">ChatPatterns</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> message <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^&gt;|&lt;|\\^)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>	<span class="token comment">// 发送消息，正则：&gt;或&lt;开头</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> delimiter <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">...</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>			<span class="token comment">// 省略消息，正则：省略号</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> comment <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>					<span class="token comment">// 全局消息，正则：#开头</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> colors <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[(.*?)\\]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>		<span class="token comment">// 颜色设置，正则：[]包围，例如[Albus Dumbledore=teal, Minerva McGonagall=pink]</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> format <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">{(.*?)}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>			<span class="token comment">// 格式设置，正则：{}包围，例如{mw=90,mode=minimal}</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> joined <span class="token operator">=</span> <span class="token function">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delimiter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>colors<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>comment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>format<span class="token punctuation">]</span>
		<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pattern<span class="token punctuation">.</span>source<span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>																				<span class="token comment">// 不名正则？</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> voice <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;v\\s+([^&gt;]+)&gt;([^&lt;]+)&lt;\\/v&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>	<span class="token comment">// chat-webvtt模式下的对话检测</span>

	<span class="token keyword">static</span> <span class="token keyword">readonly</span> qq_msg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.*?)\\s[0-2][0-9]:[0-6][0-9]:[0-6][0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token keyword">readonly</span> qq_chehui <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(.*?)撤回了一条消息</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="一些总结" tabindex="-1"><a class="header-anchor" href="#一些总结"><span>一些总结</span></a></h1><h2 id="双斜杆问题" tabindex="-1"><a class="header-anchor" href="#双斜杆问题"><span>双斜杆问题</span></a></h2><ul><li>使用单斜杠 <ul><li>在线工具中，<code>\\s</code>就是空格，<code>\\\\</code>就是反斜杠</li></ul></li><li>使用双斜杠 <ul><li>JS</li></ul></li></ul><h2 id="加强" tabindex="-1"><a class="header-anchor" href="#加强"><span>加强</span></a></h2><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号"><span>(?😃 符号</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> prefixPatternInMD <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?:&gt;\\s*)?-tx-\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// -tx-标识的识别，&gt; -tx-亦可。正则中(?:)用於标记该匹配组不应被捕获</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="特殊" tabindex="-1"><a class="header-anchor" href="#特殊"><span>特殊</span></a></h2>`,28)),s("p",null,[n[3]||(n[3]=a("参考：")),s("a",u,[n[2]||(n[2]=a("【简书】正则表达式里”不包含”及一些特殊查找")),p(e)])]),n[6]||(n[6]=t(`<p>肯定式向前查找</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">匹配字符序列Start后跟一个空格和Test字符序列</span><span class="token punctuation">(</span>不区分大小写<span class="token punctuation">)</span>
<span class="token function">正则模式：Start</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span> Test<span class="token punctuation">)</span>
匹配字符序列some，如果在同一句子中还存在字符序列some
<span class="token function">正则模式：some</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">*</span>some<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否定式向前查找</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>匹配字符序列Start后面不存在test字符序列
<span class="token function">正则模式：Start</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>test<span class="token punctuation">)</span>
匹配Start 后面不存在test的行
<span class="token literal-property property">正则模式</span><span class="token operator">:</span> <span class="token operator">^</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">*</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>肯定式向后查找</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>匹配前面有<span class="token string">&quot;rt&quot;</span>的字符序列Test
<span class="token function">正则模式：</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>rt <span class="token punctuation">)</span>Test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>否定式向后查找</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>匹配前面没有<span class="token string">&quot;rt &quot;</span>的字符序列Test
<span class="token function">正则模式：</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span>rt<span class="token punctuation">)</span> Test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8))])}const v=o(r,[["render",k],["__file","正则.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E6%AD%A3%E5%88%99.html","title":"正则","lang":"zh-CN","frontmatter":{"description":"正则 目录 QT的Pro文件 ~=操作符，使用指定的值替换符合正则表达式的值（例如SOURCE ~= s/\\\\.cpp\\\\b/.cxx使用.cxx替换所有.cpp文件的扩展名） QT的QRegExp Qt的QRegExp类是正则表达式的表示类，基于Perl的正则表达式语言，完全支持Unicode 组成：正则表达式由三部分组成 表达式（expressions...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/01.%20%E7%9F%A5%E8%AF%86%E5%B1%82/%E6%AD%A3%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"正则"}],["meta",{"property":"og:description","content":"正则 目录 QT的Pro文件 ~=操作符，使用指定的值替换符合正则表达式的值（例如SOURCE ~= s/\\\\.cpp\\\\b/.cxx使用.cxx替换所有.cpp文件的扩展名） QT的QRegExp Qt的QRegExp类是正则表达式的表示类，基于Perl的正则表达式语言，完全支持Unicode 组成：正则表达式由三部分组成 表达式（expressions..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"正则","slug":"正则","link":"#正则","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"QT的Pro文件","slug":"qt的pro文件","link":"#qt的pro文件","children":[]},{"level":1,"title":"QT的QRegExp","slug":"qt的qregexp","link":"#qt的qregexp","children":[]},{"level":1,"title":"MySQL","slug":"mysql","link":"#mysql","children":[]},{"level":1,"title":"JS","slug":"js","link":"#js","children":[]},{"level":1,"title":"Python （重复，修改时要连同Python笔记一起修改）","slug":"python-重复-修改时要连同python笔记一起修改","link":"#python-重复-修改时要连同python笔记一起修改","children":[{"level":2,"title":"字符串方法","slug":"字符串方法","link":"#字符串方法","children":[]},{"level":2,"title":"re 基本使用","slug":"re-基本使用","link":"#re-基本使用","children":[{"level":3,"title":"findall、sub","slug":"findall、sub","link":"#findall、sub","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"取子串（坑点）","slug":"取子串-坑点","link":"#取子串-坑点","children":[]}]},{"level":2,"title":"实战 - 匹配并替换内容","slug":"实战-匹配并替换内容","link":"#实战-匹配并替换内容","children":[]}]},{"level":1,"title":"在线工具","slug":"在线工具","link":"#在线工具","children":[]},{"level":1,"title":"之前写过的一些正则参考","slug":"之前写过的一些正则参考","link":"#之前写过的一些正则参考","children":[{"level":2,"title":"Obsidian插件 —— 自制","slug":"obsidian插件-——-自制","link":"#obsidian插件-——-自制","children":[]},{"level":2,"title":"Obsidian插件 —— Chat View","slug":"obsidian插件-——-chat-view","link":"#obsidian插件-——-chat-view","children":[]}]},{"level":1,"title":"一些总结","slug":"一些总结","link":"#一些总结","children":[{"level":2,"title":"双斜杆问题","slug":"双斜杆问题","link":"#双斜杆问题","children":[]},{"level":2,"title":"加强","slug":"加强","link":"#加强","children":[{"level":3,"title":"(?😃 符号","slug":"符号","link":"#符号","children":[]}]},{"level":2,"title":"特殊","slug":"特殊","link":"#特殊","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.3,"words":1890},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/01. 知识层/正则.md","excerpt":"\\n<h1>目录</h1>\\n<h1>QT的Pro文件</h1>\\n<p><code>~=</code>操作符，使用指定的值替换符合正则表达式的值（例如<code>SOURCE ~= s/\\\\.cpp\\\\b/.cxx</code>使用.cxx替换所有.cpp文件的扩展名）</p>\\n<h1>QT的QRegExp</h1>\\n<p>Qt的<code>QRegExp</code>类是正则表达式的表示类，基于Perl的正则表达式语言，完全支持Unicode</p>\\n<ul>\\n<li>\\n<p>组成：正则表达式由三部分组成</p>\\n<ul>\\n<li>表达式（<em>expressions</em>）</li>\\n<li>量词（<em>quantifiers</em>）</li>\\n<li>断言（<em>assertions</em>）</li>\\n</ul>\\n</li>\\n<li>\\n<p>表达式</p>\\n<ul>\\n<li>最简单的表达式是一个字符</li>\\n<li>字符集举例\\n<ul>\\n<li><code>[AEIOU]</code>表示匹配所有的大写元音字母</li>\\n<li><code>[^AEIOU]</code>表示匹配所有非元音字母，即辅音字母</li>\\n<li><code>[a-z]</code>表示匹配所有的小写英文字母</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>量词</p>\\n<ul>\\n<li>\\n<p>说明表达式出现的次数</p>\\n</li>\\n<li>\\n<p>举例</p>\\n<ul>\\n<li><code>x[1,2]</code>表示x为1或2个</li>\\n<li><code>[A-Za-z_]+[A-Za-z_0-9]*</code>匹配计算机语言的标识符</li>\\n</ul>\\n</li>\\n<li>\\n<p>正则表达式的量词（<code>E</code>是表达式的意思）（<strong>这里的方括号好像要变成花括号才对，不知道为什么书上的是方括号</strong>）</p>\\n<table>\\n<thead>\\n<tr>\\n<th>量词</th>\\n<th>含义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>E?</code></td>\\n<td>匹配0次或1次，等同<code>E[0,1]</code></td>\\n</tr>\\n<tr>\\n<td><code>E+</code></td>\\n<td>匹配1次或多次，等同<code>E[1,]</code></td>\\n</tr>\\n<tr>\\n<td><code>E*</code></td>\\n<td>匹配0次或多次，等同<code>E[0,]</code></td>\\n</tr>\\n<tr>\\n<td><code>E[n]</code></td>\\n<td>匹配n次</td>\\n</tr>\\n<tr>\\n<td><code>E[n,]</code></td>\\n<td>匹配至少n次</td>\\n</tr>\\n<tr>\\n<td><code>E[,m]</code></td>\\n<td>匹配最多m次，等同<code>E[0,m]</code></td>\\n</tr>\\n<tr>\\n<td><code>E[n,m]</code></td>\\n<td>匹配n次到m次</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>断言</p>\\n<ul>\\n<li>\\n<p>举例</p>\\n<ul>\\n<li><code>using(?=E\\\\s+namespace)</code>，匹配后面接 namespace 的 using</li>\\n<li><code>using(?!E\\\\s+namespace)</code>，匹配后面不接 namespace 的 using</li>\\n<li><code>using\\\\s+namespace</code>，匹配 using namespace</li>\\n</ul>\\n</li>\\n<li>\\n<p>正则表达式的断言</p>\\n<table>\\n<thead>\\n<tr>\\n<th>符号</th>\\n<th>含义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>^</code></td>\\n<td>字符串开头进行匹配</td>\\n</tr>\\n<tr>\\n<td><code>$</code></td>\\n<td>字符串结尾进行匹配</td>\\n</tr>\\n<tr>\\n<td><code>\\\\b</code></td>\\n<td>单词边界</td>\\n</tr>\\n<tr>\\n<td><code>\\\\B</code></td>\\n<td>非单词边界</td>\\n</tr>\\n<tr>\\n<td><code>(?=E)</code></td>\\n<td>表达式后紧随E才匹配</td>\\n</tr>\\n<tr>\\n<td><code>(?!E)</code></td>\\n<td>表达式后不跟随E才匹配</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{v as comp,h as data};
