import{_ as p,c as o,a as s,e as a,d as t,b as c,o as l,r as i}from"./app-CWZ_wCfK.js";const r={},u={href:"https://www.bilibili.com/video/BV1B14y1f7fw",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.bilibili.com/video/BV1QX4y1W7Ya",target:"_blank",rel:"noopener noreferrer"};function k(v,n){const e=i("ExternalLinkIcon");return l(),o("div",null,[n[5]||(n[5]=s("h1",{id:"《effective-c-》",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#《effective-c-》"},[s("span",null,"《Effective C++》")])],-1)),n[6]||(n[6]=s("p",null,"参考",-1)),s("ul",null,[n[4]||(n[4]=s("li",null,"实体书，中文版，第三版，候捷",-1)),s("li",null,[n[3]||(n[3]=a("跟读视频 ")),s("ul",null,[s("li",null,[s("a",u,[n[0]||(n[0]=a("[鲨哥带你读] Effective C++")),t(e)])]),s("li",null,[s("a",d,[n[1]||(n[1]=a("《Effective C++》2023（上部完整版） C++进阶看这个")),t(e)]),n[2]||(n[2]=a("，更详细，还有上机，但没更完"))])])])]),n[7]||(n[7]=c(`<p>共有55个条款</p><h1 id="让自己习惯c" tabindex="-1"><a class="header-anchor" href="#让自己习惯c"><span>让自己习惯C++</span></a></h1><h2 id="_01-视c-为一个语言联邦" tabindex="-1"><a class="header-anchor" href="#_01-视c-为一个语言联邦"><span>(01) 视C++为一个语言联邦</span></a></h2><h2 id="_02-尽量以const-enum-inline-替换-define" tabindex="-1"><a class="header-anchor" href="#_02-尽量以const-enum-inline-替换-define"><span>(02) 尽量以const, enum, inline 替换 <code>#define</code></span></a></h2><p>优先选择编译器而不是预处理器</p><blockquote><h5 id="预处理器的坏处" tabindex="-1"><a class="header-anchor" href="#预处理器的坏处"><span>预处理器的坏处</span></a></h5></blockquote><p>举例：</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#define ASPECT_RATIO 1.653
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发生错误时，编译器给出的错误信息是1.653，而不是ASPECT_RATIO，你可能难以定位，特别是目标代码中，可能出现多个1.653副本</p><blockquote><h5 id="c-11的常量表达式补充" tabindex="-1"><a class="header-anchor" href="#c-11的常量表达式补充"><span>C++11的常量表达式补充</span></a></h5></blockquote><p>另外，第三版时还没有C++11的constexpr，现在有更好的写法：</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>const double AspectRatio = 1.653;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h5 id="另外需要区分多种-常量" tabindex="-1"><a class="header-anchor" href="#另外需要区分多种-常量"><span>另外需要区分多种&quot;常量&quot;</span></a></h5></blockquote><ul><li><p>编译期常量 (Compile-time constants)</p><ul><li>举例 <ul><li>数组：如果我们想要创建一个不是动态分配内存的数组，那么我们就必须给他设定一个size——这个size必须在编译期间就知道，因此静态数组的大小是编译期常量</li><li>switch的case标签</li><li>模板</li><li><code>constexpr</code></li><li><code>#define</code> (倒不如说是预处理常量)</li></ul></li><li>优点 <ul><li>安全、编译优化(快)</li></ul></li></ul></li><li><p>运行期常量</p><ul><li><p>举例</p><ul><li><p><strong>const</strong> (但有时可被优化成编译期常量)</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 因为他的值在编译期可能无法确定，例如：</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 编译期常量</span>
<span class="token keyword">int</span> y<span class="token punctuation">;</span>
cin <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> z <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token comment">// 运行期常量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>但需要注意的是，某些情况下，编译器可能会对运行期常量进行优化，将其视为编译期常量进行处理</p></li></ul></li></ul><blockquote><h5 id="两个特殊情况" tabindex="-1"><a class="header-anchor" href="#两个特殊情况"><span>两个特殊情况</span></a></h5></blockquote><ul><li><p>常量指针</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 错误示例</span>
<span class="token comment">// #define AUTHORNAME &quot;11&quot;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> authorName <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> authorName2 <span class="token operator">=</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">;</span>
authorName <span class="token operator">=</span> authorName2<span class="token punctuation">;</span> <span class="token comment">// 结果authorName的值变了</span>

<span class="token comment">// 正常示例</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">authorName</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>类的常量</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// #define NUMTURNS 5 			// 宏无法作用域在类的内部</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> NumTurns <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>	<span class="token comment">// 每个类都有一个常量副本</span>
    <span class="token keyword">int</span> scores<span class="token punctuation">[</span>NumTurns<span class="token punctuation">]</span><span class="token punctuation">;</span>			<span class="token comment">// 这里可以在声明前进行定义 (神奇的特殊规则)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 另一种写法是：</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token comment">// #define NUMTURNS 5 			// 宏无法作用域在类的内部</span>
    <span class="token comment">// static const int NumTurns = 5;	// 每个类都有一个常量副本</span>
    <span class="token keyword">enum</span> <span class="token punctuation">{</span> NumTurns <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> scores<span class="token punctuation">[</span>NumTurns<span class="token punctuation">]</span><span class="token punctuation">;</span>			<span class="token comment">// 这里可以在声明前进行定义 (神奇的特殊规则)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><h5 id="函数宏-内联函数模板" tabindex="-1"><a class="header-anchor" href="#函数宏-内联函数模板"><span>函数宏 &amp; 内联函数模板</span></a></h5></blockquote><p>缺点：容易被误用</p><p>例如</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">f</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_WITH_MAX</span> <span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">CALL_WITH_MAX</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 存在问题，++a会被执行两次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替代方案：内联函数模板</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">inline</span> T <span class="token function">callWithMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5></blockquote><p>考虑到const、枚举、内联的可用性，对预处理器的需求减少了，但没有完全消除。</p><ul><li><code>#include</code> 仍然必不可少</li><li><code>#ifdef/#ifndef</code> 在控制编译方面发挥重要作用</li><li>对于简单常量，首选const对象或枚举，而不是#define</li><li>对于类似函数的宏，优先选择内联函数</li></ul><h2 id="_03-尽可能使用const" tabindex="-1"><a class="header-anchor" href="#_03-尽可能使用const"><span>(03) 尽可能使用const</span></a></h2><blockquote><h5 id="const指针" tabindex="-1"><a class="header-anchor" href="#const指针"><span>const指针</span></a></h5></blockquote><p>const用于指针时，用途非常广泛</p><ul><li><p>const出现在<code>*</code>左侧：指向的是常量</p></li><li><p>const出现在<code>*</code>右侧：指针本身是常量</p></li><li><p>const在类型左右侧无区别</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 这两种写法等价：</span>
<span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">const</span> Widget<span class="token operator">*</span> pw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>Widget <span class="token keyword">const</span><span class="token operator">*</span> pw<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>总结</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>				<span class="token comment">// 非常量指针、非常量数据</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p  <span class="token operator">=</span> greeting<span class="token punctuation">;</span>		<span class="token comment">// 非常量指针、常量数据</span>
<span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> p  <span class="token operator">=</span> greeting<span class="token punctuation">;</span>		<span class="token comment">// (上)</span>
<span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>		<span class="token comment">// 常量指针、非常量数据</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>	<span class="token comment">// 常量指针、常量数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>个人记法：以星号为区分点，左侧是是指向类型，右侧是指针类型</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>			<span class="token comment">// 非常量指针、非常量数据</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> p  <span class="token operator">=</span> greeting<span class="token punctuation">;</span>	<span class="token comment">// 非常量指针、常量数据</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> p  <span class="token operator">=</span> greeting<span class="token punctuation">;</span>	<span class="token comment">// (上)</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token punctuation">)</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>	<span class="token comment">// 常量指针、非常量数据</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token punctuation">)</span> p <span class="token operator">=</span> greeting<span class="token punctuation">;</span>	<span class="token comment">// 常量指针、常量数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><h5 id="const-迭代器" tabindex="-1"><a class="header-anchor" href="#const-迭代器"><span>const 迭代器</span></a></h5></blockquote><p>我觉得有点奇怪</p><p>例如</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">;</span>
<span class="token comment">// ...</span>

<span class="token comment">// iter 的行为像 T* const</span>
<span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>iter <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>		<span class="token comment">// 正确，非常量数据</span>
<span class="token operator">++</span>iter<span class="token punctuation">;</span>			<span class="token comment">// 错误，常量指针</span>

<span class="token comment">// cIter 的行为像 const T*</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator cIter <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>cIter <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>	<span class="token comment">// 错误，常量数据</span>
<span class="token operator">++</span>cIter<span class="token punctuation">;</span>		<span class="token comment">// 正确，非常量指针</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明"><span>函数声明</span></a></h5></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> Rational <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Rational<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// operator*的结果应该是一个const对象，可以避免下面的写法：</span>
<span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span> 		<span class="token comment">// 错误写法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token operator">=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 错误写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="const限定成员函数" tabindex="-1"><a class="header-anchor" href="#const限定成员函数"><span>const限定成员函数</span></a></h5></blockquote><p>能使接口更加明确</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">TextBlock</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t position<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 	<span class="token comment">// 只读版，无法修改</span>
    <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t position<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>				<span class="token comment">// 可写版，能够赋值</span>
<span class="token punctuation">}</span>

TextBlock <span class="token function">tb</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>tb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>	<span class="token comment">// 调用non-const版</span>
tb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>					<span class="token comment">// 正确</span>

<span class="token keyword">const</span> TextBlock <span class="token function">ctb</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>ctb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>	<span class="token comment">// 调用const版</span>
ctb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>					<span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="位常量与逻辑常量" tabindex="-1"><a class="header-anchor" href="#位常量与逻辑常量"><span>位常量与逻辑常量</span></a></h5></blockquote><p>成员函数成为const是什么意思？有两种流行概念：</p><ul><li>位常量 (bitwise constness)：也叫物理常量</li><li>逻辑常量 (logical constness)：当你用一个特定的值创建一个常量对象，并且只调用 它的const成员函数时，你仍然改变它的值，这有些不对劲。这就引出了逻辑常量的概念</li></ul><p>const成员函数不能修改它的对象的任何<strong>非静态</strong>数据成员</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">CTextBlock</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t position<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>		<span class="token comment">// 正确</span>
        b <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 错误 </span>
        c <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>	<span class="token comment">// 正确</span>
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string b<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mutable (可变的) 将非静态数据成员从按位常量的限制中解放出来</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">CTextBlock</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        b <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 正确 </span>
        <span class="token keyword">return</span> b
    <span class="token punctuation">}</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">mutable</span> std<span class="token double-colon punctuation">::</span>size_t b<span class="token punctuation">;</span>
	<span class="token keyword">mutable</span> <span class="token keyword">bool</span> c<span class="token punctuation">;</span>				<span class="token comment">// 即让该值的位变化，视作 &quot;其实没有修改类的内容&quot;，是安全的</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h5 id="避免const重载的代码重复" tabindex="-1"><a class="header-anchor" href="#避免const重载的代码重复"><span>避免const重载的代码重复</span></a></h5></blockquote><h2 id="_04-确定对象被使用前已被初始化" tabindex="-1"><a class="header-anchor" href="#_04-确定对象被使用前已被初始化"><span>(04) 确定对象被使用前已被初始化</span></a></h2><h1 id="构造-析构-赋值运算" tabindex="-1"><a class="header-anchor" href="#构造-析构-赋值运算"><span>构造/析构/赋值运算</span></a></h1><h2 id="_05-了解c-默默编写并调用哪些函数" tabindex="-1"><a class="header-anchor" href="#_05-了解c-默默编写并调用哪些函数"><span>(05) 了解C++默默编写并调用哪些函数</span></a></h2><h2 id="_06-若不想使用编译器自动生成的函数-就该明确拒绝" tabindex="-1"><a class="header-anchor" href="#_06-若不想使用编译器自动生成的函数-就该明确拒绝"><span>(06) 若不想使用编译器自动生成的函数，就该明确拒绝</span></a></h2><h2 id="_07-为多态基类声明virtual析构函数" tabindex="-1"><a class="header-anchor" href="#_07-为多态基类声明virtual析构函数"><span>(07) 为多态基类声明virtual析构函数</span></a></h2><h2 id="_08-别让异常逃离析构函数" tabindex="-1"><a class="header-anchor" href="#_08-别让异常逃离析构函数"><span>(08) 别让异常逃离析构函数</span></a></h2><h2 id="_09-绝不在构造和析构过程中调用virtual函数" tabindex="-1"><a class="header-anchor" href="#_09-绝不在构造和析构过程中调用virtual函数"><span>(09) 绝不在构造和析构过程中调用virtual函数</span></a></h2><h2 id="_10-令operator-返回一个reference-to-this" tabindex="-1"><a class="header-anchor" href="#_10-令operator-返回一个reference-to-this"><span>(10) 令operator=返回一个reference to *this</span></a></h2><h2 id="_11-在operator-中处理-自我赋值" tabindex="-1"><a class="header-anchor" href="#_11-在operator-中处理-自我赋值"><span>(11) 在operator=中处理&quot;自我赋值&quot;</span></a></h2><h2 id="_12-复制对象时勿忘其每一个成分" tabindex="-1"><a class="header-anchor" href="#_12-复制对象时勿忘其每一个成分"><span>(12) 复制对象时勿忘其每一个成分</span></a></h2><h1 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理"><span>资源管理</span></a></h1><h2 id="_13-以对象管理资源" tabindex="-1"><a class="header-anchor" href="#_13-以对象管理资源"><span>(13) 以对象管理资源</span></a></h2><h2 id="_14-在资源管理类中小心copying行为" tabindex="-1"><a class="header-anchor" href="#_14-在资源管理类中小心copying行为"><span>(14) 在资源管理类中小心copying行为</span></a></h2><h2 id="_15-在资源管理类中提供对原始资源的访问" tabindex="-1"><a class="header-anchor" href="#_15-在资源管理类中提供对原始资源的访问"><span>(15) 在资源管理类中提供对原始资源的访问</span></a></h2><h2 id="_16-成对使用new和delete时要采用相同形式" tabindex="-1"><a class="header-anchor" href="#_16-成对使用new和delete时要采用相同形式"><span>(16) 成对使用new和delete时要采用相同形式</span></a></h2><h2 id="_17-以独立语句将newed对象置入智能指针" tabindex="-1"><a class="header-anchor" href="#_17-以独立语句将newed对象置入智能指针"><span>(17) 以独立语句将newed对象置入智能指针</span></a></h2><h1 id="设计与声明" tabindex="-1"><a class="header-anchor" href="#设计与声明"><span>设计与声明</span></a></h1><h2 id="_18-让接口容易被正确使用-不易被误用" tabindex="-1"><a class="header-anchor" href="#_18-让接口容易被正确使用-不易被误用"><span>(18) 让接口容易被正确使用，不易被误用</span></a></h2><h2 id="_19-设计class犹如设计type" tabindex="-1"><a class="header-anchor" href="#_19-设计class犹如设计type"><span>(19) 设计class犹如设计type</span></a></h2><h2 id="_20-宁以pass-by-reference-to-const替换pass-by-value" tabindex="-1"><a class="header-anchor" href="#_20-宁以pass-by-reference-to-const替换pass-by-value"><span>(20) 宁以pass-by-reference-to-const替换pass-by-value</span></a></h2><h2 id="_21-必须返回对象时-别妄想返回其reference" tabindex="-1"><a class="header-anchor" href="#_21-必须返回对象时-别妄想返回其reference"><span>(21) 必须返回对象时，别妄想返回其reference</span></a></h2><h2 id="_22-将成员变量声明为private" tabindex="-1"><a class="header-anchor" href="#_22-将成员变量声明为private"><span>(22) 将成员变量声明为private</span></a></h2><h2 id="_23-宁以non-member、non-friend替换函数" tabindex="-1"><a class="header-anchor" href="#_23-宁以non-member、non-friend替换函数"><span>(23) 宁以non-member、non-friend替换函数</span></a></h2>`,69))])}const b=p(r,[["render",k],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AEffective%20C__%E3%80%8B/","title":"《Effective C++》","lang":"zh-CN","frontmatter":{"description":"《Effective C++》 参考 实体书，中文版，第三版，候捷 跟读视频 [鲨哥带你读] Effective C++ 《Effective C++》2023（上部完整版） C++进阶看这个，更详细，还有上机，但没更完 共有55个条款 让自己习惯C++ (01) 视C++为一个语言联邦 (02) 尽量以const, enum, inline 替换 #...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E3%80%8AEffective%20C__%E3%80%8B/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"《Effective C++》"}],["meta",{"property":"og:description","content":"《Effective C++》 参考 实体书，中文版，第三版，候捷 跟读视频 [鲨哥带你读] Effective C++ 《Effective C++》2023（上部完整版） C++进阶看这个，更详细，还有上机，但没更完 共有55个条款 让自己习惯C++ (01) 视C++为一个语言联邦 (02) 尽量以const, enum, inline 替换 #..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《Effective C++》\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"《Effective C++》","slug":"《effective-c-》","link":"#《effective-c-》","children":[]},{"level":1,"title":"让自己习惯C++","slug":"让自己习惯c","link":"#让自己习惯c","children":[{"level":2,"title":"(01) 视C++为一个语言联邦","slug":"_01-视c-为一个语言联邦","link":"#_01-视c-为一个语言联邦","children":[]},{"level":2,"title":"(02) 尽量以const, enum, inline 替换 #define","slug":"_02-尽量以const-enum-inline-替换-define","link":"#_02-尽量以const-enum-inline-替换-define","children":[]},{"level":2,"title":"(03) 尽可能使用const","slug":"_03-尽可能使用const","link":"#_03-尽可能使用const","children":[]},{"level":2,"title":"(04) 确定对象被使用前已被初始化","slug":"_04-确定对象被使用前已被初始化","link":"#_04-确定对象被使用前已被初始化","children":[]}]},{"level":1,"title":"构造/析构/赋值运算","slug":"构造-析构-赋值运算","link":"#构造-析构-赋值运算","children":[{"level":2,"title":"(05) 了解C++默默编写并调用哪些函数","slug":"_05-了解c-默默编写并调用哪些函数","link":"#_05-了解c-默默编写并调用哪些函数","children":[]},{"level":2,"title":"(06) 若不想使用编译器自动生成的函数，就该明确拒绝","slug":"_06-若不想使用编译器自动生成的函数-就该明确拒绝","link":"#_06-若不想使用编译器自动生成的函数-就该明确拒绝","children":[]},{"level":2,"title":"(07) 为多态基类声明virtual析构函数","slug":"_07-为多态基类声明virtual析构函数","link":"#_07-为多态基类声明virtual析构函数","children":[]},{"level":2,"title":"(08) 别让异常逃离析构函数","slug":"_08-别让异常逃离析构函数","link":"#_08-别让异常逃离析构函数","children":[]},{"level":2,"title":"(09) 绝不在构造和析构过程中调用virtual函数","slug":"_09-绝不在构造和析构过程中调用virtual函数","link":"#_09-绝不在构造和析构过程中调用virtual函数","children":[]},{"level":2,"title":"(10) 令operator=返回一个reference to *this","slug":"_10-令operator-返回一个reference-to-this","link":"#_10-令operator-返回一个reference-to-this","children":[]},{"level":2,"title":"(11) 在operator=中处理\\"自我赋值\\"","slug":"_11-在operator-中处理-自我赋值","link":"#_11-在operator-中处理-自我赋值","children":[]},{"level":2,"title":"(12) 复制对象时勿忘其每一个成分","slug":"_12-复制对象时勿忘其每一个成分","link":"#_12-复制对象时勿忘其每一个成分","children":[]}]},{"level":1,"title":"资源管理","slug":"资源管理","link":"#资源管理","children":[{"level":2,"title":"(13) 以对象管理资源","slug":"_13-以对象管理资源","link":"#_13-以对象管理资源","children":[]},{"level":2,"title":"(14) 在资源管理类中小心copying行为","slug":"_14-在资源管理类中小心copying行为","link":"#_14-在资源管理类中小心copying行为","children":[]},{"level":2,"title":"(15) 在资源管理类中提供对原始资源的访问","slug":"_15-在资源管理类中提供对原始资源的访问","link":"#_15-在资源管理类中提供对原始资源的访问","children":[]},{"level":2,"title":"(16) 成对使用new和delete时要采用相同形式","slug":"_16-成对使用new和delete时要采用相同形式","link":"#_16-成对使用new和delete时要采用相同形式","children":[]},{"level":2,"title":"(17) 以独立语句将newed对象置入智能指针","slug":"_17-以独立语句将newed对象置入智能指针","link":"#_17-以独立语句将newed对象置入智能指针","children":[]}]},{"level":1,"title":"设计与声明","slug":"设计与声明","link":"#设计与声明","children":[{"level":2,"title":"(18) 让接口容易被正确使用，不易被误用","slug":"_18-让接口容易被正确使用-不易被误用","link":"#_18-让接口容易被正确使用-不易被误用","children":[]},{"level":2,"title":"(19) 设计class犹如设计type","slug":"_19-设计class犹如设计type","link":"#_19-设计class犹如设计type","children":[]},{"level":2,"title":"(20) 宁以pass-by-reference-to-const替换pass-by-value","slug":"_20-宁以pass-by-reference-to-const替换pass-by-value","link":"#_20-宁以pass-by-reference-to-const替换pass-by-value","children":[]},{"level":2,"title":"(21) 必须返回对象时，别妄想返回其reference","slug":"_21-必须返回对象时-别妄想返回其reference","link":"#_21-必须返回对象时-别妄想返回其reference","children":[]},{"level":2,"title":"(22) 将成员变量声明为private","slug":"_22-将成员变量声明为private","link":"#_22-将成员变量声明为private","children":[]},{"level":2,"title":"(23) 宁以non-member、non-friend替换函数","slug":"_23-宁以non-member、non-friend替换函数","link":"#_23-宁以non-member、non-friend替换函数","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.86,"words":1757},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 管理层/01. 多类管理/设计模式/《Effective C++》/README.md","excerpt":"\\n<p>参考</p>\\n<ul>\\n<li>实体书，中文版，第三版，候捷</li>\\n<li>跟读视频\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV1B14y1f7fw\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">[鲨哥带你读] Effective C++</a></li>\\n<li><a href=\\"https://www.bilibili.com/video/BV1QX4y1W7Ya\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">《Effective C++》2023（上部完整版） C++进阶看这个</a>，更详细，还有上机，但没更完</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{b as comp,h as data};
