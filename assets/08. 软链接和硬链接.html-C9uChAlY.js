import{_ as n,c as i,e as t,o as l}from"./app-BDGujT_T.js";const o="/assets/%E7%A1%AC%E9%93%BE%E6%8E%A5-2-Bn3d9hGy.png",r="/assets/%E8%BD%AF%E9%93%BE%E6%8E%A5-CBZvH1AF.png",E={};function a(s,e){return l(),i("div",null,e[0]||(e[0]=[t('<h1 id="软链接和硬链接" tabindex="-1"><a class="header-anchor" href="#软链接和硬链接"><span>软链接和硬链接</span></a></h1><p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过 <strong>硬链接（<em>Hard Link</em>）</strong> 和 <strong>软链接（<em>Symbolic Link</em>）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>硬链接 <ul><li>多个目录项、同一个文件（同一个inode）</li><li>是否跨文件系统：否</li><li>删除：删除对应文件的所有硬链接以及源文件时，系统才会彻底删除该文件</li></ul></li><li>软链接 <ul><li>多个文件（多个inode）</li><li>是否跨文件系统：是</li><li>删除：删除目标文件时，链接文件依然存在但指向目标丢失</li></ul></li></ul><h2 id="硬链接" tabindex="-1"><a class="header-anchor" href="#硬链接"><span>硬链接</span></a></h2><p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个 inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode 数据结构和列表，所以 <strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个 inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p><p><img src="'+o+'" alt="硬链接" loading="lazy"></p><h2 id="软链接" tabindex="-1"><a class="header-anchor" href="#软链接"><span>软链接</span></a></h2><p>软链接相当于重新创建一个文件，这个文件有<strong>独立的 inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p><p><img src="'+r+'" alt="软链接" loading="lazy"></p>',10)]))}const p=n(E,[["render",a],["__file","08. 软链接和硬链接.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/08.%20%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5.html","title":"软链接和硬链接","lang":"zh-CN","frontmatter":{"description":"软链接和硬链接 有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过 硬链接（Hard Link） 和 软链接（Symbolic Link） 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。 总结 硬链接 多个目录项、同一个文件（同一个inode） 是否跨文件系统：否 删除：删除对应文件的所有硬链接以及源文件时，系统才会彻底...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/08.%20%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"软链接和硬链接"}],["meta",{"property":"og:description","content":"软链接和硬链接 有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过 硬链接（Hard Link） 和 软链接（Symbolic Link） 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。 总结 硬链接 多个目录项、同一个文件（同一个inode） 是否跨文件系统：否 删除：删除对应文件的所有硬链接以及源文件时，系统才会彻底..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"软链接和硬链接\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"软链接和硬链接","slug":"软链接和硬链接","link":"#软链接和硬链接","children":[{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"硬链接","slug":"硬链接","link":"#硬链接","children":[]},{"level":2,"title":"软链接","slug":"软链接","link":"#软链接","children":[]}]}],"git":{},"readingTime":{"minutes":1.5,"words":450},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/08. 软链接和硬链接.md","excerpt":"\\n<p>有时候我们希望给某个文件取个别名，那么在 Linux 中可以通过 <strong>硬链接（<em>Hard Link</em>）</strong> 和 <strong>软链接（<em>Symbolic Link</em>）</strong> 的方式来实现，它们都是比较特殊的文件，但是实现方式也是不相同的。</p>\\n<h2>总结</h2>\\n<ul>\\n<li>硬链接\\n<ul>\\n<li>多个目录项、同一个文件（同一个inode）</li>\\n<li>是否跨文件系统：否</li>\\n<li>删除：删除对应文件的所有硬链接以及源文件时，系统才会彻底删除该文件</li>\\n</ul>\\n</li>\\n<li>软链接\\n<ul>\\n<li>多个文件（多个inode）</li>\\n<li>是否跨文件系统：是</li>\\n<li>删除：删除目标文件时，链接文件依然存在但指向目标丢失</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/08. 软链接和硬链接.md","value":{"title":"08. 软链接和硬链接","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/08. 软链接和硬链接.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
