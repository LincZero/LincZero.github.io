import{_ as k,c as p,e as l,a as e,f as s,b as n,d as t,r as h,o as d}from"./app-BG6lKC-Y.js";const r={};function c(g,i){const a=h("RouteLink");return d(),p("div",null,[i[4]||(i[4]=l(`<h1 id="cpp包管理工具-vcpkg" tabindex="-1"><a class="header-anchor" href="#cpp包管理工具-vcpkg"><span>Cpp包管理工具 Vcpkg</span></a></h1><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://learn.microsoft.com/zh-cn/vcpkg/" target="_blank" rel="noopener noreferrer">微软vcpkg文档</a>，<a href="https://github.com/microsoft/vcpkg?tab=readme-ov-file#get-started" target="_blank" rel="noopener noreferrer">微软官网中的vcpkg说明</a>。强烈建议看这个为准，强烈建议看自己IDE里中vcpkg相关的内容 <ul><li><a href="https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-powershell" target="_blank" rel="noopener noreferrer">教程：通过 CMake 安装和使用包</a></li><li><a href="https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started-vscode?pivots=shell-powershell" target="_blank" rel="noopener noreferrer">教程：在 Visual Studio Code 中通过 CMake 安装和使用包</a></li><li><a href="https://www.jetbrains.com/help/clion/package-management.html" target="_blank" rel="noopener noreferrer">CLion - Vcpkg integration</a> (需要新版本CLion，23版本以上)</li><li><a href="https://learn.microsoft.com/zh-cn/vcpkg/users/buildsystems/cmake-integration" target="_blank" rel="noopener noreferrer">CMake 项目中的 vcpkg</a></li></ul></li><li>贡献 <ul><li><a href="https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started-adding-to-registry?pivots=shell-powershell" target="_blank" rel="noopener noreferrer">教程：将端口添加到 vcpkg 开源注册表</a></li></ul></li><li>视频 <ul><li><a href="https://www.bilibili.com/video/BV1pd4y1x7De" target="_blank" rel="noopener noreferrer">【cmake】cmake搭配vcpkg的manifest模式实现第三方库的全自动下载和配置</a> (特意找了个manifest模式的，这种资料可不多，都是经典模式)</li></ul></li></ul><h2 id="学习-线性-使用流程" tabindex="-1"><a class="header-anchor" href="#学习-线性-使用流程"><span>学习 - 线性 (使用流程)</span></a></h2><h3 id="下载、安装、配置" tabindex="-1"><a class="header-anchor" href="#下载、安装、配置"><span>下载、安装、配置</span></a></h3><p>很简单</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/microsoft/vcpkg.git</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 下载</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vcpkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">bootstrap-vcpkg.bat</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 安装 (双击也行), 此时会生成一个 vcpkg.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 然后需要手动添加一下这个路径到windows环境变量，可以顺便新开cmd \`&gt;vcpkg --version\` 检查下</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在项目中使用" tabindex="-1"><a class="header-anchor" href="#在项目中使用"><span>在项目中使用</span></a></h3><h4 id="_1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-安装依赖"><span>(1) 安装依赖</span></a></h4><p>以清单模式为例，不建议使用经典模式 (经典模式是 <code>vcpkg install xxx</code>)</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> new</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --application</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 生成清单文件。当前文件夹会多出 \`vcpkg.json\` 和 \`vcpkg-configuration.json\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加依赖项 (可选)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 如添加fmt包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp-httplib</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 如添加cpp-httplib包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spdlog</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 安装vcpkg中记录的依赖包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道有没有某个包或想查找有哪些包可以去网站查，例如： https://vcpkg.link/ports/cpp-httplib</p><p>平时使用时也推荐去看一下。他上面也会告诉你用什么代码安装，以及需要往 CMake 文件里加什么代码！非常方便！</p><h4 id="_2-使用依赖" tabindex="-1"><a class="header-anchor" href="#_2-使用依赖"><span>(2) 使用依赖</span></a></h4><p>常规代码使用该库</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;fmt/core.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    fmt::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World!</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 <code>CMakeLists.txt</code> 中添加以下代码：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find_package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fmt</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> CONFIG</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> REQUIRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target_link_libraries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">$</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">PROJECT_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">PRIVATE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-连接依赖" tabindex="-1"><a class="header-anchor" href="#_3-连接依赖"><span>(3) 连接依赖</span></a></h4><p><strong>原理</strong>：</p><p>但这时 find_package 还不能找不到C++库。</p><p>一是前一章我们说过一般情况下去寻找的位置，但无论是经典还是清单模式，新库安装所在的位置不没在之前要找的地方的。所以我们需要让CMake能识别存放新的库的地方。</p><p>二是通过vcpkg安装的库是未编译状态，有时我们需要先编译他们再使用。这时需要使用vcpkg自身的cmake (即 <code>-DCMAKE_TOOLCHAIN_FILE=G:/&lt;vcpkg安装路径&gt;/scripts/buildsystems/vcpkg.cmake</code>)。把这些库编译成当前平台的库，然后再使用</p><p><strong>清单模式版</strong>：</p><p>清单模式+纯头文件库这种，似乎没那么麻烦？那些教程老搞得我头晕</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">CMAKE_PREFIX_PATH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;\${CMAKE_SOURCE_DIR}/vcpkg_installed/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>VSCode</strong>:</p><p>先安装CMake、CMake Tools 两个扩展 (主要是后者进行这一步)</p><p>配置 <code>VCPKG_ROOT</code> 环境变量：需要提供 <code>vcpkg.cmake</code> 工具链文件。 要自动执行此操作，请在包含以下内容的 &quot;helloworld&quot; 目录中创建一个 <code>CMakePresets.json</code> 文件：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;configurePresets&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vcpkg&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;generator&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Ninja&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;binaryDir&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;\${sourceDir}/build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 换成自己的目录</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;cacheVariables&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 换成安装vcpkg的本地目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 这里的两个路径的官方示例是：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$env:VCPKG_ROOT=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C:</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">\\p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ath</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">o</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">\\v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">cpkg&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$env:PATH=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$env:VCPKG_ROOT;$env:PATH&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果你不知道路径，除了去安装路径找，还可以这样：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;vcpkg integrate install</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Applied user-wide integration for this vcpkg root.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">CMake projects should use: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-DCMAKE_TOOLCHAIN_FILE=G:/&lt;vcpkg安装路径&gt;/scripts/buildsystems/vcpkg.cmake&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">All MSBuild C++ projects can now #include any installed libraries. Linking will be handled automatically. Installing new libraries will make them instantly available.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>VS</strong>：</p><p><code>vcpkg integrante install</code> 安装之后即可使用</p><h2 id="学习-字典型" tabindex="-1"><a class="header-anchor" href="#学习-字典型"><span>学习 - 字典型</span></a></h2><h3 id="经典模式和清单模式-manifest模式" tabindex="-1"><a class="header-anchor" href="#经典模式和清单模式-manifest模式"><span>经典模式和清单模式 (manifest模式)</span></a></h3><ul><li>经典模式是在任意路径下的，执行 <code>vcpkg install ...</code> 会安装到统一的指定路径。</li><li>manifest模式是在你 <code>vcpkg new -application</code> 所在的路径下的，<code>add</code> 再 <code>vcpkg install</code> 会安装到当前目录下的 <code>vcpkg_installed</code> 文件夹中</li></ul><blockquote><p>参考：<a href="https://www.bilibili.com/video/BV1FN411E77t" target="_blank" rel="noopener noreferrer">【C++】C++包管理的最终答案(maybe)</a></p><ul><li>共同特点、使用流程 <ul><li>(1) 下载依赖 (2) 定位cmake项目到vcpkg (3) 通过find_package使用下载好的依赖</li></ul></li><li>清单模式 <ul><li>(1) 提供一个json文件，描述了所有依赖信息，别人 <code>vcpkg install</code> (2) 同 (3) 同</li><li>推荐，别人使用时直接 <code>vcpkg install</code> 就行了</li></ul></li><li>经典模式 <ul><li>(1) <code>vcpkg search fmt &amp;&amp; vcpkg install fmt</code> (2) 编译命令加上 <code>-DCMAKE_TOOL...</code> (忘了) (3) 同</li><li>这种方式不利于分发，不建议使用</li></ul></li></ul><p>一个原理补充：第二步是为了在cmake之前先去执行vcpkg-cmake脚本 (现场编译你需要的依赖包)</p><p>CLion补充：2023版本之后，按两下shift输入vcpkg回车，有一个vcpkg的面板</p></blockquote><h4 id="经典模式" tabindex="-1"><a class="header-anchor" href="#经典模式"><span>经典模式</span></a></h4><p>在经典模式下，<code>vcpkg</code> 命令直接安装和管理包。你可以使用 <code>vcpkg install &lt;package&gt;</code> 命令来安装单个包。例如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cpp-httplib</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="清单模式-manifest模式" tabindex="-1"><a class="header-anchor" href="#清单模式-manifest模式"><span>清单模式 (manifest模式)</span></a></h4><p>在manifest模式下，<code>vcpkg</code> 使用 <code>vcpkg.json</code>文件来管理项目的依赖项。<code>vcpkg.json</code>文件定义了项目所需的所有包。当你运行<code>vcpkg install</code>时，它会读取<code>vcpkg.json</code>文件并安装其中列出的所有依赖项。</p><h3 id="更多命令" tabindex="-1"><a class="header-anchor" href="#更多命令"><span>更多命令</span></a></h3><p>有一些其他命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> search</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fmt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spdlog:x64-windows</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 只编译64位windows版本</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spdlog:x64-windows-static</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 只编译64位windows版本的静态库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> spdlog:x64-windows</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         # 删除</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                            # 更新</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vcpkg</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upgrade</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                           # 列出需要更新的库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><p>vcpkg 包管理器在 GitHub 上定期更新。 若要将 vcpkg 的克隆更新到最新版本，执行 <code>git pull</code> 命令即可。</p><h2 id="总结、faq" tabindex="-1"><a class="header-anchor" href="#总结、faq"><span>总结、FAQ</span></a></h2><h3 id="cmake-toolchain-file-的三种方式" tabindex="-1"><a class="header-anchor" href="#cmake-toolchain-file-的三种方式"><span>CMAKE_TOOLCHAIN_FILE 的三种方式</span></a></h3><p><code>CMAKE_TOOLCHAIN_FILE</code> 到底是用以下哪种方式进行配置？同时配置时优先级如何？</p><ul><li><code>命令行</code> 中：<code>cmake -DCMAKE_TOOLCHAIN_FILE=&quot;&quot;</code></li><li><code>CMakeLists.txt</code> 中：<code>set(CMAKE_TOOLCHAIN_FILE &quot;...&quot;)</code></li><li><code>CMakePresets.json</code> 中：<code>configurePresetsp[0].cacheVariables.CMAKE_TOOLCHAIN_FILE = &quot;...&quot;</code> (CMake 3.19 版本开始支持)</li></ul><p>都可以，优先级顺序如下：<code>命令行参数</code> &gt; CMakePresets.json &gt; CMakeLists.txt</p><h3 id="vs其他包管理工具" tabindex="-1"><a class="header-anchor" href="#vs其他包管理工具"><span>Vs其他包管理工具</span></a></h3><p>整体用下来和 python pip 的 <code>requirement.txt</code> 和 js npm 的 <code>package.json</code> 是差不多的。网站也与npm的官网很像</p><h3 id="搜包原理" tabindex="-1"><a class="header-anchor" href="#搜包原理"><span>搜包原理</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">find_package(spdlog</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CONFIG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> REQUIRED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 vcpkg 的清单模式时，\`find_package(spdlog CONFIG REQUIRED)\` 能够找到 \`spdlog\` 的原因在于: vcpkg 的工具链文件机制 (通过 -D-DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake 找到，这个工具链文件会自动将vcpkg_installed目录添加到CMake的搜索路径中) 以及 CMake 的配置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,55)),e("p",null,[i[1]||(i[1]=s("更多原理见 ")),n(a,{to:"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/BackEnd/Cpp%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7find_package.html"},{default:t(()=>i[0]||(i[0]=[s("Cpp包管理工具find_package")])),_:1})]),i[5]||(i[5]=l(`<h2 id="demo、实战、调试技巧" tabindex="-1"><a class="header-anchor" href="#demo、实战、调试技巧"><span>demo、实战、调试技巧</span></a></h2><h3 id="cppcmakevcpkgtemplate" tabindex="-1"><a class="header-anchor" href="#cppcmakevcpkgtemplate"><span>CppCMakeVcpkgTemplate</span></a></h3><p>由于初学时我项目配置卡了好久，我决定通过编译一个模板demo <code>CppCMakeVcpkgTemplate</code> 来验证至关重要的一点：我项目配置的问题or我环境的问题</p><p>或者想要熟悉该包管理工具的，也可以尝试自己编译一遍这个库，应该就能感受到其便利，以及学习到使用流程了</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (方式一) clone两次</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 准备项目</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; git clone https://github.com/lukka/CppCMakeVcpkgTemplate.git; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CppCMakeVcpkgTemplate</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也许是为了避免大家安装的位置不同，该模板块选择把vcpkg的位置放在了项目中...也不是不行</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; git clone https://github.com/microsoft/vcpkg.git; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">vcpkg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">bootstrap-vcpkg.bat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (方式二) 递归clone</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; git clone --recursive https://github.com/lukka/CppCMakeVcpkgTemplate.git; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> CppCMakeVcpkgTemplate</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (方式一) VSCode. 点击运行按钮，选择main (他这个项目add_executable了两个目标)。成功打印！</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 相当于以下的命令组:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; G:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ev</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ool_CMake</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make.EXE </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-DCMAKE_TOOLCHAIN_FILE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">H:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/vcpkg/scripts/buildsystems/vcpkg.cmake</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -SH:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -BH:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/builds/ninja-multi-vcpkg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Ninja Multi-Config&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; G:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ev</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ool_CMake</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make.EXE --build H:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/builds/ninja-multi-vcpkg --config Debug --target main --</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; .</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;H:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/builds/ninja-multi-vcpkg/Debug/main.exe&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 简化 (假设都配置了环境变量，不过有时不能相对路径)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; mkdir ./builds/ninja-multi-vcpkg &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./builds/ninja-multi-vcpkg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cmake -S ../../ -B </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -G </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Ninja Multi-Config&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> -DCMAKE_TOOLCHAIN_FILE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">../../vcpkg/scripts/buildsystems/vcpkg.cmake</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cmake --build </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --config Debug --target main --</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (方式二) CLion. 按cmake再安运行就行了 (cmake阶段失败的话 设置&gt;构建执行部署&gt;CMake，选项里加上 \`-DCMAKE_TOOLCHAIN_FILE=H:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/vcpkg/scripts/buildsystems/vcpkg.cmake\` 就行了)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 相当于以下命令组：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; G:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ev</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DE_JetBrains_CLion</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">024</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\w</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make.exe </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-DCMAKE_BUILD_TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Debug</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> -DCMAKE_MAKE_PROGRAM</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">G:/Soft/Dev/All/IDE_JetBrains_CLion/2024/bin/ninja/win/x64/ninja.exe</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> -G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Ninja</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> H:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">it</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rivate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">roup_LincZero</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ppCMakeVcpkgTemplate</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -B</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> H:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">it</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rivate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">roup_LincZero</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ppCMakeVcpkgTemplate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">make-build-debug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -DCMAKE_TOOLCHAIN_FILE=H:/Git/Private/Group_LincZero/CppCMakeVcpkgTemplate/vcpkg/scripts/buildsystems/vcpkg.cmake</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 注意最后一个参数如果没有，见上，CLion设置里给CMake加上选项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; G:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">oft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ev</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ll</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ool_CMake</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make.exe --build H:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">it</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\P</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rivate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\G</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">roup_LincZero</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ppCMakeVcpkgTemplate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">make-build-debug --target main -j 14</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 简化 (假设都配置了环境变量)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; mkdir ./cmake-build-debug &amp;&amp; </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./cmake-build-debug</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cmake -S .. -B </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -G Ninja </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">-DCMAKE_BUILD_TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Debug</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> -DCMAKE_MAKE_PROGRAM</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ninja</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> -DCMAKE_TOOLCHAIN_FILE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">../vcpkg/scripts/buildsystems/vcpkg.cmake</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; cmake --build </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --target main -j 14</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (方式三) Terminal. 纯终端</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 基本同上</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不同ide的按钮与命令行的对应关系" tabindex="-1"><a class="header-anchor" href="#不同ide的按钮与命令行的对应关系"><span>不同IDE的按钮与命令行的对应关系</span></a></h3>`,6)),e("p",null,[i[3]||(i[3]=s("详见 ")),n(a,{to:"/MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.html"},{default:t(()=>i[2]||(i[2]=[s("How to build cpp")])),_:1})])])}const A=k(r,[["render",c],["__file","Cpp包管理工具Vcpkg.html.vue"]]),v=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/BackEnd/Cpp%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Vcpkg.html","title":"Cpp包管理工具 Vcpkg","lang":"zh-CN","frontmatter":{"create_time":"2025-02-06T00:00:00.000Z","Author":"LincZero","description":"Cpp包管理工具 Vcpkg 参考资料 微软vcpkg文档，微软官网中的vcpkg说明。强烈建议看这个为准，强烈建议看自己IDE里中vcpkg相关的内容 教程：通过 CMake 安装和使用包 教程：在 Visual Studio Code 中通过 CMake 安装和使用包 CLion - Vcpkg integration (需要新版本CLion，23...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/03.%20%E5%BA%93%E6%88%96%E5%8C%85%E7%AE%A1%E7%90%86/BackEnd/Cpp%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Vcpkg.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Cpp包管理工具 Vcpkg"}],["meta",{"property":"og:description","content":"Cpp包管理工具 Vcpkg 参考资料 微软vcpkg文档，微软官网中的vcpkg说明。强烈建议看这个为准，强烈建议看自己IDE里中vcpkg相关的内容 教程：通过 CMake 安装和使用包 教程：在 Visual Studio Code 中通过 CMake 安装和使用包 CLion - Vcpkg integration (需要新版本CLion，23..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cpp包管理工具 Vcpkg\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Cpp包管理工具 Vcpkg","slug":"cpp包管理工具-vcpkg","link":"#cpp包管理工具-vcpkg","children":[{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"学习 - 线性 (使用流程)","slug":"学习-线性-使用流程","link":"#学习-线性-使用流程","children":[{"level":3,"title":"下载、安装、配置","slug":"下载、安装、配置","link":"#下载、安装、配置","children":[]},{"level":3,"title":"在项目中使用","slug":"在项目中使用","link":"#在项目中使用","children":[{"level":4,"title":"(1) 安装依赖","slug":"_1-安装依赖","link":"#_1-安装依赖","children":[]},{"level":4,"title":"(2) 使用依赖","slug":"_2-使用依赖","link":"#_2-使用依赖","children":[]},{"level":4,"title":"(3) 连接依赖","slug":"_3-连接依赖","link":"#_3-连接依赖","children":[]}]}]},{"level":2,"title":"学习 - 字典型","slug":"学习-字典型","link":"#学习-字典型","children":[{"level":3,"title":"经典模式和清单模式 (manifest模式)","slug":"经典模式和清单模式-manifest模式","link":"#经典模式和清单模式-manifest模式","children":[{"level":4,"title":"经典模式","slug":"经典模式","link":"#经典模式","children":[]},{"level":4,"title":"清单模式 (manifest模式)","slug":"清单模式-manifest模式","link":"#清单模式-manifest模式","children":[]}]},{"level":3,"title":"更多命令","slug":"更多命令","link":"#更多命令","children":[]},{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]}]},{"level":2,"title":"总结、FAQ","slug":"总结、faq","link":"#总结、faq","children":[{"level":3,"title":"CMAKE_TOOLCHAIN_FILE 的三种方式","slug":"cmake-toolchain-file-的三种方式","link":"#cmake-toolchain-file-的三种方式","children":[]},{"level":3,"title":"Vs其他包管理工具","slug":"vs其他包管理工具","link":"#vs其他包管理工具","children":[]},{"level":3,"title":"搜包原理","slug":"搜包原理","link":"#搜包原理","children":[]}]},{"level":2,"title":"demo、实战、调试技巧","slug":"demo、实战、调试技巧","link":"#demo、实战、调试技巧","children":[{"level":3,"title":"CppCMakeVcpkgTemplate","slug":"cppcmakevcpkgtemplate","link":"#cppcmakevcpkgtemplate","children":[]},{"level":3,"title":"不同IDE的按钮与命令行的对应关系","slug":"不同ide的按钮与命令行的对应关系","link":"#不同ide的按钮与命令行的对应关系","children":[]}]}]}],"git":{},"readingTime":{"minutes":7.05,"words":2115},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md","excerpt":"\\n<h2>参考资料</h2>\\n<ul>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/vcpkg/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">微软vcpkg文档</a>，<a href=\\"https://github.com/microsoft/vcpkg?tab=readme-ov-file#get-started\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">微软官网中的vcpkg说明</a>。强烈建议看这个为准，强烈建议看自己IDE里中vcpkg相关的内容\\n<ul>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-powershell\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程：通过 CMake 安装和使用包</a></li>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started-vscode?pivots=shell-powershell\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程：在 Visual Studio Code 中通过 CMake 安装和使用包</a></li>\\n<li><a href=\\"https://www.jetbrains.com/help/clion/package-management.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CLion - Vcpkg integration</a> (需要新版本CLion，23版本以上)</li>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/vcpkg/users/buildsystems/cmake-integration\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CMake 项目中的 vcpkg</a></li>\\n</ul>\\n</li>\\n<li>贡献\\n<ul>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started-adding-to-registry?pivots=shell-powershell\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">教程：将端口添加到 vcpkg 开源注册表</a></li>\\n</ul>\\n</li>\\n<li>视频\\n<ul>\\n<li><a href=\\"https://www.bilibili.com/video/BV1pd4y1x7De\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【cmake】cmake搭配vcpkg的manifest模式实现第三方库的全自动下载和配置</a> (特意找了个manifest模式的，这种资料可不多，都是经典模式)</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[{"title":"Cpp包管理工具find_package","link":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具find_package.html"},{"title":"How to build cpp","link":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.html"}],"backlink":[{"title":"Cpp包管理工具","link":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具.html"}],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md","value":{"title":"Cpp包管理工具Vcpkg","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md","outlink":["MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具find_package.md","MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.md"],"backlink":["MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具.md"]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具find_package.md","value":{"title":"Cpp包管理工具find_package","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具find_package.md","outlink":[],"backlink":[]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.md","value":{"title":"How to build cpp","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.md","outlink":[],"backlink":[]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具.md","value":{"title":"Cpp包管理工具","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具find_package.md"},{"source":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/02. 开发层/Build Tools/How to build cpp.md"},{"source":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/03. 库或包管理/BackEnd/Cpp包管理工具Vcpkg.md"}]}}}');export{A as comp,v as data};
