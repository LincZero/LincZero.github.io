import{_ as p,c as l,e as o,a as s,d as a,b as e,o as r,r as i}from"./app-Sz1B3t82.js";const u="/assets/webp-CpDXYnOR.webp",c={},k={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fcommonmark.org%2F",target:"_blank",rel:"noopener noreferrer"},d={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.github.com%2Fgfm%2F",target:"_blank",rel:"noopener noreferrer"},m={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fmarkdown-it%2Fmarkdown-it%2Fblob%2F1ad3aec2041cd2defa7e299543cc1e42184b680d%2Flib%2Frenderer.js%23L193",target:"_blank",rel:"noopener noreferrer"};function v(b,n){const t=i("ExternalLinkIcon");return r(),l("div",null,[n[18]||(n[18]=o('<h1 id="markdown-it-插件设计原则" tabindex="-1"><a class="header-anchor" href="#markdown-it-插件设计原则"><span>Markdown-it 插件设计原则</span></a></h1><p>我记得这篇的第一章是转载来的，但转载的是哪篇来着？</p><h2 id="解析原理2" tabindex="-1"><a class="header-anchor" href="#解析原理2"><span>解析原理2</span></a></h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h3><p>markdown-it是一个用来解析markdown的库，它能够将<strong>markdown代码编译为html代码</strong></p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><h4 id="架构图" tabindex="-1"><a class="header-anchor" href="#架构图"><span>架构图</span></a></h4><p><img src="'+u+'" alt="img" loading="lazy"></p><h4 id="三种模式" tabindex="-1"><a class="header-anchor" href="#三种模式"><span>三种模式</span></a></h4><p>markdown-it 提供了三种模式：</p>',10)),s("ul",null,[s("li",null,[s("a",k,[n[0]||(n[0]=a("commonmark")),e(t)]),n[1]||(n[1]=s("ul",null,[s("li",null,"对应：最严格 解析模式")],-1))]),s("li",null,[n[5]||(n[5]=a("default ")),s("ul",null,[s("li",null,[n[3]||(n[3]=a("对应：")),s("a",d,[n[2]||(n[2]=a("GFM")),e(t)]),n[4]||(n[4]=a(" 解析模式"))])])]),n[6]||(n[6]=s("li",null,[a("zero "),s("ul",null,[s("li",null,"对应：最宽松 解析模式")])],-1))]),n[19]||(n[19]=o(`<h4 id="解析-两种规则" tabindex="-1"><a class="header-anchor" href="#解析-两种规则"><span>解析 - 两种规则</span></a></h4><p>markdown-it 的解析规则 (rules) 可分为两种：</p><ul><li>块(block)： <code>MarkdownIt.block</code> 对应的是解析块规则的 <code>ParserBlock</code></li><li>内联(inline)： <code>MarkdownIt.inline</code> 对应的是解析内联规则的 <code>ParserInline</code></li></ul><h4 id="解析-顺序" tabindex="-1"><a class="header-anchor" href="#解析-顺序"><span>解析 - 顺序</span></a></h4><p>解析的过程是，首先创建一个 <strong>Core Parser</strong>，这个 Core Parser 包含一系列的缺省 <strong>rules</strong>。这些rules 将顺序执行，每个 rules 都在前面的 <strong>Tokens</strong> 的基础上，要么修改原来的 Token，要么添加新的 Token。这个 rules 的链条被称为 <strong>Core Chain</strong>。</p><h3 id="tokens" tabindex="-1"><a class="header-anchor" href="#tokens"><span>Tokens</span></a></h3><p>经过解析后我们得到的结果不是一颗 AST 树，而是一个数组，markdown-it 称之为 <strong>token 流</strong>。为什么呢？</p><p>官方解释是：</p><ul><li>Tokens 是一个简单的数组。（AST 是一个对象）</li><li>打开的标签和关闭的标签可以隔离。</li><li><strong>将 “内联容器(inline container)” 作为一种特殊的 block token 对象</strong>。 <ul><li>它有嵌套的 tokens，如粗体，斜体，文本等等。</li><li>这样做有什么好处呢？这样就可以并行处理 block 和 inline 类型的 token 了。</li></ul></li></ul><p>比如通过markdown-it我们可以把 <code># change!</code> 转化为以下内容：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;heading_open&quot;</span><span class="token punctuation">,</span>			<span class="token comment">// heading_open，#号，#</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token number">1</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>									<span class="token comment">// inline，内容，change!</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;inline&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token number">1</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;change！&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
        <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;change！&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;heading_close&quot;</span><span class="token punctuation">,</span>		<span class="token comment">// heading_close</span>
    <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;attrs&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;map&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;nesting&quot;</span><span class="token operator">:</span> <span class="token number">-1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;children&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;markup&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;info&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
    <span class="token property">&quot;block&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;hidden&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染器" tabindex="-1"><a class="header-anchor" href="#渲染器"><span>渲染器</span></a></h3><p>它会遍历所有 token，将每个 token 传递给与 token 的 type 属性同名的规则。</p><p>markdown-it 内置了<strong>九种规则</strong>：</p><ol><li>围栏</li><li>行内代码</li><li>代码块</li><li>块 html</li><li>行内 html</li><li>图片</li><li>硬换行</li><li>软换行</li><li>文本</li></ol>`,15)),s("p",null,[n[8]||(n[8]=a("type 属性不在内置规则的 token 将会被被传入 ")),s("a",m,[n[7]||(n[7]=a("renderToken")),e(t)]),n[9]||(n[9]=a(" 中当一个普通 token 处理。 ")),n[10]||(n[10]=s("code",null,"MarkdownIt.renderer.render",-1)),n[11]||(n[11]=a(" 和 ")),n[12]||(n[12]=s("code",null,"MarkdownIt.renderer.renderInline",-1)),n[13]||(n[13]=a(" 分别对应按照 ")),n[14]||(n[14]=s("strong",null,"块规则",-1)),n[15]||(n[15]=a(" 和 ")),n[16]||(n[16]=s("strong",null,"内联规则",-1)),n[17]||(n[17]=a(" 生成 HTML 代码。 而在 MarkdownIt.renderer 中有一个特殊的属性：rules，它代表着对于 token 们的渲染规则，可以被使用者更新或扩展："))]),n[20]||(n[20]=o(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;markdown-it&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">strong_open</span>  <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;&lt;b&gt;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
md<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function-variable function">strong_close</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;&lt;/b&gt;&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">renderInline</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这段代码就更新了渲染 strong_open 和 strong_close 这两种 token 的渲染规则</p><h2 id="token-vs-ast" tabindex="-1"><a class="header-anchor" href="#token-vs-ast"><span>Token vs AST</span></a></h2><p>为什么不是 AST？因为我们的任务不需要它。我们遵循 KISS 原则。 如果你愿意的话 - 你可以在没有渲染器的情况下调用解析器并转换 tokens 流到 AST。</p><p>GPT4：</p><p>makrdown-it 为什么选用更底层的tokens存储数据，与传统的AST相比要什么优点和缺点？</p><hr><p>markdown-it 使用更底层的 tokens 存储数据是为了提供一个更高的性能和更好的可扩展性。相比传统的 AST，tokens 有以下优点和缺点：</p><ul><li><p>优点</p><ol><li>性能： tokens 提供了更高的解析速度，因为它们不需要创建一个复杂的树形结构。这使得 markdown-it 在处理大量文本时更为高效。</li><li>灵活性： 由于 tokens 是线性排列的，它们可以更轻松地进行修改、移动和替换，而这在树形结构中会更为复杂。</li><li>可扩展性： tokens 结构使得 markdown-it 更易于扩展和添加新的功能。开发者可以轻松地为 markdown 添加自定义的规则和渲染器，而不用担心破坏原有的 AST 结构。</li><li>简化解析过程： 与 AST 相比，tokens 提供了一种更简单的方式来解析和生成 HTML，因为它们可以直接映射到 HTML 标签和属性。</li></ol></li><li><p>缺点</p><ol><li>可读性： 由于 tokens 是线性的，它们可能不如 AST 结构那么直观。对于开发者来说，理解和调试 tokens 可能需要更多的时间和精力。</li><li>维护成本： 与 AST 相比，tokens 结构可能在未来需要更多的维护工作。这是因为 tokens 实现了较多的低级细节，可能需要更多的修改来适应未来规范的变化。</li></ol></li></ul><p>总之，markdown-it 选择使用 tokens 进行数据存储，是为了追求更高的性能、灵活性和可扩展性。尽管 tokens 结构在可读性和维护成本方面存在一定的缺点，但在许多场景下，这些优点使得使用 tokens 成为了更好的选择。</p>`,10))])}const g=p(c,[["render",v],["__file","01. 设计原则.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/01.%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"Markdown-it 插件设计原则","lang":"zh-CN","frontmatter":{"description":"Markdown-it 插件设计原则 我记得这篇的第一章是转载来的，但转载的是哪篇来着？ 解析原理2 介绍 markdown-it是一个用来解析markdown的库，它能够将markdown代码编译为html代码 原理 架构图 img 三种模式 markdown-it 提供了三种模式： commonmark 对应：最严格 解析模式 default 对应...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/Markdown-it/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/01.%20%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Markdown-it 插件设计原则"}],["meta",{"property":"og:description","content":"Markdown-it 插件设计原则 我记得这篇的第一章是转载来的，但转载的是哪篇来着？ 解析原理2 介绍 markdown-it是一个用来解析markdown的库，它能够将markdown代码编译为html代码 原理 架构图 img 三种模式 markdown-it 提供了三种模式： commonmark 对应：最严格 解析模式 default 对应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Markdown-it 插件设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Markdown-it 插件设计原则","slug":"markdown-it-插件设计原则","link":"#markdown-it-插件设计原则","children":[{"level":2,"title":"解析原理2","slug":"解析原理2","link":"#解析原理2","children":[{"level":3,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[{"level":4,"title":"架构图","slug":"架构图","link":"#架构图","children":[]},{"level":4,"title":"三种模式","slug":"三种模式","link":"#三种模式","children":[]},{"level":4,"title":"解析 - 两种规则","slug":"解析-两种规则","link":"#解析-两种规则","children":[]},{"level":4,"title":"解析 - 顺序","slug":"解析-顺序","link":"#解析-顺序","children":[]}]},{"level":3,"title":"Tokens","slug":"tokens","link":"#tokens","children":[]},{"level":3,"title":"渲染器","slug":"渲染器","link":"#渲染器","children":[]}]},{"level":2,"title":"Token vs AST","slug":"token-vs-ast","link":"#token-vs-ast","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.19,"words":1258},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/Markdown-it/插件开发/01. 设计原则.md","excerpt":"\\n<p>我记得这篇的第一章是转载来的，但转载的是哪篇来着？</p>\\n<h2>解析原理2</h2>\\n<h3>介绍</h3>\\n<p>markdown-it是一个用来解析markdown的库，它能够将<strong>markdown代码编译为html代码</strong></p>\\n<h3>原理</h3>\\n<h4>架构图</h4>\\n<p></p>\\n<h4>三种模式</h4>\\n<p>markdown-it 提供了三种模式：</p>\\n<ul>\\n<li><a href=\\"https://links.jianshu.com/go?to=https%3A%2F%2Fcommonmark.org%2F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">commonmark</a>\\n<ul>\\n<li>对应：最严格 解析模式</li>\\n</ul>\\n</li>\\n<li>default\\n<ul>\\n<li>对应：<a href=\\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.github.com%2Fgfm%2F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GFM</a> 解析模式</li>\\n</ul>\\n</li>\\n<li>zero\\n<ul>\\n<li>对应：最宽松 解析模式</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,h as data};
