import{_ as a,c as s,e as t,o as e}from"./app-CtMeyR3O.js";const p={};function c(o,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h2 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类"><span>枚举类</span></a></h2><p>API: <code>java.lang.Enum&lt;E&gt;5.0</code></p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span> <span class="token constant">SMALL</span><span class="token punctuation">,</span> <span class="token constant">MEDIUM</span><span class="token punctuation">,</span> <span class="token constant">LARGE</span><span class="token punctuation">,</span> <span class="token constant">EXTRA_LARGE</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 其实是一个类</span>
<span class="token class-name">Size</span> s <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">;</span>

<span class="token comment">// /如果需要的话，可以在枚举类型中添加一些构造器、方法和域。当然，构造器只是在构造枚举常量的时候被调用</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Size</span>
<span class="token punctuation">{</span>
    <span class="token function">SMALL</span><span class="token punctuation">(</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MEDIUM</span><span class="token punctuation">(</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LARGE</span><span class="token punctuation">(</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EXTRA_LARGE</span><span class="token punctuation">(</span><span class="token string">&quot;XL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token keyword">private</span> <span class="token class-name">String</span> abbreviation<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token class-name">String</span> abreviation<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>abbreviation <span class="token operator">=</span> abbreviation<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> abbreviation<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在比较两个枚举类型的值时，永远不需要调用equals，而直接使用“==”就可以了</p><h3 id="本质是泛型类" tabindex="-1"><a class="header-anchor" href="#本质是泛型类"><span>本质是泛型类</span></a></h3><p>如同Class类一样，鉴于简化的考虑，Enum类省略了一个类型参数。</p><p>例如：实际上，应该将枚举类型Size扩展为<code>Enum&lt;Size&gt;</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span> s <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">;</span>
<span class="token comment">// 是下面的化简</span>
<span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Size</span><span class="token punctuation">&gt;</span></span> <span class="token operator">=</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Size</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="enum公有基类" tabindex="-1"><a class="header-anchor" href="#enum公有基类"><span>Enum公有基类</span></a></h3><p>所有的枚举类型都是Enum类的子类。它们继承了这个类的许多方法。</p><ul><li><p>toString</p><p>其中最有用的一个是toString，这个方法能够返回枚举常量名。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token constant">SMALL</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 将返回字符串“SMALL”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>valueOf</p><p>toString的逆方法是静态方法valueOf。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span> s <span class="token operator">=</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;SMALL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将s设置成Size.SMALL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>values方法（静态）</p><p>它将返回一个包含全部枚举值的数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回 [Size.SMALL，Size.MEDIUM，Size.LARGE, Size.EXTRA_LARGE]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>ordinal方法</p><p>返回enum声明中枚举常量的位置，位置从0开始计数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token constant">MEDIUM</span><span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="与c-不同" tabindex="-1"><a class="header-anchor" href="#与c-不同"><span><mark>与C++不同</mark></span></a></h3><ul><li>C/C++中 <ul><li>枚举类是一个基本类型</li></ul></li><li>Java <ul><li>枚举类是一个类</li></ul></li><li>Python <ul><li>没有枚举类，但可以用类来模拟枚举</li></ul></li></ul>`,16)]))}const i=a(p,[["render",c],["__file","04. 枚举类.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/04.%20%E6%9E%9A%E4%B8%BE%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 枚举类 API: java.lang.Enum<E>5.0 基本使用 在比较两个枚举类型的值时，永远不需要调用equals，而直接使用“==”就可以了 本质是泛型类 如同Class类一样，鉴于简化的考虑，Enum类省略了一个类型参数。 例如：实际上，应该将枚举类型Size扩展为Enum<Size> Enum公有基类 所有的枚举类型都是E...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/04.%20%E6%9E%9A%E4%B8%BE%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 枚举类 API: java.lang.Enum<E>5.0 基本使用 在比较两个枚举类型的值时，永远不需要调用equals，而直接使用“==”就可以了 本质是泛型类 如同Class类一样，鉴于简化的考虑，Enum类省略了一个类型参数。 例如：实际上，应该将枚举类型Size扩展为Enum<Size> Enum公有基类 所有的枚举类型都是E..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[{"level":2,"title":"枚举类","slug":"枚举类","link":"#枚举类","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":3,"title":"本质是泛型类","slug":"本质是泛型类","link":"#本质是泛型类","children":[]},{"level":3,"title":"Enum公有基类","slug":"enum公有基类","link":"#enum公有基类","children":[]},{"level":3,"title":"与C++不同","slug":"与c-不同","link":"#与c-不同","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.31,"words":393},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/04. 枚举类.md","excerpt":"\\n<h1>目录</h1>\\n<h2>枚举类</h2>\\n<p>API: <code>java.lang.Enum&lt;E&gt;5.0</code></p>\\n<h3>基本使用</h3>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">Size</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token constant\\">SMALL</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">MEDIUM</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">LARGE</span><span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">EXTRA_LARGE</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 其实是一个类</span>\\n<span class=\\"token class-name\\">Size</span> s <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Size</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">MEDIUM</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// /如果需要的话，可以在枚举类型中添加一些构造器、方法和域。当然，构造器只是在构造枚举常量的时候被调用</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">Size</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">SMALL</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"S\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">MEDIUM</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"M\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">LARGE</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"L\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">EXTRA_LARGE</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"XL\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        \\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> abbreviation<span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Size</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> abreviation<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>abbreviation <span class=\\"token operator\\">=</span> abbreviation<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getAbbreviation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token keyword\\">return</span> abbreviation<span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,u as data};
