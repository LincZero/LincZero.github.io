import{_ as d,e,g as o,o as r}from"./app-BapqMaOt.js";const a={};function n(c,t){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="编程语言" tabindex="-1"><a class="header-anchor" href="#编程语言"><span>编程语言</span></a></h1><h2 id="依赖于具体实现" tabindex="-1"><a class="header-anchor" href="#依赖于具体实现"><span>依赖于具体实现</span></a></h2><p>Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。</p><p>例如，Java中的int永远为32位的整数，而在C/C++中，int可能是16位整数、32位整数，也可能是编译器提供商指定的其他大小。唯一的限制只是int类型的大小不能低于short int，并且不能高于long int。</p><h2 id="语言书写风格" tabindex="-1"><a class="header-anchor" href="#语言书写风格"><span>语言书写风格</span></a></h2><h3 id="语言结构风格" tabindex="-1"><a class="header-anchor" href="#语言结构风格"><span>语言结构风格</span></a></h3><ul><li><strong>缩进风格</strong>：<code>Python</code></li><li><strong>大括号风格</strong>：<code>C</code>，<code>C++</code>，<code>C#</code>，<code>Java</code>，<code>Js</code></li></ul><h3 id="分号风格" tabindex="-1"><a class="header-anchor" href="#分号风格"><span>分号风格</span></a></h3><ul><li><strong>无分号风格</strong>：<code>Python</code>（python也可以加分号）</li><li><strong>有分号风格</strong>：<code>C</code>，<code>C++</code>，<code>Java</code></li><li><strong>可有可无</strong>：<code>JavaScript</code>（我偏向于无分号。注意选择无分号风格时，有时需要在开头加分号）</li><li><strong>有无不同</strong>：<code>Matlab</code>，有分号和无分号是不同的含义（即时输出 / 暂不输出）</li></ul><h3 id="逗号" tabindex="-1"><a class="header-anchor" href="#逗号"><span>逗号</span></a></h3><p>与C/C++不同：Java不使用逗号运算符。不过，可以在for语句的第1和第3部分中使用逗号分隔表达式列表</p><h3 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库"><span>标准库</span></a></h3><ul><li><p><code>C语言</code>：需要先引入标准库才能使用很多函数和变量，详见<a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html" target="_blank" rel="noopener noreferrer"><code>C标准库 - &lt;stdio.h&gt;（菜鸟）</code></a></p><p>比如库变量：<code>size_t、FILE、fpos_t</code></p><p>比如库函数：<code>printf、sprintf、vfprintf、vprintf、vsprintf、snprintf</code>等等</p><p>比如库宏：<code>NULL、EOF</code>等等</p></li><li><p><code>Python</code>：无需手动引入标准库，就能使用内置函数、内置变量、内置常量等</p></li><li><p><code>Js</code>：原生不支持</p></li></ul><h2 id="算法和语言" tabindex="-1"><a class="header-anchor" href="#算法和语言"><span>算法和语言</span></a></h2><h3 id="注释符号" tabindex="-1"><a class="header-anchor" href="#注释符号"><span>注释符号</span></a></h3><ul><li><code>C语言、Java、Js</code>：<code>//</code>单行注释，<code>/* */</code>多行注释</li><li><code>Python</code>：<code>#</code>单行注释，<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>包裹多行注释</li><li><code>Matlab</code>：<code>%</code>单行注释，<code>%{ }%</code>多行注释</li></ul><h3 id="输入输出" tabindex="-1"><a class="header-anchor" href="#输入输出"><span>输入输出</span></a></h3><table><thead><tr><th>编程语言</th><th>C（弱类型）</th><th>C++（弱类型 - 强一点）</th><th>Python（强类型）</th><th>Java（强类型）</th></tr></thead><tbody><tr><td>输入</td><td><code>scanf(&quot;%d&quot;,&amp;var)</code></td><td><code>cin &gt;&gt; var</code></td><td><code>var=input()</code></td><td></td></tr><tr><td>保存方式</td><td>按格式保存</td><td>智能对象</td><td>string类型</td><td></td></tr><tr><td>——</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td></tr><tr><td>输出</td><td><code>printf(&quot;&quot;)</code></td><td><code>cout &lt;&lt; &quot;&quot;</code>（智能对象）</td><td><code>print(&quot;&quot;)</code></td><td><code>System.out.println(“”)</code></td></tr><tr><td>库的依赖</td><td>依赖于标准库<code>&lt;stdio.h&gt;</code></td><td>依赖于库<code>&lt;iostream&gt;</code></td><td>使用内置函数</td><td></td></tr><tr><td>默认换行</td><td>否</td><td>否</td><td>是</td><td>是</td></tr><tr><td>智能转换</td><td>否，一般用格式化输出</td><td>是，<code>cout &lt;&lt; 1</code></td><td>是，<code>print(1)</code></td><td>是</td></tr><tr><td>拼接输出</td><td><code>#include &lt;string.h&gt;</code><br><code>strcat(&#39;1&#39;,1);</code></td><td><code>cout &lt;&lt; &#39;1&#39; &lt;&lt; 1</code></td><td><code>print(&#39;1&#39;+str(1))</code></td><td>直接<code>+</code>就行</td></tr></tbody></table><h1 id="比较总结" tabindex="-1"><a class="header-anchor" href="#比较总结"><span>比较总结</span></a></h1><table><thead><tr><th>语言</th><th>C</th><th>C++（超集）</th><th>C#</th><th>Java</th><th>Js</th><th>Ts（超集）</th><th>Python</th></tr></thead><tbody><tr><td>变量类型1</td><td>静态变量</td><td>静态变量</td><td>静态变量</td><td>静态变量</td><td><code>动态变量</code></td><td><mark>静态变量</mark></td><td><code>动态变量</code></td></tr><tr><td>预声明类型</td><td>需声明类型</td><td>需声明类型</td><td>需声明类型</td><td>需声明类型</td><td><code>仅声明作用域</code></td><td>需声明类型</td><td><code>不声明类型</code></td></tr><tr><td>变量类型2</td><td>弱类型</td><td>弱类型</td><td><code>强类型</code></td><td><code>强类型</code></td><td>弱类型</td><td>弱类型</td><td><code>强类型</code></td></tr><tr><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td></tr><tr><td>编译or解释</td><td>编译型语言</td><td>编译型语言</td><td><mark>编译解释语言</mark></td><td><mark>编译解释语言</mark></td><td><code>解释型语言</code></td><td><mark>编译解释语言</mark></td><td><code>解释型语言</code></td></tr><tr><td>可当脚本语言</td><td>否</td><td>否</td><td><code>是</code></td><td>否</td><td><code>是</code></td><td><code>是</code></td><td><code>是</code></td></tr><tr><td>函数原型声明</td><td><code>需要</code></td><td><code>需要</code></td><td></td><td></td><td>不需要</td><td>不需要</td><td>不需要</td></tr><tr><td>函数定义位置</td><td>约定定义在后</td><td>约定定义在后</td><td></td><td>约定定义在后</td><td><mark>先定义后调用<br>变量提升除外</mark></td><td><mark>先定义后调用<br>变量提升除外</mark></td><td><code>先定义后调用</code></td></tr><tr><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td></tr><tr><td>对象</td><td>不面向对象</td><td><mark>面向对象</mark></td><td></td><td>面向对象</td><td>原生不支持</td><td>面向对象</td><td>面向对象</td></tr><tr><td>模块命名空间</td><td>不支持</td><td><mark>支持</mark></td><td></td><td>支持</td><td>原生不支持</td><td></td><td>支持</td></tr><tr><td>语法</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>特色</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td><td>————</td></tr><tr><td>分号风格</td><td>有分号风格</td><td>有分号风格</td><td>有分号风格</td><td>有分号风格</td><td><mark>可有可无</mark></td><td><mark>可有可无</mark></td><td><code>无分号风格</code></td></tr><tr><td>结构风格</td><td>大括号风格</td><td>大括号风格</td><td>大括号风格</td><td>大括号风格</td><td>大括号风格</td><td>大括号风格</td><td><code>缩进风格</code></td></tr><tr><td>——————</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td><td>——————</td></tr><tr><td>命名-普通</td><td>驼峰/<strong>下划线</strong>/大驼</td><td>驼峰/<strong>下划线</strong>/大驼</td><td></td><td><strong>驼峰</strong>/下划线/大驼</td><td></td><td></td><td><strong>下划线</strong></td></tr><tr><td>命名-函数</td><td>驼峰/<strong>下划线</strong>/大驼</td><td>驼峰/<strong>下划线</strong>/大驼</td><td></td><td><strong>驼峰</strong></td><td></td><td></td><td><strong>下划线</strong></td></tr><tr><td>命名-类</td><td>结构体：大写</td><td>结构体：大写</td><td></td><td><strong>大驼峰</strong></td><td></td><td></td><td>[__]<strong>大驼峰</strong></td></tr><tr><td>命名-常量</td><td>大写+下划线</td><td>大写+下划线</td><td></td><td>大写+下划线</td><td></td><td></td><td>大写+下划线</td></tr><tr><td>命名-文件</td><td>file_</td><td></td><td></td><td>大驼峰<br>要与公共类名相同</td><td></td><td></td><td>尽量短小</td></tr></tbody></table>',22)]))}const s=d(a,[["render",n],["__file","01. 编程语言.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 编程语言 依赖于具体实现 Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。 例如，Java中的int永远为32位的整数，而在C/C++中，int可能是16位整数、32位整数，也可能是编译器提供商指定的其他大小。唯一的限制只是int类型的大小不能低于short int，并且不能高于lon...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.%20%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 编程语言 依赖于具体实现 Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。 例如，Java中的int永远为32位的整数，而在C/C++中，int可能是16位整数、32位整数，也可能是编译器提供商指定的其他大小。唯一的限制只是int类型的大小不能低于short int，并且不能高于lon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.55,"words":1066},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/01. 编程语言.md","excerpt":"\\n<h1>目录</h1>\\n<h1>编程语言</h1>\\n<h2>依赖于具体实现</h2>\\n<p>Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算都做了明确的说明。</p>\\n<p>例如，Java中的int永远为32位的整数，而在C/C++中，int可能是16位整数、32位整数，也可能是编译器提供商指定的其他大小。唯一的限制只是int类型的大小不能低于short int，并且不能高于long int。</p>\\n<h2>语言书写风格</h2>\\n<h3>语言结构风格</h3>\\n<ul>\\n<li><strong>缩进风格</strong>：<code>Python</code></li>\\n<li><strong>大括号风格</strong>：<code>C</code>，<code>C++</code>，<code>C#</code>，<code>Java</code>，<code>Js</code></li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/01. 编程语言.md","value":{"title":"01. 编程语言","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/01. 编程语言/01. 编程语言.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,h as data};
