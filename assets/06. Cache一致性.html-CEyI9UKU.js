import{_ as p,e as d,f as i,g as a,j as s,h as n,i as r,r as t,o as c}from"./app-BapqMaOt.js";const o="/assets/Image00098-3-idmysH.jpg",k="/assets/Image00002-WVuk-l6H.jpg",u="/assets/Image00008-DTiPuhmh.jpg",A={},C={class:"callout","data-callout":"note"},B={class:"callout-content"};function g(E,e){const h=t("RouteLink"),l=t("Mermaid");return c(),d("div",null,[e[10]||(e[10]=i("h1",{id:"cache一致性",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#cache一致性"},[i("span",null,"Cache一致性")])],-1)),i("p",null,[e[1]||(e[1]=s("Linc：这一章我个人有些疑问和总结，详见 ")),n(h,{to:"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E5%85%B6%E4%BB%96%E6%8A%BD%E8%B1%A1/%E7%AB%9E%E4%BA%89%E7%AE%97%E6%B3%95.html"},{default:r(()=>e[0]||(e[0]=[s("../../../../其他抽象/竞争算法.md")])),_:1})]),e[11]||(e[11]=i("h2",{id:"cache与内存交换",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#cache与内存交换"},[i("span",null,"Cache与内存交换")])],-1)),e[12]||(e[12]=i("h3",{id:"读写过程",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#读写过程"},[i("span",null,"读写过程")])],-1)),e[13]||(e[13]=i("p",null,"当我们定义了一个数据结构或者分配了一段数据缓冲区之后，在内存中就有一个地址和其相对应，然后程序就可以对它进行读写。",-1)),i("ul",null,[i("li",null,[e[2]||(e[2]=i("p",null,"对于读，首先是从内存加载到Cache，最后送到处理器内部的寄存器；",-1)),n(l,{id:"mermaid-20",code:"eJxLL0osyFDwCeIqLk2CsJ8uaXk+oe3pzBVczonJGalcT9e3PF07A8RPzUvhetrWCuQp6OoCGS+bVzxr2P18135dXTsFsGKguJ0CQgMADnItEQ=="})]),i("li",null,[e[3]||(e[3]=i("p",null,"对于写，则是从寄存器送到Cache，最后通过内部总线写回到内存。",-1)),n(l,{id:"mermaid-26",code:"eJxLL0osyFAI8uEqLk2CsJ8uaXk+oe3pzBVczonJGalcT9e3PF07A8RPzUtB8BR0de0UwCqArKdtrS+bVzxr2P18136QOJAPVMUFAPpOLRE="})])]),e[14]||(e[14]=a(`<h3 id="两个问题" tabindex="-1"><a class="header-anchor" href="#两个问题"><span>两个问题</span></a></h3><p>而这两个过程其实引出了两个问题：</p><ol><li><p>CacheLine不对齐时可能存在问题。</p><p>假如读写的某个数据结构或者数据缓冲区的起始地址不是Cache Line对齐的。</p><p>一方面，带来了额外的<strong>损耗</strong>。即使读写的数据区域的大小小于Cache Line，那么也需要占用两个Cache entry；</p><p>另一方面，可能有<strong>同步问题</strong>。假设第一个Cache Line前半部属于另外一个数据结构并且另外一个处理器核正在处理它，那么当两个核都修改了该Cache Line从而写回各自的一级Cache，准备送到内存时，如何同步数据？毕竟每个核都只修改了该Cache Line的一部分。</p></li><li><p>CacheLine对齐了，也依然存在其他问题。</p><p>如可能存在<strong>竞争冲突</strong>。有多个核同时对该段内存进行读写，当同时对内存进行写回操作时，如何解决冲突？</p></li></ol><p>接下来，我们先回答第一个问题，然后再回答第二个问题。</p><h3 id="_1-尽量cache-line对齐-避免一个数据被分到两个cacheline中" tabindex="-1"><a class="header-anchor" href="#_1-尽量cache-line对齐-避免一个数据被分到两个cacheline中"><span>(1) 尽量Cache Line对齐，避免一个数据被分到两个CacheLine中</span></a></h3><p>对于第一个问题，其实有多种方法来解决。</p><p>其中一个简单的方法，就是定义该数据结构或者数据缓冲区时就申明对齐，DPDK对很多结构体定义的时候就是如此操作的。见下例：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rte_ring_debug_stats {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_success_bulk; </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_success_objs;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_quota_bulk;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_quota_objs;  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_fail_bulk;   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> enq_fail_objs;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deq_success_bulk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deq_success_objs;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deq_fail_bulk;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint64_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> deq_fail_objs; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} __rte_cache_aligned;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 其中 \`__rte_cache_aligned\` 的定义如下所示：</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RTE_CACHE_LINE_SIZE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> __rte_cache_aligned</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	__attribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">__aligned__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">RTE_CACHE_LINE_SIZE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实现在编译器很多时候也比较智能，<strong>会在编译的时候尽量做到Cache Line对齐</strong>。</p><p>另一个解决方式，是用解决第二个问题的方法去解决它，从本质来讲，第一个问题和第二个问题都是因为<em>多个核同时操作一个Cache Line</em>进行写操作造成的。</p><h3 id="_2-避免cache-line竞争-避免一个cacheline被两核同时读写-即cache一致性问题" tabindex="-1"><a class="header-anchor" href="#_2-避免cache-line竞争-避免一个cacheline被两核同时读写-即cache一致性问题"><span>(2) 避免Cache Line竞争，避免一个CacheLine被两核同时读写，即Cache一致性问题</span></a></h3>`,11)),i("div",C,[e[9]||(e[9]=a('<div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div>',1)),i("div",B,[e[4]||(e[4]=i("p",null,null,-1)),e[5]||(e[5]=i("p",null,"什么是Cache一致性问题？",-1)),e[6]||(e[6]=i("p",null,[s("上文提到的第二个问题，即多个处理器对某个内存块同时读写，会引起冲突的问题，这也被称为"),i("strong",null,"Cache一致性问题"),s("。")],-1)),e[7]||(e[7]=i("p",null,"我来画图理解一下：",-1)),n(l,{id:"mermaid-94",code:"eJxLL0osyFAIceIqLk2CsJ0DQuOd84tS4w25nBOTM1INo5/saHi+azmYY5X4bMZ6Q6NYrtS8FCxajCBajLBoebJ/3bMpO5/s2AXiGplATIDaoKur+7St9enaGVC1UFMwhAHnMkkG"}),e[8]||(e[8]=i("p",null,[s("如图。Cache一致性说的是CPU_Core_1的一级Cache的数据和CPU_Core_2的一级Cache所对应的同一数据。"),i("br"),s(" 后面CPU的两个核将Cache写回内存时，无论直写还是回写策略，a的值都是一个可能为12也可能为24的状态")],-1))])]),e[15]||(e[15]=a('<div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>Cache一致性问题的出现原因与前提</p><ul><li><p>根本原因：多个处理器独占的Cache</p></li><li><p>直接原因：有多个，关于一致性问题的阐述，我们附加了很多限制条件，如果当中有一个或者多个条件不成立时可能就不会引发一致性的问题了。比如：</p><ol><li><p><em>多核</em>。假设只是单核处理器，不会出现问题</p></li><li><p><em>独占Cache</em>。如果Cache是所有处理器共享的不会出现问题</p><p>原因：那么当一个处理器对内存进行修改并且缓存在Cache中时，其他处理器都能看到这个变化，因而也不会产生一致性的问题（即这个问题发生才一二级Cache，三级Cache是共享的则不会发生）。在每个指令周期内，只有一个处理器核心能够通过这个Cache做内存读写操作</p></li><li><p><em>Cache写策略</em>。前面说了写策略有两种，无论回写还是直写都会有问题。</p><p>原因：回写显然。而直写的原因考虑之前的一个例子：线程A把结果写回到内存中，但是线程B只会从独占的Cache中读取这个变量（因为没人通知它内存的数据产生了变化）</p></li></ol></li></ul></div></div><p>因而，Cache一致性问题的根源是因为存在多个处理器独占的Cache，而不是多个处理器。如果多个处理器共享Cache，也就是说只有一级Cache，所有处理器都共享它，在每个指令周期内，只有一个处理器核心能够通过这个Cache做内存读写操作，那么就不会存在Cache一致性问题。</p><h2 id="一致性协议" tabindex="-1"><a class="header-anchor" href="#一致性协议"><span>一致性协议</span></a></h2><p>解决Cache一致性问题的机制有几种：</p>',4)),e[16]||(e[16]=i("div",{class:"ab-note drop-shadow"},[i("table",{class:"ab-table ab-branch-table"},[i("tbody",null,[i("tr",null,[i("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[i("div",null,[i("p",null,"低性能错误方案")])]),i("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[i("div",null,[i("p",null,"不独占Cache")])])]),i("tr",null,[i("td",{rowspan:"2",col_index:"0",class:"markdown-rendered"},[i("div",null,[i("p",null,"DPDK方法")])]),i("td",{rowspan:"2",col_index:"1",class:"markdown-rendered"},[i("div",null,[i("p",null,"避免多个数据备份、避免多个核访问同一内存地址")])]),i("td",{rowspan:"1",col_index:"3",class:"markdown-rendered"},[i("div",null,[i("p",null,"多个核同时需要一些数据结构，为每个核都单独定义一份")])])]),i("tr",null,[i("td",{rowspan:"1",col_index:"3",class:"markdown-rendered"},[i("div",null,[i("p",null,"多个核访问同一个网卡的接收队列/发送队列，为每个核都准备一个单独的接收队列/发送队列")])])]),i("tr",null,[i("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[i("div",null,[i("p",null,"基于目录的协议（Directory-based protocol）")])]),i("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[i("div",null,[i("p",null,"全局统一管理")])])]),i("tr",null,[i("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[i("div",null,[i("p",null,"总线窥探协议（Bus snooping protocol）")])]),i("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[i("div",null,[i("p",null,"利用总线进行的分布式的广播和被通知")])])]),i("tr",null,[i("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[i("div",null,[i("p",null,"Snarfing协议")])]),i("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[i("div",null,[i("p",null,"在此不作讨论")])])])])])],-1)),e[17]||(e[17]=a('<h3 id="_1-低性能错误方案-不独占cache" tabindex="-1"><a class="header-anchor" href="#_1-低性能错误方案-不独占cache"><span>(1) <s>低性能错误方案：不独占Cache</s></span></a></h3><ul><li>操作：只要所有的处理器共享Cache，那么就不会有任何问题</li><li>缺点： <ul><li>首先，既然是共享的Cache，势必容量不能小，那么就是说访问速度相比之前提到的一级、二级Cache，速度肯定几倍或者十倍以上；</li><li>其次，太慢了。每个处理器每个时钟周期内只有一个处理器才能访问Cache，那么处理器把时间都花在排队上了，这样效率太低了。</li></ul></li></ul><p>还是得用其他一致性协议</p><h3 id="_2-dpdk方法-避免多个数据备份、避免多个核访问同一内存地址" tabindex="-1"><a class="header-anchor" href="#_2-dpdk方法-避免多个数据备份、避免多个核访问同一内存地址"><span>(2) DPDK方法：避免多个数据备份、避免多个核访问同一内存地址</span></a></h3><p>（详见后面的章节）</p><h3 id="_3-基于目录协议-全局统一管理" tabindex="-1"><a class="header-anchor" href="#_3-基于目录协议-全局统一管理"><span>(3) 基于目录协议：全局统一管理</span></a></h3><ul><li>操作：需要缓存在Cache的内存块被统一存储在一个<em>目录表</em>中。目录表统一管理所有的数据，协调一致性问题。该目录表类似于一个仲裁者 <ul><li>当处理器需要把一个数据从内存中加载到自己独占的Cache中时，需要向目录表提出申请；</li><li>当一个<em>内存块被某个处理器改变之后</em>，目录表负责改变其状态，<em>更新其他处理器的Cache中的备份，或者使其他处理器的Cache的备份无效</em>。</li></ul></li></ul><h3 id="_4-总线窥探协议-利用总线进行的分布式的广播和被通知" tabindex="-1"><a class="header-anchor" href="#_4-总线窥探协议-利用总线进行的分布式的广播和被通知"><span>(4) 总线窥探协议：利用总线进行的分布式的广播和被通知</span></a></h3><p>总线窥探协议是在1983年被首先提出来</p><ul><li>操作：这个协议提出了一个窥探（snooping）的动作。即对于被处理器独占的Cache中的缓存的内容，该处理器负责监听总线 <ul><li>如果该内容被本处理器改变，则需要<em>通过总线广播</em>；</li><li>反之，如果该内容状态被其他处理器改变，本处理器的Cache<em>从总线收到了通知</em>，则需要相应改变本地备份的状态。</li></ul></li></ul><h3 id="比较、总结" tabindex="-1"><a class="header-anchor" href="#比较、总结"><span>比较、总结</span></a></h3><p>共同点：</p><p>这两种协议中，每个 Cache Block 都必须有自己的一个状态字段。而维护Cache一致性问题的关键在于维护每个Cache Block的状态域。Cache控制器通常使用一个状态机来维护这些状态域。</p><p>区别：</p><table><thead><tr><th></th><th>基于目录的协议</th><th>总线窥探协议</th></tr></thead><tbody><tr><td>操作</td><td>目录表负责更新/使无效其他处理器Cache</td><td>总线可以广播/被通知其他处理器的Cache操作</td></tr><tr><td>本质区别</td><td>全局统一管理不同Cache的状态</td><td>类似于分布式的系统<br>每个处理器能够监听其他处理器对内存的访问<br>每个处理器负责管理自己的Cache的状态，通过共享的总线同步Cache状态</td></tr><tr><td>缺点</td><td>延迟性较大</td><td></td></tr><tr><td>优点/选用</td><td>在拥有很<strong>多个处理器</strong>的系统中，它有更好的可扩展性<br>（总线或许更适用多核而非多处理器）</td><td>适用于具有广播能力的总线结构，适合小规模的多核系统</td></tr></tbody></table><h2 id="mesi协议-一种总线窥探协议" tabindex="-1"><a class="header-anchor" href="#mesi协议-一种总线窥探协议"><span>MESI协议 (一种总线窥探协议)</span></a></h2><p>接下来，我们将主要介绍总线窥探协议。</p><p>最经典的总线窥探协议Write-Once由C.V.Ravishankar和James R.Goodman于1983年提出，继而被x86、ARM和Power等架构广泛采用，衍生出著名的MESI协议，或者称为Illinois Protocol。</p><p>命名解释：</p><ul><li>MESI Protocol：这是 Cache Line 四种状态的首字母的缩写。<strong>M</strong>odified <strong>E</strong>xclusive <strong>S</strong>hared <strong>I</strong>nvalid</li><li>Illinois Protocol：之所以有这个名字，是因为该协议是由伊利诺伊州立大学研发出来的。</li></ul><h3 id="四种状态" tabindex="-1"><a class="header-anchor" href="#四种状态"><span>四种状态</span></a></h3><p>Cache中缓存的每个 Cache Line 都必须是这四种状态中的一种。详见［Ref2-2］。</p><ul><li><p><strong>修改态</strong>（<strong>M</strong>odified）</p><ul><li><p>如果该Cache Line在多个Cache中都有备份，那么<em>多个备份中只有一个备份能处于这种状态</em>，并且“dirty”标志位被置上。</p><p>拥有修改态Cache Line的Cache需要在某个合适的时候把该Cache Line写回到内存中。但是在写回之前，任何处理器对该Cache Line在内存中相对应的内存块都不能进行读操作。</p><p>Cache Line被写回到内存中之后，其状态就由修改态变为共享态。</p></li></ul></li><li><p><strong>独占态</strong>（<strong>E</strong>xclusive）</p><ul><li><p>和修改状态一样，如果该Cache Line在多个Cache中都有备份，那么<em>多个备份中只有一个备份能处于这种状态</em>，但是“dirty”标志位没有置上，因为它是和主内存内容保持一致的一份拷贝。</p><p>如果产生一个读请求，它就可以在任何时候变成共享态。</p><p>相应地，如果产生了一个写请求，它就可以在任何时候变成修改态。</p></li></ul></li><li><p><strong>共享态</strong>（<strong>S</strong>hared）</p><ul><li><p>意味着该Cache Line可能在多个Cache中都有备份，并且是相同的状态，它是和内存内容保持一致的一份拷贝。</p><p>而且可以在任何时候都变成其他三种状态。</p></li></ul></li><li><p><strong>失效态</strong>（<strong>I</strong>nvalid）</p><ul><li>该Cache Line要么已经不在Cache中，要么它的内容已经过时。一旦某个Cache Line被标记为失效，那它就被当作从来没被加载到Cache中。</li></ul></li></ul><h3 id="状态矩阵" tabindex="-1"><a class="header-anchor" href="#状态矩阵"><span>状态矩阵</span></a></h3><p>对于某个内存块，当其在两个（或多个）Cache中都保留了一个备份时，只有部分状态是允许的。</p><p>如表2-3所示，横轴和竖轴分别表示了两个Cache中某个Cache Line的状态，两个Cache Line都映射到相同的内存块。即：</p><ul><li>如果一个Cache Line设置成M态或者E态，那么另外一个Cache Line只能设置成I态；</li><li>如果一个Cache Line设置成S态，那么另外一个Cache Line可以设置成S态或者I态；</li><li>如果一个Cache Line设置成I态，那么另外一个Cache Line可以设置成任何状态。</li></ul><p>表2-3　MESI中两个Cache备份的状态矩阵</p><p><img src="'+o+'" alt="img" loading="lazy"></p><h3 id="状态迁移表" tabindex="-1"><a class="header-anchor" href="#状态迁移表"><span>状态迁移表</span></a></h3><p>那么，究竟怎样的操作才会引起Cache Line的状态迁移，从而保持Cache的一致性呢？以下所示表2-4是根据不同读写操作触发的状态迁移表。</p><p>表2-4　MESI状态迁移表</p><p><img src="'+k+`" alt="img" loading="lazy"></p><h2 id="dpdk如何保证cache一致性" tabindex="-1"><a class="header-anchor" href="#dpdk如何保证cache一致性"><span>DPDK如何保证Cache一致性</span></a></h2><p>从上面的介绍我们知道，Cache一致性这个问题的最根本原因是处理器内部不止一个核，当两个或多个核访问内存中同一个Cache行的内容时，就会因为多个Cache同时缓存了该内容引起同步的问题。</p><p>DPDK与生俱来就是为了网络平台的高性能和高吞吐，并且总是需要部署在多核的环境下。因此，DPDK必须提出好的解决方案，避免由于不必要的Cache一致性开销而造成额外的性能损失。</p><p>其实，DPDK的解决方案很简单，首先就是<em>避免多个核访问同一个内存地址或者数据结构</em>。这样，每个核尽量都避免与其他核共享数据，从而减少因为错误的数据共享（cache line false sharing）导致的Cache一致性的开销。</p><p>以下是两个DPDK为了避免Cache一致性的更具体的例子。</p><ol><li>多个核同时需要一些数据结构，为每个核都单独定义一份</li><li>多个核访问同一个网卡的接收队列/发送队列，为每个核都准备一个单独的接收队列/发送队列</li></ol><h3 id="避免cache一致性的例子1-数据结构定义" tabindex="-1"><a class="header-anchor" href="#避免cache一致性的例子1-数据结构定义"><span>避免Cache一致性的例子1 (数据结构定义)</span></a></h3><p>例子1： 数据结构定义。</p><p>DPDK的应用程序很多情况下都需要<em>多个核同时来处理事务</em>，因而，对于某些数据结构，我们给<em>每个核都单独定义一份</em>，这样每个核都只访问属于自己核的备份。</p><p>具体案例</p><blockquote><p>如下例所示：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lcore_conf {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint16_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n_rx_queue;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lcore_rx_queue </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rx_queue_list</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[MAX_RX_QUEUE_PER_LCORE];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint16_t</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tx_queue_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[RTE_MAX_ETHPORTS];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mbuf_table </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">tx_mbufs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[RTE_MAX_ETHPORTS];</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    lookup_struct_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ipv4_lookup_struct;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    lookup_struct_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ipv6_lookup_struct;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} __rte_cache_aligned;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 该结构体 Cache 行对齐，不会出现该数据结构横跨两个Cache行的问题</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// RTE_MAX_LCORE 为一个系统中最大核的数量</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// DPDK对每个核都进行编号，核n只需要访问 lcore[n]，避免了多个核访问同一个结构体</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lcore_conf </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">lcore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[RTE_MAX_LCORE] __rte_cache_aligned;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="避免cache一致性的例子2-网络端口访问" tabindex="-1"><a class="header-anchor" href="#避免cache一致性的例子2-网络端口访问"><span>避免Cache一致性的例子2 (网络端口访问)</span></a></h3><p>例子2： 对网络端口的访问。</p><p>在网络平台中，少不了访问网络设备，比如网卡。</p><p>多核情况下，有可能<em>多个核访问同一个网卡的接收队列/发送队列</em>，也就是在内存中的一段内存结构。这样，也会引起Cache一致性的问题。那么DPDK是如何解决这个问题的呢？</p><p>需要指出的是，网卡设备一般都具有多队列的能力，也就是说，一个网卡有多个接收队列和多个访问队列，其他章节会很详细讲到，本节不再赘述。</p><p>DPDK中，如果有多个核可能需要同时访问同一个网卡，那么DPDK就会<em>为每个核都准备一个单独的接收队列/发送队列</em>。这样，就避免了竞争，也避免了Cache一致性问题。</p><p>具体案例</p><blockquote><p>图2-9是四个核可能同时访问两个网络端口的图示。其中，网卡1和网卡2都有两个接收队列和四个发送队列；核0到核3每个都有自己的一个接收队列和一个发送队列。</p><p>核0从网卡1的接收队列0接收数据，可以发送到网卡1的发送队列0或者网卡2的发送队列0；<br> 同理，核3从网卡2的接收队列1接收数据，可以发送到网卡1的发送队列3或者网卡2的发送队列3。</p><p>图2-9　多核多队列收发示意图</p><p><img src="`+u+'" alt="img" loading="lazy"></p></blockquote>',52))])}const v=p(A,[["render",g],["__file","06. Cache一致性.html.vue"]]),_=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/02.%20Cache%E5%92%8C%E5%86%85%E5%AD%98/06.%20Cache%E4%B8%80%E8%87%B4%E6%80%A7.html","title":"Cache一致性","lang":"zh-CN","frontmatter":{"description":"Cache一致性 Linc：这一章我个人有些疑问和总结，详见 Cache与内存交换 读写过程 当我们定义了一个数据结构或者分配了一段数据缓冲区之后，在内存中就有一个地址和其相对应，然后程序就可以对它进行读写。 对于读，首先是从内存加载到Cache，最后送到处理器内部的寄存器； 对于写，则是从寄存器送到Cache，最后通过内部总线写回到内存。 两个问题 ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8ANFV%E7%9A%84%E5%9F%BA%E7%9F%B3_%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BADPDK%E3%80%8B/02.%20Cache%E5%92%8C%E5%86%85%E5%AD%98/06.%20Cache%E4%B8%80%E8%87%B4%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Cache一致性"}],["meta",{"property":"og:description","content":"Cache一致性 Linc：这一章我个人有些疑问和总结，详见 Cache与内存交换 读写过程 当我们定义了一个数据结构或者分配了一段数据缓冲区之后，在内存中就有一个地址和其相对应，然后程序就可以对它进行读写。 对于读，首先是从内存加载到Cache，最后送到处理器内部的寄存器； 对于写，则是从寄存器送到Cache，最后通过内部总线写回到内存。 两个问题 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cache一致性\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":13.48,"words":4044},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/06. Cache一致性.md","excerpt":"\\n<p>Linc：这一章我个人有些疑问和总结，详见 <a href=\\"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E5%85%B6%E4%BB%96%E6%8A%BD%E8%B1%A1/%E7%AB%9E%E4%BA%89%E7%AE%97%E6%B3%95.html\\" target=\\"_blank\\">../../../../其他抽象/竞争算法.md</a></p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"竞争冲突算法","link":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/竞争冲突算法.html"}],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/06. Cache一致性.md","value":{"title":"06. Cache一致性","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/06. Cache一致性.md","outlink":[],"backlink":["MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/竞争冲突算法.md"]}},{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/竞争冲突算法.md","value":{"title":"竞争冲突算法","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/竞争冲突算法.md","outlink":[],"backlink":[]}}],"links":[{"source":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/其他抽象/竞争冲突算法.md","target":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《NFV的基石_深入浅出DPDK》/02. Cache和内存/06. Cache一致性.md"}]}}}');export{v as comp,_ as data};
