import{_ as s,c as a,e,o as t}from"./app-DTo3dt_i.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="结构化编程思想" tabindex="-1"><a class="header-anchor" href="#结构化编程思想"><span>结构化编程思想</span></a></h1><h3 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块"><span>语句块</span></a></h3><ul><li>作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作）</li><li>使用：依赖缩进</li><li>局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放</li></ul><h3 id="for-in-else-循环语句" tabindex="-1"><a class="header-anchor" href="#for-in-else-循环语句"><span>for-in-else 循环语句</span></a></h3><ul><li>用法 <ul><li><code>for i in list:</code>，基于迭代器循环</li><li><code>for i in range(start,end[,step]):</code>，基于次数循环（也写成了迭代器形式）</li></ul></li><li><code>continue</code>退出本次循环，<code>break</code>退出循环 <ul><li>后面可以接<code>else</code>，循环自然结束触发而break或return不触发==【Python特有】==</li></ul></li></ul><p><mark><strong>【BUG注意】</strong></mark>（这bug我常犯）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 错误演示：for-in 删除不全</span>
socket <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">for</span> socket <span class="token keyword">in</span> self<span class="token punctuation">.</span>inputs<span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>inputs<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>socket<span class="token punctuation">)</span>
    socket<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token comment"># 或</span>
a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># 原因</span>
运行发现最后a不是<span class="token punctuation">[</span><span class="token punctuation">]</span>，该问题主要原因是删除元素后，整个列表的元素会往前移动，而i却是在最初就已经确定了，是不断增大的，所以并不能得到想要的结果。

<span class="token comment"># 解决方法</span>
a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exp-for-in-生成器表达式" tabindex="-1"><a class="header-anchor" href="#exp-for-in-生成器表达式"><span>exp-for-in 生成器表达式</span></a></h3><ul><li><p>简概</p><ul><li>有时简单的生成器可以用简洁的方式调用，就像不带中括号的链表推导式</li><li>这些表达式是为函数调用生成器而设计的</li><li>生成器表达式比完整的生成器定义更简洁，但是没有那么多变，而且通常比等价的链表推导式更容易记</li></ul></li><li><p>使用</p><ul><li><p>举例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># sum of squares</span>
<span class="token number">285</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> xvec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> yvec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>xvec<span class="token punctuation">,</span> yvec<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># dot product</span>
<span class="token number">260</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> math <span class="token keyword">import</span> pi<span class="token punctuation">,</span> sin
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> sine_table <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> sin<span class="token punctuation">(</span>x<span class="token operator">*</span>pi<span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> unique_words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>word  <span class="token keyword">for</span> line <span class="token keyword">in</span> page  <span class="token keyword">for</span> word <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> valedictorian <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>gpa<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">for</span> student <span class="token keyword">in</span> graduates<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> data <span class="token operator">=</span> <span class="token string">&#39;golf&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="while-else-循环语句" tabindex="-1"><a class="header-anchor" href="#while-else-循环语句"><span>while-else 循环语句</span></a></h3><ul><li>用法 <ul><li><code>while 条件:</code></li><li><code>continue</code>退出本次循环，<code>break</code>退出循环</li><li>后面可以接<code>else</code>，循环自然结束触发而break或return不触发==【Python特有】==</li></ul></li></ul><h3 id="if-elif-else-语句" tabindex="-1"><a class="header-anchor" href="#if-elif-else-语句"><span>if-elif-else 语句</span></a></h3><p><code>if:</code> - <code>elif:</code> - <code>else:</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> json_data<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 而不是 ==None</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to load data because authkey timeout&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch-case-语句-python中没有" tabindex="-1"><a class="header-anchor" href="#switch-case-语句-python中没有"><span>switch-case 语句（Python中没有）</span></a></h3><p>Python中没有该类语句</p><h3 id="if-else-三目运算符" tabindex="-1"><a class="header-anchor" href="#if-else-三目运算符"><span>if-else 三目运算符</span></a></h3><ul><li>使用（与C等不同） <ul><li><code>C、Java、Js</code>：<code>条件 ? true_exp : false_exp</code></li><li><code>Python</code>：<code>true_exp if 条件 else false_exp</code></li></ul></li></ul><h3 id="try-except-else-raise-异常捕捉" tabindex="-1"><a class="header-anchor" href="#try-except-else-raise-异常捕捉"><span>try-except-else &amp; raise 异常捕捉</span></a></h3><p><code>try:</code> - <code>except:</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>  <span class="token comment"># 若要保存异常并打印，需要改成：\`except Exception, e:\`</span>
    <span class="token keyword">pass</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pass" tabindex="-1"><a class="header-anchor" href="#pass"><span>pass</span></a></h3><p>pass语句表示什么都不做==【Python特有】==</p><p>因为其他软件要么就可以用分号分割结尾，要么可以用空的大括号语句块标明为空</p><p>而Python通过检查缩进，且规定某些语句必须有缩进块，这时可以用pass语句占位</p>`,27)]))}const c=s(p,[["render",o],["__file","01. 结构 - 结构化编程.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 结构化编程思想 语句块 作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作） 使用：依赖缩进 局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放 for-in-else 循环语句 用法 for i in list:，基于迭代器循环 for i in range(start,end[,...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%20-%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 结构化编程思想 语句块 作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作） 使用：依赖缩进 局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放 for-in-else 循环语句 用法 for i in list:，基于迭代器循环 for i in range(start,end[,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"结构化编程思想","slug":"结构化编程思想","link":"#结构化编程思想","children":[{"level":3,"title":"语句块","slug":"语句块","link":"#语句块","children":[]},{"level":3,"title":"for-in-else 循环语句","slug":"for-in-else-循环语句","link":"#for-in-else-循环语句","children":[]},{"level":3,"title":"exp-for-in 生成器表达式","slug":"exp-for-in-生成器表达式","link":"#exp-for-in-生成器表达式","children":[]},{"level":3,"title":"while-else 循环语句","slug":"while-else-循环语句","link":"#while-else-循环语句","children":[]},{"level":3,"title":"if-elif-else 语句","slug":"if-elif-else-语句","link":"#if-elif-else-语句","children":[]},{"level":3,"title":"switch-case 语句（Python中没有）","slug":"switch-case-语句-python中没有","link":"#switch-case-语句-python中没有","children":[]},{"level":3,"title":"if-else 三目运算符","slug":"if-else-三目运算符","link":"#if-else-三目运算符","children":[]},{"level":3,"title":"try-except-else & raise 异常捕捉","slug":"try-except-else-raise-异常捕捉","link":"#try-except-else-raise-异常捕捉","children":[]},{"level":3,"title":"pass","slug":"pass","link":"#pass","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/04. 优化/01. 结构 - 结构化编程.md","excerpt":"\\n<h1>目录</h1>\\n<h1>结构化编程思想</h1>\\n<h3>语句块</h3>\\n<ul>\\n<li>作用：允许把多条语句放到按C++句法只能放一条语句的地方（逗号运算符同样可以做到相同的工作）</li>\\n<li>使用：依赖缩进</li>\\n<li>局部变量：语句块中可定义局部变量，执行完语句块后变量将被释放</li>\\n</ul>\\n<h3>for-in-else 循环语句</h3>\\n<ul>\\n<li>用法\\n<ul>\\n<li><code>for i in list:</code>，基于迭代器循环</li>\\n<li><code>for i in range(start,end[,step]):</code>，基于次数循环（也写成了迭代器形式）</li>\\n</ul>\\n</li>\\n<li><code>continue</code>退出本次循环，<code>break</code>退出循环\\n<ul>\\n<li>后面可以接<code>else</code>，循环自然结束触发而break或return不触发==【Python特有】==</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,r as data};
