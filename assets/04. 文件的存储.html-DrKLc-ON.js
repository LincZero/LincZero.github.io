import{_ as n,e as a,g as i,o as e}from"./app-OgO1lqgf.js";const o="/assets/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-BqT3Mpjd.png",t="/assets/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E7%A3%81%E7%9B%98%E7%A2%8E%E7%89%87-DlkAG_Xa.png",s="/assets/%E9%9D%9E%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E9%93%BE%E8%A1%A8%E6%96%B9%E5%BC%8F-C7MhFeM0.png",p="/assets/%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D%E8%A1%A8-Cil34P6D.png",r="/assets/%E9%9D%9E%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F-B5NuhPdQ.png",E="/assets/%E9%93%BE%E5%BC%8F%E7%B4%A2%E5%BC%95%E5%9D%97-dsSPcXRx.png",h="/assets/%E5%A4%9A%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%9D%97-C-6GAai1.png",c="/assets/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83-7GexY6dc.png",B={};function d(g,l){return e(),a("div",null,l[0]||(l[0]=[i('<h1 id="文件的存储" tabindex="-1"><a class="header-anchor" href="#文件的存储"><span>文件的存储</span></a></h1><p>文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：</p><ul><li>连续空间存放方式</li><li>非连续空间存放方式</li></ul><p>其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。</p><p>不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。</p><h2 id="_1-连续空间存放方式" tabindex="-1"><a class="header-anchor" href="#_1-连续空间存放方式"><span>(1) 连续空间存放方式</span></a></h2><p>提前总结：</p><ul><li>实现 <ul><li>文件头里指定起始块位置和长度</li></ul></li><li>优点 <ul><li>读写效率很高</li></ul></li><li>缺点 <ul><li>删除文件，则磁盘空间碎片</li><li>追加文件，则文件长度不易扩展</li></ul></li></ul><blockquote><h5 id="方式" tabindex="-1"><a class="header-anchor" href="#方式"><span>方式</span></a></h5></blockquote><p>连续空间存放方式顾名思义，<strong>文件存放在磁盘「连续的」物理空间中</strong>。</p><p>使用连续存放的方式有一个前提，必须先知道一个文件的大小，这样文件系统才会根据文件的大小在磁盘上找到一块连续的空间分配给文件。</p><p>所以，<strong>文件头里需要指定「起始块的位置」和「长度」</strong>，有了这两个信息就可以很好的表示文件存放方式是一块连续的磁盘空间。</p><p>注意，此处说的文件头，就类似于 Linux 的 inode。</p><p><img src="'+o+'" alt="连续空间存放方式" loading="lazy"></p><blockquote><h5 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h5></blockquote><p>这种模式下，文件的数据都是紧密相连，<strong>读写效率很高</strong>，因为一次磁盘寻道就可以读出整个文件。</p><p>连续空间存放的方式虽然读写效率高，<strong>但是有「磁盘空间碎片」和「文件长度不易扩展」的缺陷。</strong></p><blockquote><h5 id="缺点-——-磁盘空间碎片" tabindex="-1"><a class="header-anchor" href="#缺点-——-磁盘空间碎片"><span>缺点 —— 磁盘空间碎片</span></a></h5></blockquote><p>如下图，如果文件 B 被删除，磁盘上就留下一块空缺，这时，如果新来的文件小于其中的一个空缺，我们就可以将其放在相应空缺里。但如果该文件的大小大于所有的空缺，但却小于空缺大小之和，则虽然磁盘上有足够的空缺，但该文件还是不能存放。当然了，我们可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。</p><p><img src="'+t+'" alt="磁盘碎片" loading="lazy"></p><blockquote><h5 id="缺点-——-文件长度扩展不方便" tabindex="-1"><a class="header-anchor" href="#缺点-——-文件长度扩展不方便"><span>缺点 —— 文件长度扩展不方便</span></a></h5></blockquote><p>另外一个缺陷是文件长度扩展不方便，例如上图中的文件 A 要想扩大一下，需要更多的磁盘空间，唯一的办法就只能是挪动的方式，前面也说了，这种方式效率是非常低的。</p><h2 id="_2-非连续空间存放方式" tabindex="-1"><a class="header-anchor" href="#_2-非连续空间存放方式"><span>(2) 非连续空间存放方式</span></a></h2><p>那么有没有更好的方式来解决上面的问题呢？答案当然有，既然连续空间存放的方式不太行，那么我们就改变存放的方式，使用非连续空间存放方式来解决这些缺陷。</p><p>非连续空间存放方式分为「链表方式」和「索引方式」。</p><h3 id="链表方式" tabindex="-1"><a class="header-anchor" href="#链表方式"><span>链表方式</span></a></h3><p>链表的方式存放是 <strong>离散的，不用连续的</strong>，于是就可以 <strong>消除磁盘碎片</strong>，可大大提高磁盘空间的利用率，同时 <strong>文件的长度可以动态扩展</strong>。根据实现的方式的不同，链表可分为「<strong>隐式链表</strong>」和「<strong>显式链接</strong>」两种形式。</p><h4 id="隐式链接" tabindex="-1"><a class="header-anchor" href="#隐式链接"><span>隐式链接</span></a></h4><p>提前总结：</p><ul><li>实现 <ul><li>文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</li></ul></li><li>优点 <ul><li>解决连续空间不足：解决磁盘空间碎片和文件长度扩展不方便的问题</li></ul></li><li>缺点 <ul><li>访问慢：无法直接访问数据块，只能通过指针顺序访问文件</li><li>空间损耗：以及数据块指针消耗了一定的存储空间</li><li>稳定差：分配的稳定性较差，系统在运行过程中由于软件或者硬件错误导致链表中的指针丢失或损坏，会导致文件数据的丢失</li></ul></li></ul><blockquote><h5 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h5></blockquote><p>文件要以「<strong>隐式链表</strong>」的方式存放的话，<strong>实现的方式是文件头要包含「第一块」和「最后一块」的位置，并且每个数据块里面留出一个指针空间，用来存放下一个数据块的位置</strong>，这样一个数据块连着一个数据块，从链头开始就可以顺着指针找到所有的数据块，所以存放的方式可以是不连续的。</p><p><img src="'+s+'" alt="隐式链表" loading="lazy"></p><blockquote><h5 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h5></blockquote><p>隐式链表的存放方式的<strong>缺点在于无法直接访问数据块，只能通过指针顺序访问文件，以及数据块指针消耗了一定的存储空间</strong>。隐式链接分配的<strong>稳定性较差</strong>，系统在运行过程中由于软件或者硬件错误<strong>导致链表中的指针丢失或损坏，会导致文件数据的丢失。</strong></p><h4 id="显式链接、文件分配表-fat" tabindex="-1"><a class="header-anchor" href="#显式链接、文件分配表-fat"><span>显式链接、文件分配表 (FAT)</span></a></h4><p>提前总结：</p><ul><li>实现 <ul><li>隐式链表基础上，取出每个磁盘块的指针，把它放在<strong>内存</strong>的一个<strong>表 (文件分配表 FAT)</strong> 中</li></ul></li><li>优点 <ul><li>解决连续空间不足：解决 产生磁盘空间碎片、文件长度不易扩展</li><li>解决隐式链表不足：内存查询更快、空间更足、稳定更好</li></ul></li><li>缺点 <ul><li>不适用于大磁盘</li></ul></li></ul><blockquote><h5 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1"><span>实现</span></a></h5></blockquote><p>如果取出每个磁盘块的指针，把它放在内存的一个表中，就可以解决上述隐式链表的两个不足。那么，这种实现方式是「<strong>显式链接</strong>」，它指<strong>把用于链接文件各数据块的指针，显式地存放在内存的一张链接表中</strong>，该表在整个磁盘仅设置一张，<strong>每个表项中存放链接指针，指向下一个数据块号</strong>。</p><p>对于显式链接的工作方式，我们举个例子，文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块 6、3、11 和 14 。利用下图中的表，可以从第 4 块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6 块开始，顺着链走到最后，也能够找出文件 B 的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1）结束。内存中的这样一个表格称为 <strong>文件分配表（<em>File Allocation Table，FAT</em>）</strong>。</p><p><img src="'+p+'" alt="显式链接" loading="lazy"></p><blockquote><h5 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h5></blockquote><p>由于查找记录的过程是在内存中进行的，因而不仅显著地 <strong>提高了检索速度</strong>，而且 <strong>大大减少了访问磁盘的次数</strong></p><blockquote><h5 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h5></blockquote><p>但也正是整个表都存放在内存中的关系，它的主要的缺点是 <strong>不适用于大磁盘</strong>。</p><p>比如，对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2 亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4 个字节，那这张表要占用 800MB 内存。很显然 FAT 方案对于大磁盘而言不太合适。</p><h3 id="索引方式" tabindex="-1"><a class="header-anchor" href="#索引方式"><span>索引方式</span></a></h3><p>提前总结：</p><ul><li>实现 <ul><li>为每个文件创建一个「索引数据块」，文件头需要包含指向「索引数据块」的指针</li><li>索引数据块里面存放的是指向文件数据块的指针列表，说白了就像书的目录一样</li></ul></li><li>优点 <ul><li>解决连续空间不足：解决 产生磁盘空间碎片、文件长度不易扩展</li><li>解决链表不足：除顺序读写，还支持随机读写</li></ul></li><li>缺点 <ul><li>空间损耗：带来的额外空间开销</li></ul></li></ul><blockquote><h5 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2"><span>实现</span></a></h5></blockquote><p>接下来，我们来看看索引的方式</p><p>链表的方式解决了连续分配的磁盘碎片和文件动态扩展的问题，但是不能有效支持直接访问（FAT除外），索引的方式可以解决这个问题。</p><p>索引的实现是为每个文件创建一个「<strong>索引数据块</strong>」，里面存放的是<strong>指向文件数据块的指针列表</strong>，说白了就像书的目录一样，要找哪个章节的内容，看目录查就可以。</p><p>另外，<strong>文件头需要包含指向「索引数据块」的指针</strong>，这样就可以通过文件头知道索引数据块的位置，再通过索引数据块里的索引信息找到对应的数据块。</p><p>创建文件时，索引块的所有指针都设为空。当首次写入第 i 块时，先从空闲空间中取得一个块，再将其地址写到索引块的第 i 个条目。</p><p><img src="'+r+'" alt="索引的方式" loading="lazy"></p><blockquote><h5 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点</span></a></h5></blockquote><p>索引的方式优点在于：</p><ul><li>文件的创建、增大、缩小很方便；</li><li>不会有碎片的问题；</li><li>支持顺序读写和随机读写；</li></ul><blockquote><h5 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点</span></a></h5></blockquote><p>由于索引数据也是存放在磁盘块的，如果文件很小，明明只需一块就可以存放的下，但还是需要额外分配一块来存放索引数据，所以缺陷之一就是存储索引带来的开销。</p><p>如果文件很大，大到一个索引数据块放不下索引信息，这时又要如何处理大文件的存放呢？我们可以通过组合的方式，来处理大文件的存。</p><h3 id="链表-索引-链式索引块" tabindex="-1"><a class="header-anchor" href="#链表-索引-链式索引块"><span>链表 + 索引（链式索引块）</span></a></h3><p>先来看看链表 + 索引的组合，这种组合称为「<strong>链式索引块</strong>」，它的实现方式是<strong>在索引数据块留出一个存放下一个索引数据块的指针</strong>，于是当一个索引数据块的索引信息用完了，就可以通过指针的方式，找到下一个索引数据块的信息。那这种方式也会出现前面提到的链表方式的问题，万一某个指针损坏了，后面的数据也就会无法读取了。</p><p><img src="'+E+'" alt="链式索引块" loading="lazy"></p><h3 id="索引-索引-多级索引块" tabindex="-1"><a class="header-anchor" href="#索引-索引-多级索引块"><span>索引 + 索引（多级索引块）</span></a></h3><p>还有另外一种组合方式是索引 + 索引的方式，这种组合称为「<strong>多级索引块</strong>」，实现方式是<strong>通过一个索引块来存放多个索引数据块</strong>，一层套一层索引，像极了俄罗斯套娃是吧。</p><p><img src="'+h+'" alt="多级索引块" loading="lazy"></p><h2 id="_3-混合存放方式-当前采用" tabindex="-1"><a class="header-anchor" href="#_3-混合存放方式-当前采用"><span>(3) 混合存放方式 (当前采用)</span></a></h2><p>那早期 Unix 文件系统 (Ext) 是组合了前面的文件存放方式的优点，如下图：</p><p>![早期 Unix 文件系统](04.%20文件的存储.assets/Unix 多级索引.png)</p><p>它是根据文件的大小，存放的方式会有所变化：</p><ul><li>如果存放文件所需的数据块小于 10 块，则采用<strong>直接查找</strong>的方式；</li><li>如果存放文件所需的数据块超过 10 块，则采用<strong>一级间接索引</strong>方式；</li><li>如果前面两种方式都不够存放大文件，则采用<strong>二级间接索引</strong>方式；</li><li>如果二级间接索引也不够存放大文件，这采用<strong>三级间接索引</strong>方式；</li></ul><p>那么，文件头（<em>Inode</em>）就需要包含 13 个指针：</p><ul><li>10 个指向数据块的指针；</li><li>第 11 个指向索引块的指针；</li><li>第 12 个指向二级索引块的指针；</li><li>第 13 个指向三级索引块的指针；</li></ul><p>所以，这种方式能很<strong>灵活地支持小文件和大文件的存放</strong>：</p><ul><li>对于小文件使用直接查找的方式可减少索引数据块的开销；</li><li>对于大文件则以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</li></ul><p>这个方案就用在了 Linux Ext 2/3 文件系统里，虽然解决大文件的存储，但是对于大文件的访问，需要大量的查询，效率比较低。</p><p>为了解决这个问题，Ext 4 做了一定的改变，具体怎么解决的，本文就不展开了。</p><h2 id="【比较】几种方式的比较" tabindex="-1"><a class="header-anchor" href="#【比较】几种方式的比较"><span>【比较】几种方式的比较</span></a></h2><p>我们先把前面提到的文件实现方式，做个比较：</p><p><img src="'+c+'" alt="img" loading="lazy"></p><p>所以一般采用混合结合方案（像前面说的Unix文件方式Ext那样）：</p><ul><li>小文件：使用直接查找的方式可减少索引数据块的开销；</li><li>大文件：以多级索引的方式来支持，所以大文件在访问数据块时需要大量查询；</li></ul><h2 id="【扩展】文件头" tabindex="-1"><a class="header-anchor" href="#【扩展】文件头"><span>【扩展】文件头</span></a></h2><p>“文件头” 的两种含义：（可能翻译/简写问题，有时这会表示两种不同的概念）</p><ul><li>文件头1：有时在语境中指文件内容中的头部部分，如压缩文件的头部可以看到真正的压缩格式而非后缀名（用十六进制打开文件可以看到）</li><li>文件头2：这章的文件头的语境，是包含起始块/长度/末尾块/索引数据块指针的东西，两者不一样</li></ul><p>根据不同文件存储方案，文件头可能包含：</p><ul><li>连续存放：起始块、长度</li><li>非连续存放 <ul><li>链表方式：起始块、末尾块</li><li>索引方式：索引数据块指针</li></ul></li></ul><p>文件头的位置：</p><ul><li>文件头应该是包含在 inode 信息里的？</li></ul>',92)]))}const A=n(B,[["render",d],["__file","04. 文件的存储.html.vue"]]),b=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/04.%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8.html","title":"文件的存储","lang":"zh-CN","frontmatter":{"description":"文件的存储 文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种： 连续空间存放方式 非连续空间存放方式 其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。 不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。 (1) 连续空间存放方式 提前总结：...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/07.%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/04.%20%E6%96%87%E4%BB%B6%E7%9A%84%E5%AD%98%E5%82%A8.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"文件的存储"}],["meta",{"property":"og:description","content":"文件的存储 文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种： 连续空间存放方式 非连续空间存放方式 其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。 不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。 (1) 连续空间存放方式 提前总结：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件的存储\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":11.66,"words":3499},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/04. 文件的存储.md","excerpt":"\\n<p>文件的数据是要存储在硬盘上面的，数据在磁盘上的存放方式，就像程序在内存中存放的方式那样，有以下两种：</p>\\n<ul>\\n<li>连续空间存放方式</li>\\n<li>非连续空间存放方式</li>\\n</ul>\\n<p>其中，非连续空间存放方式又可以分为「链表方式」和「索引方式」。</p>\\n<p>不同的存储方式，有各自的特点，重点是要分析它们的存储效率和读写性能，接下来分别对每种存储方式说一下。</p>\\n<h2>(1) 连续空间存放方式</h2>\\n<p>提前总结：</p>\\n<ul>\\n<li>实现\\n<ul>\\n<li>文件头里指定起始块位置和长度</li>\\n</ul>\\n</li>\\n<li>优点\\n<ul>\\n<li>读写效率很高</li>\\n</ul>\\n</li>\\n<li>缺点\\n<ul>\\n<li>删除文件，则磁盘空间碎片</li>\\n<li>追加文件，则文件长度不易扩展</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/04. 文件的存储.md","value":{"title":"04. 文件的存储","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/07. 文件系统/04. 文件的存储.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{A as comp,b as data};
