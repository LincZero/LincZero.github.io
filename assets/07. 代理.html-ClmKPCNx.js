import{_ as a,e as t,g as n,o}from"./app-DPU1xou8.js";const p={};function r(i,e){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="代理-proxy" tabindex="-1"><a class="header-anchor" href="#代理-proxy"><span>代理（proxy）</span></a></h1><p><mark>ReadME</mark>：是否应该学习该章？</p><p>代理是一种非常专业的构造工具，它可以用来构建系统级的工具。</p><p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p><p>这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。对于应用程序设计人员来说，遇到这种情况的机会很少。</p><p><mark><strong>如果是第一次学习这本书，或对这种高级技术不感兴趣，可以先跳过这一节</strong></mark></p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>代理（proxy），这是一种实现任意接口的对象</p>',10)]))}const s=a(p,[["render",r],["__file","07. 代理.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/07.%20%E4%BB%A3%E7%90%86.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 代理（proxy） ReadME：是否应该学习该章？ 代理是一种非常专业的构造工具，它可以用来构建系统级的工具。 利用代理可以在运行时创建一个实现了一组给定接口的新类。 这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。对于应用程序设计人员来说，遇到这种情况的机会很少。 如果是第一次学习这本书，或对这种高级技术不感兴趣，可以先...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/07.%20%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 代理（proxy） ReadME：是否应该学习该章？ 代理是一种非常专业的构造工具，它可以用来构建系统级的工具。 利用代理可以在运行时创建一个实现了一组给定接口的新类。 这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。对于应用程序设计人员来说，遇到这种情况的机会很少。 如果是第一次学习这本书，或对这种高级技术不感兴趣，可以先..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":0.56,"words":169},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/07. 代理.md","excerpt":"\\n<h1>目录</h1>\\n<h1>代理（proxy）</h1>\\n<p><mark>ReadME</mark>：是否应该学习该章？</p>\\n<p>代理是一种非常专业的构造工具，它可以用来构建系统级的工具。</p>\\n<p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p>\\n<p>这种功能只有在编译时无法确定需要实现哪个接口时才有必要使用。对于应用程序设计人员来说，遇到这种情况的机会很少。</p>\\n<p><mark><strong>如果是第一次学习这本书，或对这种高级技术不感兴趣，可以先跳过这一节</strong></mark></p>\\n<h2>概述</h2>\\n<p>代理（proxy），这是一种实现任意接口的对象</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/07. 代理.md","value":{"title":"07. 代理","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/07. 代理.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,c as data};
