import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as i,c as a,b as e,e as l,d as t,a as p}from"./app-Bmv5Ekr9.js";const c={},s=e("h1",{id:"mvc、mvp、mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvc、mvp、mvvm"},[e("span",null,"MVC、MVP、MVVM")])],-1),V=e("p",null,"参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html",-1),M=e("p",null,"复杂的软件必须有清晰合理的架构，否则无法开发和维护。",-1),m={href:"https://zh.wikipedia.org/wiki/MVC",target:"_blank",rel:"noopener noreferrer"},d=e("strong",null,"是最常见的软件架构之一",-1),h={href:"https://www.ruanyifeng.com/blog/2007/11/mvc.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://blog.nodejitsu.com/scaling-isomorphic-javascript-code/",target:"_blank",rel:"noopener noreferrer"},v=p('<h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>MVC</span></a></h2><p>[2f|#MVC]</p><ul><li><p>Model| View| Controller| Model</p></li><li><p>视图（View）：用户界面 View 传送指令到 Controller</p></li><li><p>控制器（Controller）：业务逻辑 Controller 完成业务逻辑后，要求 Model 改变状态</p></li><li><p>模型（Model）：数据保存 Model 将新的数据发送到 View，用户得到反馈</p></li></ul><h2 id="互动模式" tabindex="-1"><a class="header-anchor" href="#互动模式"><span>互动模式</span></a></h2><p>[2f|#互动模式1]</p><ul><li>User| View| Controller| Model| View</li></ul><p>[2f|#互动模式2]</p><ul><li>User| Controller| Model| View</li></ul><p>MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p><p>另一种是直接通过controller接受指令。</p><h2 id="实例-backbone" tabindex="-1"><a class="header-anchor" href="#实例-backbone"><span>实例：Backbone</span></a></h2><p>[2f|#Backhone]</p><ul><li>User --&gt; View</li><li>User --&gt; Controller --&gt; View</li><li>Controller| Model| View| Model</li></ul><p>\\1. 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</p><p>\\2. 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</p><p>\\3. Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器）</p><h2 id="mvp" tabindex="-1"><a class="header-anchor" href="#mvp"><span>MVP</span></a></h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向</p><p>[2f|#MVP]</p><ul><li>View --&gt; Presenter --&gt; View</li><li>Model --&gt; Presenter --&gt; Model</li></ul><p>\\1. 各部分之间的通信，都是双向的。</p><p>\\2. View 与 Model 不发生联系，都通过 Presenter 传递。</p><p>\\3. View 非常薄，不部署任何业务逻辑，称为&quot;被动视图&quot;（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</p><h2 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm"><span>MVVM</span></a></h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p><p>[2f|#MVVM]</p><ul><li>ViewModel| View| ViewModel| Model| ViewModel</li></ul>',27),u={href:"https://angularjs.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://emberjs.com/",target:"_blank",rel:"noopener noreferrer"};function _(w,C){const o=n("ExternalLinkIcon");return i(),a("div",null,[s,V,M,e("p",null,[e("a",m,[l("MVC"),t(o)]),l("（Model-View-Controller）"),d,l("，业界有着广泛应用。它本身"),e("a",h,[l("很容易理解"),t(o)]),l("，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。")]),e("p",null,[l("昨天晚上，我读了"),e("a",E,[l("《Scaling Isomorphic Javascript Code》"),t(o)]),l("，突然意识到，它们的区别非常简单。我用几段话，就可以说清。")]),v,e("p",null,[l("唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。"),e("a",u,[l("Angular"),t(o)]),l(" 和 "),e("a",g,[l("Ember"),t(o)]),l(" 都采用这种模式。")])])}const A=r(c,[["render",_],["__file","MVC、MVP、MVVM.html.vue"]]),P=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC%E3%80%81MVP%E3%80%81MVVM.html","title":"MVC、MVP、MVVM","lang":"zh-CN","frontmatter":{"description":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/03.%20Tools/02.%20%E7%AE%A1%E7%90%86%E5%B1%82/01.%20%E5%A4%9A%E7%B1%BB%E7%AE%A1%E7%90%86/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/MVC%E3%80%81MVP%E3%80%81MVVM.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MVC、MVP、MVVM"}],["meta",{"property":"og:description","content":"MVC、MVP、MVVM 参考：https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html 复杂的软件必须有清晰合理的架构，否则无法开发和维护。 MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MVC、MVP、MVVM\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"MVC、MVP、MVVM","slug":"mvc、mvp、mvvm","link":"#mvc、mvp、mvvm","children":[{"level":2,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":2,"title":"互动模式","slug":"互动模式","link":"#互动模式","children":[]},{"level":2,"title":"实例：Backbone","slug":"实例-backbone","link":"#实例-backbone","children":[]},{"level":2,"title":"MVP","slug":"mvp","link":"#mvp","children":[]},{"level":2,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.81,"words":544},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/03. Tools/02. 管理层/01. 多类管理/设计模式/MVC、MVP、MVVM.md","autoDesc":true}');export{A as comp,P as data};
