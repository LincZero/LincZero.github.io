import{_ as a,c as s,e as t,o as e}from"./app-DtbX-JX1.js";const p={};function l(c,n){return e(),s("div",null,n[0]||(n[0]=[t(`<h1 id="different" tabindex="-1"><a class="header-anchor" href="#different"><span>Different</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="容器类型" tabindex="-1"><a class="header-anchor" href="#容器类型"><span>容器类型</span></a></h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>数组定义</p><ul><li><p>Java可以使用两种风格的定义方式</p><ul><li><p>区别</p><ul><li>数组长度不要求是常量</li><li>创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充</li></ul></li><li><p>定义</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>					<span class="token comment">// 风格1，Java风格，将类型和变量名分开了，更受Java程序员的喜爱</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>					<span class="token comment">// 风格2，C风格</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// new</span>

<span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">// 初始化一个匿名的数组，自动计数</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 可以在不创建新变量的情况下重新初始化一个数组</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>		<span class="token comment">// 简写形式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Cpp的定义</p><ul><li><p>区别</p><ul><li>数组长度要求是常量（stl中的vector等类则支持变长）</li><li>需要<code>= {0}</code>自动填补后，所有元素才会初始化为0，否则内存随机、非常危险</li></ul></li><li><p>定义</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>int a[4] = {1,2,3};			// 一般方法 + 自动填补
int a[] = {1,2,3,4};		// 自动计数
int a {1,2,3,4};			// 大括号初始化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Python的定义</p><ul><li><p>定义</p><p>可以使用列表解析，非常方便</p></li></ul></li></ul><h2 id="高级数组" tabindex="-1"><a class="header-anchor" href="#高级数组"><span>高级数组</span></a></h2><p>普通数组的区别</p><ul><li><p>C</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// C需要一开始就确定数组的大小</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list_i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 在Java中，它允许在运行时确定数组的大小</span>
<span class="token comment">// 缺点：一旦确定了数组的大小，改变它就不太容易了</span>
<span class="token keyword">int</span> actualSize <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span>actualSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>泛型变成数组</p><ul><li><p>Java</p><ul><li><p>ArrayList：<strong>泛型变长</strong>数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// Java SE 7，“菱形”语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><p>Array：<strong>泛型定长</strong>数组</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;array&gt;
std::array &lt;typeName, N_ELEM&gt; arr;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vector等：<strong>泛型变长</strong>数组</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;vector&gt;
std::vector&lt;doubel&gt; vd(n);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>区别补充</p><ul><li>ArrayList类似于C++的vector模板。ArrayList与vector都是泛型类型。 但是C++的vector模板为了便于访问元素重载了[]运算符。由于Java没有运算符重载，所以必须调用显式的方法</li><li>此外，C++向量是值拷贝。如果a和b是两个向量，赋值操作a=b将会构造一个与b长度相同的新向量a，并将所有的元素由b拷贝到a，而在Java中，这条赋值语句的操作结果是让a和b引用同一个数组列表</li></ul></li></ul>`,11)]))}const i=a(p,[["render",l],["__file","04. 容器类型.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html","title":"Different","lang":"zh-CN","frontmatter":{"description":"Different 目录 容器类型 定义 数组定义 Java可以使用两种风格的定义方式 区别 数组长度不要求是常量 创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充 定义 Cpp的定义 区别 数组长度要求是常量（stl中的vector等类则支持变长） 需要= {0}自动填补后，...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/02.%20%E6%95%B0%E6%8D%AE_%E7%AE%97%E6%B3%95/04.%20%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Different"}],["meta",{"property":"og:description","content":"Different 目录 容器类型 定义 数组定义 Java可以使用两种风格的定义方式 区别 数组长度不要求是常量 创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充 定义 Cpp的定义 区别 数组长度要求是常量（stl中的vector等类则支持变长） 需要= {0}自动填补后，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Different\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Different","slug":"different","link":"#different","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"容器类型","slug":"容器类型","link":"#容器类型","children":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"高级数组","slug":"高级数组","link":"#高级数组","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.04,"words":613},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/02. 数据+算法/04. 容器类型.md","excerpt":"\\n<h1>目录</h1>\\n<h1>容器类型</h1>\\n<h2>定义</h2>\\n<p>数组定义</p>\\n<ul>\\n<li>\\n<p>Java可以使用两种风格的定义方式</p>\\n<ul>\\n<li>\\n<p>区别</p>\\n<ul>\\n<li>数组长度不要求是常量</li>\\n<li>创建一个数字数组时，所有元素都初始化为0；创建一个包含10个字符串的数组，所有字符串都为null，如果希望全是空串则循环填充</li>\\n</ul>\\n</li>\\n<li>\\n<p>定义</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a<span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 风格1，Java风格，将类型和变量名分开了，更受Java程序员的喜爱</span>\\n<span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 风格2，C风格</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// new</span>\\n\\n<span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// 初始化一个匿名的数组，自动计数</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 可以在不创建新变量的情况下重新初始化一个数组</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> a <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// 简写形式</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>Cpp的定义</p>\\n<ul>\\n<li>\\n<p>区别</p>\\n<ul>\\n<li>数组长度要求是常量（stl中的vector等类则支持变长）</li>\\n<li>需要<code>= {0}</code>自动填补后，所有元素才会初始化为0，否则内存随机、非常危险</li>\\n</ul>\\n</li>\\n<li>\\n<p>定义</p>\\n<div class=\\"language-c++\\" data-ext=\\"c++\\" data-title=\\"c++\\"><pre class=\\"language-c++\\"><code>int a[4] = {1,2,3};\\t\\t\\t// 一般方法 + 自动填补\\nint a[] = {1,2,3,4};\\t\\t// 自动计数\\nint a {1,2,3,4};\\t\\t\\t// 大括号初始化\\n</code></pre></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>Python的定义</p>\\n<ul>\\n<li>\\n<p>定义</p>\\n<p>可以使用列表解析，非常方便</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{i as comp,u as data};
