import{_ as l,e as s,g as a,o as e}from"./app-CuJixpuN.js";const n={};function t(r,i){return e(),s("div",null,i[0]||(i[0]=[a(`<h1 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h1><h2 id="继承-类继承" tabindex="-1"><a class="header-anchor" href="#继承-类继承"><span>继承 - 类继承</span></a></h2><h3 id="通用" tabindex="-1"><a class="header-anchor" href="#通用"><span>通用</span></a></h3><p>简概</p><ul><li>派生类功能 <ul><li>存储了基类的数据成员（派生类继承了基类的实现）</li><li>可以使用基类的方法（派生类继承了基类的接口）</li></ul></li><li>派生类应该增添的东西 <ul><li>需要自己的构造函数（构造函数不能继承，C++新增了一种能继承构造函数机制，但默认仍然不继承构造函数）</li><li>可根据需要添加额外的数据成员和成员函数</li></ul></li><li>派生类构造函数要点 <ul><li>首先创建基类对象</li><li>派生类构造函数应通过成员初始化列表将基类信息传递给基类构造函数</li><li>派生类构造函数应初始化派生类新增的数据成员</li></ul></li></ul><h3 id="基础方式" tabindex="-1"><a class="header-anchor" href="#基础方式"><span>基础方式</span></a></h3><h4 id="公有继承-public" tabindex="-1"><a class="header-anchor" href="#公有继承-public"><span>公有继承（<em>public</em>）</span></a></h4><ul><li>简概 <ul><li>基类称为公有基类，派生类称为公有派生</li></ul></li><li>访问限制 <ul><li>与客户代码的权限差不多，但不用通过对象来调用，而是当做派生类方法直接使用</li><li>当重新定义了同名方法覆盖了基类的版本，仍然可以使用作用域解析符访问基类版本的方法</li><li>而且多了一个可以访问保护成员的权限</li></ul></li><li>使用 <ul><li>声明：如<code>class A : public APerent {}</code></li><li>访问：使用作用域解析符访问基类的基类方法</li></ul></li><li>使用场景 <ul><li>最常用的方式，建立is-a关系</li></ul></li></ul><h4 id="保护继承-protected" tabindex="-1"><a class="header-anchor" href="#保护继承-protected"><span>保护继承（<em>protected</em>）</span></a></h4><ul><li><p>访问限制</p><ul><li>基类的公有成员和保护成员都将成为派生类的保护成员</li><li>即：基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们</li><li>与私有访问不同的是，该类的派生类也可以使用这些方法</li></ul></li><li><p>使用</p><ul><li>声明：如<code>class A : protected APerent {}</code></li><li>访问：使用作用域解析符访问基类的基类方法</li></ul></li><li><p>使用场景</p><ul><li>包含、私有继承，均可实现has-a关系</li></ul></li><li><p>与私有继承比较</p><ul><li>私有继承更安全，在某些情况，保护继承更方便</li></ul></li></ul><h4 id="私有继承-peivate" tabindex="-1"><a class="header-anchor" href="#私有继承-peivate"><span>私有继承（<em>peivate</em>）</span></a></h4><ul><li>访问限制 <ul><li>基类的公有成员和保护成员都将成为派生类的私有成员</li><li>即：基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们</li></ul></li><li>使用 <ul><li>声明：如<code>class A : peivate APerent {}</code>，或<code>class A : APerent {}</code>（默认为私有继承）</li><li>访问：使用作用域解析符访问基类的基类方法</li></ul></li><li>使用场景 <ul><li>包含、私有继承，均可实现has-a关系</li></ul></li></ul><h4 id="半公有半私有继承-using声明方法" tabindex="-1"><a class="header-anchor" href="#半公有半私有继承-using声明方法"><span>半公有半私有继承（using声明方法）</span></a></h4><p>在使用保护派生和私有派生时，如果要将一些基类方法在派生类外面可用，有两种方法</p><ul><li>方法一 <ul><li>定义一个使用该基类方法的派生类方法</li></ul></li><li>方法二 <ul><li>将函数调用包装在另一个函数调用中，即使用一个using声明 <ul><li>例如：<code>using std::valarray&lt;double&gt;::min;</code></li></ul></li></ul></li><li><s>方法三（老式方法，现已被摒弃，即将停止使用）</s><ul><li><s>在私有派生类中重新声明基类方法，即将方法名放在派生类的公有部分</s><ul><li><s>例如：<code>std::valarray&lt;dpouble&gt;::operator[];</code></s></li></ul></li></ul></li></ul><h4 id="【总结】各种继承方式" tabindex="-1"><a class="header-anchor" href="#【总结】各种继承方式"><span>【总结】各种继承方式</span></a></h4><p>派生类对基类的访问权限（表竖着看）</p><table><thead><tr><th>特征</th><th>公有继承</th><th>保护继承</th><th>私有继承</th></tr></thead><tbody><tr><td>基类的公有成员变成</td><td>派生类的公有成员</td><td>派生类的保护成员</td><td>派生类的私有成员</td></tr><tr><td>基类的保护成员变成</td><td>派生类的保护成员</td><td>派生类的保护成员</td><td>派生类的私有成员</td></tr><tr><td>基类的私有成员变成</td><td>无（只能通过基类接口访问）</td><td>无（只能通过基类接口访问）</td><td>无（只能通过基类接口访问）</td></tr><tr><td>能否隐式向上转换</td><td>是</td><td>是（但只能在派生类中）</td><td>否</td></tr></tbody></table><p>补充：使用基类接口时可以不使用<code>作用域解析运算符</code>，但一般使用。否则当派生类重新定义了该方法时会优先使用派生类方法</p><h3 id="多重继承" tabindex="-1"><a class="header-anchor" href="#多重继承"><span>多重继承</span></a></h3><p>详见另一篇笔记<br> 多重继承会带来额外的其他复杂性，需要一些额外的补丁，内容较多</p><h2 id="继承-方法继承" tabindex="-1"><a class="header-anchor" href="#继承-方法继承"><span>继承 - 方法继承</span></a></h2><h3 id="区分-重载、覆盖、隐藏-override、override、hide" tabindex="-1"><a class="header-anchor" href="#区分-重载、覆盖、隐藏-override、override、hide"><span>区分：重载、覆盖、隐藏（override、Override、hide）</span></a></h3><p>参考：</p><ul><li><a href="https://blog.csdn.net/jixingzhong/article/details/1858943#1404105" target="_blank" rel="noopener noreferrer">【CSDN】区分重载(overload)，覆盖(Override)和隐藏(hide)</a></li></ul><h4 id="重载-override" tabindex="-1"><a class="header-anchor" href="#重载-override"><span>重载 (override)</span></a></h4><ol><li><strong>相同的范围</strong>，即处在相同的空间中；</li><li><strong>函数名相同</strong>；</li><li><strong>参数不同</strong>，即参数个数不同，或相同位置的参数类型不同；</li><li>const成员函数可以和非const成员函数形成重载；</li><li>virtual关键字、返回类型对是否够成重载无任何影响。</li></ol><h4 id="覆盖-override-或者应该叫-重写" tabindex="-1"><a class="header-anchor" href="#覆盖-override-或者应该叫-重写"><span>覆盖 (Override) 或者应该叫 “重写”</span></a></h4><ol><li><strong>不同的范围</strong>（分别位于<strong>派生类与基类</strong>）；</li><li><strong>函数名相同</strong>；</li><li><strong>参数相同</strong>；</li><li>基类函数必须有virtual关键字。</li></ol><h4 id="隐藏-hide" tabindex="-1"><a class="header-anchor" href="#隐藏-hide"><span>隐藏 (hide)</span></a></h4><ol><li>如果<strong>派生类与基类</strong>中的<strong>函数名相同</strong>，但是<strong>参数不同</strong>。此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。</li><li>如果<strong>派生类与基类</strong>中的<strong>函数名相同</strong>，并且<strong>参数相同</strong>。但是基类函数没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。</li></ol><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h4><ul><li><p>相同范围：重载</p></li><li><p>不同范围：覆盖或隐藏（即：继承 x 多态）</p><table><thead><tr><th>函数名</th><th>参数</th><th>基类有virtual关键字</th><th>结果</th></tr></thead><tbody><tr><td>相同</td><td>不同</td><td>有或无</td><td>隐藏</td></tr><tr><td>相同</td><td>相同</td><td>无</td><td>隐藏</td></tr><tr><td>相同</td><td>相同</td><td>有</td><td><strong>覆盖</strong></td></tr></tbody></table></li></ul><h3 id="子类构造器和子类解析器" tabindex="-1"><a class="header-anchor" href="#子类构造器和子类解析器"><span>子类构造器和子类解析器</span></a></h3><p>C++</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PerentA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 一般使用成员初始化列表语法（效率高）来调用基类构造函数</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 如果省略基类的构造函数，则程序自动使用默认的基类构造函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理</p><ul><li>构造函数原理 <ul><li>先使用基类的构造函数，然后再调用派生类构造函数 <ul><li>基类构造函数负责初始化基类的数据成员，派生类构造函数主要用于初始化新增的数据成员</li><li>派生类构造函数总是调用一个基类构造函数，如不显示声明则使用基类默认构造函数</li></ul></li></ul></li><li>析构函数原理 <ul><li>与构造的顺序相反</li><li>先使用派生类的构造函数，再自动调用基类析构函数</li></ul></li></ul><h3 id="指定方法版本" tabindex="-1"><a class="header-anchor" href="#指定方法版本"><span>指定方法版本</span></a></h3><p>如果希望调用超类而不是子类的方法</p><ul><li><p>Java：使用特定的关键字super解决这个问题</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSalary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>C++：使用<code>::</code></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">父类名::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSalary</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="函数重写-重载" tabindex="-1"><a class="header-anchor" href="#函数重写-重载"><span>函数重写（<s>重载</s>）</span></a></h3><p>希望同一个方法在派生类和基类的行为不同，有两种方法</p><ul><li>派生类重新定义基类方法</li><li>虚方法</li></ul><h4 id="派生类重新定义基类方法" tabindex="-1"><a class="header-anchor" href="#派生类重新定义基类方法"><span>派生类重新定义基类方法</span></a></h4><ul><li>使用 <ul><li>重新定义函数</li></ul></li><li>调用 <ul><li>举例：<code>aPerson.fn();</code>和<code>a.fn();</code>使用的是两个不同的版本</li></ul></li><li>原理 <ul><li>程序能能使用<code>对象类型</code>来确定使用哪个版本</li></ul></li></ul><h4 id="虚方法-虚函数-virtual-method" tabindex="-1"><a class="header-anchor" href="#虚方法-虚函数-virtual-method"><span>虚方法/虚函数（<em>virtual method</em>）</span></a></h4><h5 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h5><ul><li>使用 <ul><li>在基类的原型前面加上关键字<code>virtual</code></li><li>例如：<code>virtual ~Brass(){}</code></li></ul></li><li>调用 <ul><li><code>aPerson_ref.fn();</code>和<code>a_ref.fn();</code></li><li>若只是在派生类中重新定义了方法，则都使用的是基类方法</li><li>若基类的该方法声明为虚方法，则先在派生类中寻找该方法，优先使用派生类版本</li></ul></li></ul><h5 id="效率和成本" tabindex="-1"><a class="header-anchor" href="#效率和成本"><span>效率和成本</span></a></h5><ul><li>编译与运行角度 <ul><li>虚函数使用<strong>动态联编</strong>，因此效率较低</li></ul></li><li>程序上的角度 <ul><li>每个对象都将增大，增大量为存储地址的空间（内存损耗，增大了一个地址的大小）</li><li>对于每个类，编译器都创建一个虚函数地址表（内存损耗，随着虚函数的增多数组变大，损耗增大）</li><li>每个函数调用，都执行一项额外操作——到表中查找地址（时间损耗，虚函数越多，平均查表时间越长）</li></ul></li></ul><h5 id="底层实现原理" tabindex="-1"><a class="header-anchor" href="#底层实现原理"><span><mark>底层实现原理</mark></span></a></h5><ul><li>给每个对象（无论他是否基类）添加一个隐藏成员，该隐藏成员中保存了一个指向<strong>函数地址数组</strong>的指针 <ul><li>这种数组称为<code>虚函数表</code>（<em>virtual function table</em>，vtbl）</li><li>该<code>虚函数表</code>的内容为类中<strong>所有虚函数的地址</strong>表</li></ul></li><li>再看基类和派生类的情况，例如： <ul><li>基类对象包含了一个指针，该指针指向基类中所有虚函数的地址表（虚函数表）</li><li>派生类对象包含了一个指针，该指针指向的虚函数地址表。若派生类没有提供虚函数的定义，则该虚函数表的内容与基类的虚函数表一样</li><li>如果派生类提供了虚函数的新定义，该虚函数表将保存新函数的地址。如果没有重新定义虚函数，则保留原始地址版本</li></ul></li><li>个人原理思考 <ul><li>静态联编与动态联编在调用函数时的区别 <ul><li>静态联编在调用函数时是直接知道该函数的地址的，汇编代码不需要知道类中有没有这个方法</li><li>而动态联编是不知道函数的地址</li></ul></li><li>各种语言的方案 <ul><li><strong>动态语言</strong>是要到类中找，寻找该类有没有定义这个方法</li><li>但**C++**使用虚函数表是不让在类中找有没有定义这个方法，和找这个方法的地址</li><li>让你到虚函数表中找。即减少了你寻找这个函数的范围（查表时不用去寻找所有函数，而只需要查找虚函数中的函数）</li></ul></li><li>对比C++方式和动态语言方式 <ul><li>从查表角度再来看具体的成本损耗，C++比起纯动态语言：</li><li>(1) 减少了虚函数地址表的内存大小</li><li>(2) 减少了查表的时间</li></ul></li><li>再来看：为什么不把类中的所有方法声明或默认为虚方法？ <ul><li>这是一种方便于编程员，但不利于效率的方法</li><li>使用的是动态联编，<strong>需要采用一些方法来跟踪基类指针或引用指向的对象类型</strong>。开销大、效率低</li><li>所以C++并没有这么设计（C++的理念是只有在需要的情况下使用动态联编，其他情况一律使用静态联编）</li><li>但这真的很不方便，基类和派生类都需要增加<code>virtual</code>关键字，即可能需要修改源码？！</li></ul></li></ul></li></ul><h5 id="注意项" tabindex="-1"><a class="header-anchor" href="#注意项"><span>注意项</span></a></h5><ul><li>构造函数<strong>不能</strong>是虚函数 <ul><li>因为派生类不会继承基类的构造函数，除了派生类的构造函数先调用基类构造函数外，其余情况不会使用基类的构造函数方法</li><li><mark>抬杠：如果基类定义了个与派生类同名的函数，那怎么搞？</mark></li></ul></li><li>析构函数<strong>应当</strong>是虚函数 <ul><li>这是为了确保释放派生对象时，按正确的顺序释放派生对象</li></ul></li><li>友元<strong>不能</strong>是虚函数 <ul><li>因为友元不是类成员，只有成员才能是虚函数</li><li>但如果由于这个原因引起了设计问题，可以通过让友元函数使用虚成员函数来解决</li></ul></li><li>没有重新定义 <ul><li>如果派生类没有重新定义函数，将使用基类版本</li><li>如果派生类位于派生链中，则使用最新的虚函数版本，例外的情况是基类版本是隐藏的</li></ul></li><li>重新定义将隐藏方法 <ul><li>重新定义本质并非是函数重载，而是隐藏起基类版本</li><li>即：如果重新定义的版本和原来的版本不同（如接受的参数不同），不会生成函数的两个重载版本，而且可能会出现编译器警告</li></ul></li><li>重新定义的原则（<strong>大坑</strong>） <ul><li>如果重新定义继承的方法，应确保与原来的原型完全相同<br> 但如果返回类型是基类引用或指针，则可以修改为指向派生类的引用或指针（这种例外是新出现的）<br> 这种特性被称为<code>返回类型协变</code>（<em>covariance of return type</em>）</li><li>如果基类声明被重载了，则应在派生类中重新定义所有的基类版本</li></ul></li></ul><h4 id="虚方法使用场景" tabindex="-1"><a class="header-anchor" href="#虚方法使用场景"><span>虚方法使用场景</span></a></h4><ul><li>选用建议 <ul><li>虚方法更严谨，在使用引用对象时不会，所有可能派生类重新定义的方法都应该声明为虚方法</li><li>但正如虚方法会损耗效率，应当谨慎使用</li></ul></li></ul><h3 id="q-c-只有虚函数才能被重写吗" tabindex="-1"><a class="header-anchor" href="#q-c-只有虚函数才能被重写吗"><span>Q：C++只有虚函数才能被重写吗？</span></a></h3><p>Q：引申问题：C++只有虚函数才能被重写吗？</p><p>A：如果基类没有virtual关键字，派生类定义相同函数名后，基类的函数将被隐藏</p><p>例程</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){std::cout</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;A&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::end;}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> k</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    using</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A::func;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// 载入A方法，若注释</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B b;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		// 若注释前面的using，则编译出错这一句，告诉不接受0个参数。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承-其他" tabindex="-1"><a class="header-anchor" href="#继承-其他"><span>继承 - 其他</span></a></h2><h3 id="方法的访问权限" tabindex="-1"><a class="header-anchor" href="#方法的访问权限"><span>方法的访问权限</span></a></h3><h4 id="private" tabindex="-1"><a class="header-anchor" href="#private"><span>private</span></a></h4><ul><li>略</li></ul><h4 id="protected" tabindex="-1"><a class="header-anchor" href="#protected"><span>protected</span></a></h4><ul><li>访问限制 <ul><li>能使派生类访问，而客户代码无法通过对象访问</li></ul></li><li>使用场景 <ul><li>可以放实现接口方法的辅助方法</li></ul></li><li>与私有成员比较 <ul><li>私有成员更安全，在某些情况，保护成员更方便</li></ul></li></ul><h4 id="public" tabindex="-1"><a class="header-anchor" href="#public"><span>public</span></a></h4><ul><li>略</li></ul><h2 id="【功能扩展】继承" tabindex="-1"><a class="header-anchor" href="#【功能扩展】继承"><span>【功能扩展】继承</span></a></h2><h3 id="【功能扩展】继承-x-转换" tabindex="-1"><a class="header-anchor" href="#【功能扩展】继承-x-转换"><span>【功能扩展】继承 x 转换</span></a></h3><ul><li><strong>派生类引用或指针</strong>转换为<strong>基类引用或指针</strong>被称为向上强制转换（<em>upcasting</em>）</li><li><strong>基类引用或指针</strong>转换为<strong>派生类引用或指针</strong>被称为向下强制转换（<em>downcasting</em>） <ul><li>通常向下强制转换不被允许，原因是is-a关系通常是不可逆的</li></ul></li></ul><h3 id="【功能拓展】继承-x-引用" tabindex="-1"><a class="header-anchor" href="#【功能拓展】继承-x-引用"><span>【功能拓展】继承 x 引用</span></a></h3><h4 id="基类指针-引用" tabindex="-1"><a class="header-anchor" href="#基类指针-引用"><span>基类指针/引用</span></a></h4><p>引用兼容性属性</p><ul><li>直接行为 <ul><li>基类指针可以在不显示类型转换的情况下指向派生类对象，反之不行</li><li>基类引用可以在不显示类型转换的情况下指向派生类对象，反之不行</li></ul></li><li>设计原因 <ul><li>派生类（非公有好像不行？）可以使用基类的任何公有成员（保护成员也行）</li></ul></li><li>其他行为 <ul><li>可以用派生类对象对象作参初始化基类对象 <ul><li>例如：<code>APerent aPerent(a)</code></li><li>原理：基类对象有<strong>默认复制构造函数</strong>：<code>APerent(cosnt APerent&amp;);</code></li></ul></li><li>可以让派生类对象赋值给基类对象 <ul><li>例如：<code>aPerent = a;</code></li><li>原理：基类对象有<strong>默认赋值运算符重载</strong>：<code>APerent &amp; operator = (const TalbeTennisPlayer &amp;) cosnt;</code></li></ul></li></ul></li></ul><h4 id="虚函数" tabindex="-1"><a class="header-anchor" href="#虚函数"><span>虚函数</span></a></h4><h3 id="【功能拓展】继承-x-类成员-x-new" tabindex="-1"><a class="header-anchor" href="#【功能拓展】继承-x-类成员-x-new"><span>【功能拓展】继承 x 类成员 x new</span></a></h3><p>之前说过，在类成员中使用new会引发一些问题：</p><ul><li>构造情况，需要显示调用<strong>所有的构造函数</strong>（包括默认的）都使用<code>new</code>（new方式相同）</li><li>销毁情况，需要显示调用<strong>默认的析构函数</strong> [和<strong>默认赋值运算符</strong>] 都使用<code>delete</code>（delte方式与new相同）</li><li>赋值情况，需要修改<strong>复制构造函数</strong> [和<strong>默认赋值运算符</strong>] 里的行为为深复制</li></ul><p>而在涉及到继承时，该情况更加复杂（基类和派生类都有可以有动态new的类成员）</p><ul><li><p>假如基类使用new，派生类不使用new</p><ul><li>总结：不需要特别的操作</li><li>默认构造函数：不需要额外操作，调用前会<strong>自动调用基类构造函数</strong></li><li>析构函数：不需要额外操作，调用后会<strong>自动调用基类析构函数</strong></li><li>复制构造函数 <ul><li>默认情况下使用浅赋值，但更准确的来说是<code>成员赋值</code>，成员赋值将根据数据类型采用响应的复制方式</li><li>但显示定义复制构造函数中的操作会覆盖这一行为（如在内部使用strcmp进行字符串深复制）</li><li>而复制类成员或<strong>继承的类的组件</strong>时，使用该类的复制构造函数完成的，即会<strong>自动调用基类复制构造函数</strong>处理基类继承过来的组件</li></ul></li><li>赋值运算符 <ul><li>情况同上，会<strong>自动调用基类的赋值运算符</strong>来对基类组件进行赋值</li></ul></li></ul></li><li><p>假如基类使用new，派生类也使用new</p><ul><li><p>总结：必须为派生类定义<strong>显式析构函数、复制构造函数和赋值运算符</strong>，来处理派生类的动态内存变量（基类的不用处理）</p><p>处理方法同<strong>一般类中创建new类成员</strong>的处理方法</p></li></ul></li></ul><h3 id="【功能拓展-补丁】继承-x-友元" tabindex="-1"><a class="header-anchor" href="#【功能拓展-补丁】继承-x-友元"><span>【功能拓展 补丁】继承 x 友元</span></a></h3><p>友元<strong>不是成员函数</strong>（<strong>不使用域解析运算符</strong>）、<strong>不继承</strong>，也<strong>不能使用虚函数</strong>。那么派生类如何使用基类的友元？</p><ul><li>一般通过重新定义</li><li><strong>重新定义</strong>的友元能访问派生类的成员，但不能直接访问基类的友元</li><li>需要使用强制类型转换为基类对象，再使用<strong>基类的友元</strong>函数来访问基类的成员</li></ul>`,86)]))}const d=l(n,[["render",t],["__file","02. 继承.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/03.%20%E7%B1%BB%E7%9A%84%E9%87%8D%E7%94%A8/02.%20%E7%BB%A7%E6%89%BF.html","title":"继承","lang":"zh-CN","frontmatter":{"description":"继承 继承 - 类继承 通用 简概 派生类功能 存储了基类的数据成员（派生类继承了基类的实现） 可以使用基类的方法（派生类继承了基类的接口） 派生类应该增添的东西 需要自己的构造函数（构造函数不能继承，C++新增了一种能继承构造函数机制，但默认仍然不继承构造函数） 可根据需要添加额外的数据成员和成员函数 派生类构造函数要点 首先创建基类对象 派生类构造...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/03.%20%E7%B1%BB%E7%9A%84%E9%87%8D%E7%94%A8/02.%20%E7%BB%A7%E6%89%BF.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"继承"}],["meta",{"property":"og:description","content":"继承 继承 - 类继承 通用 简概 派生类功能 存储了基类的数据成员（派生类继承了基类的实现） 可以使用基类的方法（派生类继承了基类的接口） 派生类应该增添的东西 需要自己的构造函数（构造函数不能继承，C++新增了一种能继承构造函数机制，但默认仍然不继承构造函数） 可根据需要添加额外的数据成员和成员函数 派生类构造函数要点 首先创建基类对象 派生类构造..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":14.31,"words":4294},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/03. 类的重用/02. 继承.md","excerpt":"\\n<h2>继承 - 类继承</h2>\\n<h3>通用</h3>\\n<p>简概</p>\\n<ul>\\n<li>派生类功能\\n<ul>\\n<li>存储了基类的数据成员（派生类继承了基类的实现）</li>\\n<li>可以使用基类的方法（派生类继承了基类的接口）</li>\\n</ul>\\n</li>\\n<li>派生类应该增添的东西\\n<ul>\\n<li>需要自己的构造函数（构造函数不能继承，C++新增了一种能继承构造函数机制，但默认仍然不继承构造函数）</li>\\n<li>可根据需要添加额外的数据成员和成员函数</li>\\n</ul>\\n</li>\\n<li>派生类构造函数要点\\n<ul>\\n<li>首先创建基类对象</li>\\n<li>派生类构造函数应通过成员初始化列表将基类信息传递给基类构造函数</li>\\n<li>派生类构造函数应初始化派生类新增的数据成员</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/03. 类的重用/02. 继承.md","value":{"title":"02. 继承","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/03. 类的重用/02. 继承.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{d as comp,p as data};
