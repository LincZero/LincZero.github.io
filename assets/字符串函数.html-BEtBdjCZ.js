import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-BLOlimVU.js";const p={},o=t(`<h1 id="字符串函数-fmt-strconv-内置" tabindex="-1"><a class="header-anchor" href="#字符串函数-fmt-strconv-内置"><span>字符串函数 (fmt/strconv/内置)</span></a></h1><h2 id="常用" tabindex="-1"><a class="header-anchor" href="#常用"><span>常用</span></a></h2><ul><li>部分内置函数 (无需导包)</li><li>部分strconv库</li><li>部分fmt库</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 遍历</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> str <span class="token punctuation">{</span><span class="token punctuation">}</span>		<span class="token comment">// 字符串遍历 (按字符)，方式1</span>
									<span class="token comment">// 方式2：字符串转切片再遍历</span>

<span class="token comment">// 查 (只读，遍历/统计/查找/是否)</span>
<span class="token function">len</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>							<span class="token comment">// 统计字符串长度 (按字节)</span>
<span class="token operator">...</span>									<span class="token comment">// 统计字符串长度 (按字符)</span>
strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;js &amp; golang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 统计字符串子串</span>
strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;js &amp; go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 查找子串是否在指定字符串</span>
strings<span class="token punctuation">.</span><span class="token function">lIndex</span><span class="token punctuation">(</span><span class="token string">&quot;js &amp; golang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 查找子串第一次出现的索引值，若无则-1</span>
strings<span class="token punctuation">.</span><span class="token function">EqualFold</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// 是否两字符相同 (不区分大小写)</span>
									<span class="token comment">// ^ 区分大小写直接用 \`==\`</span>
strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;http://&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ht&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 是否以指定子串开头</span>
strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;http://&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;//&quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 是否以指定子串结尾</span>

<span class="token comment">// 改 (str -&gt; str)</span>
strings<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;js &amp; go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;golang&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>	<span class="token comment">// 字符串替换。n指定希望替换几个，-1全部替换</span>
strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token string">&quot;Go&quot;</span><span class="token punctuation">)</span>				<span class="token comment">// 大小写转换</span>
strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">)</span>				<span class="token comment">// ^</span>
strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token string">&quot; go &amp; java &quot;</span><span class="token punctuation">)</span>	<span class="token comment">// 去除左右空格</span>
strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token string">&quot;~go~&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;~&quot;</span><span class="token punctuation">)</span>			<span class="token comment">// ^ 去除左右两边指定字符</span>
strings<span class="token punctuation">.</span><span class="token function">TrimLeft</span><span class="token punctuation">(</span><span class="token string">&quot;~go~&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;~&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// ^ 仅去除左边</span>
strings<span class="token punctuation">.</span><span class="token function">TrimRight</span><span class="token punctuation">(</span><span class="token string">&quot;~go~&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;~&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// ^ 仅去除右边</span>

<span class="token comment">// 改 (类型转换)</span>
n<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">&quot;66&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// str转整数 (strconv库)</span>
str <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ltoa</span><span class="token punctuation">(</span><span class="token number">6887</span><span class="token punctuation">)</span>			<span class="token comment">// 整数转str (strconv库)</span>
									<span class="token comment">// 			  更多互相转详见泛操作</span>
strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;go-py-js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span>		<span class="token comment">// str转数组，通过分割标识</span>
r <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>					<span class="token comment">// str转切片 (按字符)，可用于字符串遍历</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数值与string-互相转化" tabindex="-1"><a class="header-anchor" href="#数值与string-互相转化"><span>数值与string 互相转化</span></a></h2><p>两种方式：</p><ol><li><p>fmt包的Sprinf函数：fmt.Sprintf(&quot;%参数&quot;, 表达式)，C语言中也有一个类似的函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 数值转string</span>
<span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">19</span>
<span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;s1类型 %T，值 %v&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>	<span class="token comment">// 类型 string，值 19</span>

<span class="token comment">// string转数值</span>
该方式没办法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>strconv包的函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 数值转string</span>
<span class="token comment">// 原型</span>
<span class="token keyword">func</span> <span class="token function">FormatBool</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token function">FormatInt</span><span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span>	<span class="token comment">// base意思是几进制的</span>
<span class="token keyword">func</span> <span class="token function">FormatUint</span><span class="token punctuation">(</span>i <span class="token builtin">uint64</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token function">FormatFloat</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> fmt <span class="token builtin">byte</span><span class="token punctuation">,</span> prec<span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span>

<span class="token comment">// 使用</span>
<span class="token keyword">import</span><span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> n1 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span>
    <span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;s1类型 %T, 值 %q\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s1<span class="token punctuation">)</span>	<span class="token comment">// string &quot;18&quot;</span>
    
    <span class="token keyword">var</span> n2 <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.14</span>
    <span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;s2类型 %T, 值 %q\\n&quot;</span><span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>	<span class="token comment">// string &quot;3.14&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// string转数值</span>
<span class="token comment">// 原型</span>
<span class="token comment">// 注意：与其他语言不同：这里可以双返回值，有点类似于Python的返回元组，而C/C++就做不到这点。传统的C/C++在这方面，错误处理要么通过抛出异常，要么通过errno，不太舒服</span>
<span class="token keyword">func</span> <span class="token function">ParseBool</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">ParseInt</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">ParseUint</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> base <span class="token builtin">int</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">uint64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">ParseFloat</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> bitSize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>

<span class="token comment">// 使用</span>
<span class="token keyword">import</span><span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;ture&quot;</span>
	<span class="token keyword">var</span> b1 <span class="token builtin">bool</span>
    b1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>				<span class="token comment">// 这里可以忽略第二个返回值，即忽略错误</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;b类型 %T, 值 %v\\n&quot;</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span>	  <span class="token comment">// bool true</span>
    
    <span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;19&quot;</span>
	<span class="token keyword">var</span> n1 <span class="token builtin">int64</span>
    n1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>		<span class="token comment">// 这里可以忽略第二个返回值，即忽略错误</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;n1类型 %T, 值 %v\\n&quot;</span><span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>	  <span class="token comment">// int64 19</span>
    
    <span class="token keyword">var</span> s3 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;go&quot;</span>
	<span class="token keyword">var</span> b3 <span class="token builtin">bool</span>
    b3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span>				<span class="token comment">// 这里是错误的，但忽略了错误。此时没转化成功，b3会被赋予默认值，即零值</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;b类型 %T, 值 %v\\n&quot;</span><span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>	  <span class="token comment">// bool false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在数值转string中，似乎fmt.Sprintf的方式会简单一些</p>`,8),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","字符串函数.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/07_%E6%A8%A1%E5%9D%97%E5%BA%93/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html","title":"字符串函数 (fmt/strconv/内置)","lang":"zh-CN","frontmatter":{"description":"字符串函数 (fmt/strconv/内置) 常用 部分内置函数 (无需导包) 部分strconv库 部分fmt库 数值与string 互相转化 两种方式： fmt包的Sprinf函数：fmt.Sprintf(\\"%参数\\", 表达式)，C语言中也有一个类似的函数 strconv包的函数 在数值转string中，似乎fmt.Sprintf的方式会简单一些","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Go/07_%E6%A8%A1%E5%9D%97%E5%BA%93/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"字符串函数 (fmt/strconv/内置)"}],["meta",{"property":"og:description","content":"字符串函数 (fmt/strconv/内置) 常用 部分内置函数 (无需导包) 部分strconv库 部分fmt库 数值与string 互相转化 两种方式： fmt包的Sprinf函数：fmt.Sprintf(\\"%参数\\", 表达式)，C语言中也有一个类似的函数 strconv包的函数 在数值转string中，似乎fmt.Sprintf的方式会简单一些"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串函数 (fmt/strconv/内置)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"字符串函数 (fmt/strconv/内置)","slug":"字符串函数-fmt-strconv-内置","link":"#字符串函数-fmt-strconv-内置","children":[{"level":2,"title":"常用","slug":"常用","link":"#常用","children":[]},{"level":2,"title":"数值与string 互相转化","slug":"数值与string-互相转化","link":"#数值与string-互相转化","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.77,"words":831},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Go/07_模块库/字符串函数.md","autoDesc":true}');export{k as comp,m as data};
