import{_ as t,e as i,g as s,o as e}from"./app-HvNDXJEG.js";const n="/assets/image-csHP7Puq.webp",r="/assets/image-1-Dx9kEez_.webp",l="/assets/image%201-6Ibf8N0O.webp",o="/assets/Pasted%20image%2020241002002751-CHRH5r03.png",d="/assets/image-1%201-BgfSEYob.webp",c="/assets/image%202-6YPvcvCX.webp",p="/assets/Pasted%20image%2020241002003105-BXc5LL_V.png",h="/assets/Pasted%20image%2020241002005547-CoFWIsdg.png",g="/assets/Pasted%20image%2020241002005155-D8e4NoF4.png",k="/assets/Pasted%20image%2020241002005208-BttzKVls.png",m={};function u(v,a){return e(),i("div",null,a[0]||(a[0]=[s(`<h1 id="vagrant介绍" tabindex="-1"><a class="header-anchor" href="#vagrant介绍"><span>Vagrant介绍</span></a></h1><h2 id="创建虚拟机只要三步" tabindex="-1"><a class="header-anchor" href="#创建虚拟机只要三步"><span>创建虚拟机只要三步</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. 拉取镜像，拉取Box，生成vagrantfile配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vagrant</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hashicorp/bionic64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 创建虚拟机</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vagrant</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3. 连接虚拟机</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vagrant</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ssh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟机类型" tabindex="-1"><a class="header-anchor" href="#虚拟机类型"><span>虚拟机类型</span></a></h2><h3 id="单机-docker" tabindex="-1"><a class="header-anchor" href="#单机-docker"><span>单机 (Docker)</span></a></h3><p><img src="`+n+'" alt="" loading="lazy"></p><h3 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式"><span>分布式</span></a></h3><p><img src="'+r+'" alt="" loading="lazy"></p><h3 id="共有云" tabindex="-1"><a class="header-anchor" href="#共有云"><span>共有云</span></a></h3><p><img src="'+l+'" alt="" loading="lazy"></p><h3 id="本地虚拟机" tabindex="-1"><a class="header-anchor" href="#本地虚拟机"><span>本地虚拟机</span></a></h3><p><img src="'+o+'" alt="" loading="lazy"></p><h4 id="iso安装" tabindex="-1"><a class="header-anchor" href="#iso安装"><span>ISO安装</span></a></h4><p><strong>几十分钟</strong></p><p><img src="'+d+'" alt="" loading="lazy"></p><h4 id="vagrant" tabindex="-1"><a class="header-anchor" href="#vagrant"><span>Vagrant</span></a></h4><p><strong>几分钟</strong> (比ISO方式快得多)</p><p><img src="'+c+'" alt="" loading="lazy"></p><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h2><h3 id="docker-vs-vagrant" tabindex="-1"><a class="header-anchor" href="#docker-vs-vagrant"><span>Docker VS Vagrant</span></a></h3><p>有了Docker，为什么还要使用Vagrant？</p><p>这两很相似，Vagrant早于Docker，Docker很多东西也借鉴了Vargrant</p><h4 id="组件拆分" tabindex="-1"><a class="header-anchor" href="#组件拆分"><span>组件拆分</span></a></h4><p><img src="'+p+'" alt="" loading="lazy"></p><p>相同点：</p><p>上图中可以看出 docker和vagrant 的一些术语之间的对应关系：</p><table><thead><tr><th>描述</th><th>docker中的术语</th><th>vagrant中的术语</th></tr></thead><tbody><tr><td></td><td>docker compose (组件)</td><td>vagrant</td></tr><tr><td></td><td>docker (引擎)</td><td>vagrant hypervisor (程序)</td></tr><tr><td>镜像</td><td>docker image</td><td>vagrant box</td></tr><tr><td>容器/虚拟机</td><td>docker container</td><td>vagrant virtual machine</td></tr><tr><td>不同点：</td><td></td><td></td></tr></tbody></table><p>Vagrant跟Docker有所不同，并不提供虚拟化的平台，它需要借助外部的hppervisor (虚拟化引擎)。比如它可以使用 VirtualBox，VMWare、Hyper-V 等虚拟化平台去创建虚拟机</p><h4 id="创建流程" tabindex="-1"><a class="header-anchor" href="#创建流程"><span>创建流程</span></a></h4><p>(灰色字体是对应docker的部分)</p><p><img src="'+h+'" alt="" loading="lazy"></p><p>相同点：</p><p>上图中可以看出 docker和vagrant 的一些术语之间的对应关系：</p><table><thead><tr><th>描述</th><th>docker中的术语</th><th>vagrant中的术语</th></tr></thead><tbody><tr><td>镜像仓库网站</td><td>docker hub</td><td>vagrant cloud</td></tr><tr><td>镜像创建文件</td><td>docker-compose.yml</td><td>Vagrantfile</td></tr><tr><td>镜像</td><td>docker image</td><td>vagrant box</td></tr><tr><td>创建虚拟机指令</td><td><code>docker compose up</code></td><td><code>vagrant up</code></td></tr><tr><td>容器/虚拟机</td><td>docker container</td><td>vagrant virtual machine</td></tr><tr><td>创建镜像指令</td><td><code>docker pull</code></td><td><code>vagrant init</code></td></tr></tbody></table><h3 id="dockerfile-vs-docker-compose-yml-gpt" tabindex="-1"><a class="header-anchor" href="#dockerfile-vs-docker-compose-yml-gpt"><span>Dockerfile VS docker-compose.yml (GPT)</span></a></h3><p>不过话说怎么感觉docker命令有点怪，我用的时候是这样的吧：</p><ul><li>docker-compose.yml -&gt; dockerfile</li><li>docker compose up -&gt; docker run</li></ul><p>gpt问了下，说这些是不同的：</p><ol><li><strong>Dockerfile</strong>：</li></ol><ul><li>这是一个文本文件，包含了创建 Docker 镜像所需的指令序列。每个指令构建镜像的一层</li><li>作用：这些指令可以用来设置工作目录、复制文件、安装依赖包等</li></ul><ol start="2"><li><strong>docker-compose.yml</strong>：</li></ol><ul><li>这是一个 YAML 文件，用来定义和配置应用的一个或多个服务。</li><li>作用：该文件允许你用文件来配置应用的服务，并用一条命令来创建和启动完整的应用堆栈。</li></ul><ol start="3"><li><strong>docker compose up</strong>：</li></ol><ul><li>这个命令用来启动并运行整个 Docker Compose 应用。它会根据 <code>docker-compose.yml</code> 文件中定义的服务来创建、启动并链接容器。</li></ul><ol start="4"><li><strong>docker run</strong>：</li></ol><ul><li>这个命令用来从 Docker 镜像创建一个新的容器，并运行一个命令。它通常直接指定要使用的镜像，并可以附加一些选项来配置新容器的行为。</li></ul><p>比较一下：</p><p>Dockerfile vs docker-compose.yml</p><ul><li>Dockerfile <ul><li><strong>用途</strong>：描述如何<em>构建一个 Docker 镜像</em>。</li><li><strong>内容</strong>：一系列构建步骤，比如安装软件包、复制文件、设置环境变量等。</li><li><strong>使用场景</strong>：当你需要从基础镜像开始，逐步定制一个最终的镜像时。</li><li><strong>示例命令</strong>：<code>docker build -t my-image .</code></li></ul></li><li>docker-compose.yml <ul><li><strong>用途</strong>：定义和配置<em>由多个容器组成的应用服务</em>。</li><li><strong>内容</strong>：包含服务、网络、卷和其他组件的配置信息。</li><li><strong>使用场景</strong>：当你的应用不仅仅是一个容器，而是需要多个相互协作的容器（如 web 服务器、数据库、缓存服务器等）。</li><li><strong>示例命令</strong>：<code>docker compose up</code></li></ul></li></ul><p>docker run vs docker compose up</p><ul><li>docker run <ul><li><strong>用途</strong>：基于一个已有的镜像<em>启动一个新的容器</em>。</li><li><strong>使用场景</strong>：当你只需要运行一个单独的容器，且这个容器不需要与其他容器交互。</li><li><strong>示例命令</strong>：<code>docker run -d --name my-container -p 8080:80 nginx</code></li></ul></li><li>docker compose up <ul><li><strong>用途</strong>：根据 <code>docker-compose.yml</code> 文件中的配置<em>启动并连接所有服务</em>。</li><li><strong>使用场景</strong>：当你的应用程序由多个服务组成，需要一起管理（启动、停止、重建等）。</li><li><strong>示例命令</strong>：<code>docker compose up</code></li></ul></li></ul><p>为什么你可能没有使用过 Docker Compose</p><p>如果你一直在处理相对简单的情况，比如<em>只有一个容器</em>的应用程序，或者你构建的系统不需要多个相互依赖的服务，那么你可能主要使用了 <code>Dockerfile</code> 和 <code>docker run</code> 命令来管理你的容器。对于这类情况，Docker Compose 可能不是必需的，因为你可以在没有它的帮助下完成任务。<br> _<br> 然而，随着应用程序变得越来越复杂，涉及到多个服务时，手动管理每个容器和服务之间的关系就会变得非常困难。这时候，Docker Compose 就成为了一个有用的工具，因为它可以帮助你以声明式的方式定义和管理整个应用程序的架构。</p><h2 id="安装-vagrant、virtualbox" tabindex="-1"><a class="header-anchor" href="#安装-vagrant、virtualbox"><span>安装 (Vagrant、VirtualBox)</span></a></h2><p><img src="'+g+'" alt="" loading="lazy"></p><p><img src="'+k+'" alt="" loading="lazy"></p>',56)]))}const y=t(m,[["render",u],["__file","01. Vagrant介绍.html.vue"]]),A=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/Vagrant/%E3%80%8AVagrant%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E3%80%8B/01.%20Vagrant%E4%BB%8B%E7%BB%8D.html","title":"Vagrant介绍","lang":"zh-CN","frontmatter":{"description":"Vagrant介绍 创建虚拟机只要三步 虚拟机类型 单机 (Docker) 分布式 共有云 本地虚拟机 ISO安装 几十分钟 Vagrant 几分钟 (比ISO方式快得多) 比较 Docker VS Vagrant 有了Docker，为什么还要使用Vagrant？ 这两很相似，Vagrant早于Docker，Docker很多东西也借鉴了Vargrant...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Virtual/%E8%99%9A%E6%8B%9F%E6%9C%BA/Vagrant/%E3%80%8AVagrant%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E3%80%8B/01.%20Vagrant%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Vagrant介绍"}],["meta",{"property":"og:description","content":"Vagrant介绍 创建虚拟机只要三步 虚拟机类型 单机 (Docker) 分布式 共有云 本地虚拟机 ISO安装 几十分钟 Vagrant 几分钟 (比ISO方式快得多) 比较 Docker VS Vagrant 有了Docker，为什么还要使用Vagrant？ 这两很相似，Vagrant早于Docker，Docker很多东西也借鉴了Vargrant..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vagrant介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":3.95,"words":1186},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Vagrant/《Vagrant快速入门》/01. Vagrant介绍.md","excerpt":"\\n<h2>创建虚拟机只要三步</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 1. 拉取镜像，拉取Box，生成vagrantfile配置文件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">vagrant</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> init</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> hashicorp/bionic64</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 2. 创建虚拟机</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">vagrant</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> up</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 3. 连接虚拟机</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">vagrant</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> ssh</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Vagrant/《Vagrant快速入门》/01. Vagrant介绍.md","value":{"title":"01. Vagrant介绍","path":"MdNote_Public/01. DesignAndDevelop/Virtual/虚拟机/Vagrant/《Vagrant快速入门》/01. Vagrant介绍.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{y as comp,A as data};
