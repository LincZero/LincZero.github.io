import{_ as s,c as a,e,o as t}from"./app-uEZYZ2I0.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="rust结构化编程" tabindex="-1"><a class="header-anchor" href="#rust结构化编程"><span>Rust结构化编程</span></a></h1><h2 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span>条件判断</span></a></h2><table><thead><tr><th>条件判断语句</th><th>说明</th></tr></thead><tbody><tr><td>if 语句</td><td>if 语句用于模拟现实生活中的 如果…就…</td></tr><tr><td>if...else 语句</td><td>if...else 语句用于模拟 如果…就…否则…</td></tr><tr><td>else...if 和嵌套if 语句</td><td>嵌套if 语句用于模拟 如果…就…如果…就…</td></tr><tr><td>match 语句</td><td>match 语句用于模拟现实生活中的 老师点名 或 银行叫</td></tr></tbody></table><h3 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>if 语句</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">if</span> 条件表达式 <span class="token punctuation">{</span>
    <span class="token comment">// 条件表达式为true时要执行的逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> total<span class="token punctuation">:</span><span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">666.00</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> total <span class="token operator">&gt;</span> <span class="token number">500.00</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;打8折,{}&quot;</span><span class="token punctuation">,</span>total<span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出 打8折,532.8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-语句"><span>if …else 语句</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">if</span> 条件表达式 <span class="token punctuation">{</span>
   <span class="token comment">// 如果 条件表达式 为真则执行这里的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token comment">// 如果 条件表达式 为假则执行这里的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> total<span class="token punctuation">:</span><span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">166.00</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> total <span class="token operator">&gt;</span> <span class="token number">500.00</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;打8折,{}&quot;</span><span class="token punctuation">,</span> total<span class="token operator">*</span><span class="token number">0.8</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;无折扣优惠,{}&quot;</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
输出 无折扣优惠<span class="token punctuation">,</span><span class="token number">166</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if-else-if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-if-else-语句"><span>if…else if… else 语句</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">if</span> 条件表达式<span class="token number">1</span> <span class="token punctuation">{</span>
   <span class="token comment">// 当 条件表达式1 为 true 时要执行的语句</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> 条件表达式<span class="token number">2</span> <span class="token punctuation">{</span>
   <span class="token comment">// 当 条件表达式2 为 true 时要执行的语句</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token comment">// 如果 条件表达式1 和 条件表达式2 都为 false 时要执行的语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> total<span class="token punctuation">:</span><span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">366.00</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> total <span class="token operator">&gt;</span> <span class="token number">200.00</span> <span class="token operator">&amp;&amp;</span> total <span class="token operator">&lt;</span> <span class="token number">500.00</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;打9折,{}&quot;</span><span class="token punctuation">,</span>total<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> total <span class="token operator">&gt;</span> <span class="token number">500.00</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;打8折,{}&quot;</span><span class="token punctuation">,</span>total<span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;无折扣优惠,{}&quot;</span><span class="token punctuation">,</span>total<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出 打9折,329.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match-语句" tabindex="-1"><a class="header-anchor" href="#match-语句"><span>match 语句</span></a></h3><p>Rust 中的 match 语句有返回值，它把 匹配值 后执行的最后一条语句的结果当作返回值。</p><p>语法</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">match</span> variable_expression <span class="token punctuation">{</span>
   constant_expr1 <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 语句;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   constant_expr2 <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 语句;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   _ <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 默认</span>
      <span class="token comment">// 其它语句</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">&quot;10010&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> choose <span class="token operator">=</span> <span class="token keyword">match</span> code <span class="token punctuation">{</span>
   <span class="token string">&quot;10010&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;联通&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;10086&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;移动&quot;</span><span class="token punctuation">,</span>
   _ <span class="token operator">=&gt;</span> <span class="token string">&quot;Unknown&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;选择 {}&quot;</span><span class="token punctuation">,</span> choose<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 选择 联通</span>

<span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">&quot;80010&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> choose <span class="token operator">=</span> <span class="token keyword">match</span> code <span class="token punctuation">{</span>
   <span class="token string">&quot;10010&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;联通&quot;</span><span class="token punctuation">,</span>
   <span class="token string">&quot;10086&quot;</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;移动&quot;</span><span class="token punctuation">,</span>
   _ <span class="token operator">=&gt;</span> <span class="token string">&quot;Unknown&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;选择 {}&quot;</span><span class="token punctuation">,</span> choose<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 选择 Unknown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><p>现实中的循环很多，比如我们在学校操场里跑步，一圈一圈的跑。在计算机中，循环 其实就是一种重复，在满足指定的条件下，重复的做某些事情。</p><p>Rust 语言中也有三种表示 循环 的语句：</p><ul><li>loop 语句。一种重复执行且永远不会结束的循环。</li><li>while 语句。一种在某些条件为真的情况下就会永远执行下去的循环。</li><li>for in 语句。一种有确定次数的循环。</li></ul><h3 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环"><span>for in 循环</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> 临时变量 <span class="token keyword">in</span> 左区间<span class="token punctuation">..</span>右区间 <span class="token punctuation">{</span>
   <span class="token comment">// 执行业务逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左区间..右区间，这是一个左闭右开的区间，1..5，那就只包含 1,2,3,4</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
num is <span class="token number">1</span>
num is <span class="token number">2</span>
num is <span class="token number">3</span>
num is <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 a..=b 表示两端都包含在内的范围。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
num is <span class="token number">1</span>
num is <span class="token number">2</span>
num is <span class="token number">3</span>
num is <span class="token number">4</span>
num is <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-in-与迭代器" tabindex="-1"><a class="header-anchor" href="#for-in-与迭代器"><span>for in 与迭代器</span></a></h3><h4 id="iter-集合不变" tabindex="-1"><a class="header-anchor" href="#iter-集合不变"><span>iter (集合不变)</span></a></h4><p>在每次迭代中借用集合中的一个元素。这样集合本身不会被改变，循环之后仍可以使用。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> studyList <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
     <span class="token string">&quot;《Go语言极简一本通》&quot;</span><span class="token punctuation">,</span>
     <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span>
     <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> studyList<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> name <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你进阶到第三阶段-{}!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;学习: {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
学习<span class="token punctuation">:</span> 《<span class="token class-name">Go</span>语言极简一本通》
学习<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
恭喜你进阶到第三阶段<span class="token operator">-</span>从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="into-iter-消耗集合" tabindex="-1"><a class="header-anchor" href="#into-iter-消耗集合"><span>into_iter (消耗集合)</span></a></h4><p>会消耗集合。在每次迭代中，集合中的数据本身会被提供。一旦集合被消耗了，之后就无法再使用了，因为它已经在循环中被 “移除”（move）了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> studyList2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
    <span class="token string">&quot;《Go语言极简一本通》&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> studyList2<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">match</span> name <span class="token punctuation">{</span>
        <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;恭喜你进阶到第三阶段-{}!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
        _ <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;学习: {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
学习<span class="token punctuation">:</span> 《<span class="token class-name">Go</span>语言极简一本通》
学习<span class="token punctuation">:</span> <span class="token class-name">Go</span>语言微服务架构核心<span class="token number">22</span>讲
恭喜你进阶到第三阶段<span class="token operator">-</span>从<span class="token number">0</span>到<span class="token class-name">Go</span>语言微服务架构师<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="iter-mut-集合可改" tabindex="-1"><a class="header-anchor" href="#iter-mut-集合可改"><span>iter_mut (集合可改)</span></a></h4><p>可变地（mutably）借用集合中的每个元素，从而允许集合被就地修改。 就是停止本次执行剩下的语句，直接进入下一个循环。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> studyList3 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
    <span class="token string">&quot;《Go语言极简一本通》&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> studyList3<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>name <span class="token operator">=</span> <span class="token keyword">match</span> name <span class="token punctuation">{</span>
        <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;恭喜你进阶到第三阶段---从0到Go语言微服务架构师&quot;</span>
        <span class="token punctuation">}</span>
        _ <span class="token operator">=&gt;</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;studyList3: {:?}&quot;</span><span class="token punctuation">,</span> studyList3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出</span>
studyList3<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;《Go语言极简一本通》&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;恭喜你进阶到第三阶段---从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">while</span> <span class="token punctuation">(</span> 条件表达式 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行业务逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的条件表达式为真，就会执行 while 循环。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    num<span class="token operator">=</span> num<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
num is <span class="token number">1</span>
num is <span class="token number">2</span>
num is <span class="token number">4</span>
num is <span class="token number">8</span>
num is <span class="token number">16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="loop-循环-break" tabindex="-1"><a class="header-anchor" href="#loop-循环-break"><span>loop 循环+break</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">loop</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行业务逻辑</span>
<span class="token punctuation">}</span>
<span class="token keyword">break</span><span class="token punctuation">;</span> 中断的意思，就是跳出<span class="token keyword">loop</span>循环
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">loop</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> num <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;num is {}&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
   num <span class="token operator">=</span> num<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
num is <span class="token number">1</span>
num is <span class="token number">3</span>
num is <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49)]))}const c=s(p,[["render",o],["__file","01. 结构化编程.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html","title":"Rust结构化编程","lang":"zh-CN","frontmatter":{"description":"Rust结构化编程 条件判断 if 语句 示例 if …else 语句 示例 if…else if… else 语句 示例 match 语句 Rust 中的 match 语句有返回值，它把 匹配值 后执行的最后一条语句的结果当作返回值。 语法 示例 循环 现实中的循环很多，比如我们在学校操场里跑步，一圈一圈的跑。在计算机中，循环 其实就是一种重复，在满...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust结构化编程"}],["meta",{"property":"og:description","content":"Rust结构化编程 条件判断 if 语句 示例 if …else 语句 示例 if…else if… else 语句 示例 match 语句 Rust 中的 match 语句有返回值，它把 匹配值 后执行的最后一条语句的结果当作返回值。 语法 示例 循环 现实中的循环很多，比如我们在学校操场里跑步，一圈一圈的跑。在计算机中，循环 其实就是一种重复，在满..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust结构化编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust结构化编程","slug":"rust结构化编程","link":"#rust结构化编程","children":[{"level":2,"title":"条件判断","slug":"条件判断","link":"#条件判断","children":[{"level":3,"title":"if 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":3,"title":"if …else 语句","slug":"if-else-语句","link":"#if-else-语句","children":[]},{"level":3,"title":"if…else if… else 语句","slug":"if-else-if-else-语句","link":"#if-else-if-else-语句","children":[]},{"level":3,"title":"match 语句","slug":"match-语句","link":"#match-语句","children":[]}]},{"level":2,"title":"循环","slug":"循环","link":"#循环","children":[{"level":3,"title":"for in 循环","slug":"for-in-循环","link":"#for-in-循环","children":[]},{"level":3,"title":"for in 与迭代器","slug":"for-in-与迭代器","link":"#for-in-与迭代器","children":[{"level":4,"title":"iter (集合不变)","slug":"iter-集合不变","link":"#iter-集合不变","children":[]},{"level":4,"title":"into_iter (消耗集合)","slug":"into-iter-消耗集合","link":"#into-iter-消耗集合","children":[]},{"level":4,"title":"iter_mut (集合可改)","slug":"iter-mut-集合可改","link":"#iter-mut-集合可改","children":[]}]},{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"loop 循环+break","slug":"loop-循环-break","link":"#loop-循环-break","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.58,"words":1374},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/04. 优化/01. 结构化编程.md","excerpt":"\\n<h2>条件判断</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>条件判断语句</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>if 语句</td>\\n<td>if 语句用于模拟现实生活中的 如果…就…</td>\\n</tr>\\n<tr>\\n<td>if...else 语句</td>\\n<td>if...else 语句用于模拟 如果…就…否则…</td>\\n</tr>\\n<tr>\\n<td>else...if 和嵌套if 语句</td>\\n<td>嵌套if 语句用于模拟 如果…就…如果…就…</td>\\n</tr>\\n<tr>\\n<td>match 语句</td>\\n<td>match 语句用于模拟现实生活中的 老师点名 或 银行叫</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/04. 优化/01. 结构化编程.md","value":{"title":"01. 结构化编程","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Rust/学习/04. 优化/01. 结构化编程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{c as comp,u as data};
