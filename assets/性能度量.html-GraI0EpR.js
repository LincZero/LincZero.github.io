import{_ as p,c as r,a as o,b as a,d as t,e,o as i,r as l}from"./app-CQm44bc7.js";const c={},u={href:"https://docs.python.org/3/library/timeit.html#module-timeit",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.python.org/3/library/timeit.html#module-timeit",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.python.org/3/library/profile.html#module-profile",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.python.org/3/library/profile.html#module-pstats",target:"_blank",rel:"noopener noreferrer"};function k(h,n){const s=l("ExternalLinkIcon");return i(),r("div",null,[n[9]||(n[9]=o('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="性能度量" tabindex="-1"><a class="header-anchor" href="#性能度量"><span>性能度量</span></a></h1><p>有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案</p><p>例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多</p>',5)),a("p",null,[a("a",u,[n[0]||(n[0]=t("timeit")),e(s)]),n[1]||(n[1]=t(" 证明了后者更快一些："))]),n[10]||(n[10]=o(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> timeit <span class="token keyword">import</span> Timer
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Timer<span class="token punctuation">(</span><span class="token string">&#39;t=a; a=b; b=t&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a=1; b=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0.57535828626024577</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Timer<span class="token punctuation">(</span><span class="token string">&#39;a,b = b,a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a=1; b=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0.54962537085770791</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[n[5]||(n[5]=t("相对于 ")),a("a",d,[n[2]||(n[2]=t("timeit")),e(s)]),n[6]||(n[6]=t(" 的细粒度，")),a("a",m,[n[3]||(n[3]=t("profile")),e(s)]),n[7]||(n[7]=t(" 和 ")),a("a",g,[n[4]||(n[4]=t("pstats")),e(s)]),n[8]||(n[8]=t(" 模块提供了针对更大代码块的时间度量工具"))])])}const b=p(c,[["render",k],["__file","性能度量.html.vue"]]),f=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 性能度量 有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案 例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多 timeit 证明了后者更快一些： 相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/%E6%80%A7%E8%83%BD%E5%BA%A6%E9%87%8F.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 性能度量 有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案 例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多 timeit 证明了后者更快一些： 相对于 timeit 的细粒度，profile 和 pstats 模块提供了针对更大代码块的时间度量工具"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"性能度量","slug":"性能度量","link":"#性能度量","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.59,"words":176},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/07. 模块库/标准库/性能度量.md","excerpt":"\\n<h1>目录</h1>\\n<h1>性能度量</h1>\\n<p>有些用户对了解解决同一问题的不同方法之间的性能差异很感兴趣。Python 提供了一个度量工具，为这些问题提供了直接答案</p>\\n<p>例如，使用元组封装和拆封来交换元素看起来要比使用传统的方法要诱人的多</p>\\n<p><a href=\\"https://docs.python.org/3/library/timeit.html#module-timeit\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">timeit</a> 证明了后者更快一些：</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">from</span> timeit <span class=\\"token keyword\\">import</span> Timer\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> Timer<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'t=a; a=b; b=t'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'a=1; b=2'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>timeit<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token number\\">0.57535828626024577</span>\\n<span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> Timer<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'a,b = b,a'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'a=1; b=2'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>timeit<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token number\\">0.54962537085770791</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,f as data};
