import{_ as i,e as l,g as a,o as t}from"./app-EuS-Ookm.js";const o={};function n(p,e){return t(),l("div",null,e[0]||(e[0]=[a('<h1 id="cilium" tabindex="-1"><a class="header-anchor" href="#cilium"><span>Cilium</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h1><p>参考：</p><ul><li>官网文档：https://docs.cilium.io/en/stable/overview/intro/</li><li>官网论坛：https://cilium.slack.com/</li></ul><h2 id="什么是-cilium" tabindex="-1"><a class="header-anchor" href="#什么是-cilium"><span>什么是 Cilium？</span></a></h2><p>Cilium 是开源软件，用于透明地保护使用 Docker 和 Kubernetes 等 Linux 容器管理平台部署的应用程序服务之间的网络连接。</p><p>Cilium 的基础是一种名为 <strong>eBPF</strong> 的新 Linux 内核技术，它可以在 Linux 本身内动态插入强大的安全可见性和控制逻辑。由于 eBPF 在 Linux 内核内部运行，因此可以应用和更新 Cilium 安全策略，而无需对应用程序代码或容器配置进行任何更改。</p><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">视频</div></div><div class="callout-content"><p></p><p>如果您想观看 Cilium 的视频介绍，请观看 Cilium 联合创始人 Thomas Graf 的解释： <a href="https://www.youtube.com/watch?v=80OYrzS1dCA&amp;t=405s" target="_blank" rel="noopener noreferrer">explanation by Thomas Graf, Co-founder of Cilium</a></p></div></div><h2 id="什么是-hubble" tabindex="-1"><a class="header-anchor" href="#什么是-hubble"><span>什么是 Hubble？</span></a></h2><p>Hubble 是一个完全分布式网络和安全可观测平台。它构建在 Cilium 和 eBPF 之上，能够以完全透明的方式深入了解服务的通信和行为以及网络基础设施。</p><p>通过构建在 Cilium 之上，Hubble 可以利用 eBPF 来<strong>提高可见性</strong>。通过依赖 eBPF，<strong>所有可见性都是可编程的</strong>，并允许采用动态方法，最大限度地减少开销，同时根据用户的要求提供深入而详细的可见性。 Hubble 的创建和专门设计就是为了充分利用这些新的 eBPF 能力。</p><p>Hubble 可以回答以下问题：</p><h3 id="服务依赖关系和通信图" tabindex="-1"><a class="header-anchor" href="#服务依赖关系和通信图"><span>服务依赖关系和通信图</span></a></h3><ul><li><p>哪些服务正在相互通信？多久一次？服务依赖图是什么样的？</p></li><li><p>正在进行哪些 HTTP 调用？服务从哪些 Kafka 主题消费或生成哪些主题？</p></li></ul><h3 id="网络监控与警报" tabindex="-1"><a class="header-anchor" href="#网络监控与警报"><span>网络监控与警报</span></a></h3><ul><li><p>是否有网络通讯失败？为什么沟通失败？是DNS吗？是应用程序问题还是网络问题？第 4 层 (TCP) 或第 7 层 (HTTP) 上的通信是否中断？</p></li><li><p>哪些服务在过去 5 分钟内遇到了 DNS 解析问题？哪些服务最近经历过 TCP 连接中断或连接超时？未答复的 TCP SYN 请求的比率是多少？</p></li></ul><h3 id="应用监控" tabindex="-1"><a class="header-anchor" href="#应用监控"><span>应用监控</span></a></h3><ul><li><p>特定服务或所有集群的 5xx 或 4xx HTTP 响应代码的比率是多少？</p></li><li><p>我的集群中 HTTP 请求和响应之间的 95% 和 99% 延迟是多少？哪些服务表现最差？两个服务之间的延迟是多少？</p></li></ul><h3 id="安全可观察性" tabindex="-1"><a class="header-anchor" href="#安全可观察性"><span>安全可观察性</span></a></h3><ul><li>哪些服务的连接因网络策略而被阻止？从集群外部访问了哪些服务？哪些服务解析了特定的 DNS 名称？</li></ul><div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">视频</div></div><div class="callout-content"><p></p><p>如果您想要了解哈勃的视频介绍，请观看 eCHO 第 2 集：哈勃简介：<a href="https://www.youtube.com/watch?v=hD2iJUyIXQw&amp;t=187s" target="_blank" rel="noopener noreferrer">eCHO episode 2: Introduction to Hubble</a></p></div></div><h2 id="为什么选择-cilium-和-hubble" tabindex="-1"><a class="header-anchor" href="#为什么选择-cilium-和-hubble"><span>为什么选择 Cilium 和 Hubble</span></a></h2><p>eBPF 能够以前所未有的粒度和效率对系统和应用程序进行可见性和控制。它以完全透明的方式完成此操作，无需应用程序以任何方式进行更改。 eBPF 同样能够处理现代容器化工作负载以及更传统的工作负载（例如虚拟机和标准 Linux 进程）。</p><p>高度动态微服务：</p><blockquote><p>现代数据中心应用程序的开发已转向<strong>面向服务的架构（通常称为微服务）</strong>，其中大型应用程序被拆分为小型独立服务，这些服务通过使用 HTTP 等轻量级协议的 API 相互通信。微服务应用程序往往是高度动态的，随着应用程序横向扩展/收缩以适应负载变化以及作为持续交付的一部分部署的滚动更新期间，各个容器会启动或销毁。</p><p>这种向高度动态微服务的转变对于确保微服务之间的连接既是挑战也是机遇。</p><ul><li>传统的 Linux 网络安全方法（例如 <strong>iptables</strong>）会根据 IP 地址和 TCP/UDP 端口进行过滤，但 IP 地址在动态微服务环境中经常发生变化。容器的高度不稳定的生命周期导致这些方法难以与应用程序一起扩展，因为负载平衡表和访问控制列表携带数十万条规则，需要以不断增长的频率进行更新。出于安全目的，协议端口（例如用于 HTTP 流量的 TCP 端口 80）不能再用于区分应用程序流量，因为该端口用于跨服务的各种消息。</li></ul></blockquote><p>可见性：</p><blockquote><p>另一个挑战是提供准确<strong>可见性</strong>的能力，因为传统系统使用 IP 地址作为主要识别工具，而在微服务架构中，其生命周期可能会大大缩短，仅为几秒钟。</p><p>通过利用 Linux eBPF，Cilium 保留了透明地插入安全可见性 + 强制执行的能力，但以基于服务/pod/容器身份（与传统系统中的 IP 地址识别相反）的方式实现，并且可以根据应用程序进行过滤层（例如 HTTP）。<br> 因此，Cilium 不仅通过将安全性与寻址解耦，使得在高度动态的环境中应用安全策略变得简单，而且除了提供传统的第 3 层和第 4 层分段之外，还可以通过在 HTTP 层操作来提供更强的安全隔离。</p><p>eBPF 的使用使 Cilium 能够以高度可扩展的方式实现所有这一切，即使对于大规模环境也是如此。</p></blockquote><h2 id="功能概述" tabindex="-1"><a class="header-anchor" href="#功能概述"><span>功能概述</span></a></h2><h3 id="透明地保护-api-的安全" tabindex="-1"><a class="header-anchor" href="#透明地保护-api-的安全"><span>透明地保护 API 的安全</span></a></h3><p>能够保护 REST/HTTP、gRPC 和 Kafka 等现代应用程序协议。传统防火墙在第 3 层和第 4 层运行。在特定端口上运行的协议要么完全信任，要么完全阻止。 Cilium 提供了过滤单个应用程序协议请求的能力，例如：</p><ul><li>允许所有具有方法 <code>GET</code> 和路径 <code>/public/.*</code> 的 HTTP 请求。拒绝所有其他请求。</li><li>允许 <code>service1</code> 在 Kafka 主题 <code>topic1</code> 上生成，并允许 <code>service2</code> 在 <code>topic1</code> 上消费。拒绝所有其他 Kafka 消息。</li><li>要求所有 REST 调用中都存在 HTTP 标头 <code>X-Token: [0-9]+</code> 。</li></ul><p>请参阅我们文档中的 <a href="https://docs.cilium.io/en/stable/security/policy/language/#layer-7-examples" target="_blank" rel="noopener noreferrer">Layer 7 Policy</a> 策略部分，了解支持的协议的最新列表以及如何使用它的示例。</p><h3 id="基于身份的安全服务间通信" tabindex="-1"><a class="header-anchor" href="#基于身份的安全服务间通信"><span>基于身份的安全服务间通信</span></a></h3><p>现代分布式应用程序依赖应用程序容器等技术来促进部署的敏捷性和按需扩展。这导致短时间内会启动大量的应用容器。典型的容器防火墙通过过滤源 IP 地址和目标端口来保护工作负载。这个概念要求每当容器在集群中的任何位置启动时，都可以操纵所有服务器上的防火墙。</p><p>为了避免这种限制规模的情况，Cilium 为共享相同安全策略的应用程序容器组分配一个安全身份。然后，该身份与应用程序容器发出的所有网络数据包相关联，从而允许在接收节点验证身份。安全身份管理是使用键值存储来执行的。</p><h3 id="安全地访问和访问外部服务" tabindex="-1"><a class="header-anchor" href="#安全地访问和访问外部服务"><span>安全地访问和访问外部服务</span></a></h3><p>基于标签的安全性是集群内部访问控制的首选工具。为了保护对外部服务的访问和从外部服务的访问，支持基于传统 CIDR 的入口和出口安全策略。这允许将应用程序容器的访问限制到特定的 IP 范围。</p><h3 id="简单的组网" tabindex="-1"><a class="header-anchor" href="#简单的组网"><span>简单的组网</span></a></h3><p>一个简单的扁平第 3 层网络能够跨越多个集群，连接所有应用程序容器。通过使用主机范围分配器，IP 分配变得简单。这意味着每个主机都可以分配 IP，而无需主机之间进行任何协调。</p><p>支持以下多节点网络模型：</p><ul><li><p>Overlay：跨越所有主机的基于封装的虚拟网络。目前已内置 VXLAN 和 Geneve，但可以启用 Linux 支持的所有封装格式。</p><p>何时使用此模式：此模式具有最低的基础架构和集成要求。它几乎适用于任何网络基础设施，因为唯一的要求是主机之间的 IP 连接，而这通常已经给出。</p></li><li><p>本机路由：使用 Linux 主机的常规路由表。网络需要能够路由应用程序容器的 IP 地址。</p><p>何时使用此模式：此模式适用于高级用户，需要对底层网络基础设施有一定的了解。此模式适用于：</p><ul><li>与云网络路由器结合</li><li>如果您已经在运行路由守护程序</li></ul></li></ul><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>Cilium 为应用程序容器之间和外部服务之间的流量实现分布式负载均衡，并且能够完全替代 kube-proxy 等组件。负载平衡是在 eBPF 中使用高效的哈希表实现的，允许几乎无限的规模。</p><p>对于南北向类型的负载平衡，Cilium 的 eBPF 实现针对最大性能进行了优化，可以附加到 XDP（eXpress 数据路径），并且支持直接服务器返回（DSR）以及 Maglev 一致性哈希（如果不执行负载平衡操作）在源主机上。</p><p>对于东西向类型的负载平衡，Cilium 直接在 Linux 内核的套接字层（例如在 TCP 连接时）执行高效的服务到后端转换，以便在较低层中避免每个数据包的 NAT 操作开销。</p><h3 id="带宽管理" tabindex="-1"><a class="header-anchor" href="#带宽管理"><span>带宽管理</span></a></h3><p>Cilium 通过基于 EDT（最早出发时间）的高效速率限制以及 eBPF 对流出节点的容器流量实施带宽管理。与带宽 CNI 插件中使用的 HTB（层次结构令牌桶）或 TBF（令牌桶过滤器）等传统方法相比，这可以显着减少应用程序的传输尾延迟，并避免在多队列 NIC 下锁定。</p><h3 id="监控和故障排除" tabindex="-1"><a class="header-anchor" href="#监控和故障排除"><span>监控和故障排除</span></a></h3><p>获得可见性和解决问题的能力是任何分布式系统运行的基础。虽然我们学会了喜欢 <code>tcpdump</code> 和 <code>ping</code> 这样的工具，并且它们总是在我们心中占据特殊的位置，但我们努力提供更好的故障排除工具。这包括提供以下工具：</p><ul><li>使用元数据进行事件监控：当数据包丢失时，该工具不仅报告数据包的源和目标 IP，还提供发送者和接收者的完整标签信息以及许多其他信息。</li><li>通过 Prometheus 导出指标：通过 Prometheus 导出关键指标，以便与现有仪表板集成。</li><li><a href="https://github.com/cilium/hubble/" target="_blank" rel="noopener noreferrer">Hubble</a>: 专门为 Cilium 编写的可观测平台。它提供服务依赖关系图、操作监控和警报以及基于流日志的应用程序和安全可见性。</li></ul><h2 id="组件概述" tabindex="-1"><a class="header-anchor" href="#组件概述"><span>组件概述</span></a></h2>',52)]))}const s=i(o,[["render",n],["__file","01. 简介.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/01.%20%E7%AE%80%E4%BB%8B/01.%20%E7%AE%80%E4%BB%8B.html","title":"Cilium","lang":"zh-CN","frontmatter":{"description":"Cilium 目录 简介 参考： 官网文档：https://docs.cilium.io/en/stable/overview/intro/ 官网论坛：https://cilium.slack.com/ 什么是 Cilium？ Cilium 是开源软件，用于透明地保护使用 Docker 和 Kubernetes 等 Linux 容器管理平台部署的应用程...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E7%BD%91%E7%BB%9C%E5%BA%93/%E6%97%A0%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%BA%93/Cilium%20(eBPF)/%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/01.%20%E7%AE%80%E4%BB%8B/01.%20%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Cilium"}],["meta",{"property":"og:description","content":"Cilium 目录 简介 参考： 官网文档：https://docs.cilium.io/en/stable/overview/intro/ 官网论坛：https://cilium.slack.com/ 什么是 Cilium？ Cilium 是开源软件，用于透明地保护使用 Docker 和 Kubernetes 等 Linux 容器管理平台部署的应用程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cilium\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":9.13,"words":2739},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/01. 简介.md","excerpt":"\\n<h1>目录</h1>\\n<h1>简介</h1>\\n<p>参考：</p>\\n<ul>\\n<li>官网文档：https://docs.cilium.io/en/stable/overview/intro/</li>\\n<li>官网论坛：https://cilium.slack.com/</li>\\n</ul>\\n<h2>什么是 Cilium？</h2>\\n<p>Cilium 是开源软件，用于透明地保护使用 Docker 和 Kubernetes 等 Linux 容器管理平台部署的应用程序服务之间的网络连接。</p>\\n<p>Cilium 的基础是一种名为 <strong>eBPF</strong> 的新 Linux 内核技术，它可以在 Linux 本身内动态插入强大的安全可见性和控制逻辑。由于 eBPF 在  Linux 内核内部运行，因此可以应用和更新 Cilium 安全策略，而无需对应用程序代码或容器配置进行任何更改。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/01. 简介.md","value":{"title":"01. 简介","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/网络库/无协议栈库/Cilium (eBPF)/官方文档/01. 简介/01. 简介.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{s as comp,c as data};
