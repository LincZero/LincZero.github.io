import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as l,a as n,b as s,d as c,e as a}from"./app-BxiJCPgt.js";const i={},r=a(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="re-字符串正则匹配" tabindex="-1"><a class="header-anchor" href="#re-字符串正则匹配"><span>re 字符串正则匹配</span></a></h1><h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法"><span>字符串方法</span></a></h2><p>只需简单的操作时，字符串方法最好用，因为它们易读，又容易调试:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;tea for too&#39;</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;too&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;tea for two&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="re-基本使用" tabindex="-1"><a class="header-anchor" href="#re-基本使用"><span>re 基本使用</span></a></h2>`,7),u={href:"https://docs.python.org/3/library/re.html#module-re",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="findall、sub" tabindex="-1"><a class="header-anchor" href="#findall、sub"><span>findall、sub</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> re
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;\\bf[a-z]*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;which foot or hand fell fastest&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 匹配</span>
<span class="token punctuation">[</span><span class="token string">&#39;foot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fell&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fastest&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\b[a-z]+) \\1&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;\\1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat in the the hat&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 替换。注意sub()方法替换字符串的时候如果不匹配，就会返回原字符串。很容易出错</span>
<span class="token string">&#39;cat in the hat&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><p>详见文档</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 扫描整个 字符串 找到匹配样式的第一个位置，并返回一个相应的 匹配对象。如果没有匹配，就返回一个 None ； 注意这和找到一个零长度匹配是不同的。</span>

re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 如果 string 开始的0或者多个字符匹配到了正则表达式样式，就返回一个相应的 匹配对象 。 如果没有匹配，就返回 None ；注意它跟零长度匹配是不同的。</span>

re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> string<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment"># 返回通过使用 repl 替换在 string 最左边非重叠出现的 pattern 而获得的字符串。 如果样式没有找到，则不加改变地返回 string。 repl 可以是字符串或函数；如为字符串，则其中任何反斜杠转义序列都会被处理。 也就是说，\\n 会被转换为一个换行符，\\r 会被转换为一个回车符，依此类推。 未知的 ASCII 字符转义序列保留在未来使用，会被当作错误来处理。 其他未知转义序列例如 \\&amp; 会保持原样。 向后引用像是 \\6 会用样式中第 6 组所匹配到的子字符串来替换。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rearch和match的区别</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># match()和search()都只匹配一个结果，但是match()是从字符串的开头开始匹配的，如果匹配的字符不是在开头处，那么它将会报错，匹配成功返回结果，没有返回None。而search()是从头开始匹配，匹配整一个字符串得出结果</span>
<span class="token keyword">import</span> re
result1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;liadadafbba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment"># li None</span>

<span class="token keyword">import</span> re
<span class="token comment"># result1 = re.match(&#39;li&#39;, &#39;liadadafbba&#39;)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>  <span class="token comment"># 报错</span>

<span class="token keyword">import</span> re
result1 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;liadadafbba&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
result2 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;addadlidadaf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span>  <span class="token comment"># li li</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="取子串-坑点" tabindex="-1"><a class="header-anchor" href="#取子串-坑点"><span>取子串（坑点）</span></a></h3><p>坑的地方在于：序列0是完整匹配（默认是0），序列1才是第一个，非常反直觉......</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&quot;(\\w+) (\\w+)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Isaac Newton, physicist&quot;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment"># The entire match</span>
<span class="token string">&#39;Isaac Newton&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment"># The first parenthesized subgroup.</span>
<span class="token string">&#39;Isaac&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>       <span class="token comment"># The second parenthesized subgroup.</span>
<span class="token string">&#39;Newton&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># Multiple arguments give us a tuple.</span>
<span class="token punctuation">(</span><span class="token string">&#39;Isaac&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Newton&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过话说其他程序中的正则也是，例如QT C++的 <code>&lt;QRegularExpression&gt;</code> 模块</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>QRegularExpression re(R&quot;(^OnGetWebViewPageFinish:(.+?/log)$)&quot;);
QString line = in.readLine();
QRegularExpressionMatch match = re.match(line);
if(match.hasMatch())
{
    qDebug()&lt;&lt;&quot;WishUrl1: &quot;&lt;&lt;match.captured(1);	// 序列1才是第一个匹配项
    return match.captured(1);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实战-匹配并替换内容" tabindex="-1"><a class="header-anchor" href="#实战-匹配并替换内容"><span>实战 - 匹配并替换内容</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> re
pattern <span class="token operator">=</span> <span class="token string">r&quot;元&quot;</span>	 <span class="token comment"># 模式字符串</span>
str1 <span class="token operator">=</span> <span class="token string">&quot;75元、89元&quot;</span>  <span class="token comment"># 匹配字符串</span>
replace <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&quot;美元&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>	 <span class="token comment"># &quot;75美元、89美元&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function k(m,h){const t=p("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[n("a",u,[s("re"),c(t)]),s(" 模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案：")]),d])}const b=e(i,[["render",k],["__file","re 字符串正则匹配.html.vue"]]),y=JSON.parse(`{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/re%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 re 字符串正则匹配 字符串方法 只需简单的操作时，字符串方法最好用，因为它们易读，又容易调试: re 基本使用 re 模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案： findall、sub 其他 详见文档 rearch和match的区别 取子串（坑点） 坑的地方在于：序列0是...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Python/07.%20%E6%A8%A1%E5%9D%97%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93/re%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 re 字符串正则匹配 字符串方法 只需简单的操作时，字符串方法最好用，因为它们易读，又容易调试: re 基本使用 re 模块为高级字符串处理提供了正则表达式工具。对于复杂的匹配和处理，正则表达式提供了简洁、优化的解决方案： findall、sub 其他 详见文档 rearch和match的区别 取子串（坑点） 坑的地方在于：序列0是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"re 字符串正则匹配","slug":"re-字符串正则匹配","link":"#re-字符串正则匹配","children":[{"level":2,"title":"字符串方法","slug":"字符串方法","link":"#字符串方法","children":[]},{"level":2,"title":"re 基本使用","slug":"re-基本使用","link":"#re-基本使用","children":[{"level":3,"title":"findall、sub","slug":"findall、sub","link":"#findall、sub","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":3,"title":"取子串（坑点）","slug":"取子串-坑点","link":"#取子串-坑点","children":[]}]},{"level":2,"title":"实战 - 匹配并替换内容","slug":"实战-匹配并替换内容","link":"#实战-匹配并替换内容","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.72,"words":815},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Python/07. 模块库/标准库/re 字符串正则匹配.md","excerpt":"\\n<h1>目录</h1>\\n<h1>re 字符串正则匹配</h1>\\n<h2>字符串方法</h2>\\n<p>只需简单的操作时，字符串方法最好用，因为它们易读，又容易调试:</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token string\\">'tea for too'</span><span class=\\"token punctuation\\">.</span>replace<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'too'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'two'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token string\\">'tea for two'</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,y as data};
