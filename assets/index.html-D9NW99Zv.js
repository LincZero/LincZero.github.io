import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as p,e as n}from"./app-Cs_Fi1_3.js";const o={},r=n('<h1 id="文字描述图表" tabindex="-1"><a class="header-anchor" href="#文字描述图表"><span>文字描述图表</span></a></h1><h2 id="共同点抽象总结" tabindex="-1"><a class="header-anchor" href="#共同点抽象总结"><span>共同点抽象总结</span></a></h2><ol><li><p>svg</p><p>语法很少，很原始 元素就那几个：画圆/矩形(circle/polygon)、画文字(title)、画线(path)。然后有时要一个容器(g)，就没了 然后大概了解下定位、宽高、填充等，和css有些类似的属性（你不搞复杂的记个宽高和定位就完全够用了，不要看着有的svg非常复杂就感觉他很复杂，其他的需要再查）</p></li><li><p>graphviz简化一点</p><p>元素大致是一样的：画图元、文字、线、有时要一个容器。</p><p>主要是简化了：图元的 “定位、宽高” 属性自动填，画线的定位和曲线设置也是自动填的 (会根据两端的节点自动设置线的两端位置，以及自动 &quot;绕开节点&quot;)。</p><p>主要是定位和宽高自动化了以后精简非常多</p></li><li><p>mermaid和plantuml中</p><p>“节点 - 连接关系” 这一种架构的描述，其实和上面是一样的，没有再多做什么优化了。</p><p>只是他们额外使用了 “模板”，扩展了很多图，如流程图、甘特图、序列图、等。</p><p>在这一步中，用户不再需要考虑 “节点 - 节点之间的连接关系”，反正就是对着预设好的模板填</p></li></ol><p>你会发现，其实mermaid和plantuml的 “非模板图”，和底层的东西并差不了太多</p>',4),a=[r];function l(i,c){return t(),p("div",null,a)}const E=e(o,[["render",l],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/","title":"文字描述图表","lang":"zh-CN","frontmatter":{"description":"文字描述图表 共同点抽象总结 svg 语法很少，很原始 元素就那几个：画圆/矩形(circle/polygon)、画文字(title)、画线(path)。然后有时要一个容器(g)，就没了 然后大概了解下定位、宽高、填充等，和css有些类似的属性（你不搞复杂的记个宽高和定位就完全够用了，不要看着有的svg非常复杂就感觉他很复杂，其他的需要再查） grap...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Type/Doc/MarkdwonAbout/02.%20Parse%20and%20Render/%E6%96%87%E5%AD%97%E6%8F%8F%E8%BF%B0%E5%9B%BE%E8%A1%A8/"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"文字描述图表"}],["meta",{"property":"og:description","content":"文字描述图表 共同点抽象总结 svg 语法很少，很原始 元素就那几个：画圆/矩形(circle/polygon)、画文字(title)、画线(path)。然后有时要一个容器(g)，就没了 然后大概了解下定位、宽高、填充等，和css有些类似的属性（你不搞复杂的记个宽高和定位就完全够用了，不要看着有的svg非常复杂就感觉他很复杂，其他的需要再查） grap..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文字描述图表\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"文字描述图表","slug":"文字描述图表","link":"#文字描述图表","children":[{"level":2,"title":"共同点抽象总结","slug":"共同点抽象总结","link":"#共同点抽象总结","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.19,"words":356},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Type/Doc/MarkdwonAbout/02. Parse and Render/文字描述图表/README.md","excerpt":"\\n<h2>共同点抽象总结</h2>\\n<ol>\\n<li>\\n<p>svg</p>\\n<p>语法很少，很原始\\n元素就那几个：画圆/矩形(circle/polygon)、画文字(title)、画线(path)。然后有时要一个容器(g)，就没了\\n然后大概了解下定位、宽高、填充等，和css有些类似的属性（你不搞复杂的记个宽高和定位就完全够用了，不要看着有的svg非常复杂就感觉他很复杂，其他的需要再查）</p>\\n</li>\\n<li>\\n<p>graphviz简化一点</p>\\n<p>元素大致是一样的：画图元、文字、线、有时要一个容器。</p>\\n<p>主要是简化了：图元的 “定位、宽高” 属性自动填，画线的定位和曲线设置也是自动填的 (会根据两端的节点自动设置线的两端位置，以及自动 \\"绕开节点\\")。</p>\\n<p>主要是定位和宽高自动化了以后精简非常多</p>\\n</li>\\n<li>\\n<p>mermaid和plantuml中</p>\\n<p>“节点 - 连接关系” 这一种架构的描述，其实和上面是一样的，没有再多做什么优化了。</p>\\n<p>只是他们额外使用了 “模板”，扩展了很多图，如流程图、甘特图、序列图、等。</p>\\n<p>在这一步中，用户不再需要考虑 “节点 - 节点之间的连接关系”，反正就是对着预设好的模板填</p>\\n</li>\\n</ol>","autoDesc":true}');export{E as comp,h as data};
