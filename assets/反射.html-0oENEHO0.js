import{_ as s,c as o,a,b as l,d as n,e as t,o as p,r}from"./app-CQm44bc7.js";const c={},d={href:"https://www.bilibili.com/video/BV1BS4y177k9",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bilibili.com/video/BV1cB4y1Y7VW",target:"_blank",rel:"noopener noreferrer"};function u(v,e){const i=r("ExternalLinkIcon");return p(),o("div",null,[e[4]||(e[4]=a('<h2 id="反射-reflect" tabindex="-1"><a class="header-anchor" href="#反射-reflect"><span>反射 (Reflect)</span></a></h2><h3 id="各语言实现" tabindex="-1"><a class="header-anchor" href="#各语言实现"><span>各语言实现</span></a></h3><h4 id="反射库" tabindex="-1"><a class="header-anchor" href="#反射库"><span>反射库</span></a></h4><ul><li>Java <ul><li>有一个专门的包处理反射，配合注解使用</li></ul></li><li>python <ul><li>python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName</li><li>python是一个脚本语言，它不像java一样有一个专门的包来处理<strong>反射</strong></li><li>Python的内置函数提供了强大的反射机制</li></ul></li><li>C <ul><li>自身不支持，也无特别好的库</li><li>boost库有但似乎说不好用，另一个就是UE4的C++也有反射：这个视频有说大致原理：https://www.bilibili.com/video/BV1yv4y1m77s/</li></ul></li></ul><h4 id="反射类" tabindex="-1"><a class="header-anchor" href="#反射类"><span>反射类</span></a></h4><p>反射机制</p><ul><li>Java和C++一些相似的方法 <ul><li>java的 <code>newInstance方法</code> 对应C++中 <code>虚拟构造器</code> 的习惯用法。但有所不同 <ul><li>C++中的虚拟构造器不是一种语言特性，需要由专门的库支持</li></ul></li><li>java的 <code>Class类</code> 与C++中的 <code>type_info类</code> 相似，java的 <code>getClass方法</code> 与C++中的 <code>typeid</code> 运算符等价 <ul><li>C++的type_info没Java的Class强大。只能以字符串的形式显示一个类型的名字，而不能创建那个类型的对象</li></ul></li></ul></li><li>C++本身没有自带的反射机制。至于虚拟构造器和type_info我也没用过、不懂</li></ul><h4 id="反射枚举" tabindex="-1"><a class="header-anchor" href="#反射枚举"><span>反射枚举</span></a></h4><p>C++的X宏可以实现编译期反射，也有一些像better_enum之类的反射枚举库</p><h3 id="相关知识" tabindex="-1"><a class="header-anchor" href="#相关知识"><span>相关知识</span></a></h3><h4 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h4>',11)),l("p",null,[e[1]||(e[1]=n("参考：")),l("a",d,[e[0]||(e[0]=n("反射-01-问题提出")),t(i)])]),e[5]||(e[5]=a(`<p>问题：BlindBox 类中有1024个open开头方法，方法会返回从1~1024之间的整数且不会重复，问哪个方法会返回 666（不能查看源码）</p><p>答案：如果有一个方法，能知道这个类中所有的方法并遍历，这么就可以解决这个问题</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessExeption</span> <span class="token punctuation">{</span>
        <span class="token comment">// ……</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的反射：反射即认清自己，让对象认清自己，知道对象的：</p><ul><li>类名</li><li>父类</li><li>接口</li><li>成员变量</li><li>方法</li></ul><p>并非所有语言具备认清对象自己的能力，如C++。你只能知道类有什么方法，再去调用他。但不能去获取类有什么方法，再去调用。</p><h4 id="反射api" tabindex="-1"><a class="header-anchor" href="#反射api"><span>反射API</span></a></h4><p>反射机制允许程序在运行时借助 Reflection API 取得任何类的内部信息，并能直接操作对象的内部属性和方法（比如用字符串索引函数地址或类成员偏移地址）</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4>`,9)),l("p",null,[e[3]||(e[3]=n("参考：")),l("a",h,[e[2]||(e[2]=n("反射-03-java反射原理")),t(i)])]),e[6]||(e[6]=a('<p>Java的反射枚举，原理大概是：把下面这些信息都给它记录下来，并且呢在类加载的时候把这些信息收集起来，放在一个特殊的对象中 —— <strong>InstanceKlass</strong></p><ul><li>类名</li><li>父类</li><li>接口</li><li>成员变量</li><li>成员方法</li><li>虚方法</li><li><code>__java__mirror</code>，通过这个类方法，可以获取上面的信息</li></ul><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h4><ul><li>根据作用时期 <ul><li>编译期反射。例如：C的X宏，可以类似这样的效果：在编译期间查枚举表</li><li>运行期反射。例如：真正靠字符串进行反射的java、python的反射</li></ul></li><li>根据作用点 <ul><li>类反射 <ul><li>类对象反射</li><li>类成员数据反射</li><li>类成员函数反射</li></ul></li><li>枚举反射</li></ul></li></ul><h4 id="和序列化、反序列化的联系" tabindex="-1"><a class="header-anchor" href="#和序列化、反序列化的联系"><span>和序列化、反序列化的联系</span></a></h4><p>很多业务场景需要依赖反射机制，比如：RPC、Web MVC、对象序列化等</p>',6))])}const g=s(c,[["render",u],["__file","反射.html.vue"]]),f=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/%E5%8A%A8%E6%80%81%E6%80%A7/%E5%8F%8D%E5%B0%84.html","title":"","lang":"zh-CN","frontmatter":{"description":"反射 (Reflect) 各语言实现 反射库 Java 有一个专门的包处理反射，配合注解使用 python python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName python是一个脚本语言，它不像java一样有一个专门的包来处理反射 Python的内置函数提供了强大的反射机制 C 自身不支持，也无特别好的库...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Different/04.%20%E4%BC%98%E5%8C%96/%E5%8A%A8%E6%80%81%E6%80%A7/%E5%8F%8D%E5%B0%84.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:description","content":"反射 (Reflect) 各语言实现 反射库 Java 有一个专门的包处理反射，配合注解使用 python python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName python是一个脚本语言，它不像java一样有一个专门的包来处理反射 Python的内置函数提供了强大的反射机制 C 自身不支持，也无特别好的库..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":2,"title":"反射 (Reflect)","slug":"反射-reflect","link":"#反射-reflect","children":[{"level":3,"title":"各语言实现","slug":"各语言实现","link":"#各语言实现","children":[{"level":4,"title":"反射库","slug":"反射库","link":"#反射库","children":[]},{"level":4,"title":"反射类","slug":"反射类","link":"#反射类","children":[]},{"level":4,"title":"反射枚举","slug":"反射枚举","link":"#反射枚举","children":[]}]},{"level":3,"title":"相关知识","slug":"相关知识","link":"#相关知识","children":[{"level":4,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":4,"title":"反射API","slug":"反射api","link":"#反射api","children":[]},{"level":4,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":4,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":4,"title":"和序列化、反序列化的联系","slug":"和序列化、反序列化的联系","link":"#和序列化、反序列化的联系","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.77,"words":830},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Different/04. 优化/动态性/反射.md","excerpt":"<h2>反射 (Reflect)</h2>\\n<h3>各语言实现</h3>\\n<h4>反射库</h4>\\n<ul>\\n<li>Java\\n<ul>\\n<li>有一个专门的包处理反射，配合注解使用</li>\\n</ul>\\n</li>\\n<li>python\\n<ul>\\n<li>python作为脚本语言，根据类名字符生成类实例非常简单，类似java的Class.forName</li>\\n<li>python是一个脚本语言，它不像java一样有一个专门的包来处理<strong>反射</strong></li>\\n<li>Python的内置函数提供了强大的反射机制</li>\\n</ul>\\n</li>\\n<li>C\\n<ul>\\n<li>自身不支持，也无特别好的库</li>\\n<li>boost库有但似乎说不好用，另一个就是UE4的C++也有反射：这个视频有说大致原理：https://www.bilibili.com/video/BV1yv4y1m77s/</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{g as comp,f as data};
