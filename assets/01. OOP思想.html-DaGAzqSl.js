import{_ as i,c as e,e as n,o as t}from"./app-DQC9V0Al.js";const o={};function a(r,l){return t(),e("div",null,l[0]||(l[0]=[n('<h1 id="oop思想" tabindex="-1"><a class="header-anchor" href="#oop思想"><span>OOP思想</span></a></h1><h2 id="类的设计" tabindex="-1"><a class="header-anchor" href="#类的设计"><span>类的设计</span></a></h2><h3 id="思想与设计" tabindex="-1"><a class="header-anchor" href="#思想与设计"><span>思想与设计</span></a></h3><blockquote><h4 id="面向对象编程-oop" tabindex="-1"><a class="header-anchor" href="#面向对象编程-oop"><span>面向对象编程（OOP）</span></a></h4></blockquote><ul><li>是什么 <ul><li>是一种特殊的、设计程序的概念性方法，是“思想”</li><li>C也能用（用结构来模拟类）</li><li>C++改进（引入类和一些类的特性）C语言，使这种方法更容易</li></ul></li><li><strong>重要的OOP特性</strong>（封装并只是OOP的特性之一，并不是其全部或内核） <ul><li>抽象：体现于抽象数据类型、抽象基类</li><li><strong>封装和数据隐藏</strong>：体现于私有成员</li><li>多态：体现于继承多态、模板类</li><li><strong>继承</strong></li><li>代码的<strong>可重用性</strong>：体现于各种继承、包含、嵌套</li></ul></li><li>OOP特性的具体表现 <ul><li>封装的具体表现 <ul><li>数据隐藏（防止直接访问数据，用户无需了解数据是如何被表示的）</li><li>将类函数定义和类声明放在不同的文件中</li></ul></li><li>隐藏机理、强调实质 <ul><li>多态 - 运算符重载</li></ul></li></ul></li></ul><blockquote><h4 id="设计过程和程序结构-设计过程和程序结构分别对应" tabindex="-1"><a class="header-anchor" href="#设计过程和程序结构-设计过程和程序结构分别对应"><span>设计过程和程序结构（设计过程和程序结构分别对应）</span></a></h4></blockquote><ul><li>设计过程 <ul><li>从用户角度考虑对象——描述所需数据和与数据交互的操作（类声明头文件）</li><li>然后确定如何实现这些接口和数据存储（类实现代码）</li><li>最后使用设计方案创建出程序（客户代码）</li></ul></li><li>程序结构：可以分成三部分（原型、定义、调用，三者分离），<strong>这种组织方法模块设计与OOP设计一致</strong><ul><li>头文件：包含<strong>结构声明</strong>和使用这些结构的函数的<strong>原型</strong></li><li>源代码文件1：包含与结构有关的函数的<strong>定义</strong>代码</li><li>源代码文件2：包含<strong>调用</strong>与结构相关的函数的代码</li></ul></li><li>头文件设计 <ul><li>详细参见模块系统一章</li><li>函数/类模板声明：不能放实现文件，其不能被独立编译</li><li>内联函数定义：不能放实现文件，其不能被独立编译</li></ul></li><li>工具包思想 <ul><li>哪怕是自己设计类给自己使用，也应当做是两个人——类编写者和类使用者，两者拥有不同的权限</li><li>类编写者：类设计者，能操作类的私有和隐藏部分</li><li>类使用者：自己或者其他使用类库的别人，只能操作类的公有部分</li></ul></li></ul><blockquote><h4 id="类与结构不同的是" tabindex="-1"><a class="header-anchor" href="#类与结构不同的是"><span>类与结构不同的是</span></a></h4></blockquote><ul><li>类成员默认是私有的，结构成员默认是公有的</li><li>通常用类来实现类描述</li><li>用结构用来只表示纯粹的数据对象（常被称为老式数据（POD，<em>Plain Old Data</em>）结构）</li></ul><blockquote><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h4></blockquote><ul><li>规范 <ul><li>类名首字母大写</li></ul></li><li>技巧 <ul><li>使用状态成员</li></ul></li></ul><h3 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h3><p>类似于strut、enum，需要先声明类名</p><ul><li>struct关键字：声明结构名，再用结构名定义结构变量</li><li>enum关键字：声明枚举名（以及枚举量），再用枚举名（和枚举量）定义枚举变量</li><li>class关键字：声明类名，再用类名定义类变量（一般不叫类变量，叫类<code>对象</code>/类<code>实例</code>）</li></ul>',14)]))}const u=i(o,[["render",a],["__file","01. OOP思想.html.vue"]]),c=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20OOP%E6%80%9D%E6%83%B3.html","title":"OOP思想","lang":"zh-CN","frontmatter":{"description":"OOP思想 类的设计 思想与设计 面向对象编程（OOP） 是什么 是一种特殊的、设计程序的概念性方法，是“思想” C也能用（用结构来模拟类） C++改进（引入类和一些类的特性）C语言，使这种方法更容易 重要的OOP特性（封装并只是OOP的特性之一，并不是其全部或内核） 抽象：体现于抽象数据类型、抽象基类 封装和数据隐藏：体现于私有成员 多态：体现于继承...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/C__/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01.%20OOP%E6%80%9D%E6%83%B3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"OOP思想"}],["meta",{"property":"og:description","content":"OOP思想 类的设计 思想与设计 面向对象编程（OOP） 是什么 是一种特殊的、设计程序的概念性方法，是“思想” C也能用（用结构来模拟类） C++改进（引入类和一些类的特性）C语言，使这种方法更容易 重要的OOP特性（封装并只是OOP的特性之一，并不是其全部或内核） 抽象：体现于抽象数据类型、抽象基类 封装和数据隐藏：体现于私有成员 多态：体现于继承..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OOP思想\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"OOP思想","slug":"oop思想","link":"#oop思想","children":[{"level":2,"title":"类的设计","slug":"类的设计","link":"#类的设计","children":[{"level":3,"title":"思想与设计","slug":"思想与设计","link":"#思想与设计","children":[]},{"level":3,"title":"简概","slug":"简概","link":"#简概","children":[]}]}]}],"git":{},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/01. 面向对象/01. OOP思想.md","excerpt":"\\n<h2>类的设计</h2>\\n<h3>思想与设计</h3>\\n<blockquote>\\n<h4>面向对象编程（OOP）</h4>\\n</blockquote>\\n<ul>\\n<li>是什么\\n<ul>\\n<li>是一种特殊的、设计程序的概念性方法，是“思想”</li>\\n<li>C也能用（用结构来模拟类）</li>\\n<li>C++改进（引入类和一些类的特性）C语言，使这种方法更容易</li>\\n</ul>\\n</li>\\n<li><strong>重要的OOP特性</strong>（封装并只是OOP的特性之一，并不是其全部或内核）\\n<ul>\\n<li>抽象：体现于抽象数据类型、抽象基类</li>\\n<li><strong>封装和数据隐藏</strong>：体现于私有成员</li>\\n<li>多态：体现于继承多态、模板类</li>\\n<li><strong>继承</strong></li>\\n<li>代码的<strong>可重用性</strong>：体现于各种继承、包含、嵌套</li>\\n</ul>\\n</li>\\n<li>OOP特性的具体表现\\n<ul>\\n<li>封装的具体表现\\n<ul>\\n<li>数据隐藏（防止直接访问数据，用户无需了解数据是如何被表示的）</li>\\n<li>将类函数定义和类声明放在不同的文件中</li>\\n</ul>\\n</li>\\n<li>隐藏机理、强调实质\\n<ul>\\n<li>多态 - 运算符重载</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/01. 面向对象/01. OOP思想.md","value":{"title":"01. OOP思想","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/C++/06. 面向对象/01. 面向对象/01. OOP思想.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{u as comp,c as data};
