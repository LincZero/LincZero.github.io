import{_ as e,c as n,e as a,o as i}from"./app-DEUP2Tjk.js";const s="/assets/14-%E5%8D%95%E7%BA%BF%E7%A8%8Bmp4%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B-CwhMu0NC.jpg",t="/assets/15-%E5%A4%9A%E8%BF%9B%E7%A8%8Bmp4-%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B-D-lrir8k.jpg",r="/assets/16-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-Co-PhpXT.jpg",o="/assets/17-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-ghx1qyWH.jpg",h="/assets/18-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B-%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB-ByyI9EoX.jpg",p="/assets/19-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-Do4U-ock.jpg",c="/assets/20-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-Cduvw3d0.jpg",d="/assets/21-%E7%BA%BF%E7%A8%8BPCB-%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB-ANEEOik2.jpg",g="/assets/22-LWP-BA6F9I7I.jpg",E={};function B(u,l){return i(),n("div",null,l[0]||(l[0]=[a('<h1 id="线程" tabindex="-1"><a class="header-anchor" href="#线程"><span>线程</span></a></h1><p>在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是<strong>线程。</strong></p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="为什么使用线程" tabindex="-1"><a class="header-anchor" href="#为什么使用线程"><span>为什么使用线程？</span></a></h3><blockquote><h4 id="需求场景" tabindex="-1"><a class="header-anchor" href="#需求场景"><span>需求场景</span></a></h4></blockquote><p>我们举个例子，假设你要编写一个视频播放器软件，那么该软件功能的核心模块有三个：</p><ul><li>从视频文件当中读取数据</li><li>对读取的数据进行解压缩</li><li>把解压缩后的视频数据播放出来</li></ul><blockquote><h4 id="单进程版本" tabindex="-1"><a class="header-anchor" href="#单进程版本"><span>单进程版本</span></a></h4></blockquote><p>对于单进程的实现方式，我想大家都会是以下这个方式：</p><p><img src="'+s+'" alt="单进程实现方式" loading="lazy"></p><p>对于单进程的这种方式，存在以下问题：</p><ul><li>播放出来的画面和声音会不连贯，因为当 CPU 能力不够强的时候，<code>Read</code> 的时候可能进程就等在这了，这样就会导致等半天才进行数据解压和播放；</li><li>各个函数之间不是并发执行，影响资源的使用效率；</li></ul><blockquote><h4 id="多进程版本" tabindex="-1"><a class="header-anchor" href="#多进程版本"><span>多进程版本</span></a></h4></blockquote><p>那改进成多进程的方式：</p><p><img src="'+t+'" alt="多进程实现方式" loading="lazy"></p><p>对于多进程的这种方式，依然会存在问题：</p><ul><li>进程之间如何通信，共享数据？</li><li>维护进程的系统开销较大，如创建进程时，分配资源、建立 PCB；终止进程时，回收资源、撤销 PCB；进程切换时，保存当前进程的状态信息；</li></ul><blockquote><h4 id="线程版本" tabindex="-1"><a class="header-anchor" href="#线程版本"><span>线程版本</span></a></h4></blockquote><p>那到底如何解决呢？需要有一种新的实体，满足以下特性：</p><ul><li>实体之间可以并发运行；</li><li>实体之间共享相同的地址空间；</li></ul><p>这个新的实体，就是 <strong>线程(<em>Thread</em>)</strong>，线程之间可以并发运行且共享相同的地址空间。</p><h3 id="什么是线程" tabindex="-1"><a class="header-anchor" href="#什么是线程"><span>什么是线程？</span></a></h3><p>线程是进程当中的一条执行流程</p><h3 id="线程资源的共享和独立" tabindex="-1"><a class="header-anchor" href="#线程资源的共享和独立"><span>线程资源的共享和独立</span></a></h3><p>能共享和独立的东西与进程不同：</p><ul><li>进程 <ul><li>独立（进程上下文）：独立的虚拟内存、CPU上下文（寄存器与技术器）</li></ul></li><li>线程 <ul><li>共享（同一个进程内多个线程之间）：<strong>代码段、数据段、打开的文件等</strong>资源</li><li>独立（线程上下文）：<strong>寄存器、栈</strong></li></ul></li></ul><p><img src="'+r+'" alt="多线程" loading="lazy"></p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>一个进程中可以同时存在多个线程；</li><li>各个线程之间可以并发执行；</li><li>各个线程之间可以共享地址空间和文件等资源；</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li><p>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃</p><p>（这里是针对 C/C++ 语言，Java语言中的线程崩溃不会造成进程崩溃，具体分析原因可以看这篇：<a href="https://xiaolincoding.com/os/4_process/thread_crash.html" target="_blank" rel="noopener noreferrer">线程崩溃了，进程也会崩溃吗？</a>）</p><p>举个例子，对于游戏的用户设计，则不应该使用多线程的方式，否则一个用户挂了，会影响其他同个进程的线程。</p></li></ul><h2 id="线程的上下文" tabindex="-1"><a class="header-anchor" href="#线程的上下文"><span>线程的上下文</span></a></h2><h3 id="上下文内容-共享部分-独占私有部分" tabindex="-1"><a class="header-anchor" href="#上下文内容-共享部分-独占私有部分"><span>上下文内容（共享部分 + 独占私有部分）</span></a></h3><p>在前面我们知道了，线程与进程<strong>最大的区别</strong>在于：线程是调度的基本单位，而进程则是资源拥有的基本单位。</p><p>所以，所谓操作系统的任务调度，实际上的调度对象是线程，而进程只是给线程提供了虚拟内存、全局变量等资源。</p><p>对于线程和进程，我们可以这么理解：</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程；</li><li>当进程拥有多个线程时，这些线程会共享和独占一些东西 <ul><li><strong>共享</strong>的资源：<strong>虚拟内存和全局变量等</strong>，这些资源在上下文切换时是不需要修改的；</li><li><strong>私有</strong>的资源：<strong>栈和寄存器等</strong>，这些在上下文切换时也是需要保存的；</li></ul></li></ul><h3 id="是否同进程的线程切换" tabindex="-1"><a class="header-anchor" href="#是否同进程的线程切换"><span>是否同进程的线程切换</span></a></h3><p>这还得看线程是不是属于同一个进程：</p><ul><li>当两个线程不是属于同一个进程：则切换的过程就跟进程上下文切换一样；</li><li>当两个线程是属于同一个进程： <ul><li><strong>共享</strong>的资源：<strong>保持不动</strong> 虚拟内存和全局变量等共享资源</li><li><strong>私有</strong>的资源：<strong>需要切换</strong> 线程的私有数据、寄存器等不共享的数据；</li></ul></li></ul><p>所以，线程的上下文切换相比进程，开销要小很多。</p><h2 id="线程的实现" tabindex="-1"><a class="header-anchor" href="#线程的实现"><span>线程的实现</span></a></h2><h3 id="三种方式" tabindex="-1"><a class="header-anchor" href="#三种方式"><span>三种方式</span></a></h3><h4 id="哪三种方式" tabindex="-1"><a class="header-anchor" href="#哪三种方式"><span>哪三种方式</span></a></h4><p>主要有三种线程的实现方式：</p><ul><li><strong>用户线程（<em>User Thread</em>）</strong>：在用户空间实现的线程，不是由内核管理的线程，是由<strong>用户态</strong>的线程库来完成线程的管理；</li><li><strong>内核线程（<em>Kernel Thread</em>）</strong>：在内核中实现的线程，是由<strong>内核</strong>管理的线程；</li><li><strong>轻量级进程（<em>LightWeight Process</em>）</strong>：在<strong>内核中来支持用户</strong>线程；</li></ul><h4 id="用户线程和内核线程的三种对应关系" tabindex="-1"><a class="header-anchor" href="#用户线程和内核线程的三种对应关系"><span>用户线程和内核线程的三种对应关系</span></a></h4><p>那么，这还需要考虑一个问题，用户线程和内核线程的对应关系。</p><p>首先，第一种关系是<strong>多对一</strong>的关系，也就是多个用户线程对应同一个内核线程：</p><p><img src="'+o+'" alt="多对一" loading="lazy"></p><p>第二种是<strong>一对一</strong>的关系，也就是一个用户线程对应一个内核线程：</p><p><img src="'+h+'" alt="一对一" loading="lazy"></p><p>第三种是<strong>多对多</strong>的关系，也就是多个用户线程对应到多个内核线程：</p><p><img src="'+p+'" alt="多对多" loading="lazy"></p><h3 id="_1-用户线程" tabindex="-1"><a class="header-anchor" href="#_1-用户线程"><span>(1) 用户线程</span></a></h3><h4 id="如何理解" tabindex="-1"><a class="header-anchor" href="#如何理解"><span>如何理解</span></a></h4><p>用户线程是基于用户态的线程管理库来实现的，那么 <strong>线程控制块（<em>Thread Control Block, TCB</em>）</strong> 也是在库里面来实现的，对于操作系统而言是看不到这个 TCB 的，它只能看到整个进程的 PCB。</p><p>所以，<strong>用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。</strong></p><p>用户级线程的模型，也就类似前面提到的 <strong>多对一</strong> 的关系，即多个用户线程对应同一个内核线程，如下图所示：</p><p><img src="'+c+'" alt="用户级线程模型" loading="lazy"></p><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ul><li><strong>兼容性强</strong>：每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB 由用户级线程库函数来维护，可用于不支持线程技术的操作系统；</li><li><strong>增删切换 快</strong>：用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以速度特别快；</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ul><li><strong>阻塞隔离差</strong><ul><li>线程阻塞问题：由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。</li><li>线程竞争问题：当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。</li></ul></li><li><strong>执行时间片少</strong>：由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会比较慢；</li></ul><h3 id="_2-内核线程" tabindex="-1"><a class="header-anchor" href="#_2-内核线程"><span>(2) 内核线程</span></a></h3><h4 id="如何理解-1" tabindex="-1"><a class="header-anchor" href="#如何理解-1"><span>如何理解</span></a></h4><p><strong>内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。</strong></p><p>内核线程的模型，也就类似前面提到的<strong>一对一</strong>的关系，即一个用户线程对应一个内核线程，如下图所示：</p><p><img src="'+d+'" alt="内核线程模型" loading="lazy"></p><h4 id="优点-2" tabindex="-1"><a class="header-anchor" href="#优点-2"><span>优点</span></a></h4><ul><li><strong>阻塞隔离好</strong>：在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；</li><li><strong>执行时间片多</strong>：分配给线程，多线程的进程获得更多的 CPU 运行时间；</li></ul><h4 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2"><span>缺点</span></a></h4><ul><li><strong>兼容性低</strong>：在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；</li><li><strong>增删切换 慢</strong>：线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；</li></ul><h3 id="_3-轻量级进程" tabindex="-1"><a class="header-anchor" href="#_3-轻量级进程"><span>(3) 轻量级进程</span></a></h3><h4 id="如何理解-2" tabindex="-1"><a class="header-anchor" href="#如何理解-2"><span>如何理解</span></a></h4><p><strong>轻量级进程（<em>Light-weight process，LWP</em>）是内核支持的用户线程，一个进程可有一个或多个 LWP，每个 LWP 是跟内核线程一对一映射的，也就是 LWP 都是由一个内核线程支持，而且 LWP 是由内核管理并像普通进程一样被调度</strong>。</p><p>在大多数系统中，<strong>LWP与普通进程的区别也在于它只有一个最小的执行上下文和调度程序所需的统计信息</strong>。一般来说，一个进程代表程序的一个实例，而 LWP 代表程序的执行线程，因为一个执行线程不像进程那样需要那么多状态信息，所以 LWP 也不带有这样的信息。</p><p>在 LWP 之上也是可以使用用户线程的，那么 LWP 与用户线程的对应关系就有三种：</p><ul><li><code>1 : 1</code>，即一个 LWP 对应 一个用户线程；</li><li><code>N : 1</code>，即一个 LWP 对应多个用户线程；</li><li><code>M : N</code>，即多个 LWP 对应多个用户线程；</li></ul><p>接下来针对上面这三种对应关系说明它们优缺点。先看下图的 LWP 模型：</p><p><img src="'+g+'" alt="LWP 模型" loading="lazy"></p><h4 id="_1-1-模式" tabindex="-1"><a class="header-anchor" href="#_1-1-模式"><span>1 : 1 模式</span></a></h4><p>一个线程对应到一个 LWP 再对应到一个内核线程，如上图的进程 4，属于此模型。</p><ul><li>优点：<strong>阻塞隔离好</strong>：实现并行，当一个 LWP 阻塞，不会影响其他 LWP；</li><li>缺点：<strong>增删切换慢</strong>：每一个用户线程，就产生一个内核线程，创建线程的开销较大。</li></ul><h4 id="n-1-模式" tabindex="-1"><a class="header-anchor" href="#n-1-模式"><span>N : 1 模式</span></a></h4><p>多个用户线程对应一个 LWP 再对应一个内核线程，如上图的进程 2，线程管理是在用户空间完成的，此模式中用户的线程对操作系统不可见。</p><ul><li>优点：<strong>增删切换快</strong>：用户线程要开几个都没问题，且上下文切换发生用户空间，切换的效率较高；</li><li>缺点：<strong>阻塞隔离差</strong>：一个用户线程如果阻塞了，则整个进程都将会阻塞，另外在多核 CPU 中，是没办法充分利用 CPU 的。</li></ul><h4 id="m-n-模式" tabindex="-1"><a class="header-anchor" href="#m-n-模式"><span>M : N 模式</span></a></h4><p>根据前面的两个模型混搭一起，就形成 <code>M:N</code> 模型，该模型提供了两级控制，首先多个用户线程对应到多个 LWP，LWP 再一一对应到内核线程，如上图的进程 3。</p><ul><li>优点：综合了前两种优点，大部分的线程上下文发生在用户空间，且多个线程又可以充分利用多核 CPU 的资源。</li></ul><h4 id="组合模式" tabindex="-1"><a class="header-anchor" href="#组合模式"><span>组合模式</span></a></h4><p>如上图的进程 5，此进程结合 <code>1:1</code> 模型和 <code>M:N</code> 模型。开发人员可以针对不同的应用特点调节内核线程的数目来达到物理并行性和逻辑并行性的最佳方案。</p>',92)]))}const m=e(E,[["render",B],["__file","02. 线程.html.vue"]]),_=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/01.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02.%20%E7%BA%BF%E7%A8%8B.html","title":"线程","lang":"zh-CN","frontmatter":{"description":"线程 在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是线程。 概念 为什么使用线程？ 需求场景 我们举个例子，假设你要编写一个视频播放器软件，那么该软件功能的核心模块有三个： 从视频文件当中读取数据 对读取的数据进行解压缩 把解压缩后的视频数据播放出来 单进程版本 对于单进程的实现方...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/01.%20%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F/05.%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/01.%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02.%20%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"线程"}],["meta",{"property":"og:description","content":"线程 在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是线程。 概念 为什么使用线程？ 需求场景 我们举个例子，假设你要编写一个视频播放器软件，那么该软件功能的核心模块有三个： 从视频文件当中读取数据 对读取的数据进行解压缩 把解压缩后的视频数据播放出来 单进程版本 对于单进程的实现方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"线程","slug":"线程","link":"#线程","children":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"为什么使用线程？","slug":"为什么使用线程","link":"#为什么使用线程","children":[]},{"level":3,"title":"什么是线程？","slug":"什么是线程","link":"#什么是线程","children":[]},{"level":3,"title":"线程资源的共享和独立","slug":"线程资源的共享和独立","link":"#线程资源的共享和独立","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"线程的上下文","slug":"线程的上下文","link":"#线程的上下文","children":[{"level":3,"title":"上下文内容（共享部分 + 独占私有部分）","slug":"上下文内容-共享部分-独占私有部分","link":"#上下文内容-共享部分-独占私有部分","children":[]},{"level":3,"title":"是否同进程的线程切换","slug":"是否同进程的线程切换","link":"#是否同进程的线程切换","children":[]}]},{"level":2,"title":"线程的实现","slug":"线程的实现","link":"#线程的实现","children":[{"level":3,"title":"三种方式","slug":"三种方式","link":"#三种方式","children":[{"level":4,"title":"哪三种方式","slug":"哪三种方式","link":"#哪三种方式","children":[]},{"level":4,"title":"用户线程和内核线程的三种对应关系","slug":"用户线程和内核线程的三种对应关系","link":"#用户线程和内核线程的三种对应关系","children":[]}]},{"level":3,"title":"(1) 用户线程","slug":"_1-用户线程","link":"#_1-用户线程","children":[{"level":4,"title":"如何理解","slug":"如何理解","link":"#如何理解","children":[]},{"level":4,"title":"优点","slug":"优点-1","link":"#优点-1","children":[]},{"level":4,"title":"缺点","slug":"缺点-1","link":"#缺点-1","children":[]}]},{"level":3,"title":"(2) 内核线程","slug":"_2-内核线程","link":"#_2-内核线程","children":[{"level":4,"title":"如何理解","slug":"如何理解-1","link":"#如何理解-1","children":[]},{"level":4,"title":"优点","slug":"优点-2","link":"#优点-2","children":[]},{"level":4,"title":"缺点","slug":"缺点-2","link":"#缺点-2","children":[]}]},{"level":3,"title":"(3) 轻量级进程","slug":"_3-轻量级进程","link":"#_3-轻量级进程","children":[{"level":4,"title":"如何理解","slug":"如何理解-2","link":"#如何理解-2","children":[]},{"level":4,"title":"1 : 1 模式","slug":"_1-1-模式","link":"#_1-1-模式","children":[]},{"level":4,"title":"N : 1 模式","slug":"n-1-模式","link":"#n-1-模式","children":[]},{"level":4,"title":"M : N 模式","slug":"m-n-模式","link":"#m-n-模式","children":[]},{"level":4,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[]}]}]}]}],"git":{},"readingTime":{"minutes":9.99,"words":2998},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/02. 线程.md","excerpt":"\\n<p>在早期的操作系统中都是以进程作为独立运行的基本单位，直到后面，计算机科学家们又提出了更小的能独立运行的基本单位，也就是<strong>线程。</strong></p>\\n<h2>概念</h2>\\n<h3>为什么使用线程？</h3>\\n<blockquote>\\n<h4>需求场景</h4>\\n</blockquote>\\n<p>我们举个例子，假设你要编写一个视频播放器软件，那么该软件功能的核心模块有三个：</p>\\n<ul>\\n<li>从视频文件当中读取数据</li>\\n<li>对读取的数据进行解压缩</li>\\n<li>把解压缩后的视频数据播放出来</li>\\n</ul>\\n<blockquote>\\n<h4>单进程版本</h4>\\n</blockquote>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/02. 线程.md","value":{"title":"02. 线程","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/01. 图解系统/05. 进程管理/01. 基础知识/02. 线程.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{m as comp,_ as data};
