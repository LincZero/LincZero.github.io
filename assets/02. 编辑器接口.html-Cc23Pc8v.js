import{_ as p,c as l,e,a as s,d as a,b as o,o as i,r}from"./app-uEZYZ2I0.js";const u={},c={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/markdown-post-processing.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/view-plugins.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/state-fields.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://codemirror.net/docs/ref/#view.PluginValue",target:"_blank",rel:"noopener noreferrer"},v={href:"https://codemirror.net/docs/ref/#view.ViewPlugin%5EfromClass",target:"_blank",rel:"noopener noreferrer"},g={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/Editor.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/user-interface/commands.html#editor-commands",target:"_blank",rel:"noopener noreferrer"},f={href:"https://codemirror.net/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/Editor.html#replacerange",target:"_blank",rel:"noopener noreferrer"},h={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/Editor.html#replaceselection",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mermaid-js.github.io/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/user-interface/html-elements.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/MarkdownRenderChild.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mermaid-js.github.io/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/reference/typescript/classes/Plugin_2.html#registermarkdowncodeblockprocessor",target:"_blank",rel:"noopener noreferrer"};function C(j,n){const t=r("ExternalLinkIcon");return i(),l("div",null,[n[77]||(n[77]=e('<h1 id="编辑器接口" tabindex="-1"><a class="header-anchor" href="#编辑器接口"><span>编辑器接口</span></a></h1><h2 id="编辑器接口-1" tabindex="-1"><a class="header-anchor" href="#编辑器接口-1"><span>编辑器接口</span></a></h2><h3 id="【总结】" tabindex="-1"><a class="header-anchor" href="#【总结】"><span>【总结】</span></a></h3><p>不同的扩展</p>',4)),s("ul",null,[s("li",null,[n[7]||(n[7]=a("Markdown后处理 ")),s("ul",null,[n[5]||(n[5]=s("li",null,[a("使用方法："),s("code",null,"registerMarkdownPostProcessor()")],-1)),n[6]||(n[6]=s("li",null,[a("运行次序："),s("strong",null,[a("在 Markdown 被处理成 HTML "),s("mark",null,"之后"),a(" 运行")])],-1)),s("li",null,[n[1]||(n[1]=a("使用场景：如果您想改变")),n[2]||(n[2]=s("strong",null,"阅读视图下如何将 Markdown 转换为 HTML",-1)),n[3]||(n[3]=a("，可以考虑构建一个 ")),s("a",c,[n[0]||(n[0]=a("Markdown post processor")),o(t)]),n[4]||(n[4]=a("（Markdown后处理器）"))])])]),s("li",null,[n[15]||(n[15]=a("编辑器扩展 ")),s("ul",null,[n[14]||(n[14]=s("li",null,[a("使用方法："),s("code",null,"registerEditorExtension()")],-1)),s("li",null,[n[10]||(n[10]=a("使用场景：如果您想改变")),n[11]||(n[11]=s("strong",null,"文档在实时预览时的外观和感觉",-1)),n[12]||(n[12]=a("，您需要构建一个编辑器扩展。包含 ")),s("a",d,[n[8]||(n[8]=a("View plugins")),o(t)]),n[13]||(n[13]=a(" 以及 ")),s("a",k,[n[9]||(n[9]=a("State fields")),o(t)])])])]),s("li",null,[n[22]||(n[22]=a("视图插件（")),n[23]||(n[23]=s("code",null,"CodeMirror",-1)),n[24]||(n[24]=a("相关） ")),s("ul",null,[s("li",null,[n[18]||(n[18]=a("使用方法：需要创建一个继承自 ")),s("a",m,[n[16]||(n[16]=s("code",null,"PluginValue",-1)),o(t)]),n[19]||(n[19]=a(" 的类，并将它传给 ")),s("a",v,[n[17]||(n[17]=s("code",null,"ViewPlugin.fromClass()",-1)),o(t)]),n[20]||(n[20]=a(" 方法"))]),n[21]||(n[21]=s("li",null,[a("运行次序："),s("strong",null,[a("在视窗被重新计算 "),s("mark",null,"之后"),a(" 运行")])],-1))])]),s("li",null,[n[29]||(n[29]=a("状态字段 ")),s("ul",null,[n[28]||(n[28]=s("li",null,[a("使用方法："),s("code",null,"StateEffect "),a("与"),s("code",null,"StateField")],-1)),s("li",null,[n[26]||(n[26]=a("使用场景：让您管理自定义编辑器状态的 ")),s("a",g,[n[25]||(n[25]=a("编辑器扩展")),o(t)]),n[27]||(n[27]=a("（不是很懂）"))])])])]),n[78]||(n[78]=e(`<p>其他辅助手段</p><ul><li>状态管理</li></ul><h3 id="编辑器-editor" tabindex="-1"><a class="header-anchor" href="#编辑器-editor"><span>编辑器 <code>Editor</code></span></a></h3><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveViewOfType</span><span class="token punctuation">(</span>MarkdownView<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> editor <span class="token operator">=</span> view<span class="token punctuation">.</span>editor<span class="token punctuation">;</span>			  <span class="token comment">// 注意这里的this不能为plugin_this。view的类型分别Any和View|null</span>
<span class="token keyword">const</span> cursor <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编辑器" tabindex="-1"><a class="header-anchor" href="#编辑器"><span>编辑器</span></a></h4>`,5)),s("p",null,[s("a",b,[n[30]||(n[30]=s("code",null,"Editor",-1)),o(t)]),n[31]||(n[31]=a(" 类透出在编辑模式下读取以及操作 Markdown 文档的操作。"))]),s("p",null,[n[33]||(n[33]=a("如果您想在命令中访问编辑器，可以使用 ")),s("a",w,[n[32]||(n[32]=a("editorCallback")),o(t)]),n[34]||(n[34]=a("。"))]),n[79]||(n[79]=e(`<p>如果您想在其他地方使用编辑器，您可以通过 <code>view</code> 访问到它。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> view <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span><span class="token function">getActiveViewOfType</span><span class="token punctuation">(</span>MarkdownView<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure the user is editing a Markdown file.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// highlight-next-line</span>
  <span class="token keyword">const</span> cursor <span class="token operator">=</span> view<span class="token punctuation">.</span>editor<span class="token punctuation">.</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("blockquote",null,[n[42]||(n[42]=s("p",null,"TIP",-1)),s("p",null,[n[36]||(n[36]=a("Obsidian 使用 ")),s("a",f,[n[35]||(n[35]=a("CodeMirror")),o(t)]),n[37]||(n[37]=a(" (CM) 作为底层文本编辑器，并且将 CodeMirror 作为 API 的一部分暴露出来。 ")),n[38]||(n[38]=s("code",null,"Editor",-1)),n[39]||(n[39]=a(" 作为CM5（桌面端）和 CM6（移动端）中的桥接功能而被抽象出来。使用 ")),n[40]||(n[40]=s("code",null,"Editor",-1)),n[41]||(n[41]=a(" 而不是直接访问 CodeMirror，那么您的插件就可以在两个平台上都可以运行。"))])]),n[80]||(n[80]=s("h4",{id:"在光标处插入文本",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在光标处插入文本"},[s("span",null,"在光标处插入文本")])],-1)),s("p",null,[s("a",y,[n[43]||(n[43]=s("code",null,"replaceRange()",-1)),o(t)]),n[44]||(n[44]=a(" 方法用于替换选中的文本。如果您没有选中文本，那么文本将会在光标处被插入。"))]),n[81]||(n[81]=e(`<p>下例中的指令会将当前日期插入光标所在位置：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Editor<span class="token punctuation">,</span> moment<span class="token punctuation">,</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token string">&quot;insert-todays-date&quot;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&quot;Insert today&#39;s date&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">editorCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>editor<span class="token operator">:</span> Editor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// highlight-next-line</span>
        editor<span class="token punctuation">.</span><span class="token function">replaceRange</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> editor<span class="token punctuation">.</span><span class="token function">getCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="替换当前选中的内容" tabindex="-1"><a class="header-anchor" href="#替换当前选中的内容"><span>替换当前选中的内容</span></a></h4>`,3)),s("p",null,[n[46]||(n[46]=a("如果您想编辑选中的文本，使用 ")),s("a",h,[n[45]||(n[45]=s("code",null,"replaceSelection()",-1)),o(t)]),n[47]||(n[47]=a(" 方法去替换选中的文本。"))]),n[82]||(n[82]=e(`<p>下例中的指令读取当前选中的内容并替换成大写：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Editor<span class="token punctuation">,</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token string">&quot;convert-to-uppercase&quot;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">&quot;Convert to uppercase&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">editorCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>editor<span class="token operator">:</span> Editor<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// highlight-start</span>
        <span class="token keyword">const</span> selection <span class="token operator">=</span> editor<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        editor<span class="token punctuation">.</span><span class="token function">replaceSelection</span><span class="token punctuation">(</span>selection<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// highlight-end</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="markdown后处理-registermarkdownpostprocessor" tabindex="-1"><a class="header-anchor" href="#markdown后处理-registermarkdownpostprocessor"><span>Markdown后处理 <code>registerMarkdownPostProcessor()</code></span></a></h3><p>英语：这里的post有 在……之后 的意思</p><h4 id="markdown后处理" tabindex="-1"><a class="header-anchor" href="#markdown后处理"><span>Markdown后处理</span></a></h4>`,5)),s("p",null,[n[49]||(n[49]=a("您知道么，您可以通过类似以下文本创建 ")),n[50]||(n[50]=s("code",null,"mermaid",-1)),n[51]||(n[51]=a(" 代码块，以在在 Obsidian 中创建 ")),s("a",x,[n[48]||(n[48]=a("Mermaid")),o(t)]),n[52]||(n[52]=a(" 图表？"))]),s("p",null,[n[54]||(n[54]=a("如果您想要改变 Markdown 文档在")),n[55]||(n[55]=s("strong",null,"预览模式下",-1)),n[56]||(n[56]=a("的渲染方式，您可以添加自己的 ")),n[57]||(n[57]=s("strong",null,"Markdown 后处理器",-1)),n[58]||(n[58]=a("。 见名知意，该后处理器")),n[59]||(n[59]=s("strong",null,[a("在 Markdown 被处理成 HTML "),s("mark",null,"之后"),a(" 运行")],-1)),n[60]||(n[60]=a("。它可以让您添加，删除，或者替换渲染后的文档中的")),s("a",M,[n[53]||(n[53]=a("HTML 元素")),o(t)]),n[61]||(n[61]=a("。"))]),n[83]||(n[83]=e(`<p>区别</p><ul><li>后处理器：<strong>在 Markdown 被处理成 HTML <mark>之后</mark> 运行</strong></li><li>视图插件：<strong>在视窗被重新计算 <mark>之后</mark> 运行</strong></li></ul><p>下例搜索包含在两个冒号 <code>:</code> 之间的内容，并将其替换为恰当的 emoji 表情：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Emoji <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./emoji&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// highlight-next-line</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerMarkdownPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> codeblocks <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> codeblocks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> codeblock <span class="token operator">=</span> codeblocks<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> text <span class="token operator">=</span> codeblock<span class="token punctuation">.</span>innerText<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> isEmoji <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>text<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>isEmoji<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// highlight-next-line</span>
          context<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emoji</span><span class="token punctuation">(</span>codeblock<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),s("p",null,[n[63]||(n[63]=s("code",null,"Emoji",-1)),n[64]||(n[64]=a(" 类继承自 ")),s("a",E,[n[62]||(n[62]=s("code",null,"MarkdownRenderChild",-1)),o(t)]),n[65]||(n[65]=a(", 并用带有表情符号的 ")),n[66]||(n[66]=s("code",null,"span",-1)),n[67]||(n[67]=a(" 元素替换代码块:"))]),n[84]||(n[84]=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> MarkdownRenderChild <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// highlight-next-line</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Emoji</span> <span class="token keyword">extends</span> <span class="token class-name">MarkdownRenderChild</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token constant">ALL_EMOJIS</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;:+1:&quot;</span><span class="token operator">:</span> <span class="token string">&quot;👍&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;:sunglasses:&quot;</span><span class="token operator">:</span> <span class="token string">&quot;😎&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;:smile:&quot;</span><span class="token operator">:</span> <span class="token string">&quot;😄&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token literal-property property">text</span><span class="token operator">:</span> string<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">containerEl</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>containerEl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// highlight-start</span>
    <span class="token keyword">const</span> emojiEl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>containerEl<span class="token punctuation">.</span><span class="token function">createSpan</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> Emoji<span class="token punctuation">.</span><span class="token constant">ALL_EMOJIS</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>containerEl<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>emojiEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// highlight-end</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="后处理-markdown-代码块" tabindex="-1"><a class="header-anchor" href="#后处理-markdown-代码块"><span>后处理 Markdown 代码块</span></a></h4>`,2)),s("p",null,[n[69]||(n[69]=a("您知道么，您可以通过类似以下文本创建 ")),n[70]||(n[70]=s("code",null,"mermaid",-1)),n[71]||(n[71]=a(" 代码块，以在在 Obsidian 中创建 ")),s("a",q,[n[68]||(n[68]=a("Mermaid")),o(t)]),n[72]||(n[72]=a(" 图表？"))]),n[85]||(n[85]=e('<div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token code"><span class="token punctuation">```</span><span class="token code-language">mermaid</span>\n<span class="token code-block language-mermaid language-mermaid language-mermaid language-mermaid language-mermaid">flowchart LR\n    Start --&gt; Stop</span>\n<span class="token punctuation">```</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果更改为预览模式，代码块中的文本变为下图：</p><p>【Mermaid效果】</p>',3)),s("p",null,[n[74]||(n[74]=a("如果您想添加自己的类似以下 Mermaid 的自定义代码块，您可以使用 ")),s("a",P,[n[73]||(n[73]=s("code",null,"registerMarkdownCodeBlockProcessor",-1)),o(t)]),n[75]||(n[75]=a("。 以下示例")),n[76]||(n[76]=s("strong",null,"将包含 CSV 数据的代码块呈现为表格",-1))]),n[86]||(n[86]=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Plugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;obsidian&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ExamplePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">Plugin</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">onload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerMarkdownCodeBlockProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;csv&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> el<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// registerMarkdownCodeBlockProcessor</span>
      <span class="token keyword">const</span> rows <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> table <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> body <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> cols <span class="token operator">=</span> rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">const</span> row <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          row<span class="token punctuation">.</span><span class="token function">createEl</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const z=p(u,[["render",C],["__file","02. 编辑器接口.html.vue"]]),T=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E3%80%8AObsidian%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E3%80%8B/02.%20%E7%BC%96%E8%BE%91%E5%99%A8%E6%8E%A5%E5%8F%A3.html","title":"编辑器接口","lang":"zh-CN","frontmatter":{"description":"编辑器接口 编辑器接口 【总结】 不同的扩展 Markdown后处理 使用方法：registerMarkdownPostProcessor() 运行次序：在 Markdown 被处理成 HTML 之后 运行 使用场景：如果您想改变阅读视图下如何将 Markdown 转换为 HTML，可以考虑构建一个 Markdown post processor（Ma...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/04.%20Project/Type/Doc/MarkdwonAbout/01.%20Soft%20And%20Frame/Obsidian/%E3%80%8AObsidian%20%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3%E3%80%8B/02.%20%E7%BC%96%E8%BE%91%E5%99%A8%E6%8E%A5%E5%8F%A3.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"编辑器接口"}],["meta",{"property":"og:description","content":"编辑器接口 编辑器接口 【总结】 不同的扩展 Markdown后处理 使用方法：registerMarkdownPostProcessor() 运行次序：在 Markdown 被处理成 HTML 之后 运行 使用场景：如果您想改变阅读视图下如何将 Markdown 转换为 HTML，可以考虑构建一个 Markdown post processor（Ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编辑器接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"编辑器接口","slug":"编辑器接口","link":"#编辑器接口","children":[{"level":2,"title":"编辑器接口","slug":"编辑器接口-1","link":"#编辑器接口-1","children":[{"level":3,"title":"【总结】","slug":"【总结】","link":"#【总结】","children":[]},{"level":3,"title":"编辑器 Editor","slug":"编辑器-editor","link":"#编辑器-editor","children":[{"level":4,"title":"编辑器","slug":"编辑器","link":"#编辑器","children":[]},{"level":4,"title":"在光标处插入文本","slug":"在光标处插入文本","link":"#在光标处插入文本","children":[]},{"level":4,"title":"替换当前选中的内容","slug":"替换当前选中的内容","link":"#替换当前选中的内容","children":[]}]},{"level":3,"title":"Markdown后处理 registerMarkdownPostProcessor()","slug":"markdown后处理-registermarkdownpostprocessor","link":"#markdown后处理-registermarkdownpostprocessor","children":[{"level":4,"title":"Markdown后处理","slug":"markdown后处理","link":"#markdown后处理","children":[]},{"level":4,"title":"后处理 Markdown 代码块","slug":"后处理-markdown-代码块","link":"#后处理-markdown-代码块","children":[]}]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.06,"words":1217},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/02. 编辑器接口.md","excerpt":"\\n<h2>编辑器接口</h2>\\n<h3>【总结】</h3>\\n<p>不同的扩展</p>\\n<ul>\\n<li>Markdown后处理\\n<ul>\\n<li>使用方法：<code>registerMarkdownPostProcessor()</code></li>\\n<li>运行次序：<strong>在 Markdown 被处理成 HTML <mark>之后</mark> 运行</strong></li>\\n<li>使用场景：如果您想改变<strong>阅读视图下如何将 Markdown 转换为 HTML</strong>，可以考虑构建一个 <a href=\\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/markdown-post-processing.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Markdown post processor</a>（Markdown后处理器）</li>\\n</ul>\\n</li>\\n<li>编辑器扩展\\n<ul>\\n<li>使用方法：<code>registerEditorExtension()</code></li>\\n<li>使用场景：如果您想改变<strong>文档在实时预览时的外观和感觉</strong>，您需要构建一个编辑器扩展。包含 <a href=\\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/view-plugins.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">View plugins</a> 以及 <a href=\\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/state-fields.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">State fields</a></li>\\n</ul>\\n</li>\\n<li>视图插件（<code>CodeMirror</code>相关）\\n<ul>\\n<li>使用方法：需要创建一个继承自 <a href=\\"https://codemirror.net/docs/ref/#view.PluginValue\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PluginValue</code></a> 的类，并将它传给 <a href=\\"https://codemirror.net/docs/ref/#view.ViewPlugin%5EfromClass\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>ViewPlugin.fromClass()</code></a> 方法</li>\\n<li>运行次序：<strong>在视窗被重新计算 <mark>之后</mark> 运行</strong></li>\\n</ul>\\n</li>\\n<li>状态字段\\n<ul>\\n<li>使用方法：<code>StateEffect </code>与<code>StateField</code></li>\\n<li>使用场景：让您管理自定义编辑器状态的 <a href=\\"https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/editor/extensions/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">编辑器扩展</a>（不是很懂）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/02. 编辑器接口.md","value":{"title":"02. 编辑器接口","path":"MdNote_Public/01. DesignAndDevelop/Develop/04. Project/Type/Doc/MarkdwonAbout/01. Soft And Frame/Obsidian/《Obsidian 插件开发文档》/02. 编辑器接口.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{z as comp,T as data};
