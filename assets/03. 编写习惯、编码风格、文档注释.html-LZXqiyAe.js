import{_ as p,c as l,b as t,a as s,e as a,d as o,o as i,r as u}from"./app-CxAoBuKS.js";const c={},r={href:"https://docs.python.org/3/reference/compound_stmts.html#function",target:"_blank",rel:"noopener noreferrer"},d={href:"http://www.python.org/dev/peps/pep-0008",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.runoob.com/manual/pythontutorial3/docs/html/classes.html#tut-firstclasses",target:"_blank",rel:"noopener noreferrer"};function g(m,n){const e=u("ExternalLinkIcon");return i(),l("div",null,[n[21]||(n[21]=t(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="编写习惯" tabindex="-1"><a class="header-anchor" href="#编写习惯"><span>编写习惯</span></a></h1><h2 id="注释类" tabindex="-1"><a class="header-anchor" href="#注释类"><span>注释类</span></a></h2><h3 id="文档字符串-类似javadoc的文档注释" tabindex="-1"><a class="header-anchor" href="#文档字符串-类似javadoc的文档注释"><span>文档字符串（类似JavaDoc的文档注释）</span></a></h3><ul><li><p>格式</p><ul><li>第一行应该是关于对象用途的简介。简短起见，不用明确的陈述对象名或类型（Java则需要）。这一行应该以大写字母开头，以句号结尾</li><li>第二行应该空出来，与接下来的详细描述明确分隔</li><li>接下来的文档应该有一或多段描述对象的调用约定、边界效应等</li><li>第一行之后的第一个非空行决定了整个文档的缩进格式（我们不用第一行是因为它通常紧靠着起始的引号，缩进格式显示的不清楚。）</li></ul></li><li><p>作用</p><ul><li>可以调用函数的<code>__doc__</code>属性查看</li></ul></li><li><p>demo</p><ul><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token triple-quoted-string string">&quot;&quot;&quot;Do nothing, but document it.
  ...
  ...     No, really, it doesn&#39;t do anything.
  ...     &quot;&quot;&quot;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>my_function<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>
  Do nothing<span class="token punctuation">,</span> but document it<span class="token punctuation">.</span>
  
      No<span class="token punctuation">,</span> really<span class="token punctuation">,</span> it doesn&#39;t do anything<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="函数注解-参数和返回值的注释" tabindex="-1"><a class="header-anchor" href="#函数注解-参数和返回值的注释"><span>函数注解（参数和返回值的注释）</span></a></h3>`,7)),s("ul",null,[s("li",null,[n[3]||(n[3]=s("p",null,"概念",-1)),s("ul",null,[s("li",null,[s("a",r,[n[0]||(n[0]=a("函数注解")),o(e)]),n[1]||(n[1]=a(" 是关于用户自定义的函数的完全可选的、随意的元数据信息。无论 Python 本身或者标准库中都没有使用函数注解；本节只是描述了语法。第三方的项目是自由地为文档，类型检查，以及其它用途选择函数注解。"))]),n[2]||(n[2]=s("li",null,[a("注解是以字典形式存储在函数的 "),s("code",null,"__annotations__"),a(" 属性中，对函数的其它部分没有任何影响")],-1))])]),n[4]||(n[4]=t(`<li><p>格式</p><ul><li><code>参数注解</code>（Parameter annotations）是定义在参数名称的<strong>冒号后面</strong>，紧随着一个用来表示注解的值得表达式</li><li><code>返回注释</code>（Return annotations）是定义在一个 <code>-&gt;</code> 后面，紧随着一个表达式，在冒号与 <code>-&gt;</code> 之间。下面的示例包含一个位置参数，一个关键字参数，和没有意义的返回值注释</li></ul></li><li><p>作用</p><ul><li>可以调用<code>__annotations__</code>（注释文）查看</li></ul></li><li><p>demo</p><ul><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>ham<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span> eggs<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token string">&#39;spam&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&quot;Nothing to see here&quot;</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Annotations:&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>__annotations__<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Arguments:&quot;</span><span class="token punctuation">,</span> ham<span class="token punctuation">,</span> eggs<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">(</span><span class="token string">&#39;wonderful&#39;</span><span class="token punctuation">)</span>
  Annotations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;eggs&#39;</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;return&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Nothing to see here&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ham&#39;</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">}</span>
  Arguments<span class="token punctuation">:</span> wonderful spam
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li>`,3))]),n[22]||(n[22]=t(`<h3 id="todo注释" tabindex="-1"><a class="header-anchor" href="#todo注释"><span>TODO注释</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># @TODO: Fix ME!!! 不用@符号也行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注释的样式和有所不同，会高亮</p><p>PyCharm中，左下角TODO或双Shift搜索TODO，可以弹出TODO界面，查看所有有TODO注释的代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 考虑个人常用的符号</span>
<span class="token comment"># @TODO: fixing bug</span>
<span class="token comment"># @Question</span>
<span class="token comment"># @Attention</span>
	<span class="token comment"># @noexcept</span>
    <span class="token comment"># @except</span>
    <span class="token comment"># @Fixed Bug</span>
    <span class="token comment"># @Fixing Bug</span>
<span class="token comment"># @NOTE</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
:except
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编码风格" tabindex="-1"><a class="header-anchor" href="#编码风格"><span>编码风格</span></a></h2>`,6)),s("p",null,[n[6]||(n[6]=a("对于 Python，")),s("a",d,[n[5]||(n[5]=a("PEP 8")),o(e)]),n[7]||(n[7]=a(" 引入了大多数项目遵循的风格指导。它给出了一个高度可读，视觉友好的编码风格"))]),n[23]||(n[23]=s("p",null,"每个 Python 开发者都应该读一下，大多数要点都会对你有帮助：",-1)),s("ul",null,[n[18]||(n[18]=t("<li><p>使用 <strong>4 空格</strong>缩进，而非 TAB</p><p>在小缩进（可以嵌套更深）和大缩进（更易读）之间，4空格是一个很好的折中。TAB 引发了一些混乱，最好弃用</p></li><li><p>折行以确保其不会超过 79 个字符</p><p>这有助于小显示器用户阅读，也可以让大显示器能并排显示几个代码文件</p></li><li><p>使用空行分隔函数和类，以及函数中的大块代码</p></li><li><p>可能的话，<strong>注释独占一行</strong></p></li><li><p>使用<strong>文档字符串</strong></p></li><li><p>把<strong>空格放到操作符两边，以及逗号后面，但是括号里侧不加空格</strong>：<code>a = f(1, 2) + g(3, 4)</code></p></li>",6)),s("li",null,[n[17]||(n[17]=s("p",null,[a("统一函数和类"),s("strong",null,"命名")],-1)),s("p",null,[n[9]||(n[9]=a("推荐类名用 ")),n[10]||(n[10]=s("code",null,"大驼峰命名",-1)),n[11]||(n[11]=a("， 函数和方法名用 ")),n[12]||(n[12]=s("code",null,"小写_和_下划线",-1)),n[13]||(n[13]=a("。总是用 ")),n[14]||(n[14]=s("code",null,"self",-1)),n[15]||(n[15]=a(" 作为方法的第一个参数（关于类和方法的知识详见 ")),s("a",k,[n[8]||(n[8]=a("初识类")),o(e)]),n[16]||(n[16]=a(" ）"))])]),n[19]||(n[19]=s("li",null,[s("p",null,"不要使用花哨的编码，如果你的代码的目的是要在国际化环境。Python 的默认情况下，UTF-8，甚至普通的 ASCII 总是工作的最好")],-1)),n[20]||(n[20]=s("li",null,[s("p",null,"同样，也不要使用非 ASCII 字符的标识符，除非是不同语种的会阅读或者维护代码。")],-1))]),n[24]||(n[24]=s("h2",{id:"编码习惯",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#编码习惯"},[s("span",null,"编码习惯")])],-1))])}const h=p(c,[["render",g],["__file","03. 编写习惯、编码风格、文档注释.html.vue"]]),y=JSON.parse(`{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/11.%20%E7%BC%96%E5%86%99%E4%B9%8B%E5%A4%96/03.%20%E7%BC%96%E5%86%99%E4%B9%A0%E6%83%AF%E3%80%81%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E3%80%81%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 编写习惯 注释类 文档字符串（类似JavaDoc的文档注释） 格式 第一行应该是关于对象用途的简介。简短起见，不用明确的陈述对象名或类型（Java则需要）。这一行应该以大写字母开头，以句号结尾 第二行应该空出来，与接下来的详细描述明确分隔 接下来的文档应该有一或多段描述对象的调用约定、边界效应等 第一行之后的第一个非空行决定了整个文...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/11.%20%E7%BC%96%E5%86%99%E4%B9%8B%E5%A4%96/03.%20%E7%BC%96%E5%86%99%E4%B9%A0%E6%83%AF%E3%80%81%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E3%80%81%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 编写习惯 注释类 文档字符串（类似JavaDoc的文档注释） 格式 第一行应该是关于对象用途的简介。简短起见，不用明确的陈述对象名或类型（Java则需要）。这一行应该以大写字母开头，以句号结尾 第二行应该空出来，与接下来的详细描述明确分隔 接下来的文档应该有一或多段描述对象的调用约定、边界效应等 第一行之后的第一个非空行决定了整个文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Python","slug":"python","link":"#python","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"编写习惯","slug":"编写习惯","link":"#编写习惯","children":[{"level":2,"title":"注释类","slug":"注释类","link":"#注释类","children":[{"level":3,"title":"文档字符串（类似JavaDoc的文档注释）","slug":"文档字符串-类似javadoc的文档注释","link":"#文档字符串-类似javadoc的文档注释","children":[]},{"level":3,"title":"函数注解（参数和返回值的注释）","slug":"函数注解-参数和返回值的注释","link":"#函数注解-参数和返回值的注释","children":[]},{"level":3,"title":"TODO注释","slug":"todo注释","link":"#todo注释","children":[]}]},{"level":2,"title":"编码风格","slug":"编码风格","link":"#编码风格","children":[]},{"level":2,"title":"编码习惯","slug":"编码习惯","link":"#编码习惯","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.28,"words":983},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/11. 编写之外/03. 编写习惯、编码风格、文档注释.md","excerpt":"\\n<h1>目录</h1>\\n<h1>编写习惯</h1>\\n<h2>注释类</h2>\\n<h3>文档字符串（类似JavaDoc的文档注释）</h3>\\n<ul>\\n<li>\\n<p>格式</p>\\n<ul>\\n<li>第一行应该是关于对象用途的简介。简短起见，不用明确的陈述对象名或类型（Java则需要）。这一行应该以大写字母开头，以句号结尾</li>\\n<li>第二行应该空出来，与接下来的详细描述明确分隔</li>\\n<li>接下来的文档应该有一或多段描述对象的调用约定、边界效应等</li>\\n<li>第一行之后的第一个非空行决定了整个文档的缩进格式（我们不用第一行是因为它通常紧靠着起始的引号，缩进格式显示的不清楚。）</li>\\n</ul>\\n</li>\\n<li>\\n<p>作用</p>\\n<ul>\\n<li>可以调用函数的<code>__doc__</code>属性查看</li>\\n</ul>\\n</li>\\n<li>\\n<p>demo</p>\\n<ul>\\n<li>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>  <span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">my_function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>     <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Do nothing, but document it.\\n  ...\\n  ...     No, really, it doesn't do anything.\\n  ...     \\"\\"\\"</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>     <span class=\\"token keyword\\">pass</span>\\n  <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n  <span class=\\"token operator\\">&gt;&gt;</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>my_function<span class=\\"token punctuation\\">.</span>__doc__<span class=\\"token punctuation\\">)</span>\\n  Do nothing<span class=\\"token punctuation\\">,</span> but document it<span class=\\"token punctuation\\">.</span>\\n  \\n      No<span class=\\"token punctuation\\">,</span> really<span class=\\"token punctuation\\">,</span> it doesn't do anything<span class=\\"token punctuation\\">.</span>\\n</code></pre></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{h as comp,y as data};
