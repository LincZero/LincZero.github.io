import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,a as e}from"./app-BlR0bcMW.js";const t={},l=e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="结构化编程" tabindex="-1"><a class="header-anchor" href="#结构化编程"><span>结构化编程</span></a></h1><p>Java的控制流程结构与C和C++的控制流程结构一样，只有很少的例外情况。</p><p>没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的（这种情况C语言采用goto语句实现）。</p><p>另外，还有一种变形的for循环，在C或C++中没有这类循环（C++11有）。它有点类似于C#中的foreach循环。</p><h2 id="块-block-作用域" tabindex="-1"><a class="header-anchor" href="#块-block-作用域"><span>块（block）作用域</span></a></h2><p>（有时称为复合语句）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>与C/C++、js不同</mark>：嵌套块重定义变量</p><ul><li>C/C++、js：可以在嵌套的块中重定义一个变量。在内层定义的变量会覆盖在外层定义的变量。</li><li>Java：认为这样有可能会导致程序设计错误，因此在Java中不允许这样做。</li></ul><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h2><h3 id="if、else-if、else" tabindex="-1"><a class="header-anchor" href="#if、else-if、else"><span>if、else if、else</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>		<span class="token comment">// statement可为语句块 {}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> statement1<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> statement2<span class="token punctuation">;</span>
<span class="token keyword">else</span> statement3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch语句-多重选择" tabindex="-1"><a class="header-anchor" href="#switch语句-多重选择"><span>switch语句（多重选择）</span></a></h3><p>Java有一个与C/C++完全一样的switch语句</p><p>注意项</p><ul><li><p>有可能触发多个case分支。如果在case分支语句的末尾没有break语句，那么就会接着执行下一个case分支语句。这种情况相当危险，常常会引发错误。为此，我们在程序中从不使用switch语句。</p></li><li><p>若一定要用，可以在编译时加上<code>-Xlint: fallthrough</code>选项，如<code>javac -Xlint:fallthrough Test.java</code> 这样的话，如果某分支末尾缺少break语句，编译器会给出警告消息</p></li><li><p>当在switch语句中使用枚举常量时，不必在每个标签中指明枚举名，可以由switch的表达式值确定。例如</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Size</span> sz <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">SMALL</span><span class="token operator">:</span>	<span class="token comment">// no need to use Size.SMALL</span>
        <span class="token comment">//...</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="break-中断控制流程语句" tabindex="-1"><a class="header-anchor" href="#break-中断控制流程语句"><span>Break 中断控制流程语句</span></a></h4><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><h3 id="while、do-while-循环" tabindex="-1"><a class="header-anchor" href="#while、do-while-循环"><span>while、do while 循环</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>	<span class="token comment">// 首先检测循环条件</span>
<span class="token keyword">do</span> statement <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 首先执行，再检测循环条件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>	<span class="token comment">// 先初始化 &gt; 判断 &gt; 执行 &gt; 判断（循环）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意项：</p><ul><li>不成文的规则：for语句的3个部分应该对同一个计数器变量进行初始化、检测和更新。否则编写的循环常常晦涩难懂。</li><li>特别指出，如果在for语句内部定义一个变量（int i），这个变量就不能在循环体之外使用（java不能在块中重定义变量） 当然可以在各自独立的不同for循环中定义同名的变量 如果希望在for循环体之外使用循环计数器的最终值，就要确保这个变量在循环语句的前面且在外部声明</li></ul><h4 id="break-中断控制流程语句" tabindex="-1"><a class="header-anchor" href="#break-中断控制流程语句"><span>Break 中断控制流程语句</span></a></h4><p>[省略]，与用于退出switch语句的break语句一样</p><p>注意项：对于任何使用break语句的代码都需要检测循环是正常结束，还是由break跳出</p><h4 id="跳出多重嵌套" tabindex="-1"><a class="header-anchor" href="#跳出多重嵌套"><span>跳出多重嵌套</span></a></h4><p><mark>与C/C++不同</mark>：跳出多重嵌套</p><ul><li><p>Java还提供了一种带标签的break语句，用于跳出多重嵌套的循环语句。有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。</p><p>标签必须放在希望跳出的最外层循环之前，并且必须紧跟一个冒号</p><p>事实上，可以将标签应用到任何语句中，甚至可以应用到if语句或者块语句中。（可能可以用来模拟goto语句，但不建议那样做）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>read_data<span class="token operator">:</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span> read_data<span class="token punctuation">;</span>	<span class="token comment">// break out of read_data loop</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="continue-中断控制流程语句" tabindex="-1"><a class="header-anchor" href="#continue-中断控制流程语句"><span>continue 中断控制流程语句</span></a></h4><p>continue语句越过了当前循环体的剩余部分，立刻跳到循环首部</p><h3 id="for-each循环-通用for循环" tabindex="-1"><a class="header-anchor" href="#for-each循环-通用for循环"><span>for each循环（通用for循环）</span></a></h3><p><mark>与C/C++不同</mark>：高级循环</p><ul><li><p>Java（Java SE 5.0新增）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>variable<span class="token operator">:</span>collection<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> a<span class="token punctuation">)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></div></div></div><h3 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h3><ul><li>C、Java、Js： <ul><li><code>条件 ? true_exp : false_exp</code></li></ul></li><li>Python： <ul><li><code>true_exp if 条件 else false_exp</code></li></ul></li></ul>`,22),p=[l];function i(o,c){return n(),s("div",null,p)}const u=a(t,[["render",i],["__file","01. 结构化编程.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 结构化编程 Java的控制流程结构与C和C++的控制流程结构一样，只有很少的例外情况。 没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的（这种情况C语言采用goto语句实现）。 另外，还有一种变形的for循环，在C或C++中没有这类循环（C++11有）。它有点类似于C#中的foreach循环。 块（blo...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Java/04.%20%E4%BC%98%E5%8C%96/01.%20%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 结构化编程 Java的控制流程结构与C和C++的控制流程结构一样，只有很少的例外情况。 没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的（这种情况C语言采用goto语句实现）。 另外，还有一种变形的for循环，在C或C++中没有这类循环（C++11有）。它有点类似于C#中的foreach循环。 块（blo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"结构化编程","slug":"结构化编程","link":"#结构化编程","children":[{"level":2,"title":"块（block）作用域","slug":"块-block-作用域","link":"#块-block-作用域","children":[]},{"level":2,"title":"条件语句","slug":"条件语句","link":"#条件语句","children":[{"level":3,"title":"if、else if、else","slug":"if、else-if、else","link":"#if、else-if、else","children":[]},{"level":3,"title":"switch语句（多重选择）","slug":"switch语句-多重选择","link":"#switch语句-多重选择","children":[{"level":4,"title":"Break 中断控制流程语句","slug":"break-中断控制流程语句","link":"#break-中断控制流程语句","children":[]}]},{"level":3,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.27,"words":980},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Java/04. 优化/01. 结构化编程.md","excerpt":"\\n<h1>目录</h1>\\n<h1>结构化编程</h1>\\n<p>Java的控制流程结构与C和C++的控制流程结构一样，只有很少的例外情况。</p>\\n<p>没有goto语句，但break语句可以带标签，可以利用它实现从内层循环跳出的目的（这种情况C语言采用goto语句实现）。</p>\\n<p>另外，还有一种变形的for循环，在C或C++中没有这类循环（C++11有）。它有点类似于C#中的foreach循环。</p>\\n<h2>块（block）作用域</h2>\\n<p>（有时称为复合语句）</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};
