import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as t,a as l}from"./app-Bh75ISgc.js";const n={},a=l(`<h1 id="qt" tabindex="-1"><a class="header-anchor" href="#qt"><span>QT</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="交互类" tabindex="-1"><a class="header-anchor" href="#交互类"><span>交互类</span></a></h1><h2 id="qfile-文件读写操作" tabindex="-1"><a class="header-anchor" href="#qfile-文件读写操作"><span>QFile 文件读写操作</span></a></h2><h3 id="qfile-文件类" tabindex="-1"><a class="header-anchor" href="#qfile-文件类"><span>QFile 文件类</span></a></h3><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;QFile&gt;					// 头文件

// (1) 实例化部分 - 打开
if(!path.isEmpty()){				// 最好先判断下路径是否正确，也可配合QFileDialog获取路径
    QFile file(path);				// 实例化对象，参数为QString
    file.open(QIODevice::ReadOnly);	// 设置打开方式，只读，默认格式是utf-8（其他媒体值查手册\`Append\`追加）
}

// (2) 读取数据
QByteArray array = file.readAll();	// 读取数据 - 全部读入，返回QByteArray字节集
QByteArray array = file.readLine();	// 读取数据 - 按行读入，可配合循环使用while(!file.atEnd()){}

// (3) 读写数据
ui-&gt;textEdit-&gt;setText(array);
file.write(&quot;It is a append words.&quot;);// 可写时

// (4) 关闭
file.close();						// 手动关闭文件对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配合qfiledialog获取文件名" tabindex="-1"><a class="header-anchor" href="#配合qfiledialog获取文件名"><span>配合QFileDialog获取文件名</span></a></h3><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;QFileDialog&gt;											// 头文件 - 文件对话框
#include &lt;QFile&gt;												// 头文件 - 文件类

QString path = QFileDialog::getOpenFileName(this);				// 获取路径文件名

QFile file(path);												// 打开文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充：<code>getOpenFileName()</code>函数</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>QString QFileDialog::getOpenFileName(
    QWidget * parent = 0,					// 定义标准文件对话框的父窗口
    const QString &amp; caption = QString(),	// 定义标准文件对话框的标题名
    const QString &amp; dir = QString(),		// 默认路径
    const QString &amp; filter = QString(),		// 过滤文件类型，多种过滤器之间用;;隔开
    QString * selectedFilter = 0,			// 用户选择过滤器通过此参数返回
    Options options = 0
)
QString path = QFileDialog::getOpenFileName(this, &quot;打开文件&quot;, &quot;默认路径&quot;, &quot;(*.txt)&quot;);	// 举例
QStringList pathList = QFileDialog::getOpenFileNames(this);							// 批量获取路径文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="qtextcodec-编码格式类" tabindex="-1"><a class="header-anchor" href="#qtextcodec-编码格式类"><span>QTextCodec 编码格式类</span></a></h3><ul><li>编码问题 <ul><li>默认使用utf-8，也可手动指定</li><li>一般需要在打开文件前查看文件的编码格式信息</li></ul></li><li>头文件 <ul><li><code>#include &lt;QTextCodec&gt;</code></li></ul></li><li>使用 <ul><li>(1) 实例化编码格式类并指定编码格式，<code>QTextCodec *codec = QTextCodec::codecForName(&quot;gbk&quot;);</code></li><li>(2) 编码格式转换，例如<code>ui-&gt;textEidt-&gt;setText(codec-&gt;toUnicode(array));</code></li></ul></li></ul><h2 id="qtextstream-文本流" tabindex="-1"><a class="header-anchor" href="#qtextstream-文本流"><span>QTextStream 文本流</span></a></h2><p>读写文件的方法通常由两种：传统的QFile类方法、更为方便的QTextStream类方法</p><p>为读写文本提供了一个方便的接口</p><p><mark>详见《Qt5开发及实例》P240</mark></p><h2 id="qfileinfo-文件信息读取" tabindex="-1"><a class="header-anchor" href="#qfileinfo-文件信息读取"><span>QFileInfo 文件信息读取</span></a></h2><ul><li>头文件 <ul><li><code>#include &lt;QFileInfo&gt;</code></li></ul></li><li>使用 <ul><li>初始化：<code>QFileInfo infor(path);</code></li><li>使用示例 <ul><li><code>info.size()</code>，大小</li><li><code>info.suffix()</code>，后缀名</li></ul></li></ul></li><li>常用公有接口（具体查手册） <ul><li><code>bool isDir() const;</code>，是否目录</li><li><code>bool isExecutable() const;</code>，是否可执行</li><li><code>bool isFile() const;</code>，是否文件</li><li><code>bool isHidden() const;</code>，是否隐藏</li><li><code>bool isReadable() const;</code>，是否可读</li><li><code>QString fileName() const;</code>，文件名</li><li><code>QString filepath() const;</code>，文件路径</li><li><code>QString path() const;</code>，路径</li><li><code>QString suffix() const;</code>，后缀名</li><li><code>QDateTime created() const;</code>，创建日期</li><li><code>QDateTime lastModified() const;</code>，修改日期</li></ul></li></ul>`,18),d=[a];function c(o,s){return i(),t("div",null,d)}const p=e(n,[["render",c],["__file","01. 文件交互类.html.vue"]]),m=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/03.%20Qt%E5%85%B6%E4%BB%96%E7%B1%BB%EF%BC%88%E6%8C%89%E5%8A%9F%E8%83%BD%EF%BC%89/03.%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3/01.%20%E6%96%87%E4%BB%B6%E4%BA%A4%E4%BA%92%E7%B1%BB.html","title":"QT","lang":"zh-CN","frontmatter":{"description":"QT 目录 交互类 QFile 文件读写操作 QFile 文件类 配合QFileDialog获取文件名 补充：getOpenFileName()函数 QTextCodec 编码格式类 编码问题 默认使用utf-8，也可手动指定 一般需要在打开文件前查看文件的编码格式信息 头文件 #include <QTextCodec> 使用 (1) 实例化编码格式类...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/04.%20Project/Platform/Multi/QT%EF%BC%88Cpp%EF%BC%89/03.%20Qt%E5%85%B6%E4%BB%96%E7%B1%BB%EF%BC%88%E6%8C%89%E5%8A%9F%E8%83%BD%EF%BC%89/03.%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3/01.%20%E6%96%87%E4%BB%B6%E4%BA%A4%E4%BA%92%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"QT"}],["meta",{"property":"og:description","content":"QT 目录 交互类 QFile 文件读写操作 QFile 文件类 配合QFileDialog获取文件名 补充：getOpenFileName()函数 QTextCodec 编码格式类 编码问题 默认使用utf-8，也可手动指定 一般需要在打开文件前查看文件的编码格式信息 头文件 #include <QTextCodec> 使用 (1) 实例化编码格式类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"QT\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"QT","slug":"qt","link":"#qt","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"交互类","slug":"交互类","link":"#交互类","children":[{"level":2,"title":"QFile 文件读写操作","slug":"qfile-文件读写操作","link":"#qfile-文件读写操作","children":[{"level":3,"title":"QFile 文件类","slug":"qfile-文件类","link":"#qfile-文件类","children":[]},{"level":3,"title":"配合QFileDialog获取文件名","slug":"配合qfiledialog获取文件名","link":"#配合qfiledialog获取文件名","children":[]},{"level":3,"title":"QTextCodec 编码格式类","slug":"qtextcodec-编码格式类","link":"#qtextcodec-编码格式类","children":[]}]},{"level":2,"title":"QTextStream 文本流","slug":"qtextstream-文本流","link":"#qtextstream-文本流","children":[]},{"level":2,"title":"QFileInfo 文件信息读取","slug":"qfileinfo-文件信息读取","link":"#qfileinfo-文件信息读取","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.05,"words":614},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/04. Project/Platform/Multi/QT（Cpp）/03. Qt其他类（按功能）/03. 文件与磁盘相关/01. 文件交互类.md","autoDesc":true}');export{p as comp,m as data};
