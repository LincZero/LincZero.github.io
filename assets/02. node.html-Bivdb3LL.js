import{_ as s,c as a,e,o as t}from"./app-TEGfglWE.js";const p="/assets/image-20220621135448340-ynKD4XSg.png",o={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="blender-source-code-analysis" tabindex="-1"><a class="header-anchor" href="#blender-source-code-analysis"><span>Blender Source Code Analysis</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="node" tabindex="-1"><a class="header-anchor" href="#node"><span>Node</span></a></h1><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>Socket</span></a></h2><h3 id="枚举定义-dna-node-types-h" tabindex="-1"><a class="header-anchor" href="#枚举定义-dna-node-types-h"><span>枚举定义 DNA_node_types.h</span></a></h3><p>blender-master/source/blender/makesdna/DNA_node_types.h</p><p>573行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* socket value structs for input buttons
 * DEPRECATED now using ID properties
 */</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueInt</span> <span class="token punctuation">{</span>
  <span class="token comment">/** RNA subtype. */</span>
  <span class="token keyword">int</span> subtype<span class="token punctuation">;</span>
  <span class="token keyword">int</span> value<span class="token punctuation">;</span>
  <span class="token keyword">int</span> min<span class="token punctuation">,</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueInt<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueFloat</span> <span class="token punctuation">{</span>
  <span class="token comment">/** RNA subtype. */</span>
  <span class="token keyword">int</span> subtype<span class="token punctuation">;</span>
  <span class="token keyword">float</span> value<span class="token punctuation">;</span>
  <span class="token keyword">float</span> min<span class="token punctuation">,</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueFloat<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueBoolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueBoolean<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueVector</span> <span class="token punctuation">{</span>
  <span class="token comment">/** RNA subtype. */</span>
  <span class="token keyword">int</span> subtype<span class="token punctuation">;</span>
  <span class="token keyword">float</span> value<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> min<span class="token punctuation">,</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueVector<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueRGBA</span> <span class="token punctuation">{</span>
  <span class="token keyword">float</span> value<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueRGBA<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueString</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> subtype<span class="token punctuation">;</span>
  <span class="token keyword">char</span> _pad<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/** 1024 = FILEMAX. */</span>
  <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueString<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueObject</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Object</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueObject<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueImage</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Image</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueImage<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueCollection</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Collection</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueCollection<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueTexture</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Tex</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueTexture<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueMaterial</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Material</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> bNodeSocketValueMaterial<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* 输入按钮的套接字值结构 
 * 不赞成现在使用ID属性 
 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueInt</span>			<span class="token comment">// 整数</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueFloat</span>		<span class="token comment">// 浮点</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueBoolean</span>		<span class="token comment">// 布尔</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueVector</span>		<span class="token comment">// 矢量</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueRGBA</span>			<span class="token comment">// RBGA</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueString</span>		<span class="token comment">// 字符串</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueObject</span>		<span class="token comment">// 对象</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueImage</span>		<span class="token comment">// 图像</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueCollection</span>	<span class="token comment">//</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueTexture</span>		<span class="token comment">// 贴图</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNodeSocketValueMaterial</span>		<span class="token comment">// 材质</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算节点与矢量运算节点" tabindex="-1"><a class="header-anchor" href="#运算节点与矢量运算节点"><span>运算节点与矢量运算节点</span></a></h2><h3 id="截图" tabindex="-1"><a class="header-anchor" href="#截图"><span>截图</span></a></h3><p><img src="`+p+`" alt="image-20220621135448340" loading="lazy"></p><h3 id="枚举判断-node-texture-math-c、nod-math-functions-hh" tabindex="-1"><a class="header-anchor" href="#枚举判断-node-texture-math-c、nod-math-functions-hh"><span>枚举判断 node_texture_math.c、NOD_math_functions.hh</span></a></h3><p>blender-master/source/blender/nodes/texture/nodes/node_texture_math.c</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">valuefn</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> TexParams <span class="token operator">*</span>p<span class="token punctuation">,</span> bNode <span class="token operator">*</span>node<span class="token punctuation">,</span> bNodeStack <span class="token operator">*</span><span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token keyword">short</span> thread<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">float</span> in0 <span class="token operator">=</span> <span class="token function">tex_input_value</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span> in1 <span class="token operator">=</span> <span class="token function">tex_input_value</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>custom1<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">case</span> NODE_MATH_ADD<span class="token operator">:</span>
      <span class="token operator">*</span>out <span class="token operator">=</span> in0 <span class="token operator">+</span> in1<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_MATH_SUBTRACT<span class="token operator">:</span>
      <span class="token operator">*</span>out <span class="token operator">=</span> in0 <span class="token operator">-</span> in1<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_MATH_MULTIPLY<span class="token operator">:</span>
      <span class="token operator">*</span>out <span class="token operator">=</span> in0 <span class="token operator">*</span> in1<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_MATH_DIVIDE<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>in1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* We don&#39;t want to divide by zero. */</span>
        <span class="token operator">*</span>out <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>out <span class="token operator">=</span> in0 <span class="token operator">/</span> in1<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
          
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>custom2 <span class="token operator">&amp;</span> SHD_MATH_CLAMP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">CLAMP</span><span class="token punctuation">(</span><span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>blender-master/source/blender/nodes/NOD_math_functions.hh</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_ADD<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_SUBTRACT<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_MULTIPLY<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_DIVIDE<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">safe_divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_CROSS_PRODUCT<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">cross_high_precision</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_PROJECT<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">project</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_REFLECT<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">reflect</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">normalize</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_SNAP<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span>
                      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">safe_divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_MODULO<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_slow<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">mod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_MINIMUM<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> NODE_VECTOR_MATH_MAXIMUM<span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>exec_preset_fast<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>float3 a<span class="token punctuation">,</span> float3 b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> false<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举定义-dna-node-types-h-1" tabindex="-1"><a class="header-anchor" href="#枚举定义-dna-node-types-h-1"><span>枚举定义 DNA_node_types.h</span></a></h3><p>blender-master/source/blender/makesdna/DNA_node_types.h</p><p>252行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/** TODO: Limit data in #bNode to what we want to see saved. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">bNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">bNode</span> <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>

  <span class="token comment">/** User-defined properties. */</span>
  IDProperty <span class="token operator">*</span>prop<span class="token punctuation">;</span>

  <span class="token comment">/** Runtime type information. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">bNodeType</span> <span class="token operator">*</span>typeinfo<span class="token punctuation">;</span>
  <span class="token comment">/** Runtime type identifier. */</span>
  <span class="token keyword">char</span> idname<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/** MAX_NAME. */</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> flag<span class="token punctuation">;</span>
  <span class="token keyword">short</span> type<span class="token punctuation">;</span>
  <span class="token comment">/** Both for dependency and sorting. */</span>
  <span class="token keyword">short</span> done<span class="token punctuation">,</span> level<span class="token punctuation">;</span>

  <span class="token comment">/** Used as a boolean for execution. */</span>
  <span class="token class-name">uint8_t</span> need_exec<span class="token punctuation">;</span>
  <span class="token keyword">char</span> _pad2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/** Custom user-defined color. */</span>
  <span class="token keyword">float</span> color<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  ListBase inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">;</span>
  <span class="token comment">/** Parent node. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">bNode</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>
  <span class="token comment">/** Optional link to libdata. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">ID</span> <span class="token operator">*</span>id<span class="token punctuation">;</span>
  <span class="token comment">/** Custom data, must be struct, for storage in file. */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>storage<span class="token punctuation">;</span>
  <span class="token comment">/** The original node in the tree (for localized tree). */</span>
  <span class="token keyword">struct</span> <span class="token class-name">bNode</span> <span class="token operator">*</span>original<span class="token punctuation">;</span>
  <span class="token comment">/** List of cached internal links (input to output), for muted nodes and operators. */</span>
  ListBase internal_links<span class="token punctuation">;</span>

  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
  <span class="token comment">/** To be abused for buttons. */</span>
  <span class="token keyword">short</span> custom1<span class="token punctuation">,</span> custom2<span class="token punctuation">;</span>
  <span class="token keyword">float</span> custom3<span class="token punctuation">,</span> custom4<span class="token punctuation">;</span>
    
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      
<span class="token punctuation">}</span> bNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1665行</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">NodeMathOperation</span> <span class="token punctuation">{</span>
  NODE_MATH_ADD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  NODE_MATH_SUBTRACT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  NODE_MATH_MULTIPLY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  NODE_MATH_DIVIDE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
  NODE_MATH_SINE <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
  NODE_MATH_COSINE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  NODE_MATH_SMOOTH_MAX <span class="token operator">=</span> <span class="token number">39</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> NodeMathOperation<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">NodeVectorMathOperation</span> <span class="token punctuation">{</span>
  NODE_VECTOR_MATH_ADD <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_SUBTRACT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_MULTIPLY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_DIVIDE <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>

  NODE_VECTOR_MATH_CROSS_PRODUCT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_PROJECT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_REFLECT <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>
  NODE_VECTOR_MATH_DOT_PRODUCT <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  NODE_VECTOR_MATH_MULTIPLY_ADD <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> NodeVectorMathOperation<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-h" tabindex="-1"><a class="header-anchor" href="#node-h"><span>Node.h</span></a></h2><p>blender-master/intern/cycles/graph/node.h</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
  explicit <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">const</span> NodeType <span class="token operator">*</span>type<span class="token punctuation">,</span> ustring name <span class="token operator">=</span> <span class="token function">ustring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  virtual <span class="token operator">~</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">/* set values */</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> bool value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> uint value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token keyword">float</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> float2 value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> float3 value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> ustring value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> Transform <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">const</span> SocketType <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> Node <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const i=s(o,[["render",c],["__file","02. node.html.vue"]]),k=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/05.%20Source%20code%20analysis/Blender/02.%20node.html","title":"Blender Source Code Analysis","lang":"zh-CN","frontmatter":{"description":"Blender Source Code Analysis 目录 Node Socket 枚举定义 DNA_node_types.h blender-master/source/blender/makesdna/DNA_node_types.h 573行 译 运算节点与矢量运算节点 截图 image-20220621135448340 枚举判断 node...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/05.%20Source%20code%20analysis/Blender/02.%20node.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Blender Source Code Analysis"}],["meta",{"property":"og:description","content":"Blender Source Code Analysis 目录 Node Socket 枚举定义 DNA_node_types.h blender-master/source/blender/makesdna/DNA_node_types.h 573行 译 运算节点与矢量运算节点 截图 image-20220621135448340 枚举判断 node..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Blender Source Code Analysis\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Blender Source Code Analysis","slug":"blender-source-code-analysis","link":"#blender-source-code-analysis","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"Node","slug":"node","link":"#node","children":[{"level":2,"title":"Socket","slug":"socket","link":"#socket","children":[{"level":3,"title":"枚举定义 DNA_node_types.h","slug":"枚举定义-dna-node-types-h","link":"#枚举定义-dna-node-types-h","children":[]}]},{"level":2,"title":"运算节点与矢量运算节点","slug":"运算节点与矢量运算节点","link":"#运算节点与矢量运算节点","children":[{"level":3,"title":"截图","slug":"截图","link":"#截图","children":[]},{"level":3,"title":"枚举判断 node_texture_math.c、NOD_math_functions.hh","slug":"枚举判断-node-texture-math-c、nod-math-functions-hh","link":"#枚举判断-node-texture-math-c、nod-math-functions-hh","children":[]},{"level":3,"title":"枚举定义 DNA_node_types.h","slug":"枚举定义-dna-node-types-h-1","link":"#枚举定义-dna-node-types-h-1","children":[]}]},{"level":2,"title":"Node.h","slug":"node-h","link":"#node-h","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.68,"words":803},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/05. Source code analysis/Blender/02. node.md","excerpt":"\\n<h1>目录</h1>\\n<h1>Node</h1>\\n<h2>Socket</h2>\\n<h3>枚举定义 DNA_node_types.h</h3>\\n<p>blender-master/source/blender/makesdna/DNA_node_types.h</p>\\n<p>573行</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token comment\\">/* socket value structs for input buttons\\n * DEPRECATED now using ID properties\\n */</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueInt</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">/** RNA subtype. */</span>\\n  <span class=\\"token keyword\\">int</span> subtype<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">int</span> min<span class=\\"token punctuation\\">,</span> max<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueInt<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueFloat</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">/** RNA subtype. */</span>\\n  <span class=\\"token keyword\\">int</span> subtype<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">float</span> value<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">float</span> min<span class=\\"token punctuation\\">,</span> max<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueFloat<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueBoolean</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">char</span> value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueBoolean<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueVector</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">/** RNA subtype. */</span>\\n  <span class=\\"token keyword\\">int</span> subtype<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">float</span> value<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">float</span> min<span class=\\"token punctuation\\">,</span> max<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueVector<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueRGBA</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">float</span> value<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueRGBA<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueString</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">int</span> subtype<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">char</span> _pad<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">/** 1024 = FILEMAX. */</span>\\n  <span class=\\"token keyword\\">char</span> value<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueString<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueObject</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Object</span> <span class=\\"token operator\\">*</span>value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueObject<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueImage</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Image</span> <span class=\\"token operator\\">*</span>value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueImage<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueCollection</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Collection</span> <span class=\\"token operator\\">*</span>value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueCollection<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueTexture</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Tex</span> <span class=\\"token operator\\">*</span>value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueTexture<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">typedef</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">bNodeSocketValueMaterial</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Material</span> <span class=\\"token operator\\">*</span>value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span> bNodeSocketValueMaterial<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{i as comp,k as data};
