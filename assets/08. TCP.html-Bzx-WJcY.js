import{_ as a,c,e as o,a as e,o as s}from"./app-CZqDObZ4.js";const n={};function d(i,l){return s(),c("div",null,l[0]||(l[0]=[o('<h1 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><ol><li>提供面向连接的、可靠的字节流服务</li><li>上层应用数据被 TCP 分割为 TCP 认为合适的报文段</li><li>使用超时重传机制，而接收到一个TCP数据后需要发送一个确认</li><li>使用包含了首部和数据的校验和来检查数据是否在传输过程中发生了差错</li><li>可以将失序的报文重新排序</li><li>连接的每一端都有固定大小的缓冲区，只允许另一端发送发送接收缓冲区所能接纳的数据</li><li>提供面向字节流的服务，不在字节流中插入记录标识符，也不对字节流的内容作任何解释（由上层应用解释）</li></ol><h3 id="格式" tabindex="-1"><a class="header-anchor" href="#格式"><span>格式</span></a></h3><p>首部格式：</p><p><code>TCP</code>数据也是封装在<code>IP</code>数据报中，<code>TCP</code>首部格式如下图所示：</p><p>![tcp header](08. TCP.assets/TCP-header.jpg)</p><p>其中，</p><ul><li>序列号：用于对报文进行计数（注<code>SYN</code>和<code>FIN</code>都会消耗一个序列号），<code>TCP</code>为应用层提供全双工服务，连接的每一端都要保持每个方向上的传输序列号</li><li><code>SYN</code>：用来发起一个连接，当新建一个链接时，<code>SYN</code>变为1</li><li><code>ACK</code>：确认序号有效，其序列号为上次接收的序号加1</li><li>首部长度：首部中32bit的长度（最多60字节），如果没有任选字段，长度为20字节</li><li><code>URG</code>：标志紧急指针有效</li><li><code>PSH</code>：接收方应该尽快将这个报文交给应用层</li><li><code>RST</code>：重建连接</li><li><code>FIN</code>：发端完成发送任务</li><li>窗口大小：用于<code>TCP</code>的流量控制，最大<code>65535字节</code></li><li>检验和：覆盖首部和数据，由发端计算和存储，接收端验证</li><li>紧急指针：只有当<code>URG</code>为1时才有效，用于发送紧急数据</li><li>数据部分是可选的，在连接建立和终止时，双方交换的报文中只有<code>TCP</code>首部</li></ul><p><code>TCP</code>可以表述为一个没有选择确认或否认的滑动窗口协议（滑动窗口协议用于数据传输）。我们说TCP缺少选择确认是因为<code>TCP</code>首部中的确认序号表示发方已成功收到字节，但还不包含确认序号所指的字节。当前还无法对数据流中选定的部分进行确认。例如，如果<code>1～1024</code>字节已经成功收到，下一报文段中包含序号从<code>2049～3072</code>的字节，收端并不能确认这个新的报文段。它所能做的就是发回一个确认序号为<code>1025</code>的<code>ACK</code>。它也无法对一个报文段进行否认。例如，如果收到包含<code>1025～2048</code>字节的报文段，但它的检验和错，<code>TCP</code>接收端所能做的就是发回一个确认序号为<code>1025</code>的<code>ACK</code>。</p><h3 id="连接过程" tabindex="-1"><a class="header-anchor" href="#连接过程"><span>连接过程</span></a></h3><p>![TCP connection process](08. TCP.assets/TCP-connection-process.jpeg)</p><p>![tcp connection process by wireshark](08. TCP.assets/TCP-connection-process-wireshark.png)</p><p>上图由<code>wireshark</code>抓取，并显示了TCP状态图</p><p>根据上图可以看到建立一个<code>TCP</code>连接的过程为（三次握手的过程）：</p><ol><li>客户端向服务器端发送一个<code>SYN</code>请求，同时传送一个初始序列号（<code>ISN</code>）；</li><li>服务器发回包含客户端初始序列号的<code>SYN</code>报文段作为应答，同时将ACK序号设置为<code>ISN+1</code>；</li><li>客户端向服务器发送一个<code>ACK</code>确认，<code>ACK</code>序号为<code>ISN+1</code>.</li></ol><p>终止一个<code>TCP</code>连接需要4次握手，这是由于<code>TCP</code>的半关闭（当一方调用shutdown关闭连接后，另一端还是可以发送数据，典型的例子为rsh）导致的：<code>TCP</code>连接是全双工的，连接的每一端在关闭连接时都向对方发送一个<code>FIN</code>来终止连接，同时对方会对其进行确认（回复<code>ACK</code>）。通常，都是一方完成主动关闭，另一方来完成被动关闭：</p><ol><li>以上面的抓包为例，客户端向服务器发送了一个<code>FIN</code>（NO. 6）；</li><li>服务器端对上面的<code>FIN</code>进行确认（NO. 7），同时向客户端发送一个FIN（这儿其实是两个动作，一个是对上面FIN的ACK，另一个是发送一个<code>FIN</code>，但由于<code>TCP</code>的捎带<code>ACK</code>机制，两者放在一个包里发送了）；</li><li>客户端对服务器端的FIN进行确认（NO. 8）。</li></ol><h2 id="mss" tabindex="-1"><a class="header-anchor" href="#mss"><span>MSS</span></a></h2><p>最大报文长度（<code>MSS</code>）表示TCP传往另一端的最大块数据的长度。<code>MSS</code>在连接建立时传送给对方，只会出现在<code>SYN</code>报文段中。</p><p><code>MSS</code>让主机限制另一端发送数据报的长度。</p><h2 id="tcp状态变迁图" tabindex="-1"><a class="header-anchor" href="#tcp状态变迁图"><span>TCP状态变迁图</span></a></h2><p>![TCP state](08. TCP.assets/TCP-state.png)</p><h2 id="复位报文段" tabindex="-1"><a class="header-anchor" href="#复位报文段"><span>复位报文段</span></a></h2><ol><li>当连接到一个不在监听的端口时，客户端回收到一个<code>RST</code>响应（<code>UDP</code>连接到一个不存在的端口时会产生一个<code>ICMP</code>端口不可达的差错）。</li><li>在连接终止时，也可以通过发送一个复位报文段而不是FIN来终止连接，可通过设置<code>SO_LINGER</code>来这么做。</li><li>可通过<code>TCP</code>的<code>SO_KEEPALIVE</code>选项来检测半打开连接，当检测到这种连接时会发送一个<code>RST</code>报文。关于该选项更多的内容参见http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/。</li></ol><p><strong>SO_LINGER 选项</strong></p><p>此选项指定函数<code>close</code>对面向连接的协议如何操作（如<code>TCP</code>）。内核缺省<code>close</code>操作是立即返回，如果有数据残留在套接口缓冲区中则系统将试着将这些数据发送给对方。</p><h2 id="nagle-算法" tabindex="-1"><a class="header-anchor" href="#nagle-算法"><span>Nagle 算法</span></a></h2><p>前面可以看到，<code>TCP</code>交互的双方每次发送数据的时候（即便是只有一个字节的数据），都需要产生一个（数据长度+40字节）的分组。当数据的长度远小于40字节时，网络的实际利用率其实很低，并且大量的小分组也会增加拥塞的可能。</p><p><code>Nagle</code>算法正是解决了该问题。它要求一个<code>TCP</code>连接上最多只能有一个未被确认的未完成的小分组，在该分组的确认到达之前不能发送其他的小分组。TCP收集这些小的分组，并在确认到来时以一个分组的形式发出去。其特点是：确认到达的越快，数据也就发送的越快，并可以发送更少的分组。</p><p><code>TCP</code>连接的过程中，默认开启<code>Nagle</code>算法，进行小包发送的优化。优化网络传输，兼顾网络延时和网络拥塞。</p><p><code>Nagle</code>虽然解决了小封包问题，但也导致了较高的不可预测的延迟，同时降低了吞吐量。这个时候可以置位<code>TCP_NODELAY</code>关闭 <code>Nagle</code>算法，有数据包的话直接发送保证网络时效性。</p><p>在进行大量数据发送的时候可以置位<code>TCP_CORK</code>关闭<code>Nagle</code>算法保证网络利用性。尽可能的进行数据的组包，以最大<code>mtu</code>传输，如果发送的数据包大小过小则如果在<code>0.6~0.8S</code>范围内都没能组装成一个MTU时，直接发送。如果发送的数据包大小足 够间隔在<code>0.45</code>内时，每次组装一个<code>MTU</code>进行发送。如果间隔大于<code>0.4~0.8S</code>则，每过来一个数据包就直接发送。</p><p><code>Nagle</code>算法和<code>CORK</code>算法非常类似，但是它们的着眼点不一样，<code>Nagle</code>算法主要避免网络因为太多的小包（协议头的比例非常之大）而拥塞，而<code>CORK</code>算法则是为了提高网络的利用率，使得总体上协议头占用的比例尽可能的小。如此看来这二者在避免发送小包上是一致的，在用户控制的层面上，<code>Nagle</code>算法完全不受用户<code>socket</code>的控制，你只能简单的设置<code>TCP_NODELAY</code>而禁用它，<code>CORK</code>算法同样也是通过设置或者清除<code>TCP_CORK</code>使能或者禁用之，然而<code>Nagle</code>算法关心的是网络拥塞问题，只要所有的<code>ACK</code>回来则发包，而<code>CORK</code>算法却可以关心内容，在前后数据包发送间隔很短的前提下（很重要，否则内核会帮你将分散的包发出），即使你是分散发送多个小数据包，你也可以通过使能<code>CORK</code>算法将这些内容拼接在一个包内，如果此时用<code>Nagle</code>算法的话，则可能做不到这一点。</p><h2 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive"><span>Keepalive</span></a></h2><ol><li><code>Keepalive</code>定时器用于用于检测空闲连接的另一端是否崩溃或重启。</li><li>设置<code>SO_KEEPALIVE</code>选项后，如果2小时内在此套接口的任一方向都没有数据交换，<code>TCP</code>就自动给对方 发一个保持存活探测报文段，客户主机处于以下4种状态之一： （1）客户主机接收一切正常，服务器收到期望的ACK响应，并将<code>keepalive</code>定时器复位。 （2）客户主机已崩溃，并且关闭或者正在重启。此时，服务器无法收到相应，在75s后超时。服务器=总共发出10个这样的探查，每个间隔75秒。如果一个响应都没有收到，则终止连接。 （3）客户主机已重启，此时服务器将收到一个复位响应，终止连接。 （4）客户主机正常运行，但服务不可达，同（2）。</li><li><code>keepalive</code>定时器默认2小时的间隔备受争议，通常应用上需要的时间要比2小时短的多。并且，当系统关闭一个由<code>KEEPALIVE</code>机制检查出来的死连接时，是不会主动通知上层应用的，只有在调用相应的IO操作在返回值中检查出来。因此，如果上层应用需要保活机制，最好还是自己实现。</li></ol><h2 id="tcp的路径mtu探测" tabindex="-1"><a class="header-anchor" href="#tcp的路径mtu探测"><span>TCP的路径MTU探测</span></a></h2><ol><li>根据自身<code>MTU</code>及对方<code>SYN</code>中携带的MSS确定发送报文数据部分的最大容量（如果对方没有指定<code>MSS</code>，则默认为536）;</li><li>在<code>IP</code>头部打开<code>DF</code>标志位;</li><li>如果收到ICMP错误信息告知需要分片, 如果ICMP信息中包含下一跳<code>MTU</code>的信息, 那么根据这个值调整数据的最大容量, 如果ICMP信息中不支持这种新协议(下一跳<code>MTU</code>值为0), 那么调整数据的最大容量至下一个可能的大小;</li><li>DF标志位会一直打开, 以保证能够测量得到正确的<code>Path MTU</code>;</li><li>超时后会重新探询<code>Path MTU</code>以保证链路改变也能用到正确的<code>Path MTU</code>.</li></ol><p><code>TCP Path MTU</code>探询的好处是:</p><ol><li>避免在通过<code>MTU</code>小于576的中间链路时进行分片;</li><li>防止中部链路的某些网络的<code>MTU</code>小于通信两端所在网络的<code>MTU</code>时进行分片;</li><li>充分利用链路的吞吐量.</li></ol><h2 id="长肥管道" tabindex="-1"><a class="header-anchor" href="#长肥管道"><span>长肥管道</span></a></h2><p>带宽延时积很大的网络叫做长肥网络 (<code>LFN</code>, <code>long fat network</code>，单位为字节)，在LFN上建立的TCP链接叫做长肥管.</p><p>长肥管道带来的一些问题：</p><ol><li>长肥管的带宽延时积很大, TCP 头部的窗口大小字段只能最多声明 <code>65535(2^16)</code> 字节大小的窗口, 因此不能充分利用网络, 由此提出了窗口扩大选项以声明更大的窗口.</li><li>由于长肥管的延时较高, 出现丢包的情况会使得管道枯竭(即网络通信速度急剧下降), 快重传快恢复算法就是用以削弱这一问题的影响, <code>SACK</code>选项也有使用.</li><li>为了提高长肥管的吞吐量, 长肥管一般声明很大的窗口值, 而这样不利于RTT的测量(因为<code>TCP</code>只有一个<code>RTT</code>计时器, 启动<code>RTT</code>计时的数据在没有被<code>ACK</code>前, <code>TCP</code>无法进行下一次<code>RTT</code>的测量, 而由于发送延时一般大于传播延时, 所以<code>TCP</code>往往是发送完一个窗口的数据计算一次<code>RTT</code>), 所以需要引入时间戳选项提高测试RTT的频率.</li><li>由于长肥管的发送速度非常快, 所以导致很短时间内数据的序号就会重复(在<code>gigabit</code>网络只需要34秒就会出现序号重复). 因此引入PAWS算法应对这种情况.</li></ol><h2 id="超时重传" tabindex="-1"><a class="header-anchor" href="#超时重传"><span>超时重传</span></a></h2><h3 id="四个定时器" tabindex="-1"><a class="header-anchor" href="#四个定时器"><span>四个定时器</span></a></h3><p>对每个连接，<code>TCP</code>管理4个定时器：</p><ol><li><code>重传定时器</code>：用于等待另一端的确认；</li><li><code>persist定时器</code>：用于使窗口大小信息保持不断流动，即使另一端关闭了其接收窗口；</li><li><code>keepalive定时器</code>：用于检测空闲连接的另一端是否崩溃或重启；</li><li><code>2MSL定时器</code>：用于测量一个处于TIME_WAIT状态连接的时间</li></ol><h3 id="超时与重传递时间间隔" tabindex="-1"><a class="header-anchor" href="#超时与重传递时间间隔"><span>超时与重传递时间间隔</span></a></h3><ul><li>超时时间可以应用程序设置（<code>SO_RCVTIMEO</code>，<code>SO_SNDTIMEO</code>），而重试的时间采用指数退避的方式，即每次重试的时间间隔为上次的2倍。在目前的实现中，首次分组传输与复位信号传输的时间间隔为9分钟。</li></ul><h3 id="往返时间rtt的测量" tabindex="-1"><a class="header-anchor" href="#往返时间rtt的测量"><span>往返时间RTT的测量</span></a></h3><p>平滑的<code>RTT</code>估计器：<code>R=alpha*R+(1-alpha)*M</code>，其中<code>alpha=0.9</code>，<code>M</code>是<code>ACK</code>测量到的<code>RTT</code></p><p>重传超时时间的计算:</p><p>最初 <code>RTO=R*beta</code>，<code>beta=2</code>，但该方法在 RTT 变化很大时会引起不必要的重传</p><p>使用均值和方差来计算 RTO：</p>',56),e("p",{class:"katex-block"},[e("span",{class:"katex-display"},[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[e("semantics",null,[e("mrow",null,[e("mi",null,"E"),e("mi",null,"r"),e("mi",null,"r"),e("mo",null,"="),e("mi",null,"M"),e("mo",null,"−"),e("mi",null,"A"),e("mspace",{linebreak:"newline"}),e("mi",null,"A"),e("mo",null,"="),e("mi",null,"A"),e("mo",null,"+"),e("mi",null,"g"),e("mi",null,"E"),e("mi",null,"r"),e("mi",null,"r"),e("mspace",{linebreak:"newline"}),e("mi",null,"D"),e("mo",null,"="),e("mi",null,"D"),e("mo",null,"+"),e("mi",null,"h"),e("mo",null,"∗"),e("mo",{stretchy:"false"},"("),e("mi",{mathvariant:"normal"},"∣"),e("mi",null,"E"),e("mi",null,"r"),e("mi",null,"r"),e("mi",{mathvariant:"normal"},"∣"),e("mo",null,"−"),e("mi",null,"D"),e("mo",{stretchy:"false"},")"),e("mspace",{linebreak:"newline"}),e("mi",null,"R"),e("mi",null,"T"),e("mi",null,"O"),e("mo",null,"="),e("mi",null,"A"),e("mo",null,"+"),e("mn",null,"4"),e("mi",null,"D"),e("mspace",{linebreak:"newline"})]),e("annotation",{encoding:"application/x-tex"},"Err=M-A\\\\ A=A+gErr\\\\ D=D+h*(|Err|-D)\\\\ RTO=A+4D\\\\ ")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"rr"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"−"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord mathnormal"},"A")]),e("span",{class:"mspace newline"}),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord mathnormal"},"A"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal"},"A"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8778em","vertical-align":"-0.1944em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"rr")]),e("span",{class:"mspace newline"}),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6944em"}}),e("span",{class:"mord mathnormal"},"h"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"∗"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mopen"},"("),e("span",{class:"mord"},"∣"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"rr"),e("span",{class:"mord"},"∣"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"−"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),e("span",{class:"mclose"},")")]),e("span",{class:"mspace newline"}),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"RTO"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),e("span",{class:"mord mathnormal"},"A"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6833em"}}),e("span",{class:"mord"},"4"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D")]),e("span",{class:"mspace newline"})])])])],-1),o('<p>其中， <code>A</code>和<code>D</code>分别被初始化为<code>0</code>和<code>3</code>，<code>RTO</code>初始化为<code>A+2D=6</code> 只有数据报文段才会被计时，不对单纯的<code>ACK</code>计时</p><h3 id="重传的多义性问题-karn-算法" tabindex="-1"><a class="header-anchor" href="#重传的多义性问题-karn-算法"><span>重传的多义性问题（Karn 算法）</span></a></h3><p>当一个超时和重传发生时，在重传数据的确认最后到达之前不能更新<code>RTT</code>估计器，因为我们不知道<code>ACK</code>对应哪次传输。并且，由于数据重传，<code>RTO</code>已经得到一个指数退避，下次传输的时候使用这个退避后的<code>RTO</code>。对一个没有被重传的报文段而言，除非收到了一个确认，否则不计算新的<code>RTO</code>。</p><h3 id="拥塞避免算法" tabindex="-1"><a class="header-anchor" href="#拥塞避免算法"><span>拥塞避免算法</span></a></h3><p>慢启动算法是在一个连接上发起数据流的方法，但有时分组回达到中间路由的极限。拥塞避免算法是一种处理丢失分组的方法。该算法假设分组由于损坏引起的丢失是非常少的，因此分组丢失就意味着源主机和目的主机的某处网络发生了拥塞。</p><p>有两种分组丢失的指示：发生超时、接收到重复的确认。</p><p>拥塞避免算法通常与慢启动算法同时实现，它们需要对每个连接维护两个变量：拥塞窗口<code>cwnd</code>和慢启动门限<code>ssthresh</code>。这样，算法的过程如下： 1) 对一个给定的连接，初始化<code>cwnd</code>为<code>1个报文段</code>，<code>ssthresh</code>为<code>65535个字节</code>。 2) <code>TCP</code>输出例程的输出不能超过<code>cwnd</code>和接收方通告窗口的大小。拥塞避免是发送方使用的流量控制，而通告窗口则是接收方进行的流量控制。前者是发送方感受到的网络拥塞的估计，而后者则与接收方在该连接上的可用缓存大小有关。 3) 当拥塞发生时（超时或收到重复确认），<code>ssthresh</code>被设置为当前窗口大小的一半（ <code>cwnd</code>和接收方通告窗口大小的最小值，但最少为 2个报文段）。此外，如果是超时引起了拥塞，则<code>cwnd</code>被设置为1个报文段（这就是慢启动）。 4) 当新的数据被对方确认时，就增加<code>cwnd</code>，但增加的方法依赖于我们是否正在进行慢启动或拥塞避免。如果 <code>cwnd</code>小于或等于<code>ssthresh</code>，则正在进行慢启动，否则正在进行拥塞避免。启动一直持续到我们回到当拥塞发生时所处位置的半时候才停止（因为我们记录了在步骤 2中给我们制造麻烦的窗口大小的一半），然后转为执行拥塞避免。</p><p>慢启动算法初始设置 <code>cwnd</code>为1个报文段，此后每收到一个确认就加 1。这会使窗口按指数方式增长：发送1个报文段，然后是2个，接着是4个……。</p><p>拥塞避免算法要求每次收到一个确认时将 <code>cwnd</code>增加1 /<code>cwnd</code>。与慢启动的指数增加比起来，这是一种加性增长(<code>additive increase</code>)。我们希望在一个往返时间内最多为<code>cwnd</code>增加1个报文段（不管在这个<code>RTT</code>中收到了多少个ACK），然而慢启动将根据这个往返时间中所收到的确认的个数增加<code>cwnd</code>。</p><p>术语 “慢启动” 并不完全正确。它只是采用了比引起拥塞更慢些的分组传输速率，但在慢启动期间进入网络的分组数增加的速率仍然是在增加的。只有在达到ssthresh拥塞避免算法起作用时，这种增加的速率才会慢下来。</p><h3 id="快速重传算法" tabindex="-1"><a class="header-anchor" href="#快速重传算法"><span>快速重传算法</span></a></h3><p>拥塞避免算法的修改建议1990年提出 [Jacobson 1990b]。 在介绍修改之前，我们认识到在收到一个失序的报文段时， TCP 立即需要产生一个 ACK（一个重复的<code>ACK</code>）。这个重复的<code>ACK</code>不应该被迟延。该重复的<code>ACK</code>的目的在于让对方知道收到一个失序的报文段，并告诉对方自己希望收到的序号。 由于我们不知道一个重复的<code>ACK</code>是由一个丢失的报文段引起的，还是由于仅仅出现了几个报文段的重新排序，因此我们等待少量重复的 ACK 到来。假如这只是一些报文段的重新排序，则在重新排序的报文段被处理并产生一个新的<code>ACK</code>之前，只可能产生 <code>1 ~ 2</code> 个重复的<code>ACK</code>。 如果一连串收到 <code>3个或3个以上</code> 的重复<code>ACK</code>，就非常可能是一个报文段丢失了。于是我们就重传丢失的数据报文段，而无需等待超时定时器溢出。这就是快速重传算法。接下来执行的不是慢启动算法而是拥塞避免算法。这就是快速恢复算法。</p><h3 id="tcp-连接对-icmp-差错的处理" tabindex="-1"><a class="header-anchor" href="#tcp-连接对-icmp-差错的处理"><span>TCP 连接对 ICMP 差错的处理</span></a></h3><ol><li><code>ICMP</code>源站抑制差错：将拥塞窗口<code>cwnd</code>设为1个报文段大小发起慢启动，但是慢启动门限<code>ssthresh</code>没有变化；</li><li>主机不可达或网络不可达差错：忽略，因为这两个差错通常被认为是暂时的。</li></ol><h3 id="重新分组" tabindex="-1"><a class="header-anchor" href="#重新分组"><span>重新分组</span></a></h3><p>当<code>tcp</code>重传的时候，不一定要重新传输相同的报文段。实际上，<code>TCP</code>允许进行重新分组而发送一个较大的报文段，这有助于提升性能。</p><h2 id="滑动窗口" tabindex="-1"><a class="header-anchor" href="#滑动窗口"><span>滑动窗口</span></a></h2><ol><li>滑动窗口协议允许发送方在停止并等待确认前可以连续发送多个分组，由于发送方不必每发一个分组就停下来等待确认，因此该方法可以加速数据的传输。</li><li>滑动窗口</li></ol><p>窗口大小表示接收端的<code>TCP</code>协议缓存中还有多少剩余空间，用于接收端的流量控制</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ol><li>发送方不必发送一个全窗口的大小</li><li>来自接收方的一个报文段确认数据并把窗口向右滑动（窗口大小是相对于确认序号的）</li><li>窗口的大小可以减小，但窗口的右边不能向左移动</li><li>接收方在发送一个<code>ACK</code>前不必等待窗口被填满</li></ol><h3 id="窗口更新" tabindex="-1"><a class="header-anchor" href="#窗口更新"><span>窗口更新</span></a></h3><p>一个<code>ACK</code>分组，但不确认任何数据（分组中的序号已被前面的<code>ACK</code>确认），只是通知对方窗口大小已变化</p><ol><li><p><code>PUSH</code>标志</p><ul><li>发送方使用该标志通知接收方将所收到的数据全部交给接收进程，这标志着发送方暂时没有更多的数据要发送了</li></ul></li><li><p>慢启动</p><ul><li>慢启动为<code>TCP</code>增加一个拥塞窗口（<code>cwnd</code>），刚建立连接时cwnd初始化为一个报文段的大小（由另一端通告），其后每收到一个<code>ACK</code>，<code>cwnd</code>就增加一个报文段大小。发送方取拥塞窗口与通告窗口中的最小值作为发送上限。</li><li>拥塞窗口是发送方使用的流量控制，而通告窗口是接收方使用的流量控制。</li></ul></li><li><p><code>URG</code>标志</p><ul><li>紧急标志用于发送端通知接收端分组中包含了紧急数据，具体如何处理由接收方确定</li><li>紧急数据也被成为带外数据</li></ul></li><li><p>带宽时延积</p><ul><li><p>带宽：单位时间内从发送端到接收端所能通过的“最高数据率” <code>RTT</code>：从发送端到接收端的一去一回需要的时间 带宽时延乘积：等于<code>带宽*RTT</code>，实际上就是发送端到接收端单向通道的数据容积的两倍</p><p>设带宽为<code>B</code>，<code>RTT</code>为<code>Tr</code>，滑动窗口为<code>W</code>，则：</p><ol><li><code>W&lt;B*Tr</code>时，影响<code>TCP</code>发送数据速率的最直接的因素是滑动窗口的大小，<code>TCP</code>的流量控制策略（比如超时时窗口设置为1，重复<code>ACK</code>时窗口减半）最终都是通过控制窗口大小来控制速率，而慢启动，拥塞避免这些流量控制算法实际上就是控制窗口增长方式的算法，也就是控制的是加速度大小。</li><li>当<code>W&gt;B*Tr</code>时，则影响速率的因素是带宽</li></ol></li></ul></li></ol><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><ul><li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener noreferrer">Transmission Control Protocol</a></li><li><a href="https://tools.ietf.org/html/rfc675" target="_blank" rel="noopener noreferrer">RFC 675</a> – Specification of Internet Transmission Control Program, December 1974 Version</li><li><a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener noreferrer">RFC 793</a> – TCP v4</li><li><a href="https://tools.ietf.org/html/std7" target="_blank" rel="noopener noreferrer">STD 7</a> – Transmission Control Protocol, Protocol specification</li><li><a href="https://tools.ietf.org/html/rfc1122" target="_blank" rel="noopener noreferrer">RFC 1122</a> – includes some error corrections for TCP</li><li><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><ul><li><div class="ab-note drop-shadow"><div class="markdown-rendered"><div><ul><li><a href="https://tools.ietf.org/html/rfc1948" target="_blank" rel="noopener noreferrer">RFC 1948</a> – Defending Against Sequence Number Attacks</li><li><a href="https://tools.ietf.org/html/rfc2018" target="_blank" rel="noopener noreferrer">RFC 2018</a> – TCP Selective Acknowledgment Options</li><li><a href="https://tools.ietf.org/html/rfc5681" target="_blank" rel="noopener noreferrer">RFC 5681</a> – TCP Congestion Control</li><li><a href="https://tools.ietf.org/html/rfc6247" target="_blank" rel="noopener noreferrer">RFC 6247</a> – Moving the Undeployed TCP Extensions <a href="https://tools.ietf.org/html/rfc1072" target="_blank" rel="noopener noreferrer">RFC 1072</a>, <a href="https://tools.ietf.org/html/rfc1106" target="_blank" rel="noopener noreferrer">RFC 1106</a>, <a href="https://tools.ietf.org/html/rfc1110" target="_blank" rel="noopener noreferrer">RFC 1110</a>, <a href="https://tools.ietf.org/html/rfc1145" target="_blank" rel="noopener noreferrer">RFC 1145</a>, <a href="https://tools.ietf.org/html/rfc1146" target="_blank" rel="noopener noreferrer">RFC 1146</a>, <a href="https://tools.ietf.org/html/rfc1379" target="_blank" rel="noopener noreferrer">RFC 1379</a>, <a href="https://tools.ietf.org/html/rfc1644" target="_blank" rel="noopener noreferrer">RFC 1644</a>, and <a href="https://tools.ietf.org/html/rfc1693" target="_blank" rel="noopener noreferrer">RFC 1693</a> to Historic Status</li><li><a href="https://tools.ietf.org/html/rfc6298" target="_blank" rel="noopener noreferrer">RFC 6298</a> – Computing TCP&#39;s Retransmission Timer</li><li><a href="https://tools.ietf.org/html/rfc6824" target="_blank" rel="noopener noreferrer">RFC 6824</a> – TCP Extensions for Multipath Operation with Multiple Addresses</li><li><a href="https://tools.ietf.org/html/rfc7323" target="_blank" rel="noopener noreferrer">RFC 7323</a> – TCP Extensions for High Performance</li><li><a href="https://tools.ietf.org/html/rfc7414" target="_blank" rel="noopener noreferrer">RFC 7414</a> – A Roadmap for TCP Specification Documents</li></ul></div></div></div></li></ul></div></div></div></li></ul>',26)]))}const r=a(n,[["render",d],["__file","08. TCP.html.vue"]]),p=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/02.%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/08.%20TCP.html","title":"TCP","lang":"zh-CN","frontmatter":{"description":"TCP 基础 特性 提供面向连接的、可靠的字节流服务 上层应用数据被 TCP 分割为 TCP 认为合适的报文段 使用超时重传机制，而接收到一个TCP数据后需要发送一个确认 使用包含了首部和数据的校验和来检查数据是否在传输过程中发生了差错 可以将失序的报文重新排序 连接的每一端都有固定大小的缓冲区，只允许另一端发送发送接收缓冲区所能接纳的数据 提供面向字...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/02.%20%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/08.%20TCP.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"TCP"}],["meta",{"property":"og:description","content":"TCP 基础 特性 提供面向连接的、可靠的字节流服务 上层应用数据被 TCP 分割为 TCP 认为合适的报文段 使用超时重传机制，而接收到一个TCP数据后需要发送一个确认 使用包含了首部和数据的校验和来检查数据是否在传输过程中发生了差错 可以将失序的报文重新排序 连接的每一端都有固定大小的缓冲区，只允许另一端发送发送接收缓冲区所能接纳的数据 提供面向字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"TCP","slug":"tcp","link":"#tcp","children":[{"level":2,"title":"基础","slug":"基础","link":"#基础","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"格式","slug":"格式","link":"#格式","children":[]},{"level":3,"title":"连接过程","slug":"连接过程","link":"#连接过程","children":[]}]},{"level":2,"title":"MSS","slug":"mss","link":"#mss","children":[]},{"level":2,"title":"TCP状态变迁图","slug":"tcp状态变迁图","link":"#tcp状态变迁图","children":[]},{"level":2,"title":"复位报文段","slug":"复位报文段","link":"#复位报文段","children":[]},{"level":2,"title":"Nagle 算法","slug":"nagle-算法","link":"#nagle-算法","children":[]},{"level":2,"title":"Keepalive","slug":"keepalive","link":"#keepalive","children":[]},{"level":2,"title":"TCP的路径MTU探测","slug":"tcp的路径mtu探测","link":"#tcp的路径mtu探测","children":[]},{"level":2,"title":"长肥管道","slug":"长肥管道","link":"#长肥管道","children":[]},{"level":2,"title":"超时重传","slug":"超时重传","link":"#超时重传","children":[{"level":3,"title":"四个定时器","slug":"四个定时器","link":"#四个定时器","children":[]},{"level":3,"title":"超时与重传递时间间隔","slug":"超时与重传递时间间隔","link":"#超时与重传递时间间隔","children":[]},{"level":3,"title":"往返时间RTT的测量","slug":"往返时间rtt的测量","link":"#往返时间rtt的测量","children":[]},{"level":3,"title":"重传的多义性问题（Karn 算法）","slug":"重传的多义性问题-karn-算法","link":"#重传的多义性问题-karn-算法","children":[]},{"level":3,"title":"拥塞避免算法","slug":"拥塞避免算法","link":"#拥塞避免算法","children":[]},{"level":3,"title":"快速重传算法","slug":"快速重传算法","link":"#快速重传算法","children":[]},{"level":3,"title":"TCP 连接对 ICMP 差错的处理","slug":"tcp-连接对-icmp-差错的处理","link":"#tcp-连接对-icmp-差错的处理","children":[]},{"level":3,"title":"重新分组","slug":"重新分组","link":"#重新分组","children":[]}]},{"level":2,"title":"滑动窗口","slug":"滑动窗口","link":"#滑动窗口","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"窗口更新","slug":"窗口更新","link":"#窗口更新","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"git":{},"readingTime":{"minutes":19.07,"words":5721},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/02. 网络基础理论/08. TCP.md","excerpt":"\\n<h2>基础</h2>\\n<h3>特性</h3>\\n<ol>\\n<li>提供面向连接的、可靠的字节流服务</li>\\n<li>上层应用数据被 TCP 分割为 TCP 认为合适的报文段</li>\\n<li>使用超时重传机制，而接收到一个TCP数据后需要发送一个确认</li>\\n<li>使用包含了首部和数据的校验和来检查数据是否在传输过程中发生了差错</li>\\n<li>可以将失序的报文重新排序</li>\\n<li>连接的每一端都有固定大小的缓冲区，只允许另一端发送发送接收缓冲区所能接纳的数据</li>\\n<li>提供面向字节流的服务，不在字节流中插入记录标识符，也不对字节流的内容作任何解释（由上层应用解释）</li>\\n</ol>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/02. 网络基础理论/08. TCP.md","value":{"title":"08. TCP","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/02. 网络基础理论/08. TCP.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{r as comp,p as data};
