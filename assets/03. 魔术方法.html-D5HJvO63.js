import{_ as s,e as a,g as n,o as l}from"./app-BapqMaOt.js";const t={};function h(e,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="魔术方法" tabindex="-1"><a class="header-anchor" href="#魔术方法"><span>魔术方法</span></a></h1><p>参考</p><ul><li>Python常用魔术方法一览表，http://c.biancheng.net/view/7817.html</li></ul><h2 id="简概" tabindex="-1"><a class="header-anchor" href="#简概"><span>简概</span></a></h2><p>Python 中的类有一些特殊的方法</p><ul><li>特征：方法名<strong>前后分别添加了两个下画线“__”</strong>，这些方法统称 “魔术方法”（Magic Method）</li><li>作用：使用魔术方法可以实现运算符重载，也可以将复杂的逻辑封装成简单的 API。</li></ul><h2 id="常用魔术方法" tabindex="-1"><a class="header-anchor" href="#常用魔术方法"><span>常用魔术方法</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 常用</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__new__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		创建类并返回这个类的实例</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__init__</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 		# 可理解为“构造函数”，在对象初始化的时候调用，使用传入的参数初始化该实例</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__del__</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 		# 可理解为“析构函数”，当一个对象进行垃圾回收时调用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__metaclass__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	定义当前类的元类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__class__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		查看对象所属的类  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 但是一般不是用type()么</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">__base__ 		获取当前类的父类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__bases__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		获取当前类的所有父类</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__str__</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 		# 定义当前类的实例的文本显示内容</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__getattribute__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	定义属性被访问时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__getattr__</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	# 定义试图访问一个不存在的属性时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__setattr__</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 	# 定义对属性进行赋值和修改操作时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__delattr__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	定义删除属性时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__copy__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义对类的实例调用 copy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() 获得对象的一个浅拷贝时所产生的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__deepcopy__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	定义对类的实例调用 copy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">deepcopy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() 获得对象的一个深拷贝时所产生的行为</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 操作符重载，相当于C++中的运算符重载：举例：operator+()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__eq__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义相等符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__ne__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义不等符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__lt__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义小于符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__gt__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义大于符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__le__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义小于等于符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__ge__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		定义大于等于符号“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__add__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”表示的加法</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__sub__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”表示的减法</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__mul__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”表示的乘法</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__div__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”表示的除法</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__mod__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“％”</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">表示的取模</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(求余数)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__pow__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现操作符“</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">”表示的指数操作</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__and__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现按位与操作</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__or__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		实现按位或操作</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__xor__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	实现按位异或操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 容器类、以及迭代器</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__len__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		用于自定义容器类型，表示容器的长度</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__getitem__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义当某一项被访问时，使用 </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[key] 所产生的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__setitem__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义执行 </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[key]</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">value 时产生的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__delitem__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义一个项目被删除时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__iter__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 		用于自定义容器类型，一个容器迭代器  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># __next__好像也是</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__reversed__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义当 </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">reversed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( ) 被调用时的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__contains__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义调用 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 和 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 来测试成员是否存在的时候所产生的行为</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__missing__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 	用于自定义容器类型，定义在容器中找不到 key 时触发的行为</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下代码使用魔术方法，采用运算符重载的方式实现了向量</p>`,11)]))}const k=s(t,[["render",h],["__file","03. 魔术方法.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/03.%20%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html","title":"Python","lang":"zh-CN","frontmatter":{"description":"Python 目录 魔术方法 参考 Python常用魔术方法一览表，http://c.biancheng.net/view/7817.html 简概 Python 中的类有一些特殊的方法 特征：方法名前后分别添加了两个下画线“__”，这些方法统称 “魔术方法”（Magic Method） 作用：使用魔术方法可以实现运算符重载，也可以将复杂的逻辑封装成简...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Python/05.%20%E5%B0%81%E8%A3%85/03.%20%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"Python 目录 魔术方法 参考 Python常用魔术方法一览表，http://c.biancheng.net/view/7817.html 简概 Python 中的类有一些特殊的方法 特征：方法名前后分别添加了两个下画线“__”，这些方法统称 “魔术方法”（Magic Method） 作用：使用魔术方法可以实现运算符重载，也可以将复杂的逻辑封装成简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"git":{},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/03. 魔术方法.md","excerpt":"\\n<h1>目录</h1>\\n<h1>魔术方法</h1>\\n<p>参考</p>\\n<ul>\\n<li>Python常用魔术方法一览表，http://c.biancheng.net/view/7817.html</li>\\n</ul>\\n<h2>简概</h2>\\n<p>Python 中的类有一些特殊的方法</p>\\n<ul>\\n<li>特征：方法名<strong>前后分别添加了两个下画线“__”</strong>，这些方法统称 “魔术方法”（Magic Method）</li>\\n<li>作用：使用魔术方法可以实现运算符重载，也可以将复杂的逻辑封装成简单的 API。</li>\\n</ul>\\n<h2>常用魔术方法</h2>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/03. 魔术方法.md","value":{"title":"03. 魔术方法","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Python/05. 封装/03. 魔术方法.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{k as comp,d as data};
