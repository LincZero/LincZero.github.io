import{_ as l,c as i,a as s,d as e,b as t,e as o,o as c,r}from"./app-EY9a-RQV.js";const d={},p={href:"http://www.tldp.org/HOWTO/Traffic-Control-HOWTO/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://wiki.linuxfoundation.org/networking/ifb",target:"_blank",rel:"noopener noreferrer"},f={href:"http://www.tldp.org/HOWTO/Traffic-Control-HOWTO/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://wiki.linuxfoundation.org/networking/ifb",target:"_blank",rel:"noopener noreferrer"},m={href:"http://blog.csdn.net/dog250/article/details/40483627",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.csdn.net/dog250/article/details/40680765",target:"_blank",rel:"noopener noreferrer"};function v(h,n){const a=r("ExternalLinkIcon");return c(),i("div",null,[n[17]||(n[17]=s("h1",{id:"流量控制-tc-traffic-control",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#流量控制-tc-traffic-control"},[s("span",null,"流量控制 (TC, Traffic Control)")])],-1)),n[18]||(n[18]=s("h2",{id:"tc介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tc介绍"},[s("span",null,"TC介绍")])],-1)),n[19]||(n[19]=s("p",null,[e("流量控制（Traffic Control， tc）是Linux内核提供的流量限速、整形和策略控制机制。它以 "),s("code",null,"qdisc-class-filter"),e(" 的树形结构来实现对流量的分层控制 ：")],-1)),n[20]||(n[20]=s("p",null,"![Traffic Control](04. 流量控制.assets/tc1.jpeg)",-1)),n[21]||(n[21]=s("p",null,"![Traffic Control](04. 流量控制.assets/tc2.jpeg)",-1)),s("p",null,[n[1]||(n[1]=s("code",null,"tc",-1)),n[2]||(n[2]=e("最佳的参考就是")),s("a",p,[n[0]||(n[0]=e("Linux Traffic Control HOWTO")),t(a)]),n[3]||(n[3]=e("，详细介绍了tc的原理和使用方法。"))]),n[22]||(n[22]=o('<h2 id="基本组成" tabindex="-1"><a class="header-anchor" href="#基本组成"><span>基本组成</span></a></h2><p>从上图中可以看到，tc 由三部分组成：</p><ul><li><strong>qdisc</strong>：通过队列将数据包缓存起来，用来控制网络收发的速度</li><li><strong>class</strong>：用来表示控制策略</li><li><strong>filter</strong>：用来将数据包划分到具体的控制策略中</li></ul><h3 id="qdisc" tabindex="-1"><a class="header-anchor" href="#qdisc"><span>qdisc</span></a></h3><p><code>qdisc</code>通过队列将数据包缓存起来，用来控制网络收发的速度。实际上，每个网卡都有一个关联的<code>qdisc</code>。它包括以下几种：</p><ul><li>无分类qdisc（只能应用于root队列） <ul><li><code>[p|b]fifo</code>：简单先进先出</li><li><code>pfifo_fast</code>：根据数据包的<code>tos</code>将队列划分到3个<code>band</code>，每个<code>band</code>内部先进先出</li><li><code>red</code>：<code>Random Early Detection</code>，带带宽接近限制时随机丢包，适合高带宽应用</li><li><code>sfq</code>：<code>Stochastic Fairness Queueing</code>，按照会话对流量排序并循环发送每个会话的数据包</li><li><code>tbf</code>：<code>Token Bucket Filter</code>，只允许以不超过事先设定的速率到来的数据包通过 , 但可能允许短暂突发流量朝过设定值</li></ul></li><li>有分类qdisc（可以包括多个队列） <ul><li><code>cbq</code>：<code>Class Based Queueing</code>，借助<code>EWMA</code>(<code>exponential weighted moving average</code>, 指数加权移动均值 ) 算法确认链路的闲置时间足够长 , 以达到降低链路实际带宽的目的。如果发生越限 ,<code>CBQ</code> 就会禁止发包一段时间。</li><li><code>htb</code>：<code>Hierarchy Token Bucket</code>，在<code>tbf</code>的基础上增加了分层</li><li><code>prio</code>：分类优先算法并不进行整形 , 它仅仅根据你配置的过滤器把流量进一步细分。缺省会自动创建三个<code>FIFO</code>类。</li></ul></li></ul><p>注意，<strong>一般说到qdisc都是指egress qdisc</strong>。每块网卡实际上还可以添加一个<code>ingress qdisc</code>，不过它有诸多的限制</p><ul><li><code>ingress qdisc</code>不能包含子类，而只能作过滤</li><li><code>ingress qdisc</code>只能用于简单的整形</li></ul>',8)),s("p",null,[n[5]||(n[5]=e("如果相对")),n[6]||(n[6]=s("code",null,"ingress",-1)),n[7]||(n[7]=e("方向作流量控制的话，可以借助")),s("a",u,[n[4]||(n[4]=e("ifb（ Intermediate Functional Block）")),t(a)]),n[8]||(n[8]=e("内核模块。因为流入网络接口的流量是无法直接控制的，那么就需要把流入的包导入（通过 ")),n[9]||(n[9]=s("code",null,"tc action",-1)),n[10]||(n[10]=e("）到一个中间的队列，该队列在 ifb 设备上，然后让这些包重走 ")),n[11]||(n[11]=s("code",null,"tc",-1)),n[12]||(n[12]=e(" 层，最后流入的包再重新入栈，流出的包重新出栈。"))]),n[23]||(n[23]=o(`<p>![Intermediate Funcational Block](04. 流量控制.assets/ifb.jpeg)</p><h3 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h3><p><code>filter</code>用来将数据包划分到具体的控制策略中，包括以下几种：</p><ul><li><code>u32</code>：根据协议、<code>IP</code>、端口等过滤数据包</li><li><code>fwmark</code>：根据<code>iptables MARK</code>来过滤数据包</li><li><code>tos</code>：根据<code>tos</code>字段过滤数据包</li></ul><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>class</span></a></h3><p><code>class</code>用来表示控制策略，只用于有分类的<code>qdisc</code>上。每个<code>class</code>要么包含多个子类，要么只包含一个子<code>qdisc</code>。当然，每个<code>class</code>还包括一些列的<code>filter</code>，控制数据包流向不同的子类，或者是直接丢掉。</p><h2 id="htb示例" tabindex="-1"><a class="header-anchor" href="#htb示例"><span>htb示例</span></a></h2><p>![Simplified Linux Traffic Control Scenario with HTB](04. 流量控制.assets/htb-class.png)</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># add qdisc</span>
tc qdisc <span class="token function">add</span> dev eth0 root handle <span class="token number">1</span>: htb default <span class="token number">2</span> r2q <span class="token number">100</span>
<span class="token comment"># add default class</span>
tc class <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 classid <span class="token number">1</span>:1 htb rate 1000mbit ceil 1000mbit
tc class <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:1 classid <span class="token number">1</span>:2 htb prio <span class="token number">5</span> rate 1000mbit ceil 1000mbit
tc qdisc <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:2 handle <span class="token number">2</span>: pfifo limit <span class="token number">500</span>
<span class="token comment"># add default filter</span>
tc filter <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> protocol <span class="token function">ip</span> u32
tc filter <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> handle <span class="token number">3</span>: protocol <span class="token function">ip</span> u32 divisor <span class="token number">256</span>
tc filter <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> protocol <span class="token function">ip</span> u32 ht <span class="token number">800</span>:: match <span class="token function">ip</span> src <span class="token number">192.168</span>.0.0/16 hashkey mask 0x000000ff at <span class="token number">12</span> <span class="token function">link</span> <span class="token number">3</span>:

<span class="token comment"># add egress rules for 192.168.0.9</span>
tc class <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:1 classid <span class="token number">1</span>:9 htb prio <span class="token number">5</span> rate 3mbit ceil 3mbit
tc qdisc <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>:9 handle <span class="token number">9</span>: pfifo limit <span class="token number">500</span>
tc filter <span class="token function">add</span> dev eth0 parent <span class="token number">1</span>: protocol <span class="token function">ip</span> prio <span class="token number">5</span> u32 ht <span class="token number">3</span>:9: match <span class="token function">ip</span> src <span class="token string">&quot;192.168.0.9&quot;</span> flowid <span class="token number">1</span>:9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ifb示例" tabindex="-1"><a class="header-anchor" href="#ifb示例"><span>ifb示例</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># init ifb</span>
modprobe ifb <span class="token assign-left variable">numifbs</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> ifb0 up
<span class="token comment">#  redirect ingress to ifb0</span>
tc qdisc <span class="token function">add</span> dev eth0 ingress handle ffff:
tc filter <span class="token function">add</span> dev eth0 parent ffff: protocol <span class="token function">ip</span> prio <span class="token number">0</span> u32 match u32 <span class="token number">0</span> <span class="token number">0</span> flowid ffff: action mirred egress redirect dev ifb0
<span class="token comment"># add qdisc</span>
tc qdisc <span class="token function">add</span> dev ifb0 root handle <span class="token number">1</span>: htb default <span class="token number">2</span> r2q <span class="token number">100</span>
<span class="token comment"># add default class</span>
tc class <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:0 classid <span class="token number">1</span>:1 htb rate 1000mbit ceil 1000mbit
tc class <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:1 classid <span class="token number">1</span>:2 htb prio <span class="token number">5</span> rate 1000mbit ceil 1000mbit
tc qdisc <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:2 handle <span class="token number">2</span>: pfifo limit <span class="token number">500</span>
<span class="token comment"># add default filter</span>
tc filter <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> protocol <span class="token function">ip</span> u32
tc filter <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> handle <span class="token number">4</span>: protocol <span class="token function">ip</span> u32 divisor <span class="token number">256</span>
tc filter <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:0 prio <span class="token number">5</span> protocol <span class="token function">ip</span> u32 ht <span class="token number">800</span>:: match <span class="token function">ip</span> dst <span class="token number">192.168</span>.0.0/16 hashkey mask 0x000000ff at <span class="token number">16</span> <span class="token function">link</span> <span class="token number">4</span>:

<span class="token comment"># add ingress rules for 192.168.0.9</span>
tc class <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:1 classid <span class="token number">1</span>:9 htb prio <span class="token number">5</span> rate 3mbit ceil 3mbit
tc qdisc <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>:9 handle <span class="token number">9</span>: pfifo limit <span class="token number">500</span>
tc filter <span class="token function">add</span> dev ifb0 parent <span class="token number">1</span>: protocol <span class="token function">ip</span> prio <span class="token number">5</span> u32 ht <span class="token number">4</span>:9: match <span class="token function">ip</span> dst <span class="token string">&quot;192.168.0.9&quot;</span> flowid <span class="token number">1</span>:9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,12)),s("ul",null,[s("li",null,[s("a",f,[n[13]||(n[13]=e("Linux Traffic Control HOWTO")),t(a)])]),s("li",null,[s("a",b,[n[14]||(n[14]=e("ifb wiki")),t(a)])]),s("li",null,[s("a",m,[n[15]||(n[15]=e("Linux TC (Traffic Control) 框架原理解析")),t(a)])]),s("li",null,[s("a",k,[n[16]||(n[16]=e("Linux TC的ifb原理以及ingress流控")),t(a)])])])])}const E=l(d,[["render",v],["__file","04. 流量控制.html.vue"]]),T=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/04.%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.html","title":"流量控制 (TC, Traffic Control)","lang":"zh-CN","frontmatter":{"description":"流量控制 (TC, Traffic Control) TC介绍 流量控制（Traffic Control， tc）是Linux内核提供的流量限速、整形和策略控制机制。它以 qdisc-class-filter 的树形结构来实现对流量的分层控制 ： ![Traffic Control](04. 流量控制.assets/tc1.jpeg) ![Traffi...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/03.%20Linux%E7%BD%91%E7%BB%9C/04.%20%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"流量控制 (TC, Traffic Control)"}],["meta",{"property":"og:description","content":"流量控制 (TC, Traffic Control) TC介绍 流量控制（Traffic Control， tc）是Linux内核提供的流量限速、整形和策略控制机制。它以 qdisc-class-filter 的树形结构来实现对流量的分层控制 ： ![Traffic Control](04. 流量控制.assets/tc1.jpeg) ![Traffi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"流量控制 (TC, Traffic Control)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"流量控制 (TC, Traffic Control)","slug":"流量控制-tc-traffic-control","link":"#流量控制-tc-traffic-control","children":[{"level":2,"title":"TC介绍","slug":"tc介绍","link":"#tc介绍","children":[]},{"level":2,"title":"基本组成","slug":"基本组成","link":"#基本组成","children":[{"level":3,"title":"qdisc","slug":"qdisc","link":"#qdisc","children":[]},{"level":3,"title":"filter","slug":"filter","link":"#filter","children":[]},{"level":3,"title":"class","slug":"class","link":"#class","children":[]}]},{"level":2,"title":"htb示例","slug":"htb示例","link":"#htb示例","children":[]},{"level":2,"title":"ifb示例","slug":"ifb示例","link":"#ifb示例","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.26,"words":1279},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/04. 流量控制.md","excerpt":"\\n<h2>TC介绍</h2>\\n<p>流量控制（Traffic Control， tc）是Linux内核提供的流量限速、整形和策略控制机制。它以 <code>qdisc-class-filter</code> 的树形结构来实现对流量的分层控制 ：</p>\\n<p>![Traffic Control](04. 流量控制.assets/tc1.jpeg)</p>\\n<p>![Traffic Control](04. 流量控制.assets/tc2.jpeg)</p>\\n<p><code>tc</code>最佳的参考就是<a href=\\"http://www.tldp.org/HOWTO/Traffic-Control-HOWTO/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Linux Traffic Control HOWTO</a>，详细介绍了tc的原理和使用方法。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/04. 流量控制.md","value":{"title":"04. 流量控制","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/03. Linux网络/04. 流量控制.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{E as comp,T as data};
