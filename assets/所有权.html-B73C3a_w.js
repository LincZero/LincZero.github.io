import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-CyJMR3JQ.js";const p={},o=t(`<h1 id="rust所有权" tabindex="-1"><a class="header-anchor" href="#rust所有权"><span>Rust所有权</span></a></h1><h2 id="所有权-ownership" tabindex="-1"><a class="header-anchor" href="#所有权-ownership"><span>所有权 (ownership)</span></a></h2><p>因为变量要负责释放它们拥有的资源，所以资源只能拥有一个所有者。这也<strong>防止了资源的重复释放</strong>。<strong>注意并非所有变量都拥有资源</strong>（例如引用）。</p><p>所有权就是值一个东西归属谁。Rust 中一个变量对应一个值，变量就称为这个值得所有者。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句话的意思就是，”从 0 到 Go 语言微服务架构师” 这个值所在<strong>内存块由变量 name 所有</strong>。</p><p>Rust 中，只能由一个所有者，不允许两个同时指向同一块内存区域。<strong>变量必须指向不同的内存区域</strong>。</p><h2 id="所有权与堆栈" tabindex="-1"><a class="header-anchor" href="#所有权与堆栈"><span>所有权与堆栈</span></a></h2><p>内存分为两大类：</p><ul><li>栈(stack)，先进先出。类型大小是固定的，如i32.</li><li>堆(heap)，编译时大小未知或不确定大小，用户自己管理，增加内存溢出风险</li></ul><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h3><p>它是一种 后进先出 的机制。</p><p>类似我们日常的落盘子，只能一个一个向上方，然后从最上面拿一个盘子。一个变量要放到栈上，那么它的大小在编译时就要明确。</p><p>Rust 中可以放到栈上的数据类型，他们的<strong>大小都是固定的</strong>。</p><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h3><p>用于编译时大小未知或不确定的，只有运行时才能确定的数据。</p><p>在堆上存储一些动态类型的数据。堆是<strong>不受系统管理</strong>的，是用户自己管理的，也增加了<strong>内存溢出的风险</strong>。</p><h3 id="栈堆的对比、所有权" tabindex="-1"><a class="header-anchor" href="#栈堆的对比、所有权"><span>栈堆的对比、所有权</span></a></h3><ul><li><p>堆</p><ul><li>大小：运行时才能确定</li><li>数据类型：字符串，在运行时才会赋值的变量，在编译期的时候大小是未知或不确定的。所以字符串类型存储在堆上。</li><li>所有权：所有权只会发生在堆上分配的数据，每次只能有一个变量对堆上数据有所有权</li></ul></li><li><p>栈</p><ul><li><p>大小：固定</p></li><li><p>数据类型：基础数据类型 (整型，浮点型，布尔，字符)</p></li><li><p>所有权：栈中数据赋值等没有所有权的移动 (赋值时是值拷贝，不存在资源移动)</p><p>基础数据类型没有所有权的概念，基础类型可以认为是值拷贝。</p><p>在内存上另外的地方，存储和复制来的数据，然后让新的变量指向它。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a {}, and b {}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充</span></a></h3><p>这里的栈和堆的概念特指 rust 中的栈堆，其他语言不一定。</p><p>笔者不知道这个举例是否恰当：像Cpp类实例这种，大小是固定的，但是是需要动态分配一块内存的，也是创建在堆上。</p><h2 id="转让所有权-移动所有权-move" tabindex="-1"><a class="header-anchor" href="#转让所有权-移动所有权-move"><span>转让所有权 (移动所有权) (move)</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>在进行赋值（let a = b）或通过值来传递函数参数（foo(a)）的时候， 资源的所有权（ownership）会发生转移。按照 Rust 的规范，这被称为资源的移动（move）。</p><p>在移动资源之后，<strong>原来的所有者不能再被使用</strong>（这点不同于其他语言，其他语言是可以继续使用的），这可<strong>避免悬挂指针</strong>（dangling pointer）的产生。</p><p>类似我们人类把一个东西送人或丢弃。</p><h3 id="三种方式" tabindex="-1"><a class="header-anchor" href="#三种方式"><span>三种方式</span></a></h3><p>以下几种方式转让所有权</p><h4 id="变量赋值给另一个变量" tabindex="-1"><a class="header-anchor" href="#变量赋值给另一个变量"><span>变量赋值给另一个变量</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 栈上数据</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>	     						<span class="token comment">// 栈分配的整型</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>			 					<span class="token comment">// 将 \`a\` *复制*到 \`b\`——不存在资源移动</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;a {}, and b {}&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 两个值各自都可以使用</span>

    <span class="token comment">// 堆上数据</span>
    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v1 拥有堆上数据的所有权。（每次只能有一个变量对堆上数据有所有权）</span>
    <span class="token keyword">let</span> v2 <span class="token operator">=</span>v1<span class="token punctuation">;</span>												<span class="token comment">// \`v2=v1\` 后，v2 拥有了堆上数据的所有权，v1 已经没有对数据的所有权了</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>									<span class="token comment">// 所以再使用 v1 会报错</span>
    														<span class="token comment">// 如果 Rust 检查到 2 个变量同时拥有堆上内存的所有权。会报错如下</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报错如下:</span>
error<span class="token punctuation">[</span><span class="token constant">E0382</span><span class="token punctuation">]</span><span class="token punctuation">:</span> borrow of moved value<span class="token punctuation">:</span> \`v1\`
<span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">move</span> occurs because \`v1\` has <span class="token keyword">type</span> \`<span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span>\`<span class="token punctuation">,</span> which does not implement the \`<span class="token class-name">Copy</span>\` <span class="token keyword">trait</span>
<span class="token type-definition class-name">9</span> <span class="token operator">|</span> <span class="token keyword">let</span> v2 <span class="token operator">=</span>v1<span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span> value moved here
<span class="token number">10</span> <span class="token operator">|</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{:?}&quot;</span><span class="token punctuation">,</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token operator">^</span><span class="token operator">^</span> value borrowed here after <span class="token keyword">move</span>
<span class="token operator">|</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="变量传递给函数参数" tabindex="-1"><a class="header-anchor" href="#变量传递给函数参数"><span>变量传递给函数参数</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v {:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> studyList <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// studyList 拥有堆上数据管理权</span>
    <span class="token keyword">let</span> studyList2 <span class="token operator">=</span> studyList<span class="token punctuation">;</span>		    		<span class="token comment">// studyList 将所有权转义给了 studyList2</span>
    <span class="token function">show</span><span class="token punctuation">(</span>studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">// studyList2 将所有权转让给参数 v，studyList2 不再可用</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;studyList2 {:?}&quot;</span><span class="token punctuation">,</span>studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span>	    <span class="token comment">// //studyList2 已经不可用，再使用会出现下面的报错</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报错如下:</span>
error<span class="token punctuation">[</span><span class="token constant">E0382</span><span class="token punctuation">]</span><span class="token punctuation">:</span> borrow of moved value<span class="token punctuation">:</span> \`studyList2\`
<span class="token operator">|</span> <span class="token keyword">let</span> studyList2 <span class="token operator">=</span> studyList<span class="token punctuation">;</span> <span class="token comment">// studyList 将所有权转义给了 studyList2</span>
<span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">move</span> occurs because \`studyList2\` has <span class="token keyword">type</span> \`<span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span>\`<span class="token punctuation">,</span> which does not implement the \`<span class="token class-name">Copy</span>\` <span class="token keyword">trait</span>
<span class="token operator">|</span> <span class="token function">show</span><span class="token punctuation">(</span>studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// studyList2 将所有权转让给参数 v,studyList2 不再可用。</span>
<span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> value moved here
<span class="token operator">|</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;studyList2 {:?}&quot;</span><span class="token punctuation">,</span>studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//studyList2 已经不可用。</span>
<span class="token operator">|</span> <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> value borrowed here after <span class="token keyword">move</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数中的返回值" tabindex="-1"><a class="header-anchor" href="#函数中的返回值"><span>函数中的返回值</span></a></h4><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show2</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v {:?}&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> studyList3 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> studyList4 <span class="token operator">=</span> studyList3<span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">show2</span><span class="token punctuation">(</span>studyList4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;result {:?}&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>	    <span class="token comment">// 输出 result [&quot;Go语言极简一本通&quot;]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="借用所有权-borrowing" tabindex="-1"><a class="header-anchor" href="#借用所有权-borrowing"><span>借用所有权 (Borrowing)</span></a></h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1"><span>概念</span></a></h3><p>生活中，我们对工具有所有权，但是也不妨碍我们可以把工具借给别人甚至租用给别人，别人用完了，要还给你的。</p><p>Rust 中，Borrowing（借用），就是一个函数中的变量传递给另外一个函数作为参数暂时使用。也会要求函数参数离开自己作用域的时候将所有权 还给当初传递给它的变量（好借好还，再借不难嘛!）。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token operator">&amp;</span>变量名  <span class="token comment">//要把参数定义的时候这样定义。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例：</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v1:{:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> studyList <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> studyList2 <span class="token operator">=</span> studyList<span class="token punctuation">;</span>
    <span class="token function">show2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span>							<span class="token comment">// 借用给函数</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v2:{:?}&quot;</span><span class="token punctuation">,</span> studyList2<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 我们看到，函数show使用完v2后，我们仍然可以继续使用</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
v1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
v2<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变的借用" tabindex="-1"><a class="header-anchor" href="#可变的借用"><span>可变的借用</span></a></h3><p>上面我们的例子可以说都是只读的，我们看下面:</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show2</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;第一个充电项目已完成&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v:{:?}&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报错如下:</span>
error<span class="token punctuation">[</span><span class="token constant">E0596</span><span class="token punctuation">]</span><span class="token punctuation">:</span> cannot borrow \`<span class="token operator">*</span>v\` <span class="token keyword">as</span> mutable<span class="token punctuation">,</span> <span class="token keyword">as</span> it is behind a \`<span class="token operator">&amp;</span>\` reference
<span class="token operator">|</span> <span class="token keyword">fn</span> <span class="token function-definition function">show2</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token operator">|</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> help<span class="token punctuation">:</span> consider changing this to be a mutable reference<span class="token punctuation">:</span> \`<span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span>\`
<span class="token operator">|</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;第一个充电项目已完成&quot;</span><span class="token punctuation">;</span>
<span class="token operator">|</span> <span class="token operator">^</span> \`v\` is a \`<span class="token operator">&amp;</span>\` reference<span class="token punctuation">,</span> so the data it refers to cannot be borrowed <span class="token keyword">as</span> mutable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错的原因：我们的这个借用不可以是可变的。那么 Rust 中，如果想要让一个变量是可变的，只能在前面加上 mut 关键字。</p><p>修改如下:</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show2</span><span class="token punctuation">(</span>v<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;第一个充电项目已完成&quot;</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;v:{:?}&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> studyList3 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;studyList3:{:?}&quot;</span><span class="token punctuation">,</span> studyList3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">show2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> studyList3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;调用后，studyList3:{:?}&quot;</span><span class="token punctuation">,</span> studyList3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

 <span class="token comment">// 输出</span>
studyList3<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
v<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;第一阶段学习已完成&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
调用后，studyList3<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;第一阶段学习已完成&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要在Borrowing（借用）的时候改变其中的值：</p><ol><li>变量要用mut关键字。</li><li>函数参数为可变的要用 &amp;mut 关键字。</li><li>传递参数的时候，也要用 &amp;mut 关键字</li></ol><h2 id="slice-切片" tabindex="-1"><a class="header-anchor" href="#slice-切片"><span>Slice (切片)</span></a></h2><h3 id="概念-2" tabindex="-1"><a class="header-anchor" href="#概念-2"><span>概念</span></a></h3><p>切片是<strong>指向一段连续内存的指针</strong>。</p><p>在 Rust 中，连续内存够区间存储的数据结构：数组(array)、字符串(string)、向量(vector)。</p><p>切片可以和它们一起使用，切片也使用数字索引访问数据。下标索引从0开始。slice 可以指向数组的一部分，越界的下标会引发致命错误（panic）。</p><p><strong>切片</strong>是<strong>运行时</strong>才能确定 (大小) 的，并不像<strong>数组</strong>那样<strong>编译时</strong>就已经确定了</p><p>有点类似python的切片操作，挺方便的</p><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> 切片值 <span class="token operator">=</span> <span class="token operator">&amp;</span>变量<span class="token punctuation">[</span>起始位置<span class="token punctuation">..</span>结束位置<span class="token punctuation">]</span> <span class="token comment">// 两个点</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>[起始位置..结束位置]，这是一个<strong>左闭右开</strong>的区间。</li><li>起始位置最小值是0。</li><li>结束位置是数组、向量、字符串的长度。</li></ul><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;len:{:?}&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;s1:{:?}&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
len<span class="token punctuation">:</span><span class="token number">3</span>
s1<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片当参数" tabindex="-1"><a class="header-anchor" href="#切片当参数"><span>切片当参数</span></a></h3><p>切片通过引用的方式传递给函数。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">show_slice</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;show_slice函数内:{:?}&quot;</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">show_slice</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 把上面的s1传递给函数show_slice</span>

<span class="token comment">// 输出：</span>
show_slice函数内<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可变切片" tabindex="-1"><a class="header-anchor" href="#可变切片"><span>可变切片</span></a></h3><p>如果我们声明的原数据是可变的，同时定义切片也有**&amp;mut**关键字，就可以更改切片元素来更改元数据了。</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">modify_slice</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;这个阶段已学习完毕&quot;</span><span class="token punctuation">;</span>
   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;modify_slice函数:{:?}&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> v2 <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
v2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;modify_slice之前:{:?}&quot;</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">modify_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;modify_slice之后:{:?}&quot;</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
modify_slice之前<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Go语言微服务架构核心22讲&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
modify_slice函数<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;这个阶段已学习完毕&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
modify_slice之后<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;Go语言极简一本通&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这个阶段已学习完毕&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;从0到Go语言微服务架构师&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","所有权.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/04.%20%E4%BC%98%E5%8C%96/%E6%89%80%E6%9C%89%E6%9D%83.html","title":"Rust所有权","lang":"zh-CN","frontmatter":{"description":"Rust所有权 所有权 (ownership) 因为变量要负责释放它们拥有的资源，所以资源只能拥有一个所有者。这也防止了资源的重复释放。注意并非所有变量都拥有资源（例如引用）。 所有权就是值一个东西归属谁。Rust 中一个变量对应一个值，变量就称为这个值得所有者。 这句话的意思就是，”从 0 到 Go 语言微服务架构师” 这个值所在内存块由变量 nam...","head":[["meta",{"property":"og:url","content":"http://192.168.0.101:8080/MdNote_Public/01.%20%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%94%9F%E4%BA%A7/Develop/01.%20Language/Rust/%E5%AD%A6%E4%B9%A0/04.%20%E4%BC%98%E5%8C%96/%E6%89%80%E6%9C%89%E6%9D%83.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Rust所有权"}],["meta",{"property":"og:description","content":"Rust所有权 所有权 (ownership) 因为变量要负责释放它们拥有的资源，所以资源只能拥有一个所有者。这也防止了资源的重复释放。注意并非所有变量都拥有资源（例如引用）。 所有权就是值一个东西归属谁。Rust 中一个变量对应一个值，变量就称为这个值得所有者。 这句话的意思就是，”从 0 到 Go 语言微服务架构师” 这个值所在内存块由变量 nam..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust所有权\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Rust所有权","slug":"rust所有权","link":"#rust所有权","children":[{"level":2,"title":"所有权 (ownership)","slug":"所有权-ownership","link":"#所有权-ownership","children":[]},{"level":2,"title":"所有权与堆栈","slug":"所有权与堆栈","link":"#所有权与堆栈","children":[{"level":3,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":3,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":3,"title":"栈堆的对比、所有权","slug":"栈堆的对比、所有权","link":"#栈堆的对比、所有权","children":[]},{"level":3,"title":"补充","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"转让所有权 (移动所有权) (move)","slug":"转让所有权-移动所有权-move","link":"#转让所有权-移动所有权-move","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"三种方式","slug":"三种方式","link":"#三种方式","children":[{"level":4,"title":"变量赋值给另一个变量","slug":"变量赋值给另一个变量","link":"#变量赋值给另一个变量","children":[]},{"level":4,"title":"变量传递给函数参数","slug":"变量传递给函数参数","link":"#变量传递给函数参数","children":[]},{"level":4,"title":"函数中的返回值","slug":"函数中的返回值","link":"#函数中的返回值","children":[]}]}]},{"level":2,"title":"借用所有权 (Borrowing)","slug":"借用所有权-borrowing","link":"#借用所有权-borrowing","children":[{"level":3,"title":"概念","slug":"概念-1","link":"#概念-1","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"可变的借用","slug":"可变的借用","link":"#可变的借用","children":[]}]},{"level":2,"title":"Slice (切片)","slug":"slice-切片","link":"#slice-切片","children":[{"level":3,"title":"概念","slug":"概念-2","link":"#概念-2","children":[]},{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]},{"level":3,"title":"切片当参数","slug":"切片当参数","link":"#切片当参数","children":[]},{"level":3,"title":"可变切片","slug":"可变切片","link":"#可变切片","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":8.72,"words":2617},"filePathRelative":"MdNote_Public/01. 设计开发与数据生产/Develop/01. Language/Rust/学习/04. 优化/所有权.md","autoDesc":true}');export{k as comp,d as data};
