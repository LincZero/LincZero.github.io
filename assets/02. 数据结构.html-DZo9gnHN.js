import{_ as i,c as t,e as n,a as e,f as s,o as d}from"./app-BDGujT_T.js";const r="/assets/key-644OLaR0.png",o="/assets/%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-glve8Oma.png",a="/assets/9fa26a74965efbf0f56b707a03bb9b7f-CqKd3iNF.png",p={};function c(u,l){return d(),t("div",null,l[0]||(l[0]=[n('<h1 id="redis-数据结构" tabindex="-1"><a class="header-anchor" href="#redis-数据结构"><span>Redis 数据结构</span></a></h1><h2 id="redis-数据结构-1" tabindex="-1"><a class="header-anchor" href="#redis-数据结构-1"><span>Redis 数据结构</span></a></h2><h3 id="数据类型-常见" tabindex="-1"><a class="header-anchor" href="#数据类型-常见"><span>数据类型 (常见)</span></a></h3><p>Redis 提供了丰富的数据类型，常见的有五种数据类型：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）</strong>。</p><p><img src="'+r+'" alt="img" loading="lazy"></p><p><img src="'+o+'" alt="img" loading="lazy"></p><p>随着 Redis 版本的更新，后面又支持了四种数据类型： <strong>BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）</strong>。</p><h3 id="数据类型-使用场景" tabindex="-1"><a class="header-anchor" href="#数据类型-使用场景"><span>数据类型 - 使用场景</span></a></h3><p>Redis 前五种基本数据类型，后续版本又支持四种数据类型，它们的应用场景如下：</p>',9),e("div",{class:"ab-note drop-shadow"},[e("table",{class:"ab-table ab-branch-table"},[e("thead",null,[e("tr",null,[e("th",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"基本数据类型")])]),e("th",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"作用")])]),e("th",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"使用场景")])])])]),e("tbody",null,[e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"String")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"缓存对象、常规计数、分布式锁、共享 session 信息等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"List")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"消息队列等")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"Hash")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"哈希")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如缓存对象、购物车等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"Set")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"聚合计算（并集、交集、差集）场景")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如点赞、共同关注、抽奖活动等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"Zset")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"排序场景")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如排行榜、电话和姓名排序等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"BitMap")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,[s("(2.2 版新增) "),e("strong",null,"二值状态统计"),s("的场景")])])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如签到、判断用户登陆状态、连续签到用户总数等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"HyperLogLog")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"(2.8 版新增) 海量数据基数统计的场景")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如百万级网页 UV 计数等")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"GEO")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"(3.2 版新增) 存储地理位置信息的场景")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"比如滴滴叫车")])])]),e("tr",null,[e("td",{rowspan:"1",col_index:"0",class:"markdown-rendered"},[e("div",null,[e("p",null,"Stream")])]),e("td",{rowspan:"1",col_index:"1",class:"markdown-rendered"},[e("div",null,[e("p",null,"(5.0 版新增) 消息队列")])]),e("td",{rowspan:"1",col_index:"2",class:"markdown-rendered"},[e("div",null,[e("p",null,"相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据")])])])])])],-1),n('<div class="callout" data-callout="note"><div class="callout-title"><div class="callout-title-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path><path d="m15 5 4 4"></path></svg></div><div class="callout-title-inner">Note</div></div><div class="callout-content"><p></p><p>TIP</p><p>想深入了解这 9 种数据类型，可以看这篇：<a href="https://xiaolincoding.com/redis/data_struct/command.html" target="_blank" rel="noopener noreferrer">2万字 + 20 张图 ｜ 细说 Redis 常见数据类型和应用场景</a></p></div></div><h3 id="数据类型-底层的数据结构" tabindex="-1"><a class="header-anchor" href="#数据类型-底层的数据结构"><span>数据类型 - 底层的数据结构</span></a></h3><p>这里仅介绍五种常见的数据类型的</p><p>我画了一张 Redis 数据类型和底层数据结构的对应关图。左边是 Redis 3.0版本的，也就是《Redis 设计与实现》这本书讲解的版本，现在看还是有点过时了。右边是现在 Redis 7.0 版本的。</p><p><img src="'+a+'" alt="img" loading="lazy"></p><blockquote><p>String 类型的底层数据结构：</p><ul><li><strong>SDS（简单动态字符串）</strong>：主要的数据结构</li></ul><p>SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：</p><ul><li><em>SDS 不仅可以保存文本数据，还可以保存二进制数据</em>。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li><li><em>SDS 获取字符串长度的时间复杂度是 O(1)</em>。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 len 属性记录了字符串长度，所以复杂度为 O(1)。</li><li><em>Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出</em>。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。</li></ul></blockquote><blockquote><p>List 类型的底层数据结构：</p><ul><li><s>压缩列表</s>：如果元素个数 <em>小于512个</em>（默认值，可由 list-max-ziplist-entries 配置），且所有元素值 <em>小于64字节</em>（默认值，可由 list-max-ziplist-value 配置），使用压缩列表</li><li><s>双向链表</s>：如果不满足上面的条件，则使用双向链表</li><li><strong>quicklist</strong>：在 <em>Redis 3.2 版本之后</em>，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。</li></ul></blockquote><blockquote><p>Hash 类型的底层数据结构：</p><ul><li><s>压缩列表</s>：如果元素个数 <em>小于512个</em>（默认值，可由 hash-max-ziplist-entries 配置），且所有元素值 <em>小于64字节</em>（默认值，可由 hash-max-ziplist-value 配置），使用压缩列表</li><li><strong>哈希表</strong>：如果不满足上面的条件，则使用哈希表</li><li><strong>listpack</strong>：在 <em>Redis 7.0 及之后</em>，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</li></ul></blockquote><blockquote><p>Set 类型的底层数据结构</p><ul><li><strong>整数集合</strong>：如果元素个数 <em>小于512个</em>（默认值，set-maxintset-entries配置），且所有元素都是 <em>整数</em>，使用整数集合</li><li><strong>哈希表</strong>：如果不满足上面的条件，则使用哈希表</li></ul></blockquote><blockquote><p>ZSet 类型的底层数据结构：</p><ul><li><s>压缩列表</s>：如果元素个数 <em>小于128个</em>，且所有元素值 <em>小于64字节</em> 时，使用压缩列表</li><li><strong>跳表</strong>：如果不满足上面的条件，则使用跳表</li><li><strong>listpack</strong>：在 <em>Redis 7.0 及之后</em>，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</li></ul></blockquote><p>TIP</p><blockquote><p>想深入了解这 9 种数据结构，可以看这篇：<a href="https://xiaolincoding.com/redis/data_struct/data_struct.html" target="_blank" rel="noopener noreferrer">2万字 + 40 张图 ｜ 细说 Redis 数据结构</a></p></blockquote>',12)]))}const g=i(p,[["render",c],["__file","02. 数据结构.html.vue"]]),h=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/04.%20%E5%9B%BE%E8%A7%A3Redis/01.%20%E9%9D%A2%E8%AF%95%E7%AF%87/02.%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","title":"Redis 数据结构","lang":"zh-CN","frontmatter":{"description":"Redis 数据结构 Redis 数据结构 数据类型 (常见) Redis 提供了丰富的数据类型，常见的有五种数据类型：String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）。 img img 随着 Redis 版本的更新，后面又支持了四种数据类型： BitMap（2.2 版新增）、HyperLogLog（2....","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E7%BA%BF%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%89%88/%E3%80%8A%E5%B0%8F%E6%9E%97coding_%E5%9B%BE%E8%A7%A3%E7%B3%BB%E5%88%97%E3%80%8B/04.%20%E5%9B%BE%E8%A7%A3Redis/01.%20%E9%9D%A2%E8%AF%95%E7%AF%87/02.%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Redis 数据结构"}],["meta",{"property":"og:description","content":"Redis 数据结构 Redis 数据结构 数据类型 (常见) Redis 提供了丰富的数据类型，常见的有五种数据类型：String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）。 img img 随着 Redis 版本的更新，后面又支持了四种数据类型： BitMap（2.2 版新增）、HyperLogLog（2...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Redis 数据结构","slug":"redis-数据结构","link":"#redis-数据结构","children":[{"level":2,"title":"Redis 数据结构","slug":"redis-数据结构-1","link":"#redis-数据结构-1","children":[{"level":3,"title":"数据类型 (常见)","slug":"数据类型-常见","link":"#数据类型-常见","children":[]},{"level":3,"title":"数据类型 - 使用场景","slug":"数据类型-使用场景","link":"#数据类型-使用场景","children":[]},{"level":3,"title":"数据类型 - 底层的数据结构","slug":"数据类型-底层的数据结构","link":"#数据类型-底层的数据结构","children":[]}]}]}],"git":{},"readingTime":{"minutes":4.34,"words":1301},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/02. 数据结构.md","excerpt":"\\n<h2>Redis 数据结构</h2>\\n<h3>数据类型 (常见)</h3>\\n<p>Redis 提供了丰富的数据类型，常见的有五种数据类型：<strong>String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）</strong>。</p>\\n<p></p>\\n<p></p>\\n<p>随着 Redis 版本的更新，后面又支持了四种数据类型： <strong>BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）</strong>。</p>\\n<h3>数据类型 - 使用场景</h3>\\n<p>Redis 前五种基本数据类型，后续版本又支持四种数据类型，它们的应用场景如下：</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/02. 数据结构.md","value":{"title":"02. 数据结构","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 线性学习版/《小林coding_图解系列》/04. 图解Redis/01. 面试篇/02. 数据结构.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{g as comp,h as data};
