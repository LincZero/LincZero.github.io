import{_ as o,c as d,e as c,o as i}from"./app-BDGujT_T.js";const p={};function n(t,e){return i(),d("div",null,e[0]||(e[0]=[c('<h1 id="dpdk报文转发" tabindex="-1"><a class="header-anchor" href="#dpdk报文转发"><span>DPDK报文转发</span></a></h1><p>基本的网络包处理主要包含：</p><p>![dpdk-packet-forwarding](03. 报文转发模型.assets/dpdk-packet-forwarding.jpg)</p><ul><li><code>Packet input</code>：报文输入。</li><li><code>Pre-processing</code>：对报文进行比较粗粒度的处理。</li><li><code>Input classification</code>：对报文进行较细粒度的分流。</li><li><code>Ingress queuing</code>：提供基于描述符的队列<code>FIFO</code>。</li><li><code>Delivery/Scheduling</code>：根据队列优先级和<code>CPU</code>状态进行调度。</li><li><code>Accelerator</code>：提供加解密和压缩/解压缩等硬件功能。</li><li><code>Egress queueing</code>：在出口上根据<code>QOS</code>等级进行调度。</li><li><code>Post processing</code>：后期报文处理释放缓存。</li><li><code>Packet output</code>：从硬件上发送出去。</li></ul><h2 id="专用网络处理器转发模型" tabindex="-1"><a class="header-anchor" href="#专用网络处理器转发模型"><span>专用网络处理器转发模型</span></a></h2><p>传统的<code>Network Processor</code>（专用网络处理器）转发的模型可以分为<code>run to completion</code>（运行至终结，简称<code>RTC</code>）模型和<code>pipeline</code>（流水线）模型。</p><p>![packet forwarding rtc](03. 报文转发模型.assets/dpdk-packet-forwarding-rtc.jpg)</p><p>![packet forwarding pipeline](03. 报文转发模型.assets/dpdk-packet-forwarding-pipeline.jpg)</p><h2 id="dpdk转发模型" tabindex="-1"><a class="header-anchor" href="#dpdk转发模型"><span>DPDK转发模型</span></a></h2><p>从<a href="https://tonydeng.github.io/sdn-handbook/dpdk/images/dpdk-packet-forwarding-rtc.jpg" target="_blank" rel="noopener noreferrer">run to completion</a>的模型中，我们可以清楚地看出，每个<code>IA</code>的物理核都负责处理整个报文的生命周期从<code>RX</code>到<code>TX</code>，这点非常类似前面所提到的<code>AMCC</code>的<code>nP</code>核的作用。在<a href="https://tonydeng.github.io/sdn-handbook/dpdk/images/dpdk-packet-forwarding-pipeline.jpg" target="_blank" rel="noopener noreferrer">pipeline</a>模型中可以看出，报文的处理被划分成不同的逻辑功能单元<code>A、B、C</code>，一个报文需分别经历<code>A、B、C</code>三个阶段，这三个阶段的功能单元可以不止一个并且可以分布在不同的物理核上，不同的功能单元可以分布在相同的核上（也可以分布在不同的核上），从这一点可以看出，其对于模块的分类和调用比<code>EZchip</code>的硬件方案更加灵活。</p><p>![numa forwarding model](03. 报文转发模型.assets/numa-forwarding-model.jpg)</p><p>![DPDK packet forwarding pipeline vs rtc](03. 报文转发模型.assets/dpdk-packet-forwarding-pipeline-vs-rtc.jpg)</p><h3 id="dpdk-run-to-completion模型" tabindex="-1"><a class="header-anchor" href="#dpdk-run-to-completion模型"><span>DPDK run to completion模型</span></a></h3><p>在<code>DPDK</code>的轮询模式中主要通过一些<code>DPDK</code>中<code>eal</code>中的参数<code>-c、-l、-l core s</code>来设置哪些核可以被<code>DPDK</code>使用，最后再把处理对应收发队列的线程绑定到对应的核上。每个报文的整个生命周期都只可能在其中一个线程中出现。和普通网络处理器的<code>run to completion</code>的模式相比，基于IA平台的通用CPU也有不少的计算资源，比如一个<code>socket</code>上面可以有独立运行的16运算单元（核），每个核上面可以有两个逻辑运算单元（<code>thread</code>）共享物理的运算单元。而多个<code>socke</code>t可以通过<code>QPI</code>总线连接在一起，这样使得每一个运算单元都可以独立地处理一个报文并且通用处理器上的编程更加简单高效，在快速开发网络功能的同时，利用硬件<code>AES-NI</code>、<code>SHA-NI</code>等特殊指令可以加速网络相关加解密和认证功能。运行到终结功能虽然有许多优势，但是针对单个报文的处理始终集中在一个逻辑单元上，无法利用其他运算单元，并且逻辑的耦合性太强，而流水线模型正好解决了以上的问题。</p><h3 id="dpdk-pipeline模型" tabindex="-1"><a class="header-anchor" href="#dpdk-pipeline模型"><span>DPDK pipeline模型</span></a></h3><p><code>pipeline</code>的主要思想就是不同的工作交给不同的模块，而每一个模块都是一个处理引擎，每个处理引擎都只单独处理特定的事务，每个处理引擎都有输入和输出，通过这些输入和输出将不同的处理引擎连接起来，完成复杂的网络功能，<code>DPDK pipeline</code>的多处理引擎实例和每个处理引擎中的组成框图可见图5-5中两个实例的图片：<code>zoom out</code>（多核应用框架）和<code>zoom in</code>（单个流水线模块）。</p><p>![dpdk popeline zoom in](03. 报文转发模型.assets/dpdk-pipeline-zoom-in.jpg)</p><p><code>Zoom out</code>的实例中包含了五个<code>DPDK pipeline</code>处理模块，每个<code>pipeline</code>作为一个特定功能的包处理模块。一个报文从进入到发送，会有两个不同的路径，上面的路径有三个模块（解析、分类、发送），下面的路径有四个模块（解析、查表、修改、发送）。<code>Zoom in</code>的图示中代表在查表的<code>pipeline</code>中有两张查找表，报文根据不同的条件可以通过一级表或两级表的查询从不同的端口发送出去。</p><p><code>DPDK</code>的<code>pipeline</code>是由三大部分组成的：</p><p>![DPDK pipeline element](03. 报文转发模型.assets/dpdk-pipeline-element.jpg)</p><p>现在<code>DPDK</code>支持的<code>pipeline</code>有以下几种：</p><ul><li><code>Packet I/O</code></li><li><code>Flow classification</code></li><li><code>Firewall</code></li><li><code>Routing</code></li><li><code>Metering</code></li></ul><h2 id="转发算法" tabindex="-1"><a class="header-anchor" href="#转发算法"><span>转发算法</span></a></h2><p>除了良好的转发框架之外，转发中很重要的一部分内容就是对于报文字段的匹配和识别，在<code>DPDK</code>中主要用到了精确匹配（<code>Exact Match</code>）算法和最长前缀匹配（<code>Longest Prefix Matching</code>，<code>LPM</code>）算法来进行报文的匹配从而获得相应的信息。</p><p>精确匹配主要需要解决两个问题：进行数据的签名（哈希），解决哈希的冲突问题，<code>DPDK</code>中主要支持<code>CRC32</code>和<code>J hash</code>。</p><p>最长前缀匹配（<code>Longest Prefix Matching</code>，<code>LPM</code>）算法是指在IP协议中被路由器用于在路由表中进行选择的一个算法。当前DPDK使用的<code>LPM</code>算法就利用内存的消耗来换取<code>LPM</code>查找的性能提升。当查找表条目的前缀长度小于24位时，只需要一次访存就能找到下一条，根据概率统计，这是占较大概率的，当前缀大于24位时，则需要两次访存，但是这种情况是小概率事件。</p><p><code>ACL</code>库利用N元组的匹配规则去进行类型匹配，提供以下基本操作：</p><p>![acl api](03. 报文转发模型.assets/acl-api.jpg)</p><p><code>Packet distributor</code>（报文分发）是DPDK提供给用户的一个用于包分发的API库，用于进行包分发。主要功能可以用下图进行描述</p><p>![packet distributor](03. 报文转发模型.assets/dpdk-packet-distributor.jpg)</p>',30)]))}const a=o(p,[["render",n],["__file","03. 报文转发模型.html.vue"]]),r=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/03.%20%E6%8A%A5%E6%96%87%E8%BD%AC%E5%8F%91%E6%A8%A1%E5%9E%8B.html","title":"DPDK报文转发","lang":"zh-CN","frontmatter":{"description":"DPDK报文转发 基本的网络包处理主要包含： ![dpdk-packet-forwarding](03. 报文转发模型.assets/dpdk-packet-forwarding.jpg) Packet input：报文输入。 Pre-processing：对报文进行比较粗粒度的处理。 Input classification：对报文进行较细粒度的分流...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/02.%20Theory/Computer/03.%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%20-%20%E4%B8%93%E9%A2%98%E6%88%96%E5%AD%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%97%E5%85%B8%E7%89%88/%E4%B8%8B%E5%B1%82%E7%9B%B8%E5%85%B3/Network/%E3%80%8Asdn-handbook%E3%80%8Btonydeng/05.%20DPDK/03.%20%E6%8A%A5%E6%96%87%E8%BD%AC%E5%8F%91%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"DPDK报文转发"}],["meta",{"property":"og:description","content":"DPDK报文转发 基本的网络包处理主要包含： ![dpdk-packet-forwarding](03. 报文转发模型.assets/dpdk-packet-forwarding.jpg) Packet input：报文输入。 Pre-processing：对报文进行比较粗粒度的处理。 Input classification：对报文进行较细粒度的分流..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DPDK报文转发\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"DPDK报文转发","slug":"dpdk报文转发","link":"#dpdk报文转发","children":[{"level":2,"title":"专用网络处理器转发模型","slug":"专用网络处理器转发模型","link":"#专用网络处理器转发模型","children":[]},{"level":2,"title":"DPDK转发模型","slug":"dpdk转发模型","link":"#dpdk转发模型","children":[{"level":3,"title":"DPDK run to completion模型","slug":"dpdk-run-to-completion模型","link":"#dpdk-run-to-completion模型","children":[]},{"level":3,"title":"DPDK pipeline模型","slug":"dpdk-pipeline模型","link":"#dpdk-pipeline模型","children":[]}]},{"level":2,"title":"转发算法","slug":"转发算法","link":"#转发算法","children":[]}]}],"git":{},"readingTime":{"minutes":5.1,"words":1530},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/03. 报文转发模型.md","excerpt":"\\n<p>基本的网络包处理主要包含：</p>\\n<p>![dpdk-packet-forwarding](03. 报文转发模型.assets/dpdk-packet-forwarding.jpg)</p>\\n<ul>\\n<li><code>Packet input</code>：报文输入。</li>\\n<li><code>Pre-processing</code>：对报文进行比较粗粒度的处理。</li>\\n<li><code>Input classification</code>：对报文进行较细粒度的分流。</li>\\n<li><code>Ingress queuing</code>：提供基于描述符的队列<code>FIFO</code>。</li>\\n<li><code>Delivery/Scheduling</code>：根据队列优先级和<code>CPU</code>状态进行调度。</li>\\n<li><code>Accelerator</code>：提供加解密和压缩/解压缩等硬件功能。</li>\\n<li><code>Egress queueing</code>：在出口上根据<code>QOS</code>等级进行调度。</li>\\n<li><code>Post processing</code>：后期报文处理释放缓存。</li>\\n<li><code>Packet output</code>：从硬件上发送出去。</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/03. 报文转发模型.md","value":{"title":"03. 报文转发模型","path":"MdNote_Public/01. DesignAndDevelop/Develop/02. Theory/Computer/03. 计算机系统 - 专题或子系统的字典版/下层相关/Network/《sdn-handbook》tonydeng/05. DPDK/03. 报文转发模型.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{a as comp,r as data};
