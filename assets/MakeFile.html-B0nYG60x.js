import{_ as s,c as a,e as l,o as e}from"./app-Dnpl954R.js";const n={};function t(k,i){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>MakeFile</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="比较-make、cmake、qmake、nmake" tabindex="-1"><a class="header-anchor" href="#比较-make、cmake、qmake、nmake"><span>比较 make、cmake、qmake、nmake</span></a></h1><h2 id="makefile-1" tabindex="-1"><a class="header-anchor" href="#makefile-1"><span>makefile</span></a></h2><ul><li>其他语言关联编译的方法（与C/C++不同） <ul><li>如果熟悉UNIX的 “<strong>make</strong>”工具（或者是Windows中的“<strong>nmake</strong>”等工具），可以认为<strong>Java编译器内置了“make”功能</strong></li><li>C++一般是使用makefile，即<strong>qmake</strong> (QT) 或 <strong>cmake</strong> (通用) 来辅助编译</li></ul></li><li>详细过程 <ul><li>没有显式地编译Employee.java。然而，当Java编译器发现EmployeeTest.java使用了Employee类时会查找名为Employee.class的文件</li><li>如果没有找到这个文件，就会自动地搜索Employee.java，然后，对它进行编译</li></ul></li></ul><h2 id="qmake-vs-cmake" tabindex="-1"><a class="header-anchor" href="#qmake-vs-cmake"><span>qmake vs cmake</span></a></h2><ul><li>cmake获取：http://www.cmake.org</li><li>选用比较 <ul><li>qmake 是为 Qt 量身打造的，使用起来非常方便</li><li>cmake 使用上不如qmake简单直接，但复杂换来的是强大的功能</li></ul></li><li>如何选择？ <ul><li><a href="http://developer.qt.nokia.com/quarterly/view/using_cmake_to_build_qt_projects" target="_blank" rel="noopener noreferrer">Using CMake to Build Qt Projects</a> 一文中说：</li><li>对简单的Qt工程，采用 qmake</li><li>对复杂度超过 qmake 处理能力的，采用 cmake</li></ul></li><li>项目区别 <ul><li>需要创建一个CMakeLists.txt文件，该文件很像是一个qmake.pro文件</li></ul></li></ul><h1 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake"><span>CMake</span></a></h1><h2 id="介绍与准备" tabindex="-1"><a class="header-anchor" href="#介绍与准备"><span>介绍与准备</span></a></h2><h3 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h3><ul><li><p>官网：https://cmake.org/</p></li><li><p>官网文档（有点丑）：https://cmake.org/documentation/</p></li><li><p>官网教程（有点丑）：https://cmake.org/cmake/help/latest/guide/tutorial/index.html</p></li><li><p>.</p></li><li><p><a href="https://www.bilibili.com/video/BV1rR4y1E7n9" target="_blank" rel="noopener noreferrer">【B站】软件构建: CMake 快速入门</a></p></li><li><p>0</p></li></ul><h3 id="ide的构建系统" tabindex="-1"><a class="header-anchor" href="#ide的构建系统"><span>IDE的构建系统</span></a></h3><p>平时使用的IDE大多都内置了构建系统，只是我们可能没有留意罢了。 他们都各有擅长的领域</p><ul><li>.| GUN Make</li><li>.| Apache Ant</li><li>(万用)| Bazel| 能完成不同语言在不同环境的构建</li><li>(万用)| Buck| 能完成不同语言在不同环境的构建</li><li>C/C++较常用| CMake</li><li>Android| Gradle</li><li>.| Maven</li><li>VS| MSBuild</li><li>Qt| QMake</li></ul><h3 id="安装cmake" tabindex="-1"><a class="header-anchor" href="#安装cmake"><span>安装CMake</span></a></h3><ul><li>官网</li><li>操作系统自带的包管理工具（例如Linux的yum，winget的choco）</li><li>其他包管理工具，笔者使用的是 cygwin</li></ul><p>安装后cmd看一下</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cmake</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="安装编译工具" tabindex="-1"><a class="header-anchor" href="#安装编译工具"><span>安装编译工具</span></a></h3><p>CMake 自身不带编译工具，要另外下clang、gcc、g++这些</p><p>然后需要指定工具链</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>VSCode 为例</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>原理：编写CMakeList.txt，该文件可以用来自动生成各目标平台下的工程文件。该过程在CMake中叫 <code>配置（Configure）</code></p><p>例如：</p><ul><li>VS| *.sln</li><li>Makefile</li><li>*.xcodeproj</li><li>...</li></ul><p>配置方法：</p><p>项目根目录下创建 CMakeLists.txt</p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cmake_minimum_required(VERSION 3.10)	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定所需最低的CMake版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">project(Example)						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 工程名，输入的可执行文件同该名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">add_executable(Example main.cpp)		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建一个可执行文件，并指定源文件（这里只编译单个文件）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>VSCode打开项目时会自动提示你进行项目 “配置”</p><p>VSCode命令：<code>Select a Kit for cmake</code>，选择一个平台原生的C++构建工具然后等配置即可</p><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><p>F7，或VSCode命令：<code>cmake build</code></p><h2 id="使用-较复杂的例子" tabindex="-1"><a class="header-anchor" href="#使用-较复杂的例子"><span>使用 - 较复杂的例子</span></a></h2><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cmake_minimum_required(VERSION 2.7)		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定所需最低的CMake版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">project(Blackhole)						</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 工程名，输入的可执行文件同该名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 寻找第三方库</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">find_package(imgui REQUIRED)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">find_package(glfw3 REQUIRED)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">find_package(GLEW REQUIRED)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">find_package(glm REQUIRED)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 匹配所有的源文件，存放于变量 SRC_FILES 中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">file(GLOB SRC_FILES</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/src/*.h&quot;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/src/*.cpp&quot;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/src/*.c&quot;,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/src/*.cc&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建可执行文件，用之前匹配到的源文件来构建</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">add_executable(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">SRC_FILES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 第三方库</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target_link_libraries(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PRIVATE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> imgui</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">:imgui)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">target_link_libraries(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> PRIVATE glfw)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">target_link_libraries(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PRIVATE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> GLEW</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">:GLEW)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">target_link_libraries(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> PRIVATE glm)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 支持C++17</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">target_compile_features(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> PRIVATE cxx_std_17)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">add_custom_command(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	TARGET </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	POST_BUILD							# 构建以后要做的事，这里将 &lt;项目根目录&gt;/assets 拷贝到 &lt;项目根目录&gt;/build/Debug/assets</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">	COMMAND </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_COMMAND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> -E copy_directory</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">			&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_SOUREC_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/assets&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">			&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">TARGET_FILE_DIR:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">&gt;/assets&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第三方库的安装" tabindex="-1"><a class="header-anchor" href="#第三方库的安装"><span>第三方库的安装</span></a></h2><p>常见的安装方式</p><ol><li><p>手动下载库的源文件。 然后手动构建并指定CMake库的路径，<code>cd glfw</code>+<code>cmake -S . -B build</code></p></li><li><p>对于Linux和Mac，可以使用包管理工具安装 例如 <code>sudo apt-get install libpng-dev</code></p><p>另外推荐：微软的开源工具：<strong>vcpkg</strong>（用于在Windows、Linux、MacOS上管理C和C++库）</p></li></ol><h2 id="一些其他常用的指令" tabindex="-1"><a class="header-anchor" href="#一些其他常用的指令"><span>一些其他常用的指令</span></a></h2><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">aux_source_directory(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> DIR_SRCS)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">aux_source_directory(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CMAKE_CURRENT_SOURCE_DIR</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">/core/src DIR_CORE)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>用于在指定的目录中查找所有的源文件，并将文件名列表存储在变量中</p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_CORE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_UTILS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_ZIP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_IXWS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_ICMP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_UDP</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">list(APPEND DIR_SRCS </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_TRACEROUTE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">add_executable(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">PROJECT_NAME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">DIR_SRCS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个CMake命令，用于向一个列表变量中追加元素</p><div class="language-makefile line-numbers-mode" data-highlighter="shiki" data-ext="makefile" data-title="makefile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">CMAKE_SOURCE_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 源代码树的顶层目录，即包含顶层CMakeLists.txt文件的目录。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">CMAKE_CURRENT_SOURCE_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当前处理的CMakeLists.txt文件所在的目录。（用得最多的）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">CMAKE_BINARY_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 构建树的顶层目录，即运行cmake命令的目录。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">CMAKE_CURRENT_BINARY_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当前处理的CMakeLists.txt文件对应的构建目录。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">PROJECT_SOURCE_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 当前项目的源代码树的顶层目录，即包含project命令的CMakeLists.txt文件所在的目录。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">projectName_SOURCE_DIR </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定项目名（projectName）的源代码树的顶层目录。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些路径的宏，这里还有更多：https://johnnado.com/cmake-directory-variables/</p>`,46)]))}const p=s(n,[["render",t],["__file","MakeFile.html.vue"]]),d=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/01.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/MakeFile.html","title":"MakeFile","lang":"zh-CN","frontmatter":{"description":"MakeFile 目录 比较 make、cmake、qmake、nmake makefile 其他语言关联编译的方法（与C/C++不同） 如果熟悉UNIX的 “make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++一般是使用makefile，即qmake (QT) 或 cmake (通用) ...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/MdNote_Public/01.%20DesignAndDevelop/Develop/03.%20Tools/03.%20%E7%AE%A1%E7%90%86%E5%B1%82/03.%20%E5%A4%9A%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/01.%20%E5%A4%9A%E6%96%87%E4%BB%B6%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F/MakeFile.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"MakeFile"}],["meta",{"property":"og:description","content":"MakeFile 目录 比较 make、cmake、qmake、nmake makefile 其他语言关联编译的方法（与C/C++不同） 如果熟悉UNIX的 “make”工具（或者是Windows中的“nmake”等工具），可以认为Java编译器内置了“make”功能 C++一般是使用makefile，即qmake (QT) 或 cmake (通用) ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MakeFile\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"MakeFile","slug":"makefile","link":"#makefile","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"比较 make、cmake、qmake、nmake","slug":"比较-make、cmake、qmake、nmake","link":"#比较-make、cmake、qmake、nmake","children":[{"level":2,"title":"makefile","slug":"makefile-1","link":"#makefile-1","children":[]},{"level":2,"title":"qmake vs cmake","slug":"qmake-vs-cmake","link":"#qmake-vs-cmake","children":[]}]},{"level":1,"title":"CMake","slug":"cmake","link":"#cmake","children":[{"level":2,"title":"介绍与准备","slug":"介绍与准备","link":"#介绍与准备","children":[{"level":3,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":3,"title":"IDE的构建系统","slug":"ide的构建系统","link":"#ide的构建系统","children":[]},{"level":3,"title":"安装CMake","slug":"安装cmake","link":"#安装cmake","children":[]},{"level":3,"title":"安装编译工具","slug":"安装编译工具","link":"#安装编译工具","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[]}]},{"level":2,"title":"使用 - 较复杂的例子","slug":"使用-较复杂的例子","link":"#使用-较复杂的例子","children":[]},{"level":2,"title":"第三方库的安装","slug":"第三方库的安装","link":"#第三方库的安装","children":[]},{"level":2,"title":"一些其他常用的指令","slug":"一些其他常用的指令","link":"#一些其他常用的指令","children":[]}]}],"git":{},"readingTime":{"minutes":3.91,"words":1173},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/01. 多文件构建系统/MakeFile.md","excerpt":"\\n<h1>目录</h1>\\n<h1>比较 make、cmake、qmake、nmake</h1>\\n<h2>makefile</h2>\\n<ul>\\n<li>其他语言关联编译的方法（与C/C++不同）\\n<ul>\\n<li>如果熟悉UNIX的 “<strong>make</strong>”工具（或者是Windows中的“<strong>nmake</strong>”等工具），可以认为<strong>Java编译器内置了“make”功能</strong></li>\\n<li>C++一般是使用makefile，即<strong>qmake</strong> (QT) 或 <strong>cmake</strong> (通用) 来辅助编译</li>\\n</ul>\\n</li>\\n<li>详细过程\\n<ul>\\n<li>没有显式地编译Employee.java。然而，当Java编译器发现EmployeeTest.java使用了Employee类时会查找名为Employee.class的文件</li>\\n<li>如果没有找到这个文件，就会自动地搜索Employee.java，然后，对它进行编译</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/01. 多文件构建系统/MakeFile.md","value":{"title":"MakeFile","path":"MdNote_Public/01. DesignAndDevelop/Develop/03. Tools/03. 管理层/03. 多项目管理/01. 多文件构建系统/MakeFile.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{p as comp,d as data};
