import{_ as n,c as s,e,o as t}from"./app-C-bjNnVy.js";const p={};function l(c,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h1 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h1><h1 id="容器类" tabindex="-1"><a class="header-anchor" href="#容器类"><span>容器类</span></a></h1><h2 id="泛型数组列表" tabindex="-1"><a class="header-anchor" href="#泛型数组列表"><span>泛型数组列表</span></a></h2><h3 id="java普通数组" tabindex="-1"><a class="header-anchor" href="#java普通数组"><span>Java普通数组</span></a></h3><p>C需要一开始就确定数组的大小</p><p>java 运行时确定数组大小</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 在Java中，它允许在运行时确定数组的大小</span>
<span class="token comment">// 缺点：一旦确定了数组的大小，改变它就不太容易了</span>
<span class="token keyword">int</span> actualSize <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span>actualSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h3><p>API: <code>java.util.ArrayList&lt;E&gt;1.2</code> API: <code>java.util.ArrayList&lt;T&gt;1.2</code></p><p>ArrayList类在添加或删除元素时，具有自动调节数组容量的功能</p><p>ArrayList是一个采用 <strong>类型参数（type parameter）</strong> 的 <strong>泛型类（generic class）</strong></p><ul><li><p>创建</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 为了指定数组列表保存的元素对象类型，需要用一对尖括号将类名括起来加在后面</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">// Java SE 7中，可以省去右边的类型参数</span>
													<span class="token comment">// 这被称为“菱形”语法，&lt;&gt;就像是一个菱形。可结合new操作符使用菱形语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>性能优化</p><ul><li><p>估算元素数量</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 估算元素数量</span>
<span class="token comment">// 如果已经清楚或能够估计出数组可能存储的元素数量，就可以在填充数组之前调用ensureCapacity方法</span>
staff<span class="token punctuation">.</span><span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 还可以把初始容量传递给ArrayList构造器</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 补充，下面两种写法不同</span>
<span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// capacity is 100</span>
<span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// size is 100</span>
staff<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// size方法将返回数组列表中包含的实际元素数目，等价于数组a的a.length</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多余空间的垃圾回收</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 垃圾回收</span>
<span class="token comment">//     一旦能够确认数组列表的大小不再发生变化，就可以调用trimToSize方法。</span>
<span class="token comment">//     这个方法将存储区域的大小调整为当前元素数量所需要的存储空间数目。垃圾回收器将回收多余的存储空间。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>add方法/remove方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 自动调节容量：</span>
<span class="token comment">// 如果调用add且内部数组已经满了，数组列表就将自动地创建一个更大的数组，并将所有的对象从较小的数组中拷贝到较大的数组中</span>

staff<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Harry Hacker&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
staff<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Tony Tester&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 除了在数组列表的尾部追加元素之外，还可以在数组列表的中间插入元素，使用带索引参数的add方法（位于n之后的所有元素都要向后移动一个位置）</span>
<span class="token comment">// remove同理</span>
staff<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> e <span class="token operator">=</span> staff<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>set方法/get方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> staff<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token comment">// add方法为数组添加新元素，而不要使用set方法，它只能替换数组中已经存在的元素内容</span>
staff<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> harry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="旧版补充" tabindex="-1"><a class="header-anchor" href="#旧版补充"><span>旧版补充</span></a></h3><ul><li>Java SE 5.0以前的版本 <ul><li>没有提供泛型类 而是有一个ArrayList类，其中保存类型为Object的元素，它是“自适应大小”的集合。 如果一定要使用老版本的Java，则需要将所有的后缀&lt;...&gt;删掉 在Java SE 5.0以后的版本中，没有后缀&lt;...&gt;仍然可以使用ArrayList，它将被认为是一个删去了类型参数的“原始”类型</li></ul></li><li>Java老版本中 <ul><li>程序员使用Vector类实现动态数组 不过，ArrayList类更好</li></ul></li></ul><h3 id="与c-不同" tabindex="-1"><a class="header-anchor" href="#与c-不同"><span><mark>与C++不同</mark></span></a></h3><p>普通数组的区别</p><ul><li><p>C</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// C需要一开始就确定数组的大小</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list_i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 在Java中，它允许在运行时确定数组的大小</span>
<span class="token comment">// 缺点：一旦确定了数组的大小，改变它就不太容易了</span>
<span class="token keyword">int</span> actualSize <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span>actualSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>泛型变成数组 - 创建</p><ul><li><p>Java</p><ul><li><p>ArrayList：<strong>泛型变长</strong>数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token comment">// Java SE 7，“菱形”语法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><p>Array：<strong>泛型定长</strong>数组</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;array&gt;
std::array &lt;typeName, N_ELEM&gt; arr;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vector等：<strong>泛型变长</strong>数组</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>#include &lt;vector&gt;
std::vector&lt;doubel&gt; vd(n);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>泛型变长数组 - 拷贝</p><ul><li>C++ <ul><li>向量拷贝是值拷贝。如果a和b是两个向量，赋值操作 a=b 将会构造一个与b长度相同的新向量a，并将所有的元素由b拷贝到a</li></ul></li><li>Java <ul><li>a=b 这条赋值语句的操作结果是让a和b引用同一个数组列表</li></ul></li></ul><p>泛型变长数组 - 访问</p><ul><li><p>ArrayList类似于C++的vector模板。ArrayList与vector都是泛型类型。 但是C++的vector模板为了便于访问元素重载了[]运算符。 由于Java没有运算符重载，所以必须调用显式的方法，使用get和set方法实现访问或改变数组元素的操作，而不使用人们喜爱的[]语法格式</p></li><li><p>Java</p><ul><li><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>staff<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> harry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Employee</span> e <span class="token operator">=</span> staff<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>C++</p><ul><li><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><pre class="language-c++"><code>a[i] = harry;
Employee e = a[i];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="类型化与原始数组列表的兼容性" tabindex="-1"><a class="header-anchor" href="#类型化与原始数组列表的兼容性"><span>类型化与原始数组列表的兼容性</span></a></h3><p>@TODO: 没懂，查书</p>`,26)]))}const o=n(p,[["render",l],["__file","03. 容器类.html.vue"]]),u=JSON.parse('{"path":"/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/03.%20%E5%AE%B9%E5%99%A8%E7%B1%BB.html","title":"Java","lang":"zh-CN","frontmatter":{"description":"Java 目录 容器类 泛型数组列表 Java普通数组 C需要一开始就确定数组的大小 java 运行时确定数组大小 ArrayList API: java.util.ArrayList<E>1.2 API: java.util.ArrayList<T>1.2 ArrayList类在添加或删除元素时，具有自动调节数组容量的功能 ArrayList是一个采...","head":[["meta",{"property":"og:url","content":"https://LincZero.github.io/undefined/MdNote_Public/01.%20DesignAndDevelop/Develop/01.%20Language/Java/06.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04.%20%E7%89%B9%E6%AE%8A%E7%B1%BB/03.%20%E5%AE%B9%E5%99%A8%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Linc 的小站"}],["meta",{"property":"og:title","content":"Java"}],["meta",{"property":"og:description","content":"Java 目录 容器类 泛型数组列表 Java普通数组 C需要一开始就确定数组的大小 java 运行时确定数组大小 ArrayList API: java.util.ArrayList<E>1.2 API: java.util.ArrayList<T>1.2 ArrayList类在添加或删除元素时，具有自动调节数组容量的功能 ArrayList是一个采..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"LincZero"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LincZero\\",\\"url\\":\\"https://github.com/LincZero/\\"}]}"]]},"headers":[{"level":1,"title":"Java","slug":"java","link":"#java","children":[]},{"level":1,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":1,"title":"容器类","slug":"容器类","link":"#容器类","children":[{"level":2,"title":"泛型数组列表","slug":"泛型数组列表","link":"#泛型数组列表","children":[{"level":3,"title":"Java普通数组","slug":"java普通数组","link":"#java普通数组","children":[]},{"level":3,"title":"ArrayList","slug":"arraylist","link":"#arraylist","children":[]},{"level":3,"title":"旧版补充","slug":"旧版补充","link":"#旧版补充","children":[]},{"level":3,"title":"与C++不同","slug":"与c-不同","link":"#与c-不同","children":[]},{"level":3,"title":"类型化与原始数组列表的兼容性","slug":"类型化与原始数组列表的兼容性","link":"#类型化与原始数组列表的兼容性","children":[]}]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.95,"words":1186},"filePathRelative":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/03. 容器类.md","excerpt":"\\n<h1>目录</h1>\\n<h1>容器类</h1>\\n<h2>泛型数组列表</h2>\\n<h3>Java普通数组</h3>\\n<p>C需要一开始就确定数组的大小</p>\\n<p>java 运行时确定数组大小</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 在Java中，它允许在运行时确定数组的大小</span>\\n<span class=\\"token comment\\">// 缺点：一旦确定了数组的大小，改变它就不太容易了</span>\\n<span class=\\"token keyword\\">int</span> actualSize <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Employee</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> staff <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Employee</span><span class=\\"token punctuation\\">[</span>actualSize<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[],"localMap":{"nodes":[{"id":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/03. 容器类.md","value":{"title":"03. 容器类","path":"MdNote_Public/01. DesignAndDevelop/Develop/01. Language/Java/06. 面向对象/04. 特殊类/03. 容器类.md","outlink":[],"backlink":[]}}],"links":[]}}}');export{o as comp,u as data};
